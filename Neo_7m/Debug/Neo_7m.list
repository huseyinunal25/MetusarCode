
Neo_7m.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049cc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08004ae0  08004ae0  00005ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e8c  08004e8c  000061d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e8c  08004e8c  00005e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e94  08004e94  000061d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e94  08004e94  00005e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e98  08004e98  00005e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08004e9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001d4  08005070  000061d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08005070  0000638c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000061d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b0a  00000000  00000000  000061fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014e4  00000000  00000000  0000cd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0000e1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000513  00000000  00000000  0000e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160a5  00000000  00000000  0000edbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f02  00000000  00000000  00024e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083c29  00000000  00000000  0002cd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b098b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029bc  00000000  00000000  000b09d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000b338c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ac4 	.word	0x08004ac4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08004ac4 	.word	0x08004ac4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char msg[] = "Hello World!\r\n";
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <main+0x4c>)
 8000a90:	463c      	mov	r4, r7
 8000a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a94:	c407      	stmia	r4!, {r0, r1, r2}
 8000a96:	8023      	strh	r3, [r4, #0]
 8000a98:	3402      	adds	r4, #2
 8000a9a:	0c1b      	lsrs	r3, r3, #16
 8000a9c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9e:	f000 fa61 	bl	8000f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa2:	f000 f81b 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa6:	f000 f885 	bl	8000bb4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000aaa:	f000 f859 	bl	8000b60 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000aae:	463b      	mov	r3, r7
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fb4d 	bl	8000150 <strlen>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	4639      	mov	r1, r7
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <main+0x50>)
 8000ac2:	f001 f99d 	bl	8001e00 <HAL_UART_Transmit>
    HAL_Delay(1000); // 1 second delay
 8000ac6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aca:	f000 faad 	bl	8001028 <HAL_Delay>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000ace:	bf00      	nop
 8000ad0:	e7ed      	b.n	8000aae <main+0x26>
 8000ad2:	bf00      	nop
 8000ad4:	08004ae0 	.word	0x08004ae0
 8000ad8:	200001f0 	.word	0x200001f0

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b090      	sub	sp, #64	@ 0x40
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0318 	add.w	r3, r7, #24
 8000ae6:	2228      	movs	r2, #40	@ 0x28
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 f8bb 	bl	8002c66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b02:	2301      	movs	r3, #1
 8000b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b06:	2310      	movs	r3, #16
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b12:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 fd0f 	bl	8001540 <HAL_RCC_OscConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b28:	f000 f87e 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b30:	2302      	movs	r3, #2
 8000b32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2102      	movs	r1, #2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 ff7c 	bl	8001a44 <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b52:	f000 f869 	bl	8000c28 <Error_Handler>
  }
}
 8000b56:	bf00      	nop
 8000b58:	3740      	adds	r7, #64	@ 0x40
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	@ (8000bb0 <MX_USART1_UART_Init+0x50>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b98:	f001 f8e2 	bl	8001d60 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ba2:	f000 f841 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200001f0 	.word	0x200001f0
 8000bb0:	40013800 	.word	0x40013800

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000be0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000be4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480a      	ldr	r0, [pc, #40]	@ (8000c24 <MX_GPIO_Init+0x70>)
 8000bfa:	f000 fb1d 	bl	8001238 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Enable USART1 clock */
  __HAL_RCC_USART1_CLK_ENABLE();
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <MX_GPIO_Init+0x6c>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	40010800 	.word	0x40010800

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <Error_Handler+0x8>

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a14      	ldr	r2, [pc, #80]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6193      	str	r3, [r2, #24]
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	4a0e      	ldr	r2, [pc, #56]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	61d3      	str	r3, [r2, #28]
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <HAL_MspInit+0x60>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <HAL_MspInit+0x60>)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010000 	.word	0x40010000

08000c98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <HAL_UART_MspInit+0x8c>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d131      	bne.n	8000d1c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <HAL_UART_MspInit+0x90>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d28 <HAL_UART_MspInit+0x90>)
 8000cbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <HAL_UART_MspInit+0x90>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <HAL_UART_MspInit+0x90>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <HAL_UART_MspInit+0x90>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_UART_MspInit+0x90>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ce8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480b      	ldr	r0, [pc, #44]	@ (8000d2c <HAL_UART_MspInit+0x94>)
 8000cfe:	f000 fa9b 	bl	8001238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <HAL_UART_MspInit+0x94>)
 8000d18:	f000 fa8e 	bl	8001238 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40013800 	.word	0x40013800
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010800 	.word	0x40010800

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <NMI_Handler+0x4>

08000d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <MemManage_Handler+0x4>

08000d48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f936 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return 1;
 8000d8c:	2301      	movs	r3, #1
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <_kill>:

int _kill(int pid, int sig)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000da0:	f001 ffb4 	bl	8002d0c <__errno>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2216      	movs	r2, #22
 8000da8:	601a      	str	r2, [r3, #0]
  return -1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_exit>:

void _exit (int status)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffe7 	bl	8000d96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <_exit+0x12>

08000dcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	e00a      	b.n	8000df4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dde:	f3af 8000 	nop.w
 8000de2:	4601      	mov	r1, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	b2ca      	uxtb	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf0      	blt.n	8000dde <_read+0x12>
  }

  return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e009      	b.n	8000e2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	60ba      	str	r2, [r7, #8]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbf1      	blt.n	8000e18 <_write+0x12>
  }
  return len;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_close>:

int _close(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e64:	605a      	str	r2, [r3, #4]
  return 0;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <_isatty>:

int _isatty(int file)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
	...

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f001 ff1c 	bl	8002d0c <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20005000 	.word	0x20005000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	20000238 	.word	0x20000238
 8000f08:	20000390 	.word	0x20000390

08000f0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f18:	f7ff fff8 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f1c:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f1e:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f20:	4a0c      	ldr	r2, [pc, #48]	@ (8000f54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a09      	ldr	r2, [pc, #36]	@ (8000f58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f34:	4c09      	ldr	r4, [pc, #36]	@ (8000f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f42:	f001 fee9 	bl	8002d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f46:	f7ff fd9f 	bl	8000a88 <main>
  bx lr
 8000f4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000f54:	08004e9c 	.word	0x08004e9c
  ldr r2, =_sbss
 8000f58:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000f5c:	2000038c 	.word	0x2000038c

08000f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC1_2_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <HAL_Init+0x28>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	@ (8000f8c <HAL_Init+0x28>)
 8000f6e:	f043 0310 	orr.w	r3, r3, #16
 8000f72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 f92b 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	200f      	movs	r0, #15
 8000f7c:	f000 f808 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff fe58 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40022000 	.word	0x40022000

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f935 	bl	800121e <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 f90b 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	@ (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <HAL_IncTick+0x1c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <HAL_IncTick+0x20>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a03      	ldr	r2, [pc, #12]	@ (8001010 <HAL_IncTick+0x20>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	20000008 	.word	0x20000008
 8001010:	2000023c 	.word	0x2000023c

08001014 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b02      	ldr	r3, [pc, #8]	@ (8001024 <HAL_GetTick+0x10>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	2000023c 	.word	0x2000023c

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff0 	bl	8001014 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffe0 	bl	8001014 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	@ (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	@ (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	@ 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	@ 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ff90 	bl	80010d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff49 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff5e 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff90 	bl	8001128 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5f 	bl	80010d4 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffb0 	bl	800118c <SysTick_Config>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b08b      	sub	sp, #44	@ 0x2c
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	e169      	b.n	8001520 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800124c:	2201      	movs	r2, #1
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 8158 	bne.w	800151a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4a9a      	ldr	r2, [pc, #616]	@ (80014d8 <HAL_GPIO_Init+0x2a0>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d05e      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001274:	4a98      	ldr	r2, [pc, #608]	@ (80014d8 <HAL_GPIO_Init+0x2a0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d875      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 800127a:	4a98      	ldr	r2, [pc, #608]	@ (80014dc <HAL_GPIO_Init+0x2a4>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d058      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001280:	4a96      	ldr	r2, [pc, #600]	@ (80014dc <HAL_GPIO_Init+0x2a4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d86f      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 8001286:	4a96      	ldr	r2, [pc, #600]	@ (80014e0 <HAL_GPIO_Init+0x2a8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d052      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 800128c:	4a94      	ldr	r2, [pc, #592]	@ (80014e0 <HAL_GPIO_Init+0x2a8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d869      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 8001292:	4a94      	ldr	r2, [pc, #592]	@ (80014e4 <HAL_GPIO_Init+0x2ac>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d04c      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001298:	4a92      	ldr	r2, [pc, #584]	@ (80014e4 <HAL_GPIO_Init+0x2ac>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d863      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 800129e:	4a92      	ldr	r2, [pc, #584]	@ (80014e8 <HAL_GPIO_Init+0x2b0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d046      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 80012a4:	4a90      	ldr	r2, [pc, #576]	@ (80014e8 <HAL_GPIO_Init+0x2b0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d85d      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 80012aa:	2b12      	cmp	r3, #18
 80012ac:	d82a      	bhi.n	8001304 <HAL_GPIO_Init+0xcc>
 80012ae:	2b12      	cmp	r3, #18
 80012b0:	d859      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 80012b2:	a201      	add	r2, pc, #4	@ (adr r2, 80012b8 <HAL_GPIO_Init+0x80>)
 80012b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b8:	08001333 	.word	0x08001333
 80012bc:	0800130d 	.word	0x0800130d
 80012c0:	0800131f 	.word	0x0800131f
 80012c4:	08001361 	.word	0x08001361
 80012c8:	08001367 	.word	0x08001367
 80012cc:	08001367 	.word	0x08001367
 80012d0:	08001367 	.word	0x08001367
 80012d4:	08001367 	.word	0x08001367
 80012d8:	08001367 	.word	0x08001367
 80012dc:	08001367 	.word	0x08001367
 80012e0:	08001367 	.word	0x08001367
 80012e4:	08001367 	.word	0x08001367
 80012e8:	08001367 	.word	0x08001367
 80012ec:	08001367 	.word	0x08001367
 80012f0:	08001367 	.word	0x08001367
 80012f4:	08001367 	.word	0x08001367
 80012f8:	08001367 	.word	0x08001367
 80012fc:	08001315 	.word	0x08001315
 8001300:	08001329 	.word	0x08001329
 8001304:	4a79      	ldr	r2, [pc, #484]	@ (80014ec <HAL_GPIO_Init+0x2b4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800130a:	e02c      	b.n	8001366 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	623b      	str	r3, [r7, #32]
          break;
 8001312:	e029      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	3304      	adds	r3, #4
 800131a:	623b      	str	r3, [r7, #32]
          break;
 800131c:	e024      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	3308      	adds	r3, #8
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e01f      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	330c      	adds	r3, #12
 800132e:	623b      	str	r3, [r7, #32]
          break;
 8001330:	e01a      	b.n	8001368 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800133a:	2304      	movs	r3, #4
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e013      	b.n	8001368 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d105      	bne.n	8001354 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001348:	2308      	movs	r3, #8
 800134a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	611a      	str	r2, [r3, #16]
          break;
 8001352:	e009      	b.n	8001368 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001354:	2308      	movs	r3, #8
 8001356:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	615a      	str	r2, [r3, #20]
          break;
 800135e:	e003      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
          break;
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x130>
          break;
 8001366:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2bff      	cmp	r3, #255	@ 0xff
 800136c:	d801      	bhi.n	8001372 <HAL_GPIO_Init+0x13a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	e001      	b.n	8001376 <HAL_GPIO_Init+0x13e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3304      	adds	r3, #4
 8001376:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2bff      	cmp	r3, #255	@ 0xff
 800137c:	d802      	bhi.n	8001384 <HAL_GPIO_Init+0x14c>
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	e002      	b.n	800138a <HAL_GPIO_Init+0x152>
 8001384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001386:	3b08      	subs	r3, #8
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	210f      	movs	r1, #15
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	401a      	ands	r2, r3
 800139c:	6a39      	ldr	r1, [r7, #32]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	431a      	orrs	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 80b1 	beq.w	800151a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013b8:	4b4d      	ldr	r3, [pc, #308]	@ (80014f0 <HAL_GPIO_Init+0x2b8>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a4c      	ldr	r2, [pc, #304]	@ (80014f0 <HAL_GPIO_Init+0x2b8>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b4a      	ldr	r3, [pc, #296]	@ (80014f0 <HAL_GPIO_Init+0x2b8>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013d0:	4a48      	ldr	r2, [pc, #288]	@ (80014f4 <HAL_GPIO_Init+0x2bc>)
 80013d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	4013      	ands	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a40      	ldr	r2, [pc, #256]	@ (80014f8 <HAL_GPIO_Init+0x2c0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d013      	beq.n	8001424 <HAL_GPIO_Init+0x1ec>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a3f      	ldr	r2, [pc, #252]	@ (80014fc <HAL_GPIO_Init+0x2c4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d00d      	beq.n	8001420 <HAL_GPIO_Init+0x1e8>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a3e      	ldr	r2, [pc, #248]	@ (8001500 <HAL_GPIO_Init+0x2c8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d007      	beq.n	800141c <HAL_GPIO_Init+0x1e4>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a3d      	ldr	r2, [pc, #244]	@ (8001504 <HAL_GPIO_Init+0x2cc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d101      	bne.n	8001418 <HAL_GPIO_Init+0x1e0>
 8001414:	2303      	movs	r3, #3
 8001416:	e006      	b.n	8001426 <HAL_GPIO_Init+0x1ee>
 8001418:	2304      	movs	r3, #4
 800141a:	e004      	b.n	8001426 <HAL_GPIO_Init+0x1ee>
 800141c:	2302      	movs	r3, #2
 800141e:	e002      	b.n	8001426 <HAL_GPIO_Init+0x1ee>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <HAL_GPIO_Init+0x1ee>
 8001424:	2300      	movs	r3, #0
 8001426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001428:	f002 0203 	and.w	r2, r2, #3
 800142c:	0092      	lsls	r2, r2, #2
 800142e:	4093      	lsls	r3, r2
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001436:	492f      	ldr	r1, [pc, #188]	@ (80014f4 <HAL_GPIO_Init+0x2bc>)
 8001438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001450:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	492c      	ldr	r1, [pc, #176]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	43db      	mvns	r3, r3
 8001466:	4928      	ldr	r1, [pc, #160]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 8001468:	4013      	ands	r3, r2
 800146a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001478:	4b23      	ldr	r3, [pc, #140]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	4922      	ldr	r1, [pc, #136]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	60cb      	str	r3, [r1, #12]
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001486:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	43db      	mvns	r3, r3
 800148e:	491e      	ldr	r1, [pc, #120]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 8001490:	4013      	ands	r3, r2
 8001492:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4918      	ldr	r1, [pc, #96]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4914      	ldr	r1, [pc, #80]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d021      	beq.n	800150c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	490e      	ldr	r1, [pc, #56]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]
 80014d4:	e021      	b.n	800151a <HAL_GPIO_Init+0x2e2>
 80014d6:	bf00      	nop
 80014d8:	10320000 	.word	0x10320000
 80014dc:	10310000 	.word	0x10310000
 80014e0:	10220000 	.word	0x10220000
 80014e4:	10210000 	.word	0x10210000
 80014e8:	10120000 	.word	0x10120000
 80014ec:	10110000 	.word	0x10110000
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010000 	.word	0x40010000
 80014f8:	40010800 	.word	0x40010800
 80014fc:	40010c00 	.word	0x40010c00
 8001500:	40011000 	.word	0x40011000
 8001504:	40011400 	.word	0x40011400
 8001508:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800150c:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <HAL_GPIO_Init+0x304>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	43db      	mvns	r3, r3
 8001514:	4909      	ldr	r1, [pc, #36]	@ (800153c <HAL_GPIO_Init+0x304>)
 8001516:	4013      	ands	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151c:	3301      	adds	r3, #1
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	fa22 f303 	lsr.w	r3, r2, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	f47f ae8e 	bne.w	800124c <HAL_GPIO_Init+0x14>
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	372c      	adds	r7, #44	@ 0x2c
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40010400 	.word	0x40010400

08001540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e272      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8087 	beq.w	800166e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001560:	4b92      	ldr	r3, [pc, #584]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b04      	cmp	r3, #4
 800156a:	d00c      	beq.n	8001586 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800156c:	4b8f      	ldr	r3, [pc, #572]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b08      	cmp	r3, #8
 8001576:	d112      	bne.n	800159e <HAL_RCC_OscConfig+0x5e>
 8001578:	4b8c      	ldr	r3, [pc, #560]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001584:	d10b      	bne.n	800159e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001586:	4b89      	ldr	r3, [pc, #548]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d06c      	beq.n	800166c <HAL_RCC_OscConfig+0x12c>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d168      	bne.n	800166c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e24c      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a6:	d106      	bne.n	80015b6 <HAL_RCC_OscConfig+0x76>
 80015a8:	4b80      	ldr	r3, [pc, #512]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a7f      	ldr	r2, [pc, #508]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	e02e      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x98>
 80015be:	4b7b      	ldr	r3, [pc, #492]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a7a      	ldr	r2, [pc, #488]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b78      	ldr	r3, [pc, #480]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a77      	ldr	r2, [pc, #476]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e01d      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0xbc>
 80015e2:	4b72      	ldr	r3, [pc, #456]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a71      	ldr	r2, [pc, #452]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b6f      	ldr	r3, [pc, #444]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6e      	ldr	r2, [pc, #440]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015fc:	4b6b      	ldr	r3, [pc, #428]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a6a      	ldr	r2, [pc, #424]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b68      	ldr	r3, [pc, #416]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a67      	ldr	r2, [pc, #412]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001612:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fcfa 	bl	8001014 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fcf6 	bl	8001014 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	@ 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e200      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b5d      	ldr	r3, [pc, #372]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0xe4>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fce6 	bl	8001014 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fce2 	bl	8001014 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	@ 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1ec      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	4b53      	ldr	r3, [pc, #332]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x10c>
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d063      	beq.n	8001742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800167a:	4b4c      	ldr	r3, [pc, #304]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001686:	4b49      	ldr	r3, [pc, #292]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b08      	cmp	r3, #8
 8001690:	d11c      	bne.n	80016cc <HAL_RCC_OscConfig+0x18c>
 8001692:	4b46      	ldr	r3, [pc, #280]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d116      	bne.n	80016cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	4b43      	ldr	r3, [pc, #268]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_RCC_OscConfig+0x176>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e1c0      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4939      	ldr	r1, [pc, #228]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ca:	e03a      	b.n	8001742 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d020      	beq.n	8001716 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d4:	4b36      	ldr	r3, [pc, #216]	@ (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fc9b 	bl	8001014 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e2:	f7ff fc97 	bl	8001014 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e1a1      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	4b2d      	ldr	r3, [pc, #180]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001700:	4b2a      	ldr	r3, [pc, #168]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4927      	ldr	r1, [pc, #156]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001716:	4b26      	ldr	r3, [pc, #152]	@ (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fc7a 	bl	8001014 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff fc76 	bl	8001014 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e180      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d03a      	beq.n	80017c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d019      	beq.n	800178a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7ff fc5a 	bl	8001014 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff fc56 	bl	8001014 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e160      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001782:	2001      	movs	r0, #1
 8001784:	f000 face 	bl	8001d24 <RCC_Delay>
 8001788:	e01c      	b.n	80017c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_RCC_OscConfig+0x274>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7ff fc40 	bl	8001014 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001796:	e00f      	b.n	80017b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fc3c 	bl	8001014 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d908      	bls.n	80017b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e146      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	42420000 	.word	0x42420000
 80017b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	4b92      	ldr	r3, [pc, #584]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e9      	bne.n	8001798 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a6 	beq.w	800191e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d6:	4b8b      	ldr	r3, [pc, #556]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10d      	bne.n	80017fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b88      	ldr	r3, [pc, #544]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a87      	ldr	r2, [pc, #540]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b85      	ldr	r3, [pc, #532]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fa:	2301      	movs	r3, #1
 80017fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fe:	4b82      	ldr	r3, [pc, #520]	@ (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d118      	bne.n	800183c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001816:	f7ff fbfd 	bl	8001014 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181e:	f7ff fbf9 	bl	8001014 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b64      	cmp	r3, #100	@ 0x64
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e103      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	4b75      	ldr	r3, [pc, #468]	@ (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x312>
 8001844:	4b6f      	ldr	r3, [pc, #444]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a6e      	ldr	r2, [pc, #440]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	e02d      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x334>
 800185a:	4b6a      	ldr	r3, [pc, #424]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a69      	ldr	r2, [pc, #420]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	4b67      	ldr	r3, [pc, #412]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4a66      	ldr	r2, [pc, #408]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	6213      	str	r3, [r2, #32]
 8001872:	e01c      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b05      	cmp	r3, #5
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0x356>
 800187c:	4b61      	ldr	r3, [pc, #388]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4a60      	ldr	r2, [pc, #384]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6213      	str	r3, [r2, #32]
 8001888:	4b5e      	ldr	r3, [pc, #376]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a5d      	ldr	r2, [pc, #372]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	e00b      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001896:	4b5b      	ldr	r3, [pc, #364]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a5a      	ldr	r2, [pc, #360]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6213      	str	r3, [r2, #32]
 80018a2:	4b58      	ldr	r3, [pc, #352]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d015      	beq.n	80018e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b6:	f7ff fbad 	bl	8001014 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff fba9 	bl	8001014 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0b1      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ee      	beq.n	80018be <HAL_RCC_OscConfig+0x37e>
 80018e0:	e014      	b.n	800190c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fb97 	bl	8001014 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7ff fb93 	bl	8001014 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e09b      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	4b40      	ldr	r3, [pc, #256]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1ee      	bne.n	80018ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d105      	bne.n	800191e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001912:	4b3c      	ldr	r3, [pc, #240]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4a3b      	ldr	r2, [pc, #236]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800191c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8087 	beq.w	8001a36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001928:	4b36      	ldr	r3, [pc, #216]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d061      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d146      	bne.n	80019ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193c:	4b33      	ldr	r3, [pc, #204]	@ (8001a0c <HAL_RCC_OscConfig+0x4cc>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff fb67 	bl	8001014 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff fb63 	bl	8001014 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e06d      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195c:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001970:	d108      	bne.n	8001984 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001972:	4b24      	ldr	r3, [pc, #144]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	4921      	ldr	r1, [pc, #132]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001984:	4b1f      	ldr	r3, [pc, #124]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a19      	ldr	r1, [r3, #32]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001994:	430b      	orrs	r3, r1
 8001996:	491b      	ldr	r1, [pc, #108]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <HAL_RCC_OscConfig+0x4cc>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff fb37 	bl	8001014 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff fb33 	bl	8001014 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e03d      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x46a>
 80019c8:	e035      	b.n	8001a36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <HAL_RCC_OscConfig+0x4cc>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fb20 	bl	8001014 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff fb1c 	bl	8001014 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e026      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x498>
 80019f6:	e01e      	b.n	8001a36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e019      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a10:	4b0b      	ldr	r3, [pc, #44]	@ (8001a40 <HAL_RCC_OscConfig+0x500>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0d0      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a58:	4b6a      	ldr	r3, [pc, #424]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d910      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b67      	ldr	r3, [pc, #412]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 0207 	bic.w	r2, r3, #7
 8001a6e:	4965      	ldr	r1, [pc, #404]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b63      	ldr	r3, [pc, #396]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0b8      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa0:	4b59      	ldr	r3, [pc, #356]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a58      	ldr	r2, [pc, #352]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab8:	4b53      	ldr	r3, [pc, #332]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a52      	ldr	r2, [pc, #328]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ac2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	4b50      	ldr	r3, [pc, #320]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	494d      	ldr	r1, [pc, #308]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d040      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b47      	ldr	r3, [pc, #284]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d115      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e07f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b02:	4b41      	ldr	r3, [pc, #260]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e073      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b12:	4b3d      	ldr	r3, [pc, #244]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e06b      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b22:	4b39      	ldr	r3, [pc, #228]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f023 0203 	bic.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4936      	ldr	r1, [pc, #216]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b34:	f7ff fa6e 	bl	8001014 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3c:	f7ff fa6a 	bl	8001014 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e053      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	4b2d      	ldr	r3, [pc, #180]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 020c 	and.w	r2, r3, #12
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d1eb      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b64:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d210      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b24      	ldr	r3, [pc, #144]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 0207 	bic.w	r2, r3, #7
 8001b7a:	4922      	ldr	r1, [pc, #136]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b20      	ldr	r3, [pc, #128]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e032      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba0:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4916      	ldr	r1, [pc, #88]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bbe:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	490e      	ldr	r1, [pc, #56]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bd2:	f000 f821 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	490a      	ldr	r1, [pc, #40]	@ (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	5ccb      	ldrb	r3, [r1, r3]
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	4a09      	ldr	r2, [pc, #36]	@ (8001c10 <HAL_RCC_ClockConfig+0x1cc>)
 8001bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bee:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <HAL_RCC_ClockConfig+0x1d0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f9cc 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08004af0 	.word	0x08004af0
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x94>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d002      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x30>
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0x36>
 8001c46:	e027      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c4a:	613b      	str	r3, [r7, #16]
      break;
 8001c4c:	e027      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	0c9b      	lsrs	r3, r3, #18
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	4a17      	ldr	r2, [pc, #92]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c58:	5cd3      	ldrb	r3, [r2, r3]
 8001c5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d010      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x94>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	0c5b      	lsrs	r3, r3, #17
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	4a11      	ldr	r2, [pc, #68]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c7a:	fb03 f202 	mul.w	r2, r3, r2
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e004      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c8c:	fb02 f303 	mul.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	613b      	str	r3, [r7, #16]
      break;
 8001c96:	e002      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c9a:	613b      	str	r3, [r7, #16]
      break;
 8001c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9e:	693b      	ldr	r3, [r7, #16]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	007a1200 	.word	0x007a1200
 8001cb4:	08004b08 	.word	0x08004b08
 8001cb8:	08004b18 	.word	0x08004b18
 8001cbc:	003d0900 	.word	0x003d0900

08001cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	@ (8001cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd8:	f7ff fff2 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4903      	ldr	r1, [pc, #12]	@ (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08004b00 	.word	0x08004b00

08001cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d00:	f7ff ffde 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	0adb      	lsrs	r3, r3, #11
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4903      	ldr	r1, [pc, #12]	@ (8001d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	08004b00 	.word	0x08004b00

08001d24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <RCC_Delay+0x34>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <RCC_Delay+0x38>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	0a5b      	lsrs	r3, r3, #9
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d40:	bf00      	nop
  }
  while (Delay --);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1e5a      	subs	r2, r3, #1
 8001d46:	60fa      	str	r2, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f9      	bne.n	8001d40 <RCC_Delay+0x1c>
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	10624dd3 	.word	0x10624dd3

08001d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e042      	b.n	8001df8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe ff86 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2224      	movs	r2, #36	@ 0x24
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f971 	bl	800208c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	@ 0x28
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d175      	bne.n	8001f0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <HAL_UART_Transmit+0x2c>
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e06e      	b.n	8001f0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2221      	movs	r2, #33	@ 0x21
 8001e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e3e:	f7ff f8e9 	bl	8001014 <HAL_GetTick>
 8001e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	88fa      	ldrh	r2, [r7, #6]
 8001e48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	88fa      	ldrh	r2, [r7, #6]
 8001e4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e58:	d108      	bne.n	8001e6c <HAL_UART_Transmit+0x6c>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d104      	bne.n	8001e6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	e003      	b.n	8001e74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e74:	e02e      	b.n	8001ed4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2180      	movs	r1, #128	@ 0x80
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 f848 	bl	8001f16 <UART_WaitOnFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e03a      	b.n	8001f0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	e007      	b.n	8001ec6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1cb      	bne.n	8001e76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2140      	movs	r1, #64	@ 0x40
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f814 	bl	8001f16 <UART_WaitOnFlagUntilTimeout>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e006      	b.n	8001f0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e000      	b.n	8001f0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f0c:	2302      	movs	r3, #2
  }
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4613      	mov	r3, r2
 8001f24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f26:	e03b      	b.n	8001fa0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2e:	d037      	beq.n	8001fa0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f30:	f7ff f870 	bl	8001014 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	6a3a      	ldr	r2, [r7, #32]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d302      	bcc.n	8001f46 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e03a      	b.n	8001fc0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d023      	beq.n	8001fa0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b80      	cmp	r3, #128	@ 0x80
 8001f5c:	d020      	beq.n	8001fa0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b40      	cmp	r3, #64	@ 0x40
 8001f62:	d01d      	beq.n	8001fa0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d116      	bne.n	8001fa0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f81d 	bl	8001fc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2208      	movs	r2, #8
 8001f92:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e00f      	b.n	8001fc0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d0b4      	beq.n	8001f28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b095      	sub	sp, #84	@ 0x54
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	330c      	adds	r3, #12
 8001fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fda:	e853 3f00 	ldrex	r3, [r3]
 8001fde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	330c      	adds	r3, #12
 8001fee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ff0:	643a      	str	r2, [r7, #64]	@ 0x40
 8001ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001ff6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ff8:	e841 2300 	strex	r3, r2, [r1]
 8001ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1e5      	bne.n	8001fd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3314      	adds	r3, #20
 800200a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	e853 3f00 	ldrex	r3, [r3]
 8002012:	61fb      	str	r3, [r7, #28]
   return(result);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3314      	adds	r3, #20
 8002022:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002024:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800202a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800202c:	e841 2300 	strex	r3, r2, [r1]
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1e5      	bne.n	8002004 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	2b01      	cmp	r3, #1
 800203e:	d119      	bne.n	8002074 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	330c      	adds	r3, #12
 8002046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	e853 3f00 	ldrex	r3, [r3]
 800204e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f023 0310 	bic.w	r3, r3, #16
 8002056:	647b      	str	r3, [r7, #68]	@ 0x44
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	330c      	adds	r3, #12
 800205e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002060:	61ba      	str	r2, [r7, #24]
 8002062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002064:	6979      	ldr	r1, [r7, #20]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	e841 2300 	strex	r3, r2, [r1]
 800206c:	613b      	str	r3, [r7, #16]
   return(result);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e5      	bne.n	8002040 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002082:	bf00      	nop
 8002084:	3754      	adds	r7, #84	@ 0x54
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80020c6:	f023 030c 	bic.w	r3, r3, #12
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	430b      	orrs	r3, r1
 80020d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a2c      	ldr	r2, [pc, #176]	@ (80021a0 <UART_SetConfig+0x114>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d103      	bne.n	80020fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020f4:	f7ff fe02 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	e002      	b.n	8002102 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020fc:	f7ff fdea 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8002100:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	009a      	lsls	r2, r3, #2
 800210c:	441a      	add	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	4a22      	ldr	r2, [pc, #136]	@ (80021a4 <UART_SetConfig+0x118>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	0119      	lsls	r1, r3, #4
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	009a      	lsls	r2, r3, #2
 800212c:	441a      	add	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	fbb2 f2f3 	udiv	r2, r2, r3
 8002138:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <UART_SetConfig+0x118>)
 800213a:	fba3 0302 	umull	r0, r3, r3, r2
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2064      	movs	r0, #100	@ 0x64
 8002142:	fb00 f303 	mul.w	r3, r0, r3
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	3332      	adds	r3, #50	@ 0x32
 800214c:	4a15      	ldr	r2, [pc, #84]	@ (80021a4 <UART_SetConfig+0x118>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002158:	4419      	add	r1, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	009a      	lsls	r2, r3, #2
 8002164:	441a      	add	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002170:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <UART_SetConfig+0x118>)
 8002172:	fba3 0302 	umull	r0, r3, r3, r2
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2064      	movs	r0, #100	@ 0x64
 800217a:	fb00 f303 	mul.w	r3, r0, r3
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	3332      	adds	r3, #50	@ 0x32
 8002184:	4a07      	ldr	r2, [pc, #28]	@ (80021a4 <UART_SetConfig+0x118>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	f003 020f 	and.w	r2, r3, #15
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	440a      	add	r2, r1
 8002196:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40013800 	.word	0x40013800
 80021a4:	51eb851f 	.word	0x51eb851f

080021a8 <__cvt>:
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021ae:	461d      	mov	r5, r3
 80021b0:	bfbb      	ittet	lt
 80021b2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80021b6:	461d      	movlt	r5, r3
 80021b8:	2300      	movge	r3, #0
 80021ba:	232d      	movlt	r3, #45	@ 0x2d
 80021bc:	b088      	sub	sp, #32
 80021be:	4614      	mov	r4, r2
 80021c0:	bfb8      	it	lt
 80021c2:	4614      	movlt	r4, r2
 80021c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80021c6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80021c8:	7013      	strb	r3, [r2, #0]
 80021ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80021cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80021d0:	f023 0820 	bic.w	r8, r3, #32
 80021d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80021d8:	d005      	beq.n	80021e6 <__cvt+0x3e>
 80021da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80021de:	d100      	bne.n	80021e2 <__cvt+0x3a>
 80021e0:	3601      	adds	r6, #1
 80021e2:	2302      	movs	r3, #2
 80021e4:	e000      	b.n	80021e8 <__cvt+0x40>
 80021e6:	2303      	movs	r3, #3
 80021e8:	aa07      	add	r2, sp, #28
 80021ea:	9204      	str	r2, [sp, #16]
 80021ec:	aa06      	add	r2, sp, #24
 80021ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80021f2:	e9cd 3600 	strd	r3, r6, [sp]
 80021f6:	4622      	mov	r2, r4
 80021f8:	462b      	mov	r3, r5
 80021fa:	f000 fe59 	bl	8002eb0 <_dtoa_r>
 80021fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002202:	4607      	mov	r7, r0
 8002204:	d119      	bne.n	800223a <__cvt+0x92>
 8002206:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002208:	07db      	lsls	r3, r3, #31
 800220a:	d50e      	bpl.n	800222a <__cvt+0x82>
 800220c:	eb00 0906 	add.w	r9, r0, r6
 8002210:	2200      	movs	r2, #0
 8002212:	2300      	movs	r3, #0
 8002214:	4620      	mov	r0, r4
 8002216:	4629      	mov	r1, r5
 8002218:	f7fe fbc6 	bl	80009a8 <__aeabi_dcmpeq>
 800221c:	b108      	cbz	r0, 8002222 <__cvt+0x7a>
 800221e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002222:	2230      	movs	r2, #48	@ 0x30
 8002224:	9b07      	ldr	r3, [sp, #28]
 8002226:	454b      	cmp	r3, r9
 8002228:	d31e      	bcc.n	8002268 <__cvt+0xc0>
 800222a:	4638      	mov	r0, r7
 800222c:	9b07      	ldr	r3, [sp, #28]
 800222e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002230:	1bdb      	subs	r3, r3, r7
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	b008      	add	sp, #32
 8002236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800223a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800223e:	eb00 0906 	add.w	r9, r0, r6
 8002242:	d1e5      	bne.n	8002210 <__cvt+0x68>
 8002244:	7803      	ldrb	r3, [r0, #0]
 8002246:	2b30      	cmp	r3, #48	@ 0x30
 8002248:	d10a      	bne.n	8002260 <__cvt+0xb8>
 800224a:	2200      	movs	r2, #0
 800224c:	2300      	movs	r3, #0
 800224e:	4620      	mov	r0, r4
 8002250:	4629      	mov	r1, r5
 8002252:	f7fe fba9 	bl	80009a8 <__aeabi_dcmpeq>
 8002256:	b918      	cbnz	r0, 8002260 <__cvt+0xb8>
 8002258:	f1c6 0601 	rsb	r6, r6, #1
 800225c:	f8ca 6000 	str.w	r6, [sl]
 8002260:	f8da 3000 	ldr.w	r3, [sl]
 8002264:	4499      	add	r9, r3
 8002266:	e7d3      	b.n	8002210 <__cvt+0x68>
 8002268:	1c59      	adds	r1, r3, #1
 800226a:	9107      	str	r1, [sp, #28]
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e7d9      	b.n	8002224 <__cvt+0x7c>

08002270 <__exponent>:
 8002270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002272:	2900      	cmp	r1, #0
 8002274:	bfb6      	itet	lt
 8002276:	232d      	movlt	r3, #45	@ 0x2d
 8002278:	232b      	movge	r3, #43	@ 0x2b
 800227a:	4249      	neglt	r1, r1
 800227c:	2909      	cmp	r1, #9
 800227e:	7002      	strb	r2, [r0, #0]
 8002280:	7043      	strb	r3, [r0, #1]
 8002282:	dd29      	ble.n	80022d8 <__exponent+0x68>
 8002284:	f10d 0307 	add.w	r3, sp, #7
 8002288:	461d      	mov	r5, r3
 800228a:	270a      	movs	r7, #10
 800228c:	fbb1 f6f7 	udiv	r6, r1, r7
 8002290:	461a      	mov	r2, r3
 8002292:	fb07 1416 	mls	r4, r7, r6, r1
 8002296:	3430      	adds	r4, #48	@ 0x30
 8002298:	f802 4c01 	strb.w	r4, [r2, #-1]
 800229c:	460c      	mov	r4, r1
 800229e:	2c63      	cmp	r4, #99	@ 0x63
 80022a0:	4631      	mov	r1, r6
 80022a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80022a6:	dcf1      	bgt.n	800228c <__exponent+0x1c>
 80022a8:	3130      	adds	r1, #48	@ 0x30
 80022aa:	1e94      	subs	r4, r2, #2
 80022ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80022b0:	4623      	mov	r3, r4
 80022b2:	1c41      	adds	r1, r0, #1
 80022b4:	42ab      	cmp	r3, r5
 80022b6:	d30a      	bcc.n	80022ce <__exponent+0x5e>
 80022b8:	f10d 0309 	add.w	r3, sp, #9
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	42ac      	cmp	r4, r5
 80022c0:	bf88      	it	hi
 80022c2:	2300      	movhi	r3, #0
 80022c4:	3302      	adds	r3, #2
 80022c6:	4403      	add	r3, r0
 80022c8:	1a18      	subs	r0, r3, r0
 80022ca:	b003      	add	sp, #12
 80022cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80022d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80022d6:	e7ed      	b.n	80022b4 <__exponent+0x44>
 80022d8:	2330      	movs	r3, #48	@ 0x30
 80022da:	3130      	adds	r1, #48	@ 0x30
 80022dc:	7083      	strb	r3, [r0, #2]
 80022de:	70c1      	strb	r1, [r0, #3]
 80022e0:	1d03      	adds	r3, r0, #4
 80022e2:	e7f1      	b.n	80022c8 <__exponent+0x58>

080022e4 <_printf_float>:
 80022e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e8:	b091      	sub	sp, #68	@ 0x44
 80022ea:	460c      	mov	r4, r1
 80022ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80022f0:	4616      	mov	r6, r2
 80022f2:	461f      	mov	r7, r3
 80022f4:	4605      	mov	r5, r0
 80022f6:	f000 fcbf 	bl	8002c78 <_localeconv_r>
 80022fa:	6803      	ldr	r3, [r0, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	9308      	str	r3, [sp, #32]
 8002300:	f7fd ff26 	bl	8000150 <strlen>
 8002304:	2300      	movs	r3, #0
 8002306:	930e      	str	r3, [sp, #56]	@ 0x38
 8002308:	f8d8 3000 	ldr.w	r3, [r8]
 800230c:	9009      	str	r0, [sp, #36]	@ 0x24
 800230e:	3307      	adds	r3, #7
 8002310:	f023 0307 	bic.w	r3, r3, #7
 8002314:	f103 0208 	add.w	r2, r3, #8
 8002318:	f894 a018 	ldrb.w	sl, [r4, #24]
 800231c:	f8d4 b000 	ldr.w	fp, [r4]
 8002320:	f8c8 2000 	str.w	r2, [r8]
 8002324:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002328:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800232c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800232e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002332:	f04f 32ff 	mov.w	r2, #4294967295
 8002336:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800233a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800233e:	4b9c      	ldr	r3, [pc, #624]	@ (80025b0 <_printf_float+0x2cc>)
 8002340:	f7fe fb64 	bl	8000a0c <__aeabi_dcmpun>
 8002344:	bb70      	cbnz	r0, 80023a4 <_printf_float+0xc0>
 8002346:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800234a:	f04f 32ff 	mov.w	r2, #4294967295
 800234e:	4b98      	ldr	r3, [pc, #608]	@ (80025b0 <_printf_float+0x2cc>)
 8002350:	f7fe fb3e 	bl	80009d0 <__aeabi_dcmple>
 8002354:	bb30      	cbnz	r0, 80023a4 <_printf_float+0xc0>
 8002356:	2200      	movs	r2, #0
 8002358:	2300      	movs	r3, #0
 800235a:	4640      	mov	r0, r8
 800235c:	4649      	mov	r1, r9
 800235e:	f7fe fb2d 	bl	80009bc <__aeabi_dcmplt>
 8002362:	b110      	cbz	r0, 800236a <_printf_float+0x86>
 8002364:	232d      	movs	r3, #45	@ 0x2d
 8002366:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800236a:	4a92      	ldr	r2, [pc, #584]	@ (80025b4 <_printf_float+0x2d0>)
 800236c:	4b92      	ldr	r3, [pc, #584]	@ (80025b8 <_printf_float+0x2d4>)
 800236e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002372:	bf8c      	ite	hi
 8002374:	4690      	movhi	r8, r2
 8002376:	4698      	movls	r8, r3
 8002378:	2303      	movs	r3, #3
 800237a:	f04f 0900 	mov.w	r9, #0
 800237e:	6123      	str	r3, [r4, #16]
 8002380:	f02b 0304 	bic.w	r3, fp, #4
 8002384:	6023      	str	r3, [r4, #0]
 8002386:	4633      	mov	r3, r6
 8002388:	4621      	mov	r1, r4
 800238a:	4628      	mov	r0, r5
 800238c:	9700      	str	r7, [sp, #0]
 800238e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002390:	f000 f9d4 	bl	800273c <_printf_common>
 8002394:	3001      	adds	r0, #1
 8002396:	f040 8090 	bne.w	80024ba <_printf_float+0x1d6>
 800239a:	f04f 30ff 	mov.w	r0, #4294967295
 800239e:	b011      	add	sp, #68	@ 0x44
 80023a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023a4:	4642      	mov	r2, r8
 80023a6:	464b      	mov	r3, r9
 80023a8:	4640      	mov	r0, r8
 80023aa:	4649      	mov	r1, r9
 80023ac:	f7fe fb2e 	bl	8000a0c <__aeabi_dcmpun>
 80023b0:	b148      	cbz	r0, 80023c6 <_printf_float+0xe2>
 80023b2:	464b      	mov	r3, r9
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bfb8      	it	lt
 80023b8:	232d      	movlt	r3, #45	@ 0x2d
 80023ba:	4a80      	ldr	r2, [pc, #512]	@ (80025bc <_printf_float+0x2d8>)
 80023bc:	bfb8      	it	lt
 80023be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80023c2:	4b7f      	ldr	r3, [pc, #508]	@ (80025c0 <_printf_float+0x2dc>)
 80023c4:	e7d3      	b.n	800236e <_printf_float+0x8a>
 80023c6:	6863      	ldr	r3, [r4, #4]
 80023c8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	d13f      	bne.n	8002450 <_printf_float+0x16c>
 80023d0:	2306      	movs	r3, #6
 80023d2:	6063      	str	r3, [r4, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80023da:	6023      	str	r3, [r4, #0]
 80023dc:	9206      	str	r2, [sp, #24]
 80023de:	aa0e      	add	r2, sp, #56	@ 0x38
 80023e0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80023e4:	aa0d      	add	r2, sp, #52	@ 0x34
 80023e6:	9203      	str	r2, [sp, #12]
 80023e8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80023ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80023f0:	6863      	ldr	r3, [r4, #4]
 80023f2:	4642      	mov	r2, r8
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	4628      	mov	r0, r5
 80023f8:	464b      	mov	r3, r9
 80023fa:	910a      	str	r1, [sp, #40]	@ 0x28
 80023fc:	f7ff fed4 	bl	80021a8 <__cvt>
 8002400:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002402:	4680      	mov	r8, r0
 8002404:	2947      	cmp	r1, #71	@ 0x47
 8002406:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002408:	d128      	bne.n	800245c <_printf_float+0x178>
 800240a:	1cc8      	adds	r0, r1, #3
 800240c:	db02      	blt.n	8002414 <_printf_float+0x130>
 800240e:	6863      	ldr	r3, [r4, #4]
 8002410:	4299      	cmp	r1, r3
 8002412:	dd40      	ble.n	8002496 <_printf_float+0x1b2>
 8002414:	f1aa 0a02 	sub.w	sl, sl, #2
 8002418:	fa5f fa8a 	uxtb.w	sl, sl
 800241c:	4652      	mov	r2, sl
 800241e:	3901      	subs	r1, #1
 8002420:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002424:	910d      	str	r1, [sp, #52]	@ 0x34
 8002426:	f7ff ff23 	bl	8002270 <__exponent>
 800242a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800242c:	4681      	mov	r9, r0
 800242e:	1813      	adds	r3, r2, r0
 8002430:	2a01      	cmp	r2, #1
 8002432:	6123      	str	r3, [r4, #16]
 8002434:	dc02      	bgt.n	800243c <_printf_float+0x158>
 8002436:	6822      	ldr	r2, [r4, #0]
 8002438:	07d2      	lsls	r2, r2, #31
 800243a:	d501      	bpl.n	8002440 <_printf_float+0x15c>
 800243c:	3301      	adds	r3, #1
 800243e:	6123      	str	r3, [r4, #16]
 8002440:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002444:	2b00      	cmp	r3, #0
 8002446:	d09e      	beq.n	8002386 <_printf_float+0xa2>
 8002448:	232d      	movs	r3, #45	@ 0x2d
 800244a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800244e:	e79a      	b.n	8002386 <_printf_float+0xa2>
 8002450:	2947      	cmp	r1, #71	@ 0x47
 8002452:	d1bf      	bne.n	80023d4 <_printf_float+0xf0>
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1bd      	bne.n	80023d4 <_printf_float+0xf0>
 8002458:	2301      	movs	r3, #1
 800245a:	e7ba      	b.n	80023d2 <_printf_float+0xee>
 800245c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002460:	d9dc      	bls.n	800241c <_printf_float+0x138>
 8002462:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002466:	d118      	bne.n	800249a <_printf_float+0x1b6>
 8002468:	2900      	cmp	r1, #0
 800246a:	6863      	ldr	r3, [r4, #4]
 800246c:	dd0b      	ble.n	8002486 <_printf_float+0x1a2>
 800246e:	6121      	str	r1, [r4, #16]
 8002470:	b913      	cbnz	r3, 8002478 <_printf_float+0x194>
 8002472:	6822      	ldr	r2, [r4, #0]
 8002474:	07d0      	lsls	r0, r2, #31
 8002476:	d502      	bpl.n	800247e <_printf_float+0x19a>
 8002478:	3301      	adds	r3, #1
 800247a:	440b      	add	r3, r1
 800247c:	6123      	str	r3, [r4, #16]
 800247e:	f04f 0900 	mov.w	r9, #0
 8002482:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002484:	e7dc      	b.n	8002440 <_printf_float+0x15c>
 8002486:	b913      	cbnz	r3, 800248e <_printf_float+0x1aa>
 8002488:	6822      	ldr	r2, [r4, #0]
 800248a:	07d2      	lsls	r2, r2, #31
 800248c:	d501      	bpl.n	8002492 <_printf_float+0x1ae>
 800248e:	3302      	adds	r3, #2
 8002490:	e7f4      	b.n	800247c <_printf_float+0x198>
 8002492:	2301      	movs	r3, #1
 8002494:	e7f2      	b.n	800247c <_printf_float+0x198>
 8002496:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800249a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800249c:	4299      	cmp	r1, r3
 800249e:	db05      	blt.n	80024ac <_printf_float+0x1c8>
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	6121      	str	r1, [r4, #16]
 80024a4:	07d8      	lsls	r0, r3, #31
 80024a6:	d5ea      	bpl.n	800247e <_printf_float+0x19a>
 80024a8:	1c4b      	adds	r3, r1, #1
 80024aa:	e7e7      	b.n	800247c <_printf_float+0x198>
 80024ac:	2900      	cmp	r1, #0
 80024ae:	bfcc      	ite	gt
 80024b0:	2201      	movgt	r2, #1
 80024b2:	f1c1 0202 	rsble	r2, r1, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	e7e0      	b.n	800247c <_printf_float+0x198>
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	055a      	lsls	r2, r3, #21
 80024be:	d407      	bmi.n	80024d0 <_printf_float+0x1ec>
 80024c0:	6923      	ldr	r3, [r4, #16]
 80024c2:	4642      	mov	r2, r8
 80024c4:	4631      	mov	r1, r6
 80024c6:	4628      	mov	r0, r5
 80024c8:	47b8      	blx	r7
 80024ca:	3001      	adds	r0, #1
 80024cc:	d12b      	bne.n	8002526 <_printf_float+0x242>
 80024ce:	e764      	b.n	800239a <_printf_float+0xb6>
 80024d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80024d4:	f240 80dc 	bls.w	8002690 <_printf_float+0x3ac>
 80024d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80024dc:	2200      	movs	r2, #0
 80024de:	2300      	movs	r3, #0
 80024e0:	f7fe fa62 	bl	80009a8 <__aeabi_dcmpeq>
 80024e4:	2800      	cmp	r0, #0
 80024e6:	d033      	beq.n	8002550 <_printf_float+0x26c>
 80024e8:	2301      	movs	r3, #1
 80024ea:	4631      	mov	r1, r6
 80024ec:	4628      	mov	r0, r5
 80024ee:	4a35      	ldr	r2, [pc, #212]	@ (80025c4 <_printf_float+0x2e0>)
 80024f0:	47b8      	blx	r7
 80024f2:	3001      	adds	r0, #1
 80024f4:	f43f af51 	beq.w	800239a <_printf_float+0xb6>
 80024f8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80024fc:	4543      	cmp	r3, r8
 80024fe:	db02      	blt.n	8002506 <_printf_float+0x222>
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	07d8      	lsls	r0, r3, #31
 8002504:	d50f      	bpl.n	8002526 <_printf_float+0x242>
 8002506:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800250a:	4631      	mov	r1, r6
 800250c:	4628      	mov	r0, r5
 800250e:	47b8      	blx	r7
 8002510:	3001      	adds	r0, #1
 8002512:	f43f af42 	beq.w	800239a <_printf_float+0xb6>
 8002516:	f04f 0900 	mov.w	r9, #0
 800251a:	f108 38ff 	add.w	r8, r8, #4294967295
 800251e:	f104 0a1a 	add.w	sl, r4, #26
 8002522:	45c8      	cmp	r8, r9
 8002524:	dc09      	bgt.n	800253a <_printf_float+0x256>
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	079b      	lsls	r3, r3, #30
 800252a:	f100 8102 	bmi.w	8002732 <_printf_float+0x44e>
 800252e:	68e0      	ldr	r0, [r4, #12]
 8002530:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002532:	4298      	cmp	r0, r3
 8002534:	bfb8      	it	lt
 8002536:	4618      	movlt	r0, r3
 8002538:	e731      	b.n	800239e <_printf_float+0xba>
 800253a:	2301      	movs	r3, #1
 800253c:	4652      	mov	r2, sl
 800253e:	4631      	mov	r1, r6
 8002540:	4628      	mov	r0, r5
 8002542:	47b8      	blx	r7
 8002544:	3001      	adds	r0, #1
 8002546:	f43f af28 	beq.w	800239a <_printf_float+0xb6>
 800254a:	f109 0901 	add.w	r9, r9, #1
 800254e:	e7e8      	b.n	8002522 <_printf_float+0x23e>
 8002550:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002552:	2b00      	cmp	r3, #0
 8002554:	dc38      	bgt.n	80025c8 <_printf_float+0x2e4>
 8002556:	2301      	movs	r3, #1
 8002558:	4631      	mov	r1, r6
 800255a:	4628      	mov	r0, r5
 800255c:	4a19      	ldr	r2, [pc, #100]	@ (80025c4 <_printf_float+0x2e0>)
 800255e:	47b8      	blx	r7
 8002560:	3001      	adds	r0, #1
 8002562:	f43f af1a 	beq.w	800239a <_printf_float+0xb6>
 8002566:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800256a:	ea59 0303 	orrs.w	r3, r9, r3
 800256e:	d102      	bne.n	8002576 <_printf_float+0x292>
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	07d9      	lsls	r1, r3, #31
 8002574:	d5d7      	bpl.n	8002526 <_printf_float+0x242>
 8002576:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800257a:	4631      	mov	r1, r6
 800257c:	4628      	mov	r0, r5
 800257e:	47b8      	blx	r7
 8002580:	3001      	adds	r0, #1
 8002582:	f43f af0a 	beq.w	800239a <_printf_float+0xb6>
 8002586:	f04f 0a00 	mov.w	sl, #0
 800258a:	f104 0b1a 	add.w	fp, r4, #26
 800258e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002590:	425b      	negs	r3, r3
 8002592:	4553      	cmp	r3, sl
 8002594:	dc01      	bgt.n	800259a <_printf_float+0x2b6>
 8002596:	464b      	mov	r3, r9
 8002598:	e793      	b.n	80024c2 <_printf_float+0x1de>
 800259a:	2301      	movs	r3, #1
 800259c:	465a      	mov	r2, fp
 800259e:	4631      	mov	r1, r6
 80025a0:	4628      	mov	r0, r5
 80025a2:	47b8      	blx	r7
 80025a4:	3001      	adds	r0, #1
 80025a6:	f43f aef8 	beq.w	800239a <_printf_float+0xb6>
 80025aa:	f10a 0a01 	add.w	sl, sl, #1
 80025ae:	e7ee      	b.n	800258e <_printf_float+0x2aa>
 80025b0:	7fefffff 	.word	0x7fefffff
 80025b4:	08004b1e 	.word	0x08004b1e
 80025b8:	08004b1a 	.word	0x08004b1a
 80025bc:	08004b26 	.word	0x08004b26
 80025c0:	08004b22 	.word	0x08004b22
 80025c4:	08004b2a 	.word	0x08004b2a
 80025c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80025ca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80025ce:	4553      	cmp	r3, sl
 80025d0:	bfa8      	it	ge
 80025d2:	4653      	movge	r3, sl
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	4699      	mov	r9, r3
 80025d8:	dc36      	bgt.n	8002648 <_printf_float+0x364>
 80025da:	f04f 0b00 	mov.w	fp, #0
 80025de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80025e2:	f104 021a 	add.w	r2, r4, #26
 80025e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80025e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80025ea:	eba3 0309 	sub.w	r3, r3, r9
 80025ee:	455b      	cmp	r3, fp
 80025f0:	dc31      	bgt.n	8002656 <_printf_float+0x372>
 80025f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80025f4:	459a      	cmp	sl, r3
 80025f6:	dc3a      	bgt.n	800266e <_printf_float+0x38a>
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	07da      	lsls	r2, r3, #31
 80025fc:	d437      	bmi.n	800266e <_printf_float+0x38a>
 80025fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002600:	ebaa 0903 	sub.w	r9, sl, r3
 8002604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002606:	ebaa 0303 	sub.w	r3, sl, r3
 800260a:	4599      	cmp	r9, r3
 800260c:	bfa8      	it	ge
 800260e:	4699      	movge	r9, r3
 8002610:	f1b9 0f00 	cmp.w	r9, #0
 8002614:	dc33      	bgt.n	800267e <_printf_float+0x39a>
 8002616:	f04f 0800 	mov.w	r8, #0
 800261a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800261e:	f104 0b1a 	add.w	fp, r4, #26
 8002622:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002624:	ebaa 0303 	sub.w	r3, sl, r3
 8002628:	eba3 0309 	sub.w	r3, r3, r9
 800262c:	4543      	cmp	r3, r8
 800262e:	f77f af7a 	ble.w	8002526 <_printf_float+0x242>
 8002632:	2301      	movs	r3, #1
 8002634:	465a      	mov	r2, fp
 8002636:	4631      	mov	r1, r6
 8002638:	4628      	mov	r0, r5
 800263a:	47b8      	blx	r7
 800263c:	3001      	adds	r0, #1
 800263e:	f43f aeac 	beq.w	800239a <_printf_float+0xb6>
 8002642:	f108 0801 	add.w	r8, r8, #1
 8002646:	e7ec      	b.n	8002622 <_printf_float+0x33e>
 8002648:	4642      	mov	r2, r8
 800264a:	4631      	mov	r1, r6
 800264c:	4628      	mov	r0, r5
 800264e:	47b8      	blx	r7
 8002650:	3001      	adds	r0, #1
 8002652:	d1c2      	bne.n	80025da <_printf_float+0x2f6>
 8002654:	e6a1      	b.n	800239a <_printf_float+0xb6>
 8002656:	2301      	movs	r3, #1
 8002658:	4631      	mov	r1, r6
 800265a:	4628      	mov	r0, r5
 800265c:	920a      	str	r2, [sp, #40]	@ 0x28
 800265e:	47b8      	blx	r7
 8002660:	3001      	adds	r0, #1
 8002662:	f43f ae9a 	beq.w	800239a <_printf_float+0xb6>
 8002666:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002668:	f10b 0b01 	add.w	fp, fp, #1
 800266c:	e7bb      	b.n	80025e6 <_printf_float+0x302>
 800266e:	4631      	mov	r1, r6
 8002670:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002674:	4628      	mov	r0, r5
 8002676:	47b8      	blx	r7
 8002678:	3001      	adds	r0, #1
 800267a:	d1c0      	bne.n	80025fe <_printf_float+0x31a>
 800267c:	e68d      	b.n	800239a <_printf_float+0xb6>
 800267e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002680:	464b      	mov	r3, r9
 8002682:	4631      	mov	r1, r6
 8002684:	4628      	mov	r0, r5
 8002686:	4442      	add	r2, r8
 8002688:	47b8      	blx	r7
 800268a:	3001      	adds	r0, #1
 800268c:	d1c3      	bne.n	8002616 <_printf_float+0x332>
 800268e:	e684      	b.n	800239a <_printf_float+0xb6>
 8002690:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002694:	f1ba 0f01 	cmp.w	sl, #1
 8002698:	dc01      	bgt.n	800269e <_printf_float+0x3ba>
 800269a:	07db      	lsls	r3, r3, #31
 800269c:	d536      	bpl.n	800270c <_printf_float+0x428>
 800269e:	2301      	movs	r3, #1
 80026a0:	4642      	mov	r2, r8
 80026a2:	4631      	mov	r1, r6
 80026a4:	4628      	mov	r0, r5
 80026a6:	47b8      	blx	r7
 80026a8:	3001      	adds	r0, #1
 80026aa:	f43f ae76 	beq.w	800239a <_printf_float+0xb6>
 80026ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80026b2:	4631      	mov	r1, r6
 80026b4:	4628      	mov	r0, r5
 80026b6:	47b8      	blx	r7
 80026b8:	3001      	adds	r0, #1
 80026ba:	f43f ae6e 	beq.w	800239a <_printf_float+0xb6>
 80026be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80026c2:	2200      	movs	r2, #0
 80026c4:	2300      	movs	r3, #0
 80026c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80026ca:	f7fe f96d 	bl	80009a8 <__aeabi_dcmpeq>
 80026ce:	b9c0      	cbnz	r0, 8002702 <_printf_float+0x41e>
 80026d0:	4653      	mov	r3, sl
 80026d2:	f108 0201 	add.w	r2, r8, #1
 80026d6:	4631      	mov	r1, r6
 80026d8:	4628      	mov	r0, r5
 80026da:	47b8      	blx	r7
 80026dc:	3001      	adds	r0, #1
 80026de:	d10c      	bne.n	80026fa <_printf_float+0x416>
 80026e0:	e65b      	b.n	800239a <_printf_float+0xb6>
 80026e2:	2301      	movs	r3, #1
 80026e4:	465a      	mov	r2, fp
 80026e6:	4631      	mov	r1, r6
 80026e8:	4628      	mov	r0, r5
 80026ea:	47b8      	blx	r7
 80026ec:	3001      	adds	r0, #1
 80026ee:	f43f ae54 	beq.w	800239a <_printf_float+0xb6>
 80026f2:	f108 0801 	add.w	r8, r8, #1
 80026f6:	45d0      	cmp	r8, sl
 80026f8:	dbf3      	blt.n	80026e2 <_printf_float+0x3fe>
 80026fa:	464b      	mov	r3, r9
 80026fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002700:	e6e0      	b.n	80024c4 <_printf_float+0x1e0>
 8002702:	f04f 0800 	mov.w	r8, #0
 8002706:	f104 0b1a 	add.w	fp, r4, #26
 800270a:	e7f4      	b.n	80026f6 <_printf_float+0x412>
 800270c:	2301      	movs	r3, #1
 800270e:	4642      	mov	r2, r8
 8002710:	e7e1      	b.n	80026d6 <_printf_float+0x3f2>
 8002712:	2301      	movs	r3, #1
 8002714:	464a      	mov	r2, r9
 8002716:	4631      	mov	r1, r6
 8002718:	4628      	mov	r0, r5
 800271a:	47b8      	blx	r7
 800271c:	3001      	adds	r0, #1
 800271e:	f43f ae3c 	beq.w	800239a <_printf_float+0xb6>
 8002722:	f108 0801 	add.w	r8, r8, #1
 8002726:	68e3      	ldr	r3, [r4, #12]
 8002728:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800272a:	1a5b      	subs	r3, r3, r1
 800272c:	4543      	cmp	r3, r8
 800272e:	dcf0      	bgt.n	8002712 <_printf_float+0x42e>
 8002730:	e6fd      	b.n	800252e <_printf_float+0x24a>
 8002732:	f04f 0800 	mov.w	r8, #0
 8002736:	f104 0919 	add.w	r9, r4, #25
 800273a:	e7f4      	b.n	8002726 <_printf_float+0x442>

0800273c <_printf_common>:
 800273c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002740:	4616      	mov	r6, r2
 8002742:	4698      	mov	r8, r3
 8002744:	688a      	ldr	r2, [r1, #8]
 8002746:	690b      	ldr	r3, [r1, #16]
 8002748:	4607      	mov	r7, r0
 800274a:	4293      	cmp	r3, r2
 800274c:	bfb8      	it	lt
 800274e:	4613      	movlt	r3, r2
 8002750:	6033      	str	r3, [r6, #0]
 8002752:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002756:	460c      	mov	r4, r1
 8002758:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800275c:	b10a      	cbz	r2, 8002762 <_printf_common+0x26>
 800275e:	3301      	adds	r3, #1
 8002760:	6033      	str	r3, [r6, #0]
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	0699      	lsls	r1, r3, #26
 8002766:	bf42      	ittt	mi
 8002768:	6833      	ldrmi	r3, [r6, #0]
 800276a:	3302      	addmi	r3, #2
 800276c:	6033      	strmi	r3, [r6, #0]
 800276e:	6825      	ldr	r5, [r4, #0]
 8002770:	f015 0506 	ands.w	r5, r5, #6
 8002774:	d106      	bne.n	8002784 <_printf_common+0x48>
 8002776:	f104 0a19 	add.w	sl, r4, #25
 800277a:	68e3      	ldr	r3, [r4, #12]
 800277c:	6832      	ldr	r2, [r6, #0]
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	42ab      	cmp	r3, r5
 8002782:	dc2b      	bgt.n	80027dc <_printf_common+0xa0>
 8002784:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002788:	6822      	ldr	r2, [r4, #0]
 800278a:	3b00      	subs	r3, #0
 800278c:	bf18      	it	ne
 800278e:	2301      	movne	r3, #1
 8002790:	0692      	lsls	r2, r2, #26
 8002792:	d430      	bmi.n	80027f6 <_printf_common+0xba>
 8002794:	4641      	mov	r1, r8
 8002796:	4638      	mov	r0, r7
 8002798:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800279c:	47c8      	blx	r9
 800279e:	3001      	adds	r0, #1
 80027a0:	d023      	beq.n	80027ea <_printf_common+0xae>
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	6922      	ldr	r2, [r4, #16]
 80027a6:	f003 0306 	and.w	r3, r3, #6
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	bf14      	ite	ne
 80027ae:	2500      	movne	r5, #0
 80027b0:	6833      	ldreq	r3, [r6, #0]
 80027b2:	f04f 0600 	mov.w	r6, #0
 80027b6:	bf08      	it	eq
 80027b8:	68e5      	ldreq	r5, [r4, #12]
 80027ba:	f104 041a 	add.w	r4, r4, #26
 80027be:	bf08      	it	eq
 80027c0:	1aed      	subeq	r5, r5, r3
 80027c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80027c6:	bf08      	it	eq
 80027c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027cc:	4293      	cmp	r3, r2
 80027ce:	bfc4      	itt	gt
 80027d0:	1a9b      	subgt	r3, r3, r2
 80027d2:	18ed      	addgt	r5, r5, r3
 80027d4:	42b5      	cmp	r5, r6
 80027d6:	d11a      	bne.n	800280e <_printf_common+0xd2>
 80027d8:	2000      	movs	r0, #0
 80027da:	e008      	b.n	80027ee <_printf_common+0xb2>
 80027dc:	2301      	movs	r3, #1
 80027de:	4652      	mov	r2, sl
 80027e0:	4641      	mov	r1, r8
 80027e2:	4638      	mov	r0, r7
 80027e4:	47c8      	blx	r9
 80027e6:	3001      	adds	r0, #1
 80027e8:	d103      	bne.n	80027f2 <_printf_common+0xb6>
 80027ea:	f04f 30ff 	mov.w	r0, #4294967295
 80027ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027f2:	3501      	adds	r5, #1
 80027f4:	e7c1      	b.n	800277a <_printf_common+0x3e>
 80027f6:	2030      	movs	r0, #48	@ 0x30
 80027f8:	18e1      	adds	r1, r4, r3
 80027fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002804:	4422      	add	r2, r4
 8002806:	3302      	adds	r3, #2
 8002808:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800280c:	e7c2      	b.n	8002794 <_printf_common+0x58>
 800280e:	2301      	movs	r3, #1
 8002810:	4622      	mov	r2, r4
 8002812:	4641      	mov	r1, r8
 8002814:	4638      	mov	r0, r7
 8002816:	47c8      	blx	r9
 8002818:	3001      	adds	r0, #1
 800281a:	d0e6      	beq.n	80027ea <_printf_common+0xae>
 800281c:	3601      	adds	r6, #1
 800281e:	e7d9      	b.n	80027d4 <_printf_common+0x98>

08002820 <_printf_i>:
 8002820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002824:	7e0f      	ldrb	r7, [r1, #24]
 8002826:	4691      	mov	r9, r2
 8002828:	2f78      	cmp	r7, #120	@ 0x78
 800282a:	4680      	mov	r8, r0
 800282c:	460c      	mov	r4, r1
 800282e:	469a      	mov	sl, r3
 8002830:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002832:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002836:	d807      	bhi.n	8002848 <_printf_i+0x28>
 8002838:	2f62      	cmp	r7, #98	@ 0x62
 800283a:	d80a      	bhi.n	8002852 <_printf_i+0x32>
 800283c:	2f00      	cmp	r7, #0
 800283e:	f000 80d1 	beq.w	80029e4 <_printf_i+0x1c4>
 8002842:	2f58      	cmp	r7, #88	@ 0x58
 8002844:	f000 80b8 	beq.w	80029b8 <_printf_i+0x198>
 8002848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800284c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002850:	e03a      	b.n	80028c8 <_printf_i+0xa8>
 8002852:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002856:	2b15      	cmp	r3, #21
 8002858:	d8f6      	bhi.n	8002848 <_printf_i+0x28>
 800285a:	a101      	add	r1, pc, #4	@ (adr r1, 8002860 <_printf_i+0x40>)
 800285c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002860:	080028b9 	.word	0x080028b9
 8002864:	080028cd 	.word	0x080028cd
 8002868:	08002849 	.word	0x08002849
 800286c:	08002849 	.word	0x08002849
 8002870:	08002849 	.word	0x08002849
 8002874:	08002849 	.word	0x08002849
 8002878:	080028cd 	.word	0x080028cd
 800287c:	08002849 	.word	0x08002849
 8002880:	08002849 	.word	0x08002849
 8002884:	08002849 	.word	0x08002849
 8002888:	08002849 	.word	0x08002849
 800288c:	080029cb 	.word	0x080029cb
 8002890:	080028f7 	.word	0x080028f7
 8002894:	08002985 	.word	0x08002985
 8002898:	08002849 	.word	0x08002849
 800289c:	08002849 	.word	0x08002849
 80028a0:	080029ed 	.word	0x080029ed
 80028a4:	08002849 	.word	0x08002849
 80028a8:	080028f7 	.word	0x080028f7
 80028ac:	08002849 	.word	0x08002849
 80028b0:	08002849 	.word	0x08002849
 80028b4:	0800298d 	.word	0x0800298d
 80028b8:	6833      	ldr	r3, [r6, #0]
 80028ba:	1d1a      	adds	r2, r3, #4
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6032      	str	r2, [r6, #0]
 80028c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028c8:	2301      	movs	r3, #1
 80028ca:	e09c      	b.n	8002a06 <_printf_i+0x1e6>
 80028cc:	6833      	ldr	r3, [r6, #0]
 80028ce:	6820      	ldr	r0, [r4, #0]
 80028d0:	1d19      	adds	r1, r3, #4
 80028d2:	6031      	str	r1, [r6, #0]
 80028d4:	0606      	lsls	r6, r0, #24
 80028d6:	d501      	bpl.n	80028dc <_printf_i+0xbc>
 80028d8:	681d      	ldr	r5, [r3, #0]
 80028da:	e003      	b.n	80028e4 <_printf_i+0xc4>
 80028dc:	0645      	lsls	r5, r0, #25
 80028de:	d5fb      	bpl.n	80028d8 <_printf_i+0xb8>
 80028e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80028e4:	2d00      	cmp	r5, #0
 80028e6:	da03      	bge.n	80028f0 <_printf_i+0xd0>
 80028e8:	232d      	movs	r3, #45	@ 0x2d
 80028ea:	426d      	negs	r5, r5
 80028ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028f0:	230a      	movs	r3, #10
 80028f2:	4858      	ldr	r0, [pc, #352]	@ (8002a54 <_printf_i+0x234>)
 80028f4:	e011      	b.n	800291a <_printf_i+0xfa>
 80028f6:	6821      	ldr	r1, [r4, #0]
 80028f8:	6833      	ldr	r3, [r6, #0]
 80028fa:	0608      	lsls	r0, r1, #24
 80028fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8002900:	d402      	bmi.n	8002908 <_printf_i+0xe8>
 8002902:	0649      	lsls	r1, r1, #25
 8002904:	bf48      	it	mi
 8002906:	b2ad      	uxthmi	r5, r5
 8002908:	2f6f      	cmp	r7, #111	@ 0x6f
 800290a:	6033      	str	r3, [r6, #0]
 800290c:	bf14      	ite	ne
 800290e:	230a      	movne	r3, #10
 8002910:	2308      	moveq	r3, #8
 8002912:	4850      	ldr	r0, [pc, #320]	@ (8002a54 <_printf_i+0x234>)
 8002914:	2100      	movs	r1, #0
 8002916:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800291a:	6866      	ldr	r6, [r4, #4]
 800291c:	2e00      	cmp	r6, #0
 800291e:	60a6      	str	r6, [r4, #8]
 8002920:	db05      	blt.n	800292e <_printf_i+0x10e>
 8002922:	6821      	ldr	r1, [r4, #0]
 8002924:	432e      	orrs	r6, r5
 8002926:	f021 0104 	bic.w	r1, r1, #4
 800292a:	6021      	str	r1, [r4, #0]
 800292c:	d04b      	beq.n	80029c6 <_printf_i+0x1a6>
 800292e:	4616      	mov	r6, r2
 8002930:	fbb5 f1f3 	udiv	r1, r5, r3
 8002934:	fb03 5711 	mls	r7, r3, r1, r5
 8002938:	5dc7      	ldrb	r7, [r0, r7]
 800293a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800293e:	462f      	mov	r7, r5
 8002940:	42bb      	cmp	r3, r7
 8002942:	460d      	mov	r5, r1
 8002944:	d9f4      	bls.n	8002930 <_printf_i+0x110>
 8002946:	2b08      	cmp	r3, #8
 8002948:	d10b      	bne.n	8002962 <_printf_i+0x142>
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	07df      	lsls	r7, r3, #31
 800294e:	d508      	bpl.n	8002962 <_printf_i+0x142>
 8002950:	6923      	ldr	r3, [r4, #16]
 8002952:	6861      	ldr	r1, [r4, #4]
 8002954:	4299      	cmp	r1, r3
 8002956:	bfde      	ittt	le
 8002958:	2330      	movle	r3, #48	@ 0x30
 800295a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800295e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002962:	1b92      	subs	r2, r2, r6
 8002964:	6122      	str	r2, [r4, #16]
 8002966:	464b      	mov	r3, r9
 8002968:	4621      	mov	r1, r4
 800296a:	4640      	mov	r0, r8
 800296c:	f8cd a000 	str.w	sl, [sp]
 8002970:	aa03      	add	r2, sp, #12
 8002972:	f7ff fee3 	bl	800273c <_printf_common>
 8002976:	3001      	adds	r0, #1
 8002978:	d14a      	bne.n	8002a10 <_printf_i+0x1f0>
 800297a:	f04f 30ff 	mov.w	r0, #4294967295
 800297e:	b004      	add	sp, #16
 8002980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	f043 0320 	orr.w	r3, r3, #32
 800298a:	6023      	str	r3, [r4, #0]
 800298c:	2778      	movs	r7, #120	@ 0x78
 800298e:	4832      	ldr	r0, [pc, #200]	@ (8002a58 <_printf_i+0x238>)
 8002990:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	6831      	ldr	r1, [r6, #0]
 8002998:	061f      	lsls	r7, r3, #24
 800299a:	f851 5b04 	ldr.w	r5, [r1], #4
 800299e:	d402      	bmi.n	80029a6 <_printf_i+0x186>
 80029a0:	065f      	lsls	r7, r3, #25
 80029a2:	bf48      	it	mi
 80029a4:	b2ad      	uxthmi	r5, r5
 80029a6:	6031      	str	r1, [r6, #0]
 80029a8:	07d9      	lsls	r1, r3, #31
 80029aa:	bf44      	itt	mi
 80029ac:	f043 0320 	orrmi.w	r3, r3, #32
 80029b0:	6023      	strmi	r3, [r4, #0]
 80029b2:	b11d      	cbz	r5, 80029bc <_printf_i+0x19c>
 80029b4:	2310      	movs	r3, #16
 80029b6:	e7ad      	b.n	8002914 <_printf_i+0xf4>
 80029b8:	4826      	ldr	r0, [pc, #152]	@ (8002a54 <_printf_i+0x234>)
 80029ba:	e7e9      	b.n	8002990 <_printf_i+0x170>
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	f023 0320 	bic.w	r3, r3, #32
 80029c2:	6023      	str	r3, [r4, #0]
 80029c4:	e7f6      	b.n	80029b4 <_printf_i+0x194>
 80029c6:	4616      	mov	r6, r2
 80029c8:	e7bd      	b.n	8002946 <_printf_i+0x126>
 80029ca:	6833      	ldr	r3, [r6, #0]
 80029cc:	6825      	ldr	r5, [r4, #0]
 80029ce:	1d18      	adds	r0, r3, #4
 80029d0:	6961      	ldr	r1, [r4, #20]
 80029d2:	6030      	str	r0, [r6, #0]
 80029d4:	062e      	lsls	r6, r5, #24
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	d501      	bpl.n	80029de <_printf_i+0x1be>
 80029da:	6019      	str	r1, [r3, #0]
 80029dc:	e002      	b.n	80029e4 <_printf_i+0x1c4>
 80029de:	0668      	lsls	r0, r5, #25
 80029e0:	d5fb      	bpl.n	80029da <_printf_i+0x1ba>
 80029e2:	8019      	strh	r1, [r3, #0]
 80029e4:	2300      	movs	r3, #0
 80029e6:	4616      	mov	r6, r2
 80029e8:	6123      	str	r3, [r4, #16]
 80029ea:	e7bc      	b.n	8002966 <_printf_i+0x146>
 80029ec:	6833      	ldr	r3, [r6, #0]
 80029ee:	2100      	movs	r1, #0
 80029f0:	1d1a      	adds	r2, r3, #4
 80029f2:	6032      	str	r2, [r6, #0]
 80029f4:	681e      	ldr	r6, [r3, #0]
 80029f6:	6862      	ldr	r2, [r4, #4]
 80029f8:	4630      	mov	r0, r6
 80029fa:	f000 f9b4 	bl	8002d66 <memchr>
 80029fe:	b108      	cbz	r0, 8002a04 <_printf_i+0x1e4>
 8002a00:	1b80      	subs	r0, r0, r6
 8002a02:	6060      	str	r0, [r4, #4]
 8002a04:	6863      	ldr	r3, [r4, #4]
 8002a06:	6123      	str	r3, [r4, #16]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a0e:	e7aa      	b.n	8002966 <_printf_i+0x146>
 8002a10:	4632      	mov	r2, r6
 8002a12:	4649      	mov	r1, r9
 8002a14:	4640      	mov	r0, r8
 8002a16:	6923      	ldr	r3, [r4, #16]
 8002a18:	47d0      	blx	sl
 8002a1a:	3001      	adds	r0, #1
 8002a1c:	d0ad      	beq.n	800297a <_printf_i+0x15a>
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	079b      	lsls	r3, r3, #30
 8002a22:	d413      	bmi.n	8002a4c <_printf_i+0x22c>
 8002a24:	68e0      	ldr	r0, [r4, #12]
 8002a26:	9b03      	ldr	r3, [sp, #12]
 8002a28:	4298      	cmp	r0, r3
 8002a2a:	bfb8      	it	lt
 8002a2c:	4618      	movlt	r0, r3
 8002a2e:	e7a6      	b.n	800297e <_printf_i+0x15e>
 8002a30:	2301      	movs	r3, #1
 8002a32:	4632      	mov	r2, r6
 8002a34:	4649      	mov	r1, r9
 8002a36:	4640      	mov	r0, r8
 8002a38:	47d0      	blx	sl
 8002a3a:	3001      	adds	r0, #1
 8002a3c:	d09d      	beq.n	800297a <_printf_i+0x15a>
 8002a3e:	3501      	adds	r5, #1
 8002a40:	68e3      	ldr	r3, [r4, #12]
 8002a42:	9903      	ldr	r1, [sp, #12]
 8002a44:	1a5b      	subs	r3, r3, r1
 8002a46:	42ab      	cmp	r3, r5
 8002a48:	dcf2      	bgt.n	8002a30 <_printf_i+0x210>
 8002a4a:	e7eb      	b.n	8002a24 <_printf_i+0x204>
 8002a4c:	2500      	movs	r5, #0
 8002a4e:	f104 0619 	add.w	r6, r4, #25
 8002a52:	e7f5      	b.n	8002a40 <_printf_i+0x220>
 8002a54:	08004b2c 	.word	0x08004b2c
 8002a58:	08004b3d 	.word	0x08004b3d

08002a5c <std>:
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	b510      	push	{r4, lr}
 8002a60:	4604      	mov	r4, r0
 8002a62:	e9c0 3300 	strd	r3, r3, [r0]
 8002a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a6a:	6083      	str	r3, [r0, #8]
 8002a6c:	8181      	strh	r1, [r0, #12]
 8002a6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002a70:	81c2      	strh	r2, [r0, #14]
 8002a72:	6183      	str	r3, [r0, #24]
 8002a74:	4619      	mov	r1, r3
 8002a76:	2208      	movs	r2, #8
 8002a78:	305c      	adds	r0, #92	@ 0x5c
 8002a7a:	f000 f8f4 	bl	8002c66 <memset>
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab4 <std+0x58>)
 8002a80:	6224      	str	r4, [r4, #32]
 8002a82:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a84:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <std+0x5c>)
 8002a86:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a88:	4b0c      	ldr	r3, [pc, #48]	@ (8002abc <std+0x60>)
 8002a8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <std+0x64>)
 8002a8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <std+0x68>)
 8002a92:	429c      	cmp	r4, r3
 8002a94:	d006      	beq.n	8002aa4 <std+0x48>
 8002a96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a9a:	4294      	cmp	r4, r2
 8002a9c:	d002      	beq.n	8002aa4 <std+0x48>
 8002a9e:	33d0      	adds	r3, #208	@ 0xd0
 8002aa0:	429c      	cmp	r4, r3
 8002aa2:	d105      	bne.n	8002ab0 <std+0x54>
 8002aa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aac:	f000 b958 	b.w	8002d60 <__retarget_lock_init_recursive>
 8002ab0:	bd10      	pop	{r4, pc}
 8002ab2:	bf00      	nop
 8002ab4:	08002be1 	.word	0x08002be1
 8002ab8:	08002c03 	.word	0x08002c03
 8002abc:	08002c3b 	.word	0x08002c3b
 8002ac0:	08002c5f 	.word	0x08002c5f
 8002ac4:	20000240 	.word	0x20000240

08002ac8 <stdio_exit_handler>:
 8002ac8:	4a02      	ldr	r2, [pc, #8]	@ (8002ad4 <stdio_exit_handler+0xc>)
 8002aca:	4903      	ldr	r1, [pc, #12]	@ (8002ad8 <stdio_exit_handler+0x10>)
 8002acc:	4803      	ldr	r0, [pc, #12]	@ (8002adc <stdio_exit_handler+0x14>)
 8002ace:	f000 b869 	b.w	8002ba4 <_fwalk_sglue>
 8002ad2:	bf00      	nop
 8002ad4:	2000000c 	.word	0x2000000c
 8002ad8:	08004449 	.word	0x08004449
 8002adc:	2000001c 	.word	0x2000001c

08002ae0 <cleanup_stdio>:
 8002ae0:	6841      	ldr	r1, [r0, #4]
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <cleanup_stdio+0x34>)
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	4299      	cmp	r1, r3
 8002ae8:	4604      	mov	r4, r0
 8002aea:	d001      	beq.n	8002af0 <cleanup_stdio+0x10>
 8002aec:	f001 fcac 	bl	8004448 <_fflush_r>
 8002af0:	68a1      	ldr	r1, [r4, #8]
 8002af2:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <cleanup_stdio+0x38>)
 8002af4:	4299      	cmp	r1, r3
 8002af6:	d002      	beq.n	8002afe <cleanup_stdio+0x1e>
 8002af8:	4620      	mov	r0, r4
 8002afa:	f001 fca5 	bl	8004448 <_fflush_r>
 8002afe:	68e1      	ldr	r1, [r4, #12]
 8002b00:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <cleanup_stdio+0x3c>)
 8002b02:	4299      	cmp	r1, r3
 8002b04:	d004      	beq.n	8002b10 <cleanup_stdio+0x30>
 8002b06:	4620      	mov	r0, r4
 8002b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b0c:	f001 bc9c 	b.w	8004448 <_fflush_r>
 8002b10:	bd10      	pop	{r4, pc}
 8002b12:	bf00      	nop
 8002b14:	20000240 	.word	0x20000240
 8002b18:	200002a8 	.word	0x200002a8
 8002b1c:	20000310 	.word	0x20000310

08002b20 <global_stdio_init.part.0>:
 8002b20:	b510      	push	{r4, lr}
 8002b22:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <global_stdio_init.part.0+0x30>)
 8002b24:	4c0b      	ldr	r4, [pc, #44]	@ (8002b54 <global_stdio_init.part.0+0x34>)
 8002b26:	4a0c      	ldr	r2, [pc, #48]	@ (8002b58 <global_stdio_init.part.0+0x38>)
 8002b28:	4620      	mov	r0, r4
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f7ff ff94 	bl	8002a5c <std>
 8002b34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002b38:	2201      	movs	r2, #1
 8002b3a:	2109      	movs	r1, #9
 8002b3c:	f7ff ff8e 	bl	8002a5c <std>
 8002b40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002b44:	2202      	movs	r2, #2
 8002b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b4a:	2112      	movs	r1, #18
 8002b4c:	f7ff bf86 	b.w	8002a5c <std>
 8002b50:	20000378 	.word	0x20000378
 8002b54:	20000240 	.word	0x20000240
 8002b58:	08002ac9 	.word	0x08002ac9

08002b5c <__sfp_lock_acquire>:
 8002b5c:	4801      	ldr	r0, [pc, #4]	@ (8002b64 <__sfp_lock_acquire+0x8>)
 8002b5e:	f000 b900 	b.w	8002d62 <__retarget_lock_acquire_recursive>
 8002b62:	bf00      	nop
 8002b64:	20000381 	.word	0x20000381

08002b68 <__sfp_lock_release>:
 8002b68:	4801      	ldr	r0, [pc, #4]	@ (8002b70 <__sfp_lock_release+0x8>)
 8002b6a:	f000 b8fb 	b.w	8002d64 <__retarget_lock_release_recursive>
 8002b6e:	bf00      	nop
 8002b70:	20000381 	.word	0x20000381

08002b74 <__sinit>:
 8002b74:	b510      	push	{r4, lr}
 8002b76:	4604      	mov	r4, r0
 8002b78:	f7ff fff0 	bl	8002b5c <__sfp_lock_acquire>
 8002b7c:	6a23      	ldr	r3, [r4, #32]
 8002b7e:	b11b      	cbz	r3, 8002b88 <__sinit+0x14>
 8002b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b84:	f7ff bff0 	b.w	8002b68 <__sfp_lock_release>
 8002b88:	4b04      	ldr	r3, [pc, #16]	@ (8002b9c <__sinit+0x28>)
 8002b8a:	6223      	str	r3, [r4, #32]
 8002b8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ba0 <__sinit+0x2c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f5      	bne.n	8002b80 <__sinit+0xc>
 8002b94:	f7ff ffc4 	bl	8002b20 <global_stdio_init.part.0>
 8002b98:	e7f2      	b.n	8002b80 <__sinit+0xc>
 8002b9a:	bf00      	nop
 8002b9c:	08002ae1 	.word	0x08002ae1
 8002ba0:	20000378 	.word	0x20000378

08002ba4 <_fwalk_sglue>:
 8002ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ba8:	4607      	mov	r7, r0
 8002baa:	4688      	mov	r8, r1
 8002bac:	4614      	mov	r4, r2
 8002bae:	2600      	movs	r6, #0
 8002bb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bb4:	f1b9 0901 	subs.w	r9, r9, #1
 8002bb8:	d505      	bpl.n	8002bc6 <_fwalk_sglue+0x22>
 8002bba:	6824      	ldr	r4, [r4, #0]
 8002bbc:	2c00      	cmp	r4, #0
 8002bbe:	d1f7      	bne.n	8002bb0 <_fwalk_sglue+0xc>
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bc6:	89ab      	ldrh	r3, [r5, #12]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d907      	bls.n	8002bdc <_fwalk_sglue+0x38>
 8002bcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	d003      	beq.n	8002bdc <_fwalk_sglue+0x38>
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	4638      	mov	r0, r7
 8002bd8:	47c0      	blx	r8
 8002bda:	4306      	orrs	r6, r0
 8002bdc:	3568      	adds	r5, #104	@ 0x68
 8002bde:	e7e9      	b.n	8002bb4 <_fwalk_sglue+0x10>

08002be0 <__sread>:
 8002be0:	b510      	push	{r4, lr}
 8002be2:	460c      	mov	r4, r1
 8002be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002be8:	f000 f86c 	bl	8002cc4 <_read_r>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	bfab      	itete	ge
 8002bf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8002bf4:	181b      	addge	r3, r3, r0
 8002bf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002bfa:	bfac      	ite	ge
 8002bfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002bfe:	81a3      	strhlt	r3, [r4, #12]
 8002c00:	bd10      	pop	{r4, pc}

08002c02 <__swrite>:
 8002c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c06:	461f      	mov	r7, r3
 8002c08:	898b      	ldrh	r3, [r1, #12]
 8002c0a:	4605      	mov	r5, r0
 8002c0c:	05db      	lsls	r3, r3, #23
 8002c0e:	460c      	mov	r4, r1
 8002c10:	4616      	mov	r6, r2
 8002c12:	d505      	bpl.n	8002c20 <__swrite+0x1e>
 8002c14:	2302      	movs	r3, #2
 8002c16:	2200      	movs	r2, #0
 8002c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c1c:	f000 f840 	bl	8002ca0 <_lseek_r>
 8002c20:	89a3      	ldrh	r3, [r4, #12]
 8002c22:	4632      	mov	r2, r6
 8002c24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c28:	81a3      	strh	r3, [r4, #12]
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	463b      	mov	r3, r7
 8002c2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c36:	f000 b857 	b.w	8002ce8 <_write_r>

08002c3a <__sseek>:
 8002c3a:	b510      	push	{r4, lr}
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c42:	f000 f82d 	bl	8002ca0 <_lseek_r>
 8002c46:	1c43      	adds	r3, r0, #1
 8002c48:	89a3      	ldrh	r3, [r4, #12]
 8002c4a:	bf15      	itete	ne
 8002c4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002c4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002c52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002c56:	81a3      	strheq	r3, [r4, #12]
 8002c58:	bf18      	it	ne
 8002c5a:	81a3      	strhne	r3, [r4, #12]
 8002c5c:	bd10      	pop	{r4, pc}

08002c5e <__sclose>:
 8002c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c62:	f000 b80d 	b.w	8002c80 <_close_r>

08002c66 <memset>:
 8002c66:	4603      	mov	r3, r0
 8002c68:	4402      	add	r2, r0
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d100      	bne.n	8002c70 <memset+0xa>
 8002c6e:	4770      	bx	lr
 8002c70:	f803 1b01 	strb.w	r1, [r3], #1
 8002c74:	e7f9      	b.n	8002c6a <memset+0x4>
	...

08002c78 <_localeconv_r>:
 8002c78:	4800      	ldr	r0, [pc, #0]	@ (8002c7c <_localeconv_r+0x4>)
 8002c7a:	4770      	bx	lr
 8002c7c:	20000158 	.word	0x20000158

08002c80 <_close_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	2300      	movs	r3, #0
 8002c84:	4d05      	ldr	r5, [pc, #20]	@ (8002c9c <_close_r+0x1c>)
 8002c86:	4604      	mov	r4, r0
 8002c88:	4608      	mov	r0, r1
 8002c8a:	602b      	str	r3, [r5, #0]
 8002c8c:	f7fe f8d7 	bl	8000e3e <_close>
 8002c90:	1c43      	adds	r3, r0, #1
 8002c92:	d102      	bne.n	8002c9a <_close_r+0x1a>
 8002c94:	682b      	ldr	r3, [r5, #0]
 8002c96:	b103      	cbz	r3, 8002c9a <_close_r+0x1a>
 8002c98:	6023      	str	r3, [r4, #0]
 8002c9a:	bd38      	pop	{r3, r4, r5, pc}
 8002c9c:	2000037c 	.word	0x2000037c

08002ca0 <_lseek_r>:
 8002ca0:	b538      	push	{r3, r4, r5, lr}
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	2200      	movs	r2, #0
 8002caa:	4d05      	ldr	r5, [pc, #20]	@ (8002cc0 <_lseek_r+0x20>)
 8002cac:	602a      	str	r2, [r5, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f7fe f8e9 	bl	8000e86 <_lseek>
 8002cb4:	1c43      	adds	r3, r0, #1
 8002cb6:	d102      	bne.n	8002cbe <_lseek_r+0x1e>
 8002cb8:	682b      	ldr	r3, [r5, #0]
 8002cba:	b103      	cbz	r3, 8002cbe <_lseek_r+0x1e>
 8002cbc:	6023      	str	r3, [r4, #0]
 8002cbe:	bd38      	pop	{r3, r4, r5, pc}
 8002cc0:	2000037c 	.word	0x2000037c

08002cc4 <_read_r>:
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	4608      	mov	r0, r1
 8002cca:	4611      	mov	r1, r2
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4d05      	ldr	r5, [pc, #20]	@ (8002ce4 <_read_r+0x20>)
 8002cd0:	602a      	str	r2, [r5, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f7fe f87a 	bl	8000dcc <_read>
 8002cd8:	1c43      	adds	r3, r0, #1
 8002cda:	d102      	bne.n	8002ce2 <_read_r+0x1e>
 8002cdc:	682b      	ldr	r3, [r5, #0]
 8002cde:	b103      	cbz	r3, 8002ce2 <_read_r+0x1e>
 8002ce0:	6023      	str	r3, [r4, #0]
 8002ce2:	bd38      	pop	{r3, r4, r5, pc}
 8002ce4:	2000037c 	.word	0x2000037c

08002ce8 <_write_r>:
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4604      	mov	r4, r0
 8002cec:	4608      	mov	r0, r1
 8002cee:	4611      	mov	r1, r2
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	4d05      	ldr	r5, [pc, #20]	@ (8002d08 <_write_r+0x20>)
 8002cf4:	602a      	str	r2, [r5, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f7fe f885 	bl	8000e06 <_write>
 8002cfc:	1c43      	adds	r3, r0, #1
 8002cfe:	d102      	bne.n	8002d06 <_write_r+0x1e>
 8002d00:	682b      	ldr	r3, [r5, #0]
 8002d02:	b103      	cbz	r3, 8002d06 <_write_r+0x1e>
 8002d04:	6023      	str	r3, [r4, #0]
 8002d06:	bd38      	pop	{r3, r4, r5, pc}
 8002d08:	2000037c 	.word	0x2000037c

08002d0c <__errno>:
 8002d0c:	4b01      	ldr	r3, [pc, #4]	@ (8002d14 <__errno+0x8>)
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000018 	.word	0x20000018

08002d18 <__libc_init_array>:
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	2600      	movs	r6, #0
 8002d1c:	4d0c      	ldr	r5, [pc, #48]	@ (8002d50 <__libc_init_array+0x38>)
 8002d1e:	4c0d      	ldr	r4, [pc, #52]	@ (8002d54 <__libc_init_array+0x3c>)
 8002d20:	1b64      	subs	r4, r4, r5
 8002d22:	10a4      	asrs	r4, r4, #2
 8002d24:	42a6      	cmp	r6, r4
 8002d26:	d109      	bne.n	8002d3c <__libc_init_array+0x24>
 8002d28:	f001 fecc 	bl	8004ac4 <_init>
 8002d2c:	2600      	movs	r6, #0
 8002d2e:	4d0a      	ldr	r5, [pc, #40]	@ (8002d58 <__libc_init_array+0x40>)
 8002d30:	4c0a      	ldr	r4, [pc, #40]	@ (8002d5c <__libc_init_array+0x44>)
 8002d32:	1b64      	subs	r4, r4, r5
 8002d34:	10a4      	asrs	r4, r4, #2
 8002d36:	42a6      	cmp	r6, r4
 8002d38:	d105      	bne.n	8002d46 <__libc_init_array+0x2e>
 8002d3a:	bd70      	pop	{r4, r5, r6, pc}
 8002d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d40:	4798      	blx	r3
 8002d42:	3601      	adds	r6, #1
 8002d44:	e7ee      	b.n	8002d24 <__libc_init_array+0xc>
 8002d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d4a:	4798      	blx	r3
 8002d4c:	3601      	adds	r6, #1
 8002d4e:	e7f2      	b.n	8002d36 <__libc_init_array+0x1e>
 8002d50:	08004e94 	.word	0x08004e94
 8002d54:	08004e94 	.word	0x08004e94
 8002d58:	08004e94 	.word	0x08004e94
 8002d5c:	08004e98 	.word	0x08004e98

08002d60 <__retarget_lock_init_recursive>:
 8002d60:	4770      	bx	lr

08002d62 <__retarget_lock_acquire_recursive>:
 8002d62:	4770      	bx	lr

08002d64 <__retarget_lock_release_recursive>:
 8002d64:	4770      	bx	lr

08002d66 <memchr>:
 8002d66:	4603      	mov	r3, r0
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	b2c9      	uxtb	r1, r1
 8002d6c:	4402      	add	r2, r0
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	d101      	bne.n	8002d78 <memchr+0x12>
 8002d74:	2000      	movs	r0, #0
 8002d76:	e003      	b.n	8002d80 <memchr+0x1a>
 8002d78:	7804      	ldrb	r4, [r0, #0]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	428c      	cmp	r4, r1
 8002d7e:	d1f6      	bne.n	8002d6e <memchr+0x8>
 8002d80:	bd10      	pop	{r4, pc}

08002d82 <memcpy>:
 8002d82:	440a      	add	r2, r1
 8002d84:	4291      	cmp	r1, r2
 8002d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d8a:	d100      	bne.n	8002d8e <memcpy+0xc>
 8002d8c:	4770      	bx	lr
 8002d8e:	b510      	push	{r4, lr}
 8002d90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d94:	4291      	cmp	r1, r2
 8002d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d9a:	d1f9      	bne.n	8002d90 <memcpy+0xe>
 8002d9c:	bd10      	pop	{r4, pc}

08002d9e <quorem>:
 8002d9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da2:	6903      	ldr	r3, [r0, #16]
 8002da4:	690c      	ldr	r4, [r1, #16]
 8002da6:	4607      	mov	r7, r0
 8002da8:	42a3      	cmp	r3, r4
 8002daa:	db7e      	blt.n	8002eaa <quorem+0x10c>
 8002dac:	3c01      	subs	r4, #1
 8002dae:	00a3      	lsls	r3, r4, #2
 8002db0:	f100 0514 	add.w	r5, r0, #20
 8002db4:	f101 0814 	add.w	r8, r1, #20
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002dc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8002dd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002dd4:	d32e      	bcc.n	8002e34 <quorem+0x96>
 8002dd6:	f04f 0a00 	mov.w	sl, #0
 8002dda:	46c4      	mov	ip, r8
 8002ddc:	46ae      	mov	lr, r5
 8002dde:	46d3      	mov	fp, sl
 8002de0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002de4:	b298      	uxth	r0, r3
 8002de6:	fb06 a000 	mla	r0, r6, r0, sl
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	0c02      	lsrs	r2, r0, #16
 8002dee:	fb06 2303 	mla	r3, r6, r3, r2
 8002df2:	f8de 2000 	ldr.w	r2, [lr]
 8002df6:	b280      	uxth	r0, r0
 8002df8:	b292      	uxth	r2, r2
 8002dfa:	1a12      	subs	r2, r2, r0
 8002dfc:	445a      	add	r2, fp
 8002dfe:	f8de 0000 	ldr.w	r0, [lr]
 8002e02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002e0c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002e10:	b292      	uxth	r2, r2
 8002e12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002e16:	45e1      	cmp	r9, ip
 8002e18:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002e1c:	f84e 2b04 	str.w	r2, [lr], #4
 8002e20:	d2de      	bcs.n	8002de0 <quorem+0x42>
 8002e22:	9b00      	ldr	r3, [sp, #0]
 8002e24:	58eb      	ldr	r3, [r5, r3]
 8002e26:	b92b      	cbnz	r3, 8002e34 <quorem+0x96>
 8002e28:	9b01      	ldr	r3, [sp, #4]
 8002e2a:	3b04      	subs	r3, #4
 8002e2c:	429d      	cmp	r5, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	d32f      	bcc.n	8002e92 <quorem+0xf4>
 8002e32:	613c      	str	r4, [r7, #16]
 8002e34:	4638      	mov	r0, r7
 8002e36:	f001 f97f 	bl	8004138 <__mcmp>
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	db25      	blt.n	8002e8a <quorem+0xec>
 8002e3e:	4629      	mov	r1, r5
 8002e40:	2000      	movs	r0, #0
 8002e42:	f858 2b04 	ldr.w	r2, [r8], #4
 8002e46:	f8d1 c000 	ldr.w	ip, [r1]
 8002e4a:	fa1f fe82 	uxth.w	lr, r2
 8002e4e:	fa1f f38c 	uxth.w	r3, ip
 8002e52:	eba3 030e 	sub.w	r3, r3, lr
 8002e56:	4403      	add	r3, r0
 8002e58:	0c12      	lsrs	r2, r2, #16
 8002e5a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002e5e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e68:	45c1      	cmp	r9, r8
 8002e6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002e6e:	f841 3b04 	str.w	r3, [r1], #4
 8002e72:	d2e6      	bcs.n	8002e42 <quorem+0xa4>
 8002e74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002e78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002e7c:	b922      	cbnz	r2, 8002e88 <quorem+0xea>
 8002e7e:	3b04      	subs	r3, #4
 8002e80:	429d      	cmp	r5, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	d30b      	bcc.n	8002e9e <quorem+0x100>
 8002e86:	613c      	str	r4, [r7, #16]
 8002e88:	3601      	adds	r6, #1
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	b003      	add	sp, #12
 8002e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	3b04      	subs	r3, #4
 8002e96:	2a00      	cmp	r2, #0
 8002e98:	d1cb      	bne.n	8002e32 <quorem+0x94>
 8002e9a:	3c01      	subs	r4, #1
 8002e9c:	e7c6      	b.n	8002e2c <quorem+0x8e>
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	3b04      	subs	r3, #4
 8002ea2:	2a00      	cmp	r2, #0
 8002ea4:	d1ef      	bne.n	8002e86 <quorem+0xe8>
 8002ea6:	3c01      	subs	r4, #1
 8002ea8:	e7ea      	b.n	8002e80 <quorem+0xe2>
 8002eaa:	2000      	movs	r0, #0
 8002eac:	e7ee      	b.n	8002e8c <quorem+0xee>
	...

08002eb0 <_dtoa_r>:
 8002eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb4:	4614      	mov	r4, r2
 8002eb6:	461d      	mov	r5, r3
 8002eb8:	69c7      	ldr	r7, [r0, #28]
 8002eba:	b097      	sub	sp, #92	@ 0x5c
 8002ebc:	4681      	mov	r9, r0
 8002ebe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002ec2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8002ec4:	b97f      	cbnz	r7, 8002ee6 <_dtoa_r+0x36>
 8002ec6:	2010      	movs	r0, #16
 8002ec8:	f000 fe0e 	bl	8003ae8 <malloc>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f8c9 001c 	str.w	r0, [r9, #28]
 8002ed2:	b920      	cbnz	r0, 8002ede <_dtoa_r+0x2e>
 8002ed4:	21ef      	movs	r1, #239	@ 0xef
 8002ed6:	4bac      	ldr	r3, [pc, #688]	@ (8003188 <_dtoa_r+0x2d8>)
 8002ed8:	48ac      	ldr	r0, [pc, #688]	@ (800318c <_dtoa_r+0x2dc>)
 8002eda:	f001 faed 	bl	80044b8 <__assert_func>
 8002ede:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002ee2:	6007      	str	r7, [r0, #0]
 8002ee4:	60c7      	str	r7, [r0, #12]
 8002ee6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002eea:	6819      	ldr	r1, [r3, #0]
 8002eec:	b159      	cbz	r1, 8002f06 <_dtoa_r+0x56>
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	4093      	lsls	r3, r2
 8002ef4:	604a      	str	r2, [r1, #4]
 8002ef6:	608b      	str	r3, [r1, #8]
 8002ef8:	4648      	mov	r0, r9
 8002efa:	f000 feeb 	bl	8003cd4 <_Bfree>
 8002efe:	2200      	movs	r2, #0
 8002f00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	1e2b      	subs	r3, r5, #0
 8002f08:	bfaf      	iteee	ge
 8002f0a:	2300      	movge	r3, #0
 8002f0c:	2201      	movlt	r2, #1
 8002f0e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8002f12:	9307      	strlt	r3, [sp, #28]
 8002f14:	bfa8      	it	ge
 8002f16:	6033      	strge	r3, [r6, #0]
 8002f18:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8002f1c:	4b9c      	ldr	r3, [pc, #624]	@ (8003190 <_dtoa_r+0x2e0>)
 8002f1e:	bfb8      	it	lt
 8002f20:	6032      	strlt	r2, [r6, #0]
 8002f22:	ea33 0308 	bics.w	r3, r3, r8
 8002f26:	d112      	bne.n	8002f4e <_dtoa_r+0x9e>
 8002f28:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002f2c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8002f34:	4323      	orrs	r3, r4
 8002f36:	f000 855e 	beq.w	80039f6 <_dtoa_r+0xb46>
 8002f3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8002f3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003194 <_dtoa_r+0x2e4>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 8560 	beq.w	8003a06 <_dtoa_r+0xb56>
 8002f46:	f10a 0303 	add.w	r3, sl, #3
 8002f4a:	f000 bd5a 	b.w	8003a02 <_dtoa_r+0xb52>
 8002f4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002f52:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8002f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f7fd fd23 	bl	80009a8 <__aeabi_dcmpeq>
 8002f62:	4607      	mov	r7, r0
 8002f64:	b158      	cbz	r0, 8002f7e <_dtoa_r+0xce>
 8002f66:	2301      	movs	r3, #1
 8002f68:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8002f6e:	b113      	cbz	r3, 8002f76 <_dtoa_r+0xc6>
 8002f70:	4b89      	ldr	r3, [pc, #548]	@ (8003198 <_dtoa_r+0x2e8>)
 8002f72:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800319c <_dtoa_r+0x2ec>
 8002f7a:	f000 bd44 	b.w	8003a06 <_dtoa_r+0xb56>
 8002f7e:	ab14      	add	r3, sp, #80	@ 0x50
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	ab15      	add	r3, sp, #84	@ 0x54
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	4648      	mov	r0, r9
 8002f88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8002f8c:	f001 f984 	bl	8004298 <__d2b>
 8002f90:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8002f94:	9003      	str	r0, [sp, #12]
 8002f96:	2e00      	cmp	r6, #0
 8002f98:	d078      	beq.n	800308c <_dtoa_r+0x1dc>
 8002f9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002fa0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002fac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002fb0:	9712      	str	r7, [sp, #72]	@ 0x48
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	4b7a      	ldr	r3, [pc, #488]	@ (80031a0 <_dtoa_r+0x2f0>)
 8002fb8:	f7fd f8d6 	bl	8000168 <__aeabi_dsub>
 8002fbc:	a36c      	add	r3, pc, #432	@ (adr r3, 8003170 <_dtoa_r+0x2c0>)
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	f7fd fa89 	bl	80004d8 <__aeabi_dmul>
 8002fc6:	a36c      	add	r3, pc, #432	@ (adr r3, 8003178 <_dtoa_r+0x2c8>)
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	f7fd f8ce 	bl	800016c <__adddf3>
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	460d      	mov	r5, r1
 8002fd6:	f7fd fa15 	bl	8000404 <__aeabi_i2d>
 8002fda:	a369      	add	r3, pc, #420	@ (adr r3, 8003180 <_dtoa_r+0x2d0>)
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	f7fd fa7a 	bl	80004d8 <__aeabi_dmul>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4620      	mov	r0, r4
 8002fea:	4629      	mov	r1, r5
 8002fec:	f7fd f8be 	bl	800016c <__adddf3>
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	460d      	mov	r5, r1
 8002ff4:	f7fd fd20 	bl	8000a38 <__aeabi_d2iz>
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	4607      	mov	r7, r0
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	4620      	mov	r0, r4
 8003000:	4629      	mov	r1, r5
 8003002:	f7fd fcdb 	bl	80009bc <__aeabi_dcmplt>
 8003006:	b140      	cbz	r0, 800301a <_dtoa_r+0x16a>
 8003008:	4638      	mov	r0, r7
 800300a:	f7fd f9fb 	bl	8000404 <__aeabi_i2d>
 800300e:	4622      	mov	r2, r4
 8003010:	462b      	mov	r3, r5
 8003012:	f7fd fcc9 	bl	80009a8 <__aeabi_dcmpeq>
 8003016:	b900      	cbnz	r0, 800301a <_dtoa_r+0x16a>
 8003018:	3f01      	subs	r7, #1
 800301a:	2f16      	cmp	r7, #22
 800301c:	d854      	bhi.n	80030c8 <_dtoa_r+0x218>
 800301e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003022:	4b60      	ldr	r3, [pc, #384]	@ (80031a4 <_dtoa_r+0x2f4>)
 8003024:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302c:	f7fd fcc6 	bl	80009bc <__aeabi_dcmplt>
 8003030:	2800      	cmp	r0, #0
 8003032:	d04b      	beq.n	80030cc <_dtoa_r+0x21c>
 8003034:	2300      	movs	r3, #0
 8003036:	3f01      	subs	r7, #1
 8003038:	930f      	str	r3, [sp, #60]	@ 0x3c
 800303a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800303c:	1b9b      	subs	r3, r3, r6
 800303e:	1e5a      	subs	r2, r3, #1
 8003040:	bf49      	itett	mi
 8003042:	f1c3 0301 	rsbmi	r3, r3, #1
 8003046:	2300      	movpl	r3, #0
 8003048:	9304      	strmi	r3, [sp, #16]
 800304a:	2300      	movmi	r3, #0
 800304c:	9209      	str	r2, [sp, #36]	@ 0x24
 800304e:	bf54      	ite	pl
 8003050:	9304      	strpl	r3, [sp, #16]
 8003052:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003054:	2f00      	cmp	r7, #0
 8003056:	db3b      	blt.n	80030d0 <_dtoa_r+0x220>
 8003058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800305a:	970e      	str	r7, [sp, #56]	@ 0x38
 800305c:	443b      	add	r3, r7
 800305e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003060:	2300      	movs	r3, #0
 8003062:	930a      	str	r3, [sp, #40]	@ 0x28
 8003064:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003066:	2b09      	cmp	r3, #9
 8003068:	d865      	bhi.n	8003136 <_dtoa_r+0x286>
 800306a:	2b05      	cmp	r3, #5
 800306c:	bfc4      	itt	gt
 800306e:	3b04      	subgt	r3, #4
 8003070:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003072:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003074:	bfc8      	it	gt
 8003076:	2400      	movgt	r4, #0
 8003078:	f1a3 0302 	sub.w	r3, r3, #2
 800307c:	bfd8      	it	le
 800307e:	2401      	movle	r4, #1
 8003080:	2b03      	cmp	r3, #3
 8003082:	d864      	bhi.n	800314e <_dtoa_r+0x29e>
 8003084:	e8df f003 	tbb	[pc, r3]
 8003088:	2c385553 	.word	0x2c385553
 800308c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003090:	441e      	add	r6, r3
 8003092:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003096:	2b20      	cmp	r3, #32
 8003098:	bfc1      	itttt	gt
 800309a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800309e:	fa08 f803 	lslgt.w	r8, r8, r3
 80030a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80030a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80030aa:	bfd6      	itet	le
 80030ac:	f1c3 0320 	rsble	r3, r3, #32
 80030b0:	ea48 0003 	orrgt.w	r0, r8, r3
 80030b4:	fa04 f003 	lslle.w	r0, r4, r3
 80030b8:	f7fd f994 	bl	80003e4 <__aeabi_ui2d>
 80030bc:	2201      	movs	r2, #1
 80030be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80030c2:	3e01      	subs	r6, #1
 80030c4:	9212      	str	r2, [sp, #72]	@ 0x48
 80030c6:	e774      	b.n	8002fb2 <_dtoa_r+0x102>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e7b5      	b.n	8003038 <_dtoa_r+0x188>
 80030cc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80030ce:	e7b4      	b.n	800303a <_dtoa_r+0x18a>
 80030d0:	9b04      	ldr	r3, [sp, #16]
 80030d2:	1bdb      	subs	r3, r3, r7
 80030d4:	9304      	str	r3, [sp, #16]
 80030d6:	427b      	negs	r3, r7
 80030d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80030da:	2300      	movs	r3, #0
 80030dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80030de:	e7c1      	b.n	8003064 <_dtoa_r+0x1b4>
 80030e0:	2301      	movs	r3, #1
 80030e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80030e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80030e6:	eb07 0b03 	add.w	fp, r7, r3
 80030ea:	f10b 0301 	add.w	r3, fp, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	9308      	str	r3, [sp, #32]
 80030f2:	bfb8      	it	lt
 80030f4:	2301      	movlt	r3, #1
 80030f6:	e006      	b.n	8003106 <_dtoa_r+0x256>
 80030f8:	2301      	movs	r3, #1
 80030fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80030fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80030fe:	2b00      	cmp	r3, #0
 8003100:	dd28      	ble.n	8003154 <_dtoa_r+0x2a4>
 8003102:	469b      	mov	fp, r3
 8003104:	9308      	str	r3, [sp, #32]
 8003106:	2100      	movs	r1, #0
 8003108:	2204      	movs	r2, #4
 800310a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800310e:	f102 0514 	add.w	r5, r2, #20
 8003112:	429d      	cmp	r5, r3
 8003114:	d926      	bls.n	8003164 <_dtoa_r+0x2b4>
 8003116:	6041      	str	r1, [r0, #4]
 8003118:	4648      	mov	r0, r9
 800311a:	f000 fd9b 	bl	8003c54 <_Balloc>
 800311e:	4682      	mov	sl, r0
 8003120:	2800      	cmp	r0, #0
 8003122:	d143      	bne.n	80031ac <_dtoa_r+0x2fc>
 8003124:	4602      	mov	r2, r0
 8003126:	f240 11af 	movw	r1, #431	@ 0x1af
 800312a:	4b1f      	ldr	r3, [pc, #124]	@ (80031a8 <_dtoa_r+0x2f8>)
 800312c:	e6d4      	b.n	8002ed8 <_dtoa_r+0x28>
 800312e:	2300      	movs	r3, #0
 8003130:	e7e3      	b.n	80030fa <_dtoa_r+0x24a>
 8003132:	2300      	movs	r3, #0
 8003134:	e7d5      	b.n	80030e2 <_dtoa_r+0x232>
 8003136:	2401      	movs	r4, #1
 8003138:	2300      	movs	r3, #0
 800313a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800313c:	9320      	str	r3, [sp, #128]	@ 0x80
 800313e:	f04f 3bff 	mov.w	fp, #4294967295
 8003142:	2200      	movs	r2, #0
 8003144:	2312      	movs	r3, #18
 8003146:	f8cd b020 	str.w	fp, [sp, #32]
 800314a:	9221      	str	r2, [sp, #132]	@ 0x84
 800314c:	e7db      	b.n	8003106 <_dtoa_r+0x256>
 800314e:	2301      	movs	r3, #1
 8003150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003152:	e7f4      	b.n	800313e <_dtoa_r+0x28e>
 8003154:	f04f 0b01 	mov.w	fp, #1
 8003158:	465b      	mov	r3, fp
 800315a:	f8cd b020 	str.w	fp, [sp, #32]
 800315e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003162:	e7d0      	b.n	8003106 <_dtoa_r+0x256>
 8003164:	3101      	adds	r1, #1
 8003166:	0052      	lsls	r2, r2, #1
 8003168:	e7d1      	b.n	800310e <_dtoa_r+0x25e>
 800316a:	bf00      	nop
 800316c:	f3af 8000 	nop.w
 8003170:	636f4361 	.word	0x636f4361
 8003174:	3fd287a7 	.word	0x3fd287a7
 8003178:	8b60c8b3 	.word	0x8b60c8b3
 800317c:	3fc68a28 	.word	0x3fc68a28
 8003180:	509f79fb 	.word	0x509f79fb
 8003184:	3fd34413 	.word	0x3fd34413
 8003188:	08004b5b 	.word	0x08004b5b
 800318c:	08004b72 	.word	0x08004b72
 8003190:	7ff00000 	.word	0x7ff00000
 8003194:	08004b57 	.word	0x08004b57
 8003198:	08004b2b 	.word	0x08004b2b
 800319c:	08004b2a 	.word	0x08004b2a
 80031a0:	3ff80000 	.word	0x3ff80000
 80031a4:	08004cc0 	.word	0x08004cc0
 80031a8:	08004bca 	.word	0x08004bca
 80031ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80031b0:	6018      	str	r0, [r3, #0]
 80031b2:	9b08      	ldr	r3, [sp, #32]
 80031b4:	2b0e      	cmp	r3, #14
 80031b6:	f200 80a1 	bhi.w	80032fc <_dtoa_r+0x44c>
 80031ba:	2c00      	cmp	r4, #0
 80031bc:	f000 809e 	beq.w	80032fc <_dtoa_r+0x44c>
 80031c0:	2f00      	cmp	r7, #0
 80031c2:	dd33      	ble.n	800322c <_dtoa_r+0x37c>
 80031c4:	4b9c      	ldr	r3, [pc, #624]	@ (8003438 <_dtoa_r+0x588>)
 80031c6:	f007 020f 	and.w	r2, r7, #15
 80031ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80031ce:	05f8      	lsls	r0, r7, #23
 80031d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80031d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80031dc:	d516      	bpl.n	800320c <_dtoa_r+0x35c>
 80031de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80031e2:	4b96      	ldr	r3, [pc, #600]	@ (800343c <_dtoa_r+0x58c>)
 80031e4:	2603      	movs	r6, #3
 80031e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80031ea:	f7fd fa9f 	bl	800072c <__aeabi_ddiv>
 80031ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80031f2:	f004 040f 	and.w	r4, r4, #15
 80031f6:	4d91      	ldr	r5, [pc, #580]	@ (800343c <_dtoa_r+0x58c>)
 80031f8:	b954      	cbnz	r4, 8003210 <_dtoa_r+0x360>
 80031fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80031fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003202:	f7fd fa93 	bl	800072c <__aeabi_ddiv>
 8003206:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800320a:	e028      	b.n	800325e <_dtoa_r+0x3ae>
 800320c:	2602      	movs	r6, #2
 800320e:	e7f2      	b.n	80031f6 <_dtoa_r+0x346>
 8003210:	07e1      	lsls	r1, r4, #31
 8003212:	d508      	bpl.n	8003226 <_dtoa_r+0x376>
 8003214:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003218:	e9d5 2300 	ldrd	r2, r3, [r5]
 800321c:	f7fd f95c 	bl	80004d8 <__aeabi_dmul>
 8003220:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003224:	3601      	adds	r6, #1
 8003226:	1064      	asrs	r4, r4, #1
 8003228:	3508      	adds	r5, #8
 800322a:	e7e5      	b.n	80031f8 <_dtoa_r+0x348>
 800322c:	f000 80af 	beq.w	800338e <_dtoa_r+0x4de>
 8003230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003234:	427c      	negs	r4, r7
 8003236:	4b80      	ldr	r3, [pc, #512]	@ (8003438 <_dtoa_r+0x588>)
 8003238:	f004 020f 	and.w	r2, r4, #15
 800323c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	f7fd f948 	bl	80004d8 <__aeabi_dmul>
 8003248:	2602      	movs	r6, #2
 800324a:	2300      	movs	r3, #0
 800324c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003250:	4d7a      	ldr	r5, [pc, #488]	@ (800343c <_dtoa_r+0x58c>)
 8003252:	1124      	asrs	r4, r4, #4
 8003254:	2c00      	cmp	r4, #0
 8003256:	f040 808f 	bne.w	8003378 <_dtoa_r+0x4c8>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1d3      	bne.n	8003206 <_dtoa_r+0x356>
 800325e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003262:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8094 	beq.w	8003392 <_dtoa_r+0x4e2>
 800326a:	2200      	movs	r2, #0
 800326c:	4620      	mov	r0, r4
 800326e:	4629      	mov	r1, r5
 8003270:	4b73      	ldr	r3, [pc, #460]	@ (8003440 <_dtoa_r+0x590>)
 8003272:	f7fd fba3 	bl	80009bc <__aeabi_dcmplt>
 8003276:	2800      	cmp	r0, #0
 8003278:	f000 808b 	beq.w	8003392 <_dtoa_r+0x4e2>
 800327c:	9b08      	ldr	r3, [sp, #32]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8087 	beq.w	8003392 <_dtoa_r+0x4e2>
 8003284:	f1bb 0f00 	cmp.w	fp, #0
 8003288:	dd34      	ble.n	80032f4 <_dtoa_r+0x444>
 800328a:	4620      	mov	r0, r4
 800328c:	2200      	movs	r2, #0
 800328e:	4629      	mov	r1, r5
 8003290:	4b6c      	ldr	r3, [pc, #432]	@ (8003444 <_dtoa_r+0x594>)
 8003292:	f7fd f921 	bl	80004d8 <__aeabi_dmul>
 8003296:	465c      	mov	r4, fp
 8003298:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800329c:	f107 38ff 	add.w	r8, r7, #4294967295
 80032a0:	3601      	adds	r6, #1
 80032a2:	4630      	mov	r0, r6
 80032a4:	f7fd f8ae 	bl	8000404 <__aeabi_i2d>
 80032a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80032ac:	f7fd f914 	bl	80004d8 <__aeabi_dmul>
 80032b0:	2200      	movs	r2, #0
 80032b2:	4b65      	ldr	r3, [pc, #404]	@ (8003448 <_dtoa_r+0x598>)
 80032b4:	f7fc ff5a 	bl	800016c <__adddf3>
 80032b8:	4605      	mov	r5, r0
 80032ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80032be:	2c00      	cmp	r4, #0
 80032c0:	d16a      	bne.n	8003398 <_dtoa_r+0x4e8>
 80032c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032c6:	2200      	movs	r2, #0
 80032c8:	4b60      	ldr	r3, [pc, #384]	@ (800344c <_dtoa_r+0x59c>)
 80032ca:	f7fc ff4d 	bl	8000168 <__aeabi_dsub>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80032d6:	462a      	mov	r2, r5
 80032d8:	4633      	mov	r3, r6
 80032da:	f7fd fb8d 	bl	80009f8 <__aeabi_dcmpgt>
 80032de:	2800      	cmp	r0, #0
 80032e0:	f040 8298 	bne.w	8003814 <_dtoa_r+0x964>
 80032e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032e8:	462a      	mov	r2, r5
 80032ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80032ee:	f7fd fb65 	bl	80009bc <__aeabi_dcmplt>
 80032f2:	bb38      	cbnz	r0, 8003344 <_dtoa_r+0x494>
 80032f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80032f8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80032fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f2c0 8157 	blt.w	80035b2 <_dtoa_r+0x702>
 8003304:	2f0e      	cmp	r7, #14
 8003306:	f300 8154 	bgt.w	80035b2 <_dtoa_r+0x702>
 800330a:	4b4b      	ldr	r3, [pc, #300]	@ (8003438 <_dtoa_r+0x588>)
 800330c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003310:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003314:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003318:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800331a:	2b00      	cmp	r3, #0
 800331c:	f280 80e5 	bge.w	80034ea <_dtoa_r+0x63a>
 8003320:	9b08      	ldr	r3, [sp, #32]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f300 80e1 	bgt.w	80034ea <_dtoa_r+0x63a>
 8003328:	d10c      	bne.n	8003344 <_dtoa_r+0x494>
 800332a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800332e:	2200      	movs	r2, #0
 8003330:	4b46      	ldr	r3, [pc, #280]	@ (800344c <_dtoa_r+0x59c>)
 8003332:	f7fd f8d1 	bl	80004d8 <__aeabi_dmul>
 8003336:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800333a:	f7fd fb53 	bl	80009e4 <__aeabi_dcmpge>
 800333e:	2800      	cmp	r0, #0
 8003340:	f000 8266 	beq.w	8003810 <_dtoa_r+0x960>
 8003344:	2400      	movs	r4, #0
 8003346:	4625      	mov	r5, r4
 8003348:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800334a:	4656      	mov	r6, sl
 800334c:	ea6f 0803 	mvn.w	r8, r3
 8003350:	2700      	movs	r7, #0
 8003352:	4621      	mov	r1, r4
 8003354:	4648      	mov	r0, r9
 8003356:	f000 fcbd 	bl	8003cd4 <_Bfree>
 800335a:	2d00      	cmp	r5, #0
 800335c:	f000 80bd 	beq.w	80034da <_dtoa_r+0x62a>
 8003360:	b12f      	cbz	r7, 800336e <_dtoa_r+0x4be>
 8003362:	42af      	cmp	r7, r5
 8003364:	d003      	beq.n	800336e <_dtoa_r+0x4be>
 8003366:	4639      	mov	r1, r7
 8003368:	4648      	mov	r0, r9
 800336a:	f000 fcb3 	bl	8003cd4 <_Bfree>
 800336e:	4629      	mov	r1, r5
 8003370:	4648      	mov	r0, r9
 8003372:	f000 fcaf 	bl	8003cd4 <_Bfree>
 8003376:	e0b0      	b.n	80034da <_dtoa_r+0x62a>
 8003378:	07e2      	lsls	r2, r4, #31
 800337a:	d505      	bpl.n	8003388 <_dtoa_r+0x4d8>
 800337c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003380:	f7fd f8aa 	bl	80004d8 <__aeabi_dmul>
 8003384:	2301      	movs	r3, #1
 8003386:	3601      	adds	r6, #1
 8003388:	1064      	asrs	r4, r4, #1
 800338a:	3508      	adds	r5, #8
 800338c:	e762      	b.n	8003254 <_dtoa_r+0x3a4>
 800338e:	2602      	movs	r6, #2
 8003390:	e765      	b.n	800325e <_dtoa_r+0x3ae>
 8003392:	46b8      	mov	r8, r7
 8003394:	9c08      	ldr	r4, [sp, #32]
 8003396:	e784      	b.n	80032a2 <_dtoa_r+0x3f2>
 8003398:	4b27      	ldr	r3, [pc, #156]	@ (8003438 <_dtoa_r+0x588>)
 800339a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800339c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80033a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80033a4:	4454      	add	r4, sl
 80033a6:	2900      	cmp	r1, #0
 80033a8:	d054      	beq.n	8003454 <_dtoa_r+0x5a4>
 80033aa:	2000      	movs	r0, #0
 80033ac:	4928      	ldr	r1, [pc, #160]	@ (8003450 <_dtoa_r+0x5a0>)
 80033ae:	f7fd f9bd 	bl	800072c <__aeabi_ddiv>
 80033b2:	4633      	mov	r3, r6
 80033b4:	462a      	mov	r2, r5
 80033b6:	f7fc fed7 	bl	8000168 <__aeabi_dsub>
 80033ba:	4656      	mov	r6, sl
 80033bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80033c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033c4:	f7fd fb38 	bl	8000a38 <__aeabi_d2iz>
 80033c8:	4605      	mov	r5, r0
 80033ca:	f7fd f81b 	bl	8000404 <__aeabi_i2d>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033d6:	f7fc fec7 	bl	8000168 <__aeabi_dsub>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	3530      	adds	r5, #48	@ 0x30
 80033e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80033e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80033e8:	f806 5b01 	strb.w	r5, [r6], #1
 80033ec:	f7fd fae6 	bl	80009bc <__aeabi_dcmplt>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d172      	bne.n	80034da <_dtoa_r+0x62a>
 80033f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80033f8:	2000      	movs	r0, #0
 80033fa:	4911      	ldr	r1, [pc, #68]	@ (8003440 <_dtoa_r+0x590>)
 80033fc:	f7fc feb4 	bl	8000168 <__aeabi_dsub>
 8003400:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003404:	f7fd fada 	bl	80009bc <__aeabi_dcmplt>
 8003408:	2800      	cmp	r0, #0
 800340a:	f040 80b4 	bne.w	8003576 <_dtoa_r+0x6c6>
 800340e:	42a6      	cmp	r6, r4
 8003410:	f43f af70 	beq.w	80032f4 <_dtoa_r+0x444>
 8003414:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003418:	2200      	movs	r2, #0
 800341a:	4b0a      	ldr	r3, [pc, #40]	@ (8003444 <_dtoa_r+0x594>)
 800341c:	f7fd f85c 	bl	80004d8 <__aeabi_dmul>
 8003420:	2200      	movs	r2, #0
 8003422:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800342a:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <_dtoa_r+0x594>)
 800342c:	f7fd f854 	bl	80004d8 <__aeabi_dmul>
 8003430:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003434:	e7c4      	b.n	80033c0 <_dtoa_r+0x510>
 8003436:	bf00      	nop
 8003438:	08004cc0 	.word	0x08004cc0
 800343c:	08004c98 	.word	0x08004c98
 8003440:	3ff00000 	.word	0x3ff00000
 8003444:	40240000 	.word	0x40240000
 8003448:	401c0000 	.word	0x401c0000
 800344c:	40140000 	.word	0x40140000
 8003450:	3fe00000 	.word	0x3fe00000
 8003454:	4631      	mov	r1, r6
 8003456:	4628      	mov	r0, r5
 8003458:	f7fd f83e 	bl	80004d8 <__aeabi_dmul>
 800345c:	4656      	mov	r6, sl
 800345e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003462:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003464:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003468:	f7fd fae6 	bl	8000a38 <__aeabi_d2iz>
 800346c:	4605      	mov	r5, r0
 800346e:	f7fc ffc9 	bl	8000404 <__aeabi_i2d>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800347a:	f7fc fe75 	bl	8000168 <__aeabi_dsub>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	3530      	adds	r5, #48	@ 0x30
 8003484:	f806 5b01 	strb.w	r5, [r6], #1
 8003488:	42a6      	cmp	r6, r4
 800348a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	d124      	bne.n	80034de <_dtoa_r+0x62e>
 8003494:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003498:	4bae      	ldr	r3, [pc, #696]	@ (8003754 <_dtoa_r+0x8a4>)
 800349a:	f7fc fe67 	bl	800016c <__adddf3>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034a6:	f7fd faa7 	bl	80009f8 <__aeabi_dcmpgt>
 80034aa:	2800      	cmp	r0, #0
 80034ac:	d163      	bne.n	8003576 <_dtoa_r+0x6c6>
 80034ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80034b2:	2000      	movs	r0, #0
 80034b4:	49a7      	ldr	r1, [pc, #668]	@ (8003754 <_dtoa_r+0x8a4>)
 80034b6:	f7fc fe57 	bl	8000168 <__aeabi_dsub>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034c2:	f7fd fa7b 	bl	80009bc <__aeabi_dcmplt>
 80034c6:	2800      	cmp	r0, #0
 80034c8:	f43f af14 	beq.w	80032f4 <_dtoa_r+0x444>
 80034cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80034ce:	1e73      	subs	r3, r6, #1
 80034d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80034d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80034d6:	2b30      	cmp	r3, #48	@ 0x30
 80034d8:	d0f8      	beq.n	80034cc <_dtoa_r+0x61c>
 80034da:	4647      	mov	r7, r8
 80034dc:	e03b      	b.n	8003556 <_dtoa_r+0x6a6>
 80034de:	4b9e      	ldr	r3, [pc, #632]	@ (8003758 <_dtoa_r+0x8a8>)
 80034e0:	f7fc fffa 	bl	80004d8 <__aeabi_dmul>
 80034e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80034e8:	e7bc      	b.n	8003464 <_dtoa_r+0x5b4>
 80034ea:	4656      	mov	r6, sl
 80034ec:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80034f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034f4:	4620      	mov	r0, r4
 80034f6:	4629      	mov	r1, r5
 80034f8:	f7fd f918 	bl	800072c <__aeabi_ddiv>
 80034fc:	f7fd fa9c 	bl	8000a38 <__aeabi_d2iz>
 8003500:	4680      	mov	r8, r0
 8003502:	f7fc ff7f 	bl	8000404 <__aeabi_i2d>
 8003506:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800350a:	f7fc ffe5 	bl	80004d8 <__aeabi_dmul>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4620      	mov	r0, r4
 8003514:	4629      	mov	r1, r5
 8003516:	f7fc fe27 	bl	8000168 <__aeabi_dsub>
 800351a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800351e:	9d08      	ldr	r5, [sp, #32]
 8003520:	f806 4b01 	strb.w	r4, [r6], #1
 8003524:	eba6 040a 	sub.w	r4, r6, sl
 8003528:	42a5      	cmp	r5, r4
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	d133      	bne.n	8003598 <_dtoa_r+0x6e8>
 8003530:	f7fc fe1c 	bl	800016c <__adddf3>
 8003534:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003538:	4604      	mov	r4, r0
 800353a:	460d      	mov	r5, r1
 800353c:	f7fd fa5c 	bl	80009f8 <__aeabi_dcmpgt>
 8003540:	b9c0      	cbnz	r0, 8003574 <_dtoa_r+0x6c4>
 8003542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003546:	4620      	mov	r0, r4
 8003548:	4629      	mov	r1, r5
 800354a:	f7fd fa2d 	bl	80009a8 <__aeabi_dcmpeq>
 800354e:	b110      	cbz	r0, 8003556 <_dtoa_r+0x6a6>
 8003550:	f018 0f01 	tst.w	r8, #1
 8003554:	d10e      	bne.n	8003574 <_dtoa_r+0x6c4>
 8003556:	4648      	mov	r0, r9
 8003558:	9903      	ldr	r1, [sp, #12]
 800355a:	f000 fbbb 	bl	8003cd4 <_Bfree>
 800355e:	2300      	movs	r3, #0
 8003560:	7033      	strb	r3, [r6, #0]
 8003562:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003564:	3701      	adds	r7, #1
 8003566:	601f      	str	r7, [r3, #0]
 8003568:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 824b 	beq.w	8003a06 <_dtoa_r+0xb56>
 8003570:	601e      	str	r6, [r3, #0]
 8003572:	e248      	b.n	8003a06 <_dtoa_r+0xb56>
 8003574:	46b8      	mov	r8, r7
 8003576:	4633      	mov	r3, r6
 8003578:	461e      	mov	r6, r3
 800357a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800357e:	2a39      	cmp	r2, #57	@ 0x39
 8003580:	d106      	bne.n	8003590 <_dtoa_r+0x6e0>
 8003582:	459a      	cmp	sl, r3
 8003584:	d1f8      	bne.n	8003578 <_dtoa_r+0x6c8>
 8003586:	2230      	movs	r2, #48	@ 0x30
 8003588:	f108 0801 	add.w	r8, r8, #1
 800358c:	f88a 2000 	strb.w	r2, [sl]
 8003590:	781a      	ldrb	r2, [r3, #0]
 8003592:	3201      	adds	r2, #1
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	e7a0      	b.n	80034da <_dtoa_r+0x62a>
 8003598:	2200      	movs	r2, #0
 800359a:	4b6f      	ldr	r3, [pc, #444]	@ (8003758 <_dtoa_r+0x8a8>)
 800359c:	f7fc ff9c 	bl	80004d8 <__aeabi_dmul>
 80035a0:	2200      	movs	r2, #0
 80035a2:	2300      	movs	r3, #0
 80035a4:	4604      	mov	r4, r0
 80035a6:	460d      	mov	r5, r1
 80035a8:	f7fd f9fe 	bl	80009a8 <__aeabi_dcmpeq>
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d09f      	beq.n	80034f0 <_dtoa_r+0x640>
 80035b0:	e7d1      	b.n	8003556 <_dtoa_r+0x6a6>
 80035b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80035b4:	2a00      	cmp	r2, #0
 80035b6:	f000 80ea 	beq.w	800378e <_dtoa_r+0x8de>
 80035ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80035bc:	2a01      	cmp	r2, #1
 80035be:	f300 80cd 	bgt.w	800375c <_dtoa_r+0x8ac>
 80035c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80035c4:	2a00      	cmp	r2, #0
 80035c6:	f000 80c1 	beq.w	800374c <_dtoa_r+0x89c>
 80035ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80035ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80035d0:	9e04      	ldr	r6, [sp, #16]
 80035d2:	9a04      	ldr	r2, [sp, #16]
 80035d4:	2101      	movs	r1, #1
 80035d6:	441a      	add	r2, r3
 80035d8:	9204      	str	r2, [sp, #16]
 80035da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035dc:	4648      	mov	r0, r9
 80035de:	441a      	add	r2, r3
 80035e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80035e2:	f000 fc2b 	bl	8003e3c <__i2b>
 80035e6:	4605      	mov	r5, r0
 80035e8:	b166      	cbz	r6, 8003604 <_dtoa_r+0x754>
 80035ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	dd09      	ble.n	8003604 <_dtoa_r+0x754>
 80035f0:	42b3      	cmp	r3, r6
 80035f2:	bfa8      	it	ge
 80035f4:	4633      	movge	r3, r6
 80035f6:	9a04      	ldr	r2, [sp, #16]
 80035f8:	1af6      	subs	r6, r6, r3
 80035fa:	1ad2      	subs	r2, r2, r3
 80035fc:	9204      	str	r2, [sp, #16]
 80035fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	9309      	str	r3, [sp, #36]	@ 0x24
 8003604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003606:	b30b      	cbz	r3, 800364c <_dtoa_r+0x79c>
 8003608:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80c6 	beq.w	800379c <_dtoa_r+0x8ec>
 8003610:	2c00      	cmp	r4, #0
 8003612:	f000 80c0 	beq.w	8003796 <_dtoa_r+0x8e6>
 8003616:	4629      	mov	r1, r5
 8003618:	4622      	mov	r2, r4
 800361a:	4648      	mov	r0, r9
 800361c:	f000 fcc6 	bl	8003fac <__pow5mult>
 8003620:	9a03      	ldr	r2, [sp, #12]
 8003622:	4601      	mov	r1, r0
 8003624:	4605      	mov	r5, r0
 8003626:	4648      	mov	r0, r9
 8003628:	f000 fc1e 	bl	8003e68 <__multiply>
 800362c:	9903      	ldr	r1, [sp, #12]
 800362e:	4680      	mov	r8, r0
 8003630:	4648      	mov	r0, r9
 8003632:	f000 fb4f 	bl	8003cd4 <_Bfree>
 8003636:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003638:	1b1b      	subs	r3, r3, r4
 800363a:	930a      	str	r3, [sp, #40]	@ 0x28
 800363c:	f000 80b1 	beq.w	80037a2 <_dtoa_r+0x8f2>
 8003640:	4641      	mov	r1, r8
 8003642:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003644:	4648      	mov	r0, r9
 8003646:	f000 fcb1 	bl	8003fac <__pow5mult>
 800364a:	9003      	str	r0, [sp, #12]
 800364c:	2101      	movs	r1, #1
 800364e:	4648      	mov	r0, r9
 8003650:	f000 fbf4 	bl	8003e3c <__i2b>
 8003654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003656:	4604      	mov	r4, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 81d8 	beq.w	8003a0e <_dtoa_r+0xb5e>
 800365e:	461a      	mov	r2, r3
 8003660:	4601      	mov	r1, r0
 8003662:	4648      	mov	r0, r9
 8003664:	f000 fca2 	bl	8003fac <__pow5mult>
 8003668:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800366a:	4604      	mov	r4, r0
 800366c:	2b01      	cmp	r3, #1
 800366e:	f300 809f 	bgt.w	80037b0 <_dtoa_r+0x900>
 8003672:	9b06      	ldr	r3, [sp, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f040 8097 	bne.w	80037a8 <_dtoa_r+0x8f8>
 800367a:	9b07      	ldr	r3, [sp, #28]
 800367c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003680:	2b00      	cmp	r3, #0
 8003682:	f040 8093 	bne.w	80037ac <_dtoa_r+0x8fc>
 8003686:	9b07      	ldr	r3, [sp, #28]
 8003688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800368c:	0d1b      	lsrs	r3, r3, #20
 800368e:	051b      	lsls	r3, r3, #20
 8003690:	b133      	cbz	r3, 80036a0 <_dtoa_r+0x7f0>
 8003692:	9b04      	ldr	r3, [sp, #16]
 8003694:	3301      	adds	r3, #1
 8003696:	9304      	str	r3, [sp, #16]
 8003698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800369a:	3301      	adds	r3, #1
 800369c:	9309      	str	r3, [sp, #36]	@ 0x24
 800369e:	2301      	movs	r3, #1
 80036a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80036a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 81b8 	beq.w	8003a1a <_dtoa_r+0xb6a>
 80036aa:	6923      	ldr	r3, [r4, #16]
 80036ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80036b0:	6918      	ldr	r0, [r3, #16]
 80036b2:	f000 fb77 	bl	8003da4 <__hi0bits>
 80036b6:	f1c0 0020 	rsb	r0, r0, #32
 80036ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036bc:	4418      	add	r0, r3
 80036be:	f010 001f 	ands.w	r0, r0, #31
 80036c2:	f000 8082 	beq.w	80037ca <_dtoa_r+0x91a>
 80036c6:	f1c0 0320 	rsb	r3, r0, #32
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	dd73      	ble.n	80037b6 <_dtoa_r+0x906>
 80036ce:	9b04      	ldr	r3, [sp, #16]
 80036d0:	f1c0 001c 	rsb	r0, r0, #28
 80036d4:	4403      	add	r3, r0
 80036d6:	9304      	str	r3, [sp, #16]
 80036d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036da:	4406      	add	r6, r0
 80036dc:	4403      	add	r3, r0
 80036de:	9309      	str	r3, [sp, #36]	@ 0x24
 80036e0:	9b04      	ldr	r3, [sp, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	dd05      	ble.n	80036f2 <_dtoa_r+0x842>
 80036e6:	461a      	mov	r2, r3
 80036e8:	4648      	mov	r0, r9
 80036ea:	9903      	ldr	r1, [sp, #12]
 80036ec:	f000 fcb8 	bl	8004060 <__lshift>
 80036f0:	9003      	str	r0, [sp, #12]
 80036f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	dd05      	ble.n	8003704 <_dtoa_r+0x854>
 80036f8:	4621      	mov	r1, r4
 80036fa:	461a      	mov	r2, r3
 80036fc:	4648      	mov	r0, r9
 80036fe:	f000 fcaf 	bl	8004060 <__lshift>
 8003702:	4604      	mov	r4, r0
 8003704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d061      	beq.n	80037ce <_dtoa_r+0x91e>
 800370a:	4621      	mov	r1, r4
 800370c:	9803      	ldr	r0, [sp, #12]
 800370e:	f000 fd13 	bl	8004138 <__mcmp>
 8003712:	2800      	cmp	r0, #0
 8003714:	da5b      	bge.n	80037ce <_dtoa_r+0x91e>
 8003716:	2300      	movs	r3, #0
 8003718:	220a      	movs	r2, #10
 800371a:	4648      	mov	r0, r9
 800371c:	9903      	ldr	r1, [sp, #12]
 800371e:	f000 fafb 	bl	8003d18 <__multadd>
 8003722:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003724:	f107 38ff 	add.w	r8, r7, #4294967295
 8003728:	9003      	str	r0, [sp, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8177 	beq.w	8003a1e <_dtoa_r+0xb6e>
 8003730:	4629      	mov	r1, r5
 8003732:	2300      	movs	r3, #0
 8003734:	220a      	movs	r2, #10
 8003736:	4648      	mov	r0, r9
 8003738:	f000 faee 	bl	8003d18 <__multadd>
 800373c:	f1bb 0f00 	cmp.w	fp, #0
 8003740:	4605      	mov	r5, r0
 8003742:	dc6f      	bgt.n	8003824 <_dtoa_r+0x974>
 8003744:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003746:	2b02      	cmp	r3, #2
 8003748:	dc49      	bgt.n	80037de <_dtoa_r+0x92e>
 800374a:	e06b      	b.n	8003824 <_dtoa_r+0x974>
 800374c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800374e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003752:	e73c      	b.n	80035ce <_dtoa_r+0x71e>
 8003754:	3fe00000 	.word	0x3fe00000
 8003758:	40240000 	.word	0x40240000
 800375c:	9b08      	ldr	r3, [sp, #32]
 800375e:	1e5c      	subs	r4, r3, #1
 8003760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003762:	42a3      	cmp	r3, r4
 8003764:	db09      	blt.n	800377a <_dtoa_r+0x8ca>
 8003766:	1b1c      	subs	r4, r3, r4
 8003768:	9b08      	ldr	r3, [sp, #32]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f6bf af30 	bge.w	80035d0 <_dtoa_r+0x720>
 8003770:	9b04      	ldr	r3, [sp, #16]
 8003772:	9a08      	ldr	r2, [sp, #32]
 8003774:	1a9e      	subs	r6, r3, r2
 8003776:	2300      	movs	r3, #0
 8003778:	e72b      	b.n	80035d2 <_dtoa_r+0x722>
 800377a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800377c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800377e:	1ae3      	subs	r3, r4, r3
 8003780:	441a      	add	r2, r3
 8003782:	940a      	str	r4, [sp, #40]	@ 0x28
 8003784:	9e04      	ldr	r6, [sp, #16]
 8003786:	2400      	movs	r4, #0
 8003788:	9b08      	ldr	r3, [sp, #32]
 800378a:	920e      	str	r2, [sp, #56]	@ 0x38
 800378c:	e721      	b.n	80035d2 <_dtoa_r+0x722>
 800378e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003790:	9e04      	ldr	r6, [sp, #16]
 8003792:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003794:	e728      	b.n	80035e8 <_dtoa_r+0x738>
 8003796:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800379a:	e751      	b.n	8003640 <_dtoa_r+0x790>
 800379c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800379e:	9903      	ldr	r1, [sp, #12]
 80037a0:	e750      	b.n	8003644 <_dtoa_r+0x794>
 80037a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80037a6:	e751      	b.n	800364c <_dtoa_r+0x79c>
 80037a8:	2300      	movs	r3, #0
 80037aa:	e779      	b.n	80036a0 <_dtoa_r+0x7f0>
 80037ac:	9b06      	ldr	r3, [sp, #24]
 80037ae:	e777      	b.n	80036a0 <_dtoa_r+0x7f0>
 80037b0:	2300      	movs	r3, #0
 80037b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80037b4:	e779      	b.n	80036aa <_dtoa_r+0x7fa>
 80037b6:	d093      	beq.n	80036e0 <_dtoa_r+0x830>
 80037b8:	9a04      	ldr	r2, [sp, #16]
 80037ba:	331c      	adds	r3, #28
 80037bc:	441a      	add	r2, r3
 80037be:	9204      	str	r2, [sp, #16]
 80037c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037c2:	441e      	add	r6, r3
 80037c4:	441a      	add	r2, r3
 80037c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80037c8:	e78a      	b.n	80036e0 <_dtoa_r+0x830>
 80037ca:	4603      	mov	r3, r0
 80037cc:	e7f4      	b.n	80037b8 <_dtoa_r+0x908>
 80037ce:	9b08      	ldr	r3, [sp, #32]
 80037d0:	46b8      	mov	r8, r7
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	dc20      	bgt.n	8003818 <_dtoa_r+0x968>
 80037d6:	469b      	mov	fp, r3
 80037d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80037da:	2b02      	cmp	r3, #2
 80037dc:	dd1e      	ble.n	800381c <_dtoa_r+0x96c>
 80037de:	f1bb 0f00 	cmp.w	fp, #0
 80037e2:	f47f adb1 	bne.w	8003348 <_dtoa_r+0x498>
 80037e6:	4621      	mov	r1, r4
 80037e8:	465b      	mov	r3, fp
 80037ea:	2205      	movs	r2, #5
 80037ec:	4648      	mov	r0, r9
 80037ee:	f000 fa93 	bl	8003d18 <__multadd>
 80037f2:	4601      	mov	r1, r0
 80037f4:	4604      	mov	r4, r0
 80037f6:	9803      	ldr	r0, [sp, #12]
 80037f8:	f000 fc9e 	bl	8004138 <__mcmp>
 80037fc:	2800      	cmp	r0, #0
 80037fe:	f77f ada3 	ble.w	8003348 <_dtoa_r+0x498>
 8003802:	4656      	mov	r6, sl
 8003804:	2331      	movs	r3, #49	@ 0x31
 8003806:	f108 0801 	add.w	r8, r8, #1
 800380a:	f806 3b01 	strb.w	r3, [r6], #1
 800380e:	e59f      	b.n	8003350 <_dtoa_r+0x4a0>
 8003810:	46b8      	mov	r8, r7
 8003812:	9c08      	ldr	r4, [sp, #32]
 8003814:	4625      	mov	r5, r4
 8003816:	e7f4      	b.n	8003802 <_dtoa_r+0x952>
 8003818:	f8dd b020 	ldr.w	fp, [sp, #32]
 800381c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8101 	beq.w	8003a26 <_dtoa_r+0xb76>
 8003824:	2e00      	cmp	r6, #0
 8003826:	dd05      	ble.n	8003834 <_dtoa_r+0x984>
 8003828:	4629      	mov	r1, r5
 800382a:	4632      	mov	r2, r6
 800382c:	4648      	mov	r0, r9
 800382e:	f000 fc17 	bl	8004060 <__lshift>
 8003832:	4605      	mov	r5, r0
 8003834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003836:	2b00      	cmp	r3, #0
 8003838:	d05c      	beq.n	80038f4 <_dtoa_r+0xa44>
 800383a:	4648      	mov	r0, r9
 800383c:	6869      	ldr	r1, [r5, #4]
 800383e:	f000 fa09 	bl	8003c54 <_Balloc>
 8003842:	4606      	mov	r6, r0
 8003844:	b928      	cbnz	r0, 8003852 <_dtoa_r+0x9a2>
 8003846:	4602      	mov	r2, r0
 8003848:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800384c:	4b80      	ldr	r3, [pc, #512]	@ (8003a50 <_dtoa_r+0xba0>)
 800384e:	f7ff bb43 	b.w	8002ed8 <_dtoa_r+0x28>
 8003852:	692a      	ldr	r2, [r5, #16]
 8003854:	f105 010c 	add.w	r1, r5, #12
 8003858:	3202      	adds	r2, #2
 800385a:	0092      	lsls	r2, r2, #2
 800385c:	300c      	adds	r0, #12
 800385e:	f7ff fa90 	bl	8002d82 <memcpy>
 8003862:	2201      	movs	r2, #1
 8003864:	4631      	mov	r1, r6
 8003866:	4648      	mov	r0, r9
 8003868:	f000 fbfa 	bl	8004060 <__lshift>
 800386c:	462f      	mov	r7, r5
 800386e:	4605      	mov	r5, r0
 8003870:	f10a 0301 	add.w	r3, sl, #1
 8003874:	9304      	str	r3, [sp, #16]
 8003876:	eb0a 030b 	add.w	r3, sl, fp
 800387a:	930a      	str	r3, [sp, #40]	@ 0x28
 800387c:	9b06      	ldr	r3, [sp, #24]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	9309      	str	r3, [sp, #36]	@ 0x24
 8003884:	9b04      	ldr	r3, [sp, #16]
 8003886:	4621      	mov	r1, r4
 8003888:	9803      	ldr	r0, [sp, #12]
 800388a:	f103 3bff 	add.w	fp, r3, #4294967295
 800388e:	f7ff fa86 	bl	8002d9e <quorem>
 8003892:	4603      	mov	r3, r0
 8003894:	4639      	mov	r1, r7
 8003896:	3330      	adds	r3, #48	@ 0x30
 8003898:	9006      	str	r0, [sp, #24]
 800389a:	9803      	ldr	r0, [sp, #12]
 800389c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800389e:	f000 fc4b 	bl	8004138 <__mcmp>
 80038a2:	462a      	mov	r2, r5
 80038a4:	9008      	str	r0, [sp, #32]
 80038a6:	4621      	mov	r1, r4
 80038a8:	4648      	mov	r0, r9
 80038aa:	f000 fc61 	bl	8004170 <__mdiff>
 80038ae:	68c2      	ldr	r2, [r0, #12]
 80038b0:	4606      	mov	r6, r0
 80038b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80038b4:	bb02      	cbnz	r2, 80038f8 <_dtoa_r+0xa48>
 80038b6:	4601      	mov	r1, r0
 80038b8:	9803      	ldr	r0, [sp, #12]
 80038ba:	f000 fc3d 	bl	8004138 <__mcmp>
 80038be:	4602      	mov	r2, r0
 80038c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80038c2:	4631      	mov	r1, r6
 80038c4:	4648      	mov	r0, r9
 80038c6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80038ca:	f000 fa03 	bl	8003cd4 <_Bfree>
 80038ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80038d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80038d2:	9e04      	ldr	r6, [sp, #16]
 80038d4:	ea42 0103 	orr.w	r1, r2, r3
 80038d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038da:	4319      	orrs	r1, r3
 80038dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80038de:	d10d      	bne.n	80038fc <_dtoa_r+0xa4c>
 80038e0:	2b39      	cmp	r3, #57	@ 0x39
 80038e2:	d027      	beq.n	8003934 <_dtoa_r+0xa84>
 80038e4:	9a08      	ldr	r2, [sp, #32]
 80038e6:	2a00      	cmp	r2, #0
 80038e8:	dd01      	ble.n	80038ee <_dtoa_r+0xa3e>
 80038ea:	9b06      	ldr	r3, [sp, #24]
 80038ec:	3331      	adds	r3, #49	@ 0x31
 80038ee:	f88b 3000 	strb.w	r3, [fp]
 80038f2:	e52e      	b.n	8003352 <_dtoa_r+0x4a2>
 80038f4:	4628      	mov	r0, r5
 80038f6:	e7b9      	b.n	800386c <_dtoa_r+0x9bc>
 80038f8:	2201      	movs	r2, #1
 80038fa:	e7e2      	b.n	80038c2 <_dtoa_r+0xa12>
 80038fc:	9908      	ldr	r1, [sp, #32]
 80038fe:	2900      	cmp	r1, #0
 8003900:	db04      	blt.n	800390c <_dtoa_r+0xa5c>
 8003902:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8003904:	4301      	orrs	r1, r0
 8003906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003908:	4301      	orrs	r1, r0
 800390a:	d120      	bne.n	800394e <_dtoa_r+0xa9e>
 800390c:	2a00      	cmp	r2, #0
 800390e:	ddee      	ble.n	80038ee <_dtoa_r+0xa3e>
 8003910:	2201      	movs	r2, #1
 8003912:	9903      	ldr	r1, [sp, #12]
 8003914:	4648      	mov	r0, r9
 8003916:	9304      	str	r3, [sp, #16]
 8003918:	f000 fba2 	bl	8004060 <__lshift>
 800391c:	4621      	mov	r1, r4
 800391e:	9003      	str	r0, [sp, #12]
 8003920:	f000 fc0a 	bl	8004138 <__mcmp>
 8003924:	2800      	cmp	r0, #0
 8003926:	9b04      	ldr	r3, [sp, #16]
 8003928:	dc02      	bgt.n	8003930 <_dtoa_r+0xa80>
 800392a:	d1e0      	bne.n	80038ee <_dtoa_r+0xa3e>
 800392c:	07da      	lsls	r2, r3, #31
 800392e:	d5de      	bpl.n	80038ee <_dtoa_r+0xa3e>
 8003930:	2b39      	cmp	r3, #57	@ 0x39
 8003932:	d1da      	bne.n	80038ea <_dtoa_r+0xa3a>
 8003934:	2339      	movs	r3, #57	@ 0x39
 8003936:	f88b 3000 	strb.w	r3, [fp]
 800393a:	4633      	mov	r3, r6
 800393c:	461e      	mov	r6, r3
 800393e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003942:	3b01      	subs	r3, #1
 8003944:	2a39      	cmp	r2, #57	@ 0x39
 8003946:	d04e      	beq.n	80039e6 <_dtoa_r+0xb36>
 8003948:	3201      	adds	r2, #1
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e501      	b.n	8003352 <_dtoa_r+0x4a2>
 800394e:	2a00      	cmp	r2, #0
 8003950:	dd03      	ble.n	800395a <_dtoa_r+0xaaa>
 8003952:	2b39      	cmp	r3, #57	@ 0x39
 8003954:	d0ee      	beq.n	8003934 <_dtoa_r+0xa84>
 8003956:	3301      	adds	r3, #1
 8003958:	e7c9      	b.n	80038ee <_dtoa_r+0xa3e>
 800395a:	9a04      	ldr	r2, [sp, #16]
 800395c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800395e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003962:	428a      	cmp	r2, r1
 8003964:	d028      	beq.n	80039b8 <_dtoa_r+0xb08>
 8003966:	2300      	movs	r3, #0
 8003968:	220a      	movs	r2, #10
 800396a:	9903      	ldr	r1, [sp, #12]
 800396c:	4648      	mov	r0, r9
 800396e:	f000 f9d3 	bl	8003d18 <__multadd>
 8003972:	42af      	cmp	r7, r5
 8003974:	9003      	str	r0, [sp, #12]
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	f04f 020a 	mov.w	r2, #10
 800397e:	4639      	mov	r1, r7
 8003980:	4648      	mov	r0, r9
 8003982:	d107      	bne.n	8003994 <_dtoa_r+0xae4>
 8003984:	f000 f9c8 	bl	8003d18 <__multadd>
 8003988:	4607      	mov	r7, r0
 800398a:	4605      	mov	r5, r0
 800398c:	9b04      	ldr	r3, [sp, #16]
 800398e:	3301      	adds	r3, #1
 8003990:	9304      	str	r3, [sp, #16]
 8003992:	e777      	b.n	8003884 <_dtoa_r+0x9d4>
 8003994:	f000 f9c0 	bl	8003d18 <__multadd>
 8003998:	4629      	mov	r1, r5
 800399a:	4607      	mov	r7, r0
 800399c:	2300      	movs	r3, #0
 800399e:	220a      	movs	r2, #10
 80039a0:	4648      	mov	r0, r9
 80039a2:	f000 f9b9 	bl	8003d18 <__multadd>
 80039a6:	4605      	mov	r5, r0
 80039a8:	e7f0      	b.n	800398c <_dtoa_r+0xadc>
 80039aa:	f1bb 0f00 	cmp.w	fp, #0
 80039ae:	bfcc      	ite	gt
 80039b0:	465e      	movgt	r6, fp
 80039b2:	2601      	movle	r6, #1
 80039b4:	2700      	movs	r7, #0
 80039b6:	4456      	add	r6, sl
 80039b8:	2201      	movs	r2, #1
 80039ba:	9903      	ldr	r1, [sp, #12]
 80039bc:	4648      	mov	r0, r9
 80039be:	9304      	str	r3, [sp, #16]
 80039c0:	f000 fb4e 	bl	8004060 <__lshift>
 80039c4:	4621      	mov	r1, r4
 80039c6:	9003      	str	r0, [sp, #12]
 80039c8:	f000 fbb6 	bl	8004138 <__mcmp>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	dcb4      	bgt.n	800393a <_dtoa_r+0xa8a>
 80039d0:	d102      	bne.n	80039d8 <_dtoa_r+0xb28>
 80039d2:	9b04      	ldr	r3, [sp, #16]
 80039d4:	07db      	lsls	r3, r3, #31
 80039d6:	d4b0      	bmi.n	800393a <_dtoa_r+0xa8a>
 80039d8:	4633      	mov	r3, r6
 80039da:	461e      	mov	r6, r3
 80039dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80039e0:	2a30      	cmp	r2, #48	@ 0x30
 80039e2:	d0fa      	beq.n	80039da <_dtoa_r+0xb2a>
 80039e4:	e4b5      	b.n	8003352 <_dtoa_r+0x4a2>
 80039e6:	459a      	cmp	sl, r3
 80039e8:	d1a8      	bne.n	800393c <_dtoa_r+0xa8c>
 80039ea:	2331      	movs	r3, #49	@ 0x31
 80039ec:	f108 0801 	add.w	r8, r8, #1
 80039f0:	f88a 3000 	strb.w	r3, [sl]
 80039f4:	e4ad      	b.n	8003352 <_dtoa_r+0x4a2>
 80039f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80039f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8003a54 <_dtoa_r+0xba4>
 80039fc:	b11b      	cbz	r3, 8003a06 <_dtoa_r+0xb56>
 80039fe:	f10a 0308 	add.w	r3, sl, #8
 8003a02:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	4650      	mov	r0, sl
 8003a08:	b017      	add	sp, #92	@ 0x5c
 8003a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	f77f ae2e 	ble.w	8003672 <_dtoa_r+0x7c2>
 8003a16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a18:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	e64d      	b.n	80036ba <_dtoa_r+0x80a>
 8003a1e:	f1bb 0f00 	cmp.w	fp, #0
 8003a22:	f77f aed9 	ble.w	80037d8 <_dtoa_r+0x928>
 8003a26:	4656      	mov	r6, sl
 8003a28:	4621      	mov	r1, r4
 8003a2a:	9803      	ldr	r0, [sp, #12]
 8003a2c:	f7ff f9b7 	bl	8002d9e <quorem>
 8003a30:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8003a34:	f806 3b01 	strb.w	r3, [r6], #1
 8003a38:	eba6 020a 	sub.w	r2, r6, sl
 8003a3c:	4593      	cmp	fp, r2
 8003a3e:	ddb4      	ble.n	80039aa <_dtoa_r+0xafa>
 8003a40:	2300      	movs	r3, #0
 8003a42:	220a      	movs	r2, #10
 8003a44:	4648      	mov	r0, r9
 8003a46:	9903      	ldr	r1, [sp, #12]
 8003a48:	f000 f966 	bl	8003d18 <__multadd>
 8003a4c:	9003      	str	r0, [sp, #12]
 8003a4e:	e7eb      	b.n	8003a28 <_dtoa_r+0xb78>
 8003a50:	08004bca 	.word	0x08004bca
 8003a54:	08004b4e 	.word	0x08004b4e

08003a58 <_free_r>:
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	4605      	mov	r5, r0
 8003a5c:	2900      	cmp	r1, #0
 8003a5e:	d040      	beq.n	8003ae2 <_free_r+0x8a>
 8003a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a64:	1f0c      	subs	r4, r1, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bfb8      	it	lt
 8003a6a:	18e4      	addlt	r4, r4, r3
 8003a6c:	f000 f8e6 	bl	8003c3c <__malloc_lock>
 8003a70:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae4 <_free_r+0x8c>)
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	b933      	cbnz	r3, 8003a84 <_free_r+0x2c>
 8003a76:	6063      	str	r3, [r4, #4]
 8003a78:	6014      	str	r4, [r2, #0]
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a80:	f000 b8e2 	b.w	8003c48 <__malloc_unlock>
 8003a84:	42a3      	cmp	r3, r4
 8003a86:	d908      	bls.n	8003a9a <_free_r+0x42>
 8003a88:	6820      	ldr	r0, [r4, #0]
 8003a8a:	1821      	adds	r1, r4, r0
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	bf01      	itttt	eq
 8003a90:	6819      	ldreq	r1, [r3, #0]
 8003a92:	685b      	ldreq	r3, [r3, #4]
 8003a94:	1809      	addeq	r1, r1, r0
 8003a96:	6021      	streq	r1, [r4, #0]
 8003a98:	e7ed      	b.n	8003a76 <_free_r+0x1e>
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	b10b      	cbz	r3, 8003aa4 <_free_r+0x4c>
 8003aa0:	42a3      	cmp	r3, r4
 8003aa2:	d9fa      	bls.n	8003a9a <_free_r+0x42>
 8003aa4:	6811      	ldr	r1, [r2, #0]
 8003aa6:	1850      	adds	r0, r2, r1
 8003aa8:	42a0      	cmp	r0, r4
 8003aaa:	d10b      	bne.n	8003ac4 <_free_r+0x6c>
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	4401      	add	r1, r0
 8003ab0:	1850      	adds	r0, r2, r1
 8003ab2:	4283      	cmp	r3, r0
 8003ab4:	6011      	str	r1, [r2, #0]
 8003ab6:	d1e0      	bne.n	8003a7a <_free_r+0x22>
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4408      	add	r0, r1
 8003abe:	6010      	str	r0, [r2, #0]
 8003ac0:	6053      	str	r3, [r2, #4]
 8003ac2:	e7da      	b.n	8003a7a <_free_r+0x22>
 8003ac4:	d902      	bls.n	8003acc <_free_r+0x74>
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	602b      	str	r3, [r5, #0]
 8003aca:	e7d6      	b.n	8003a7a <_free_r+0x22>
 8003acc:	6820      	ldr	r0, [r4, #0]
 8003ace:	1821      	adds	r1, r4, r0
 8003ad0:	428b      	cmp	r3, r1
 8003ad2:	bf01      	itttt	eq
 8003ad4:	6819      	ldreq	r1, [r3, #0]
 8003ad6:	685b      	ldreq	r3, [r3, #4]
 8003ad8:	1809      	addeq	r1, r1, r0
 8003ada:	6021      	streq	r1, [r4, #0]
 8003adc:	6063      	str	r3, [r4, #4]
 8003ade:	6054      	str	r4, [r2, #4]
 8003ae0:	e7cb      	b.n	8003a7a <_free_r+0x22>
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	20000388 	.word	0x20000388

08003ae8 <malloc>:
 8003ae8:	4b02      	ldr	r3, [pc, #8]	@ (8003af4 <malloc+0xc>)
 8003aea:	4601      	mov	r1, r0
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	f000 b825 	b.w	8003b3c <_malloc_r>
 8003af2:	bf00      	nop
 8003af4:	20000018 	.word	0x20000018

08003af8 <sbrk_aligned>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4e0f      	ldr	r6, [pc, #60]	@ (8003b38 <sbrk_aligned+0x40>)
 8003afc:	460c      	mov	r4, r1
 8003afe:	6831      	ldr	r1, [r6, #0]
 8003b00:	4605      	mov	r5, r0
 8003b02:	b911      	cbnz	r1, 8003b0a <sbrk_aligned+0x12>
 8003b04:	f000 fcc8 	bl	8004498 <_sbrk_r>
 8003b08:	6030      	str	r0, [r6, #0]
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f000 fcc3 	bl	8004498 <_sbrk_r>
 8003b12:	1c43      	adds	r3, r0, #1
 8003b14:	d103      	bne.n	8003b1e <sbrk_aligned+0x26>
 8003b16:	f04f 34ff 	mov.w	r4, #4294967295
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	bd70      	pop	{r4, r5, r6, pc}
 8003b1e:	1cc4      	adds	r4, r0, #3
 8003b20:	f024 0403 	bic.w	r4, r4, #3
 8003b24:	42a0      	cmp	r0, r4
 8003b26:	d0f8      	beq.n	8003b1a <sbrk_aligned+0x22>
 8003b28:	1a21      	subs	r1, r4, r0
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f000 fcb4 	bl	8004498 <_sbrk_r>
 8003b30:	3001      	adds	r0, #1
 8003b32:	d1f2      	bne.n	8003b1a <sbrk_aligned+0x22>
 8003b34:	e7ef      	b.n	8003b16 <sbrk_aligned+0x1e>
 8003b36:	bf00      	nop
 8003b38:	20000384 	.word	0x20000384

08003b3c <_malloc_r>:
 8003b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b40:	1ccd      	adds	r5, r1, #3
 8003b42:	f025 0503 	bic.w	r5, r5, #3
 8003b46:	3508      	adds	r5, #8
 8003b48:	2d0c      	cmp	r5, #12
 8003b4a:	bf38      	it	cc
 8003b4c:	250c      	movcc	r5, #12
 8003b4e:	2d00      	cmp	r5, #0
 8003b50:	4606      	mov	r6, r0
 8003b52:	db01      	blt.n	8003b58 <_malloc_r+0x1c>
 8003b54:	42a9      	cmp	r1, r5
 8003b56:	d904      	bls.n	8003b62 <_malloc_r+0x26>
 8003b58:	230c      	movs	r3, #12
 8003b5a:	6033      	str	r3, [r6, #0]
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c38 <_malloc_r+0xfc>
 8003b66:	f000 f869 	bl	8003c3c <__malloc_lock>
 8003b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b6e:	461c      	mov	r4, r3
 8003b70:	bb44      	cbnz	r4, 8003bc4 <_malloc_r+0x88>
 8003b72:	4629      	mov	r1, r5
 8003b74:	4630      	mov	r0, r6
 8003b76:	f7ff ffbf 	bl	8003af8 <sbrk_aligned>
 8003b7a:	1c43      	adds	r3, r0, #1
 8003b7c:	4604      	mov	r4, r0
 8003b7e:	d158      	bne.n	8003c32 <_malloc_r+0xf6>
 8003b80:	f8d8 4000 	ldr.w	r4, [r8]
 8003b84:	4627      	mov	r7, r4
 8003b86:	2f00      	cmp	r7, #0
 8003b88:	d143      	bne.n	8003c12 <_malloc_r+0xd6>
 8003b8a:	2c00      	cmp	r4, #0
 8003b8c:	d04b      	beq.n	8003c26 <_malloc_r+0xea>
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	4639      	mov	r1, r7
 8003b92:	4630      	mov	r0, r6
 8003b94:	eb04 0903 	add.w	r9, r4, r3
 8003b98:	f000 fc7e 	bl	8004498 <_sbrk_r>
 8003b9c:	4581      	cmp	r9, r0
 8003b9e:	d142      	bne.n	8003c26 <_malloc_r+0xea>
 8003ba0:	6821      	ldr	r1, [r4, #0]
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	1a6d      	subs	r5, r5, r1
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	f7ff ffa6 	bl	8003af8 <sbrk_aligned>
 8003bac:	3001      	adds	r0, #1
 8003bae:	d03a      	beq.n	8003c26 <_malloc_r+0xea>
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	442b      	add	r3, r5
 8003bb4:	6023      	str	r3, [r4, #0]
 8003bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	bb62      	cbnz	r2, 8003c18 <_malloc_r+0xdc>
 8003bbe:	f8c8 7000 	str.w	r7, [r8]
 8003bc2:	e00f      	b.n	8003be4 <_malloc_r+0xa8>
 8003bc4:	6822      	ldr	r2, [r4, #0]
 8003bc6:	1b52      	subs	r2, r2, r5
 8003bc8:	d420      	bmi.n	8003c0c <_malloc_r+0xd0>
 8003bca:	2a0b      	cmp	r2, #11
 8003bcc:	d917      	bls.n	8003bfe <_malloc_r+0xc2>
 8003bce:	1961      	adds	r1, r4, r5
 8003bd0:	42a3      	cmp	r3, r4
 8003bd2:	6025      	str	r5, [r4, #0]
 8003bd4:	bf18      	it	ne
 8003bd6:	6059      	strne	r1, [r3, #4]
 8003bd8:	6863      	ldr	r3, [r4, #4]
 8003bda:	bf08      	it	eq
 8003bdc:	f8c8 1000 	streq.w	r1, [r8]
 8003be0:	5162      	str	r2, [r4, r5]
 8003be2:	604b      	str	r3, [r1, #4]
 8003be4:	4630      	mov	r0, r6
 8003be6:	f000 f82f 	bl	8003c48 <__malloc_unlock>
 8003bea:	f104 000b 	add.w	r0, r4, #11
 8003bee:	1d23      	adds	r3, r4, #4
 8003bf0:	f020 0007 	bic.w	r0, r0, #7
 8003bf4:	1ac2      	subs	r2, r0, r3
 8003bf6:	bf1c      	itt	ne
 8003bf8:	1a1b      	subne	r3, r3, r0
 8003bfa:	50a3      	strne	r3, [r4, r2]
 8003bfc:	e7af      	b.n	8003b5e <_malloc_r+0x22>
 8003bfe:	6862      	ldr	r2, [r4, #4]
 8003c00:	42a3      	cmp	r3, r4
 8003c02:	bf0c      	ite	eq
 8003c04:	f8c8 2000 	streq.w	r2, [r8]
 8003c08:	605a      	strne	r2, [r3, #4]
 8003c0a:	e7eb      	b.n	8003be4 <_malloc_r+0xa8>
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	6864      	ldr	r4, [r4, #4]
 8003c10:	e7ae      	b.n	8003b70 <_malloc_r+0x34>
 8003c12:	463c      	mov	r4, r7
 8003c14:	687f      	ldr	r7, [r7, #4]
 8003c16:	e7b6      	b.n	8003b86 <_malloc_r+0x4a>
 8003c18:	461a      	mov	r2, r3
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	42a3      	cmp	r3, r4
 8003c1e:	d1fb      	bne.n	8003c18 <_malloc_r+0xdc>
 8003c20:	2300      	movs	r3, #0
 8003c22:	6053      	str	r3, [r2, #4]
 8003c24:	e7de      	b.n	8003be4 <_malloc_r+0xa8>
 8003c26:	230c      	movs	r3, #12
 8003c28:	4630      	mov	r0, r6
 8003c2a:	6033      	str	r3, [r6, #0]
 8003c2c:	f000 f80c 	bl	8003c48 <__malloc_unlock>
 8003c30:	e794      	b.n	8003b5c <_malloc_r+0x20>
 8003c32:	6005      	str	r5, [r0, #0]
 8003c34:	e7d6      	b.n	8003be4 <_malloc_r+0xa8>
 8003c36:	bf00      	nop
 8003c38:	20000388 	.word	0x20000388

08003c3c <__malloc_lock>:
 8003c3c:	4801      	ldr	r0, [pc, #4]	@ (8003c44 <__malloc_lock+0x8>)
 8003c3e:	f7ff b890 	b.w	8002d62 <__retarget_lock_acquire_recursive>
 8003c42:	bf00      	nop
 8003c44:	20000380 	.word	0x20000380

08003c48 <__malloc_unlock>:
 8003c48:	4801      	ldr	r0, [pc, #4]	@ (8003c50 <__malloc_unlock+0x8>)
 8003c4a:	f7ff b88b 	b.w	8002d64 <__retarget_lock_release_recursive>
 8003c4e:	bf00      	nop
 8003c50:	20000380 	.word	0x20000380

08003c54 <_Balloc>:
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	69c6      	ldr	r6, [r0, #28]
 8003c58:	4604      	mov	r4, r0
 8003c5a:	460d      	mov	r5, r1
 8003c5c:	b976      	cbnz	r6, 8003c7c <_Balloc+0x28>
 8003c5e:	2010      	movs	r0, #16
 8003c60:	f7ff ff42 	bl	8003ae8 <malloc>
 8003c64:	4602      	mov	r2, r0
 8003c66:	61e0      	str	r0, [r4, #28]
 8003c68:	b920      	cbnz	r0, 8003c74 <_Balloc+0x20>
 8003c6a:	216b      	movs	r1, #107	@ 0x6b
 8003c6c:	4b17      	ldr	r3, [pc, #92]	@ (8003ccc <_Balloc+0x78>)
 8003c6e:	4818      	ldr	r0, [pc, #96]	@ (8003cd0 <_Balloc+0x7c>)
 8003c70:	f000 fc22 	bl	80044b8 <__assert_func>
 8003c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003c78:	6006      	str	r6, [r0, #0]
 8003c7a:	60c6      	str	r6, [r0, #12]
 8003c7c:	69e6      	ldr	r6, [r4, #28]
 8003c7e:	68f3      	ldr	r3, [r6, #12]
 8003c80:	b183      	cbz	r3, 8003ca4 <_Balloc+0x50>
 8003c82:	69e3      	ldr	r3, [r4, #28]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003c8a:	b9b8      	cbnz	r0, 8003cbc <_Balloc+0x68>
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f605 	lsl.w	r6, r1, r5
 8003c92:	1d72      	adds	r2, r6, #5
 8003c94:	4620      	mov	r0, r4
 8003c96:	0092      	lsls	r2, r2, #2
 8003c98:	f000 fc2c 	bl	80044f4 <_calloc_r>
 8003c9c:	b160      	cbz	r0, 8003cb8 <_Balloc+0x64>
 8003c9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003ca2:	e00e      	b.n	8003cc2 <_Balloc+0x6e>
 8003ca4:	2221      	movs	r2, #33	@ 0x21
 8003ca6:	2104      	movs	r1, #4
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f000 fc23 	bl	80044f4 <_calloc_r>
 8003cae:	69e3      	ldr	r3, [r4, #28]
 8003cb0:	60f0      	str	r0, [r6, #12]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e4      	bne.n	8003c82 <_Balloc+0x2e>
 8003cb8:	2000      	movs	r0, #0
 8003cba:	bd70      	pop	{r4, r5, r6, pc}
 8003cbc:	6802      	ldr	r2, [r0, #0]
 8003cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003cc8:	e7f7      	b.n	8003cba <_Balloc+0x66>
 8003cca:	bf00      	nop
 8003ccc:	08004b5b 	.word	0x08004b5b
 8003cd0:	08004bdb 	.word	0x08004bdb

08003cd4 <_Bfree>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	69c6      	ldr	r6, [r0, #28]
 8003cd8:	4605      	mov	r5, r0
 8003cda:	460c      	mov	r4, r1
 8003cdc:	b976      	cbnz	r6, 8003cfc <_Bfree+0x28>
 8003cde:	2010      	movs	r0, #16
 8003ce0:	f7ff ff02 	bl	8003ae8 <malloc>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	61e8      	str	r0, [r5, #28]
 8003ce8:	b920      	cbnz	r0, 8003cf4 <_Bfree+0x20>
 8003cea:	218f      	movs	r1, #143	@ 0x8f
 8003cec:	4b08      	ldr	r3, [pc, #32]	@ (8003d10 <_Bfree+0x3c>)
 8003cee:	4809      	ldr	r0, [pc, #36]	@ (8003d14 <_Bfree+0x40>)
 8003cf0:	f000 fbe2 	bl	80044b8 <__assert_func>
 8003cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003cf8:	6006      	str	r6, [r0, #0]
 8003cfa:	60c6      	str	r6, [r0, #12]
 8003cfc:	b13c      	cbz	r4, 8003d0e <_Bfree+0x3a>
 8003cfe:	69eb      	ldr	r3, [r5, #28]
 8003d00:	6862      	ldr	r2, [r4, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d08:	6021      	str	r1, [r4, #0]
 8003d0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003d0e:	bd70      	pop	{r4, r5, r6, pc}
 8003d10:	08004b5b 	.word	0x08004b5b
 8003d14:	08004bdb 	.word	0x08004bdb

08003d18 <__multadd>:
 8003d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d1c:	4607      	mov	r7, r0
 8003d1e:	460c      	mov	r4, r1
 8003d20:	461e      	mov	r6, r3
 8003d22:	2000      	movs	r0, #0
 8003d24:	690d      	ldr	r5, [r1, #16]
 8003d26:	f101 0c14 	add.w	ip, r1, #20
 8003d2a:	f8dc 3000 	ldr.w	r3, [ip]
 8003d2e:	3001      	adds	r0, #1
 8003d30:	b299      	uxth	r1, r3
 8003d32:	fb02 6101 	mla	r1, r2, r1, r6
 8003d36:	0c1e      	lsrs	r6, r3, #16
 8003d38:	0c0b      	lsrs	r3, r1, #16
 8003d3a:	fb02 3306 	mla	r3, r2, r6, r3
 8003d3e:	b289      	uxth	r1, r1
 8003d40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003d44:	4285      	cmp	r5, r0
 8003d46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003d4a:	f84c 1b04 	str.w	r1, [ip], #4
 8003d4e:	dcec      	bgt.n	8003d2a <__multadd+0x12>
 8003d50:	b30e      	cbz	r6, 8003d96 <__multadd+0x7e>
 8003d52:	68a3      	ldr	r3, [r4, #8]
 8003d54:	42ab      	cmp	r3, r5
 8003d56:	dc19      	bgt.n	8003d8c <__multadd+0x74>
 8003d58:	6861      	ldr	r1, [r4, #4]
 8003d5a:	4638      	mov	r0, r7
 8003d5c:	3101      	adds	r1, #1
 8003d5e:	f7ff ff79 	bl	8003c54 <_Balloc>
 8003d62:	4680      	mov	r8, r0
 8003d64:	b928      	cbnz	r0, 8003d72 <__multadd+0x5a>
 8003d66:	4602      	mov	r2, r0
 8003d68:	21ba      	movs	r1, #186	@ 0xba
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d9c <__multadd+0x84>)
 8003d6c:	480c      	ldr	r0, [pc, #48]	@ (8003da0 <__multadd+0x88>)
 8003d6e:	f000 fba3 	bl	80044b8 <__assert_func>
 8003d72:	6922      	ldr	r2, [r4, #16]
 8003d74:	f104 010c 	add.w	r1, r4, #12
 8003d78:	3202      	adds	r2, #2
 8003d7a:	0092      	lsls	r2, r2, #2
 8003d7c:	300c      	adds	r0, #12
 8003d7e:	f7ff f800 	bl	8002d82 <memcpy>
 8003d82:	4621      	mov	r1, r4
 8003d84:	4638      	mov	r0, r7
 8003d86:	f7ff ffa5 	bl	8003cd4 <_Bfree>
 8003d8a:	4644      	mov	r4, r8
 8003d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003d90:	3501      	adds	r5, #1
 8003d92:	615e      	str	r6, [r3, #20]
 8003d94:	6125      	str	r5, [r4, #16]
 8003d96:	4620      	mov	r0, r4
 8003d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d9c:	08004bca 	.word	0x08004bca
 8003da0:	08004bdb 	.word	0x08004bdb

08003da4 <__hi0bits>:
 8003da4:	4603      	mov	r3, r0
 8003da6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003daa:	bf3a      	itte	cc
 8003dac:	0403      	lslcc	r3, r0, #16
 8003dae:	2010      	movcc	r0, #16
 8003db0:	2000      	movcs	r0, #0
 8003db2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003db6:	bf3c      	itt	cc
 8003db8:	021b      	lslcc	r3, r3, #8
 8003dba:	3008      	addcc	r0, #8
 8003dbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dc0:	bf3c      	itt	cc
 8003dc2:	011b      	lslcc	r3, r3, #4
 8003dc4:	3004      	addcc	r0, #4
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dca:	bf3c      	itt	cc
 8003dcc:	009b      	lslcc	r3, r3, #2
 8003dce:	3002      	addcc	r0, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	db05      	blt.n	8003de0 <__hi0bits+0x3c>
 8003dd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003dd8:	f100 0001 	add.w	r0, r0, #1
 8003ddc:	bf08      	it	eq
 8003dde:	2020      	moveq	r0, #32
 8003de0:	4770      	bx	lr

08003de2 <__lo0bits>:
 8003de2:	6803      	ldr	r3, [r0, #0]
 8003de4:	4602      	mov	r2, r0
 8003de6:	f013 0007 	ands.w	r0, r3, #7
 8003dea:	d00b      	beq.n	8003e04 <__lo0bits+0x22>
 8003dec:	07d9      	lsls	r1, r3, #31
 8003dee:	d421      	bmi.n	8003e34 <__lo0bits+0x52>
 8003df0:	0798      	lsls	r0, r3, #30
 8003df2:	bf49      	itett	mi
 8003df4:	085b      	lsrmi	r3, r3, #1
 8003df6:	089b      	lsrpl	r3, r3, #2
 8003df8:	2001      	movmi	r0, #1
 8003dfa:	6013      	strmi	r3, [r2, #0]
 8003dfc:	bf5c      	itt	pl
 8003dfe:	2002      	movpl	r0, #2
 8003e00:	6013      	strpl	r3, [r2, #0]
 8003e02:	4770      	bx	lr
 8003e04:	b299      	uxth	r1, r3
 8003e06:	b909      	cbnz	r1, 8003e0c <__lo0bits+0x2a>
 8003e08:	2010      	movs	r0, #16
 8003e0a:	0c1b      	lsrs	r3, r3, #16
 8003e0c:	b2d9      	uxtb	r1, r3
 8003e0e:	b909      	cbnz	r1, 8003e14 <__lo0bits+0x32>
 8003e10:	3008      	adds	r0, #8
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	0719      	lsls	r1, r3, #28
 8003e16:	bf04      	itt	eq
 8003e18:	091b      	lsreq	r3, r3, #4
 8003e1a:	3004      	addeq	r0, #4
 8003e1c:	0799      	lsls	r1, r3, #30
 8003e1e:	bf04      	itt	eq
 8003e20:	089b      	lsreq	r3, r3, #2
 8003e22:	3002      	addeq	r0, #2
 8003e24:	07d9      	lsls	r1, r3, #31
 8003e26:	d403      	bmi.n	8003e30 <__lo0bits+0x4e>
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	f100 0001 	add.w	r0, r0, #1
 8003e2e:	d003      	beq.n	8003e38 <__lo0bits+0x56>
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	4770      	bx	lr
 8003e34:	2000      	movs	r0, #0
 8003e36:	4770      	bx	lr
 8003e38:	2020      	movs	r0, #32
 8003e3a:	4770      	bx	lr

08003e3c <__i2b>:
 8003e3c:	b510      	push	{r4, lr}
 8003e3e:	460c      	mov	r4, r1
 8003e40:	2101      	movs	r1, #1
 8003e42:	f7ff ff07 	bl	8003c54 <_Balloc>
 8003e46:	4602      	mov	r2, r0
 8003e48:	b928      	cbnz	r0, 8003e56 <__i2b+0x1a>
 8003e4a:	f240 1145 	movw	r1, #325	@ 0x145
 8003e4e:	4b04      	ldr	r3, [pc, #16]	@ (8003e60 <__i2b+0x24>)
 8003e50:	4804      	ldr	r0, [pc, #16]	@ (8003e64 <__i2b+0x28>)
 8003e52:	f000 fb31 	bl	80044b8 <__assert_func>
 8003e56:	2301      	movs	r3, #1
 8003e58:	6144      	str	r4, [r0, #20]
 8003e5a:	6103      	str	r3, [r0, #16]
 8003e5c:	bd10      	pop	{r4, pc}
 8003e5e:	bf00      	nop
 8003e60:	08004bca 	.word	0x08004bca
 8003e64:	08004bdb 	.word	0x08004bdb

08003e68 <__multiply>:
 8003e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e6c:	4617      	mov	r7, r2
 8003e6e:	690a      	ldr	r2, [r1, #16]
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4689      	mov	r9, r1
 8003e74:	429a      	cmp	r2, r3
 8003e76:	bfa2      	ittt	ge
 8003e78:	463b      	movge	r3, r7
 8003e7a:	460f      	movge	r7, r1
 8003e7c:	4699      	movge	r9, r3
 8003e7e:	693d      	ldr	r5, [r7, #16]
 8003e80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	eb05 060a 	add.w	r6, r5, sl
 8003e8c:	42b3      	cmp	r3, r6
 8003e8e:	b085      	sub	sp, #20
 8003e90:	bfb8      	it	lt
 8003e92:	3101      	addlt	r1, #1
 8003e94:	f7ff fede 	bl	8003c54 <_Balloc>
 8003e98:	b930      	cbnz	r0, 8003ea8 <__multiply+0x40>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003ea0:	4b40      	ldr	r3, [pc, #256]	@ (8003fa4 <__multiply+0x13c>)
 8003ea2:	4841      	ldr	r0, [pc, #260]	@ (8003fa8 <__multiply+0x140>)
 8003ea4:	f000 fb08 	bl	80044b8 <__assert_func>
 8003ea8:	f100 0414 	add.w	r4, r0, #20
 8003eac:	4623      	mov	r3, r4
 8003eae:	2200      	movs	r2, #0
 8003eb0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8003eb4:	4573      	cmp	r3, lr
 8003eb6:	d320      	bcc.n	8003efa <__multiply+0x92>
 8003eb8:	f107 0814 	add.w	r8, r7, #20
 8003ebc:	f109 0114 	add.w	r1, r9, #20
 8003ec0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8003ec4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8003ec8:	9302      	str	r3, [sp, #8]
 8003eca:	1beb      	subs	r3, r5, r7
 8003ecc:	3b15      	subs	r3, #21
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	3715      	adds	r7, #21
 8003ed6:	42bd      	cmp	r5, r7
 8003ed8:	bf38      	it	cc
 8003eda:	2304      	movcc	r3, #4
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	9b02      	ldr	r3, [sp, #8]
 8003ee0:	9103      	str	r1, [sp, #12]
 8003ee2:	428b      	cmp	r3, r1
 8003ee4:	d80c      	bhi.n	8003f00 <__multiply+0x98>
 8003ee6:	2e00      	cmp	r6, #0
 8003ee8:	dd03      	ble.n	8003ef2 <__multiply+0x8a>
 8003eea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d055      	beq.n	8003f9e <__multiply+0x136>
 8003ef2:	6106      	str	r6, [r0, #16]
 8003ef4:	b005      	add	sp, #20
 8003ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003efa:	f843 2b04 	str.w	r2, [r3], #4
 8003efe:	e7d9      	b.n	8003eb4 <__multiply+0x4c>
 8003f00:	f8b1 a000 	ldrh.w	sl, [r1]
 8003f04:	f1ba 0f00 	cmp.w	sl, #0
 8003f08:	d01f      	beq.n	8003f4a <__multiply+0xe2>
 8003f0a:	46c4      	mov	ip, r8
 8003f0c:	46a1      	mov	r9, r4
 8003f0e:	2700      	movs	r7, #0
 8003f10:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003f14:	f8d9 3000 	ldr.w	r3, [r9]
 8003f18:	fa1f fb82 	uxth.w	fp, r2
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	fb0a 330b 	mla	r3, sl, fp, r3
 8003f22:	443b      	add	r3, r7
 8003f24:	f8d9 7000 	ldr.w	r7, [r9]
 8003f28:	0c12      	lsrs	r2, r2, #16
 8003f2a:	0c3f      	lsrs	r7, r7, #16
 8003f2c:	fb0a 7202 	mla	r2, sl, r2, r7
 8003f30:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f3a:	4565      	cmp	r5, ip
 8003f3c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8003f40:	f849 3b04 	str.w	r3, [r9], #4
 8003f44:	d8e4      	bhi.n	8003f10 <__multiply+0xa8>
 8003f46:	9b01      	ldr	r3, [sp, #4]
 8003f48:	50e7      	str	r7, [r4, r3]
 8003f4a:	9b03      	ldr	r3, [sp, #12]
 8003f4c:	3104      	adds	r1, #4
 8003f4e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003f52:	f1b9 0f00 	cmp.w	r9, #0
 8003f56:	d020      	beq.n	8003f9a <__multiply+0x132>
 8003f58:	4647      	mov	r7, r8
 8003f5a:	46a4      	mov	ip, r4
 8003f5c:	f04f 0a00 	mov.w	sl, #0
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	f8b7 b000 	ldrh.w	fp, [r7]
 8003f66:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	fb09 220b 	mla	r2, r9, fp, r2
 8003f70:	4452      	add	r2, sl
 8003f72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f76:	f84c 3b04 	str.w	r3, [ip], #4
 8003f7a:	f857 3b04 	ldr.w	r3, [r7], #4
 8003f7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003f82:	f8bc 3000 	ldrh.w	r3, [ip]
 8003f86:	42bd      	cmp	r5, r7
 8003f88:	fb09 330a 	mla	r3, r9, sl, r3
 8003f8c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8003f90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003f94:	d8e5      	bhi.n	8003f62 <__multiply+0xfa>
 8003f96:	9a01      	ldr	r2, [sp, #4]
 8003f98:	50a3      	str	r3, [r4, r2]
 8003f9a:	3404      	adds	r4, #4
 8003f9c:	e79f      	b.n	8003ede <__multiply+0x76>
 8003f9e:	3e01      	subs	r6, #1
 8003fa0:	e7a1      	b.n	8003ee6 <__multiply+0x7e>
 8003fa2:	bf00      	nop
 8003fa4:	08004bca 	.word	0x08004bca
 8003fa8:	08004bdb 	.word	0x08004bdb

08003fac <__pow5mult>:
 8003fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb0:	4615      	mov	r5, r2
 8003fb2:	f012 0203 	ands.w	r2, r2, #3
 8003fb6:	4607      	mov	r7, r0
 8003fb8:	460e      	mov	r6, r1
 8003fba:	d007      	beq.n	8003fcc <__pow5mult+0x20>
 8003fbc:	4c25      	ldr	r4, [pc, #148]	@ (8004054 <__pow5mult+0xa8>)
 8003fbe:	3a01      	subs	r2, #1
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003fc6:	f7ff fea7 	bl	8003d18 <__multadd>
 8003fca:	4606      	mov	r6, r0
 8003fcc:	10ad      	asrs	r5, r5, #2
 8003fce:	d03d      	beq.n	800404c <__pow5mult+0xa0>
 8003fd0:	69fc      	ldr	r4, [r7, #28]
 8003fd2:	b97c      	cbnz	r4, 8003ff4 <__pow5mult+0x48>
 8003fd4:	2010      	movs	r0, #16
 8003fd6:	f7ff fd87 	bl	8003ae8 <malloc>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	61f8      	str	r0, [r7, #28]
 8003fde:	b928      	cbnz	r0, 8003fec <__pow5mult+0x40>
 8003fe0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8004058 <__pow5mult+0xac>)
 8003fe6:	481d      	ldr	r0, [pc, #116]	@ (800405c <__pow5mult+0xb0>)
 8003fe8:	f000 fa66 	bl	80044b8 <__assert_func>
 8003fec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ff0:	6004      	str	r4, [r0, #0]
 8003ff2:	60c4      	str	r4, [r0, #12]
 8003ff4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003ff8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003ffc:	b94c      	cbnz	r4, 8004012 <__pow5mult+0x66>
 8003ffe:	f240 2171 	movw	r1, #625	@ 0x271
 8004002:	4638      	mov	r0, r7
 8004004:	f7ff ff1a 	bl	8003e3c <__i2b>
 8004008:	2300      	movs	r3, #0
 800400a:	4604      	mov	r4, r0
 800400c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004010:	6003      	str	r3, [r0, #0]
 8004012:	f04f 0900 	mov.w	r9, #0
 8004016:	07eb      	lsls	r3, r5, #31
 8004018:	d50a      	bpl.n	8004030 <__pow5mult+0x84>
 800401a:	4631      	mov	r1, r6
 800401c:	4622      	mov	r2, r4
 800401e:	4638      	mov	r0, r7
 8004020:	f7ff ff22 	bl	8003e68 <__multiply>
 8004024:	4680      	mov	r8, r0
 8004026:	4631      	mov	r1, r6
 8004028:	4638      	mov	r0, r7
 800402a:	f7ff fe53 	bl	8003cd4 <_Bfree>
 800402e:	4646      	mov	r6, r8
 8004030:	106d      	asrs	r5, r5, #1
 8004032:	d00b      	beq.n	800404c <__pow5mult+0xa0>
 8004034:	6820      	ldr	r0, [r4, #0]
 8004036:	b938      	cbnz	r0, 8004048 <__pow5mult+0x9c>
 8004038:	4622      	mov	r2, r4
 800403a:	4621      	mov	r1, r4
 800403c:	4638      	mov	r0, r7
 800403e:	f7ff ff13 	bl	8003e68 <__multiply>
 8004042:	6020      	str	r0, [r4, #0]
 8004044:	f8c0 9000 	str.w	r9, [r0]
 8004048:	4604      	mov	r4, r0
 800404a:	e7e4      	b.n	8004016 <__pow5mult+0x6a>
 800404c:	4630      	mov	r0, r6
 800404e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004052:	bf00      	nop
 8004054:	08004c8c 	.word	0x08004c8c
 8004058:	08004b5b 	.word	0x08004b5b
 800405c:	08004bdb 	.word	0x08004bdb

08004060 <__lshift>:
 8004060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004064:	460c      	mov	r4, r1
 8004066:	4607      	mov	r7, r0
 8004068:	4691      	mov	r9, r2
 800406a:	6923      	ldr	r3, [r4, #16]
 800406c:	6849      	ldr	r1, [r1, #4]
 800406e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004072:	68a3      	ldr	r3, [r4, #8]
 8004074:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004078:	f108 0601 	add.w	r6, r8, #1
 800407c:	42b3      	cmp	r3, r6
 800407e:	db0b      	blt.n	8004098 <__lshift+0x38>
 8004080:	4638      	mov	r0, r7
 8004082:	f7ff fde7 	bl	8003c54 <_Balloc>
 8004086:	4605      	mov	r5, r0
 8004088:	b948      	cbnz	r0, 800409e <__lshift+0x3e>
 800408a:	4602      	mov	r2, r0
 800408c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004090:	4b27      	ldr	r3, [pc, #156]	@ (8004130 <__lshift+0xd0>)
 8004092:	4828      	ldr	r0, [pc, #160]	@ (8004134 <__lshift+0xd4>)
 8004094:	f000 fa10 	bl	80044b8 <__assert_func>
 8004098:	3101      	adds	r1, #1
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	e7ee      	b.n	800407c <__lshift+0x1c>
 800409e:	2300      	movs	r3, #0
 80040a0:	f100 0114 	add.w	r1, r0, #20
 80040a4:	f100 0210 	add.w	r2, r0, #16
 80040a8:	4618      	mov	r0, r3
 80040aa:	4553      	cmp	r3, sl
 80040ac:	db33      	blt.n	8004116 <__lshift+0xb6>
 80040ae:	6920      	ldr	r0, [r4, #16]
 80040b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80040b4:	f104 0314 	add.w	r3, r4, #20
 80040b8:	f019 091f 	ands.w	r9, r9, #31
 80040bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80040c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80040c4:	d02b      	beq.n	800411e <__lshift+0xbe>
 80040c6:	468a      	mov	sl, r1
 80040c8:	2200      	movs	r2, #0
 80040ca:	f1c9 0e20 	rsb	lr, r9, #32
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	fa00 f009 	lsl.w	r0, r0, r9
 80040d4:	4310      	orrs	r0, r2
 80040d6:	f84a 0b04 	str.w	r0, [sl], #4
 80040da:	f853 2b04 	ldr.w	r2, [r3], #4
 80040de:	459c      	cmp	ip, r3
 80040e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80040e4:	d8f3      	bhi.n	80040ce <__lshift+0x6e>
 80040e6:	ebac 0304 	sub.w	r3, ip, r4
 80040ea:	3b15      	subs	r3, #21
 80040ec:	f023 0303 	bic.w	r3, r3, #3
 80040f0:	3304      	adds	r3, #4
 80040f2:	f104 0015 	add.w	r0, r4, #21
 80040f6:	4560      	cmp	r0, ip
 80040f8:	bf88      	it	hi
 80040fa:	2304      	movhi	r3, #4
 80040fc:	50ca      	str	r2, [r1, r3]
 80040fe:	b10a      	cbz	r2, 8004104 <__lshift+0xa4>
 8004100:	f108 0602 	add.w	r6, r8, #2
 8004104:	3e01      	subs	r6, #1
 8004106:	4638      	mov	r0, r7
 8004108:	4621      	mov	r1, r4
 800410a:	612e      	str	r6, [r5, #16]
 800410c:	f7ff fde2 	bl	8003cd4 <_Bfree>
 8004110:	4628      	mov	r0, r5
 8004112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004116:	f842 0f04 	str.w	r0, [r2, #4]!
 800411a:	3301      	adds	r3, #1
 800411c:	e7c5      	b.n	80040aa <__lshift+0x4a>
 800411e:	3904      	subs	r1, #4
 8004120:	f853 2b04 	ldr.w	r2, [r3], #4
 8004124:	459c      	cmp	ip, r3
 8004126:	f841 2f04 	str.w	r2, [r1, #4]!
 800412a:	d8f9      	bhi.n	8004120 <__lshift+0xc0>
 800412c:	e7ea      	b.n	8004104 <__lshift+0xa4>
 800412e:	bf00      	nop
 8004130:	08004bca 	.word	0x08004bca
 8004134:	08004bdb 	.word	0x08004bdb

08004138 <__mcmp>:
 8004138:	4603      	mov	r3, r0
 800413a:	690a      	ldr	r2, [r1, #16]
 800413c:	6900      	ldr	r0, [r0, #16]
 800413e:	b530      	push	{r4, r5, lr}
 8004140:	1a80      	subs	r0, r0, r2
 8004142:	d10e      	bne.n	8004162 <__mcmp+0x2a>
 8004144:	3314      	adds	r3, #20
 8004146:	3114      	adds	r1, #20
 8004148:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800414c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004150:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004154:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004158:	4295      	cmp	r5, r2
 800415a:	d003      	beq.n	8004164 <__mcmp+0x2c>
 800415c:	d205      	bcs.n	800416a <__mcmp+0x32>
 800415e:	f04f 30ff 	mov.w	r0, #4294967295
 8004162:	bd30      	pop	{r4, r5, pc}
 8004164:	42a3      	cmp	r3, r4
 8004166:	d3f3      	bcc.n	8004150 <__mcmp+0x18>
 8004168:	e7fb      	b.n	8004162 <__mcmp+0x2a>
 800416a:	2001      	movs	r0, #1
 800416c:	e7f9      	b.n	8004162 <__mcmp+0x2a>
	...

08004170 <__mdiff>:
 8004170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004174:	4689      	mov	r9, r1
 8004176:	4606      	mov	r6, r0
 8004178:	4611      	mov	r1, r2
 800417a:	4648      	mov	r0, r9
 800417c:	4614      	mov	r4, r2
 800417e:	f7ff ffdb 	bl	8004138 <__mcmp>
 8004182:	1e05      	subs	r5, r0, #0
 8004184:	d112      	bne.n	80041ac <__mdiff+0x3c>
 8004186:	4629      	mov	r1, r5
 8004188:	4630      	mov	r0, r6
 800418a:	f7ff fd63 	bl	8003c54 <_Balloc>
 800418e:	4602      	mov	r2, r0
 8004190:	b928      	cbnz	r0, 800419e <__mdiff+0x2e>
 8004192:	f240 2137 	movw	r1, #567	@ 0x237
 8004196:	4b3e      	ldr	r3, [pc, #248]	@ (8004290 <__mdiff+0x120>)
 8004198:	483e      	ldr	r0, [pc, #248]	@ (8004294 <__mdiff+0x124>)
 800419a:	f000 f98d 	bl	80044b8 <__assert_func>
 800419e:	2301      	movs	r3, #1
 80041a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80041a4:	4610      	mov	r0, r2
 80041a6:	b003      	add	sp, #12
 80041a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ac:	bfbc      	itt	lt
 80041ae:	464b      	movlt	r3, r9
 80041b0:	46a1      	movlt	r9, r4
 80041b2:	4630      	mov	r0, r6
 80041b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80041b8:	bfba      	itte	lt
 80041ba:	461c      	movlt	r4, r3
 80041bc:	2501      	movlt	r5, #1
 80041be:	2500      	movge	r5, #0
 80041c0:	f7ff fd48 	bl	8003c54 <_Balloc>
 80041c4:	4602      	mov	r2, r0
 80041c6:	b918      	cbnz	r0, 80041d0 <__mdiff+0x60>
 80041c8:	f240 2145 	movw	r1, #581	@ 0x245
 80041cc:	4b30      	ldr	r3, [pc, #192]	@ (8004290 <__mdiff+0x120>)
 80041ce:	e7e3      	b.n	8004198 <__mdiff+0x28>
 80041d0:	f100 0b14 	add.w	fp, r0, #20
 80041d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80041d8:	f109 0310 	add.w	r3, r9, #16
 80041dc:	60c5      	str	r5, [r0, #12]
 80041de:	f04f 0c00 	mov.w	ip, #0
 80041e2:	f109 0514 	add.w	r5, r9, #20
 80041e6:	46d9      	mov	r9, fp
 80041e8:	6926      	ldr	r6, [r4, #16]
 80041ea:	f104 0e14 	add.w	lr, r4, #20
 80041ee:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80041f2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	9b01      	ldr	r3, [sp, #4]
 80041fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80041fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004202:	b281      	uxth	r1, r0
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	fa1f f38a 	uxth.w	r3, sl
 800420a:	1a5b      	subs	r3, r3, r1
 800420c:	0c00      	lsrs	r0, r0, #16
 800420e:	4463      	add	r3, ip
 8004210:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004214:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004218:	b29b      	uxth	r3, r3
 800421a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800421e:	4576      	cmp	r6, lr
 8004220:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004224:	f849 3b04 	str.w	r3, [r9], #4
 8004228:	d8e6      	bhi.n	80041f8 <__mdiff+0x88>
 800422a:	1b33      	subs	r3, r6, r4
 800422c:	3b15      	subs	r3, #21
 800422e:	f023 0303 	bic.w	r3, r3, #3
 8004232:	3415      	adds	r4, #21
 8004234:	3304      	adds	r3, #4
 8004236:	42a6      	cmp	r6, r4
 8004238:	bf38      	it	cc
 800423a:	2304      	movcc	r3, #4
 800423c:	441d      	add	r5, r3
 800423e:	445b      	add	r3, fp
 8004240:	461e      	mov	r6, r3
 8004242:	462c      	mov	r4, r5
 8004244:	4544      	cmp	r4, r8
 8004246:	d30e      	bcc.n	8004266 <__mdiff+0xf6>
 8004248:	f108 0103 	add.w	r1, r8, #3
 800424c:	1b49      	subs	r1, r1, r5
 800424e:	f021 0103 	bic.w	r1, r1, #3
 8004252:	3d03      	subs	r5, #3
 8004254:	45a8      	cmp	r8, r5
 8004256:	bf38      	it	cc
 8004258:	2100      	movcc	r1, #0
 800425a:	440b      	add	r3, r1
 800425c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004260:	b199      	cbz	r1, 800428a <__mdiff+0x11a>
 8004262:	6117      	str	r7, [r2, #16]
 8004264:	e79e      	b.n	80041a4 <__mdiff+0x34>
 8004266:	46e6      	mov	lr, ip
 8004268:	f854 1b04 	ldr.w	r1, [r4], #4
 800426c:	fa1f fc81 	uxth.w	ip, r1
 8004270:	44f4      	add	ip, lr
 8004272:	0c08      	lsrs	r0, r1, #16
 8004274:	4471      	add	r1, lr
 8004276:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800427a:	b289      	uxth	r1, r1
 800427c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004280:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004284:	f846 1b04 	str.w	r1, [r6], #4
 8004288:	e7dc      	b.n	8004244 <__mdiff+0xd4>
 800428a:	3f01      	subs	r7, #1
 800428c:	e7e6      	b.n	800425c <__mdiff+0xec>
 800428e:	bf00      	nop
 8004290:	08004bca 	.word	0x08004bca
 8004294:	08004bdb 	.word	0x08004bdb

08004298 <__d2b>:
 8004298:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800429c:	2101      	movs	r1, #1
 800429e:	4690      	mov	r8, r2
 80042a0:	4699      	mov	r9, r3
 80042a2:	9e08      	ldr	r6, [sp, #32]
 80042a4:	f7ff fcd6 	bl	8003c54 <_Balloc>
 80042a8:	4604      	mov	r4, r0
 80042aa:	b930      	cbnz	r0, 80042ba <__d2b+0x22>
 80042ac:	4602      	mov	r2, r0
 80042ae:	f240 310f 	movw	r1, #783	@ 0x30f
 80042b2:	4b23      	ldr	r3, [pc, #140]	@ (8004340 <__d2b+0xa8>)
 80042b4:	4823      	ldr	r0, [pc, #140]	@ (8004344 <__d2b+0xac>)
 80042b6:	f000 f8ff 	bl	80044b8 <__assert_func>
 80042ba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80042be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80042c2:	b10d      	cbz	r5, 80042c8 <__d2b+0x30>
 80042c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042c8:	9301      	str	r3, [sp, #4]
 80042ca:	f1b8 0300 	subs.w	r3, r8, #0
 80042ce:	d024      	beq.n	800431a <__d2b+0x82>
 80042d0:	4668      	mov	r0, sp
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	f7ff fd85 	bl	8003de2 <__lo0bits>
 80042d8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80042dc:	b1d8      	cbz	r0, 8004316 <__d2b+0x7e>
 80042de:	f1c0 0320 	rsb	r3, r0, #32
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	430b      	orrs	r3, r1
 80042e8:	40c2      	lsrs	r2, r0
 80042ea:	6163      	str	r3, [r4, #20]
 80042ec:	9201      	str	r2, [sp, #4]
 80042ee:	9b01      	ldr	r3, [sp, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf0c      	ite	eq
 80042f4:	2201      	moveq	r2, #1
 80042f6:	2202      	movne	r2, #2
 80042f8:	61a3      	str	r3, [r4, #24]
 80042fa:	6122      	str	r2, [r4, #16]
 80042fc:	b1ad      	cbz	r5, 800432a <__d2b+0x92>
 80042fe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004302:	4405      	add	r5, r0
 8004304:	6035      	str	r5, [r6, #0]
 8004306:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800430a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800430c:	6018      	str	r0, [r3, #0]
 800430e:	4620      	mov	r0, r4
 8004310:	b002      	add	sp, #8
 8004312:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004316:	6161      	str	r1, [r4, #20]
 8004318:	e7e9      	b.n	80042ee <__d2b+0x56>
 800431a:	a801      	add	r0, sp, #4
 800431c:	f7ff fd61 	bl	8003de2 <__lo0bits>
 8004320:	9b01      	ldr	r3, [sp, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	6163      	str	r3, [r4, #20]
 8004326:	3020      	adds	r0, #32
 8004328:	e7e7      	b.n	80042fa <__d2b+0x62>
 800432a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800432e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004332:	6030      	str	r0, [r6, #0]
 8004334:	6918      	ldr	r0, [r3, #16]
 8004336:	f7ff fd35 	bl	8003da4 <__hi0bits>
 800433a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800433e:	e7e4      	b.n	800430a <__d2b+0x72>
 8004340:	08004bca 	.word	0x08004bca
 8004344:	08004bdb 	.word	0x08004bdb

08004348 <__sflush_r>:
 8004348:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	0716      	lsls	r6, r2, #28
 8004350:	4605      	mov	r5, r0
 8004352:	460c      	mov	r4, r1
 8004354:	d454      	bmi.n	8004400 <__sflush_r+0xb8>
 8004356:	684b      	ldr	r3, [r1, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	dc02      	bgt.n	8004362 <__sflush_r+0x1a>
 800435c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	dd48      	ble.n	80043f4 <__sflush_r+0xac>
 8004362:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004364:	2e00      	cmp	r6, #0
 8004366:	d045      	beq.n	80043f4 <__sflush_r+0xac>
 8004368:	2300      	movs	r3, #0
 800436a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800436e:	682f      	ldr	r7, [r5, #0]
 8004370:	6a21      	ldr	r1, [r4, #32]
 8004372:	602b      	str	r3, [r5, #0]
 8004374:	d030      	beq.n	80043d8 <__sflush_r+0x90>
 8004376:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004378:	89a3      	ldrh	r3, [r4, #12]
 800437a:	0759      	lsls	r1, r3, #29
 800437c:	d505      	bpl.n	800438a <__sflush_r+0x42>
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	1ad2      	subs	r2, r2, r3
 8004382:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004384:	b10b      	cbz	r3, 800438a <__sflush_r+0x42>
 8004386:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004388:	1ad2      	subs	r2, r2, r3
 800438a:	2300      	movs	r3, #0
 800438c:	4628      	mov	r0, r5
 800438e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004390:	6a21      	ldr	r1, [r4, #32]
 8004392:	47b0      	blx	r6
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	89a3      	ldrh	r3, [r4, #12]
 8004398:	d106      	bne.n	80043a8 <__sflush_r+0x60>
 800439a:	6829      	ldr	r1, [r5, #0]
 800439c:	291d      	cmp	r1, #29
 800439e:	d82b      	bhi.n	80043f8 <__sflush_r+0xb0>
 80043a0:	4a28      	ldr	r2, [pc, #160]	@ (8004444 <__sflush_r+0xfc>)
 80043a2:	40ca      	lsrs	r2, r1
 80043a4:	07d6      	lsls	r6, r2, #31
 80043a6:	d527      	bpl.n	80043f8 <__sflush_r+0xb0>
 80043a8:	2200      	movs	r2, #0
 80043aa:	6062      	str	r2, [r4, #4]
 80043ac:	6922      	ldr	r2, [r4, #16]
 80043ae:	04d9      	lsls	r1, r3, #19
 80043b0:	6022      	str	r2, [r4, #0]
 80043b2:	d504      	bpl.n	80043be <__sflush_r+0x76>
 80043b4:	1c42      	adds	r2, r0, #1
 80043b6:	d101      	bne.n	80043bc <__sflush_r+0x74>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	b903      	cbnz	r3, 80043be <__sflush_r+0x76>
 80043bc:	6560      	str	r0, [r4, #84]	@ 0x54
 80043be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043c0:	602f      	str	r7, [r5, #0]
 80043c2:	b1b9      	cbz	r1, 80043f4 <__sflush_r+0xac>
 80043c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043c8:	4299      	cmp	r1, r3
 80043ca:	d002      	beq.n	80043d2 <__sflush_r+0x8a>
 80043cc:	4628      	mov	r0, r5
 80043ce:	f7ff fb43 	bl	8003a58 <_free_r>
 80043d2:	2300      	movs	r3, #0
 80043d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80043d6:	e00d      	b.n	80043f4 <__sflush_r+0xac>
 80043d8:	2301      	movs	r3, #1
 80043da:	4628      	mov	r0, r5
 80043dc:	47b0      	blx	r6
 80043de:	4602      	mov	r2, r0
 80043e0:	1c50      	adds	r0, r2, #1
 80043e2:	d1c9      	bne.n	8004378 <__sflush_r+0x30>
 80043e4:	682b      	ldr	r3, [r5, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0c6      	beq.n	8004378 <__sflush_r+0x30>
 80043ea:	2b1d      	cmp	r3, #29
 80043ec:	d001      	beq.n	80043f2 <__sflush_r+0xaa>
 80043ee:	2b16      	cmp	r3, #22
 80043f0:	d11d      	bne.n	800442e <__sflush_r+0xe6>
 80043f2:	602f      	str	r7, [r5, #0]
 80043f4:	2000      	movs	r0, #0
 80043f6:	e021      	b.n	800443c <__sflush_r+0xf4>
 80043f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043fc:	b21b      	sxth	r3, r3
 80043fe:	e01a      	b.n	8004436 <__sflush_r+0xee>
 8004400:	690f      	ldr	r7, [r1, #16]
 8004402:	2f00      	cmp	r7, #0
 8004404:	d0f6      	beq.n	80043f4 <__sflush_r+0xac>
 8004406:	0793      	lsls	r3, r2, #30
 8004408:	bf18      	it	ne
 800440a:	2300      	movne	r3, #0
 800440c:	680e      	ldr	r6, [r1, #0]
 800440e:	bf08      	it	eq
 8004410:	694b      	ldreq	r3, [r1, #20]
 8004412:	1bf6      	subs	r6, r6, r7
 8004414:	600f      	str	r7, [r1, #0]
 8004416:	608b      	str	r3, [r1, #8]
 8004418:	2e00      	cmp	r6, #0
 800441a:	ddeb      	ble.n	80043f4 <__sflush_r+0xac>
 800441c:	4633      	mov	r3, r6
 800441e:	463a      	mov	r2, r7
 8004420:	4628      	mov	r0, r5
 8004422:	6a21      	ldr	r1, [r4, #32]
 8004424:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004428:	47e0      	blx	ip
 800442a:	2800      	cmp	r0, #0
 800442c:	dc07      	bgt.n	800443e <__sflush_r+0xf6>
 800442e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004436:	f04f 30ff 	mov.w	r0, #4294967295
 800443a:	81a3      	strh	r3, [r4, #12]
 800443c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800443e:	4407      	add	r7, r0
 8004440:	1a36      	subs	r6, r6, r0
 8004442:	e7e9      	b.n	8004418 <__sflush_r+0xd0>
 8004444:	20400001 	.word	0x20400001

08004448 <_fflush_r>:
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	690b      	ldr	r3, [r1, #16]
 800444c:	4605      	mov	r5, r0
 800444e:	460c      	mov	r4, r1
 8004450:	b913      	cbnz	r3, 8004458 <_fflush_r+0x10>
 8004452:	2500      	movs	r5, #0
 8004454:	4628      	mov	r0, r5
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	b118      	cbz	r0, 8004462 <_fflush_r+0x1a>
 800445a:	6a03      	ldr	r3, [r0, #32]
 800445c:	b90b      	cbnz	r3, 8004462 <_fflush_r+0x1a>
 800445e:	f7fe fb89 	bl	8002b74 <__sinit>
 8004462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f3      	beq.n	8004452 <_fflush_r+0xa>
 800446a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800446c:	07d0      	lsls	r0, r2, #31
 800446e:	d404      	bmi.n	800447a <_fflush_r+0x32>
 8004470:	0599      	lsls	r1, r3, #22
 8004472:	d402      	bmi.n	800447a <_fflush_r+0x32>
 8004474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004476:	f7fe fc74 	bl	8002d62 <__retarget_lock_acquire_recursive>
 800447a:	4628      	mov	r0, r5
 800447c:	4621      	mov	r1, r4
 800447e:	f7ff ff63 	bl	8004348 <__sflush_r>
 8004482:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004484:	4605      	mov	r5, r0
 8004486:	07da      	lsls	r2, r3, #31
 8004488:	d4e4      	bmi.n	8004454 <_fflush_r+0xc>
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	059b      	lsls	r3, r3, #22
 800448e:	d4e1      	bmi.n	8004454 <_fflush_r+0xc>
 8004490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004492:	f7fe fc67 	bl	8002d64 <__retarget_lock_release_recursive>
 8004496:	e7dd      	b.n	8004454 <_fflush_r+0xc>

08004498 <_sbrk_r>:
 8004498:	b538      	push	{r3, r4, r5, lr}
 800449a:	2300      	movs	r3, #0
 800449c:	4d05      	ldr	r5, [pc, #20]	@ (80044b4 <_sbrk_r+0x1c>)
 800449e:	4604      	mov	r4, r0
 80044a0:	4608      	mov	r0, r1
 80044a2:	602b      	str	r3, [r5, #0]
 80044a4:	f7fc fcfc 	bl	8000ea0 <_sbrk>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d102      	bne.n	80044b2 <_sbrk_r+0x1a>
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	b103      	cbz	r3, 80044b2 <_sbrk_r+0x1a>
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	bd38      	pop	{r3, r4, r5, pc}
 80044b4:	2000037c 	.word	0x2000037c

080044b8 <__assert_func>:
 80044b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80044ba:	4614      	mov	r4, r2
 80044bc:	461a      	mov	r2, r3
 80044be:	4b09      	ldr	r3, [pc, #36]	@ (80044e4 <__assert_func+0x2c>)
 80044c0:	4605      	mov	r5, r0
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68d8      	ldr	r0, [r3, #12]
 80044c6:	b14c      	cbz	r4, 80044dc <__assert_func+0x24>
 80044c8:	4b07      	ldr	r3, [pc, #28]	@ (80044e8 <__assert_func+0x30>)
 80044ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80044ce:	9100      	str	r1, [sp, #0]
 80044d0:	462b      	mov	r3, r5
 80044d2:	4906      	ldr	r1, [pc, #24]	@ (80044ec <__assert_func+0x34>)
 80044d4:	f000 f842 	bl	800455c <fiprintf>
 80044d8:	f000 f852 	bl	8004580 <abort>
 80044dc:	4b04      	ldr	r3, [pc, #16]	@ (80044f0 <__assert_func+0x38>)
 80044de:	461c      	mov	r4, r3
 80044e0:	e7f3      	b.n	80044ca <__assert_func+0x12>
 80044e2:	bf00      	nop
 80044e4:	20000018 	.word	0x20000018
 80044e8:	08004c3e 	.word	0x08004c3e
 80044ec:	08004c4b 	.word	0x08004c4b
 80044f0:	08004c79 	.word	0x08004c79

080044f4 <_calloc_r>:
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	fba1 5402 	umull	r5, r4, r1, r2
 80044fa:	b934      	cbnz	r4, 800450a <_calloc_r+0x16>
 80044fc:	4629      	mov	r1, r5
 80044fe:	f7ff fb1d 	bl	8003b3c <_malloc_r>
 8004502:	4606      	mov	r6, r0
 8004504:	b928      	cbnz	r0, 8004512 <_calloc_r+0x1e>
 8004506:	4630      	mov	r0, r6
 8004508:	bd70      	pop	{r4, r5, r6, pc}
 800450a:	220c      	movs	r2, #12
 800450c:	2600      	movs	r6, #0
 800450e:	6002      	str	r2, [r0, #0]
 8004510:	e7f9      	b.n	8004506 <_calloc_r+0x12>
 8004512:	462a      	mov	r2, r5
 8004514:	4621      	mov	r1, r4
 8004516:	f7fe fba6 	bl	8002c66 <memset>
 800451a:	e7f4      	b.n	8004506 <_calloc_r+0x12>

0800451c <__ascii_mbtowc>:
 800451c:	b082      	sub	sp, #8
 800451e:	b901      	cbnz	r1, 8004522 <__ascii_mbtowc+0x6>
 8004520:	a901      	add	r1, sp, #4
 8004522:	b142      	cbz	r2, 8004536 <__ascii_mbtowc+0x1a>
 8004524:	b14b      	cbz	r3, 800453a <__ascii_mbtowc+0x1e>
 8004526:	7813      	ldrb	r3, [r2, #0]
 8004528:	600b      	str	r3, [r1, #0]
 800452a:	7812      	ldrb	r2, [r2, #0]
 800452c:	1e10      	subs	r0, r2, #0
 800452e:	bf18      	it	ne
 8004530:	2001      	movne	r0, #1
 8004532:	b002      	add	sp, #8
 8004534:	4770      	bx	lr
 8004536:	4610      	mov	r0, r2
 8004538:	e7fb      	b.n	8004532 <__ascii_mbtowc+0x16>
 800453a:	f06f 0001 	mvn.w	r0, #1
 800453e:	e7f8      	b.n	8004532 <__ascii_mbtowc+0x16>

08004540 <__ascii_wctomb>:
 8004540:	4603      	mov	r3, r0
 8004542:	4608      	mov	r0, r1
 8004544:	b141      	cbz	r1, 8004558 <__ascii_wctomb+0x18>
 8004546:	2aff      	cmp	r2, #255	@ 0xff
 8004548:	d904      	bls.n	8004554 <__ascii_wctomb+0x14>
 800454a:	228a      	movs	r2, #138	@ 0x8a
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	4770      	bx	lr
 8004554:	2001      	movs	r0, #1
 8004556:	700a      	strb	r2, [r1, #0]
 8004558:	4770      	bx	lr
	...

0800455c <fiprintf>:
 800455c:	b40e      	push	{r1, r2, r3}
 800455e:	b503      	push	{r0, r1, lr}
 8004560:	4601      	mov	r1, r0
 8004562:	ab03      	add	r3, sp, #12
 8004564:	4805      	ldr	r0, [pc, #20]	@ (800457c <fiprintf+0x20>)
 8004566:	f853 2b04 	ldr.w	r2, [r3], #4
 800456a:	6800      	ldr	r0, [r0, #0]
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	f000 f835 	bl	80045dc <_vfiprintf_r>
 8004572:	b002      	add	sp, #8
 8004574:	f85d eb04 	ldr.w	lr, [sp], #4
 8004578:	b003      	add	sp, #12
 800457a:	4770      	bx	lr
 800457c:	20000018 	.word	0x20000018

08004580 <abort>:
 8004580:	2006      	movs	r0, #6
 8004582:	b508      	push	{r3, lr}
 8004584:	f000 f9fe 	bl	8004984 <raise>
 8004588:	2001      	movs	r0, #1
 800458a:	f7fc fc14 	bl	8000db6 <_exit>

0800458e <__sfputc_r>:
 800458e:	6893      	ldr	r3, [r2, #8]
 8004590:	b410      	push	{r4}
 8004592:	3b01      	subs	r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	6093      	str	r3, [r2, #8]
 8004598:	da07      	bge.n	80045aa <__sfputc_r+0x1c>
 800459a:	6994      	ldr	r4, [r2, #24]
 800459c:	42a3      	cmp	r3, r4
 800459e:	db01      	blt.n	80045a4 <__sfputc_r+0x16>
 80045a0:	290a      	cmp	r1, #10
 80045a2:	d102      	bne.n	80045aa <__sfputc_r+0x1c>
 80045a4:	bc10      	pop	{r4}
 80045a6:	f000 b931 	b.w	800480c <__swbuf_r>
 80045aa:	6813      	ldr	r3, [r2, #0]
 80045ac:	1c58      	adds	r0, r3, #1
 80045ae:	6010      	str	r0, [r2, #0]
 80045b0:	7019      	strb	r1, [r3, #0]
 80045b2:	4608      	mov	r0, r1
 80045b4:	bc10      	pop	{r4}
 80045b6:	4770      	bx	lr

080045b8 <__sfputs_r>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	4606      	mov	r6, r0
 80045bc:	460f      	mov	r7, r1
 80045be:	4614      	mov	r4, r2
 80045c0:	18d5      	adds	r5, r2, r3
 80045c2:	42ac      	cmp	r4, r5
 80045c4:	d101      	bne.n	80045ca <__sfputs_r+0x12>
 80045c6:	2000      	movs	r0, #0
 80045c8:	e007      	b.n	80045da <__sfputs_r+0x22>
 80045ca:	463a      	mov	r2, r7
 80045cc:	4630      	mov	r0, r6
 80045ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d2:	f7ff ffdc 	bl	800458e <__sfputc_r>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	d1f3      	bne.n	80045c2 <__sfputs_r+0xa>
 80045da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080045dc <_vfiprintf_r>:
 80045dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e0:	460d      	mov	r5, r1
 80045e2:	4614      	mov	r4, r2
 80045e4:	4698      	mov	r8, r3
 80045e6:	4606      	mov	r6, r0
 80045e8:	b09d      	sub	sp, #116	@ 0x74
 80045ea:	b118      	cbz	r0, 80045f4 <_vfiprintf_r+0x18>
 80045ec:	6a03      	ldr	r3, [r0, #32]
 80045ee:	b90b      	cbnz	r3, 80045f4 <_vfiprintf_r+0x18>
 80045f0:	f7fe fac0 	bl	8002b74 <__sinit>
 80045f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045f6:	07d9      	lsls	r1, r3, #31
 80045f8:	d405      	bmi.n	8004606 <_vfiprintf_r+0x2a>
 80045fa:	89ab      	ldrh	r3, [r5, #12]
 80045fc:	059a      	lsls	r2, r3, #22
 80045fe:	d402      	bmi.n	8004606 <_vfiprintf_r+0x2a>
 8004600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004602:	f7fe fbae 	bl	8002d62 <__retarget_lock_acquire_recursive>
 8004606:	89ab      	ldrh	r3, [r5, #12]
 8004608:	071b      	lsls	r3, r3, #28
 800460a:	d501      	bpl.n	8004610 <_vfiprintf_r+0x34>
 800460c:	692b      	ldr	r3, [r5, #16]
 800460e:	b99b      	cbnz	r3, 8004638 <_vfiprintf_r+0x5c>
 8004610:	4629      	mov	r1, r5
 8004612:	4630      	mov	r0, r6
 8004614:	f000 f938 	bl	8004888 <__swsetup_r>
 8004618:	b170      	cbz	r0, 8004638 <_vfiprintf_r+0x5c>
 800461a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800461c:	07dc      	lsls	r4, r3, #31
 800461e:	d504      	bpl.n	800462a <_vfiprintf_r+0x4e>
 8004620:	f04f 30ff 	mov.w	r0, #4294967295
 8004624:	b01d      	add	sp, #116	@ 0x74
 8004626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800462a:	89ab      	ldrh	r3, [r5, #12]
 800462c:	0598      	lsls	r0, r3, #22
 800462e:	d4f7      	bmi.n	8004620 <_vfiprintf_r+0x44>
 8004630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004632:	f7fe fb97 	bl	8002d64 <__retarget_lock_release_recursive>
 8004636:	e7f3      	b.n	8004620 <_vfiprintf_r+0x44>
 8004638:	2300      	movs	r3, #0
 800463a:	9309      	str	r3, [sp, #36]	@ 0x24
 800463c:	2320      	movs	r3, #32
 800463e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004642:	2330      	movs	r3, #48	@ 0x30
 8004644:	f04f 0901 	mov.w	r9, #1
 8004648:	f8cd 800c 	str.w	r8, [sp, #12]
 800464c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80047f8 <_vfiprintf_r+0x21c>
 8004650:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004654:	4623      	mov	r3, r4
 8004656:	469a      	mov	sl, r3
 8004658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800465c:	b10a      	cbz	r2, 8004662 <_vfiprintf_r+0x86>
 800465e:	2a25      	cmp	r2, #37	@ 0x25
 8004660:	d1f9      	bne.n	8004656 <_vfiprintf_r+0x7a>
 8004662:	ebba 0b04 	subs.w	fp, sl, r4
 8004666:	d00b      	beq.n	8004680 <_vfiprintf_r+0xa4>
 8004668:	465b      	mov	r3, fp
 800466a:	4622      	mov	r2, r4
 800466c:	4629      	mov	r1, r5
 800466e:	4630      	mov	r0, r6
 8004670:	f7ff ffa2 	bl	80045b8 <__sfputs_r>
 8004674:	3001      	adds	r0, #1
 8004676:	f000 80a7 	beq.w	80047c8 <_vfiprintf_r+0x1ec>
 800467a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800467c:	445a      	add	r2, fp
 800467e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004680:	f89a 3000 	ldrb.w	r3, [sl]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 809f 	beq.w	80047c8 <_vfiprintf_r+0x1ec>
 800468a:	2300      	movs	r3, #0
 800468c:	f04f 32ff 	mov.w	r2, #4294967295
 8004690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004694:	f10a 0a01 	add.w	sl, sl, #1
 8004698:	9304      	str	r3, [sp, #16]
 800469a:	9307      	str	r3, [sp, #28]
 800469c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80046a2:	4654      	mov	r4, sl
 80046a4:	2205      	movs	r2, #5
 80046a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046aa:	4853      	ldr	r0, [pc, #332]	@ (80047f8 <_vfiprintf_r+0x21c>)
 80046ac:	f7fe fb5b 	bl	8002d66 <memchr>
 80046b0:	9a04      	ldr	r2, [sp, #16]
 80046b2:	b9d8      	cbnz	r0, 80046ec <_vfiprintf_r+0x110>
 80046b4:	06d1      	lsls	r1, r2, #27
 80046b6:	bf44      	itt	mi
 80046b8:	2320      	movmi	r3, #32
 80046ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046be:	0713      	lsls	r3, r2, #28
 80046c0:	bf44      	itt	mi
 80046c2:	232b      	movmi	r3, #43	@ 0x2b
 80046c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046c8:	f89a 3000 	ldrb.w	r3, [sl]
 80046cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80046ce:	d015      	beq.n	80046fc <_vfiprintf_r+0x120>
 80046d0:	4654      	mov	r4, sl
 80046d2:	2000      	movs	r0, #0
 80046d4:	f04f 0c0a 	mov.w	ip, #10
 80046d8:	9a07      	ldr	r2, [sp, #28]
 80046da:	4621      	mov	r1, r4
 80046dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046e0:	3b30      	subs	r3, #48	@ 0x30
 80046e2:	2b09      	cmp	r3, #9
 80046e4:	d94b      	bls.n	800477e <_vfiprintf_r+0x1a2>
 80046e6:	b1b0      	cbz	r0, 8004716 <_vfiprintf_r+0x13a>
 80046e8:	9207      	str	r2, [sp, #28]
 80046ea:	e014      	b.n	8004716 <_vfiprintf_r+0x13a>
 80046ec:	eba0 0308 	sub.w	r3, r0, r8
 80046f0:	fa09 f303 	lsl.w	r3, r9, r3
 80046f4:	4313      	orrs	r3, r2
 80046f6:	46a2      	mov	sl, r4
 80046f8:	9304      	str	r3, [sp, #16]
 80046fa:	e7d2      	b.n	80046a2 <_vfiprintf_r+0xc6>
 80046fc:	9b03      	ldr	r3, [sp, #12]
 80046fe:	1d19      	adds	r1, r3, #4
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	9103      	str	r1, [sp, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	bfbb      	ittet	lt
 8004708:	425b      	neglt	r3, r3
 800470a:	f042 0202 	orrlt.w	r2, r2, #2
 800470e:	9307      	strge	r3, [sp, #28]
 8004710:	9307      	strlt	r3, [sp, #28]
 8004712:	bfb8      	it	lt
 8004714:	9204      	strlt	r2, [sp, #16]
 8004716:	7823      	ldrb	r3, [r4, #0]
 8004718:	2b2e      	cmp	r3, #46	@ 0x2e
 800471a:	d10a      	bne.n	8004732 <_vfiprintf_r+0x156>
 800471c:	7863      	ldrb	r3, [r4, #1]
 800471e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004720:	d132      	bne.n	8004788 <_vfiprintf_r+0x1ac>
 8004722:	9b03      	ldr	r3, [sp, #12]
 8004724:	3402      	adds	r4, #2
 8004726:	1d1a      	adds	r2, r3, #4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	9203      	str	r2, [sp, #12]
 800472c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004730:	9305      	str	r3, [sp, #20]
 8004732:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80047fc <_vfiprintf_r+0x220>
 8004736:	2203      	movs	r2, #3
 8004738:	4650      	mov	r0, sl
 800473a:	7821      	ldrb	r1, [r4, #0]
 800473c:	f7fe fb13 	bl	8002d66 <memchr>
 8004740:	b138      	cbz	r0, 8004752 <_vfiprintf_r+0x176>
 8004742:	2240      	movs	r2, #64	@ 0x40
 8004744:	9b04      	ldr	r3, [sp, #16]
 8004746:	eba0 000a 	sub.w	r0, r0, sl
 800474a:	4082      	lsls	r2, r0
 800474c:	4313      	orrs	r3, r2
 800474e:	3401      	adds	r4, #1
 8004750:	9304      	str	r3, [sp, #16]
 8004752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004756:	2206      	movs	r2, #6
 8004758:	4829      	ldr	r0, [pc, #164]	@ (8004800 <_vfiprintf_r+0x224>)
 800475a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800475e:	f7fe fb02 	bl	8002d66 <memchr>
 8004762:	2800      	cmp	r0, #0
 8004764:	d03f      	beq.n	80047e6 <_vfiprintf_r+0x20a>
 8004766:	4b27      	ldr	r3, [pc, #156]	@ (8004804 <_vfiprintf_r+0x228>)
 8004768:	bb1b      	cbnz	r3, 80047b2 <_vfiprintf_r+0x1d6>
 800476a:	9b03      	ldr	r3, [sp, #12]
 800476c:	3307      	adds	r3, #7
 800476e:	f023 0307 	bic.w	r3, r3, #7
 8004772:	3308      	adds	r3, #8
 8004774:	9303      	str	r3, [sp, #12]
 8004776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004778:	443b      	add	r3, r7
 800477a:	9309      	str	r3, [sp, #36]	@ 0x24
 800477c:	e76a      	b.n	8004654 <_vfiprintf_r+0x78>
 800477e:	460c      	mov	r4, r1
 8004780:	2001      	movs	r0, #1
 8004782:	fb0c 3202 	mla	r2, ip, r2, r3
 8004786:	e7a8      	b.n	80046da <_vfiprintf_r+0xfe>
 8004788:	2300      	movs	r3, #0
 800478a:	f04f 0c0a 	mov.w	ip, #10
 800478e:	4619      	mov	r1, r3
 8004790:	3401      	adds	r4, #1
 8004792:	9305      	str	r3, [sp, #20]
 8004794:	4620      	mov	r0, r4
 8004796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800479a:	3a30      	subs	r2, #48	@ 0x30
 800479c:	2a09      	cmp	r2, #9
 800479e:	d903      	bls.n	80047a8 <_vfiprintf_r+0x1cc>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0c6      	beq.n	8004732 <_vfiprintf_r+0x156>
 80047a4:	9105      	str	r1, [sp, #20]
 80047a6:	e7c4      	b.n	8004732 <_vfiprintf_r+0x156>
 80047a8:	4604      	mov	r4, r0
 80047aa:	2301      	movs	r3, #1
 80047ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80047b0:	e7f0      	b.n	8004794 <_vfiprintf_r+0x1b8>
 80047b2:	ab03      	add	r3, sp, #12
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	462a      	mov	r2, r5
 80047b8:	4630      	mov	r0, r6
 80047ba:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <_vfiprintf_r+0x22c>)
 80047bc:	a904      	add	r1, sp, #16
 80047be:	f7fd fd91 	bl	80022e4 <_printf_float>
 80047c2:	4607      	mov	r7, r0
 80047c4:	1c78      	adds	r0, r7, #1
 80047c6:	d1d6      	bne.n	8004776 <_vfiprintf_r+0x19a>
 80047c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047ca:	07d9      	lsls	r1, r3, #31
 80047cc:	d405      	bmi.n	80047da <_vfiprintf_r+0x1fe>
 80047ce:	89ab      	ldrh	r3, [r5, #12]
 80047d0:	059a      	lsls	r2, r3, #22
 80047d2:	d402      	bmi.n	80047da <_vfiprintf_r+0x1fe>
 80047d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047d6:	f7fe fac5 	bl	8002d64 <__retarget_lock_release_recursive>
 80047da:	89ab      	ldrh	r3, [r5, #12]
 80047dc:	065b      	lsls	r3, r3, #25
 80047de:	f53f af1f 	bmi.w	8004620 <_vfiprintf_r+0x44>
 80047e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047e4:	e71e      	b.n	8004624 <_vfiprintf_r+0x48>
 80047e6:	ab03      	add	r3, sp, #12
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	462a      	mov	r2, r5
 80047ec:	4630      	mov	r0, r6
 80047ee:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <_vfiprintf_r+0x22c>)
 80047f0:	a904      	add	r1, sp, #16
 80047f2:	f7fe f815 	bl	8002820 <_printf_i>
 80047f6:	e7e4      	b.n	80047c2 <_vfiprintf_r+0x1e6>
 80047f8:	08004c7a 	.word	0x08004c7a
 80047fc:	08004c80 	.word	0x08004c80
 8004800:	08004c84 	.word	0x08004c84
 8004804:	080022e5 	.word	0x080022e5
 8004808:	080045b9 	.word	0x080045b9

0800480c <__swbuf_r>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	460e      	mov	r6, r1
 8004810:	4614      	mov	r4, r2
 8004812:	4605      	mov	r5, r0
 8004814:	b118      	cbz	r0, 800481e <__swbuf_r+0x12>
 8004816:	6a03      	ldr	r3, [r0, #32]
 8004818:	b90b      	cbnz	r3, 800481e <__swbuf_r+0x12>
 800481a:	f7fe f9ab 	bl	8002b74 <__sinit>
 800481e:	69a3      	ldr	r3, [r4, #24]
 8004820:	60a3      	str	r3, [r4, #8]
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	071a      	lsls	r2, r3, #28
 8004826:	d501      	bpl.n	800482c <__swbuf_r+0x20>
 8004828:	6923      	ldr	r3, [r4, #16]
 800482a:	b943      	cbnz	r3, 800483e <__swbuf_r+0x32>
 800482c:	4621      	mov	r1, r4
 800482e:	4628      	mov	r0, r5
 8004830:	f000 f82a 	bl	8004888 <__swsetup_r>
 8004834:	b118      	cbz	r0, 800483e <__swbuf_r+0x32>
 8004836:	f04f 37ff 	mov.w	r7, #4294967295
 800483a:	4638      	mov	r0, r7
 800483c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	6922      	ldr	r2, [r4, #16]
 8004842:	b2f6      	uxtb	r6, r6
 8004844:	1a98      	subs	r0, r3, r2
 8004846:	6963      	ldr	r3, [r4, #20]
 8004848:	4637      	mov	r7, r6
 800484a:	4283      	cmp	r3, r0
 800484c:	dc05      	bgt.n	800485a <__swbuf_r+0x4e>
 800484e:	4621      	mov	r1, r4
 8004850:	4628      	mov	r0, r5
 8004852:	f7ff fdf9 	bl	8004448 <_fflush_r>
 8004856:	2800      	cmp	r0, #0
 8004858:	d1ed      	bne.n	8004836 <__swbuf_r+0x2a>
 800485a:	68a3      	ldr	r3, [r4, #8]
 800485c:	3b01      	subs	r3, #1
 800485e:	60a3      	str	r3, [r4, #8]
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	6022      	str	r2, [r4, #0]
 8004866:	701e      	strb	r6, [r3, #0]
 8004868:	6962      	ldr	r2, [r4, #20]
 800486a:	1c43      	adds	r3, r0, #1
 800486c:	429a      	cmp	r2, r3
 800486e:	d004      	beq.n	800487a <__swbuf_r+0x6e>
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	07db      	lsls	r3, r3, #31
 8004874:	d5e1      	bpl.n	800483a <__swbuf_r+0x2e>
 8004876:	2e0a      	cmp	r6, #10
 8004878:	d1df      	bne.n	800483a <__swbuf_r+0x2e>
 800487a:	4621      	mov	r1, r4
 800487c:	4628      	mov	r0, r5
 800487e:	f7ff fde3 	bl	8004448 <_fflush_r>
 8004882:	2800      	cmp	r0, #0
 8004884:	d0d9      	beq.n	800483a <__swbuf_r+0x2e>
 8004886:	e7d6      	b.n	8004836 <__swbuf_r+0x2a>

08004888 <__swsetup_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	4b29      	ldr	r3, [pc, #164]	@ (8004930 <__swsetup_r+0xa8>)
 800488c:	4605      	mov	r5, r0
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	460c      	mov	r4, r1
 8004892:	b118      	cbz	r0, 800489c <__swsetup_r+0x14>
 8004894:	6a03      	ldr	r3, [r0, #32]
 8004896:	b90b      	cbnz	r3, 800489c <__swsetup_r+0x14>
 8004898:	f7fe f96c 	bl	8002b74 <__sinit>
 800489c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a0:	0719      	lsls	r1, r3, #28
 80048a2:	d422      	bmi.n	80048ea <__swsetup_r+0x62>
 80048a4:	06da      	lsls	r2, r3, #27
 80048a6:	d407      	bmi.n	80048b8 <__swsetup_r+0x30>
 80048a8:	2209      	movs	r2, #9
 80048aa:	602a      	str	r2, [r5, #0]
 80048ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295
 80048b4:	81a3      	strh	r3, [r4, #12]
 80048b6:	e033      	b.n	8004920 <__swsetup_r+0x98>
 80048b8:	0758      	lsls	r0, r3, #29
 80048ba:	d512      	bpl.n	80048e2 <__swsetup_r+0x5a>
 80048bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048be:	b141      	cbz	r1, 80048d2 <__swsetup_r+0x4a>
 80048c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048c4:	4299      	cmp	r1, r3
 80048c6:	d002      	beq.n	80048ce <__swsetup_r+0x46>
 80048c8:	4628      	mov	r0, r5
 80048ca:	f7ff f8c5 	bl	8003a58 <_free_r>
 80048ce:	2300      	movs	r3, #0
 80048d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80048d2:	89a3      	ldrh	r3, [r4, #12]
 80048d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80048d8:	81a3      	strh	r3, [r4, #12]
 80048da:	2300      	movs	r3, #0
 80048dc:	6063      	str	r3, [r4, #4]
 80048de:	6923      	ldr	r3, [r4, #16]
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	f043 0308 	orr.w	r3, r3, #8
 80048e8:	81a3      	strh	r3, [r4, #12]
 80048ea:	6923      	ldr	r3, [r4, #16]
 80048ec:	b94b      	cbnz	r3, 8004902 <__swsetup_r+0x7a>
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80048f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048f8:	d003      	beq.n	8004902 <__swsetup_r+0x7a>
 80048fa:	4621      	mov	r1, r4
 80048fc:	4628      	mov	r0, r5
 80048fe:	f000 f882 	bl	8004a06 <__smakebuf_r>
 8004902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004906:	f013 0201 	ands.w	r2, r3, #1
 800490a:	d00a      	beq.n	8004922 <__swsetup_r+0x9a>
 800490c:	2200      	movs	r2, #0
 800490e:	60a2      	str	r2, [r4, #8]
 8004910:	6962      	ldr	r2, [r4, #20]
 8004912:	4252      	negs	r2, r2
 8004914:	61a2      	str	r2, [r4, #24]
 8004916:	6922      	ldr	r2, [r4, #16]
 8004918:	b942      	cbnz	r2, 800492c <__swsetup_r+0xa4>
 800491a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800491e:	d1c5      	bne.n	80048ac <__swsetup_r+0x24>
 8004920:	bd38      	pop	{r3, r4, r5, pc}
 8004922:	0799      	lsls	r1, r3, #30
 8004924:	bf58      	it	pl
 8004926:	6962      	ldrpl	r2, [r4, #20]
 8004928:	60a2      	str	r2, [r4, #8]
 800492a:	e7f4      	b.n	8004916 <__swsetup_r+0x8e>
 800492c:	2000      	movs	r0, #0
 800492e:	e7f7      	b.n	8004920 <__swsetup_r+0x98>
 8004930:	20000018 	.word	0x20000018

08004934 <_raise_r>:
 8004934:	291f      	cmp	r1, #31
 8004936:	b538      	push	{r3, r4, r5, lr}
 8004938:	4605      	mov	r5, r0
 800493a:	460c      	mov	r4, r1
 800493c:	d904      	bls.n	8004948 <_raise_r+0x14>
 800493e:	2316      	movs	r3, #22
 8004940:	6003      	str	r3, [r0, #0]
 8004942:	f04f 30ff 	mov.w	r0, #4294967295
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800494a:	b112      	cbz	r2, 8004952 <_raise_r+0x1e>
 800494c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004950:	b94b      	cbnz	r3, 8004966 <_raise_r+0x32>
 8004952:	4628      	mov	r0, r5
 8004954:	f000 f830 	bl	80049b8 <_getpid_r>
 8004958:	4622      	mov	r2, r4
 800495a:	4601      	mov	r1, r0
 800495c:	4628      	mov	r0, r5
 800495e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004962:	f000 b817 	b.w	8004994 <_kill_r>
 8004966:	2b01      	cmp	r3, #1
 8004968:	d00a      	beq.n	8004980 <_raise_r+0x4c>
 800496a:	1c59      	adds	r1, r3, #1
 800496c:	d103      	bne.n	8004976 <_raise_r+0x42>
 800496e:	2316      	movs	r3, #22
 8004970:	6003      	str	r3, [r0, #0]
 8004972:	2001      	movs	r0, #1
 8004974:	e7e7      	b.n	8004946 <_raise_r+0x12>
 8004976:	2100      	movs	r1, #0
 8004978:	4620      	mov	r0, r4
 800497a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800497e:	4798      	blx	r3
 8004980:	2000      	movs	r0, #0
 8004982:	e7e0      	b.n	8004946 <_raise_r+0x12>

08004984 <raise>:
 8004984:	4b02      	ldr	r3, [pc, #8]	@ (8004990 <raise+0xc>)
 8004986:	4601      	mov	r1, r0
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	f7ff bfd3 	b.w	8004934 <_raise_r>
 800498e:	bf00      	nop
 8004990:	20000018 	.word	0x20000018

08004994 <_kill_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	2300      	movs	r3, #0
 8004998:	4d06      	ldr	r5, [pc, #24]	@ (80049b4 <_kill_r+0x20>)
 800499a:	4604      	mov	r4, r0
 800499c:	4608      	mov	r0, r1
 800499e:	4611      	mov	r1, r2
 80049a0:	602b      	str	r3, [r5, #0]
 80049a2:	f7fc f9f8 	bl	8000d96 <_kill>
 80049a6:	1c43      	adds	r3, r0, #1
 80049a8:	d102      	bne.n	80049b0 <_kill_r+0x1c>
 80049aa:	682b      	ldr	r3, [r5, #0]
 80049ac:	b103      	cbz	r3, 80049b0 <_kill_r+0x1c>
 80049ae:	6023      	str	r3, [r4, #0]
 80049b0:	bd38      	pop	{r3, r4, r5, pc}
 80049b2:	bf00      	nop
 80049b4:	2000037c 	.word	0x2000037c

080049b8 <_getpid_r>:
 80049b8:	f7fc b9e6 	b.w	8000d88 <_getpid>

080049bc <__swhatbuf_r>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	460c      	mov	r4, r1
 80049c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049c4:	4615      	mov	r5, r2
 80049c6:	2900      	cmp	r1, #0
 80049c8:	461e      	mov	r6, r3
 80049ca:	b096      	sub	sp, #88	@ 0x58
 80049cc:	da0c      	bge.n	80049e8 <__swhatbuf_r+0x2c>
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	2100      	movs	r1, #0
 80049d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80049d6:	bf14      	ite	ne
 80049d8:	2340      	movne	r3, #64	@ 0x40
 80049da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80049de:	2000      	movs	r0, #0
 80049e0:	6031      	str	r1, [r6, #0]
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	b016      	add	sp, #88	@ 0x58
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
 80049e8:	466a      	mov	r2, sp
 80049ea:	f000 f849 	bl	8004a80 <_fstat_r>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	dbed      	blt.n	80049ce <__swhatbuf_r+0x12>
 80049f2:	9901      	ldr	r1, [sp, #4]
 80049f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80049f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80049fc:	4259      	negs	r1, r3
 80049fe:	4159      	adcs	r1, r3
 8004a00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a04:	e7eb      	b.n	80049de <__swhatbuf_r+0x22>

08004a06 <__smakebuf_r>:
 8004a06:	898b      	ldrh	r3, [r1, #12]
 8004a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a0a:	079d      	lsls	r5, r3, #30
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	460c      	mov	r4, r1
 8004a10:	d507      	bpl.n	8004a22 <__smakebuf_r+0x1c>
 8004a12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	6123      	str	r3, [r4, #16]
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	6163      	str	r3, [r4, #20]
 8004a1e:	b003      	add	sp, #12
 8004a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a22:	466a      	mov	r2, sp
 8004a24:	ab01      	add	r3, sp, #4
 8004a26:	f7ff ffc9 	bl	80049bc <__swhatbuf_r>
 8004a2a:	9f00      	ldr	r7, [sp, #0]
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	4639      	mov	r1, r7
 8004a30:	4630      	mov	r0, r6
 8004a32:	f7ff f883 	bl	8003b3c <_malloc_r>
 8004a36:	b948      	cbnz	r0, 8004a4c <__smakebuf_r+0x46>
 8004a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a3c:	059a      	lsls	r2, r3, #22
 8004a3e:	d4ee      	bmi.n	8004a1e <__smakebuf_r+0x18>
 8004a40:	f023 0303 	bic.w	r3, r3, #3
 8004a44:	f043 0302 	orr.w	r3, r3, #2
 8004a48:	81a3      	strh	r3, [r4, #12]
 8004a4a:	e7e2      	b.n	8004a12 <__smakebuf_r+0xc>
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a56:	81a3      	strh	r3, [r4, #12]
 8004a58:	9b01      	ldr	r3, [sp, #4]
 8004a5a:	6020      	str	r0, [r4, #0]
 8004a5c:	b15b      	cbz	r3, 8004a76 <__smakebuf_r+0x70>
 8004a5e:	4630      	mov	r0, r6
 8004a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a64:	f000 f81e 	bl	8004aa4 <_isatty_r>
 8004a68:	b128      	cbz	r0, 8004a76 <__smakebuf_r+0x70>
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	f023 0303 	bic.w	r3, r3, #3
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	81a3      	strh	r3, [r4, #12]
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	431d      	orrs	r5, r3
 8004a7a:	81a5      	strh	r5, [r4, #12]
 8004a7c:	e7cf      	b.n	8004a1e <__smakebuf_r+0x18>
	...

08004a80 <_fstat_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	2300      	movs	r3, #0
 8004a84:	4d06      	ldr	r5, [pc, #24]	@ (8004aa0 <_fstat_r+0x20>)
 8004a86:	4604      	mov	r4, r0
 8004a88:	4608      	mov	r0, r1
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	602b      	str	r3, [r5, #0]
 8004a8e:	f7fc f9e1 	bl	8000e54 <_fstat>
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	d102      	bne.n	8004a9c <_fstat_r+0x1c>
 8004a96:	682b      	ldr	r3, [r5, #0]
 8004a98:	b103      	cbz	r3, 8004a9c <_fstat_r+0x1c>
 8004a9a:	6023      	str	r3, [r4, #0]
 8004a9c:	bd38      	pop	{r3, r4, r5, pc}
 8004a9e:	bf00      	nop
 8004aa0:	2000037c 	.word	0x2000037c

08004aa4 <_isatty_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	4d05      	ldr	r5, [pc, #20]	@ (8004ac0 <_isatty_r+0x1c>)
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4608      	mov	r0, r1
 8004aae:	602b      	str	r3, [r5, #0]
 8004ab0:	f7fc f9df 	bl	8000e72 <_isatty>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d102      	bne.n	8004abe <_isatty_r+0x1a>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	b103      	cbz	r3, 8004abe <_isatty_r+0x1a>
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	bd38      	pop	{r3, r4, r5, pc}
 8004ac0:	2000037c 	.word	0x2000037c

08004ac4 <_init>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	bf00      	nop
 8004ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aca:	bc08      	pop	{r3}
 8004acc:	469e      	mov	lr, r3
 8004ace:	4770      	bx	lr

08004ad0 <_fini>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	bf00      	nop
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr
