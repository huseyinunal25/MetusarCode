
MPU_9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d58  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004e68  08004e68  00005e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f68  08004f68  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004f68  08004f68  00005f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f70  08004f70  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f70  08004f70  00005f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f74  08004f74  00005f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004f78  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  08004fd4  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004fd4  000062b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf42  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca4  00000000  00000000  00012fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00014c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a80  00000000  00000000  000159d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c4c  00000000  00000000  00016450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4c9  00000000  00000000  0002e09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0ed  00000000  00000000  0003c565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8652  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004178  00000000  00000000  000c8698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000cc810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e50 	.word	0x08004e50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08004e50 	.word	0x08004e50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	@ 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d46:	2afd      	cmp	r2, #253	@ 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	@ 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop
 8000f94:	0000      	movs	r0, r0
	...

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f9a:	b0a3      	sub	sp, #140	@ 0x8c
 8000f9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9e:	f000 fc35 	bl	800180c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 f92f 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f000 fa25 	bl	80013f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000faa:	f000 f967 	bl	800127c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000fae:	f000 f9f7 	bl	80013a0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000fb2:	f000 f999 	bl	80012e8 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(my_timer){
 8000fb6:	4b8e      	ldr	r3, [pc, #568]	@ (80011f0 <main+0x258>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0fa      	beq.n	8000fb6 <main+0x1e>
		  mpu9250_veri(59, imu_data, sizeof(imu_data));
 8000fc0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000fc4:	220e      	movs	r2, #14
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	203b      	movs	r0, #59	@ 0x3b
 8000fca:	f000 fa67 	bl	800149c <mpu9250_veri>
		  accel_data_x = ((int16_t)imu_data[0]<<8) + imu_data[1]; //shift 8 bits ve bir sonraki byte'ı ekle
 8000fce:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8000fda:	4413      	add	r3, r2
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		  accel_data_y = ((int16_t)imu_data[2]<<8) + imu_data[3]; // y axis
 8000fe2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8000fee:	4413      	add	r3, r2
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		  accel_data_z = ((int16_t)imu_data[4]<<8) + imu_data[5]; // z axis
 8000ff6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001002:	4413      	add	r3, r2
 8001004:	b29b      	uxth	r3, r3
 8001006:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

		  mpu9250_veri(67, imu_data_2, sizeof(imu_data_2));
 800100a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800100e:	220e      	movs	r2, #14
 8001010:	4619      	mov	r1, r3
 8001012:	2043      	movs	r0, #67	@ 0x43
 8001014:	f000 fa42 	bl	800149c <mpu9250_veri>
		  gyro_data_x = ((int16_t)imu_data_2[0]<<8) + imu_data_2[1]; //shift 8 bits ve bir sonraki byte'ı ekle
 8001018:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b29b      	uxth	r3, r3
 8001020:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8001024:	4413      	add	r3, r2
 8001026:	b29b      	uxth	r3, r3
 8001028:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
		  gyro_data_y = ((int16_t)imu_data_2[2]<<8) + imu_data_2[3]; // y axis
 800102c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b29b      	uxth	r3, r3
 8001034:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001038:	4413      	add	r3, r2
 800103a:	b29b      	uxth	r3, r3
 800103c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		  gyro_data_z = ((int16_t)imu_data_2[4]<<8) + imu_data_2[5]; // z axis
 8001040:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b29b      	uxth	r3, r3
 8001048:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800104c:	4413      	add	r3, r2
 800104e:	b29b      	uxth	r3, r3
 8001050:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
		  my_timer = 0;
 8001054:	4b66      	ldr	r3, [pc, #408]	@ (80011f0 <main+0x258>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]

		  accel_x = accel_data_x/ 16384.0f;
 800105a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fdf4 	bl	8000c4c <__aeabi_i2f>
 8001064:	4603      	mov	r3, r0
 8001066:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fef6 	bl	8000e5c <__aeabi_fdiv>
 8001070:	4603      	mov	r3, r0
 8001072:	673b      	str	r3, [r7, #112]	@ 0x70
		  accel_y = accel_data_y/ 16384.0f;
 8001074:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fde7 	bl	8000c4c <__aeabi_i2f>
 800107e:	4603      	mov	r3, r0
 8001080:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fee9 	bl	8000e5c <__aeabi_fdiv>
 800108a:	4603      	mov	r3, r0
 800108c:	66fb      	str	r3, [r7, #108]	@ 0x6c
		  accel_z = accel_data_z/ 16384.0f;
 800108e:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fdda 	bl	8000c4c <__aeabi_i2f>
 8001098:	4603      	mov	r3, r0
 800109a:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fedc 	bl	8000e5c <__aeabi_fdiv>
 80010a4:	4603      	mov	r3, r0
 80010a6:	66bb      	str	r3, [r7, #104]	@ 0x68

		  theta_roll = atan2(accel_y , sqrt(accel_z*accel_z + accel_x*accel_x))*(180/3.142);
 80010a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80010aa:	f7ff f9bd 	bl	8000428 <__aeabi_f2d>
 80010ae:	4604      	mov	r4, r0
 80010b0:	460d      	mov	r5, r1
 80010b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80010b4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80010b6:	f7ff fe1d 	bl	8000cf4 <__aeabi_fmul>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461e      	mov	r6, r3
 80010be:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80010c0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80010c2:	f7ff fe17 	bl	8000cf4 <__aeabi_fmul>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4619      	mov	r1, r3
 80010ca:	4630      	mov	r0, r6
 80010cc:	f7ff fd0a 	bl	8000ae4 <__addsf3>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f9a8 	bl	8000428 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f003 fb56 	bl	8004790 <sqrt>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4620      	mov	r0, r4
 80010ea:	4629      	mov	r1, r5
 80010ec:	f003 fb4e 	bl	800478c <atan2>
 80010f0:	a33d      	add	r3, pc, #244	@ (adr r3, 80011e8 <main+0x250>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff f9ef 	bl	80004d8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fc99 	bl	8000a38 <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	667b      	str	r3, [r7, #100]	@ 0x64
		  theta_pitch = atan2(-accel_x , sqrt(accel_z*accel_z + accel_y*accel_y))*(180/3.142);
 800110a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800110c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f989 	bl	8000428 <__aeabi_f2d>
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800111c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800111e:	f7ff fde9 	bl	8000cf4 <__aeabi_fmul>
 8001122:	4603      	mov	r3, r0
 8001124:	461e      	mov	r6, r3
 8001126:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001128:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800112a:	f7ff fde3 	bl	8000cf4 <__aeabi_fmul>
 800112e:	4603      	mov	r3, r0
 8001130:	4619      	mov	r1, r3
 8001132:	4630      	mov	r0, r6
 8001134:	f7ff fcd6 	bl	8000ae4 <__addsf3>
 8001138:	4603      	mov	r3, r0
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f974 	bl	8000428 <__aeabi_f2d>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f003 fb22 	bl	8004790 <sqrt>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	f003 fb1a 	bl	800478c <atan2>
 8001158:	a323      	add	r3, pc, #140	@ (adr r3, 80011e8 <main+0x250>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff f9bb 	bl	80004d8 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fc65 	bl	8000a38 <__aeabi_d2f>
 800116e:	4603      	mov	r3, r0
 8001170:	663b      	str	r3, [r7, #96]	@ 0x60

		  char tx_buffer[64];  // Yazı için buffer
		  char tx_buffer_1[64];  // Yazı için buffer
		  char tx_buffer_2[64];  // Yazı için buffer

		  sprintf(tx_buffer, "accX:%d accY:%d accZ:%d\r", accel_data_x, accel_data_y, accel_data_z);
 8001172:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	@ 0x7e
 8001176:	f9b7 107c 	ldrsh.w	r1, [r7, #124]	@ 0x7c
 800117a:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 800117e:	4638      	mov	r0, r7
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	460b      	mov	r3, r1
 8001184:	491b      	ldr	r1, [pc, #108]	@ (80011f4 <main+0x25c>)
 8001186:	f002 fe51 	bl	8003e2c <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 800118a:	463b      	mov	r3, r7
 800118c:	4618      	mov	r0, r3
 800118e:	f7fe ffdf 	bl	8000150 <strlen>
 8001192:	4603      	mov	r3, r0
 8001194:	b29a      	uxth	r2, r3
 8001196:	4639      	mov	r1, r7
 8001198:	2364      	movs	r3, #100	@ 0x64
 800119a:	4817      	ldr	r0, [pc, #92]	@ (80011f8 <main+0x260>)
 800119c:	f002 fc72 	bl	8003a84 <HAL_UART_Transmit>

		    if((accel_data_x > 11500 || accel_data_x < -11500) ||
 80011a0:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80011a4:	f642 42ec 	movw	r2, #11500	@ 0x2cec
 80011a8:	4293      	cmp	r3, r2
 80011aa:	dc0f      	bgt.n	80011cc <main+0x234>
 80011ac:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80011b0:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <main+0x264>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	db0a      	blt.n	80011cc <main+0x234>
 80011b6:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 80011ba:	f642 42ec 	movw	r2, #11500	@ 0x2cec
 80011be:	4293      	cmp	r3, r2
 80011c0:	dc04      	bgt.n	80011cc <main+0x234>
		       (accel_data_y > 11500 || accel_data_y < -11500)){
 80011c2:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 80011c6:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <main+0x264>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	da05      	bge.n	80011d8 <main+0x240>
		        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // Aktif et
 80011cc:	2201      	movs	r2, #1
 80011ce:	2104      	movs	r1, #4
 80011d0:	480b      	ldr	r0, [pc, #44]	@ (8001200 <main+0x268>)
 80011d2:	f000 fe0f 	bl	8001df4 <HAL_GPIO_WritePin>
 80011d6:	e004      	b.n	80011e2 <main+0x24a>
		    } else {
		        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // Pasif et
 80011d8:	2200      	movs	r2, #0
 80011da:	2104      	movs	r1, #4
 80011dc:	4808      	ldr	r0, [pc, #32]	@ (8001200 <main+0x268>)
 80011de:	f000 fe09 	bl	8001df4 <HAL_GPIO_WritePin>
	  if(my_timer){
 80011e2:	e6e8      	b.n	8000fb6 <main+0x1e>
 80011e4:	f3af 8000 	nop.w
 80011e8:	b298d9b5 	.word	0xb298d9b5
 80011ec:	404ca4e8 	.word	0x404ca4e8
 80011f0:	20000160 	.word	0x20000160
 80011f4:	08004e68 	.word	0x08004e68
 80011f8:	20000118 	.word	0x20000118
 80011fc:	ffffd314 	.word	0xffffd314
 8001200:	40010800 	.word	0x40010800

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b090      	sub	sp, #64	@ 0x40
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	2228      	movs	r2, #40	@ 0x28
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f002 fe2c 	bl	8003e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122a:	2301      	movs	r3, #1
 800122c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122e:	2310      	movs	r3, #16
 8001230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001232:	2300      	movs	r3, #0
 8001234:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001236:	f107 0318 	add.w	r3, r7, #24
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fdf2 	bl	8001e24 <HAL_RCC_OscConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001246:	f000 f957 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124a:	230f      	movs	r3, #15
 800124c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f001 f860 	bl	8002328 <HAL_RCC_ClockConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800126e:	f000 f943 	bl	80014f8 <Error_Handler>
  }
}
 8001272:	bf00      	nop
 8001274:	3740      	adds	r7, #64	@ 0x40
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001280:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <MX_SPI1_Init+0x64>)
 8001282:	4a18      	ldr	r2, [pc, #96]	@ (80012e4 <MX_SPI1_Init+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001286:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <MX_SPI1_Init+0x64>)
 8001288:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800128c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800128e:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <MX_SPI1_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <MX_SPI1_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <MX_SPI1_Init+0x64>)
 800129c:	2202      	movs	r2, #2
 800129e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012b0:	2220      	movs	r2, #32
 80012b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012c8:	220a      	movs	r2, #10
 80012ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <MX_SPI1_Init+0x64>)
 80012ce:	f001 f9b9 	bl	8002644 <HAL_SPI_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012d8:	f000 f90e 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000078 	.word	0x20000078
 80012e4:	40013000 	.word	0x40013000

080012e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	201c      	movs	r0, #28
 80012f4:	f000 fbc3 	bl	8001a7e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012f8:	201c      	movs	r0, #28
 80012fa:	f000 fbdc 	bl	8001ab6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001314:	4b21      	ldr	r3, [pc, #132]	@ (800139c <MX_TIM2_Init+0xb4>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800131c:	4b1f      	ldr	r3, [pc, #124]	@ (800139c <MX_TIM2_Init+0xb4>)
 800131e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <MX_TIM2_Init+0xb4>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <MX_TIM2_Init+0xb4>)
 800132c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001330:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <MX_TIM2_Init+0xb4>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b18      	ldr	r3, [pc, #96]	@ (800139c <MX_TIM2_Init+0xb4>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800133e:	4817      	ldr	r0, [pc, #92]	@ (800139c <MX_TIM2_Init+0xb4>)
 8001340:	f001 ff15 	bl	800316e <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800134a:	f000 f8d5 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001352:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	4619      	mov	r1, r3
 800135a:	4810      	ldr	r0, [pc, #64]	@ (800139c <MX_TIM2_Init+0xb4>)
 800135c:	f002 f8e2 	bl	8003524 <HAL_TIM_ConfigClockSource>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001366:	f000 f8c7 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	4619      	mov	r1, r3
 8001376:	4809      	ldr	r0, [pc, #36]	@ (800139c <MX_TIM2_Init+0xb4>)
 8001378:	f002 fac4 	bl	8003904 <HAL_TIMEx_MasterConfigSynchronization>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001382:	f000 f8b9 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001386:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_TIM2_Init+0xb4>)
 8001388:	f001 ff8a 	bl	80032a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 800138c:	4803      	ldr	r0, [pc, #12]	@ (800139c <MX_TIM2_Init+0xb4>)
 800138e:	f001 ff3d 	bl	800320c <HAL_TIM_Base_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200000d0 	.word	0x200000d0

080013a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_USART1_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	@ (80013f0 <MX_USART1_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <MX_USART1_UART_Init+0x4c>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_USART1_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_USART1_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_USART1_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_USART1_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <MX_USART1_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_USART1_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_USART1_UART_Init+0x4c>)
 80013d8:	f002 fb04 	bl	80039e4 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013e2:	f000 f889 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000118 	.word	0x20000118
 80013f0:	40013800 	.word	0x40013800

080013f4 <MX_GPIO_Init>:
  * @param None
  * @retval None
  */

static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_GPIO_Init+0x78>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a17      	ldr	r2, [pc, #92]	@ (800146c <MX_GPIO_Init+0x78>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b15      	ldr	r3, [pc, #84]	@ (800146c <MX_GPIO_Init+0x78>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2110      	movs	r1, #16
 8001424:	4812      	ldr	r0, [pc, #72]	@ (8001470 <MX_GPIO_Init+0x7c>)
 8001426:	f000 fce5 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800142a:	2310      	movs	r3, #16
 800142c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2302      	movs	r3, #2
 8001438:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	4619      	mov	r1, r3
 8001440:	480b      	ldr	r0, [pc, #44]	@ (8001470 <MX_GPIO_Init+0x7c>)
 8001442:	f000 fb53 	bl	8001aec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // Örnek GPIO: PA5 çıkış olarak ayarlanıyor
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001446:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800144a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2302      	movs	r3, #2
 8001456:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4619      	mov	r1, r3
 800145e:	4804      	ldr	r0, [pc, #16]	@ (8001470 <MX_GPIO_Init+0x7c>)
 8001460:	f000 fb44 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	40010800 	.word	0x40010800

08001474 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d102      	bne.n	800148a <HAL_TIM_PeriodElapsedCallback+0x16>
		my_timer = 1;
 8001484:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
	}
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	200000d0 	.word	0x200000d0
 8001498:	20000160 	.word	0x20000160

0800149c <mpu9250_veri>:


void mpu9250_veri(uint8_t reg, uint8_t *data, uint8_t data_length){
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	4613      	mov	r3, r2
 80014aa:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buffer[1];
	tx_buffer[0] = 0x80 | reg;  // Okuma ve adres
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2110      	movs	r1, #16
 80014ba:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <mpu9250_veri+0x54>)
 80014bc:	f000 fc9a 	bl	8001df4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, tx_buffer, 1, 100);               // İlk olarak register adresini gönder
 80014c0:	f107 010c 	add.w	r1, r7, #12
 80014c4:	2364      	movs	r3, #100	@ 0x64
 80014c6:	2201      	movs	r2, #1
 80014c8:	480a      	ldr	r0, [pc, #40]	@ (80014f4 <mpu9250_veri+0x58>)
 80014ca:	f001 f93f 	bl	800274c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, data_length, 100);           // Ardından veri oku
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	2364      	movs	r3, #100	@ 0x64
 80014d4:	6839      	ldr	r1, [r7, #0]
 80014d6:	4807      	ldr	r0, [pc, #28]	@ (80014f4 <mpu9250_veri+0x58>)
 80014d8:	f001 fa7c 	bl	80029d4 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	2110      	movs	r1, #16
 80014e0:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <mpu9250_veri+0x54>)
 80014e2:	f000 fc87 	bl	8001df4 <HAL_GPIO_WritePin>
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40010800 	.word	0x40010800
 80014f4:	20000078 	.word	0x20000078

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <Error_Handler+0x8>

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <HAL_MspInit+0x5c>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a14      	ldr	r2, [pc, #80]	@ (8001560 <HAL_MspInit+0x5c>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <HAL_MspInit+0x5c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <HAL_MspInit+0x5c>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a0e      	ldr	r2, [pc, #56]	@ (8001560 <HAL_MspInit+0x5c>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <HAL_MspInit+0x5c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800153a:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <HAL_MspInit+0x60>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <HAL_MspInit+0x60>)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000

08001568 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1b      	ldr	r2, [pc, #108]	@ (80015f0 <HAL_SPI_MspInit+0x88>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d12f      	bne.n	80015e8 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001588:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <HAL_SPI_MspInit+0x8c>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a19      	ldr	r2, [pc, #100]	@ (80015f4 <HAL_SPI_MspInit+0x8c>)
 800158e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <HAL_SPI_MspInit+0x8c>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <HAL_SPI_MspInit+0x8c>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a13      	ldr	r2, [pc, #76]	@ (80015f4 <HAL_SPI_MspInit+0x8c>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_SPI_MspInit+0x8c>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015b8:	23a0      	movs	r3, #160	@ 0xa0
 80015ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	480b      	ldr	r0, [pc, #44]	@ (80015f8 <HAL_SPI_MspInit+0x90>)
 80015cc:	f000 fa8e 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d0:	2340      	movs	r3, #64	@ 0x40
 80015d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <HAL_SPI_MspInit+0x90>)
 80015e4:	f000 fa82 	bl	8001aec <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015e8:	bf00      	nop
 80015ea:	3720      	adds	r7, #32
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40013000 	.word	0x40013000
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40010800 	.word	0x40010800

080015fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800160c:	d113      	bne.n	8001636 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <HAL_TIM_Base_MspInit+0x44>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <HAL_TIM_Base_MspInit+0x44>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <HAL_TIM_Base_MspInit+0x44>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	201c      	movs	r0, #28
 800162c:	f000 fa27 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001630:	201c      	movs	r0, #28
 8001632:	f000 fa40 	bl	8001ab6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a1c      	ldr	r2, [pc, #112]	@ (80016d0 <HAL_UART_MspInit+0x8c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d131      	bne.n	80016c8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <HAL_UART_MspInit+0x90>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a1a      	ldr	r2, [pc, #104]	@ (80016d4 <HAL_UART_MspInit+0x90>)
 800166a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <HAL_UART_MspInit+0x90>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167c:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_UART_MspInit+0x90>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <HAL_UART_MspInit+0x90>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	6193      	str	r3, [r2, #24]
 8001688:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_UART_MspInit+0x90>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001694:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001698:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	4619      	mov	r1, r3
 80016a8:	480b      	ldr	r0, [pc, #44]	@ (80016d8 <HAL_UART_MspInit+0x94>)
 80016aa:	f000 fa1f 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	4619      	mov	r1, r3
 80016c2:	4805      	ldr	r0, [pc, #20]	@ (80016d8 <HAL_UART_MspInit+0x94>)
 80016c4:	f000 fa12 	bl	8001aec <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80016c8:	bf00      	nop
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40013800 	.word	0x40013800
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010800 	.word	0x40010800

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <NMI_Handler+0x4>

080016e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <MemManage_Handler+0x4>

080016f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <UsageFault_Handler+0x4>

08001704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172c:	f000 f8b4 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <TIM2_IRQHandler+0x10>)
 800173a:	f001 fe03 	bl	8003344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200000d0 	.word	0x200000d0

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f002 fb82 	bl	8003e80 <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20005000 	.word	0x20005000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	20000164 	.word	0x20000164
 80017b0:	200002b8 	.word	0x200002b8

080017b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c0:	f7ff fff8 	bl	80017b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c4:	480b      	ldr	r0, [pc, #44]	@ (80017f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017c6:	490c      	ldr	r1, [pc, #48]	@ (80017f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017c8:	4a0c      	ldr	r2, [pc, #48]	@ (80017fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a09      	ldr	r2, [pc, #36]	@ (8001800 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017dc:	4c09      	ldr	r4, [pc, #36]	@ (8001804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ea:	f002 fb4f 	bl	8003e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ee:	f7ff fbd3 	bl	8000f98 <main>
  bx lr
 80017f2:	4770      	bx	lr
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017fc:	08004f78 	.word	0x08004f78
  ldr r2, =_sbss
 8001800:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001804:	200002b4 	.word	0x200002b4

08001808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC1_2_IRQHandler>
	...

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <HAL_Init+0x28>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <HAL_Init+0x28>)
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 f923 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001822:	200f      	movs	r0, #15
 8001824:	f000 f808 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001828:	f7ff fe6c 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_InitTick+0x54>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_InitTick+0x58>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f93b 	bl	8001ad2 <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f000 f903 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	@ (8001894 <HAL_InitTick+0x5c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000000 	.word	0x20000000
 8001890:	20000008 	.word	0x20000008
 8001894:	20000004 	.word	0x20000004

08001898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_IncTick+0x1c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_IncTick+0x20>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a03      	ldr	r2, [pc, #12]	@ (80018b8 <HAL_IncTick+0x20>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	20000008 	.word	0x20000008
 80018b8:	20000168 	.word	0x20000168

080018bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b02      	ldr	r3, [pc, #8]	@ (80018cc <HAL_GetTick+0x10>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	20000168 	.word	0x20000168

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4906      	ldr	r1, [pc, #24]	@ (8001968 <__NVIC_EnableIRQ+0x34>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	@ (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	@ (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	@ 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	@ 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f7ff ff90 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff2d 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff42 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff90 	bl	80019c0 <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5f 	bl	800196c <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff35 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b08b      	sub	sp, #44	@ 0x2c
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afe:	e169      	b.n	8001dd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b00:	2201      	movs	r2, #1
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 8158 	bne.w	8001dce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4a9a      	ldr	r2, [pc, #616]	@ (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d05e      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b28:	4a98      	ldr	r2, [pc, #608]	@ (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d875      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b2e:	4a98      	ldr	r2, [pc, #608]	@ (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d058      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b34:	4a96      	ldr	r2, [pc, #600]	@ (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d86f      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b3a:	4a96      	ldr	r2, [pc, #600]	@ (8001d94 <HAL_GPIO_Init+0x2a8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d052      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b40:	4a94      	ldr	r2, [pc, #592]	@ (8001d94 <HAL_GPIO_Init+0x2a8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d869      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b46:	4a94      	ldr	r2, [pc, #592]	@ (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d04c      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b4c:	4a92      	ldr	r2, [pc, #584]	@ (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d863      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b52:	4a92      	ldr	r2, [pc, #584]	@ (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d046      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b58:	4a90      	ldr	r2, [pc, #576]	@ (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d85d      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d82a      	bhi.n	8001bb8 <HAL_GPIO_Init+0xcc>
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d859      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b66:	a201      	add	r2, pc, #4	@ (adr r2, 8001b6c <HAL_GPIO_Init+0x80>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001be7 	.word	0x08001be7
 8001b70:	08001bc1 	.word	0x08001bc1
 8001b74:	08001bd3 	.word	0x08001bd3
 8001b78:	08001c15 	.word	0x08001c15
 8001b7c:	08001c1b 	.word	0x08001c1b
 8001b80:	08001c1b 	.word	0x08001c1b
 8001b84:	08001c1b 	.word	0x08001c1b
 8001b88:	08001c1b 	.word	0x08001c1b
 8001b8c:	08001c1b 	.word	0x08001c1b
 8001b90:	08001c1b 	.word	0x08001c1b
 8001b94:	08001c1b 	.word	0x08001c1b
 8001b98:	08001c1b 	.word	0x08001c1b
 8001b9c:	08001c1b 	.word	0x08001c1b
 8001ba0:	08001c1b 	.word	0x08001c1b
 8001ba4:	08001c1b 	.word	0x08001c1b
 8001ba8:	08001c1b 	.word	0x08001c1b
 8001bac:	08001c1b 	.word	0x08001c1b
 8001bb0:	08001bc9 	.word	0x08001bc9
 8001bb4:	08001bdd 	.word	0x08001bdd
 8001bb8:	4a79      	ldr	r2, [pc, #484]	@ (8001da0 <HAL_GPIO_Init+0x2b4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bbe:	e02c      	b.n	8001c1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e029      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	623b      	str	r3, [r7, #32]
          break;
 8001bd0:	e024      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e01f      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	330c      	adds	r3, #12
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e01a      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	623b      	str	r3, [r7, #32]
          break;
 8001bf2:	e013      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	611a      	str	r2, [r3, #16]
          break;
 8001c06:	e009      	b.n	8001c1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	615a      	str	r2, [r3, #20]
          break;
 8001c12:	e003      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          break;
 8001c1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2bff      	cmp	r3, #255	@ 0xff
 8001c20:	d801      	bhi.n	8001c26 <HAL_GPIO_Init+0x13a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	e001      	b.n	8001c2a <HAL_GPIO_Init+0x13e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2bff      	cmp	r3, #255	@ 0xff
 8001c30:	d802      	bhi.n	8001c38 <HAL_GPIO_Init+0x14c>
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x152>
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	3b08      	subs	r3, #8
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	210f      	movs	r1, #15
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	401a      	ands	r2, r3
 8001c50:	6a39      	ldr	r1, [r7, #32]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80b1 	beq.w	8001dce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a4c      	ldr	r2, [pc, #304]	@ (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b4a      	ldr	r3, [pc, #296]	@ (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c84:	4a48      	ldr	r2, [pc, #288]	@ (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a40      	ldr	r2, [pc, #256]	@ (8001dac <HAL_GPIO_Init+0x2c0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d013      	beq.n	8001cd8 <HAL_GPIO_Init+0x1ec>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8001db0 <HAL_GPIO_Init+0x2c4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_GPIO_Init+0x1e8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3e      	ldr	r2, [pc, #248]	@ (8001db4 <HAL_GPIO_Init+0x2c8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a3d      	ldr	r2, [pc, #244]	@ (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_GPIO_Init+0x1e0>
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001ccc:	2304      	movs	r3, #4
 8001cce:	e004      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e002      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cdc:	f002 0203 	and.w	r2, r2, #3
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	4093      	lsls	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cea:	492f      	ldr	r1, [pc, #188]	@ (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d04:	4b2d      	ldr	r3, [pc, #180]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	492c      	ldr	r1, [pc, #176]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d12:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4928      	ldr	r1, [pc, #160]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d2c:	4b23      	ldr	r3, [pc, #140]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	4922      	ldr	r1, [pc, #136]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60cb      	str	r3, [r1, #12]
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d3a:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	491e      	ldr	r1, [pc, #120]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	4918      	ldr	r1, [pc, #96]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d62:	4b16      	ldr	r3, [pc, #88]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4914      	ldr	r1, [pc, #80]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d021      	beq.n	8001dc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	490e      	ldr	r1, [pc, #56]	@ (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	e021      	b.n	8001dce <HAL_GPIO_Init+0x2e2>
 8001d8a:	bf00      	nop
 8001d8c:	10320000 	.word	0x10320000
 8001d90:	10310000 	.word	0x10310000
 8001d94:	10220000 	.word	0x10220000
 8001d98:	10210000 	.word	0x10210000
 8001d9c:	10120000 	.word	0x10120000
 8001da0:	10110000 	.word	0x10110000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	40010800 	.word	0x40010800
 8001db0:	40010c00 	.word	0x40010c00
 8001db4:	40011000 	.word	0x40011000
 8001db8:	40011400 	.word	0x40011400
 8001dbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <HAL_GPIO_Init+0x304>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	4909      	ldr	r1, [pc, #36]	@ (8001df0 <HAL_GPIO_Init+0x304>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f47f ae8e 	bne.w	8001b00 <HAL_GPIO_Init+0x14>
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	372c      	adds	r7, #44	@ 0x2c
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e10:	e003      	b.n	8001e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	041a      	lsls	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	611a      	str	r2, [r3, #16]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e272      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8087 	beq.w	8001f52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e44:	4b92      	ldr	r3, [pc, #584]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d00c      	beq.n	8001e6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e50:	4b8f      	ldr	r3, [pc, #572]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d112      	bne.n	8001e82 <HAL_RCC_OscConfig+0x5e>
 8001e5c:	4b8c      	ldr	r3, [pc, #560]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e68:	d10b      	bne.n	8001e82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6a:	4b89      	ldr	r3, [pc, #548]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d06c      	beq.n	8001f50 <HAL_RCC_OscConfig+0x12c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d168      	bne.n	8001f50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e24c      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x76>
 8001e8c:	4b80      	ldr	r3, [pc, #512]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a7f      	ldr	r2, [pc, #508]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e02e      	b.n	8001ef8 <HAL_RCC_OscConfig+0xd4>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x98>
 8001ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a7a      	ldr	r2, [pc, #488]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b78      	ldr	r3, [pc, #480]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a77      	ldr	r2, [pc, #476]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e01d      	b.n	8001ef8 <HAL_RCC_OscConfig+0xd4>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xbc>
 8001ec6:	4b72      	ldr	r3, [pc, #456]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a71      	ldr	r2, [pc, #452]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b6f      	ldr	r3, [pc, #444]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e00b      	b.n	8001ef8 <HAL_RCC_OscConfig+0xd4>
 8001ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a6a      	ldr	r2, [pc, #424]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b68      	ldr	r3, [pc, #416]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a67      	ldr	r2, [pc, #412]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fcdc 	bl	80018bc <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fcd8 	bl	80018bc <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	@ 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e200      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0xe4>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fcc8 	bl	80018bc <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff fcc4 	bl	80018bc <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	@ 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e1ec      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	4b53      	ldr	r3, [pc, #332]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x10c>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d063      	beq.n	8002026 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f6a:	4b49      	ldr	r3, [pc, #292]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d11c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x18c>
 8001f76:	4b46      	ldr	r3, [pc, #280]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d116      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	4b43      	ldr	r3, [pc, #268]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_RCC_OscConfig+0x176>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d001      	beq.n	8001f9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e1c0      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4939      	ldr	r1, [pc, #228]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	e03a      	b.n	8002026 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb8:	4b36      	ldr	r3, [pc, #216]	@ (8002094 <HAL_RCC_OscConfig+0x270>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fc7d 	bl	80018bc <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7ff fc79 	bl	80018bc <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e1a1      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4927      	ldr	r1, [pc, #156]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]
 8001ff8:	e015      	b.n	8002026 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffa:	4b26      	ldr	r3, [pc, #152]	@ (8002094 <HAL_RCC_OscConfig+0x270>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff fc5c 	bl	80018bc <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002008:	f7ff fc58 	bl	80018bc <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e180      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	4b1d      	ldr	r3, [pc, #116]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d03a      	beq.n	80020a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d019      	beq.n	800206e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203a:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <HAL_RCC_OscConfig+0x274>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002040:	f7ff fc3c 	bl	80018bc <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002048:	f7ff fc38 	bl	80018bc <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e160      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <HAL_RCC_OscConfig+0x26c>)
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002066:	2001      	movs	r0, #1
 8002068:	f000 face 	bl	8002608 <RCC_Delay>
 800206c:	e01c      	b.n	80020a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206e:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <HAL_RCC_OscConfig+0x274>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7ff fc22 	bl	80018bc <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207a:	e00f      	b.n	800209c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207c:	f7ff fc1e 	bl	80018bc <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d908      	bls.n	800209c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e146      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	42420000 	.word	0x42420000
 8002098:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	4b92      	ldr	r3, [pc, #584]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e9      	bne.n	800207c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80a6 	beq.w	8002202 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ba:	4b8b      	ldr	r3, [pc, #556]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10d      	bne.n	80020e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b88      	ldr	r3, [pc, #544]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a87      	ldr	r2, [pc, #540]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	61d3      	str	r3, [r2, #28]
 80020d2:	4b85      	ldr	r3, [pc, #532]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020de:	2301      	movs	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e2:	4b82      	ldr	r3, [pc, #520]	@ (80022ec <HAL_RCC_OscConfig+0x4c8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d118      	bne.n	8002120 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ee:	4b7f      	ldr	r3, [pc, #508]	@ (80022ec <HAL_RCC_OscConfig+0x4c8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a7e      	ldr	r2, [pc, #504]	@ (80022ec <HAL_RCC_OscConfig+0x4c8>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fa:	f7ff fbdf 	bl	80018bc <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002102:	f7ff fbdb 	bl	80018bc <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b64      	cmp	r3, #100	@ 0x64
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e103      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	4b75      	ldr	r3, [pc, #468]	@ (80022ec <HAL_RCC_OscConfig+0x4c8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x312>
 8002128:	4b6f      	ldr	r3, [pc, #444]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4a6e      	ldr	r2, [pc, #440]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6213      	str	r3, [r2, #32]
 8002134:	e02d      	b.n	8002192 <HAL_RCC_OscConfig+0x36e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x334>
 800213e:	4b6a      	ldr	r3, [pc, #424]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4a69      	ldr	r2, [pc, #420]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6213      	str	r3, [r2, #32]
 800214a:	4b67      	ldr	r3, [pc, #412]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4a66      	ldr	r2, [pc, #408]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	f023 0304 	bic.w	r3, r3, #4
 8002154:	6213      	str	r3, [r2, #32]
 8002156:	e01c      	b.n	8002192 <HAL_RCC_OscConfig+0x36e>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b05      	cmp	r3, #5
 800215e:	d10c      	bne.n	800217a <HAL_RCC_OscConfig+0x356>
 8002160:	4b61      	ldr	r3, [pc, #388]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	4a60      	ldr	r2, [pc, #384]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	f043 0304 	orr.w	r3, r3, #4
 800216a:	6213      	str	r3, [r2, #32]
 800216c:	4b5e      	ldr	r3, [pc, #376]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4a5d      	ldr	r2, [pc, #372]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6213      	str	r3, [r2, #32]
 8002178:	e00b      	b.n	8002192 <HAL_RCC_OscConfig+0x36e>
 800217a:	4b5b      	ldr	r3, [pc, #364]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4a5a      	ldr	r2, [pc, #360]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6213      	str	r3, [r2, #32]
 8002186:	4b58      	ldr	r3, [pc, #352]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4a57      	ldr	r2, [pc, #348]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d015      	beq.n	80021c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7ff fb8f 	bl	80018bc <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7ff fb8b 	bl	80018bc <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e0b1      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b8:	4b4b      	ldr	r3, [pc, #300]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0ee      	beq.n	80021a2 <HAL_RCC_OscConfig+0x37e>
 80021c4:	e014      	b.n	80021f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7ff fb79 	bl	80018bc <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7ff fb75 	bl	80018bc <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e09b      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e4:	4b40      	ldr	r3, [pc, #256]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1ee      	bne.n	80021ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d105      	bne.n	8002202 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f6:	4b3c      	ldr	r3, [pc, #240]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4a3b      	ldr	r2, [pc, #236]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002200:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8087 	beq.w	800231a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800220c:	4b36      	ldr	r3, [pc, #216]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d061      	beq.n	80022dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d146      	bne.n	80022ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002220:	4b33      	ldr	r3, [pc, #204]	@ (80022f0 <HAL_RCC_OscConfig+0x4cc>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7ff fb49 	bl	80018bc <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222e:	f7ff fb45 	bl	80018bc <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e06d      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002240:	4b29      	ldr	r3, [pc, #164]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002254:	d108      	bne.n	8002268 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002256:	4b24      	ldr	r3, [pc, #144]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4921      	ldr	r1, [pc, #132]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002268:	4b1f      	ldr	r3, [pc, #124]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a19      	ldr	r1, [r3, #32]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	430b      	orrs	r3, r1
 800227a:	491b      	ldr	r1, [pc, #108]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002280:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <HAL_RCC_OscConfig+0x4cc>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7ff fb19 	bl	80018bc <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228e:	f7ff fb15 	bl	80018bc <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e03d      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a0:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x46a>
 80022ac:	e035      	b.n	800231a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ae:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <HAL_RCC_OscConfig+0x4cc>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff fb02 	bl	80018bc <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022bc:	f7ff fafe 	bl	80018bc <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e026      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x498>
 80022da:	e01e      	b.n	800231a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e019      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40007000 	.word	0x40007000
 80022f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <HAL_RCC_OscConfig+0x500>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	429a      	cmp	r2, r3
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000

08002328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0d0      	b.n	80024de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b6a      	ldr	r3, [pc, #424]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d910      	bls.n	800236c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b67      	ldr	r3, [pc, #412]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4965      	ldr	r1, [pc, #404]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b63      	ldr	r3, [pc, #396]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0b8      	b.n	80024de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002384:	4b59      	ldr	r3, [pc, #356]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a58      	ldr	r2, [pc, #352]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800238e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800239c:	4b53      	ldr	r3, [pc, #332]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	4a52      	ldr	r2, [pc, #328]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b50      	ldr	r3, [pc, #320]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	494d      	ldr	r1, [pc, #308]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d040      	beq.n	8002448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b47      	ldr	r3, [pc, #284]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d115      	bne.n	8002406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e07f      	b.n	80024de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e6:	4b41      	ldr	r3, [pc, #260]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e073      	b.n	80024de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f6:	4b3d      	ldr	r3, [pc, #244]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e06b      	b.n	80024de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002406:	4b39      	ldr	r3, [pc, #228]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f023 0203 	bic.w	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4936      	ldr	r1, [pc, #216]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002418:	f7ff fa50 	bl	80018bc <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	e00a      	b.n	8002436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002420:	f7ff fa4c 	bl	80018bc <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e053      	b.n	80024de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	4b2d      	ldr	r3, [pc, #180]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 020c 	and.w	r2, r3, #12
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	429a      	cmp	r2, r3
 8002446:	d1eb      	bne.n	8002420 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002448:	4b27      	ldr	r3, [pc, #156]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d210      	bcs.n	8002478 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 0207 	bic.w	r2, r3, #7
 800245e:	4922      	ldr	r1, [pc, #136]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e032      	b.n	80024de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4916      	ldr	r1, [pc, #88]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	4313      	orrs	r3, r2
 8002494:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024a2:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	490e      	ldr	r1, [pc, #56]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024b6:	f000 f821 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 80024ba:	4602      	mov	r2, r0
 80024bc:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	490a      	ldr	r1, [pc, #40]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 80024c8:	5ccb      	ldrb	r3, [r1, r3]
 80024ca:	fa22 f303 	lsr.w	r3, r2, r3
 80024ce:	4a09      	ldr	r2, [pc, #36]	@ (80024f4 <HAL_RCC_ClockConfig+0x1cc>)
 80024d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024d2:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <HAL_RCC_ClockConfig+0x1d0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff f9ae 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	08004e84 	.word	0x08004e84
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20000004 	.word	0x20000004

080024fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002516:	4b1e      	ldr	r3, [pc, #120]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x94>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b04      	cmp	r3, #4
 8002524:	d002      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x30>
 8002526:	2b08      	cmp	r3, #8
 8002528:	d003      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0x36>
 800252a:	e027      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800252c:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x98>)
 800252e:	613b      	str	r3, [r7, #16]
      break;
 8002530:	e027      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	0c9b      	lsrs	r3, r3, #18
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	4a17      	ldr	r2, [pc, #92]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x9c>)
 800253c:	5cd3      	ldrb	r3, [r2, r3]
 800253e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d010      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800254a:	4b11      	ldr	r3, [pc, #68]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x94>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	0c5b      	lsrs	r3, r3, #17
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	4a11      	ldr	r2, [pc, #68]	@ (800259c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002556:	5cd3      	ldrb	r3, [r2, r3]
 8002558:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a0d      	ldr	r2, [pc, #52]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x98>)
 800255e:	fb03 f202 	mul.w	r2, r3, r2
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e004      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a0c      	ldr	r2, [pc, #48]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002570:	fb02 f303 	mul.w	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	613b      	str	r3, [r7, #16]
      break;
 800257a:	e002      	b.n	8002582 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800257c:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x98>)
 800257e:	613b      	str	r3, [r7, #16]
      break;
 8002580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002582:	693b      	ldr	r3, [r7, #16]
}
 8002584:	4618      	mov	r0, r3
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	007a1200 	.word	0x007a1200
 8002598:	08004e9c 	.word	0x08004e9c
 800259c:	08004eac 	.word	0x08004eac
 80025a0:	003d0900 	.word	0x003d0900

080025a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a8:	4b02      	ldr	r3, [pc, #8]	@ (80025b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	20000000 	.word	0x20000000

080025b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025bc:	f7ff fff2 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4903      	ldr	r1, [pc, #12]	@ (80025dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40021000 	.word	0x40021000
 80025dc:	08004e94 	.word	0x08004e94

080025e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e4:	f7ff ffde 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	0adb      	lsrs	r3, r3, #11
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	@ (8002604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	08004e94 	.word	0x08004e94

08002608 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002610:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <RCC_Delay+0x34>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0a      	ldr	r2, [pc, #40]	@ (8002640 <RCC_Delay+0x38>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0a5b      	lsrs	r3, r3, #9
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002624:	bf00      	nop
  }
  while (Delay --);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1e5a      	subs	r2, r3, #1
 800262a:	60fa      	str	r2, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f9      	bne.n	8002624 <RCC_Delay+0x1c>
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	20000000 	.word	0x20000000
 8002640:	10624dd3 	.word	0x10624dd3

08002644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e076      	b.n	8002744 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	2b00      	cmp	r3, #0
 800265c:	d108      	bne.n	8002670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002666:	d009      	beq.n	800267c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]
 800266e:	e005      	b.n	800267c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe ff66 	bl	8001568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002700:	ea42 0103 	orr.w	r1, r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002708:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	0c1a      	lsrs	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f002 0204 	and.w	r2, r2, #4
 8002722:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002732:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800275c:	f7ff f8ae 	bl	80018bc <HAL_GetTick>
 8002760:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d001      	beq.n	8002776 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002772:	2302      	movs	r3, #2
 8002774:	e12a      	b.n	80029cc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_SPI_Transmit+0x36>
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e122      	b.n	80029cc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_SPI_Transmit+0x48>
 8002790:	2302      	movs	r3, #2
 8002792:	e11b      	b.n	80029cc <HAL_SPI_Transmit+0x280>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2203      	movs	r2, #3
 80027a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027e2:	d10f      	bne.n	8002804 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002802:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280e:	2b40      	cmp	r3, #64	@ 0x40
 8002810:	d007      	beq.n	8002822 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800282a:	d152      	bne.n	80028d2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_SPI_Transmit+0xee>
 8002834:	8b7b      	ldrh	r3, [r7, #26]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d145      	bne.n	80028c6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	881a      	ldrh	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	1c9a      	adds	r2, r3, #2
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800285e:	e032      	b.n	80028c6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d112      	bne.n	8002894 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	881a      	ldrh	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	1c9a      	adds	r2, r3, #2
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002892:	e018      	b.n	80028c6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002894:	f7ff f812 	bl	80018bc <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d803      	bhi.n	80028ac <HAL_SPI_Transmit+0x160>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d102      	bne.n	80028b2 <HAL_SPI_Transmit+0x166>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e082      	b.n	80029cc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1c7      	bne.n	8002860 <HAL_SPI_Transmit+0x114>
 80028d0:	e053      	b.n	800297a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_SPI_Transmit+0x194>
 80028da:	8b7b      	ldrh	r3, [r7, #26]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d147      	bne.n	8002970 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	330c      	adds	r3, #12
 80028ea:	7812      	ldrb	r2, [r2, #0]
 80028ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002906:	e033      	b.n	8002970 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d113      	bne.n	800293e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	7812      	ldrb	r2, [r2, #0]
 8002922:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800293c:	e018      	b.n	8002970 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800293e:	f7fe ffbd 	bl	80018bc <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d803      	bhi.n	8002956 <HAL_SPI_Transmit+0x20a>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d102      	bne.n	800295c <HAL_SPI_Transmit+0x210>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e02d      	b.n	80029cc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1c6      	bne.n	8002908 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	6839      	ldr	r1, [r7, #0]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fbc4 	bl	800310c <SPI_EndRxTxTransaction>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80029ca:	2300      	movs	r3, #0
  }
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d001      	beq.n	80029f4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
 80029f2:	e104      	b.n	8002bfe <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029fc:	d112      	bne.n	8002a24 <HAL_SPI_Receive+0x50>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10e      	bne.n	8002a24 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a0e:	88fa      	ldrh	r2, [r7, #6]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f8f3 	bl	8002c06 <HAL_SPI_TransmitReceive>
 8002a20:	4603      	mov	r3, r0
 8002a22:	e0ec      	b.n	8002bfe <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a24:	f7fe ff4a 	bl	80018bc <HAL_GetTick>
 8002a28:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_SPI_Receive+0x62>
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0e1      	b.n	8002bfe <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_SPI_Receive+0x74>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e0da      	b.n	8002bfe <HAL_SPI_Receive+0x22a>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2204      	movs	r2, #4
 8002a54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	88fa      	ldrh	r2, [r7, #6]
 8002a68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	88fa      	ldrh	r2, [r7, #6]
 8002a6e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a96:	d10f      	bne.n	8002ab8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002aa6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ab6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac2:	2b40      	cmp	r3, #64	@ 0x40
 8002ac4:	d007      	beq.n	8002ad6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ad4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d170      	bne.n	8002bc0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ade:	e035      	b.n	8002b4c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d115      	bne.n	8002b1a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f103 020c 	add.w	r2, r3, #12
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afa:	7812      	ldrb	r2, [r2, #0]
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b18:	e018      	b.n	8002b4c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b1a:	f7fe fecf 	bl	80018bc <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d803      	bhi.n	8002b32 <HAL_SPI_Receive+0x15e>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d102      	bne.n	8002b38 <HAL_SPI_Receive+0x164>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d109      	bne.n	8002b4c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e058      	b.n	8002bfe <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1c4      	bne.n	8002ae0 <HAL_SPI_Receive+0x10c>
 8002b56:	e038      	b.n	8002bca <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d113      	bne.n	8002b8e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b70:	b292      	uxth	r2, r2
 8002b72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b78:	1c9a      	adds	r2, r3, #2
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b8c:	e018      	b.n	8002bc0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b8e:	f7fe fe95 	bl	80018bc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d803      	bhi.n	8002ba6 <HAL_SPI_Receive+0x1d2>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d102      	bne.n	8002bac <HAL_SPI_Receive+0x1d8>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e01e      	b.n	8002bfe <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1c6      	bne.n	8002b58 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	6839      	ldr	r1, [r7, #0]
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fa4a 	bl	8003068 <SPI_EndRxTransaction>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b08a      	sub	sp, #40	@ 0x28
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c14:	2301      	movs	r3, #1
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c18:	f7fe fe50 	bl	80018bc <HAL_GetTick>
 8002c1c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c24:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002c2c:	887b      	ldrh	r3, [r7, #2]
 8002c2e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c30:	7ffb      	ldrb	r3, [r7, #31]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d00c      	beq.n	8002c50 <HAL_SPI_TransmitReceive+0x4a>
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c3c:	d106      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x46>
 8002c46:	7ffb      	ldrb	r3, [r7, #31]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d001      	beq.n	8002c50 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e17f      	b.n	8002f50 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_SPI_TransmitReceive+0x5c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_SPI_TransmitReceive+0x5c>
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e174      	b.n	8002f50 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_SPI_TransmitReceive+0x6e>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e16d      	b.n	8002f50 <HAL_SPI_TransmitReceive+0x34a>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d003      	beq.n	8002c90 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2205      	movs	r2, #5
 8002c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	887a      	ldrh	r2, [r7, #2]
 8002ca0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	887a      	ldrh	r2, [r7, #2]
 8002ca6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	887a      	ldrh	r2, [r7, #2]
 8002cb2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd0:	2b40      	cmp	r3, #64	@ 0x40
 8002cd2:	d007      	beq.n	8002ce4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ce2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cec:	d17e      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_SPI_TransmitReceive+0xf6>
 8002cf6:	8afb      	ldrh	r3, [r7, #22]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d16c      	bne.n	8002dd6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d00:	881a      	ldrh	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	1c9a      	adds	r2, r3, #2
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d20:	e059      	b.n	8002dd6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d11b      	bne.n	8002d68 <HAL_SPI_TransmitReceive+0x162>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d016      	beq.n	8002d68 <HAL_SPI_TransmitReceive+0x162>
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d113      	bne.n	8002d68 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d44:	881a      	ldrh	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	1c9a      	adds	r2, r3, #2
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d119      	bne.n	8002daa <HAL_SPI_TransmitReceive+0x1a4>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d014      	beq.n	8002daa <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8a:	b292      	uxth	r2, r2
 8002d8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d92:	1c9a      	adds	r2, r3, #2
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002da6:	2301      	movs	r3, #1
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002daa:	f7fe fd87 	bl	80018bc <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d80d      	bhi.n	8002dd6 <HAL_SPI_TransmitReceive+0x1d0>
 8002dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d009      	beq.n	8002dd6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e0bc      	b.n	8002f50 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1a0      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x11c>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d19b      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x11c>
 8002dea:	e082      	b.n	8002ef2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_SPI_TransmitReceive+0x1f4>
 8002df4:	8afb      	ldrh	r3, [r7, #22]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d171      	bne.n	8002ede <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	7812      	ldrb	r2, [r2, #0]
 8002e06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e20:	e05d      	b.n	8002ede <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d11c      	bne.n	8002e6a <HAL_SPI_TransmitReceive+0x264>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d017      	beq.n	8002e6a <HAL_SPI_TransmitReceive+0x264>
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d114      	bne.n	8002e6a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	7812      	ldrb	r2, [r2, #0]
 8002e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d119      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x2a6>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d014      	beq.n	8002eac <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002eac:	f7fe fd06 	bl	80018bc <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d803      	bhi.n	8002ec4 <HAL_SPI_TransmitReceive+0x2be>
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec2:	d102      	bne.n	8002eca <HAL_SPI_TransmitReceive+0x2c4>
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e038      	b.n	8002f50 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d19c      	bne.n	8002e22 <HAL_SPI_TransmitReceive+0x21c>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d197      	bne.n	8002e22 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ef2:	6a3a      	ldr	r2, [r7, #32]
 8002ef4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f908 	bl	800310c <SPI_EndRxTxTransaction>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e01d      	b.n	8002f50 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
  }
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3728      	adds	r7, #40	@ 0x28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f68:	f7fe fca8 	bl	80018bc <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f78:	f7fe fca0 	bl	80018bc <HAL_GetTick>
 8002f7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f7e:	4b39      	ldr	r3, [pc, #228]	@ (8003064 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	015b      	lsls	r3, r3, #5
 8002f84:	0d1b      	lsrs	r3, r3, #20
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	fb02 f303 	mul.w	r3, r2, r3
 8002f8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f8e:	e054      	b.n	800303a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f96:	d050      	beq.n	800303a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f98:	f7fe fc90 	bl	80018bc <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d902      	bls.n	8002fae <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d13d      	bne.n	800302a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fc6:	d111      	bne.n	8002fec <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fd0:	d004      	beq.n	8002fdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fda:	d107      	bne.n	8002fec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ff4:	d10f      	bne.n	8003016 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003014:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e017      	b.n	800305a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	3b01      	subs	r3, #1
 8003038:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4013      	ands	r3, r2
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	429a      	cmp	r2, r3
 8003056:	d19b      	bne.n	8002f90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000000 	.word	0x20000000

08003068 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800307c:	d111      	bne.n	80030a2 <SPI_EndRxTransaction+0x3a>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003086:	d004      	beq.n	8003092 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003090:	d107      	bne.n	80030a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030a0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030aa:	d117      	bne.n	80030dc <SPI_EndRxTransaction+0x74>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b4:	d112      	bne.n	80030dc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2200      	movs	r2, #0
 80030be:	2101      	movs	r1, #1
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7ff ff49 	bl	8002f58 <SPI_WaitFlagStateUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01a      	beq.n	8003102 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e013      	b.n	8003104 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2200      	movs	r2, #0
 80030e4:	2180      	movs	r1, #128	@ 0x80
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f7ff ff36 	bl	8002f58 <SPI_WaitFlagStateUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f6:	f043 0220 	orr.w	r2, r3, #32
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e000      	b.n	8003104 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2201      	movs	r2, #1
 8003120:	2102      	movs	r1, #2
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7ff ff18 	bl	8002f58 <SPI_WaitFlagStateUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003132:	f043 0220 	orr.w	r2, r3, #32
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e013      	b.n	8003166 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2200      	movs	r2, #0
 8003146:	2180      	movs	r1, #128	@ 0x80
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7ff ff05 	bl	8002f58 <SPI_WaitFlagStateUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e000      	b.n	8003166 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e041      	b.n	8003204 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d106      	bne.n	800319a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7fe fa31 	bl	80015fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3304      	adds	r3, #4
 80031aa:	4619      	mov	r1, r3
 80031ac:	4610      	mov	r0, r2
 80031ae:	f000 faa5 	bl	80036fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d001      	beq.n	8003224 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e032      	b.n	800328a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a18      	ldr	r2, [pc, #96]	@ (8003294 <HAL_TIM_Base_Start+0x88>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00e      	beq.n	8003254 <HAL_TIM_Base_Start+0x48>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323e:	d009      	beq.n	8003254 <HAL_TIM_Base_Start+0x48>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a14      	ldr	r2, [pc, #80]	@ (8003298 <HAL_TIM_Base_Start+0x8c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_TIM_Base_Start+0x48>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a13      	ldr	r2, [pc, #76]	@ (800329c <HAL_TIM_Base_Start+0x90>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d111      	bne.n	8003278 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b06      	cmp	r3, #6
 8003264:	d010      	beq.n	8003288 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003276:	e007      	b.n	8003288 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800

080032a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d001      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e03a      	b.n	800332e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a18      	ldr	r2, [pc, #96]	@ (8003338 <HAL_TIM_Base_Start_IT+0x98>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x58>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e2:	d009      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x58>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a14      	ldr	r2, [pc, #80]	@ (800333c <HAL_TIM_Base_Start_IT+0x9c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x58>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a13      	ldr	r2, [pc, #76]	@ (8003340 <HAL_TIM_Base_Start_IT+0xa0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d111      	bne.n	800331c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b06      	cmp	r3, #6
 8003308:	d010      	beq.n	800332c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0201 	orr.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331a:	e007      	b.n	800332c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	40012c00 	.word	0x40012c00
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800

08003344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d020      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01b      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0202 	mvn.w	r2, #2
 8003378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f998 	bl	80036c4 <HAL_TIM_IC_CaptureCallback>
 8003394:	e005      	b.n	80033a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f98b 	bl	80036b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f99a 	bl	80036d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d020      	beq.n	80033f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01b      	beq.n	80033f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0204 	mvn.w	r2, #4
 80033c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f972 	bl	80036c4 <HAL_TIM_IC_CaptureCallback>
 80033e0:	e005      	b.n	80033ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f965 	bl	80036b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f974 	bl	80036d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d020      	beq.n	8003440 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01b      	beq.n	8003440 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0208 	mvn.w	r2, #8
 8003410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2204      	movs	r2, #4
 8003416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f94c 	bl	80036c4 <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f93f 	bl	80036b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f94e 	bl	80036d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	d020      	beq.n	800348c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01b      	beq.n	800348c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0210 	mvn.w	r2, #16
 800345c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2208      	movs	r2, #8
 8003462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f926 	bl	80036c4 <HAL_TIM_IC_CaptureCallback>
 8003478:	e005      	b.n	8003486 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f919 	bl	80036b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f928 	bl	80036d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00c      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0201 	mvn.w	r2, #1
 80034a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd ffe2 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa7f 	bl	80039d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00c      	beq.n	80034f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f8f8 	bl	80036e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00c      	beq.n	800351c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0220 	mvn.w	r2, #32
 8003514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fa52 	bl	80039c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_TIM_ConfigClockSource+0x1c>
 800353c:	2302      	movs	r3, #2
 800353e:	e0b4      	b.n	80036aa <HAL_TIM_ConfigClockSource+0x186>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800355e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003566:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003578:	d03e      	beq.n	80035f8 <HAL_TIM_ConfigClockSource+0xd4>
 800357a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800357e:	f200 8087 	bhi.w	8003690 <HAL_TIM_ConfigClockSource+0x16c>
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003586:	f000 8086 	beq.w	8003696 <HAL_TIM_ConfigClockSource+0x172>
 800358a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358e:	d87f      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x16c>
 8003590:	2b70      	cmp	r3, #112	@ 0x70
 8003592:	d01a      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0xa6>
 8003594:	2b70      	cmp	r3, #112	@ 0x70
 8003596:	d87b      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x16c>
 8003598:	2b60      	cmp	r3, #96	@ 0x60
 800359a:	d050      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x11a>
 800359c:	2b60      	cmp	r3, #96	@ 0x60
 800359e:	d877      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x16c>
 80035a0:	2b50      	cmp	r3, #80	@ 0x50
 80035a2:	d03c      	beq.n	800361e <HAL_TIM_ConfigClockSource+0xfa>
 80035a4:	2b50      	cmp	r3, #80	@ 0x50
 80035a6:	d873      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x16c>
 80035a8:	2b40      	cmp	r3, #64	@ 0x40
 80035aa:	d058      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x13a>
 80035ac:	2b40      	cmp	r3, #64	@ 0x40
 80035ae:	d86f      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x16c>
 80035b0:	2b30      	cmp	r3, #48	@ 0x30
 80035b2:	d064      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x15a>
 80035b4:	2b30      	cmp	r3, #48	@ 0x30
 80035b6:	d86b      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x16c>
 80035b8:	2b20      	cmp	r3, #32
 80035ba:	d060      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x15a>
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d867      	bhi.n	8003690 <HAL_TIM_ConfigClockSource+0x16c>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d05c      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x15a>
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d05a      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x15a>
 80035c8:	e062      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035da:	f000 f974 	bl	80038c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	609a      	str	r2, [r3, #8]
      break;
 80035f6:	e04f      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003608:	f000 f95d 	bl	80038c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800361a:	609a      	str	r2, [r3, #8]
      break;
 800361c:	e03c      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	461a      	mov	r2, r3
 800362c:	f000 f8d4 	bl	80037d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2150      	movs	r1, #80	@ 0x50
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f92b 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 800363c:	e02c      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800364a:	461a      	mov	r2, r3
 800364c:	f000 f8f2 	bl	8003834 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2160      	movs	r1, #96	@ 0x60
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f91b 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 800365c:	e01c      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800366a:	461a      	mov	r2, r3
 800366c:	f000 f8b4 	bl	80037d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2140      	movs	r1, #64	@ 0x40
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f90b 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 800367c:	e00c      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4619      	mov	r1, r3
 8003688:	4610      	mov	r0, r2
 800368a:	f000 f902 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 800368e:	e003      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      break;
 8003694:	e000      	b.n	8003698 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr
	...

080036fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a2f      	ldr	r2, [pc, #188]	@ (80037cc <TIM_Base_SetConfig+0xd0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00b      	beq.n	800372c <TIM_Base_SetConfig+0x30>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800371a:	d007      	beq.n	800372c <TIM_Base_SetConfig+0x30>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a2c      	ldr	r2, [pc, #176]	@ (80037d0 <TIM_Base_SetConfig+0xd4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_Base_SetConfig+0x30>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a2b      	ldr	r2, [pc, #172]	@ (80037d4 <TIM_Base_SetConfig+0xd8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d108      	bne.n	800373e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a22      	ldr	r2, [pc, #136]	@ (80037cc <TIM_Base_SetConfig+0xd0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00b      	beq.n	800375e <TIM_Base_SetConfig+0x62>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800374c:	d007      	beq.n	800375e <TIM_Base_SetConfig+0x62>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a1f      	ldr	r2, [pc, #124]	@ (80037d0 <TIM_Base_SetConfig+0xd4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d003      	beq.n	800375e <TIM_Base_SetConfig+0x62>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1e      	ldr	r2, [pc, #120]	@ (80037d4 <TIM_Base_SetConfig+0xd8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d108      	bne.n	8003770 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a0d      	ldr	r2, [pc, #52]	@ (80037cc <TIM_Base_SetConfig+0xd0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d103      	bne.n	80037a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f023 0201 	bic.w	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	611a      	str	r2, [r3, #16]
  }
}
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800

080037d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f023 0201 	bic.w	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f023 030a 	bic.w	r3, r3, #10
 8003814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f023 0210 	bic.w	r2, r3, #16
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800385e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	031b      	lsls	r3, r3, #12
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003870:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	621a      	str	r2, [r3, #32]
}
 8003888:	bf00      	nop
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003892:	b480      	push	{r7}
 8003894:	b085      	sub	sp, #20
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f043 0307 	orr.w	r3, r3, #7
 80038b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	609a      	str	r2, [r3, #8]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b087      	sub	sp, #28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	021a      	lsls	r2, r3, #8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	609a      	str	r2, [r3, #8]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003918:	2302      	movs	r3, #2
 800391a:	e046      	b.n	80039aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a16      	ldr	r2, [pc, #88]	@ (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00e      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003968:	d009      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a12      	ldr	r2, [pc, #72]	@ (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d004      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a10      	ldr	r2, [pc, #64]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d10c      	bne.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	4313      	orrs	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800

080039c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e042      	b.n	8003a7c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd fe1a 	bl	8001644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2224      	movs	r2, #36	@ 0x24
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f971 	bl	8003d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	@ 0x28
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d175      	bne.n	8003b90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_UART_Transmit+0x2c>
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e06e      	b.n	8003b92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2221      	movs	r2, #33	@ 0x21
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ac2:	f7fd fefb 	bl	80018bc <HAL_GetTick>
 8003ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	88fa      	ldrh	r2, [r7, #6]
 8003acc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	88fa      	ldrh	r2, [r7, #6]
 8003ad2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003adc:	d108      	bne.n	8003af0 <HAL_UART_Transmit+0x6c>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d104      	bne.n	8003af0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	e003      	b.n	8003af8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003af8:	e02e      	b.n	8003b58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2180      	movs	r1, #128	@ 0x80
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f848 	bl	8003b9a <UART_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e03a      	b.n	8003b92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10b      	bne.n	8003b3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	3302      	adds	r3, #2
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	e007      	b.n	8003b4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	3301      	adds	r3, #1
 8003b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1cb      	bne.n	8003afa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2140      	movs	r1, #64	@ 0x40
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f814 	bl	8003b9a <UART_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e006      	b.n	8003b92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003baa:	e03b      	b.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d037      	beq.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb4:	f7fd fe82 	bl	80018bc <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	6a3a      	ldr	r2, [r7, #32]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d302      	bcc.n	8003bca <UART_WaitOnFlagUntilTimeout+0x30>
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e03a      	b.n	8003c44 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d023      	beq.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b80      	cmp	r3, #128	@ 0x80
 8003be0:	d020      	beq.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b40      	cmp	r3, #64	@ 0x40
 8003be6:	d01d      	beq.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d116      	bne.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f81d 	bl	8003c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2208      	movs	r2, #8
 8003c16:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e00f      	b.n	8003c44 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d0b4      	beq.n	8003bac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b095      	sub	sp, #84	@ 0x54
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c74:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e5      	bne.n	8003c54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3314      	adds	r3, #20
 8003c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3314      	adds	r3, #20
 8003ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e5      	bne.n	8003c88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d119      	bne.n	8003cf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f023 0310 	bic.w	r3, r3, #16
 8003cda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	330c      	adds	r3, #12
 8003ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ce4:	61ba      	str	r2, [r7, #24]
 8003ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6979      	ldr	r1, [r7, #20]
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e5      	bne.n	8003cc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d06:	bf00      	nop
 8003d08:	3754      	adds	r7, #84	@ 0x54
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003d4a:	f023 030c 	bic.w	r3, r3, #12
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	430b      	orrs	r3, r1
 8003d56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2c      	ldr	r2, [pc, #176]	@ (8003e24 <UART_SetConfig+0x114>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d103      	bne.n	8003d80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d78:	f7fe fc32 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	e002      	b.n	8003d86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d80:	f7fe fc1a 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 8003d84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009a      	lsls	r2, r3, #2
 8003d90:	441a      	add	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	4a22      	ldr	r2, [pc, #136]	@ (8003e28 <UART_SetConfig+0x118>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	0119      	lsls	r1, r3, #4
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009a      	lsls	r2, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e28 <UART_SetConfig+0x118>)
 8003dbe:	fba3 0302 	umull	r0, r3, r3, r2
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	2064      	movs	r0, #100	@ 0x64
 8003dc6:	fb00 f303 	mul.w	r3, r0, r3
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	3332      	adds	r3, #50	@ 0x32
 8003dd0:	4a15      	ldr	r2, [pc, #84]	@ (8003e28 <UART_SetConfig+0x118>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ddc:	4419      	add	r1, r3
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	009a      	lsls	r2, r3, #2
 8003de8:	441a      	add	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003df4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <UART_SetConfig+0x118>)
 8003df6:	fba3 0302 	umull	r0, r3, r3, r2
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	2064      	movs	r0, #100	@ 0x64
 8003dfe:	fb00 f303 	mul.w	r3, r0, r3
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	3332      	adds	r3, #50	@ 0x32
 8003e08:	4a07      	ldr	r2, [pc, #28]	@ (8003e28 <UART_SetConfig+0x118>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	f003 020f 	and.w	r2, r3, #15
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	440a      	add	r2, r1
 8003e1a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e1c:	bf00      	nop
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40013800 	.word	0x40013800
 8003e28:	51eb851f 	.word	0x51eb851f

08003e2c <siprintf>:
 8003e2c:	b40e      	push	{r1, r2, r3}
 8003e2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e32:	b510      	push	{r4, lr}
 8003e34:	2400      	movs	r4, #0
 8003e36:	b09d      	sub	sp, #116	@ 0x74
 8003e38:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003e3a:	9002      	str	r0, [sp, #8]
 8003e3c:	9006      	str	r0, [sp, #24]
 8003e3e:	9107      	str	r1, [sp, #28]
 8003e40:	9104      	str	r1, [sp, #16]
 8003e42:	4809      	ldr	r0, [pc, #36]	@ (8003e68 <siprintf+0x3c>)
 8003e44:	4909      	ldr	r1, [pc, #36]	@ (8003e6c <siprintf+0x40>)
 8003e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e4a:	9105      	str	r1, [sp, #20]
 8003e4c:	6800      	ldr	r0, [r0, #0]
 8003e4e:	a902      	add	r1, sp, #8
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003e54:	f000 f992 	bl	800417c <_svfiprintf_r>
 8003e58:	9b02      	ldr	r3, [sp, #8]
 8003e5a:	701c      	strb	r4, [r3, #0]
 8003e5c:	b01d      	add	sp, #116	@ 0x74
 8003e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e62:	b003      	add	sp, #12
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	2000000c 	.word	0x2000000c
 8003e6c:	ffff0208 	.word	0xffff0208

08003e70 <memset>:
 8003e70:	4603      	mov	r3, r0
 8003e72:	4402      	add	r2, r0
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d100      	bne.n	8003e7a <memset+0xa>
 8003e78:	4770      	bx	lr
 8003e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7e:	e7f9      	b.n	8003e74 <memset+0x4>

08003e80 <__errno>:
 8003e80:	4b01      	ldr	r3, [pc, #4]	@ (8003e88 <__errno+0x8>)
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	2000000c 	.word	0x2000000c

08003e8c <__libc_init_array>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	2600      	movs	r6, #0
 8003e90:	4d0c      	ldr	r5, [pc, #48]	@ (8003ec4 <__libc_init_array+0x38>)
 8003e92:	4c0d      	ldr	r4, [pc, #52]	@ (8003ec8 <__libc_init_array+0x3c>)
 8003e94:	1b64      	subs	r4, r4, r5
 8003e96:	10a4      	asrs	r4, r4, #2
 8003e98:	42a6      	cmp	r6, r4
 8003e9a:	d109      	bne.n	8003eb0 <__libc_init_array+0x24>
 8003e9c:	f000 ffd8 	bl	8004e50 <_init>
 8003ea0:	2600      	movs	r6, #0
 8003ea2:	4d0a      	ldr	r5, [pc, #40]	@ (8003ecc <__libc_init_array+0x40>)
 8003ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8003ed0 <__libc_init_array+0x44>)
 8003ea6:	1b64      	subs	r4, r4, r5
 8003ea8:	10a4      	asrs	r4, r4, #2
 8003eaa:	42a6      	cmp	r6, r4
 8003eac:	d105      	bne.n	8003eba <__libc_init_array+0x2e>
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb4:	4798      	blx	r3
 8003eb6:	3601      	adds	r6, #1
 8003eb8:	e7ee      	b.n	8003e98 <__libc_init_array+0xc>
 8003eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ebe:	4798      	blx	r3
 8003ec0:	3601      	adds	r6, #1
 8003ec2:	e7f2      	b.n	8003eaa <__libc_init_array+0x1e>
 8003ec4:	08004f70 	.word	0x08004f70
 8003ec8:	08004f70 	.word	0x08004f70
 8003ecc:	08004f70 	.word	0x08004f70
 8003ed0:	08004f74 	.word	0x08004f74

08003ed4 <__retarget_lock_acquire_recursive>:
 8003ed4:	4770      	bx	lr

08003ed6 <__retarget_lock_release_recursive>:
 8003ed6:	4770      	bx	lr

08003ed8 <_free_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4605      	mov	r5, r0
 8003edc:	2900      	cmp	r1, #0
 8003ede:	d040      	beq.n	8003f62 <_free_r+0x8a>
 8003ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee4:	1f0c      	subs	r4, r1, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	bfb8      	it	lt
 8003eea:	18e4      	addlt	r4, r4, r3
 8003eec:	f000 f8de 	bl	80040ac <__malloc_lock>
 8003ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f64 <_free_r+0x8c>)
 8003ef2:	6813      	ldr	r3, [r2, #0]
 8003ef4:	b933      	cbnz	r3, 8003f04 <_free_r+0x2c>
 8003ef6:	6063      	str	r3, [r4, #4]
 8003ef8:	6014      	str	r4, [r2, #0]
 8003efa:	4628      	mov	r0, r5
 8003efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f00:	f000 b8da 	b.w	80040b8 <__malloc_unlock>
 8003f04:	42a3      	cmp	r3, r4
 8003f06:	d908      	bls.n	8003f1a <_free_r+0x42>
 8003f08:	6820      	ldr	r0, [r4, #0]
 8003f0a:	1821      	adds	r1, r4, r0
 8003f0c:	428b      	cmp	r3, r1
 8003f0e:	bf01      	itttt	eq
 8003f10:	6819      	ldreq	r1, [r3, #0]
 8003f12:	685b      	ldreq	r3, [r3, #4]
 8003f14:	1809      	addeq	r1, r1, r0
 8003f16:	6021      	streq	r1, [r4, #0]
 8003f18:	e7ed      	b.n	8003ef6 <_free_r+0x1e>
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	b10b      	cbz	r3, 8003f24 <_free_r+0x4c>
 8003f20:	42a3      	cmp	r3, r4
 8003f22:	d9fa      	bls.n	8003f1a <_free_r+0x42>
 8003f24:	6811      	ldr	r1, [r2, #0]
 8003f26:	1850      	adds	r0, r2, r1
 8003f28:	42a0      	cmp	r0, r4
 8003f2a:	d10b      	bne.n	8003f44 <_free_r+0x6c>
 8003f2c:	6820      	ldr	r0, [r4, #0]
 8003f2e:	4401      	add	r1, r0
 8003f30:	1850      	adds	r0, r2, r1
 8003f32:	4283      	cmp	r3, r0
 8003f34:	6011      	str	r1, [r2, #0]
 8003f36:	d1e0      	bne.n	8003efa <_free_r+0x22>
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4408      	add	r0, r1
 8003f3e:	6010      	str	r0, [r2, #0]
 8003f40:	6053      	str	r3, [r2, #4]
 8003f42:	e7da      	b.n	8003efa <_free_r+0x22>
 8003f44:	d902      	bls.n	8003f4c <_free_r+0x74>
 8003f46:	230c      	movs	r3, #12
 8003f48:	602b      	str	r3, [r5, #0]
 8003f4a:	e7d6      	b.n	8003efa <_free_r+0x22>
 8003f4c:	6820      	ldr	r0, [r4, #0]
 8003f4e:	1821      	adds	r1, r4, r0
 8003f50:	428b      	cmp	r3, r1
 8003f52:	bf01      	itttt	eq
 8003f54:	6819      	ldreq	r1, [r3, #0]
 8003f56:	685b      	ldreq	r3, [r3, #4]
 8003f58:	1809      	addeq	r1, r1, r0
 8003f5a:	6021      	streq	r1, [r4, #0]
 8003f5c:	6063      	str	r3, [r4, #4]
 8003f5e:	6054      	str	r4, [r2, #4]
 8003f60:	e7cb      	b.n	8003efa <_free_r+0x22>
 8003f62:	bd38      	pop	{r3, r4, r5, pc}
 8003f64:	200002b0 	.word	0x200002b0

08003f68 <sbrk_aligned>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	4e0f      	ldr	r6, [pc, #60]	@ (8003fa8 <sbrk_aligned+0x40>)
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	6831      	ldr	r1, [r6, #0]
 8003f70:	4605      	mov	r5, r0
 8003f72:	b911      	cbnz	r1, 8003f7a <sbrk_aligned+0x12>
 8003f74:	f000 fba8 	bl	80046c8 <_sbrk_r>
 8003f78:	6030      	str	r0, [r6, #0]
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f000 fba3 	bl	80046c8 <_sbrk_r>
 8003f82:	1c43      	adds	r3, r0, #1
 8003f84:	d103      	bne.n	8003f8e <sbrk_aligned+0x26>
 8003f86:	f04f 34ff 	mov.w	r4, #4294967295
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	bd70      	pop	{r4, r5, r6, pc}
 8003f8e:	1cc4      	adds	r4, r0, #3
 8003f90:	f024 0403 	bic.w	r4, r4, #3
 8003f94:	42a0      	cmp	r0, r4
 8003f96:	d0f8      	beq.n	8003f8a <sbrk_aligned+0x22>
 8003f98:	1a21      	subs	r1, r4, r0
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f000 fb94 	bl	80046c8 <_sbrk_r>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d1f2      	bne.n	8003f8a <sbrk_aligned+0x22>
 8003fa4:	e7ef      	b.n	8003f86 <sbrk_aligned+0x1e>
 8003fa6:	bf00      	nop
 8003fa8:	200002ac 	.word	0x200002ac

08003fac <_malloc_r>:
 8003fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb0:	1ccd      	adds	r5, r1, #3
 8003fb2:	f025 0503 	bic.w	r5, r5, #3
 8003fb6:	3508      	adds	r5, #8
 8003fb8:	2d0c      	cmp	r5, #12
 8003fba:	bf38      	it	cc
 8003fbc:	250c      	movcc	r5, #12
 8003fbe:	2d00      	cmp	r5, #0
 8003fc0:	4606      	mov	r6, r0
 8003fc2:	db01      	blt.n	8003fc8 <_malloc_r+0x1c>
 8003fc4:	42a9      	cmp	r1, r5
 8003fc6:	d904      	bls.n	8003fd2 <_malloc_r+0x26>
 8003fc8:	230c      	movs	r3, #12
 8003fca:	6033      	str	r3, [r6, #0]
 8003fcc:	2000      	movs	r0, #0
 8003fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040a8 <_malloc_r+0xfc>
 8003fd6:	f000 f869 	bl	80040ac <__malloc_lock>
 8003fda:	f8d8 3000 	ldr.w	r3, [r8]
 8003fde:	461c      	mov	r4, r3
 8003fe0:	bb44      	cbnz	r4, 8004034 <_malloc_r+0x88>
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	f7ff ffbf 	bl	8003f68 <sbrk_aligned>
 8003fea:	1c43      	adds	r3, r0, #1
 8003fec:	4604      	mov	r4, r0
 8003fee:	d158      	bne.n	80040a2 <_malloc_r+0xf6>
 8003ff0:	f8d8 4000 	ldr.w	r4, [r8]
 8003ff4:	4627      	mov	r7, r4
 8003ff6:	2f00      	cmp	r7, #0
 8003ff8:	d143      	bne.n	8004082 <_malloc_r+0xd6>
 8003ffa:	2c00      	cmp	r4, #0
 8003ffc:	d04b      	beq.n	8004096 <_malloc_r+0xea>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	4639      	mov	r1, r7
 8004002:	4630      	mov	r0, r6
 8004004:	eb04 0903 	add.w	r9, r4, r3
 8004008:	f000 fb5e 	bl	80046c8 <_sbrk_r>
 800400c:	4581      	cmp	r9, r0
 800400e:	d142      	bne.n	8004096 <_malloc_r+0xea>
 8004010:	6821      	ldr	r1, [r4, #0]
 8004012:	4630      	mov	r0, r6
 8004014:	1a6d      	subs	r5, r5, r1
 8004016:	4629      	mov	r1, r5
 8004018:	f7ff ffa6 	bl	8003f68 <sbrk_aligned>
 800401c:	3001      	adds	r0, #1
 800401e:	d03a      	beq.n	8004096 <_malloc_r+0xea>
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	442b      	add	r3, r5
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	f8d8 3000 	ldr.w	r3, [r8]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	bb62      	cbnz	r2, 8004088 <_malloc_r+0xdc>
 800402e:	f8c8 7000 	str.w	r7, [r8]
 8004032:	e00f      	b.n	8004054 <_malloc_r+0xa8>
 8004034:	6822      	ldr	r2, [r4, #0]
 8004036:	1b52      	subs	r2, r2, r5
 8004038:	d420      	bmi.n	800407c <_malloc_r+0xd0>
 800403a:	2a0b      	cmp	r2, #11
 800403c:	d917      	bls.n	800406e <_malloc_r+0xc2>
 800403e:	1961      	adds	r1, r4, r5
 8004040:	42a3      	cmp	r3, r4
 8004042:	6025      	str	r5, [r4, #0]
 8004044:	bf18      	it	ne
 8004046:	6059      	strne	r1, [r3, #4]
 8004048:	6863      	ldr	r3, [r4, #4]
 800404a:	bf08      	it	eq
 800404c:	f8c8 1000 	streq.w	r1, [r8]
 8004050:	5162      	str	r2, [r4, r5]
 8004052:	604b      	str	r3, [r1, #4]
 8004054:	4630      	mov	r0, r6
 8004056:	f000 f82f 	bl	80040b8 <__malloc_unlock>
 800405a:	f104 000b 	add.w	r0, r4, #11
 800405e:	1d23      	adds	r3, r4, #4
 8004060:	f020 0007 	bic.w	r0, r0, #7
 8004064:	1ac2      	subs	r2, r0, r3
 8004066:	bf1c      	itt	ne
 8004068:	1a1b      	subne	r3, r3, r0
 800406a:	50a3      	strne	r3, [r4, r2]
 800406c:	e7af      	b.n	8003fce <_malloc_r+0x22>
 800406e:	6862      	ldr	r2, [r4, #4]
 8004070:	42a3      	cmp	r3, r4
 8004072:	bf0c      	ite	eq
 8004074:	f8c8 2000 	streq.w	r2, [r8]
 8004078:	605a      	strne	r2, [r3, #4]
 800407a:	e7eb      	b.n	8004054 <_malloc_r+0xa8>
 800407c:	4623      	mov	r3, r4
 800407e:	6864      	ldr	r4, [r4, #4]
 8004080:	e7ae      	b.n	8003fe0 <_malloc_r+0x34>
 8004082:	463c      	mov	r4, r7
 8004084:	687f      	ldr	r7, [r7, #4]
 8004086:	e7b6      	b.n	8003ff6 <_malloc_r+0x4a>
 8004088:	461a      	mov	r2, r3
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	42a3      	cmp	r3, r4
 800408e:	d1fb      	bne.n	8004088 <_malloc_r+0xdc>
 8004090:	2300      	movs	r3, #0
 8004092:	6053      	str	r3, [r2, #4]
 8004094:	e7de      	b.n	8004054 <_malloc_r+0xa8>
 8004096:	230c      	movs	r3, #12
 8004098:	4630      	mov	r0, r6
 800409a:	6033      	str	r3, [r6, #0]
 800409c:	f000 f80c 	bl	80040b8 <__malloc_unlock>
 80040a0:	e794      	b.n	8003fcc <_malloc_r+0x20>
 80040a2:	6005      	str	r5, [r0, #0]
 80040a4:	e7d6      	b.n	8004054 <_malloc_r+0xa8>
 80040a6:	bf00      	nop
 80040a8:	200002b0 	.word	0x200002b0

080040ac <__malloc_lock>:
 80040ac:	4801      	ldr	r0, [pc, #4]	@ (80040b4 <__malloc_lock+0x8>)
 80040ae:	f7ff bf11 	b.w	8003ed4 <__retarget_lock_acquire_recursive>
 80040b2:	bf00      	nop
 80040b4:	200002a8 	.word	0x200002a8

080040b8 <__malloc_unlock>:
 80040b8:	4801      	ldr	r0, [pc, #4]	@ (80040c0 <__malloc_unlock+0x8>)
 80040ba:	f7ff bf0c 	b.w	8003ed6 <__retarget_lock_release_recursive>
 80040be:	bf00      	nop
 80040c0:	200002a8 	.word	0x200002a8

080040c4 <__ssputs_r>:
 80040c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c8:	461f      	mov	r7, r3
 80040ca:	688e      	ldr	r6, [r1, #8]
 80040cc:	4682      	mov	sl, r0
 80040ce:	42be      	cmp	r6, r7
 80040d0:	460c      	mov	r4, r1
 80040d2:	4690      	mov	r8, r2
 80040d4:	680b      	ldr	r3, [r1, #0]
 80040d6:	d82d      	bhi.n	8004134 <__ssputs_r+0x70>
 80040d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040e0:	d026      	beq.n	8004130 <__ssputs_r+0x6c>
 80040e2:	6965      	ldr	r5, [r4, #20]
 80040e4:	6909      	ldr	r1, [r1, #16]
 80040e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040ea:	eba3 0901 	sub.w	r9, r3, r1
 80040ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040f2:	1c7b      	adds	r3, r7, #1
 80040f4:	444b      	add	r3, r9
 80040f6:	106d      	asrs	r5, r5, #1
 80040f8:	429d      	cmp	r5, r3
 80040fa:	bf38      	it	cc
 80040fc:	461d      	movcc	r5, r3
 80040fe:	0553      	lsls	r3, r2, #21
 8004100:	d527      	bpl.n	8004152 <__ssputs_r+0x8e>
 8004102:	4629      	mov	r1, r5
 8004104:	f7ff ff52 	bl	8003fac <_malloc_r>
 8004108:	4606      	mov	r6, r0
 800410a:	b360      	cbz	r0, 8004166 <__ssputs_r+0xa2>
 800410c:	464a      	mov	r2, r9
 800410e:	6921      	ldr	r1, [r4, #16]
 8004110:	f000 faf8 	bl	8004704 <memcpy>
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800411a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800411e:	81a3      	strh	r3, [r4, #12]
 8004120:	6126      	str	r6, [r4, #16]
 8004122:	444e      	add	r6, r9
 8004124:	6026      	str	r6, [r4, #0]
 8004126:	463e      	mov	r6, r7
 8004128:	6165      	str	r5, [r4, #20]
 800412a:	eba5 0509 	sub.w	r5, r5, r9
 800412e:	60a5      	str	r5, [r4, #8]
 8004130:	42be      	cmp	r6, r7
 8004132:	d900      	bls.n	8004136 <__ssputs_r+0x72>
 8004134:	463e      	mov	r6, r7
 8004136:	4632      	mov	r2, r6
 8004138:	4641      	mov	r1, r8
 800413a:	6820      	ldr	r0, [r4, #0]
 800413c:	f000 faaa 	bl	8004694 <memmove>
 8004140:	2000      	movs	r0, #0
 8004142:	68a3      	ldr	r3, [r4, #8]
 8004144:	1b9b      	subs	r3, r3, r6
 8004146:	60a3      	str	r3, [r4, #8]
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	4433      	add	r3, r6
 800414c:	6023      	str	r3, [r4, #0]
 800414e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004152:	462a      	mov	r2, r5
 8004154:	f000 fae4 	bl	8004720 <_realloc_r>
 8004158:	4606      	mov	r6, r0
 800415a:	2800      	cmp	r0, #0
 800415c:	d1e0      	bne.n	8004120 <__ssputs_r+0x5c>
 800415e:	4650      	mov	r0, sl
 8004160:	6921      	ldr	r1, [r4, #16]
 8004162:	f7ff feb9 	bl	8003ed8 <_free_r>
 8004166:	230c      	movs	r3, #12
 8004168:	f8ca 3000 	str.w	r3, [sl]
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	f04f 30ff 	mov.w	r0, #4294967295
 8004172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004176:	81a3      	strh	r3, [r4, #12]
 8004178:	e7e9      	b.n	800414e <__ssputs_r+0x8a>
	...

0800417c <_svfiprintf_r>:
 800417c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004180:	4698      	mov	r8, r3
 8004182:	898b      	ldrh	r3, [r1, #12]
 8004184:	4607      	mov	r7, r0
 8004186:	061b      	lsls	r3, r3, #24
 8004188:	460d      	mov	r5, r1
 800418a:	4614      	mov	r4, r2
 800418c:	b09d      	sub	sp, #116	@ 0x74
 800418e:	d510      	bpl.n	80041b2 <_svfiprintf_r+0x36>
 8004190:	690b      	ldr	r3, [r1, #16]
 8004192:	b973      	cbnz	r3, 80041b2 <_svfiprintf_r+0x36>
 8004194:	2140      	movs	r1, #64	@ 0x40
 8004196:	f7ff ff09 	bl	8003fac <_malloc_r>
 800419a:	6028      	str	r0, [r5, #0]
 800419c:	6128      	str	r0, [r5, #16]
 800419e:	b930      	cbnz	r0, 80041ae <_svfiprintf_r+0x32>
 80041a0:	230c      	movs	r3, #12
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	b01d      	add	sp, #116	@ 0x74
 80041aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ae:	2340      	movs	r3, #64	@ 0x40
 80041b0:	616b      	str	r3, [r5, #20]
 80041b2:	2300      	movs	r3, #0
 80041b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80041b6:	2320      	movs	r3, #32
 80041b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041bc:	2330      	movs	r3, #48	@ 0x30
 80041be:	f04f 0901 	mov.w	r9, #1
 80041c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80041c6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004360 <_svfiprintf_r+0x1e4>
 80041ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041ce:	4623      	mov	r3, r4
 80041d0:	469a      	mov	sl, r3
 80041d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041d6:	b10a      	cbz	r2, 80041dc <_svfiprintf_r+0x60>
 80041d8:	2a25      	cmp	r2, #37	@ 0x25
 80041da:	d1f9      	bne.n	80041d0 <_svfiprintf_r+0x54>
 80041dc:	ebba 0b04 	subs.w	fp, sl, r4
 80041e0:	d00b      	beq.n	80041fa <_svfiprintf_r+0x7e>
 80041e2:	465b      	mov	r3, fp
 80041e4:	4622      	mov	r2, r4
 80041e6:	4629      	mov	r1, r5
 80041e8:	4638      	mov	r0, r7
 80041ea:	f7ff ff6b 	bl	80040c4 <__ssputs_r>
 80041ee:	3001      	adds	r0, #1
 80041f0:	f000 80a7 	beq.w	8004342 <_svfiprintf_r+0x1c6>
 80041f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041f6:	445a      	add	r2, fp
 80041f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80041fa:	f89a 3000 	ldrb.w	r3, [sl]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 809f 	beq.w	8004342 <_svfiprintf_r+0x1c6>
 8004204:	2300      	movs	r3, #0
 8004206:	f04f 32ff 	mov.w	r2, #4294967295
 800420a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800420e:	f10a 0a01 	add.w	sl, sl, #1
 8004212:	9304      	str	r3, [sp, #16]
 8004214:	9307      	str	r3, [sp, #28]
 8004216:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800421a:	931a      	str	r3, [sp, #104]	@ 0x68
 800421c:	4654      	mov	r4, sl
 800421e:	2205      	movs	r2, #5
 8004220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004224:	484e      	ldr	r0, [pc, #312]	@ (8004360 <_svfiprintf_r+0x1e4>)
 8004226:	f000 fa5f 	bl	80046e8 <memchr>
 800422a:	9a04      	ldr	r2, [sp, #16]
 800422c:	b9d8      	cbnz	r0, 8004266 <_svfiprintf_r+0xea>
 800422e:	06d0      	lsls	r0, r2, #27
 8004230:	bf44      	itt	mi
 8004232:	2320      	movmi	r3, #32
 8004234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004238:	0711      	lsls	r1, r2, #28
 800423a:	bf44      	itt	mi
 800423c:	232b      	movmi	r3, #43	@ 0x2b
 800423e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004242:	f89a 3000 	ldrb.w	r3, [sl]
 8004246:	2b2a      	cmp	r3, #42	@ 0x2a
 8004248:	d015      	beq.n	8004276 <_svfiprintf_r+0xfa>
 800424a:	4654      	mov	r4, sl
 800424c:	2000      	movs	r0, #0
 800424e:	f04f 0c0a 	mov.w	ip, #10
 8004252:	9a07      	ldr	r2, [sp, #28]
 8004254:	4621      	mov	r1, r4
 8004256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800425a:	3b30      	subs	r3, #48	@ 0x30
 800425c:	2b09      	cmp	r3, #9
 800425e:	d94b      	bls.n	80042f8 <_svfiprintf_r+0x17c>
 8004260:	b1b0      	cbz	r0, 8004290 <_svfiprintf_r+0x114>
 8004262:	9207      	str	r2, [sp, #28]
 8004264:	e014      	b.n	8004290 <_svfiprintf_r+0x114>
 8004266:	eba0 0308 	sub.w	r3, r0, r8
 800426a:	fa09 f303 	lsl.w	r3, r9, r3
 800426e:	4313      	orrs	r3, r2
 8004270:	46a2      	mov	sl, r4
 8004272:	9304      	str	r3, [sp, #16]
 8004274:	e7d2      	b.n	800421c <_svfiprintf_r+0xa0>
 8004276:	9b03      	ldr	r3, [sp, #12]
 8004278:	1d19      	adds	r1, r3, #4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	9103      	str	r1, [sp, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	bfbb      	ittet	lt
 8004282:	425b      	neglt	r3, r3
 8004284:	f042 0202 	orrlt.w	r2, r2, #2
 8004288:	9307      	strge	r3, [sp, #28]
 800428a:	9307      	strlt	r3, [sp, #28]
 800428c:	bfb8      	it	lt
 800428e:	9204      	strlt	r2, [sp, #16]
 8004290:	7823      	ldrb	r3, [r4, #0]
 8004292:	2b2e      	cmp	r3, #46	@ 0x2e
 8004294:	d10a      	bne.n	80042ac <_svfiprintf_r+0x130>
 8004296:	7863      	ldrb	r3, [r4, #1]
 8004298:	2b2a      	cmp	r3, #42	@ 0x2a
 800429a:	d132      	bne.n	8004302 <_svfiprintf_r+0x186>
 800429c:	9b03      	ldr	r3, [sp, #12]
 800429e:	3402      	adds	r4, #2
 80042a0:	1d1a      	adds	r2, r3, #4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	9203      	str	r2, [sp, #12]
 80042a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042aa:	9305      	str	r3, [sp, #20]
 80042ac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004364 <_svfiprintf_r+0x1e8>
 80042b0:	2203      	movs	r2, #3
 80042b2:	4650      	mov	r0, sl
 80042b4:	7821      	ldrb	r1, [r4, #0]
 80042b6:	f000 fa17 	bl	80046e8 <memchr>
 80042ba:	b138      	cbz	r0, 80042cc <_svfiprintf_r+0x150>
 80042bc:	2240      	movs	r2, #64	@ 0x40
 80042be:	9b04      	ldr	r3, [sp, #16]
 80042c0:	eba0 000a 	sub.w	r0, r0, sl
 80042c4:	4082      	lsls	r2, r0
 80042c6:	4313      	orrs	r3, r2
 80042c8:	3401      	adds	r4, #1
 80042ca:	9304      	str	r3, [sp, #16]
 80042cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d0:	2206      	movs	r2, #6
 80042d2:	4825      	ldr	r0, [pc, #148]	@ (8004368 <_svfiprintf_r+0x1ec>)
 80042d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042d8:	f000 fa06 	bl	80046e8 <memchr>
 80042dc:	2800      	cmp	r0, #0
 80042de:	d036      	beq.n	800434e <_svfiprintf_r+0x1d2>
 80042e0:	4b22      	ldr	r3, [pc, #136]	@ (800436c <_svfiprintf_r+0x1f0>)
 80042e2:	bb1b      	cbnz	r3, 800432c <_svfiprintf_r+0x1b0>
 80042e4:	9b03      	ldr	r3, [sp, #12]
 80042e6:	3307      	adds	r3, #7
 80042e8:	f023 0307 	bic.w	r3, r3, #7
 80042ec:	3308      	adds	r3, #8
 80042ee:	9303      	str	r3, [sp, #12]
 80042f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042f2:	4433      	add	r3, r6
 80042f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042f6:	e76a      	b.n	80041ce <_svfiprintf_r+0x52>
 80042f8:	460c      	mov	r4, r1
 80042fa:	2001      	movs	r0, #1
 80042fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004300:	e7a8      	b.n	8004254 <_svfiprintf_r+0xd8>
 8004302:	2300      	movs	r3, #0
 8004304:	f04f 0c0a 	mov.w	ip, #10
 8004308:	4619      	mov	r1, r3
 800430a:	3401      	adds	r4, #1
 800430c:	9305      	str	r3, [sp, #20]
 800430e:	4620      	mov	r0, r4
 8004310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004314:	3a30      	subs	r2, #48	@ 0x30
 8004316:	2a09      	cmp	r2, #9
 8004318:	d903      	bls.n	8004322 <_svfiprintf_r+0x1a6>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0c6      	beq.n	80042ac <_svfiprintf_r+0x130>
 800431e:	9105      	str	r1, [sp, #20]
 8004320:	e7c4      	b.n	80042ac <_svfiprintf_r+0x130>
 8004322:	4604      	mov	r4, r0
 8004324:	2301      	movs	r3, #1
 8004326:	fb0c 2101 	mla	r1, ip, r1, r2
 800432a:	e7f0      	b.n	800430e <_svfiprintf_r+0x192>
 800432c:	ab03      	add	r3, sp, #12
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	462a      	mov	r2, r5
 8004332:	4638      	mov	r0, r7
 8004334:	4b0e      	ldr	r3, [pc, #56]	@ (8004370 <_svfiprintf_r+0x1f4>)
 8004336:	a904      	add	r1, sp, #16
 8004338:	f3af 8000 	nop.w
 800433c:	1c42      	adds	r2, r0, #1
 800433e:	4606      	mov	r6, r0
 8004340:	d1d6      	bne.n	80042f0 <_svfiprintf_r+0x174>
 8004342:	89ab      	ldrh	r3, [r5, #12]
 8004344:	065b      	lsls	r3, r3, #25
 8004346:	f53f af2d 	bmi.w	80041a4 <_svfiprintf_r+0x28>
 800434a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800434c:	e72c      	b.n	80041a8 <_svfiprintf_r+0x2c>
 800434e:	ab03      	add	r3, sp, #12
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	462a      	mov	r2, r5
 8004354:	4638      	mov	r0, r7
 8004356:	4b06      	ldr	r3, [pc, #24]	@ (8004370 <_svfiprintf_r+0x1f4>)
 8004358:	a904      	add	r1, sp, #16
 800435a:	f000 f87d 	bl	8004458 <_printf_i>
 800435e:	e7ed      	b.n	800433c <_svfiprintf_r+0x1c0>
 8004360:	08004eae 	.word	0x08004eae
 8004364:	08004eb4 	.word	0x08004eb4
 8004368:	08004eb8 	.word	0x08004eb8
 800436c:	00000000 	.word	0x00000000
 8004370:	080040c5 	.word	0x080040c5

08004374 <_printf_common>:
 8004374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004378:	4616      	mov	r6, r2
 800437a:	4698      	mov	r8, r3
 800437c:	688a      	ldr	r2, [r1, #8]
 800437e:	690b      	ldr	r3, [r1, #16]
 8004380:	4607      	mov	r7, r0
 8004382:	4293      	cmp	r3, r2
 8004384:	bfb8      	it	lt
 8004386:	4613      	movlt	r3, r2
 8004388:	6033      	str	r3, [r6, #0]
 800438a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800438e:	460c      	mov	r4, r1
 8004390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004394:	b10a      	cbz	r2, 800439a <_printf_common+0x26>
 8004396:	3301      	adds	r3, #1
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	0699      	lsls	r1, r3, #26
 800439e:	bf42      	ittt	mi
 80043a0:	6833      	ldrmi	r3, [r6, #0]
 80043a2:	3302      	addmi	r3, #2
 80043a4:	6033      	strmi	r3, [r6, #0]
 80043a6:	6825      	ldr	r5, [r4, #0]
 80043a8:	f015 0506 	ands.w	r5, r5, #6
 80043ac:	d106      	bne.n	80043bc <_printf_common+0x48>
 80043ae:	f104 0a19 	add.w	sl, r4, #25
 80043b2:	68e3      	ldr	r3, [r4, #12]
 80043b4:	6832      	ldr	r2, [r6, #0]
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	42ab      	cmp	r3, r5
 80043ba:	dc2b      	bgt.n	8004414 <_printf_common+0xa0>
 80043bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043c0:	6822      	ldr	r2, [r4, #0]
 80043c2:	3b00      	subs	r3, #0
 80043c4:	bf18      	it	ne
 80043c6:	2301      	movne	r3, #1
 80043c8:	0692      	lsls	r2, r2, #26
 80043ca:	d430      	bmi.n	800442e <_printf_common+0xba>
 80043cc:	4641      	mov	r1, r8
 80043ce:	4638      	mov	r0, r7
 80043d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043d4:	47c8      	blx	r9
 80043d6:	3001      	adds	r0, #1
 80043d8:	d023      	beq.n	8004422 <_printf_common+0xae>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	6922      	ldr	r2, [r4, #16]
 80043de:	f003 0306 	and.w	r3, r3, #6
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	bf14      	ite	ne
 80043e6:	2500      	movne	r5, #0
 80043e8:	6833      	ldreq	r3, [r6, #0]
 80043ea:	f04f 0600 	mov.w	r6, #0
 80043ee:	bf08      	it	eq
 80043f0:	68e5      	ldreq	r5, [r4, #12]
 80043f2:	f104 041a 	add.w	r4, r4, #26
 80043f6:	bf08      	it	eq
 80043f8:	1aed      	subeq	r5, r5, r3
 80043fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043fe:	bf08      	it	eq
 8004400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004404:	4293      	cmp	r3, r2
 8004406:	bfc4      	itt	gt
 8004408:	1a9b      	subgt	r3, r3, r2
 800440a:	18ed      	addgt	r5, r5, r3
 800440c:	42b5      	cmp	r5, r6
 800440e:	d11a      	bne.n	8004446 <_printf_common+0xd2>
 8004410:	2000      	movs	r0, #0
 8004412:	e008      	b.n	8004426 <_printf_common+0xb2>
 8004414:	2301      	movs	r3, #1
 8004416:	4652      	mov	r2, sl
 8004418:	4641      	mov	r1, r8
 800441a:	4638      	mov	r0, r7
 800441c:	47c8      	blx	r9
 800441e:	3001      	adds	r0, #1
 8004420:	d103      	bne.n	800442a <_printf_common+0xb6>
 8004422:	f04f 30ff 	mov.w	r0, #4294967295
 8004426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800442a:	3501      	adds	r5, #1
 800442c:	e7c1      	b.n	80043b2 <_printf_common+0x3e>
 800442e:	2030      	movs	r0, #48	@ 0x30
 8004430:	18e1      	adds	r1, r4, r3
 8004432:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800443c:	4422      	add	r2, r4
 800443e:	3302      	adds	r3, #2
 8004440:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004444:	e7c2      	b.n	80043cc <_printf_common+0x58>
 8004446:	2301      	movs	r3, #1
 8004448:	4622      	mov	r2, r4
 800444a:	4641      	mov	r1, r8
 800444c:	4638      	mov	r0, r7
 800444e:	47c8      	blx	r9
 8004450:	3001      	adds	r0, #1
 8004452:	d0e6      	beq.n	8004422 <_printf_common+0xae>
 8004454:	3601      	adds	r6, #1
 8004456:	e7d9      	b.n	800440c <_printf_common+0x98>

08004458 <_printf_i>:
 8004458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800445c:	7e0f      	ldrb	r7, [r1, #24]
 800445e:	4691      	mov	r9, r2
 8004460:	2f78      	cmp	r7, #120	@ 0x78
 8004462:	4680      	mov	r8, r0
 8004464:	460c      	mov	r4, r1
 8004466:	469a      	mov	sl, r3
 8004468:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800446a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800446e:	d807      	bhi.n	8004480 <_printf_i+0x28>
 8004470:	2f62      	cmp	r7, #98	@ 0x62
 8004472:	d80a      	bhi.n	800448a <_printf_i+0x32>
 8004474:	2f00      	cmp	r7, #0
 8004476:	f000 80d1 	beq.w	800461c <_printf_i+0x1c4>
 800447a:	2f58      	cmp	r7, #88	@ 0x58
 800447c:	f000 80b8 	beq.w	80045f0 <_printf_i+0x198>
 8004480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004484:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004488:	e03a      	b.n	8004500 <_printf_i+0xa8>
 800448a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800448e:	2b15      	cmp	r3, #21
 8004490:	d8f6      	bhi.n	8004480 <_printf_i+0x28>
 8004492:	a101      	add	r1, pc, #4	@ (adr r1, 8004498 <_printf_i+0x40>)
 8004494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004498:	080044f1 	.word	0x080044f1
 800449c:	08004505 	.word	0x08004505
 80044a0:	08004481 	.word	0x08004481
 80044a4:	08004481 	.word	0x08004481
 80044a8:	08004481 	.word	0x08004481
 80044ac:	08004481 	.word	0x08004481
 80044b0:	08004505 	.word	0x08004505
 80044b4:	08004481 	.word	0x08004481
 80044b8:	08004481 	.word	0x08004481
 80044bc:	08004481 	.word	0x08004481
 80044c0:	08004481 	.word	0x08004481
 80044c4:	08004603 	.word	0x08004603
 80044c8:	0800452f 	.word	0x0800452f
 80044cc:	080045bd 	.word	0x080045bd
 80044d0:	08004481 	.word	0x08004481
 80044d4:	08004481 	.word	0x08004481
 80044d8:	08004625 	.word	0x08004625
 80044dc:	08004481 	.word	0x08004481
 80044e0:	0800452f 	.word	0x0800452f
 80044e4:	08004481 	.word	0x08004481
 80044e8:	08004481 	.word	0x08004481
 80044ec:	080045c5 	.word	0x080045c5
 80044f0:	6833      	ldr	r3, [r6, #0]
 80044f2:	1d1a      	adds	r2, r3, #4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6032      	str	r2, [r6, #0]
 80044f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004500:	2301      	movs	r3, #1
 8004502:	e09c      	b.n	800463e <_printf_i+0x1e6>
 8004504:	6833      	ldr	r3, [r6, #0]
 8004506:	6820      	ldr	r0, [r4, #0]
 8004508:	1d19      	adds	r1, r3, #4
 800450a:	6031      	str	r1, [r6, #0]
 800450c:	0606      	lsls	r6, r0, #24
 800450e:	d501      	bpl.n	8004514 <_printf_i+0xbc>
 8004510:	681d      	ldr	r5, [r3, #0]
 8004512:	e003      	b.n	800451c <_printf_i+0xc4>
 8004514:	0645      	lsls	r5, r0, #25
 8004516:	d5fb      	bpl.n	8004510 <_printf_i+0xb8>
 8004518:	f9b3 5000 	ldrsh.w	r5, [r3]
 800451c:	2d00      	cmp	r5, #0
 800451e:	da03      	bge.n	8004528 <_printf_i+0xd0>
 8004520:	232d      	movs	r3, #45	@ 0x2d
 8004522:	426d      	negs	r5, r5
 8004524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004528:	230a      	movs	r3, #10
 800452a:	4858      	ldr	r0, [pc, #352]	@ (800468c <_printf_i+0x234>)
 800452c:	e011      	b.n	8004552 <_printf_i+0xfa>
 800452e:	6821      	ldr	r1, [r4, #0]
 8004530:	6833      	ldr	r3, [r6, #0]
 8004532:	0608      	lsls	r0, r1, #24
 8004534:	f853 5b04 	ldr.w	r5, [r3], #4
 8004538:	d402      	bmi.n	8004540 <_printf_i+0xe8>
 800453a:	0649      	lsls	r1, r1, #25
 800453c:	bf48      	it	mi
 800453e:	b2ad      	uxthmi	r5, r5
 8004540:	2f6f      	cmp	r7, #111	@ 0x6f
 8004542:	6033      	str	r3, [r6, #0]
 8004544:	bf14      	ite	ne
 8004546:	230a      	movne	r3, #10
 8004548:	2308      	moveq	r3, #8
 800454a:	4850      	ldr	r0, [pc, #320]	@ (800468c <_printf_i+0x234>)
 800454c:	2100      	movs	r1, #0
 800454e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004552:	6866      	ldr	r6, [r4, #4]
 8004554:	2e00      	cmp	r6, #0
 8004556:	60a6      	str	r6, [r4, #8]
 8004558:	db05      	blt.n	8004566 <_printf_i+0x10e>
 800455a:	6821      	ldr	r1, [r4, #0]
 800455c:	432e      	orrs	r6, r5
 800455e:	f021 0104 	bic.w	r1, r1, #4
 8004562:	6021      	str	r1, [r4, #0]
 8004564:	d04b      	beq.n	80045fe <_printf_i+0x1a6>
 8004566:	4616      	mov	r6, r2
 8004568:	fbb5 f1f3 	udiv	r1, r5, r3
 800456c:	fb03 5711 	mls	r7, r3, r1, r5
 8004570:	5dc7      	ldrb	r7, [r0, r7]
 8004572:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004576:	462f      	mov	r7, r5
 8004578:	42bb      	cmp	r3, r7
 800457a:	460d      	mov	r5, r1
 800457c:	d9f4      	bls.n	8004568 <_printf_i+0x110>
 800457e:	2b08      	cmp	r3, #8
 8004580:	d10b      	bne.n	800459a <_printf_i+0x142>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	07df      	lsls	r7, r3, #31
 8004586:	d508      	bpl.n	800459a <_printf_i+0x142>
 8004588:	6923      	ldr	r3, [r4, #16]
 800458a:	6861      	ldr	r1, [r4, #4]
 800458c:	4299      	cmp	r1, r3
 800458e:	bfde      	ittt	le
 8004590:	2330      	movle	r3, #48	@ 0x30
 8004592:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004596:	f106 36ff 	addle.w	r6, r6, #4294967295
 800459a:	1b92      	subs	r2, r2, r6
 800459c:	6122      	str	r2, [r4, #16]
 800459e:	464b      	mov	r3, r9
 80045a0:	4621      	mov	r1, r4
 80045a2:	4640      	mov	r0, r8
 80045a4:	f8cd a000 	str.w	sl, [sp]
 80045a8:	aa03      	add	r2, sp, #12
 80045aa:	f7ff fee3 	bl	8004374 <_printf_common>
 80045ae:	3001      	adds	r0, #1
 80045b0:	d14a      	bne.n	8004648 <_printf_i+0x1f0>
 80045b2:	f04f 30ff 	mov.w	r0, #4294967295
 80045b6:	b004      	add	sp, #16
 80045b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	f043 0320 	orr.w	r3, r3, #32
 80045c2:	6023      	str	r3, [r4, #0]
 80045c4:	2778      	movs	r7, #120	@ 0x78
 80045c6:	4832      	ldr	r0, [pc, #200]	@ (8004690 <_printf_i+0x238>)
 80045c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	6831      	ldr	r1, [r6, #0]
 80045d0:	061f      	lsls	r7, r3, #24
 80045d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80045d6:	d402      	bmi.n	80045de <_printf_i+0x186>
 80045d8:	065f      	lsls	r7, r3, #25
 80045da:	bf48      	it	mi
 80045dc:	b2ad      	uxthmi	r5, r5
 80045de:	6031      	str	r1, [r6, #0]
 80045e0:	07d9      	lsls	r1, r3, #31
 80045e2:	bf44      	itt	mi
 80045e4:	f043 0320 	orrmi.w	r3, r3, #32
 80045e8:	6023      	strmi	r3, [r4, #0]
 80045ea:	b11d      	cbz	r5, 80045f4 <_printf_i+0x19c>
 80045ec:	2310      	movs	r3, #16
 80045ee:	e7ad      	b.n	800454c <_printf_i+0xf4>
 80045f0:	4826      	ldr	r0, [pc, #152]	@ (800468c <_printf_i+0x234>)
 80045f2:	e7e9      	b.n	80045c8 <_printf_i+0x170>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	f023 0320 	bic.w	r3, r3, #32
 80045fa:	6023      	str	r3, [r4, #0]
 80045fc:	e7f6      	b.n	80045ec <_printf_i+0x194>
 80045fe:	4616      	mov	r6, r2
 8004600:	e7bd      	b.n	800457e <_printf_i+0x126>
 8004602:	6833      	ldr	r3, [r6, #0]
 8004604:	6825      	ldr	r5, [r4, #0]
 8004606:	1d18      	adds	r0, r3, #4
 8004608:	6961      	ldr	r1, [r4, #20]
 800460a:	6030      	str	r0, [r6, #0]
 800460c:	062e      	lsls	r6, r5, #24
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	d501      	bpl.n	8004616 <_printf_i+0x1be>
 8004612:	6019      	str	r1, [r3, #0]
 8004614:	e002      	b.n	800461c <_printf_i+0x1c4>
 8004616:	0668      	lsls	r0, r5, #25
 8004618:	d5fb      	bpl.n	8004612 <_printf_i+0x1ba>
 800461a:	8019      	strh	r1, [r3, #0]
 800461c:	2300      	movs	r3, #0
 800461e:	4616      	mov	r6, r2
 8004620:	6123      	str	r3, [r4, #16]
 8004622:	e7bc      	b.n	800459e <_printf_i+0x146>
 8004624:	6833      	ldr	r3, [r6, #0]
 8004626:	2100      	movs	r1, #0
 8004628:	1d1a      	adds	r2, r3, #4
 800462a:	6032      	str	r2, [r6, #0]
 800462c:	681e      	ldr	r6, [r3, #0]
 800462e:	6862      	ldr	r2, [r4, #4]
 8004630:	4630      	mov	r0, r6
 8004632:	f000 f859 	bl	80046e8 <memchr>
 8004636:	b108      	cbz	r0, 800463c <_printf_i+0x1e4>
 8004638:	1b80      	subs	r0, r0, r6
 800463a:	6060      	str	r0, [r4, #4]
 800463c:	6863      	ldr	r3, [r4, #4]
 800463e:	6123      	str	r3, [r4, #16]
 8004640:	2300      	movs	r3, #0
 8004642:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004646:	e7aa      	b.n	800459e <_printf_i+0x146>
 8004648:	4632      	mov	r2, r6
 800464a:	4649      	mov	r1, r9
 800464c:	4640      	mov	r0, r8
 800464e:	6923      	ldr	r3, [r4, #16]
 8004650:	47d0      	blx	sl
 8004652:	3001      	adds	r0, #1
 8004654:	d0ad      	beq.n	80045b2 <_printf_i+0x15a>
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	079b      	lsls	r3, r3, #30
 800465a:	d413      	bmi.n	8004684 <_printf_i+0x22c>
 800465c:	68e0      	ldr	r0, [r4, #12]
 800465e:	9b03      	ldr	r3, [sp, #12]
 8004660:	4298      	cmp	r0, r3
 8004662:	bfb8      	it	lt
 8004664:	4618      	movlt	r0, r3
 8004666:	e7a6      	b.n	80045b6 <_printf_i+0x15e>
 8004668:	2301      	movs	r3, #1
 800466a:	4632      	mov	r2, r6
 800466c:	4649      	mov	r1, r9
 800466e:	4640      	mov	r0, r8
 8004670:	47d0      	blx	sl
 8004672:	3001      	adds	r0, #1
 8004674:	d09d      	beq.n	80045b2 <_printf_i+0x15a>
 8004676:	3501      	adds	r5, #1
 8004678:	68e3      	ldr	r3, [r4, #12]
 800467a:	9903      	ldr	r1, [sp, #12]
 800467c:	1a5b      	subs	r3, r3, r1
 800467e:	42ab      	cmp	r3, r5
 8004680:	dcf2      	bgt.n	8004668 <_printf_i+0x210>
 8004682:	e7eb      	b.n	800465c <_printf_i+0x204>
 8004684:	2500      	movs	r5, #0
 8004686:	f104 0619 	add.w	r6, r4, #25
 800468a:	e7f5      	b.n	8004678 <_printf_i+0x220>
 800468c:	08004ebf 	.word	0x08004ebf
 8004690:	08004ed0 	.word	0x08004ed0

08004694 <memmove>:
 8004694:	4288      	cmp	r0, r1
 8004696:	b510      	push	{r4, lr}
 8004698:	eb01 0402 	add.w	r4, r1, r2
 800469c:	d902      	bls.n	80046a4 <memmove+0x10>
 800469e:	4284      	cmp	r4, r0
 80046a0:	4623      	mov	r3, r4
 80046a2:	d807      	bhi.n	80046b4 <memmove+0x20>
 80046a4:	1e43      	subs	r3, r0, #1
 80046a6:	42a1      	cmp	r1, r4
 80046a8:	d008      	beq.n	80046bc <memmove+0x28>
 80046aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046b2:	e7f8      	b.n	80046a6 <memmove+0x12>
 80046b4:	4601      	mov	r1, r0
 80046b6:	4402      	add	r2, r0
 80046b8:	428a      	cmp	r2, r1
 80046ba:	d100      	bne.n	80046be <memmove+0x2a>
 80046bc:	bd10      	pop	{r4, pc}
 80046be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046c6:	e7f7      	b.n	80046b8 <memmove+0x24>

080046c8 <_sbrk_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	2300      	movs	r3, #0
 80046cc:	4d05      	ldr	r5, [pc, #20]	@ (80046e4 <_sbrk_r+0x1c>)
 80046ce:	4604      	mov	r4, r0
 80046d0:	4608      	mov	r0, r1
 80046d2:	602b      	str	r3, [r5, #0]
 80046d4:	f7fd f838 	bl	8001748 <_sbrk>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d102      	bne.n	80046e2 <_sbrk_r+0x1a>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	b103      	cbz	r3, 80046e2 <_sbrk_r+0x1a>
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	200002a4 	.word	0x200002a4

080046e8 <memchr>:
 80046e8:	4603      	mov	r3, r0
 80046ea:	b510      	push	{r4, lr}
 80046ec:	b2c9      	uxtb	r1, r1
 80046ee:	4402      	add	r2, r0
 80046f0:	4293      	cmp	r3, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	d101      	bne.n	80046fa <memchr+0x12>
 80046f6:	2000      	movs	r0, #0
 80046f8:	e003      	b.n	8004702 <memchr+0x1a>
 80046fa:	7804      	ldrb	r4, [r0, #0]
 80046fc:	3301      	adds	r3, #1
 80046fe:	428c      	cmp	r4, r1
 8004700:	d1f6      	bne.n	80046f0 <memchr+0x8>
 8004702:	bd10      	pop	{r4, pc}

08004704 <memcpy>:
 8004704:	440a      	add	r2, r1
 8004706:	4291      	cmp	r1, r2
 8004708:	f100 33ff 	add.w	r3, r0, #4294967295
 800470c:	d100      	bne.n	8004710 <memcpy+0xc>
 800470e:	4770      	bx	lr
 8004710:	b510      	push	{r4, lr}
 8004712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004716:	4291      	cmp	r1, r2
 8004718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800471c:	d1f9      	bne.n	8004712 <memcpy+0xe>
 800471e:	bd10      	pop	{r4, pc}

08004720 <_realloc_r>:
 8004720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004724:	4607      	mov	r7, r0
 8004726:	4614      	mov	r4, r2
 8004728:	460d      	mov	r5, r1
 800472a:	b921      	cbnz	r1, 8004736 <_realloc_r+0x16>
 800472c:	4611      	mov	r1, r2
 800472e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004732:	f7ff bc3b 	b.w	8003fac <_malloc_r>
 8004736:	b92a      	cbnz	r2, 8004744 <_realloc_r+0x24>
 8004738:	f7ff fbce 	bl	8003ed8 <_free_r>
 800473c:	4625      	mov	r5, r4
 800473e:	4628      	mov	r0, r5
 8004740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004744:	f000 f81a 	bl	800477c <_malloc_usable_size_r>
 8004748:	4284      	cmp	r4, r0
 800474a:	4606      	mov	r6, r0
 800474c:	d802      	bhi.n	8004754 <_realloc_r+0x34>
 800474e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004752:	d8f4      	bhi.n	800473e <_realloc_r+0x1e>
 8004754:	4621      	mov	r1, r4
 8004756:	4638      	mov	r0, r7
 8004758:	f7ff fc28 	bl	8003fac <_malloc_r>
 800475c:	4680      	mov	r8, r0
 800475e:	b908      	cbnz	r0, 8004764 <_realloc_r+0x44>
 8004760:	4645      	mov	r5, r8
 8004762:	e7ec      	b.n	800473e <_realloc_r+0x1e>
 8004764:	42b4      	cmp	r4, r6
 8004766:	4622      	mov	r2, r4
 8004768:	4629      	mov	r1, r5
 800476a:	bf28      	it	cs
 800476c:	4632      	movcs	r2, r6
 800476e:	f7ff ffc9 	bl	8004704 <memcpy>
 8004772:	4629      	mov	r1, r5
 8004774:	4638      	mov	r0, r7
 8004776:	f7ff fbaf 	bl	8003ed8 <_free_r>
 800477a:	e7f1      	b.n	8004760 <_realloc_r+0x40>

0800477c <_malloc_usable_size_r>:
 800477c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004780:	1f18      	subs	r0, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	bfbc      	itt	lt
 8004786:	580b      	ldrlt	r3, [r1, r0]
 8004788:	18c0      	addlt	r0, r0, r3
 800478a:	4770      	bx	lr

0800478c <atan2>:
 800478c:	f000 b8f8 	b.w	8004980 <__ieee754_atan2>

08004790 <sqrt>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	4606      	mov	r6, r0
 8004794:	460f      	mov	r7, r1
 8004796:	f000 f81f 	bl	80047d8 <__ieee754_sqrt>
 800479a:	4632      	mov	r2, r6
 800479c:	4604      	mov	r4, r0
 800479e:	460d      	mov	r5, r1
 80047a0:	463b      	mov	r3, r7
 80047a2:	4630      	mov	r0, r6
 80047a4:	4639      	mov	r1, r7
 80047a6:	f7fc f931 	bl	8000a0c <__aeabi_dcmpun>
 80047aa:	b990      	cbnz	r0, 80047d2 <sqrt+0x42>
 80047ac:	2200      	movs	r2, #0
 80047ae:	2300      	movs	r3, #0
 80047b0:	4630      	mov	r0, r6
 80047b2:	4639      	mov	r1, r7
 80047b4:	f7fc f902 	bl	80009bc <__aeabi_dcmplt>
 80047b8:	b158      	cbz	r0, 80047d2 <sqrt+0x42>
 80047ba:	f7ff fb61 	bl	8003e80 <__errno>
 80047be:	2321      	movs	r3, #33	@ 0x21
 80047c0:	2200      	movs	r2, #0
 80047c2:	6003      	str	r3, [r0, #0]
 80047c4:	2300      	movs	r3, #0
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	f7fb ffaf 	bl	800072c <__aeabi_ddiv>
 80047ce:	4604      	mov	r4, r0
 80047d0:	460d      	mov	r5, r1
 80047d2:	4620      	mov	r0, r4
 80047d4:	4629      	mov	r1, r5
 80047d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047d8 <__ieee754_sqrt>:
 80047d8:	4a65      	ldr	r2, [pc, #404]	@ (8004970 <__ieee754_sqrt+0x198>)
 80047da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047de:	438a      	bics	r2, r1
 80047e0:	4606      	mov	r6, r0
 80047e2:	460f      	mov	r7, r1
 80047e4:	460b      	mov	r3, r1
 80047e6:	4604      	mov	r4, r0
 80047e8:	d10e      	bne.n	8004808 <__ieee754_sqrt+0x30>
 80047ea:	4602      	mov	r2, r0
 80047ec:	f7fb fe74 	bl	80004d8 <__aeabi_dmul>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4630      	mov	r0, r6
 80047f6:	4639      	mov	r1, r7
 80047f8:	f7fb fcb8 	bl	800016c <__adddf3>
 80047fc:	4606      	mov	r6, r0
 80047fe:	460f      	mov	r7, r1
 8004800:	4630      	mov	r0, r6
 8004802:	4639      	mov	r1, r7
 8004804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004808:	2900      	cmp	r1, #0
 800480a:	dc0c      	bgt.n	8004826 <__ieee754_sqrt+0x4e>
 800480c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8004810:	4302      	orrs	r2, r0
 8004812:	d0f5      	beq.n	8004800 <__ieee754_sqrt+0x28>
 8004814:	b189      	cbz	r1, 800483a <__ieee754_sqrt+0x62>
 8004816:	4602      	mov	r2, r0
 8004818:	f7fb fca6 	bl	8000168 <__aeabi_dsub>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	f7fb ff84 	bl	800072c <__aeabi_ddiv>
 8004824:	e7ea      	b.n	80047fc <__ieee754_sqrt+0x24>
 8004826:	150a      	asrs	r2, r1, #20
 8004828:	d115      	bne.n	8004856 <__ieee754_sqrt+0x7e>
 800482a:	2100      	movs	r1, #0
 800482c:	e009      	b.n	8004842 <__ieee754_sqrt+0x6a>
 800482e:	0ae3      	lsrs	r3, r4, #11
 8004830:	3a15      	subs	r2, #21
 8004832:	0564      	lsls	r4, r4, #21
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0fa      	beq.n	800482e <__ieee754_sqrt+0x56>
 8004838:	e7f7      	b.n	800482a <__ieee754_sqrt+0x52>
 800483a:	460a      	mov	r2, r1
 800483c:	e7fa      	b.n	8004834 <__ieee754_sqrt+0x5c>
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	3101      	adds	r1, #1
 8004842:	02d8      	lsls	r0, r3, #11
 8004844:	d5fb      	bpl.n	800483e <__ieee754_sqrt+0x66>
 8004846:	1e48      	subs	r0, r1, #1
 8004848:	1a12      	subs	r2, r2, r0
 800484a:	f1c1 0020 	rsb	r0, r1, #32
 800484e:	fa24 f000 	lsr.w	r0, r4, r0
 8004852:	4303      	orrs	r3, r0
 8004854:	408c      	lsls	r4, r1
 8004856:	2700      	movs	r7, #0
 8004858:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800485c:	2116      	movs	r1, #22
 800485e:	07d2      	lsls	r2, r2, #31
 8004860:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004864:	463a      	mov	r2, r7
 8004866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800486a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800486e:	bf5c      	itt	pl
 8004870:	005b      	lslpl	r3, r3, #1
 8004872:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8004876:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800487a:	bf58      	it	pl
 800487c:	0064      	lslpl	r4, r4, #1
 800487e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004882:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004886:	0064      	lsls	r4, r4, #1
 8004888:	1815      	adds	r5, r2, r0
 800488a:	429d      	cmp	r5, r3
 800488c:	bfde      	ittt	le
 800488e:	182a      	addle	r2, r5, r0
 8004890:	1b5b      	suble	r3, r3, r5
 8004892:	183f      	addle	r7, r7, r0
 8004894:	0fe5      	lsrs	r5, r4, #31
 8004896:	3901      	subs	r1, #1
 8004898:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800489c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80048a0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80048a4:	d1f0      	bne.n	8004888 <__ieee754_sqrt+0xb0>
 80048a6:	460d      	mov	r5, r1
 80048a8:	2620      	movs	r6, #32
 80048aa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80048ae:	4293      	cmp	r3, r2
 80048b0:	eb00 0c01 	add.w	ip, r0, r1
 80048b4:	dc02      	bgt.n	80048bc <__ieee754_sqrt+0xe4>
 80048b6:	d113      	bne.n	80048e0 <__ieee754_sqrt+0x108>
 80048b8:	45a4      	cmp	ip, r4
 80048ba:	d811      	bhi.n	80048e0 <__ieee754_sqrt+0x108>
 80048bc:	f1bc 0f00 	cmp.w	ip, #0
 80048c0:	eb0c 0100 	add.w	r1, ip, r0
 80048c4:	da3e      	bge.n	8004944 <__ieee754_sqrt+0x16c>
 80048c6:	2900      	cmp	r1, #0
 80048c8:	db3c      	blt.n	8004944 <__ieee754_sqrt+0x16c>
 80048ca:	f102 0e01 	add.w	lr, r2, #1
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	4672      	mov	r2, lr
 80048d2:	45a4      	cmp	ip, r4
 80048d4:	bf88      	it	hi
 80048d6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80048da:	eba4 040c 	sub.w	r4, r4, ip
 80048de:	4405      	add	r5, r0
 80048e0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80048e4:	3e01      	subs	r6, #1
 80048e6:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80048ea:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80048ee:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80048f2:	d1dc      	bne.n	80048ae <__ieee754_sqrt+0xd6>
 80048f4:	431c      	orrs	r4, r3
 80048f6:	d01a      	beq.n	800492e <__ieee754_sqrt+0x156>
 80048f8:	4c1e      	ldr	r4, [pc, #120]	@ (8004974 <__ieee754_sqrt+0x19c>)
 80048fa:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8004978 <__ieee754_sqrt+0x1a0>
 80048fe:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004902:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004906:	f7fb fc2f 	bl	8000168 <__aeabi_dsub>
 800490a:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4650      	mov	r0, sl
 8004914:	4659      	mov	r1, fp
 8004916:	f7fc f85b 	bl	80009d0 <__aeabi_dcmple>
 800491a:	b140      	cbz	r0, 800492e <__ieee754_sqrt+0x156>
 800491c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004920:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004924:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004928:	d10e      	bne.n	8004948 <__ieee754_sqrt+0x170>
 800492a:	4635      	mov	r5, r6
 800492c:	3701      	adds	r7, #1
 800492e:	107b      	asrs	r3, r7, #1
 8004930:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8004934:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8004938:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800493c:	086b      	lsrs	r3, r5, #1
 800493e:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8004942:	e75b      	b.n	80047fc <__ieee754_sqrt+0x24>
 8004944:	4696      	mov	lr, r2
 8004946:	e7c2      	b.n	80048ce <__ieee754_sqrt+0xf6>
 8004948:	f7fb fc10 	bl	800016c <__adddf3>
 800494c:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4650      	mov	r0, sl
 8004956:	4659      	mov	r1, fp
 8004958:	f7fc f830 	bl	80009bc <__aeabi_dcmplt>
 800495c:	b120      	cbz	r0, 8004968 <__ieee754_sqrt+0x190>
 800495e:	1cab      	adds	r3, r5, #2
 8004960:	bf08      	it	eq
 8004962:	3701      	addeq	r7, #1
 8004964:	3502      	adds	r5, #2
 8004966:	e7e2      	b.n	800492e <__ieee754_sqrt+0x156>
 8004968:	1c6b      	adds	r3, r5, #1
 800496a:	f023 0501 	bic.w	r5, r3, #1
 800496e:	e7de      	b.n	800492e <__ieee754_sqrt+0x156>
 8004970:	7ff00000 	.word	0x7ff00000
 8004974:	08004ef0 	.word	0x08004ef0
 8004978:	08004ee8 	.word	0x08004ee8
 800497c:	00000000 	.word	0x00000000

08004980 <__ieee754_atan2>:
 8004980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	4617      	mov	r7, r2
 8004986:	4690      	mov	r8, r2
 8004988:	4699      	mov	r9, r3
 800498a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800498e:	427b      	negs	r3, r7
 8004990:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8004b18 <__ieee754_atan2+0x198>
 8004994:	433b      	orrs	r3, r7
 8004996:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800499a:	4553      	cmp	r3, sl
 800499c:	4604      	mov	r4, r0
 800499e:	460d      	mov	r5, r1
 80049a0:	d809      	bhi.n	80049b6 <__ieee754_atan2+0x36>
 80049a2:	4246      	negs	r6, r0
 80049a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80049a8:	4306      	orrs	r6, r0
 80049aa:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80049ae:	4556      	cmp	r6, sl
 80049b0:	468e      	mov	lr, r1
 80049b2:	4683      	mov	fp, r0
 80049b4:	d908      	bls.n	80049c8 <__ieee754_atan2+0x48>
 80049b6:	4642      	mov	r2, r8
 80049b8:	464b      	mov	r3, r9
 80049ba:	4620      	mov	r0, r4
 80049bc:	4629      	mov	r1, r5
 80049be:	f7fb fbd5 	bl	800016c <__adddf3>
 80049c2:	4604      	mov	r4, r0
 80049c4:	460d      	mov	r5, r1
 80049c6:	e016      	b.n	80049f6 <__ieee754_atan2+0x76>
 80049c8:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 80049cc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80049d0:	433e      	orrs	r6, r7
 80049d2:	d103      	bne.n	80049dc <__ieee754_atan2+0x5c>
 80049d4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d8:	f000 b8a6 	b.w	8004b28 <atan>
 80049dc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 80049e0:	f006 0602 	and.w	r6, r6, #2
 80049e4:	ea53 0b0b 	orrs.w	fp, r3, fp
 80049e8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80049ec:	d107      	bne.n	80049fe <__ieee754_atan2+0x7e>
 80049ee:	2e02      	cmp	r6, #2
 80049f0:	d064      	beq.n	8004abc <__ieee754_atan2+0x13c>
 80049f2:	2e03      	cmp	r6, #3
 80049f4:	d066      	beq.n	8004ac4 <__ieee754_atan2+0x144>
 80049f6:	4620      	mov	r0, r4
 80049f8:	4629      	mov	r1, r5
 80049fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049fe:	4317      	orrs	r7, r2
 8004a00:	d106      	bne.n	8004a10 <__ieee754_atan2+0x90>
 8004a02:	f1be 0f00 	cmp.w	lr, #0
 8004a06:	db68      	blt.n	8004ada <__ieee754_atan2+0x15a>
 8004a08:	a537      	add	r5, pc, #220	@ (adr r5, 8004ae8 <__ieee754_atan2+0x168>)
 8004a0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004a0e:	e7f2      	b.n	80049f6 <__ieee754_atan2+0x76>
 8004a10:	4552      	cmp	r2, sl
 8004a12:	d10f      	bne.n	8004a34 <__ieee754_atan2+0xb4>
 8004a14:	4293      	cmp	r3, r2
 8004a16:	f106 36ff 	add.w	r6, r6, #4294967295
 8004a1a:	d107      	bne.n	8004a2c <__ieee754_atan2+0xac>
 8004a1c:	2e02      	cmp	r6, #2
 8004a1e:	d855      	bhi.n	8004acc <__ieee754_atan2+0x14c>
 8004a20:	4b3e      	ldr	r3, [pc, #248]	@ (8004b1c <__ieee754_atan2+0x19c>)
 8004a22:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004a26:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004a2a:	e7e4      	b.n	80049f6 <__ieee754_atan2+0x76>
 8004a2c:	2e02      	cmp	r6, #2
 8004a2e:	d851      	bhi.n	8004ad4 <__ieee754_atan2+0x154>
 8004a30:	4b3b      	ldr	r3, [pc, #236]	@ (8004b20 <__ieee754_atan2+0x1a0>)
 8004a32:	e7f6      	b.n	8004a22 <__ieee754_atan2+0xa2>
 8004a34:	4553      	cmp	r3, sl
 8004a36:	d0e4      	beq.n	8004a02 <__ieee754_atan2+0x82>
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8004a3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004a42:	da21      	bge.n	8004a88 <__ieee754_atan2+0x108>
 8004a44:	f1b9 0f00 	cmp.w	r9, #0
 8004a48:	da01      	bge.n	8004a4e <__ieee754_atan2+0xce>
 8004a4a:	323c      	adds	r2, #60	@ 0x3c
 8004a4c:	db20      	blt.n	8004a90 <__ieee754_atan2+0x110>
 8004a4e:	4642      	mov	r2, r8
 8004a50:	464b      	mov	r3, r9
 8004a52:	4620      	mov	r0, r4
 8004a54:	4629      	mov	r1, r5
 8004a56:	f7fb fe69 	bl	800072c <__aeabi_ddiv>
 8004a5a:	f000 f9f5 	bl	8004e48 <fabs>
 8004a5e:	f000 f863 	bl	8004b28 <atan>
 8004a62:	4604      	mov	r4, r0
 8004a64:	460d      	mov	r5, r1
 8004a66:	2e01      	cmp	r6, #1
 8004a68:	d015      	beq.n	8004a96 <__ieee754_atan2+0x116>
 8004a6a:	2e02      	cmp	r6, #2
 8004a6c:	d017      	beq.n	8004a9e <__ieee754_atan2+0x11e>
 8004a6e:	2e00      	cmp	r6, #0
 8004a70:	d0c1      	beq.n	80049f6 <__ieee754_atan2+0x76>
 8004a72:	a31f      	add	r3, pc, #124	@ (adr r3, 8004af0 <__ieee754_atan2+0x170>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	4620      	mov	r0, r4
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	f7fb fb74 	bl	8000168 <__aeabi_dsub>
 8004a80:	a31d      	add	r3, pc, #116	@ (adr r3, 8004af8 <__ieee754_atan2+0x178>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	e016      	b.n	8004ab6 <__ieee754_atan2+0x136>
 8004a88:	a517      	add	r5, pc, #92	@ (adr r5, 8004ae8 <__ieee754_atan2+0x168>)
 8004a8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004a8e:	e7ea      	b.n	8004a66 <__ieee754_atan2+0xe6>
 8004a90:	2400      	movs	r4, #0
 8004a92:	2500      	movs	r5, #0
 8004a94:	e7e7      	b.n	8004a66 <__ieee754_atan2+0xe6>
 8004a96:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8004a9a:	461d      	mov	r5, r3
 8004a9c:	e7ab      	b.n	80049f6 <__ieee754_atan2+0x76>
 8004a9e:	a314      	add	r3, pc, #80	@ (adr r3, 8004af0 <__ieee754_atan2+0x170>)
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	f7fb fb5e 	bl	8000168 <__aeabi_dsub>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	a111      	add	r1, pc, #68	@ (adr r1, 8004af8 <__ieee754_atan2+0x178>)
 8004ab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ab6:	f7fb fb57 	bl	8000168 <__aeabi_dsub>
 8004aba:	e782      	b.n	80049c2 <__ieee754_atan2+0x42>
 8004abc:	a50e      	add	r5, pc, #56	@ (adr r5, 8004af8 <__ieee754_atan2+0x178>)
 8004abe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004ac2:	e798      	b.n	80049f6 <__ieee754_atan2+0x76>
 8004ac4:	a50e      	add	r5, pc, #56	@ (adr r5, 8004b00 <__ieee754_atan2+0x180>)
 8004ac6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004aca:	e794      	b.n	80049f6 <__ieee754_atan2+0x76>
 8004acc:	a50e      	add	r5, pc, #56	@ (adr r5, 8004b08 <__ieee754_atan2+0x188>)
 8004ace:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004ad2:	e790      	b.n	80049f6 <__ieee754_atan2+0x76>
 8004ad4:	2400      	movs	r4, #0
 8004ad6:	2500      	movs	r5, #0
 8004ad8:	e78d      	b.n	80049f6 <__ieee754_atan2+0x76>
 8004ada:	a50d      	add	r5, pc, #52	@ (adr r5, 8004b10 <__ieee754_atan2+0x190>)
 8004adc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004ae0:	e789      	b.n	80049f6 <__ieee754_atan2+0x76>
 8004ae2:	bf00      	nop
 8004ae4:	f3af 8000 	nop.w
 8004ae8:	54442d18 	.word	0x54442d18
 8004aec:	3ff921fb 	.word	0x3ff921fb
 8004af0:	33145c07 	.word	0x33145c07
 8004af4:	3ca1a626 	.word	0x3ca1a626
 8004af8:	54442d18 	.word	0x54442d18
 8004afc:	400921fb 	.word	0x400921fb
 8004b00:	54442d18 	.word	0x54442d18
 8004b04:	c00921fb 	.word	0xc00921fb
 8004b08:	54442d18 	.word	0x54442d18
 8004b0c:	3fe921fb 	.word	0x3fe921fb
 8004b10:	54442d18 	.word	0x54442d18
 8004b14:	bff921fb 	.word	0xbff921fb
 8004b18:	7ff00000 	.word	0x7ff00000
 8004b1c:	08004f10 	.word	0x08004f10
 8004b20:	08004ef8 	.word	0x08004ef8
 8004b24:	00000000 	.word	0x00000000

08004b28 <atan>:
 8004b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	4bbc      	ldr	r3, [pc, #752]	@ (8004e20 <atan+0x2f8>)
 8004b2e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8004b32:	429e      	cmp	r6, r3
 8004b34:	4604      	mov	r4, r0
 8004b36:	460d      	mov	r5, r1
 8004b38:	468b      	mov	fp, r1
 8004b3a:	d918      	bls.n	8004b6e <atan+0x46>
 8004b3c:	4bb9      	ldr	r3, [pc, #740]	@ (8004e24 <atan+0x2fc>)
 8004b3e:	429e      	cmp	r6, r3
 8004b40:	d801      	bhi.n	8004b46 <atan+0x1e>
 8004b42:	d109      	bne.n	8004b58 <atan+0x30>
 8004b44:	b140      	cbz	r0, 8004b58 <atan+0x30>
 8004b46:	4622      	mov	r2, r4
 8004b48:	462b      	mov	r3, r5
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	f7fb fb0d 	bl	800016c <__adddf3>
 8004b52:	4604      	mov	r4, r0
 8004b54:	460d      	mov	r5, r1
 8004b56:	e006      	b.n	8004b66 <atan+0x3e>
 8004b58:	f1bb 0f00 	cmp.w	fp, #0
 8004b5c:	f340 8123 	ble.w	8004da6 <atan+0x27e>
 8004b60:	a593      	add	r5, pc, #588	@ (adr r5, 8004db0 <atan+0x288>)
 8004b62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004b66:	4620      	mov	r0, r4
 8004b68:	4629      	mov	r1, r5
 8004b6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6e:	4bae      	ldr	r3, [pc, #696]	@ (8004e28 <atan+0x300>)
 8004b70:	429e      	cmp	r6, r3
 8004b72:	d811      	bhi.n	8004b98 <atan+0x70>
 8004b74:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8004b78:	429e      	cmp	r6, r3
 8004b7a:	d80a      	bhi.n	8004b92 <atan+0x6a>
 8004b7c:	a38e      	add	r3, pc, #568	@ (adr r3, 8004db8 <atan+0x290>)
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	f7fb faf3 	bl	800016c <__adddf3>
 8004b86:	2200      	movs	r2, #0
 8004b88:	4ba8      	ldr	r3, [pc, #672]	@ (8004e2c <atan+0x304>)
 8004b8a:	f7fb ff35 	bl	80009f8 <__aeabi_dcmpgt>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d1e9      	bne.n	8004b66 <atan+0x3e>
 8004b92:	f04f 3aff 	mov.w	sl, #4294967295
 8004b96:	e027      	b.n	8004be8 <atan+0xc0>
 8004b98:	f000 f956 	bl	8004e48 <fabs>
 8004b9c:	4ba4      	ldr	r3, [pc, #656]	@ (8004e30 <atan+0x308>)
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	429e      	cmp	r6, r3
 8004ba2:	460d      	mov	r5, r1
 8004ba4:	f200 80b8 	bhi.w	8004d18 <atan+0x1f0>
 8004ba8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8004bac:	429e      	cmp	r6, r3
 8004bae:	f200 809c 	bhi.w	8004cea <atan+0x1c2>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	f7fb fad9 	bl	800016c <__adddf3>
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4b9b      	ldr	r3, [pc, #620]	@ (8004e2c <atan+0x304>)
 8004bbe:	f7fb fad3 	bl	8000168 <__aeabi_dsub>
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	460f      	mov	r7, r1
 8004bc8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004bcc:	4620      	mov	r0, r4
 8004bce:	4629      	mov	r1, r5
 8004bd0:	f7fb facc 	bl	800016c <__adddf3>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4630      	mov	r0, r6
 8004bda:	4639      	mov	r1, r7
 8004bdc:	f7fb fda6 	bl	800072c <__aeabi_ddiv>
 8004be0:	f04f 0a00 	mov.w	sl, #0
 8004be4:	4604      	mov	r4, r0
 8004be6:	460d      	mov	r5, r1
 8004be8:	4622      	mov	r2, r4
 8004bea:	462b      	mov	r3, r5
 8004bec:	4620      	mov	r0, r4
 8004bee:	4629      	mov	r1, r5
 8004bf0:	f7fb fc72 	bl	80004d8 <__aeabi_dmul>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4680      	mov	r8, r0
 8004bfa:	4689      	mov	r9, r1
 8004bfc:	f7fb fc6c 	bl	80004d8 <__aeabi_dmul>
 8004c00:	a36f      	add	r3, pc, #444	@ (adr r3, 8004dc0 <atan+0x298>)
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	4606      	mov	r6, r0
 8004c08:	460f      	mov	r7, r1
 8004c0a:	f7fb fc65 	bl	80004d8 <__aeabi_dmul>
 8004c0e:	a36e      	add	r3, pc, #440	@ (adr r3, 8004dc8 <atan+0x2a0>)
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f7fb faaa 	bl	800016c <__adddf3>
 8004c18:	4632      	mov	r2, r6
 8004c1a:	463b      	mov	r3, r7
 8004c1c:	f7fb fc5c 	bl	80004d8 <__aeabi_dmul>
 8004c20:	a36b      	add	r3, pc, #428	@ (adr r3, 8004dd0 <atan+0x2a8>)
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	f7fb faa1 	bl	800016c <__adddf3>
 8004c2a:	4632      	mov	r2, r6
 8004c2c:	463b      	mov	r3, r7
 8004c2e:	f7fb fc53 	bl	80004d8 <__aeabi_dmul>
 8004c32:	a369      	add	r3, pc, #420	@ (adr r3, 8004dd8 <atan+0x2b0>)
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	f7fb fa98 	bl	800016c <__adddf3>
 8004c3c:	4632      	mov	r2, r6
 8004c3e:	463b      	mov	r3, r7
 8004c40:	f7fb fc4a 	bl	80004d8 <__aeabi_dmul>
 8004c44:	a366      	add	r3, pc, #408	@ (adr r3, 8004de0 <atan+0x2b8>)
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	f7fb fa8f 	bl	800016c <__adddf3>
 8004c4e:	4632      	mov	r2, r6
 8004c50:	463b      	mov	r3, r7
 8004c52:	f7fb fc41 	bl	80004d8 <__aeabi_dmul>
 8004c56:	a364      	add	r3, pc, #400	@ (adr r3, 8004de8 <atan+0x2c0>)
 8004c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5c:	f7fb fa86 	bl	800016c <__adddf3>
 8004c60:	4642      	mov	r2, r8
 8004c62:	464b      	mov	r3, r9
 8004c64:	f7fb fc38 	bl	80004d8 <__aeabi_dmul>
 8004c68:	a361      	add	r3, pc, #388	@ (adr r3, 8004df0 <atan+0x2c8>)
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	4680      	mov	r8, r0
 8004c70:	4689      	mov	r9, r1
 8004c72:	4630      	mov	r0, r6
 8004c74:	4639      	mov	r1, r7
 8004c76:	f7fb fc2f 	bl	80004d8 <__aeabi_dmul>
 8004c7a:	a35f      	add	r3, pc, #380	@ (adr r3, 8004df8 <atan+0x2d0>)
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	f7fb fa72 	bl	8000168 <__aeabi_dsub>
 8004c84:	4632      	mov	r2, r6
 8004c86:	463b      	mov	r3, r7
 8004c88:	f7fb fc26 	bl	80004d8 <__aeabi_dmul>
 8004c8c:	a35c      	add	r3, pc, #368	@ (adr r3, 8004e00 <atan+0x2d8>)
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f7fb fa69 	bl	8000168 <__aeabi_dsub>
 8004c96:	4632      	mov	r2, r6
 8004c98:	463b      	mov	r3, r7
 8004c9a:	f7fb fc1d 	bl	80004d8 <__aeabi_dmul>
 8004c9e:	a35a      	add	r3, pc, #360	@ (adr r3, 8004e08 <atan+0x2e0>)
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f7fb fa60 	bl	8000168 <__aeabi_dsub>
 8004ca8:	4632      	mov	r2, r6
 8004caa:	463b      	mov	r3, r7
 8004cac:	f7fb fc14 	bl	80004d8 <__aeabi_dmul>
 8004cb0:	a357      	add	r3, pc, #348	@ (adr r3, 8004e10 <atan+0x2e8>)
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f7fb fa57 	bl	8000168 <__aeabi_dsub>
 8004cba:	4632      	mov	r2, r6
 8004cbc:	463b      	mov	r3, r7
 8004cbe:	f7fb fc0b 	bl	80004d8 <__aeabi_dmul>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	4649      	mov	r1, r9
 8004cca:	f7fb fa4f 	bl	800016c <__adddf3>
 8004cce:	4622      	mov	r2, r4
 8004cd0:	462b      	mov	r3, r5
 8004cd2:	f7fb fc01 	bl	80004d8 <__aeabi_dmul>
 8004cd6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	d144      	bne.n	8004d6a <atan+0x242>
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	f7fb fa40 	bl	8000168 <__aeabi_dsub>
 8004ce8:	e733      	b.n	8004b52 <atan+0x2a>
 8004cea:	2200      	movs	r2, #0
 8004cec:	4b4f      	ldr	r3, [pc, #316]	@ (8004e2c <atan+0x304>)
 8004cee:	f7fb fa3b 	bl	8000168 <__aeabi_dsub>
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	460f      	mov	r7, r1
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8004e2c <atan+0x304>)
 8004cfe:	f7fb fa35 	bl	800016c <__adddf3>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4630      	mov	r0, r6
 8004d08:	4639      	mov	r1, r7
 8004d0a:	f7fb fd0f 	bl	800072c <__aeabi_ddiv>
 8004d0e:	f04f 0a01 	mov.w	sl, #1
 8004d12:	4604      	mov	r4, r0
 8004d14:	460d      	mov	r5, r1
 8004d16:	e767      	b.n	8004be8 <atan+0xc0>
 8004d18:	4b46      	ldr	r3, [pc, #280]	@ (8004e34 <atan+0x30c>)
 8004d1a:	429e      	cmp	r6, r3
 8004d1c:	d21a      	bcs.n	8004d54 <atan+0x22c>
 8004d1e:	2200      	movs	r2, #0
 8004d20:	4b45      	ldr	r3, [pc, #276]	@ (8004e38 <atan+0x310>)
 8004d22:	f7fb fa21 	bl	8000168 <__aeabi_dsub>
 8004d26:	2200      	movs	r2, #0
 8004d28:	4606      	mov	r6, r0
 8004d2a:	460f      	mov	r7, r1
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	4629      	mov	r1, r5
 8004d30:	4b41      	ldr	r3, [pc, #260]	@ (8004e38 <atan+0x310>)
 8004d32:	f7fb fbd1 	bl	80004d8 <__aeabi_dmul>
 8004d36:	2200      	movs	r2, #0
 8004d38:	4b3c      	ldr	r3, [pc, #240]	@ (8004e2c <atan+0x304>)
 8004d3a:	f7fb fa17 	bl	800016c <__adddf3>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4630      	mov	r0, r6
 8004d44:	4639      	mov	r1, r7
 8004d46:	f7fb fcf1 	bl	800072c <__aeabi_ddiv>
 8004d4a:	f04f 0a02 	mov.w	sl, #2
 8004d4e:	4604      	mov	r4, r0
 8004d50:	460d      	mov	r5, r1
 8004d52:	e749      	b.n	8004be8 <atan+0xc0>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	2000      	movs	r0, #0
 8004d5a:	4938      	ldr	r1, [pc, #224]	@ (8004e3c <atan+0x314>)
 8004d5c:	f7fb fce6 	bl	800072c <__aeabi_ddiv>
 8004d60:	f04f 0a03 	mov.w	sl, #3
 8004d64:	4604      	mov	r4, r0
 8004d66:	460d      	mov	r5, r1
 8004d68:	e73e      	b.n	8004be8 <atan+0xc0>
 8004d6a:	4b35      	ldr	r3, [pc, #212]	@ (8004e40 <atan+0x318>)
 8004d6c:	4e35      	ldr	r6, [pc, #212]	@ (8004e44 <atan+0x31c>)
 8004d6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f7fb f9f7 	bl	8000168 <__aeabi_dsub>
 8004d7a:	4622      	mov	r2, r4
 8004d7c:	462b      	mov	r3, r5
 8004d7e:	f7fb f9f3 	bl	8000168 <__aeabi_dsub>
 8004d82:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004d8e:	f7fb f9eb 	bl	8000168 <__aeabi_dsub>
 8004d92:	f1bb 0f00 	cmp.w	fp, #0
 8004d96:	4604      	mov	r4, r0
 8004d98:	460d      	mov	r5, r1
 8004d9a:	f6bf aee4 	bge.w	8004b66 <atan+0x3e>
 8004d9e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004da2:	461d      	mov	r5, r3
 8004da4:	e6df      	b.n	8004b66 <atan+0x3e>
 8004da6:	a51c      	add	r5, pc, #112	@ (adr r5, 8004e18 <atan+0x2f0>)
 8004da8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004dac:	e6db      	b.n	8004b66 <atan+0x3e>
 8004dae:	bf00      	nop
 8004db0:	54442d18 	.word	0x54442d18
 8004db4:	3ff921fb 	.word	0x3ff921fb
 8004db8:	8800759c 	.word	0x8800759c
 8004dbc:	7e37e43c 	.word	0x7e37e43c
 8004dc0:	e322da11 	.word	0xe322da11
 8004dc4:	3f90ad3a 	.word	0x3f90ad3a
 8004dc8:	24760deb 	.word	0x24760deb
 8004dcc:	3fa97b4b 	.word	0x3fa97b4b
 8004dd0:	a0d03d51 	.word	0xa0d03d51
 8004dd4:	3fb10d66 	.word	0x3fb10d66
 8004dd8:	c54c206e 	.word	0xc54c206e
 8004ddc:	3fb745cd 	.word	0x3fb745cd
 8004de0:	920083ff 	.word	0x920083ff
 8004de4:	3fc24924 	.word	0x3fc24924
 8004de8:	5555550d 	.word	0x5555550d
 8004dec:	3fd55555 	.word	0x3fd55555
 8004df0:	2c6a6c2f 	.word	0x2c6a6c2f
 8004df4:	bfa2b444 	.word	0xbfa2b444
 8004df8:	52defd9a 	.word	0x52defd9a
 8004dfc:	3fadde2d 	.word	0x3fadde2d
 8004e00:	af749a6d 	.word	0xaf749a6d
 8004e04:	3fb3b0f2 	.word	0x3fb3b0f2
 8004e08:	fe231671 	.word	0xfe231671
 8004e0c:	3fbc71c6 	.word	0x3fbc71c6
 8004e10:	9998ebc4 	.word	0x9998ebc4
 8004e14:	3fc99999 	.word	0x3fc99999
 8004e18:	54442d18 	.word	0x54442d18
 8004e1c:	bff921fb 	.word	0xbff921fb
 8004e20:	440fffff 	.word	0x440fffff
 8004e24:	7ff00000 	.word	0x7ff00000
 8004e28:	3fdbffff 	.word	0x3fdbffff
 8004e2c:	3ff00000 	.word	0x3ff00000
 8004e30:	3ff2ffff 	.word	0x3ff2ffff
 8004e34:	40038000 	.word	0x40038000
 8004e38:	3ff80000 	.word	0x3ff80000
 8004e3c:	bff00000 	.word	0xbff00000
 8004e40:	08004f28 	.word	0x08004f28
 8004e44:	08004f48 	.word	0x08004f48

08004e48 <fabs>:
 8004e48:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4770      	bx	lr

08004e50 <_init>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr

08004e5c <_fini>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr
