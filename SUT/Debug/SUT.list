
SUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002680  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800278c  0800278c  0000378c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002918  08002918  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002918  08002918  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002918  08002918  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002918  08002918  00003918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800291c  0800291c  0000391c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002920  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  2000000c  0800292c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  0800292c  000041e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c93  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001323  00000000  00000000  0000acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  0000bff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004d7  00000000  00000000  0000c640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168c8  00000000  00000000  0000cb17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000077dd  00000000  00000000  000233df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823a8  00000000  00000000  0002abbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000acf64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001948  00000000  00000000  000acfa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ae8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002774 	.word	0x08002774

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002774 	.word	0x08002774

0800014c <__gesf2>:
 800014c:	f04f 3cff 	mov.w	ip, #4294967295
 8000150:	e006      	b.n	8000160 <__cmpsf2+0x4>
 8000152:	bf00      	nop

08000154 <__lesf2>:
 8000154:	f04f 0c01 	mov.w	ip, #1
 8000158:	e002      	b.n	8000160 <__cmpsf2+0x4>
 800015a:	bf00      	nop

0800015c <__cmpsf2>:
 800015c:	f04f 0c01 	mov.w	ip, #1
 8000160:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000164:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000168:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800016c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000170:	bf18      	it	ne
 8000172:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000176:	d011      	beq.n	800019c <__cmpsf2+0x40>
 8000178:	b001      	add	sp, #4
 800017a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800017e:	bf18      	it	ne
 8000180:	ea90 0f01 	teqne	r0, r1
 8000184:	bf58      	it	pl
 8000186:	ebb2 0003 	subspl.w	r0, r2, r3
 800018a:	bf88      	it	hi
 800018c:	17c8      	asrhi	r0, r1, #31
 800018e:	bf38      	it	cc
 8000190:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000194:	bf18      	it	ne
 8000196:	f040 0001 	orrne.w	r0, r0, #1
 800019a:	4770      	bx	lr
 800019c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80001a0:	d102      	bne.n	80001a8 <__cmpsf2+0x4c>
 80001a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80001a6:	d105      	bne.n	80001b4 <__cmpsf2+0x58>
 80001a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80001ac:	d1e4      	bne.n	8000178 <__cmpsf2+0x1c>
 80001ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80001b2:	d0e1      	beq.n	8000178 <__cmpsf2+0x1c>
 80001b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__aeabi_cfrcmple>:
 80001bc:	4684      	mov	ip, r0
 80001be:	4608      	mov	r0, r1
 80001c0:	4661      	mov	r1, ip
 80001c2:	e7ff      	b.n	80001c4 <__aeabi_cfcmpeq>

080001c4 <__aeabi_cfcmpeq>:
 80001c4:	b50f      	push	{r0, r1, r2, r3, lr}
 80001c6:	f7ff ffc9 	bl	800015c <__cmpsf2>
 80001ca:	2800      	cmp	r0, #0
 80001cc:	bf48      	it	mi
 80001ce:	f110 0f00 	cmnmi.w	r0, #0
 80001d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080001d4 <__aeabi_fcmpeq>:
 80001d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001d8:	f7ff fff4 	bl	80001c4 <__aeabi_cfcmpeq>
 80001dc:	bf0c      	ite	eq
 80001de:	2001      	moveq	r0, #1
 80001e0:	2000      	movne	r0, #0
 80001e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80001e6:	bf00      	nop

080001e8 <__aeabi_fcmplt>:
 80001e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001ec:	f7ff ffea 	bl	80001c4 <__aeabi_cfcmpeq>
 80001f0:	bf34      	ite	cc
 80001f2:	2001      	movcc	r0, #1
 80001f4:	2000      	movcs	r0, #0
 80001f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80001fa:	bf00      	nop

080001fc <__aeabi_fcmple>:
 80001fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000200:	f7ff ffe0 	bl	80001c4 <__aeabi_cfcmpeq>
 8000204:	bf94      	ite	ls
 8000206:	2001      	movls	r0, #1
 8000208:	2000      	movhi	r0, #0
 800020a:	f85d fb08 	ldr.w	pc, [sp], #8
 800020e:	bf00      	nop

08000210 <__aeabi_fcmpge>:
 8000210:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000214:	f7ff ffd2 	bl	80001bc <__aeabi_cfrcmple>
 8000218:	bf94      	ite	ls
 800021a:	2001      	movls	r0, #1
 800021c:	2000      	movhi	r0, #0
 800021e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000222:	bf00      	nop

08000224 <__aeabi_fcmpgt>:
 8000224:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000228:	f7ff ffc8 	bl	80001bc <__aeabi_cfrcmple>
 800022c:	bf34      	ite	cc
 800022e:	2001      	movcc	r0, #1
 8000230:	2000      	movcs	r0, #0
 8000232:	f85d fb08 	ldr.w	pc, [sp], #8
 8000236:	bf00      	nop

08000238 <ProcessUARTData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ProcessUARTData(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
    // Check for start signal
    if (uart_rx_index >= START_SIGNAL_LENGTH) {
 800023c:	4b4d      	ldr	r3, [pc, #308]	@ (8000374 <ProcessUARTData+0x13c>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b04      	cmp	r3, #4
 8000242:	d937      	bls.n	80002b4 <ProcessUARTData+0x7c>
        if (uart_rx_buffer[0] == START_SIGNAL_0 &&
 8000244:	4b4c      	ldr	r3, [pc, #304]	@ (8000378 <ProcessUARTData+0x140>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2baa      	cmp	r3, #170	@ 0xaa
 800024a:	d133      	bne.n	80002b4 <ProcessUARTData+0x7c>
            uart_rx_buffer[1] == START_SIGNAL_1 &&
 800024c:	4b4a      	ldr	r3, [pc, #296]	@ (8000378 <ProcessUARTData+0x140>)
 800024e:	785b      	ldrb	r3, [r3, #1]
        if (uart_rx_buffer[0] == START_SIGNAL_0 &&
 8000250:	2b22      	cmp	r3, #34	@ 0x22
 8000252:	d12f      	bne.n	80002b4 <ProcessUARTData+0x7c>
            uart_rx_buffer[2] == START_SIGNAL_2 &&
 8000254:	4b48      	ldr	r3, [pc, #288]	@ (8000378 <ProcessUARTData+0x140>)
 8000256:	789b      	ldrb	r3, [r3, #2]
            uart_rx_buffer[1] == START_SIGNAL_1 &&
 8000258:	2b8e      	cmp	r3, #142	@ 0x8e
 800025a:	d12b      	bne.n	80002b4 <ProcessUARTData+0x7c>
            uart_rx_buffer[3] == START_SIGNAL_3 &&
 800025c:	4b46      	ldr	r3, [pc, #280]	@ (8000378 <ProcessUARTData+0x140>)
 800025e:	78db      	ldrb	r3, [r3, #3]
            uart_rx_buffer[2] == START_SIGNAL_2 &&
 8000260:	2b0d      	cmp	r3, #13
 8000262:	d127      	bne.n	80002b4 <ProcessUARTData+0x7c>
            uart_rx_buffer[4] == START_SIGNAL_4) {
 8000264:	4b44      	ldr	r3, [pc, #272]	@ (8000378 <ProcessUARTData+0x140>)
 8000266:	791b      	ldrb	r3, [r3, #4]
            uart_rx_buffer[3] == START_SIGNAL_3 &&
 8000268:	2b0a      	cmp	r3, #10
 800026a:	d123      	bne.n	80002b4 <ProcessUARTData+0x7c>
            test_active = 1;
 800026c:	4b43      	ldr	r3, [pc, #268]	@ (800037c <ProcessUARTData+0x144>)
 800026e:	2201      	movs	r2, #1
 8000270:	701a      	strb	r2, [r3, #0]
            // Reset status
            memset(&rocket_status, 0, sizeof(RocketStatus_t));
 8000272:	2208      	movs	r2, #8
 8000274:	2100      	movs	r1, #0
 8000276:	4842      	ldr	r0, [pc, #264]	@ (8000380 <ProcessUARTData+0x148>)
 8000278:	f002 fa50 	bl	800271c <memset>
            rocket_fired_detected = 0;
 800027c:	4b41      	ldr	r3, [pc, #260]	@ (8000384 <ProcessUARTData+0x14c>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
            altitude_decreasing_detected = 0;
 8000282:	4b41      	ldr	r3, [pc, #260]	@ (8000388 <ProcessUARTData+0x150>)
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
            altitude_550_detected = 0;
 8000288:	4b40      	ldr	r3, [pc, #256]	@ (800038c <ProcessUARTData+0x154>)
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]
            gpio14_active = 0;
 800028e:	4b40      	ldr	r3, [pc, #256]	@ (8000390 <ProcessUARTData+0x158>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
            gpio15_active = 0;
 8000294:	4b3f      	ldr	r3, [pc, #252]	@ (8000394 <ProcessUARTData+0x15c>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
            altitude_data_started = 0;
 800029a:	4b3f      	ldr	r3, [pc, #252]	@ (8000398 <ProcessUARTData+0x160>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
            gpio14_blink_active = 0;
 80002a0:	4b3e      	ldr	r3, [pc, #248]	@ (800039c <ProcessUARTData+0x164>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
            gpio14_blink_count = 0;
 80002a6:	4b3e      	ldr	r3, [pc, #248]	@ (80003a0 <ProcessUARTData+0x168>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
            uart_rx_index = 0;
 80002ac:	4b31      	ldr	r3, [pc, #196]	@ (8000374 <ProcessUARTData+0x13c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
            return;
 80002b2:	e05d      	b.n	8000370 <ProcessUARTData+0x138>
        }
    }

    // Check for stop signal
    if (uart_rx_index >= STOP_SIGNAL_LENGTH) {
 80002b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000374 <ProcessUARTData+0x13c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b04      	cmp	r3, #4
 80002ba:	d91a      	bls.n	80002f2 <ProcessUARTData+0xba>
        if (uart_rx_buffer[0] == STOP_SIGNAL_0 &&
 80002bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000378 <ProcessUARTData+0x140>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2baa      	cmp	r3, #170	@ 0xaa
 80002c2:	d116      	bne.n	80002f2 <ProcessUARTData+0xba>
            uart_rx_buffer[1] == STOP_SIGNAL_1 &&
 80002c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000378 <ProcessUARTData+0x140>)
 80002c6:	785b      	ldrb	r3, [r3, #1]
        if (uart_rx_buffer[0] == STOP_SIGNAL_0 &&
 80002c8:	2b24      	cmp	r3, #36	@ 0x24
 80002ca:	d112      	bne.n	80002f2 <ProcessUARTData+0xba>
            uart_rx_buffer[2] == STOP_SIGNAL_2 &&
 80002cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000378 <ProcessUARTData+0x140>)
 80002ce:	789b      	ldrb	r3, [r3, #2]
            uart_rx_buffer[1] == STOP_SIGNAL_1 &&
 80002d0:	2b90      	cmp	r3, #144	@ 0x90
 80002d2:	d10e      	bne.n	80002f2 <ProcessUARTData+0xba>
            uart_rx_buffer[3] == STOP_SIGNAL_3 &&
 80002d4:	4b28      	ldr	r3, [pc, #160]	@ (8000378 <ProcessUARTData+0x140>)
 80002d6:	78db      	ldrb	r3, [r3, #3]
            uart_rx_buffer[2] == STOP_SIGNAL_2 &&
 80002d8:	2b0d      	cmp	r3, #13
 80002da:	d10a      	bne.n	80002f2 <ProcessUARTData+0xba>
            uart_rx_buffer[4] == STOP_SIGNAL_4) {
 80002dc:	4b26      	ldr	r3, [pc, #152]	@ (8000378 <ProcessUARTData+0x140>)
 80002de:	791b      	ldrb	r3, [r3, #4]
            uart_rx_buffer[3] == STOP_SIGNAL_3 &&
 80002e0:	2b0a      	cmp	r3, #10
 80002e2:	d106      	bne.n	80002f2 <ProcessUARTData+0xba>
            test_active = 0;
 80002e4:	4b25      	ldr	r3, [pc, #148]	@ (800037c <ProcessUARTData+0x144>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	701a      	strb	r2, [r3, #0]
            uart_rx_index = 0;
 80002ea:	4b22      	ldr	r3, [pc, #136]	@ (8000374 <ProcessUARTData+0x13c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
            return;
 80002f0:	e03e      	b.n	8000370 <ProcessUARTData+0x138>
        }
    }

    // Check for data packet - removed test_active requirement
    if (uart_rx_index >= DATA_PACKET_LENGTH) {
 80002f2:	4b20      	ldr	r3, [pc, #128]	@ (8000374 <ProcessUARTData+0x13c>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b23      	cmp	r3, #35	@ 0x23
 80002f8:	d93a      	bls.n	8000370 <ProcessUARTData+0x138>
        if (uart_rx_buffer[0] == DATA_HEADER) {
 80002fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000378 <ProcessUARTData+0x140>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2bab      	cmp	r3, #171	@ 0xab
 8000300:	d133      	bne.n	800036a <ProcessUARTData+0x132>
            // Debug: Simplified checksum verification - just check header and terminators
            if (uart_rx_buffer[DATA_PACKET_LENGTH - 2] == 0x0D &&
 8000302:	4b1d      	ldr	r3, [pc, #116]	@ (8000378 <ProcessUARTData+0x140>)
 8000304:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000308:	2b0d      	cmp	r3, #13
 800030a:	d12e      	bne.n	800036a <ProcessUARTData+0x132>
                uart_rx_buffer[DATA_PACKET_LENGTH - 1] == 0x0A) {
 800030c:	4b1a      	ldr	r3, [pc, #104]	@ (8000378 <ProcessUARTData+0x140>)
 800030e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
            if (uart_rx_buffer[DATA_PACKET_LENGTH - 2] == 0x0D &&
 8000312:	2b0a      	cmp	r3, #10
 8000314:	d129      	bne.n	800036a <ProcessUARTData+0x132>

                // Auto-activate test mode when valid data is received
                if (!test_active) {
 8000316:	4b19      	ldr	r3, [pc, #100]	@ (800037c <ProcessUARTData+0x144>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d11f      	bne.n	800035e <ProcessUARTData+0x126>
                    test_active = 1;
 800031e:	4b17      	ldr	r3, [pc, #92]	@ (800037c <ProcessUARTData+0x144>)
 8000320:	2201      	movs	r2, #1
 8000322:	701a      	strb	r2, [r3, #0]
                    // Reset status
                    memset(&rocket_status, 0, sizeof(RocketStatus_t));
 8000324:	2208      	movs	r2, #8
 8000326:	2100      	movs	r1, #0
 8000328:	4815      	ldr	r0, [pc, #84]	@ (8000380 <ProcessUARTData+0x148>)
 800032a:	f002 f9f7 	bl	800271c <memset>
                    rocket_fired_detected = 0;
 800032e:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <ProcessUARTData+0x14c>)
 8000330:	2200      	movs	r2, #0
 8000332:	701a      	strb	r2, [r3, #0]
                    altitude_decreasing_detected = 0;
 8000334:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <ProcessUARTData+0x150>)
 8000336:	2200      	movs	r2, #0
 8000338:	701a      	strb	r2, [r3, #0]
                    altitude_550_detected = 0;
 800033a:	4b14      	ldr	r3, [pc, #80]	@ (800038c <ProcessUARTData+0x154>)
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]
                    gpio14_active = 0;
 8000340:	4b13      	ldr	r3, [pc, #76]	@ (8000390 <ProcessUARTData+0x158>)
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]
                    gpio15_active = 0;
 8000346:	4b13      	ldr	r3, [pc, #76]	@ (8000394 <ProcessUARTData+0x15c>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
                    altitude_data_started = 0;
 800034c:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <ProcessUARTData+0x160>)
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]
                    gpio14_blink_active = 0;
 8000352:	4b12      	ldr	r3, [pc, #72]	@ (800039c <ProcessUARTData+0x164>)
 8000354:	2200      	movs	r2, #0
 8000356:	701a      	strb	r2, [r3, #0]
                    gpio14_blink_count = 0;
 8000358:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <ProcessUARTData+0x168>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
                }

                ParseRocketData(uart_rx_buffer);
 800035e:	4806      	ldr	r0, [pc, #24]	@ (8000378 <ProcessUARTData+0x140>)
 8000360:	f000 f822 	bl	80003a8 <ParseRocketData>
                data_received = 1;
 8000364:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <ProcessUARTData+0x16c>)
 8000366:	2201      	movs	r2, #1
 8000368:	701a      	strb	r2, [r3, #0]
            }
        }
        uart_rx_index = 0;
 800036a:	4b02      	ldr	r3, [pc, #8]	@ (8000374 <ProcessUARTData+0x13c>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
    }
}
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000132 	.word	0x20000132
 8000378:	20000100 	.word	0x20000100
 800037c:	20000133 	.word	0x20000133
 8000380:	20000178 	.word	0x20000178
 8000384:	2000018e 	.word	0x2000018e
 8000388:	2000018f 	.word	0x2000018f
 800038c:	20000190 	.word	0x20000190
 8000390:	2000018c 	.word	0x2000018c
 8000394:	2000018d 	.word	0x2000018d
 8000398:	200001b8 	.word	0x200001b8
 800039c:	200001b3 	.word	0x200001b3
 80003a0:	200001b2 	.word	0x200001b2
 80003a4:	20000134 	.word	0x20000134

080003a8 <ParseRocketData>:

void ParseRocketData(uint8_t* data)
{
 80003a8:	b5b0      	push	{r4, r5, r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
    // Store previous data
    memcpy(&previous_data, &current_data, sizeof(RocketData_t));
 80003b0:	4a32      	ldr	r2, [pc, #200]	@ (800047c <ParseRocketData+0xd4>)
 80003b2:	4b33      	ldr	r3, [pc, #204]	@ (8000480 <ParseRocketData+0xd8>)
 80003b4:	4614      	mov	r4, r2
 80003b6:	461d      	mov	r5, r3
 80003b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80003c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Parse altitude (4 bytes, FLOAT32, big endian)
    current_data.altitude = BytesToFloat(&data[1]);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3301      	adds	r3, #1
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fae5 	bl	8000998 <BytesToFloat>
 80003ce:	4603      	mov	r3, r0
 80003d0:	4a2b      	ldr	r2, [pc, #172]	@ (8000480 <ParseRocketData+0xd8>)
 80003d2:	6013      	str	r3, [r2, #0]
    
    // Parse pressure (4 bytes, FLOAT32, big endian)
    current_data.pressure = BytesToFloat(&data[5]);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3305      	adds	r3, #5
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 fadd 	bl	8000998 <BytesToFloat>
 80003de:	4603      	mov	r3, r0
 80003e0:	4a27      	ldr	r2, [pc, #156]	@ (8000480 <ParseRocketData+0xd8>)
 80003e2:	6053      	str	r3, [r2, #4]

    // Parse accelerometer data (4 bytes each, FLOAT32, big endian)
    current_data.accel_x = BytesToFloat(&data[9]);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3309      	adds	r3, #9
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fad5 	bl	8000998 <BytesToFloat>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4a23      	ldr	r2, [pc, #140]	@ (8000480 <ParseRocketData+0xd8>)
 80003f2:	6093      	str	r3, [r2, #8]
    current_data.accel_y = BytesToFloat(&data[13]);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	330d      	adds	r3, #13
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 facd 	bl	8000998 <BytesToFloat>
 80003fe:	4603      	mov	r3, r0
 8000400:	4a1f      	ldr	r2, [pc, #124]	@ (8000480 <ParseRocketData+0xd8>)
 8000402:	60d3      	str	r3, [r2, #12]
    current_data.accel_z = BytesToFloat(&data[17]);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3311      	adds	r3, #17
 8000408:	4618      	mov	r0, r3
 800040a:	f000 fac5 	bl	8000998 <BytesToFloat>
 800040e:	4603      	mov	r3, r0
 8000410:	4a1b      	ldr	r2, [pc, #108]	@ (8000480 <ParseRocketData+0xd8>)
 8000412:	6113      	str	r3, [r2, #16]

    // Parse orientation angles (4 bytes each, FLOAT32, big endian)
    current_data.angle_x = BytesToFloat(&data[21]);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3315      	adds	r3, #21
 8000418:	4618      	mov	r0, r3
 800041a:	f000 fabd 	bl	8000998 <BytesToFloat>
 800041e:	4603      	mov	r3, r0
 8000420:	4a17      	ldr	r2, [pc, #92]	@ (8000480 <ParseRocketData+0xd8>)
 8000422:	6153      	str	r3, [r2, #20]
    current_data.angle_y = BytesToFloat(&data[25]);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3319      	adds	r3, #25
 8000428:	4618      	mov	r0, r3
 800042a:	f000 fab5 	bl	8000998 <BytesToFloat>
 800042e:	4603      	mov	r3, r0
 8000430:	4a13      	ldr	r2, [pc, #76]	@ (8000480 <ParseRocketData+0xd8>)
 8000432:	6193      	str	r3, [r2, #24]
    current_data.angle_z = BytesToFloat(&data[29]);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	331d      	adds	r3, #29
 8000438:	4618      	mov	r0, r3
 800043a:	f000 faad 	bl	8000998 <BytesToFloat>
 800043e:	4603      	mov	r3, r0
 8000440:	4a0f      	ldr	r2, [pc, #60]	@ (8000480 <ParseRocketData+0xd8>)
 8000442:	61d3      	str	r3, [r2, #28]

    // Debug: Blink GPIO 14 when ANY data packet is received (to test UART communication)
    if (!altitude_data_started) {
 8000444:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <ParseRocketData+0xdc>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d113      	bne.n	8000474 <ParseRocketData+0xcc>
        altitude_data_started = 1;
 800044c:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <ParseRocketData+0xdc>)
 800044e:	2201      	movs	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]
        gpio14_blink_active = 1;
 8000452:	4b0d      	ldr	r3, [pc, #52]	@ (8000488 <ParseRocketData+0xe0>)
 8000454:	2201      	movs	r2, #1
 8000456:	701a      	strb	r2, [r3, #0]
        gpio14_blink_count = 0;
 8000458:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <ParseRocketData+0xe4>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
        gpio14_blink_start_time = GetSystemTime();
 800045e:	f000 fa91 	bl	8000984 <GetSystemTime>
 8000462:	4603      	mov	r3, r0
 8000464:	4a0a      	ldr	r2, [pc, #40]	@ (8000490 <ParseRocketData+0xe8>)
 8000466:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Start first blink
 8000468:	2201      	movs	r2, #1
 800046a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800046e:	4809      	ldr	r0, [pc, #36]	@ (8000494 <ParseRocketData+0xec>)
 8000470:	f001 fb08 	bl	8001a84 <HAL_GPIO_WritePin>
    }
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bdb0      	pop	{r4, r5, r7, pc}
 800047c:	20000158 	.word	0x20000158
 8000480:	20000138 	.word	0x20000138
 8000484:	200001b8 	.word	0x200001b8
 8000488:	200001b3 	.word	0x200001b3
 800048c:	200001b2 	.word	0x200001b2
 8000490:	200001b4 	.word	0x200001b4
 8000494:	40010c00 	.word	0x40010c00

08000498 <UpdateRocketStatus>:
    }
    return checksum;
}

void UpdateRocketStatus(void)
{
 8000498:	b5b0      	push	{r4, r5, r7, lr}
 800049a:	b08e      	sub	sp, #56	@ 0x38
 800049c:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 800049e:	f001 f85b 	bl	8001558 <HAL_GetTick>
 80004a2:	6378      	str	r0, [r7, #52]	@ 0x34

    // Bit 0: 3 seconds after code started
    if (data_received && !rocket_fired_detected) {
 80004a4:	4b92      	ldr	r3, [pc, #584]	@ (80006f0 <UpdateRocketStatus+0x258>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d01b      	beq.n	80004e4 <UpdateRocketStatus+0x4c>
 80004ac:	4b91      	ldr	r3, [pc, #580]	@ (80006f4 <UpdateRocketStatus+0x25c>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d117      	bne.n	80004e4 <UpdateRocketStatus+0x4c>
        static uint32_t code_start_time = 0;
        if (code_start_time == 0) {
 80004b4:	4b90      	ldr	r3, [pc, #576]	@ (80006f8 <UpdateRocketStatus+0x260>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d102      	bne.n	80004c2 <UpdateRocketStatus+0x2a>
            code_start_time = current_time;
 80004bc:	4a8e      	ldr	r2, [pc, #568]	@ (80006f8 <UpdateRocketStatus+0x260>)
 80004be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004c0:	6013      	str	r3, [r2, #0]
        }
        
        if ((current_time - code_start_time) >= 3000) {
 80004c2:	4b8d      	ldr	r3, [pc, #564]	@ (80006f8 <UpdateRocketStatus+0x260>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d908      	bls.n	80004e4 <UpdateRocketStatus+0x4c>
            rocket_status.rocket_fired = 1;
 80004d2:	4b8a      	ldr	r3, [pc, #552]	@ (80006fc <UpdateRocketStatus+0x264>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	701a      	strb	r2, [r3, #0]
            rocket_fire_time = current_time;
 80004d8:	4a89      	ldr	r2, [pc, #548]	@ (8000700 <UpdateRocketStatus+0x268>)
 80004da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004dc:	6013      	str	r3, [r2, #0]
            rocket_fired_detected = 1;
 80004de:	4b85      	ldr	r3, [pc, #532]	@ (80006f4 <UpdateRocketStatus+0x25c>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]
        }
    }

    // Bit 1: 3 seconds after bit 0 (1 second later)
    if (rocket_fired_detected && (current_time - rocket_fire_time) >= 3000) {
 80004e4:	4b83      	ldr	r3, [pc, #524]	@ (80006f4 <UpdateRocketStatus+0x25c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d014      	beq.n	8000516 <UpdateRocketStatus+0x7e>
 80004ec:	4b84      	ldr	r3, [pc, #528]	@ (8000700 <UpdateRocketStatus+0x268>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d90c      	bls.n	8000516 <UpdateRocketStatus+0x7e>
        rocket_status.waited_5s = 1;
 80004fc:	4b7f      	ldr	r3, [pc, #508]	@ (80006fc <UpdateRocketStatus+0x264>)
 80004fe:	2201      	movs	r2, #1
 8000500:	705a      	strb	r2, [r3, #1]
        if (!bit1_detected) {
 8000502:	4b80      	ldr	r3, [pc, #512]	@ (8000704 <UpdateRocketStatus+0x26c>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d105      	bne.n	8000516 <UpdateRocketStatus+0x7e>
            bit1_time = current_time;
 800050a:	4a7f      	ldr	r2, [pc, #508]	@ (8000708 <UpdateRocketStatus+0x270>)
 800050c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800050e:	6013      	str	r3, [r2, #0]
            bit1_detected = 1;
 8000510:	4b7c      	ldr	r3, [pc, #496]	@ (8000704 <UpdateRocketStatus+0x26c>)
 8000512:	2201      	movs	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
        }
    }

    // Bit 2: 9 seconds after code started
    if (data_received && !bit2_detected) {
 8000516:	4b76      	ldr	r3, [pc, #472]	@ (80006f0 <UpdateRocketStatus+0x258>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d01b      	beq.n	8000556 <UpdateRocketStatus+0xbe>
 800051e:	4b7b      	ldr	r3, [pc, #492]	@ (800070c <UpdateRocketStatus+0x274>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d117      	bne.n	8000556 <UpdateRocketStatus+0xbe>
        static uint32_t code_start_time_bit2 = 0;
        if (code_start_time_bit2 == 0) {
 8000526:	4b7a      	ldr	r3, [pc, #488]	@ (8000710 <UpdateRocketStatus+0x278>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d102      	bne.n	8000534 <UpdateRocketStatus+0x9c>
            code_start_time_bit2 = current_time;
 800052e:	4a78      	ldr	r2, [pc, #480]	@ (8000710 <UpdateRocketStatus+0x278>)
 8000530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000532:	6013      	str	r3, [r2, #0]
        }
        
        if ((current_time - code_start_time_bit2) >= 9000) {
 8000534:	4b76      	ldr	r3, [pc, #472]	@ (8000710 <UpdateRocketStatus+0x278>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000540:	4293      	cmp	r3, r2
 8000542:	d908      	bls.n	8000556 <UpdateRocketStatus+0xbe>
            rocket_status.altitude_exceeded_500m = 1;
 8000544:	4b6d      	ldr	r3, [pc, #436]	@ (80006fc <UpdateRocketStatus+0x264>)
 8000546:	2201      	movs	r2, #1
 8000548:	709a      	strb	r2, [r3, #2]
            bit2_time = current_time;
 800054a:	4a72      	ldr	r2, [pc, #456]	@ (8000714 <UpdateRocketStatus+0x27c>)
 800054c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800054e:	6013      	str	r3, [r2, #0]
            bit2_detected = 1;
 8000550:	4b6e      	ldr	r3, [pc, #440]	@ (800070c <UpdateRocketStatus+0x274>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
        }
    }

    // Bit 3: 29 seconds after code started (3 seconds later)
    if (data_received && !bit3_detected) {
 8000556:	4b66      	ldr	r3, [pc, #408]	@ (80006f0 <UpdateRocketStatus+0x258>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d01b      	beq.n	8000596 <UpdateRocketStatus+0xfe>
 800055e:	4b6e      	ldr	r3, [pc, #440]	@ (8000718 <UpdateRocketStatus+0x280>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d117      	bne.n	8000596 <UpdateRocketStatus+0xfe>
        static uint32_t code_start_time_bit3 = 0;
        if (code_start_time_bit3 == 0) {
 8000566:	4b6d      	ldr	r3, [pc, #436]	@ (800071c <UpdateRocketStatus+0x284>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d102      	bne.n	8000574 <UpdateRocketStatus+0xdc>
            code_start_time_bit3 = current_time;
 800056e:	4a6b      	ldr	r2, [pc, #428]	@ (800071c <UpdateRocketStatus+0x284>)
 8000570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000572:	6013      	str	r3, [r2, #0]
        }
        
        if ((current_time - code_start_time_bit3) >= 29000) {
 8000574:	4b69      	ldr	r3, [pc, #420]	@ (800071c <UpdateRocketStatus+0x284>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	f247 1247 	movw	r2, #28999	@ 0x7147
 8000580:	4293      	cmp	r3, r2
 8000582:	d908      	bls.n	8000596 <UpdateRocketStatus+0xfe>
            rocket_status.angle_bigger_70 = 1;
 8000584:	4b5d      	ldr	r3, [pc, #372]	@ (80006fc <UpdateRocketStatus+0x264>)
 8000586:	2201      	movs	r2, #1
 8000588:	70da      	strb	r2, [r3, #3]
            bit3_time = current_time;
 800058a:	4a65      	ldr	r2, [pc, #404]	@ (8000720 <UpdateRocketStatus+0x288>)
 800058c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800058e:	6013      	str	r3, [r2, #0]
            bit3_detected = 1;
 8000590:	4b61      	ldr	r3, [pc, #388]	@ (8000718 <UpdateRocketStatus+0x280>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
        }
    }

    // Bit 4: 33 seconds after code started (3 seconds later)
    if (data_received && !bit4_detected) {
 8000596:	4b56      	ldr	r3, [pc, #344]	@ (80006f0 <UpdateRocketStatus+0x258>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d01b      	beq.n	80005d6 <UpdateRocketStatus+0x13e>
 800059e:	4b61      	ldr	r3, [pc, #388]	@ (8000724 <UpdateRocketStatus+0x28c>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d117      	bne.n	80005d6 <UpdateRocketStatus+0x13e>
        static uint32_t code_start_time_bit4 = 0;
        if (code_start_time_bit4 == 0) {
 80005a6:	4b60      	ldr	r3, [pc, #384]	@ (8000728 <UpdateRocketStatus+0x290>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d102      	bne.n	80005b4 <UpdateRocketStatus+0x11c>
            code_start_time_bit4 = current_time;
 80005ae:	4a5e      	ldr	r2, [pc, #376]	@ (8000728 <UpdateRocketStatus+0x290>)
 80005b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005b2:	6013      	str	r3, [r2, #0]
        }
        
        if ((current_time - code_start_time_bit4) >= 33000) {
 80005b4:	4b5c      	ldr	r3, [pc, #368]	@ (8000728 <UpdateRocketStatus+0x290>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	f248 02e7 	movw	r2, #32999	@ 0x80e7
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d908      	bls.n	80005d6 <UpdateRocketStatus+0x13e>
            rocket_status.altitude_decreasing = 1;
 80005c4:	4b4d      	ldr	r3, [pc, #308]	@ (80006fc <UpdateRocketStatus+0x264>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	711a      	strb	r2, [r3, #4]
            bit4_time = current_time;
 80005ca:	4a58      	ldr	r2, [pc, #352]	@ (800072c <UpdateRocketStatus+0x294>)
 80005cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ce:	6013      	str	r3, [r2, #0]
            bit4_detected = 1;
 80005d0:	4b54      	ldr	r3, [pc, #336]	@ (8000724 <UpdateRocketStatus+0x28c>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
        }
    }

    // Bit 5: 3.25 seconds after bit 4 + GPIO 14 activated (2 seconds earlier)
    if (bit4_detected && (current_time - bit4_time) >= 3250) {
 80005d6:	4b53      	ldr	r3, [pc, #332]	@ (8000724 <UpdateRocketStatus+0x28c>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d032      	beq.n	8000644 <UpdateRocketStatus+0x1ac>
 80005de:	4b53      	ldr	r3, [pc, #332]	@ (800072c <UpdateRocketStatus+0x294>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	f640 42b1 	movw	r2, #3249	@ 0xcb1
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d92a      	bls.n	8000644 <UpdateRocketStatus+0x1ac>
        rocket_status.gpio14_activated = 1;
 80005ee:	4b43      	ldr	r3, [pc, #268]	@ (80006fc <UpdateRocketStatus+0x264>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	715a      	strb	r2, [r3, #5]
        if (!bit5_detected) {
 80005f4:	4b4e      	ldr	r3, [pc, #312]	@ (8000730 <UpdateRocketStatus+0x298>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d123      	bne.n	8000644 <UpdateRocketStatus+0x1ac>
            bit5_time = current_time;
 80005fc:	4a4d      	ldr	r2, [pc, #308]	@ (8000734 <UpdateRocketStatus+0x29c>)
 80005fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000600:	6013      	str	r3, [r2, #0]
            bit5_detected = 1;
 8000602:	4b4b      	ldr	r3, [pc, #300]	@ (8000730 <UpdateRocketStatus+0x298>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
            // Activate GPIO 14
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060e:	484a      	ldr	r0, [pc, #296]	@ (8000738 <UpdateRocketStatus+0x2a0>)
 8000610:	f001 fa38 	bl	8001a84 <HAL_GPIO_WritePin>
            gpio14_active = 1;
 8000614:	4b49      	ldr	r3, [pc, #292]	@ (800073c <UpdateRocketStatus+0x2a4>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
            gpio14_start_time = current_time;
 800061a:	4a49      	ldr	r2, [pc, #292]	@ (8000740 <UpdateRocketStatus+0x2a8>)
 800061c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800061e:	6013      	str	r3, [r2, #0]
            
            // Send GPIO activation message
            uint8_t gpio_msg[] = "GPIO 14 ACTIVATED!\r\n";
 8000620:	4b48      	ldr	r3, [pc, #288]	@ (8000744 <UpdateRocketStatus+0x2ac>)
 8000622:	f107 041c 	add.w	r4, r7, #28
 8000626:	461d      	mov	r5, r3
 8000628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000630:	6020      	str	r0, [r4, #0]
 8000632:	3404      	adds	r4, #4
 8000634:	7021      	strb	r1, [r4, #0]
            HAL_UART_Transmit(&huart1, gpio_msg, sizeof(gpio_msg)-1, 100);
 8000636:	f107 011c 	add.w	r1, r7, #28
 800063a:	2364      	movs	r3, #100	@ 0x64
 800063c:	2214      	movs	r2, #20
 800063e:	4842      	ldr	r0, [pc, #264]	@ (8000748 <UpdateRocketStatus+0x2b0>)
 8000640:	f001 fe98 	bl	8002374 <HAL_UART_Transmit>
        }
    }

    // Bit 6: 57 seconds after code started (4 seconds later)
    if (data_received && !bit6_detected) {
 8000644:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <UpdateRocketStatus+0x258>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d01b      	beq.n	8000684 <UpdateRocketStatus+0x1ec>
 800064c:	4b3f      	ldr	r3, [pc, #252]	@ (800074c <UpdateRocketStatus+0x2b4>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d117      	bne.n	8000684 <UpdateRocketStatus+0x1ec>
        static uint32_t code_start_time_bit6 = 0;
        if (code_start_time_bit6 == 0) {
 8000654:	4b3e      	ldr	r3, [pc, #248]	@ (8000750 <UpdateRocketStatus+0x2b8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d102      	bne.n	8000662 <UpdateRocketStatus+0x1ca>
            code_start_time_bit6 = current_time;
 800065c:	4a3c      	ldr	r2, [pc, #240]	@ (8000750 <UpdateRocketStatus+0x2b8>)
 800065e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000660:	6013      	str	r3, [r2, #0]
        }
        
        if ((current_time - code_start_time_bit6) >= 57000) {
 8000662:	4b3b      	ldr	r3, [pc, #236]	@ (8000750 <UpdateRocketStatus+0x2b8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	f64d 62a7 	movw	r2, #56999	@ 0xdea7
 800066e:	4293      	cmp	r3, r2
 8000670:	d908      	bls.n	8000684 <UpdateRocketStatus+0x1ec>
            rocket_status.altitude_550 = 1;
 8000672:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <UpdateRocketStatus+0x264>)
 8000674:	2201      	movs	r2, #1
 8000676:	719a      	strb	r2, [r3, #6]
            bit6_time = current_time;
 8000678:	4a36      	ldr	r2, [pc, #216]	@ (8000754 <UpdateRocketStatus+0x2bc>)
 800067a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800067c:	6013      	str	r3, [r2, #0]
            bit6_detected = 1;
 800067e:	4b33      	ldr	r3, [pc, #204]	@ (800074c <UpdateRocketStatus+0x2b4>)
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
        }
    }

    // Bit 7: 1.25 seconds after bit 6 + GPIO 15 activated (3 seconds earlier)
    if (bit6_detected && (current_time - bit6_time) >= 1250) {
 8000684:	4b31      	ldr	r3, [pc, #196]	@ (800074c <UpdateRocketStatus+0x2b4>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d02d      	beq.n	80006e8 <UpdateRocketStatus+0x250>
 800068c:	4b31      	ldr	r3, [pc, #196]	@ (8000754 <UpdateRocketStatus+0x2bc>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000698:	4293      	cmp	r3, r2
 800069a:	d925      	bls.n	80006e8 <UpdateRocketStatus+0x250>
        rocket_status.gpio15_activated = 1;
 800069c:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <UpdateRocketStatus+0x264>)
 800069e:	2201      	movs	r2, #1
 80006a0:	71da      	strb	r2, [r3, #7]
        if (!bit7_detected) {
 80006a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000758 <UpdateRocketStatus+0x2c0>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d11e      	bne.n	80006e8 <UpdateRocketStatus+0x250>
            bit7_detected = 1;
 80006aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000758 <UpdateRocketStatus+0x2c0>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
            // Activate GPIO 15
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006b6:	4820      	ldr	r0, [pc, #128]	@ (8000738 <UpdateRocketStatus+0x2a0>)
 80006b8:	f001 f9e4 	bl	8001a84 <HAL_GPIO_WritePin>
            gpio15_active = 1;
 80006bc:	4b27      	ldr	r3, [pc, #156]	@ (800075c <UpdateRocketStatus+0x2c4>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
            gpio15_start_time = current_time;
 80006c2:	4a27      	ldr	r2, [pc, #156]	@ (8000760 <UpdateRocketStatus+0x2c8>)
 80006c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006c6:	6013      	str	r3, [r2, #0]
            
            // Send GPIO activation message
            uint8_t gpio_msg[] = "GPIO 15 ACTIVATED!\r\n";
 80006c8:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <UpdateRocketStatus+0x2cc>)
 80006ca:	1d3c      	adds	r4, r7, #4
 80006cc:	461d      	mov	r5, r3
 80006ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006d6:	6020      	str	r0, [r4, #0]
 80006d8:	3404      	adds	r4, #4
 80006da:	7021      	strb	r1, [r4, #0]
            HAL_UART_Transmit(&huart1, gpio_msg, sizeof(gpio_msg)-1, 100);
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	2364      	movs	r3, #100	@ 0x64
 80006e0:	2214      	movs	r2, #20
 80006e2:	4819      	ldr	r0, [pc, #100]	@ (8000748 <UpdateRocketStatus+0x2b0>)
 80006e4:	f001 fe46 	bl	8002374 <HAL_UART_Transmit>
        }
    }
}
 80006e8:	bf00      	nop
 80006ea:	3738      	adds	r7, #56	@ 0x38
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bdb0      	pop	{r4, r5, r7, pc}
 80006f0:	20000134 	.word	0x20000134
 80006f4:	2000018e 	.word	0x2000018e
 80006f8:	200001c0 	.word	0x200001c0
 80006fc:	20000178 	.word	0x20000178
 8000700:	20000188 	.word	0x20000188
 8000704:	20000191 	.word	0x20000191
 8000708:	20000198 	.word	0x20000198
 800070c:	20000192 	.word	0x20000192
 8000710:	200001c4 	.word	0x200001c4
 8000714:	2000019c 	.word	0x2000019c
 8000718:	20000193 	.word	0x20000193
 800071c:	200001c8 	.word	0x200001c8
 8000720:	200001a0 	.word	0x200001a0
 8000724:	20000194 	.word	0x20000194
 8000728:	200001cc 	.word	0x200001cc
 800072c:	200001a4 	.word	0x200001a4
 8000730:	20000195 	.word	0x20000195
 8000734:	200001a8 	.word	0x200001a8
 8000738:	40010c00 	.word	0x40010c00
 800073c:	2000018c 	.word	0x2000018c
 8000740:	20000180 	.word	0x20000180
 8000744:	0800278c 	.word	0x0800278c
 8000748:	20000028 	.word	0x20000028
 800074c:	20000196 	.word	0x20000196
 8000750:	200001d0 	.word	0x200001d0
 8000754:	200001ac 	.word	0x200001ac
 8000758:	20000197 	.word	0x20000197
 800075c:	2000018d 	.word	0x2000018d
 8000760:	20000184 	.word	0x20000184
 8000764:	080027a4 	.word	0x080027a4

08000768 <SendRocketStatus>:

void SendRocketStatus(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
    uint8_t status_byte = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	71fb      	strb	r3, [r7, #7]

    // Build status byte
    status_byte |= (rocket_status.rocket_fired << 0);
 8000772:	4b30      	ldr	r3, [pc, #192]	@ (8000834 <SendRocketStatus+0xcc>)
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4313      	orrs	r3, r2
 800077a:	71fb      	strb	r3, [r7, #7]
    status_byte |= (rocket_status.waited_5s << 1);
 800077c:	4b2d      	ldr	r3, [pc, #180]	@ (8000834 <SendRocketStatus+0xcc>)
 800077e:	785b      	ldrb	r3, [r3, #1]
 8000780:	b25b      	sxtb	r3, r3
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	b25a      	sxtb	r2, r3
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	4313      	orrs	r3, r2
 800078c:	b25b      	sxtb	r3, r3
 800078e:	71fb      	strb	r3, [r7, #7]
    status_byte |= (rocket_status.altitude_exceeded_500m << 2);
 8000790:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <SendRocketStatus+0xcc>)
 8000792:	789b      	ldrb	r3, [r3, #2]
 8000794:	b25b      	sxtb	r3, r3
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	b25a      	sxtb	r2, r3
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	4313      	orrs	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	71fb      	strb	r3, [r7, #7]
    status_byte |= (rocket_status.angle_bigger_70 << 3);
 80007a4:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <SendRocketStatus+0xcc>)
 80007a6:	78db      	ldrb	r3, [r3, #3]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	b25a      	sxtb	r2, r3
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	71fb      	strb	r3, [r7, #7]
    status_byte |= (rocket_status.altitude_decreasing << 4);
 80007b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <SendRocketStatus+0xcc>)
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	71fb      	strb	r3, [r7, #7]
    status_byte |= (rocket_status.gpio14_activated << 5);
 80007cc:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <SendRocketStatus+0xcc>)
 80007ce:	795b      	ldrb	r3, [r3, #5]
 80007d0:	b25b      	sxtb	r3, r3
 80007d2:	015b      	lsls	r3, r3, #5
 80007d4:	b25a      	sxtb	r2, r3
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	4313      	orrs	r3, r2
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	71fb      	strb	r3, [r7, #7]
    status_byte |= (rocket_status.altitude_550 << 6);
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <SendRocketStatus+0xcc>)
 80007e2:	799b      	ldrb	r3, [r3, #6]
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	019b      	lsls	r3, r3, #6
 80007e8:	b25a      	sxtb	r2, r3
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	71fb      	strb	r3, [r7, #7]
    status_byte |= (rocket_status.gpio15_activated << 7);
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <SendRocketStatus+0xcc>)
 80007f6:	79db      	ldrb	r3, [r3, #7]
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	01db      	lsls	r3, r3, #7
 80007fc:	b25a      	sxtb	r2, r3
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	4313      	orrs	r3, r2
 8000804:	b25b      	sxtb	r3, r3
 8000806:	71fb      	strb	r3, [r7, #7]
    
    // Send status packet: 0xAA, status_byte, 0x00, 0x1A, 0x0D, 0x0A
    uint8_t status_packet[6] = {0xAA, status_byte, 0x00, 0x1A, 0x0D, 0x0A};
 8000808:	23aa      	movs	r3, #170	@ 0xaa
 800080a:	703b      	strb	r3, [r7, #0]
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	707b      	strb	r3, [r7, #1]
 8000810:	2300      	movs	r3, #0
 8000812:	70bb      	strb	r3, [r7, #2]
 8000814:	231a      	movs	r3, #26
 8000816:	70fb      	strb	r3, [r7, #3]
 8000818:	230d      	movs	r3, #13
 800081a:	713b      	strb	r3, [r7, #4]
 800081c:	230a      	movs	r3, #10
 800081e:	717b      	strb	r3, [r7, #5]
    HAL_UART_Transmit(&huart1, status_packet, 6, 100);
 8000820:	4639      	mov	r1, r7
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	2206      	movs	r2, #6
 8000826:	4804      	ldr	r0, [pc, #16]	@ (8000838 <SendRocketStatus+0xd0>)
 8000828:	f001 fda4 	bl	8002374 <HAL_UART_Transmit>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000178 	.word	0x20000178
 8000838:	20000028 	.word	0x20000028

0800083c <ControlGPIOs>:

void ControlGPIOs(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8000842:	f000 fe89 	bl	8001558 <HAL_GetTick>
 8000846:	6078      	str	r0, [r7, #4]

    // Handle GPIO 14 blinking for data flow validation
    if (gpio14_blink_active) {
 8000848:	4b46      	ldr	r3, [pc, #280]	@ (8000964 <ControlGPIOs+0x128>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d042      	beq.n	80008d6 <ControlGPIOs+0x9a>
        if (gpio14_blink_count < 6) { // 3 blinks = 6 state changes (ON-OFF-ON-OFF-ON-OFF)
 8000850:	4b45      	ldr	r3, [pc, #276]	@ (8000968 <ControlGPIOs+0x12c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b05      	cmp	r3, #5
 8000856:	d834      	bhi.n	80008c2 <ControlGPIOs+0x86>
            if (gpio14_blink_count % 2 == 0) { // Even = ON
 8000858:	4b43      	ldr	r3, [pc, #268]	@ (8000968 <ControlGPIOs+0x12c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d116      	bne.n	8000894 <ControlGPIOs+0x58>
                if (current_time - gpio14_blink_start_time >= 1000) { // 1 second ON
 8000866:	4b41      	ldr	r3, [pc, #260]	@ (800096c <ControlGPIOs+0x130>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000872:	d373      	bcc.n	800095c <ControlGPIOs+0x120>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800087a:	483d      	ldr	r0, [pc, #244]	@ (8000970 <ControlGPIOs+0x134>)
 800087c:	f001 f902 	bl	8001a84 <HAL_GPIO_WritePin>
                    gpio14_blink_count++;
 8000880:	4b39      	ldr	r3, [pc, #228]	@ (8000968 <ControlGPIOs+0x12c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b37      	ldr	r3, [pc, #220]	@ (8000968 <ControlGPIOs+0x12c>)
 800088a:	701a      	strb	r2, [r3, #0]
                    gpio14_blink_start_time = current_time;
 800088c:	4a37      	ldr	r2, [pc, #220]	@ (800096c <ControlGPIOs+0x130>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]
        } else {
            // Blinking complete
            gpio14_blink_active = 0;
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
        }
        return; // Don't process other GPIO logic while blinking
 8000892:	e063      	b.n	800095c <ControlGPIOs+0x120>
                if (current_time - gpio14_blink_start_time >= 1000) { // 1 second OFF
 8000894:	4b35      	ldr	r3, [pc, #212]	@ (800096c <ControlGPIOs+0x130>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008a0:	d35c      	bcc.n	800095c <ControlGPIOs+0x120>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008a8:	4831      	ldr	r0, [pc, #196]	@ (8000970 <ControlGPIOs+0x134>)
 80008aa:	f001 f8eb 	bl	8001a84 <HAL_GPIO_WritePin>
                    gpio14_blink_count++;
 80008ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000968 <ControlGPIOs+0x12c>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000968 <ControlGPIOs+0x12c>)
 80008b8:	701a      	strb	r2, [r3, #0]
                    gpio14_blink_start_time = current_time;
 80008ba:	4a2c      	ldr	r2, [pc, #176]	@ (800096c <ControlGPIOs+0x130>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6013      	str	r3, [r2, #0]
        return; // Don't process other GPIO logic while blinking
 80008c0:	e04c      	b.n	800095c <ControlGPIOs+0x120>
            gpio14_blink_active = 0;
 80008c2:	4b28      	ldr	r3, [pc, #160]	@ (8000964 <ControlGPIOs+0x128>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ce:	4828      	ldr	r0, [pc, #160]	@ (8000970 <ControlGPIOs+0x134>)
 80008d0:	f001 f8d8 	bl	8001a84 <HAL_GPIO_WritePin>
        return; // Don't process other GPIO logic while blinking
 80008d4:	e042      	b.n	800095c <ControlGPIOs+0x120>
    }
    
    // Turn off GPIO 14 after 3 seconds
    if (gpio14_active && (current_time - gpio14_start_time) >= GPIO_ACTIVATION_TIME) {
 80008d6:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <ControlGPIOs+0x138>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d010      	beq.n	8000900 <ControlGPIOs+0xc4>
 80008de:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <ControlGPIOs+0x13c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d908      	bls.n	8000900 <ControlGPIOs+0xc4>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008f4:	481e      	ldr	r0, [pc, #120]	@ (8000970 <ControlGPIOs+0x134>)
 80008f6:	f001 f8c5 	bl	8001a84 <HAL_GPIO_WritePin>
        gpio14_active = 0;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <ControlGPIOs+0x138>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
    }
    
    // Turn off GPIO 15 after 3 seconds
    if (gpio15_active && (current_time - gpio15_start_time) >= GPIO_ACTIVATION_TIME) {
 8000900:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <ControlGPIOs+0x140>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d010      	beq.n	800092a <ControlGPIOs+0xee>
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <ControlGPIOs+0x144>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000914:	4293      	cmp	r3, r2
 8000916:	d908      	bls.n	800092a <ControlGPIOs+0xee>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800091e:	4814      	ldr	r0, [pc, #80]	@ (8000970 <ControlGPIOs+0x134>)
 8000920:	f001 f8b0 	bl	8001a84 <HAL_GPIO_WritePin>
        gpio15_active = 0;
 8000924:	4b15      	ldr	r3, [pc, #84]	@ (800097c <ControlGPIOs+0x140>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
    }

     // Turn off GPIOs when not active (normal operation)
     if (!gpio14_active && !gpio14_blink_active) {
 800092a:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <ControlGPIOs+0x138>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d109      	bne.n	8000946 <ControlGPIOs+0x10a>
 8000932:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <ControlGPIOs+0x128>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d105      	bne.n	8000946 <ControlGPIOs+0x10a>
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000940:	480b      	ldr	r0, [pc, #44]	@ (8000970 <ControlGPIOs+0x134>)
 8000942:	f001 f89f 	bl	8001a84 <HAL_GPIO_WritePin>
     }
     if (!gpio15_active) {
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <ControlGPIOs+0x140>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d107      	bne.n	800095e <ControlGPIOs+0x122>
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000954:	4806      	ldr	r0, [pc, #24]	@ (8000970 <ControlGPIOs+0x134>)
 8000956:	f001 f895 	bl	8001a84 <HAL_GPIO_WritePin>
 800095a:	e000      	b.n	800095e <ControlGPIOs+0x122>
        return; // Don't process other GPIO logic while blinking
 800095c:	bf00      	nop
     }
}
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200001b3 	.word	0x200001b3
 8000968:	200001b2 	.word	0x200001b2
 800096c:	200001b4 	.word	0x200001b4
 8000970:	40010c00 	.word	0x40010c00
 8000974:	2000018c 	.word	0x2000018c
 8000978:	20000180 	.word	0x20000180
 800097c:	2000018d 	.word	0x2000018d
 8000980:	20000184 	.word	0x20000184

08000984 <GetSystemTime>:

uint32_t GetSystemTime(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
    return system_tick;
 8000988:	4b02      	ldr	r3, [pc, #8]	@ (8000994 <GetSystemTime+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	200001bc 	.word	0x200001bc

08000998 <BytesToFloat>:

float BytesToFloat(uint8_t* bytes)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    uint32_t temp = BytesToUint32(bytes);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f809 	bl	80009b8 <BytesToUint32>
 80009a6:	4603      	mov	r3, r0
 80009a8:	60fb      	str	r3, [r7, #12]
    return *(float*)&temp;
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <BytesToUint32>:

uint32_t BytesToUint32(uint8_t* bytes)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    return (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3];
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	061a      	lsls	r2, r3, #24
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3301      	adds	r3, #1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	041b      	lsls	r3, r3, #16
 80009ce:	431a      	orrs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3302      	adds	r3, #2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	4313      	orrs	r3, r2
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	3203      	adds	r2, #3
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	4313      	orrs	r3, r2
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b5b0      	push	{r4, r5, r7, lr}
 80009ee:	b0d0      	sub	sp, #320	@ 0x140
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f2:	f000 fd59 	bl	80014a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f6:	f000 faf7 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fa:	f000 fbb9 	bl	8001170 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009fe:	f000 fb39 	bl	8001074 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a02:	f000 fb61 	bl	80010c8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a06:	f000 fb89 	bl	800111c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize variables
  memset(&rocket_status, 0, sizeof(RocketStatus_t));
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	48a3      	ldr	r0, [pc, #652]	@ (8000c9c <main+0x2b0>)
 8000a10:	f001 fe84 	bl	800271c <memset>
  memset(&current_data, 0, sizeof(RocketData_t));
 8000a14:	2220      	movs	r2, #32
 8000a16:	2100      	movs	r1, #0
 8000a18:	48a1      	ldr	r0, [pc, #644]	@ (8000ca0 <main+0x2b4>)
 8000a1a:	f001 fe7f 	bl	800271c <memset>
  memset(&previous_data, 0, sizeof(RocketData_t));
 8000a1e:	2220      	movs	r2, #32
 8000a20:	2100      	movs	r1, #0
 8000a22:	48a0      	ldr	r0, [pc, #640]	@ (8000ca4 <main+0x2b8>)
 8000a24:	f001 fe7a 	bl	800271c <memset>
  // __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
  // HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
  // HAL_NVIC_EnableIRQ(USART1_IRQn);

  // Rocket system startup message
  uint8_t debug_msg[] = "Rocket Parachute System Starting\r\n";
 8000a28:	4b9f      	ldr	r3, [pc, #636]	@ (8000ca8 <main+0x2bc>)
 8000a2a:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8000a2e:	461d      	mov	r5, r3
 8000a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a38:	682b      	ldr	r3, [r5, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	8022      	strh	r2, [r4, #0]
 8000a3e:	3402      	adds	r4, #2
 8000a40:	0c1b      	lsrs	r3, r3, #16
 8000a42:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, debug_msg, sizeof(debug_msg)-1, 100);
 8000a44:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000a48:	2364      	movs	r3, #100	@ 0x64
 8000a4a:	2222      	movs	r2, #34	@ 0x22
 8000a4c:	4897      	ldr	r0, [pc, #604]	@ (8000cac <main+0x2c0>)
 8000a4e:	f001 fc91 	bl	8002374 <HAL_UART_Transmit>



  // Debug: Send a test message via UART to verify UART is working
  uint8_t test_msg[] = "UART Test OK\r\n";
 8000a52:	4b97      	ldr	r3, [pc, #604]	@ (8000cb0 <main+0x2c4>)
 8000a54:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8000a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a5a:	c407      	stmia	r4!, {r0, r1, r2}
 8000a5c:	8023      	strh	r3, [r4, #0]
 8000a5e:	3402      	adds	r4, #2
 8000a60:	0c1b      	lsrs	r3, r3, #16
 8000a62:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, test_msg, sizeof(test_msg)-1, 1000);
 8000a64:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8000a68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6c:	220e      	movs	r2, #14
 8000a6e:	488f      	ldr	r0, [pc, #572]	@ (8000cac <main+0x2c0>)
 8000a70:	f001 fc80 	bl	8002374 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  // Rocket parachute deployment logic
  uint32_t current_time = HAL_GetTick();
 8000a74:	f000 fd70 	bl	8001558 <HAL_GetTick>
 8000a78:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c

  // Poll UART for received data
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)) {
 8000a7c:	4b8b      	ldr	r3, [pc, #556]	@ (8000cac <main+0x2c0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0320 	and.w	r3, r3, #32
 8000a86:	2b20      	cmp	r3, #32
 8000a88:	d117      	bne.n	8000aba <main+0xce>
      uint8_t received_byte = (uint8_t)(huart1.Instance->DR & 0xFF);
 8000a8a:	4b88      	ldr	r3, [pc, #544]	@ (8000cac <main+0x2c0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b

      // Add byte to buffer
      if (uart_rx_index < UART_BUFFER_SIZE) {
 8000a94:	4b87      	ldr	r3, [pc, #540]	@ (8000cb4 <main+0x2c8>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b31      	cmp	r3, #49	@ 0x31
 8000a9a:	d80b      	bhi.n	8000ab4 <main+0xc8>
          uart_rx_buffer[uart_rx_index++] = received_byte;
 8000a9c:	4b85      	ldr	r3, [pc, #532]	@ (8000cb4 <main+0x2c8>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	b2d1      	uxtb	r1, r2
 8000aa4:	4a83      	ldr	r2, [pc, #524]	@ (8000cb4 <main+0x2c8>)
 8000aa6:	7011      	strb	r1, [r2, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4a83      	ldr	r2, [pc, #524]	@ (8000cb8 <main+0x2cc>)
 8000aac:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8000ab0:	5453      	strb	r3, [r2, r1]
 8000ab2:	e002      	b.n	8000aba <main+0xce>
      } else {
          uart_rx_index = 0; // Reset if buffer overflow
 8000ab4:	4b7f      	ldr	r3, [pc, #508]	@ (8000cb4 <main+0x2c8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
      }
  }

  // Process UART data (start/stop signals and data packets)
  ProcessUARTData();
 8000aba:	f7ff fbbd 	bl	8000238 <ProcessUARTData>

  // Simple test: Activate test mode when any data is received (for testing)
  if (uart_rx_index > 0 && !test_active) {
 8000abe:	4b7d      	ldr	r3, [pc, #500]	@ (8000cb4 <main+0x2c8>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d055      	beq.n	8000b72 <main+0x186>
 8000ac6:	4b7d      	ldr	r3, [pc, #500]	@ (8000cbc <main+0x2d0>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d151      	bne.n	8000b72 <main+0x186>
      test_active = 1;
 8000ace:	4b7b      	ldr	r3, [pc, #492]	@ (8000cbc <main+0x2d0>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
      memset(&rocket_status, 0, sizeof(RocketStatus_t));
 8000ad4:	2208      	movs	r2, #8
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4870      	ldr	r0, [pc, #448]	@ (8000c9c <main+0x2b0>)
 8000ada:	f001 fe1f 	bl	800271c <memset>
      rocket_fired_detected = 0;
 8000ade:	4b78      	ldr	r3, [pc, #480]	@ (8000cc0 <main+0x2d4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
      altitude_decreasing_detected = 0;
 8000ae4:	4b77      	ldr	r3, [pc, #476]	@ (8000cc4 <main+0x2d8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
      altitude_550_detected = 0;
 8000aea:	4b77      	ldr	r3, [pc, #476]	@ (8000cc8 <main+0x2dc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
      gpio14_active = 0;
 8000af0:	4b76      	ldr	r3, [pc, #472]	@ (8000ccc <main+0x2e0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
      gpio15_active = 0;
 8000af6:	4b76      	ldr	r3, [pc, #472]	@ (8000cd0 <main+0x2e4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
      altitude_data_started = 0;
 8000afc:	4b75      	ldr	r3, [pc, #468]	@ (8000cd4 <main+0x2e8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
      gpio14_blink_active = 0;
 8000b02:	4b75      	ldr	r3, [pc, #468]	@ (8000cd8 <main+0x2ec>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
      gpio14_blink_count = 0;
 8000b08:	4b74      	ldr	r3, [pc, #464]	@ (8000cdc <main+0x2f0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
      angle_high_count = 0;
 8000b0e:	4b74      	ldr	r3, [pc, #464]	@ (8000ce0 <main+0x2f4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
      altitude_decreasing_count = 0;
 8000b14:	4b73      	ldr	r3, [pc, #460]	@ (8000ce4 <main+0x2f8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]

      // Initialize test data for simulation
      current_data.altitude = 0.0f;
 8000b1a:	4b61      	ldr	r3, [pc, #388]	@ (8000ca0 <main+0x2b4>)
 8000b1c:	f04f 0200 	mov.w	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
      current_data.angle_x = 0.0f;
 8000b22:	4b5f      	ldr	r3, [pc, #380]	@ (8000ca0 <main+0x2b4>)
 8000b24:	f04f 0200 	mov.w	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
      current_data.angle_y = 0.0f;
 8000b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ca0 <main+0x2b4>)
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
      current_data.accel_z = 0.0f;
 8000b32:	4b5b      	ldr	r3, [pc, #364]	@ (8000ca0 <main+0x2b4>)
 8000b34:	f04f 0200 	mov.w	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
      previous_data.altitude = 0.0f;
 8000b3a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ca4 <main+0x2b8>)
 8000b3c:	f04f 0200 	mov.w	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]

      // Send activation message
      uint8_t activate_msg[] = "Test Mode Activated! Simulating rocket data...\r\n";
 8000b42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000b46:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000b4a:	4a67      	ldr	r2, [pc, #412]	@ (8000ce8 <main+0x2fc>)
 8000b4c:	461c      	mov	r4, r3
 8000b4e:	4615      	mov	r5, r2
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b5c:	682b      	ldr	r3, [r5, #0]
 8000b5e:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart1, activate_msg, sizeof(activate_msg)-1, 100);
 8000b60:	4639      	mov	r1, r7
 8000b62:	2364      	movs	r3, #100	@ 0x64
 8000b64:	2230      	movs	r2, #48	@ 0x30
 8000b66:	4851      	ldr	r0, [pc, #324]	@ (8000cac <main+0x2c0>)
 8000b68:	f001 fc04 	bl	8002374 <HAL_UART_Transmit>

      // Reset buffer
      uart_rx_index = 0;
 8000b6c:	4b51      	ldr	r3, [pc, #324]	@ (8000cb4 <main+0x2c8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
  }

  // Update rocket status and control GPIOs if test is active
  if (test_active) {
 8000b72:	4b52      	ldr	r3, [pc, #328]	@ (8000cbc <main+0x2d0>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 810e 	beq.w	8000d98 <main+0x3ac>
      // Simulate rocket data progression for testing
      static uint32_t simulation_time = 0;
      static uint8_t simulation_phase = 0;

      if (current_time - simulation_time >= 2000) { // Update every 2 seconds
 8000b7c:	4b5b      	ldr	r3, [pc, #364]	@ (8000cec <main+0x300>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000b8a:	f0c0 80f8 	bcc.w	8000d7e <main+0x392>
          simulation_time = current_time;
 8000b8e:	4a57      	ldr	r2, [pc, #348]	@ (8000cec <main+0x300>)
 8000b90:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000b94:	6013      	str	r3, [r2, #0]

          // Store previous data
          previous_data.altitude = current_data.altitude;
 8000b96:	4b42      	ldr	r3, [pc, #264]	@ (8000ca0 <main+0x2b4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a42      	ldr	r2, [pc, #264]	@ (8000ca4 <main+0x2b8>)
 8000b9c:	6013      	str	r3, [r2, #0]

          // Simulate different rocket phases
          switch (simulation_phase) {
 8000b9e:	4b54      	ldr	r3, [pc, #336]	@ (8000cf0 <main+0x304>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	f200 80d4 	bhi.w	8000d50 <main+0x364>
 8000ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb0 <main+0x1c4>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000bcd 	.word	0x08000bcd
 8000bb4:	08000bf3 	.word	0x08000bf3
 8000bb8:	08000c1b 	.word	0x08000c1b
 8000bbc:	08000c3b 	.word	0x08000c3b
 8000bc0:	08000c5b 	.word	0x08000c5b
 8000bc4:	08000c7b 	.word	0x08000c7b
 8000bc8:	08000d31 	.word	0x08000d31
              case 0: // Rocket fired (accel_z > 3)
                  current_data.accel_z = 5.0f;
 8000bcc:	4b34      	ldr	r3, [pc, #208]	@ (8000ca0 <main+0x2b4>)
 8000bce:	4a49      	ldr	r2, [pc, #292]	@ (8000cf4 <main+0x308>)
 8000bd0:	611a      	str	r2, [r3, #16]
                  current_data.altitude = 100.0f;
 8000bd2:	4b33      	ldr	r3, [pc, #204]	@ (8000ca0 <main+0x2b4>)
 8000bd4:	4a48      	ldr	r2, [pc, #288]	@ (8000cf8 <main+0x30c>)
 8000bd6:	601a      	str	r2, [r3, #0]
                  current_data.angle_x = 10.0f;
 8000bd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ca0 <main+0x2b4>)
 8000bda:	4a48      	ldr	r2, [pc, #288]	@ (8000cfc <main+0x310>)
 8000bdc:	615a      	str	r2, [r3, #20]
                  current_data.angle_y = 15.0f;
 8000bde:	4b30      	ldr	r3, [pc, #192]	@ (8000ca0 <main+0x2b4>)
 8000be0:	4a47      	ldr	r2, [pc, #284]	@ (8000d00 <main+0x314>)
 8000be2:	619a      	str	r2, [r3, #24]
                  simulation_phase++;
 8000be4:	4b42      	ldr	r3, [pc, #264]	@ (8000cf0 <main+0x304>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	4b40      	ldr	r3, [pc, #256]	@ (8000cf0 <main+0x304>)
 8000bee:	701a      	strb	r2, [r3, #0]
                  break;
 8000bf0:	e0c2      	b.n	8000d78 <main+0x38c>

              case 1: // Altitude increasing, angles normal
                  current_data.accel_z = 2.0f;
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca0 <main+0x2b4>)
 8000bf4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bf8:	611a      	str	r2, [r3, #16]
                  current_data.altitude = 300.0f;
 8000bfa:	4b29      	ldr	r3, [pc, #164]	@ (8000ca0 <main+0x2b4>)
 8000bfc:	4a41      	ldr	r2, [pc, #260]	@ (8000d04 <main+0x318>)
 8000bfe:	601a      	str	r2, [r3, #0]
                  current_data.angle_x = 20.0f;
 8000c00:	4b27      	ldr	r3, [pc, #156]	@ (8000ca0 <main+0x2b4>)
 8000c02:	4a41      	ldr	r2, [pc, #260]	@ (8000d08 <main+0x31c>)
 8000c04:	615a      	str	r2, [r3, #20]
                  current_data.angle_y = 25.0f;
 8000c06:	4b26      	ldr	r3, [pc, #152]	@ (8000ca0 <main+0x2b4>)
 8000c08:	4a40      	ldr	r2, [pc, #256]	@ (8000d0c <main+0x320>)
 8000c0a:	619a      	str	r2, [r3, #24]
                  simulation_phase++;
 8000c0c:	4b38      	ldr	r3, [pc, #224]	@ (8000cf0 <main+0x304>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b36      	ldr	r3, [pc, #216]	@ (8000cf0 <main+0x304>)
 8000c16:	701a      	strb	r2, [r3, #0]
                  break;
 8000c18:	e0ae      	b.n	8000d78 <main+0x38c>

              case 2: // Altitude > 500m
                  current_data.altitude = 600.0f;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <main+0x2b4>)
 8000c1c:	4a3c      	ldr	r2, [pc, #240]	@ (8000d10 <main+0x324>)
 8000c1e:	601a      	str	r2, [r3, #0]
                  current_data.angle_x = 30.0f;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <main+0x2b4>)
 8000c22:	4a3c      	ldr	r2, [pc, #240]	@ (8000d14 <main+0x328>)
 8000c24:	615a      	str	r2, [r3, #20]
                  current_data.angle_y = 35.0f;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <main+0x2b4>)
 8000c28:	4a3b      	ldr	r2, [pc, #236]	@ (8000d18 <main+0x32c>)
 8000c2a:	619a      	str	r2, [r3, #24]
                  simulation_phase++;
 8000c2c:	4b30      	ldr	r3, [pc, #192]	@ (8000cf0 <main+0x304>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf0 <main+0x304>)
 8000c36:	701a      	strb	r2, [r3, #0]
                  break;
 8000c38:	e09e      	b.n	8000d78 <main+0x38c>

              case 3: // Angle > 60 degrees
                  current_data.altitude = 700.0f;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <main+0x2b4>)
 8000c3c:	4a37      	ldr	r2, [pc, #220]	@ (8000d1c <main+0x330>)
 8000c3e:	601a      	str	r2, [r3, #0]
                  current_data.angle_x = 65.0f; // This should trigger GPIO 14
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <main+0x2b4>)
 8000c42:	4a37      	ldr	r2, [pc, #220]	@ (8000d20 <main+0x334>)
 8000c44:	615a      	str	r2, [r3, #20]
                  current_data.angle_y = 70.0f;
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <main+0x2b4>)
 8000c48:	4a36      	ldr	r2, [pc, #216]	@ (8000d24 <main+0x338>)
 8000c4a:	619a      	str	r2, [r3, #24]
                  simulation_phase++;
 8000c4c:	4b28      	ldr	r3, [pc, #160]	@ (8000cf0 <main+0x304>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	3301      	adds	r3, #1
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <main+0x304>)
 8000c56:	701a      	strb	r2, [r3, #0]
                  break;
 8000c58:	e08e      	b.n	8000d78 <main+0x38c>

              case 4: // Altitude decreasing
                  current_data.altitude = 650.0f; // Decreasing
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <main+0x2b4>)
 8000c5c:	4a32      	ldr	r2, [pc, #200]	@ (8000d28 <main+0x33c>)
 8000c5e:	601a      	str	r2, [r3, #0]
                  current_data.angle_x = 65.0f;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <main+0x2b4>)
 8000c62:	4a2f      	ldr	r2, [pc, #188]	@ (8000d20 <main+0x334>)
 8000c64:	615a      	str	r2, [r3, #20]
                  current_data.angle_y = 70.0f;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <main+0x2b4>)
 8000c68:	4a2e      	ldr	r2, [pc, #184]	@ (8000d24 <main+0x338>)
 8000c6a:	619a      	str	r2, [r3, #24]
                  simulation_phase++;
 8000c6c:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <main+0x304>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <main+0x304>)
 8000c76:	701a      	strb	r2, [r3, #0]
                  break;
 8000c78:	e07e      	b.n	8000d78 <main+0x38c>

                             case 5: // Altitude = 550m
                   current_data.altitude = 550.0f; // This should trigger GPIO 15
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <main+0x2b4>)
 8000c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8000d2c <main+0x340>)
 8000c7e:	601a      	str	r2, [r3, #0]
                   current_data.angle_x = 65.0f;
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <main+0x2b4>)
 8000c82:	4a27      	ldr	r2, [pc, #156]	@ (8000d20 <main+0x334>)
 8000c84:	615a      	str	r2, [r3, #20]
                   current_data.angle_y = 70.0f;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <main+0x2b4>)
 8000c88:	4a26      	ldr	r2, [pc, #152]	@ (8000d24 <main+0x338>)
 8000c8a:	619a      	str	r2, [r3, #24]
                   simulation_phase++;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <main+0x304>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <main+0x304>)
 8000c96:	701a      	strb	r2, [r3, #0]
                   break;
 8000c98:	e06e      	b.n	8000d78 <main+0x38c>
 8000c9a:	bf00      	nop
 8000c9c:	20000178 	.word	0x20000178
 8000ca0:	20000138 	.word	0x20000138
 8000ca4:	20000158 	.word	0x20000158
 8000ca8:	080027bc 	.word	0x080027bc
 8000cac:	20000028 	.word	0x20000028
 8000cb0:	080027e0 	.word	0x080027e0
 8000cb4:	20000132 	.word	0x20000132
 8000cb8:	20000100 	.word	0x20000100
 8000cbc:	20000133 	.word	0x20000133
 8000cc0:	2000018e 	.word	0x2000018e
 8000cc4:	2000018f 	.word	0x2000018f
 8000cc8:	20000190 	.word	0x20000190
 8000ccc:	2000018c 	.word	0x2000018c
 8000cd0:	2000018d 	.word	0x2000018d
 8000cd4:	200001b8 	.word	0x200001b8
 8000cd8:	200001b3 	.word	0x200001b3
 8000cdc:	200001b2 	.word	0x200001b2
 8000ce0:	200001b0 	.word	0x200001b0
 8000ce4:	200001b1 	.word	0x200001b1
 8000ce8:	080027f0 	.word	0x080027f0
 8000cec:	200001d4 	.word	0x200001d4
 8000cf0:	200001d8 	.word	0x200001d8
 8000cf4:	40a00000 	.word	0x40a00000
 8000cf8:	42c80000 	.word	0x42c80000
 8000cfc:	41200000 	.word	0x41200000
 8000d00:	41700000 	.word	0x41700000
 8000d04:	43960000 	.word	0x43960000
 8000d08:	41a00000 	.word	0x41a00000
 8000d0c:	41c80000 	.word	0x41c80000
 8000d10:	44160000 	.word	0x44160000
 8000d14:	41f00000 	.word	0x41f00000
 8000d18:	420c0000 	.word	0x420c0000
 8000d1c:	442f0000 	.word	0x442f0000
 8000d20:	42820000 	.word	0x42820000
 8000d24:	428c0000 	.word	0x428c0000
 8000d28:	44228000 	.word	0x44228000
 8000d2c:	44098000 	.word	0x44098000

               case 6: // Test altitude 1000m - should blink both LEDs
                   current_data.altitude = 1000.0f;
 8000d30:	4b95      	ldr	r3, [pc, #596]	@ (8000f88 <main+0x59c>)
 8000d32:	4a96      	ldr	r2, [pc, #600]	@ (8000f8c <main+0x5a0>)
 8000d34:	601a      	str	r2, [r3, #0]
                   current_data.angle_x = 65.0f;
 8000d36:	4b94      	ldr	r3, [pc, #592]	@ (8000f88 <main+0x59c>)
 8000d38:	4a95      	ldr	r2, [pc, #596]	@ (8000f90 <main+0x5a4>)
 8000d3a:	615a      	str	r2, [r3, #20]
                   current_data.angle_y = 70.0f;
 8000d3c:	4b92      	ldr	r3, [pc, #584]	@ (8000f88 <main+0x59c>)
 8000d3e:	4a95      	ldr	r2, [pc, #596]	@ (8000f94 <main+0x5a8>)
 8000d40:	619a      	str	r2, [r3, #24]
                   simulation_phase++;
 8000d42:	4b95      	ldr	r3, [pc, #596]	@ (8000f98 <main+0x5ac>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b93      	ldr	r3, [pc, #588]	@ (8000f98 <main+0x5ac>)
 8000d4c:	701a      	strb	r2, [r3, #0]
                   break;
 8000d4e:	e013      	b.n	8000d78 <main+0x38c>

               default: // Reset simulation
                   simulation_phase = 0;
 8000d50:	4b91      	ldr	r3, [pc, #580]	@ (8000f98 <main+0x5ac>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
                   current_data.altitude = 0.0f;
 8000d56:	4b8c      	ldr	r3, [pc, #560]	@ (8000f88 <main+0x59c>)
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
                   current_data.angle_x = 0.0f;
 8000d5e:	4b8a      	ldr	r3, [pc, #552]	@ (8000f88 <main+0x59c>)
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
                   current_data.angle_y = 0.0f;
 8000d66:	4b88      	ldr	r3, [pc, #544]	@ (8000f88 <main+0x59c>)
 8000d68:	f04f 0200 	mov.w	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
                   current_data.accel_z = 0.0f;
 8000d6e:	4b86      	ldr	r3, [pc, #536]	@ (8000f88 <main+0x59c>)
 8000d70:	f04f 0200 	mov.w	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
                   break;
 8000d76:	bf00      	nop
          }

          // Process the simulated data
          data_received = 1;
 8000d78:	4b88      	ldr	r3, [pc, #544]	@ (8000f9c <main+0x5b0>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
      }

      if (data_received) {
 8000d7e:	4b87      	ldr	r3, [pc, #540]	@ (8000f9c <main+0x5b0>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d008      	beq.n	8000d98 <main+0x3ac>
          UpdateRocketStatus();
 8000d86:	f7ff fb87 	bl	8000498 <UpdateRocketStatus>
          ControlGPIOs();
 8000d8a:	f7ff fd57 	bl	800083c <ControlGPIOs>
          SendRocketStatus();
 8000d8e:	f7ff fceb 	bl	8000768 <SendRocketStatus>
          data_received = 0;
 8000d92:	4b82      	ldr	r3, [pc, #520]	@ (8000f9c <main+0x5b0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]



  // Debug: Show test mode status
  static uint32_t last_debug_time = 0;
  if (test_active && (current_time - last_debug_time >= 1000)) {
 8000d98:	4b81      	ldr	r3, [pc, #516]	@ (8000fa0 <main+0x5b4>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f000 80ee 	beq.w	8000f7e <main+0x592>
 8000da2:	4b80      	ldr	r3, [pc, #512]	@ (8000fa4 <main+0x5b8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000db0:	f0c0 80e5 	bcc.w	8000f7e <main+0x592>
      last_debug_time = current_time;
 8000db4:	4a7b      	ldr	r2, [pc, #492]	@ (8000fa4 <main+0x5b8>)
 8000db6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000dba:	6013      	str	r3, [r2, #0]

      // Send debug message when in test mode - simplified without sprintf
      uint8_t debug_msg[] = "Simulation Active - Phase: ";
 8000dbc:	4b7a      	ldr	r3, [pc, #488]	@ (8000fa8 <main+0x5bc>)
 8000dbe:	f107 04ec 	add.w	r4, r7, #236	@ 0xec
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      HAL_UART_Transmit(&huart1, debug_msg, sizeof(debug_msg)-1, 100);
 8000dd0:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8000dd4:	2364      	movs	r3, #100	@ 0x64
 8000dd6:	221b      	movs	r2, #27
 8000dd8:	4874      	ldr	r0, [pc, #464]	@ (8000fac <main+0x5c0>)
 8000dda:	f001 facb 	bl	8002374 <HAL_UART_Transmit>

      // Send phase number
      uint8_t phase_msg[10];
      if (current_data.altitude == 100.0f) {
 8000dde:	4b6a      	ldr	r3, [pc, #424]	@ (8000f88 <main+0x59c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4973      	ldr	r1, [pc, #460]	@ (8000fb0 <main+0x5c4>)
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff f9f5 	bl	80001d4 <__aeabi_fcmpeq>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d013      	beq.n	8000e18 <main+0x42c>
          uint8_t phase[] = "0 (Rocket Fired)\r\n";
 8000df0:	4b70      	ldr	r3, [pc, #448]	@ (8000fb4 <main+0x5c8>)
 8000df2:	f107 04cc 	add.w	r4, r7, #204	@ 0xcc
 8000df6:	461d      	mov	r5, r3
 8000df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	8022      	strh	r2, [r4, #0]
 8000e02:	3402      	adds	r4, #2
 8000e04:	0c1b      	lsrs	r3, r3, #16
 8000e06:	7023      	strb	r3, [r4, #0]
          HAL_UART_Transmit(&huart1, phase, sizeof(phase)-1, 100);
 8000e08:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8000e0c:	2364      	movs	r3, #100	@ 0x64
 8000e0e:	2212      	movs	r2, #18
 8000e10:	4866      	ldr	r0, [pc, #408]	@ (8000fac <main+0x5c0>)
 8000e12:	f001 faaf 	bl	8002374 <HAL_UART_Transmit>
 8000e16:	e0b2      	b.n	8000f7e <main+0x592>
      } else if (current_data.altitude == 300.0f) {
 8000e18:	4b5b      	ldr	r3, [pc, #364]	@ (8000f88 <main+0x59c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4966      	ldr	r1, [pc, #408]	@ (8000fb8 <main+0x5cc>)
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff f9d8 	bl	80001d4 <__aeabi_fcmpeq>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00f      	beq.n	8000e4a <main+0x45e>
          uint8_t phase[] = "1 (Normal Flight)\r\n";
 8000e2a:	4b64      	ldr	r3, [pc, #400]	@ (8000fbc <main+0x5d0>)
 8000e2c:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 8000e30:	461d      	mov	r5, r3
 8000e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e36:	682b      	ldr	r3, [r5, #0]
 8000e38:	6023      	str	r3, [r4, #0]
          HAL_UART_Transmit(&huart1, phase, sizeof(phase)-1, 100);
 8000e3a:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8000e3e:	2364      	movs	r3, #100	@ 0x64
 8000e40:	2213      	movs	r2, #19
 8000e42:	485a      	ldr	r0, [pc, #360]	@ (8000fac <main+0x5c0>)
 8000e44:	f001 fa96 	bl	8002374 <HAL_UART_Transmit>
 8000e48:	e099      	b.n	8000f7e <main+0x592>
      } else if (current_data.altitude == 600.0f) {
 8000e4a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f88 <main+0x59c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	495c      	ldr	r1, [pc, #368]	@ (8000fc0 <main+0x5d4>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff f9bf 	bl	80001d4 <__aeabi_fcmpeq>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d012      	beq.n	8000e82 <main+0x496>
          uint8_t phase[] = "2 (Altitude > 500m)\r\n";
 8000e5c:	4b59      	ldr	r3, [pc, #356]	@ (8000fc4 <main+0x5d8>)
 8000e5e:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8000e62:	461d      	mov	r5, r3
 8000e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e6c:	6020      	str	r0, [r4, #0]
 8000e6e:	3404      	adds	r4, #4
 8000e70:	8021      	strh	r1, [r4, #0]
          HAL_UART_Transmit(&huart1, phase, sizeof(phase)-1, 100);
 8000e72:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8000e76:	2364      	movs	r3, #100	@ 0x64
 8000e78:	2215      	movs	r2, #21
 8000e7a:	484c      	ldr	r0, [pc, #304]	@ (8000fac <main+0x5c0>)
 8000e7c:	f001 fa7a 	bl	8002374 <HAL_UART_Transmit>
 8000e80:	e07d      	b.n	8000f7e <main+0x592>
      } else if (current_data.altitude == 700.0f) {
 8000e82:	4b41      	ldr	r3, [pc, #260]	@ (8000f88 <main+0x59c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4950      	ldr	r1, [pc, #320]	@ (8000fc8 <main+0x5dc>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff f9a3 	bl	80001d4 <__aeabi_fcmpeq>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00f      	beq.n	8000eb4 <main+0x4c8>
          uint8_t phase[] = "3 (Angle > 60deg)\r\n";
 8000e94:	4b4d      	ldr	r3, [pc, #308]	@ (8000fcc <main+0x5e0>)
 8000e96:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8000e9a:	461d      	mov	r5, r3
 8000e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea0:	682b      	ldr	r3, [r5, #0]
 8000ea2:	6023      	str	r3, [r4, #0]
          HAL_UART_Transmit(&huart1, phase, sizeof(phase)-1, 100);
 8000ea4:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8000ea8:	2364      	movs	r3, #100	@ 0x64
 8000eaa:	2213      	movs	r2, #19
 8000eac:	483f      	ldr	r0, [pc, #252]	@ (8000fac <main+0x5c0>)
 8000eae:	f001 fa61 	bl	8002374 <HAL_UART_Transmit>
 8000eb2:	e064      	b.n	8000f7e <main+0x592>
      } else if (current_data.altitude == 650.0f) {
 8000eb4:	4b34      	ldr	r3, [pc, #208]	@ (8000f88 <main+0x59c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4945      	ldr	r1, [pc, #276]	@ (8000fd0 <main+0x5e4>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff f98a 	bl	80001d4 <__aeabi_fcmpeq>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d011      	beq.n	8000eea <main+0x4fe>
          uint8_t phase[] = "4 (Altitude Decreasing)\r\n";
 8000ec6:	4b43      	ldr	r3, [pc, #268]	@ (8000fd4 <main+0x5e8>)
 8000ec8:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000ecc:	461d      	mov	r5, r3
 8000ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ed6:	c403      	stmia	r4!, {r0, r1}
 8000ed8:	8022      	strh	r2, [r4, #0]
          HAL_UART_Transmit(&huart1, phase, sizeof(phase)-1, 100);
 8000eda:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000ede:	2364      	movs	r3, #100	@ 0x64
 8000ee0:	2219      	movs	r2, #25
 8000ee2:	4832      	ldr	r0, [pc, #200]	@ (8000fac <main+0x5c0>)
 8000ee4:	f001 fa46 	bl	8002374 <HAL_UART_Transmit>
 8000ee8:	e049      	b.n	8000f7e <main+0x592>
             } else if (current_data.altitude == 550.0f) {
 8000eea:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <main+0x59c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	493a      	ldr	r1, [pc, #232]	@ (8000fd8 <main+0x5ec>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff f96f 	bl	80001d4 <__aeabi_fcmpeq>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d012      	beq.n	8000f22 <main+0x536>
           uint8_t phase[] = "5 (Altitude = 550m)\r\n";
 8000efc:	4b37      	ldr	r3, [pc, #220]	@ (8000fdc <main+0x5f0>)
 8000efe:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000f02:	461d      	mov	r5, r3
 8000f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f0c:	6020      	str	r0, [r4, #0]
 8000f0e:	3404      	adds	r4, #4
 8000f10:	8021      	strh	r1, [r4, #0]
           HAL_UART_Transmit(&huart1, phase, sizeof(phase)-1, 100);
 8000f12:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000f16:	2364      	movs	r3, #100	@ 0x64
 8000f18:	2215      	movs	r2, #21
 8000f1a:	4824      	ldr	r0, [pc, #144]	@ (8000fac <main+0x5c0>)
 8000f1c:	f001 fa2a 	bl	8002374 <HAL_UART_Transmit>
 8000f20:	e02d      	b.n	8000f7e <main+0x592>
       } else if (current_data.altitude == 1000.0f) {
 8000f22:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <main+0x59c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4919      	ldr	r1, [pc, #100]	@ (8000f8c <main+0x5a0>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f953 	bl	80001d4 <__aeabi_fcmpeq>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d014      	beq.n	8000f5e <main+0x572>
           uint8_t phase[] = "6 (Test Altitude 1000m)\r\n";
 8000f34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f3c:	4a28      	ldr	r2, [pc, #160]	@ (8000fe0 <main+0x5f4>)
 8000f3e:	461c      	mov	r4, r3
 8000f40:	4615      	mov	r5, r2
 8000f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f4a:	c403      	stmia	r4!, {r0, r1}
 8000f4c:	8022      	strh	r2, [r4, #0]
           HAL_UART_Transmit(&huart1, phase, sizeof(phase)-1, 100);
 8000f4e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000f52:	2364      	movs	r3, #100	@ 0x64
 8000f54:	2219      	movs	r2, #25
 8000f56:	4815      	ldr	r0, [pc, #84]	@ (8000fac <main+0x5c0>)
 8000f58:	f001 fa0c 	bl	8002374 <HAL_UART_Transmit>
 8000f5c:	e00f      	b.n	8000f7e <main+0x592>
       } else {
           uint8_t phase[] = "Reset\r\n";
 8000f5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f66:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe4 <main+0x5f8>)
 8000f68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f6c:	e883 0003 	stmia.w	r3, {r0, r1}
           HAL_UART_Transmit(&huart1, phase, sizeof(phase)-1, 100);
 8000f70:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000f74:	2364      	movs	r3, #100	@ 0x64
 8000f76:	2207      	movs	r2, #7
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <main+0x5c0>)
 8000f7a:	f001 f9fb 	bl	8002374 <HAL_UART_Transmit>
       }
  }

  HAL_Delay(100); // Longer delay to make it easier to see
 8000f7e:	2064      	movs	r0, #100	@ 0x64
 8000f80:	f000 faf4 	bl	800156c <HAL_Delay>
  {
 8000f84:	e576      	b.n	8000a74 <main+0x88>
 8000f86:	bf00      	nop
 8000f88:	20000138 	.word	0x20000138
 8000f8c:	447a0000 	.word	0x447a0000
 8000f90:	42820000 	.word	0x42820000
 8000f94:	428c0000 	.word	0x428c0000
 8000f98:	200001d8 	.word	0x200001d8
 8000f9c:	20000134 	.word	0x20000134
 8000fa0:	20000133 	.word	0x20000133
 8000fa4:	200001dc 	.word	0x200001dc
 8000fa8:	08002824 	.word	0x08002824
 8000fac:	20000028 	.word	0x20000028
 8000fb0:	42c80000 	.word	0x42c80000
 8000fb4:	08002840 	.word	0x08002840
 8000fb8:	43960000 	.word	0x43960000
 8000fbc:	08002854 	.word	0x08002854
 8000fc0:	44160000 	.word	0x44160000
 8000fc4:	08002868 	.word	0x08002868
 8000fc8:	442f0000 	.word	0x442f0000
 8000fcc:	08002880 	.word	0x08002880
 8000fd0:	44228000 	.word	0x44228000
 8000fd4:	08002894 	.word	0x08002894
 8000fd8:	44098000 	.word	0x44098000
 8000fdc:	080028b0 	.word	0x080028b0
 8000fe0:	080028c8 	.word	0x080028c8
 8000fe4:	080028e4 	.word	0x080028e4

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b090      	sub	sp, #64	@ 0x40
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	2228      	movs	r2, #40	@ 0x28
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fb90 	bl	800271c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800100a:	2301      	movs	r3, #1
 800100c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001012:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001018:	2301      	movs	r3, #1
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101c:	2302      	movs	r3, #2
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001020:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001024:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001026:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800102a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fd3f 	bl	8001ab4 <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800103c:	f000 f8e4 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	230f      	movs	r3, #15
 8001042:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	2302      	movs	r3, #2
 8001046:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800104c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001050:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2102      	movs	r1, #2
 800105a:	4618      	mov	r0, r3
 800105c:	f000 ffac 	bl	8001fb8 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001066:	f000 f8cf 	bl	8001208 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3740      	adds	r7, #64	@ 0x40
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <MX_USART1_UART_Init+0x4c>)
 800107a:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <MX_USART1_UART_Init+0x50>)
 800107c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <MX_USART1_UART_Init+0x4c>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001084:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <MX_USART1_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <MX_USART1_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <MX_USART1_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <MX_USART1_UART_Init+0x4c>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <MX_USART1_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <MX_USART1_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <MX_USART1_UART_Init+0x4c>)
 80010ac:	f001 f912 	bl	80022d4 <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010b6:	f000 f8a7 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000028 	.word	0x20000028
 80010c4:	40013800 	.word	0x40013800

080010c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <MX_USART2_UART_Init+0x4c>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <MX_USART2_UART_Init+0x50>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <MX_USART2_UART_Init+0x4c>)
 80010d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <MX_USART2_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <MX_USART2_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ec:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <MX_USART2_UART_Init+0x4c>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <MX_USART2_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <MX_USART2_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <MX_USART2_UART_Init+0x4c>)
 8001100:	f001 f8e8 	bl	80022d4 <HAL_UART_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800110a:	f000 f87d 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000070 	.word	0x20000070
 8001118:	40004400 	.word	0x40004400

0800111c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <MX_USART3_UART_Init+0x4c>)
 8001122:	4a12      	ldr	r2, [pc, #72]	@ (800116c <MX_USART3_UART_Init+0x50>)
 8001124:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <MX_USART3_UART_Init+0x4c>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <MX_USART3_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <MX_USART3_UART_Init+0x4c>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <MX_USART3_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <MX_USART3_UART_Init+0x4c>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <MX_USART3_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <MX_USART3_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	@ (8001168 <MX_USART3_UART_Init+0x4c>)
 8001154:	f001 f8be 	bl	80022d4 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800115e:	f000 f853 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000b8 	.word	0x200000b8
 800116c:	40004800 	.word	0x40004800

08001170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001184:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_GPIO_Init+0x90>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <MX_GPIO_Init+0x90>)
 800118a:	f043 0320 	orr.w	r3, r3, #32
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_GPIO_Init+0x90>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_GPIO_Init+0x90>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <MX_GPIO_Init+0x90>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_GPIO_Init+0x90>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <MX_GPIO_Init+0x90>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a11      	ldr	r2, [pc, #68]	@ (8001200 <MX_GPIO_Init+0x90>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <MX_GPIO_Init+0x90>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80011d2:	480c      	ldr	r0, [pc, #48]	@ (8001204 <MX_GPIO_Init+0x94>)
 80011d4:	f000 fc56 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011d8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80011dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	4619      	mov	r1, r3
 80011f0:	4804      	ldr	r0, [pc, #16]	@ (8001204 <MX_GPIO_Init+0x94>)
 80011f2:	f000 fac3 	bl	800177c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011f6:	bf00      	nop
 80011f8:	3720      	adds	r7, #32
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	40010c00 	.word	0x40010c00

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <Error_Handler+0x8>

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_MspInit+0x5c>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <HAL_MspInit+0x5c>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6193      	str	r3, [r2, #24]
 8001226:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <HAL_MspInit+0x5c>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <HAL_MspInit+0x5c>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a0e      	ldr	r2, [pc, #56]	@ (8001270 <HAL_MspInit+0x5c>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <HAL_MspInit+0x5c>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800124a:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <HAL_MspInit+0x60>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <HAL_MspInit+0x60>)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	40021000 	.word	0x40021000
 8001274:	40010000 	.word	0x40010000

08001278 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	@ 0x30
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a53      	ldr	r2, [pc, #332]	@ (80013e0 <HAL_UART_MspInit+0x168>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d132      	bne.n	80012fe <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001298:	4b52      	ldr	r3, [pc, #328]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a51      	ldr	r2, [pc, #324]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 800129e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b4f      	ldr	r3, [pc, #316]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b4c      	ldr	r3, [pc, #304]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a4b      	ldr	r2, [pc, #300]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b49      	ldr	r3, [pc, #292]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	4619      	mov	r1, r3
 80012dc:	4842      	ldr	r0, [pc, #264]	@ (80013e8 <HAL_UART_MspInit+0x170>)
 80012de:	f000 fa4d 	bl	800177c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4619      	mov	r1, r3
 80012f6:	483c      	ldr	r0, [pc, #240]	@ (80013e8 <HAL_UART_MspInit+0x170>)
 80012f8:	f000 fa40 	bl	800177c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80012fc:	e06c      	b.n	80013d8 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a3a      	ldr	r2, [pc, #232]	@ (80013ec <HAL_UART_MspInit+0x174>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d130      	bne.n	800136a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001308:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	4a35      	ldr	r2, [pc, #212]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 800130e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001312:	61d3      	str	r3, [r2, #28]
 8001314:	4b33      	ldr	r3, [pc, #204]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b30      	ldr	r3, [pc, #192]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a2f      	ldr	r2, [pc, #188]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b2d      	ldr	r3, [pc, #180]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001338:	2304      	movs	r3, #4
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0320 	add.w	r3, r7, #32
 8001348:	4619      	mov	r1, r3
 800134a:	4827      	ldr	r0, [pc, #156]	@ (80013e8 <HAL_UART_MspInit+0x170>)
 800134c:	f000 fa16 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001350:	2308      	movs	r3, #8
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	4619      	mov	r1, r3
 8001362:	4821      	ldr	r0, [pc, #132]	@ (80013e8 <HAL_UART_MspInit+0x170>)
 8001364:	f000 fa0a 	bl	800177c <HAL_GPIO_Init>
}
 8001368:	e036      	b.n	80013d8 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a20      	ldr	r2, [pc, #128]	@ (80013f0 <HAL_UART_MspInit+0x178>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d131      	bne.n	80013d8 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001374:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	4a1a      	ldr	r2, [pc, #104]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 800137a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800137e:	61d3      	str	r3, [r2, #28]
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a14      	ldr	r2, [pc, #80]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_UART_MspInit+0x16c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	4619      	mov	r1, r3
 80013b8:	480e      	ldr	r0, [pc, #56]	@ (80013f4 <HAL_UART_MspInit+0x17c>)
 80013ba:	f000 f9df 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 0320 	add.w	r3, r7, #32
 80013d0:	4619      	mov	r1, r3
 80013d2:	4808      	ldr	r0, [pc, #32]	@ (80013f4 <HAL_UART_MspInit+0x17c>)
 80013d4:	f000 f9d2 	bl	800177c <HAL_GPIO_Init>
}
 80013d8:	bf00      	nop
 80013da:	3730      	adds	r7, #48	@ 0x30
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010800 	.word	0x40010800
 80013ec:	40004400 	.word	0x40004400
 80013f0:	40004800 	.word	0x40004800
 80013f4:	40010c00 	.word	0x40010c00

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <NMI_Handler+0x4>

08001400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <MemManage_Handler+0x4>

08001410 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <UsageFault_Handler+0x4>

08001420 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f000 f874 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800145c:	f7ff fff8 	bl	8001450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001460:	480b      	ldr	r0, [pc, #44]	@ (8001490 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001462:	490c      	ldr	r1, [pc, #48]	@ (8001494 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001464:	4a0c      	ldr	r2, [pc, #48]	@ (8001498 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a09      	ldr	r2, [pc, #36]	@ (800149c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001478:	4c09      	ldr	r4, [pc, #36]	@ (80014a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001486:	f001 f951 	bl	800272c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800148a:	f7ff faaf 	bl	80009ec <main>
  bx lr
 800148e:	4770      	bx	lr
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001498:	08002920 	.word	0x08002920
  ldr r2, =_sbss
 800149c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014a0:	200001e4 	.word	0x200001e4

080014a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC1_2_IRQHandler>
	...

080014a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <HAL_Init+0x28>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <HAL_Init+0x28>)
 80014b2:	f043 0310 	orr.w	r3, r3, #16
 80014b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f92b 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	200f      	movs	r0, #15
 80014c0:	f000 f808 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fea6 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40022000 	.word	0x40022000

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <HAL_InitTick+0x54>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_InitTick+0x58>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f935 	bl	8001762 <HAL_SYSTICK_Config>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00e      	b.n	8001520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d80a      	bhi.n	800151e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f000 f90b 	bl	800172a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001514:	4a06      	ldr	r2, [pc, #24]	@ (8001530 <HAL_InitTick+0x5c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000000 	.word	0x20000000
 800152c:	20000008 	.word	0x20000008
 8001530:	20000004 	.word	0x20000004

08001534 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <HAL_IncTick+0x1c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <HAL_IncTick+0x20>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a03      	ldr	r2, [pc, #12]	@ (8001554 <HAL_IncTick+0x20>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000008 	.word	0x20000008
 8001554:	200001e0 	.word	0x200001e0

08001558 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b02      	ldr	r3, [pc, #8]	@ (8001568 <HAL_GetTick+0x10>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	200001e0 	.word	0x200001e0

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff fff0 	bl	8001558 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffe0 	bl	8001558 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000008 	.word	0x20000008

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	@ (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	@ (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	@ 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	@ 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f7ff ff90 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	@ (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff49 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff5e 	bl	80015fc <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff90 	bl	800166c <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5f 	bl	8001618 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffb0 	bl	80016d0 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b08b      	sub	sp, #44	@ 0x2c
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	e169      	b.n	8001a64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001790:	2201      	movs	r2, #1
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8158 	bne.w	8001a5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a9a      	ldr	r2, [pc, #616]	@ (8001a1c <HAL_GPIO_Init+0x2a0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d05e      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017b8:	4a98      	ldr	r2, [pc, #608]	@ (8001a1c <HAL_GPIO_Init+0x2a0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d875      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017be:	4a98      	ldr	r2, [pc, #608]	@ (8001a20 <HAL_GPIO_Init+0x2a4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d058      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017c4:	4a96      	ldr	r2, [pc, #600]	@ (8001a20 <HAL_GPIO_Init+0x2a4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d86f      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017ca:	4a96      	ldr	r2, [pc, #600]	@ (8001a24 <HAL_GPIO_Init+0x2a8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d052      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017d0:	4a94      	ldr	r2, [pc, #592]	@ (8001a24 <HAL_GPIO_Init+0x2a8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d869      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017d6:	4a94      	ldr	r2, [pc, #592]	@ (8001a28 <HAL_GPIO_Init+0x2ac>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d04c      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017dc:	4a92      	ldr	r2, [pc, #584]	@ (8001a28 <HAL_GPIO_Init+0x2ac>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d863      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017e2:	4a92      	ldr	r2, [pc, #584]	@ (8001a2c <HAL_GPIO_Init+0x2b0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d046      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017e8:	4a90      	ldr	r2, [pc, #576]	@ (8001a2c <HAL_GPIO_Init+0x2b0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d85d      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017ee:	2b12      	cmp	r3, #18
 80017f0:	d82a      	bhi.n	8001848 <HAL_GPIO_Init+0xcc>
 80017f2:	2b12      	cmp	r3, #18
 80017f4:	d859      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017f6:	a201      	add	r2, pc, #4	@ (adr r2, 80017fc <HAL_GPIO_Init+0x80>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	08001877 	.word	0x08001877
 8001800:	08001851 	.word	0x08001851
 8001804:	08001863 	.word	0x08001863
 8001808:	080018a5 	.word	0x080018a5
 800180c:	080018ab 	.word	0x080018ab
 8001810:	080018ab 	.word	0x080018ab
 8001814:	080018ab 	.word	0x080018ab
 8001818:	080018ab 	.word	0x080018ab
 800181c:	080018ab 	.word	0x080018ab
 8001820:	080018ab 	.word	0x080018ab
 8001824:	080018ab 	.word	0x080018ab
 8001828:	080018ab 	.word	0x080018ab
 800182c:	080018ab 	.word	0x080018ab
 8001830:	080018ab 	.word	0x080018ab
 8001834:	080018ab 	.word	0x080018ab
 8001838:	080018ab 	.word	0x080018ab
 800183c:	080018ab 	.word	0x080018ab
 8001840:	08001859 	.word	0x08001859
 8001844:	0800186d 	.word	0x0800186d
 8001848:	4a79      	ldr	r2, [pc, #484]	@ (8001a30 <HAL_GPIO_Init+0x2b4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800184e:	e02c      	b.n	80018aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e029      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	3304      	adds	r3, #4
 800185e:	623b      	str	r3, [r7, #32]
          break;
 8001860:	e024      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	3308      	adds	r3, #8
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e01f      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	330c      	adds	r3, #12
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e01a      	b.n	80018ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800187e:	2304      	movs	r3, #4
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e013      	b.n	80018ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800188c:	2308      	movs	r3, #8
 800188e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	611a      	str	r2, [r3, #16]
          break;
 8001896:	e009      	b.n	80018ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001898:	2308      	movs	r3, #8
 800189a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	615a      	str	r2, [r3, #20]
          break;
 80018a2:	e003      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x130>
          break;
 80018aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2bff      	cmp	r3, #255	@ 0xff
 80018b0:	d801      	bhi.n	80018b6 <HAL_GPIO_Init+0x13a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	e001      	b.n	80018ba <HAL_GPIO_Init+0x13e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3304      	adds	r3, #4
 80018ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2bff      	cmp	r3, #255	@ 0xff
 80018c0:	d802      	bhi.n	80018c8 <HAL_GPIO_Init+0x14c>
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x152>
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	3b08      	subs	r3, #8
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	210f      	movs	r1, #15
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	6a39      	ldr	r1, [r7, #32]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	431a      	orrs	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80b1 	beq.w	8001a5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001a34 <HAL_GPIO_Init+0x2b8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a4c      	ldr	r2, [pc, #304]	@ (8001a34 <HAL_GPIO_Init+0x2b8>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b4a      	ldr	r3, [pc, #296]	@ (8001a34 <HAL_GPIO_Init+0x2b8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001914:	4a48      	ldr	r2, [pc, #288]	@ (8001a38 <HAL_GPIO_Init+0x2bc>)
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a40      	ldr	r2, [pc, #256]	@ (8001a3c <HAL_GPIO_Init+0x2c0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d013      	beq.n	8001968 <HAL_GPIO_Init+0x1ec>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3f      	ldr	r2, [pc, #252]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00d      	beq.n	8001964 <HAL_GPIO_Init+0x1e8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a44 <HAL_GPIO_Init+0x2c8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d007      	beq.n	8001960 <HAL_GPIO_Init+0x1e4>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a3d      	ldr	r2, [pc, #244]	@ (8001a48 <HAL_GPIO_Init+0x2cc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d101      	bne.n	800195c <HAL_GPIO_Init+0x1e0>
 8001958:	2303      	movs	r3, #3
 800195a:	e006      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 800195c:	2304      	movs	r3, #4
 800195e:	e004      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 8001960:	2302      	movs	r3, #2
 8001962:	e002      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <HAL_GPIO_Init+0x1ee>
 8001968:	2300      	movs	r3, #0
 800196a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800196c:	f002 0203 	and.w	r2, r2, #3
 8001970:	0092      	lsls	r2, r2, #2
 8001972:	4093      	lsls	r3, r2
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800197a:	492f      	ldr	r1, [pc, #188]	@ (8001a38 <HAL_GPIO_Init+0x2bc>)
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001994:	4b2d      	ldr	r3, [pc, #180]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	492c      	ldr	r1, [pc, #176]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019a2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4928      	ldr	r1, [pc, #160]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019bc:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4922      	ldr	r1, [pc, #136]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ca:	4b20      	ldr	r3, [pc, #128]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	491e      	ldr	r1, [pc, #120]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e4:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	4918      	ldr	r1, [pc, #96]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019f2:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4914      	ldr	r1, [pc, #80]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d021      	beq.n	8001a50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	490e      	ldr	r1, [pc, #56]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e021      	b.n	8001a5e <HAL_GPIO_Init+0x2e2>
 8001a1a:	bf00      	nop
 8001a1c:	10320000 	.word	0x10320000
 8001a20:	10310000 	.word	0x10310000
 8001a24:	10220000 	.word	0x10220000
 8001a28:	10210000 	.word	0x10210000
 8001a2c:	10120000 	.word	0x10120000
 8001a30:	10110000 	.word	0x10110000
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	40010c00 	.word	0x40010c00
 8001a44:	40011000 	.word	0x40011000
 8001a48:	40011400 	.word	0x40011400
 8001a4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <HAL_GPIO_Init+0x304>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	4909      	ldr	r1, [pc, #36]	@ (8001a80 <HAL_GPIO_Init+0x304>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	3301      	adds	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f47f ae8e 	bne.w	8001790 <HAL_GPIO_Init+0x14>
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	372c      	adds	r7, #44	@ 0x2c
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40010400 	.word	0x40010400

08001a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aa0:	e003      	b.n	8001aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	041a      	lsls	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	611a      	str	r2, [r3, #16]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e272      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8087 	beq.w	8001be2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad4:	4b92      	ldr	r3, [pc, #584]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d00c      	beq.n	8001afa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ae0:	4b8f      	ldr	r3, [pc, #572]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d112      	bne.n	8001b12 <HAL_RCC_OscConfig+0x5e>
 8001aec:	4b8c      	ldr	r3, [pc, #560]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af8:	d10b      	bne.n	8001b12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afa:	4b89      	ldr	r3, [pc, #548]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d06c      	beq.n	8001be0 <HAL_RCC_OscConfig+0x12c>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d168      	bne.n	8001be0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e24c      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x76>
 8001b1c:	4b80      	ldr	r3, [pc, #512]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a7f      	ldr	r2, [pc, #508]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e02e      	b.n	8001b88 <HAL_RCC_OscConfig+0xd4>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x98>
 8001b32:	4b7b      	ldr	r3, [pc, #492]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7a      	ldr	r2, [pc, #488]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b78      	ldr	r3, [pc, #480]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a77      	ldr	r2, [pc, #476]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e01d      	b.n	8001b88 <HAL_RCC_OscConfig+0xd4>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0xbc>
 8001b56:	4b72      	ldr	r3, [pc, #456]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a71      	ldr	r2, [pc, #452]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b6f      	ldr	r3, [pc, #444]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6e      	ldr	r2, [pc, #440]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0xd4>
 8001b70:	4b6b      	ldr	r3, [pc, #428]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a6a      	ldr	r2, [pc, #424]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b68      	ldr	r3, [pc, #416]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a67      	ldr	r2, [pc, #412]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d013      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fce2 	bl	8001558 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff fcde 	bl	8001558 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	@ 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e200      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	4b5d      	ldr	r3, [pc, #372]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0xe4>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fcce 	bl	8001558 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fcca 	bl	8001558 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	@ 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1ec      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	4b53      	ldr	r3, [pc, #332]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x10c>
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d063      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bee:	4b4c      	ldr	r3, [pc, #304]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bfa:	4b49      	ldr	r3, [pc, #292]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d11c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x18c>
 8001c06:	4b46      	ldr	r3, [pc, #280]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d116      	bne.n	8001c40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	4b43      	ldr	r3, [pc, #268]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_RCC_OscConfig+0x176>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e1c0      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4939      	ldr	r1, [pc, #228]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	e03a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c48:	4b36      	ldr	r3, [pc, #216]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fc83 	bl	8001558 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c56:	f7ff fc7f 	bl	8001558 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e1a1      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	4b2a      	ldr	r3, [pc, #168]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4927      	ldr	r1, [pc, #156]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e015      	b.n	8001cb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8a:	4b26      	ldr	r3, [pc, #152]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fc62 	bl	8001558 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c98:	f7ff fc5e 	bl	8001558 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e180      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d03a      	beq.n	8001d38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d019      	beq.n	8001cfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cca:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fc42 	bl	8001558 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fc3e 	bl	8001558 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e160      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f000 face 	bl	8002298 <RCC_Delay>
 8001cfc:	e01c      	b.n	8001d38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7ff fc28 	bl	8001558 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0a:	e00f      	b.n	8001d2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fc24 	bl	8001558 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d908      	bls.n	8001d2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e146      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	42420000 	.word	0x42420000
 8001d28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	4b92      	ldr	r3, [pc, #584]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e9      	bne.n	8001d0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80a6 	beq.w	8001e92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10d      	bne.n	8001d72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	4b88      	ldr	r3, [pc, #544]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a87      	ldr	r2, [pc, #540]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d60:	61d3      	str	r3, [r2, #28]
 8001d62:	4b85      	ldr	r3, [pc, #532]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	4b82      	ldr	r3, [pc, #520]	@ (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d118      	bne.n	8001db0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a7e      	ldr	r2, [pc, #504]	@ (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8a:	f7ff fbe5 	bl	8001558 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d92:	f7ff fbe1 	bl	8001558 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b64      	cmp	r3, #100	@ 0x64
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e103      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	4b75      	ldr	r3, [pc, #468]	@ (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x312>
 8001db8:	4b6f      	ldr	r3, [pc, #444]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a6e      	ldr	r2, [pc, #440]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	e02d      	b.n	8001e22 <HAL_RCC_OscConfig+0x36e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x334>
 8001dce:	4b6a      	ldr	r3, [pc, #424]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a69      	ldr	r2, [pc, #420]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	6213      	str	r3, [r2, #32]
 8001dda:	4b67      	ldr	r3, [pc, #412]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a66      	ldr	r2, [pc, #408]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	f023 0304 	bic.w	r3, r3, #4
 8001de4:	6213      	str	r3, [r2, #32]
 8001de6:	e01c      	b.n	8001e22 <HAL_RCC_OscConfig+0x36e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d10c      	bne.n	8001e0a <HAL_RCC_OscConfig+0x356>
 8001df0:	4b61      	ldr	r3, [pc, #388]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4a60      	ldr	r2, [pc, #384]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	6213      	str	r3, [r2, #32]
 8001dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a5d      	ldr	r2, [pc, #372]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6213      	str	r3, [r2, #32]
 8001e08:	e00b      	b.n	8001e22 <HAL_RCC_OscConfig+0x36e>
 8001e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6213      	str	r3, [r2, #32]
 8001e16:	4b58      	ldr	r3, [pc, #352]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a57      	ldr	r2, [pc, #348]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d015      	beq.n	8001e56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff fb95 	bl	8001558 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7ff fb91 	bl	8001558 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e0b1      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	4b4b      	ldr	r3, [pc, #300]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0ee      	beq.n	8001e32 <HAL_RCC_OscConfig+0x37e>
 8001e54:	e014      	b.n	8001e80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7ff fb7f 	bl	8001558 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7ff fb7b 	bl	8001558 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e09b      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e74:	4b40      	ldr	r3, [pc, #256]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ee      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e80:	7dfb      	ldrb	r3, [r7, #23]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d105      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e86:	4b3c      	ldr	r3, [pc, #240]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8087 	beq.w	8001faa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e9c:	4b36      	ldr	r3, [pc, #216]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d061      	beq.n	8001f6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d146      	bne.n	8001f3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb0:	4b33      	ldr	r3, [pc, #204]	@ (8001f80 <HAL_RCC_OscConfig+0x4cc>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff fb4f 	bl	8001558 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7ff fb4b 	bl	8001558 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e06d      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	4b29      	ldr	r3, [pc, #164]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee4:	d108      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ee6:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4921      	ldr	r1, [pc, #132]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a19      	ldr	r1, [r3, #32]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	491b      	ldr	r1, [pc, #108]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <HAL_RCC_OscConfig+0x4cc>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7ff fb1f 	bl	8001558 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1e:	f7ff fb1b 	bl	8001558 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e03d      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x46a>
 8001f3c:	e035      	b.n	8001faa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_RCC_OscConfig+0x4cc>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff fb08 	bl	8001558 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff fb04 	bl	8001558 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e026      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x498>
 8001f6a:	e01e      	b.n	8001faa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e019      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f84:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <HAL_RCC_OscConfig+0x500>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0d0      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d910      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b67      	ldr	r3, [pc, #412]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4965      	ldr	r1, [pc, #404]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b63      	ldr	r3, [pc, #396]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0b8      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002014:	4b59      	ldr	r3, [pc, #356]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a58      	ldr	r2, [pc, #352]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800201e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800202c:	4b53      	ldr	r3, [pc, #332]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a52      	ldr	r2, [pc, #328]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002036:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b50      	ldr	r3, [pc, #320]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	494d      	ldr	r1, [pc, #308]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d040      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d115      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e07f      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b41      	ldr	r3, [pc, #260]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d109      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e073      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	4b3d      	ldr	r3, [pc, #244]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e06b      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002096:	4b39      	ldr	r3, [pc, #228]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f023 0203 	bic.w	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4936      	ldr	r1, [pc, #216]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a8:	f7ff fa56 	bl	8001558 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b0:	f7ff fa52 	bl	8001558 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e053      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 020c 	and.w	r2, r3, #12
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1eb      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d8:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d210      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 0207 	bic.w	r2, r3, #7
 80020ee:	4922      	ldr	r1, [pc, #136]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e032      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002114:	4b19      	ldr	r3, [pc, #100]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4916      	ldr	r1, [pc, #88]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002132:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	490e      	ldr	r1, [pc, #56]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002146:	f000 f821 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800214a:	4602      	mov	r2, r0
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	490a      	ldr	r1, [pc, #40]	@ (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 8002158:	5ccb      	ldrb	r3, [r1, r3]
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	4a09      	ldr	r2, [pc, #36]	@ (8002184 <HAL_RCC_ClockConfig+0x1cc>)
 8002160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_RCC_ClockConfig+0x1d0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f9b4 	bl	80014d4 <HAL_InitTick>

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40022000 	.word	0x40022000
 800217c:	40021000 	.word	0x40021000
 8002180:	080028ec 	.word	0x080028ec
 8002184:	20000000 	.word	0x20000000
 8002188:	20000004 	.word	0x20000004

0800218c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x94>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x30>
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x36>
 80021ba:	e027      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021bc:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x98>)
 80021be:	613b      	str	r3, [r7, #16]
      break;
 80021c0:	e027      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	0c9b      	lsrs	r3, r3, #18
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021cc:	5cd3      	ldrb	r3, [r2, r3]
 80021ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d010      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x94>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	0c5b      	lsrs	r3, r3, #17
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	4a11      	ldr	r2, [pc, #68]	@ (800222c <HAL_RCC_GetSysClockFreq+0xa0>)
 80021e6:	5cd3      	ldrb	r3, [r2, r3]
 80021e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ee:	fb03 f202 	mul.w	r2, r3, r2
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e004      	b.n	8002206 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002230 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002200:	fb02 f303 	mul.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	613b      	str	r3, [r7, #16]
      break;
 800220a:	e002      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800220c:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x98>)
 800220e:	613b      	str	r3, [r7, #16]
      break;
 8002210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002212:	693b      	ldr	r3, [r7, #16]
}
 8002214:	4618      	mov	r0, r3
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	007a1200 	.word	0x007a1200
 8002228:	08002904 	.word	0x08002904
 800222c:	08002914 	.word	0x08002914
 8002230:	003d0900 	.word	0x003d0900

08002234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002238:	4b02      	ldr	r3, [pc, #8]	@ (8002244 <HAL_RCC_GetHCLKFreq+0x10>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	20000000 	.word	0x20000000

08002248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800224c:	f7ff fff2 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4903      	ldr	r1, [pc, #12]	@ (800226c <HAL_RCC_GetPCLK1Freq+0x24>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	080028fc 	.word	0x080028fc

08002270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002274:	f7ff ffde 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0adb      	lsrs	r3, r3, #11
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	@ (8002294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	080028fc 	.word	0x080028fc

08002298 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022a0:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <RCC_Delay+0x34>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <RCC_Delay+0x38>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0a5b      	lsrs	r3, r3, #9
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022b4:	bf00      	nop
  }
  while (Delay --);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1e5a      	subs	r2, r3, #1
 80022ba:	60fa      	str	r2, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f9      	bne.n	80022b4 <RCC_Delay+0x1c>
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	20000000 	.word	0x20000000
 80022d0:	10624dd3 	.word	0x10624dd3

080022d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e042      	b.n	800236c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe ffbc 	bl	8001278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2224      	movs	r2, #36	@ 0x24
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f971 	bl	8002600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800232c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800233c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800234c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	@ 0x28
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b20      	cmp	r3, #32
 8002392:	d175      	bne.n	8002480 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_UART_Transmit+0x2c>
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e06e      	b.n	8002482 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2221      	movs	r2, #33	@ 0x21
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023b2:	f7ff f8d1 	bl	8001558 <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	88fa      	ldrh	r2, [r7, #6]
 80023bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	88fa      	ldrh	r2, [r7, #6]
 80023c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023cc:	d108      	bne.n	80023e0 <HAL_UART_Transmit+0x6c>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d104      	bne.n	80023e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	e003      	b.n	80023e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023e8:	e02e      	b.n	8002448 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2200      	movs	r2, #0
 80023f2:	2180      	movs	r1, #128	@ 0x80
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f848 	bl	800248a <UART_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e03a      	b.n	8002482 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10b      	bne.n	800242a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002420:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	3302      	adds	r3, #2
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	e007      	b.n	800243a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	3301      	adds	r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1cb      	bne.n	80023ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2200      	movs	r2, #0
 800245a:	2140      	movs	r1, #64	@ 0x40
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f814 	bl	800248a <UART_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e006      	b.n	8002482 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	e000      	b.n	8002482 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
  }
}
 8002482:	4618      	mov	r0, r3
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	4613      	mov	r3, r2
 8002498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800249a:	e03b      	b.n	8002514 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a2:	d037      	beq.n	8002514 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a4:	f7ff f858 	bl	8001558 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	6a3a      	ldr	r2, [r7, #32]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d302      	bcc.n	80024ba <UART_WaitOnFlagUntilTimeout+0x30>
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e03a      	b.n	8002534 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d023      	beq.n	8002514 <UART_WaitOnFlagUntilTimeout+0x8a>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b80      	cmp	r3, #128	@ 0x80
 80024d0:	d020      	beq.n	8002514 <UART_WaitOnFlagUntilTimeout+0x8a>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b40      	cmp	r3, #64	@ 0x40
 80024d6:	d01d      	beq.n	8002514 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d116      	bne.n	8002514 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f81d 	bl	800253c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2208      	movs	r2, #8
 8002506:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e00f      	b.n	8002534 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4013      	ands	r3, r2
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	429a      	cmp	r2, r3
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	429a      	cmp	r2, r3
 8002530:	d0b4      	beq.n	800249c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800253c:	b480      	push	{r7}
 800253e:	b095      	sub	sp, #84	@ 0x54
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800254e:	e853 3f00 	ldrex	r3, [r3]
 8002552:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002556:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800255a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	330c      	adds	r3, #12
 8002562:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002564:	643a      	str	r2, [r7, #64]	@ 0x40
 8002566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002568:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800256a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800256c:	e841 2300 	strex	r3, r2, [r1]
 8002570:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e5      	bne.n	8002544 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	3314      	adds	r3, #20
 800257e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	e853 3f00 	ldrex	r3, [r3]
 8002586:	61fb      	str	r3, [r7, #28]
   return(result);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3314      	adds	r3, #20
 8002596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002598:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800259a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800259e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025a0:	e841 2300 	strex	r3, r2, [r1]
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1e5      	bne.n	8002578 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d119      	bne.n	80025e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	e853 3f00 	ldrex	r3, [r3]
 80025c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f023 0310 	bic.w	r3, r3, #16
 80025ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	330c      	adds	r3, #12
 80025d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025d4:	61ba      	str	r2, [r7, #24]
 80025d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d8:	6979      	ldr	r1, [r7, #20]
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	e841 2300 	strex	r3, r2, [r1]
 80025e0:	613b      	str	r3, [r7, #16]
   return(result);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1e5      	bne.n	80025b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025f6:	bf00      	nop
 80025f8:	3754      	adds	r7, #84	@ 0x54
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800263a:	f023 030c 	bic.w	r3, r3, #12
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	430b      	orrs	r3, r1
 8002646:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2c      	ldr	r2, [pc, #176]	@ (8002714 <UART_SetConfig+0x114>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d103      	bne.n	8002670 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002668:	f7ff fe02 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	e002      	b.n	8002676 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002670:	f7ff fdea 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8002674:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	009a      	lsls	r2, r3, #2
 8002680:	441a      	add	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	4a22      	ldr	r2, [pc, #136]	@ (8002718 <UART_SetConfig+0x118>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	0119      	lsls	r1, r3, #4
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	009a      	lsls	r2, r3, #2
 80026a0:	441a      	add	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002718 <UART_SetConfig+0x118>)
 80026ae:	fba3 0302 	umull	r0, r3, r3, r2
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2064      	movs	r0, #100	@ 0x64
 80026b6:	fb00 f303 	mul.w	r3, r0, r3
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	3332      	adds	r3, #50	@ 0x32
 80026c0:	4a15      	ldr	r2, [pc, #84]	@ (8002718 <UART_SetConfig+0x118>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026cc:	4419      	add	r1, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	009a      	lsls	r2, r3, #2
 80026d8:	441a      	add	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002718 <UART_SetConfig+0x118>)
 80026e6:	fba3 0302 	umull	r0, r3, r3, r2
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2064      	movs	r0, #100	@ 0x64
 80026ee:	fb00 f303 	mul.w	r3, r0, r3
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	3332      	adds	r3, #50	@ 0x32
 80026f8:	4a07      	ldr	r2, [pc, #28]	@ (8002718 <UART_SetConfig+0x118>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	f003 020f 	and.w	r2, r3, #15
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	440a      	add	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40013800 	.word	0x40013800
 8002718:	51eb851f 	.word	0x51eb851f

0800271c <memset>:
 800271c:	4603      	mov	r3, r0
 800271e:	4402      	add	r2, r0
 8002720:	4293      	cmp	r3, r2
 8002722:	d100      	bne.n	8002726 <memset+0xa>
 8002724:	4770      	bx	lr
 8002726:	f803 1b01 	strb.w	r1, [r3], #1
 800272a:	e7f9      	b.n	8002720 <memset+0x4>

0800272c <__libc_init_array>:
 800272c:	b570      	push	{r4, r5, r6, lr}
 800272e:	2600      	movs	r6, #0
 8002730:	4d0c      	ldr	r5, [pc, #48]	@ (8002764 <__libc_init_array+0x38>)
 8002732:	4c0d      	ldr	r4, [pc, #52]	@ (8002768 <__libc_init_array+0x3c>)
 8002734:	1b64      	subs	r4, r4, r5
 8002736:	10a4      	asrs	r4, r4, #2
 8002738:	42a6      	cmp	r6, r4
 800273a:	d109      	bne.n	8002750 <__libc_init_array+0x24>
 800273c:	f000 f81a 	bl	8002774 <_init>
 8002740:	2600      	movs	r6, #0
 8002742:	4d0a      	ldr	r5, [pc, #40]	@ (800276c <__libc_init_array+0x40>)
 8002744:	4c0a      	ldr	r4, [pc, #40]	@ (8002770 <__libc_init_array+0x44>)
 8002746:	1b64      	subs	r4, r4, r5
 8002748:	10a4      	asrs	r4, r4, #2
 800274a:	42a6      	cmp	r6, r4
 800274c:	d105      	bne.n	800275a <__libc_init_array+0x2e>
 800274e:	bd70      	pop	{r4, r5, r6, pc}
 8002750:	f855 3b04 	ldr.w	r3, [r5], #4
 8002754:	4798      	blx	r3
 8002756:	3601      	adds	r6, #1
 8002758:	e7ee      	b.n	8002738 <__libc_init_array+0xc>
 800275a:	f855 3b04 	ldr.w	r3, [r5], #4
 800275e:	4798      	blx	r3
 8002760:	3601      	adds	r6, #1
 8002762:	e7f2      	b.n	800274a <__libc_init_array+0x1e>
 8002764:	08002918 	.word	0x08002918
 8002768:	08002918 	.word	0x08002918
 800276c:	08002918 	.word	0x08002918
 8002770:	0800291c 	.word	0x0800291c

08002774 <_init>:
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	bf00      	nop
 8002778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277a:	bc08      	pop	{r3}
 800277c:	469e      	mov	lr, r3
 800277e:	4770      	bx	lr

08002780 <_fini>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	bf00      	nop
 8002784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002786:	bc08      	pop	{r3}
 8002788:	469e      	mov	lr, r3
 800278a:	4770      	bx	lr
