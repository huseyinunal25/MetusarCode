
Algoritma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa28  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800ab38  0800ab38  0000bb38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af30  0800af30  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800af30  0800af30  0000bf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af38  0800af38  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af38  0800af38  0000bf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af3c  0800af3c  0000bf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800af40  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200001d4  0800b114  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  0800b114  0000c508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd7c  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002090  00000000  00000000  00018f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0001b010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009aa  00000000  00000000  0001bc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187ed  00000000  00000000  0001c61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f44b  00000000  00000000  00034e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088ccd  00000000  00000000  00044252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ccf1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e8  00000000  00000000  000ccf64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d174c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ab20 	.word	0x0800ab20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800ab20 	.word	0x0800ab20

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_fmul>:
 8000b28:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b30:	bf1e      	ittt	ne
 8000b32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b36:	ea92 0f0c 	teqne	r2, ip
 8000b3a:	ea93 0f0c 	teqne	r3, ip
 8000b3e:	d06f      	beq.n	8000c20 <__aeabi_fmul+0xf8>
 8000b40:	441a      	add	r2, r3
 8000b42:	ea80 0c01 	eor.w	ip, r0, r1
 8000b46:	0240      	lsls	r0, r0, #9
 8000b48:	bf18      	it	ne
 8000b4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b4e:	d01e      	beq.n	8000b8e <__aeabi_fmul+0x66>
 8000b50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b64:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b68:	bf3e      	ittt	cc
 8000b6a:	0049      	lslcc	r1, r1, #1
 8000b6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b70:	005b      	lslcc	r3, r3, #1
 8000b72:	ea40 0001 	orr.w	r0, r0, r1
 8000b76:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b7a:	2afd      	cmp	r2, #253	@ 0xfd
 8000b7c:	d81d      	bhi.n	8000bba <__aeabi_fmul+0x92>
 8000b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b86:	bf08      	it	eq
 8000b88:	f020 0001 	biceq.w	r0, r0, #1
 8000b8c:	4770      	bx	lr
 8000b8e:	f090 0f00 	teq	r0, #0
 8000b92:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b96:	bf08      	it	eq
 8000b98:	0249      	lsleq	r1, r1, #9
 8000b9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ba2:	3a7f      	subs	r2, #127	@ 0x7f
 8000ba4:	bfc2      	ittt	gt
 8000ba6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000baa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bae:	4770      	bxgt	lr
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	dc5d      	bgt.n	8000c78 <__aeabi_fmul+0x150>
 8000bbc:	f112 0f19 	cmn.w	r2, #25
 8000bc0:	bfdc      	itt	le
 8000bc2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bxle	lr
 8000bc8:	f1c2 0200 	rsb	r2, r2, #0
 8000bcc:	0041      	lsls	r1, r0, #1
 8000bce:	fa21 f102 	lsr.w	r1, r1, r2
 8000bd2:	f1c2 0220 	rsb	r2, r2, #32
 8000bd6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bda:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bde:	f140 0000 	adc.w	r0, r0, #0
 8000be2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000be6:	bf08      	it	eq
 8000be8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bec:	4770      	bx	lr
 8000bee:	f092 0f00 	teq	r2, #0
 8000bf2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bf6:	bf02      	ittt	eq
 8000bf8:	0040      	lsleq	r0, r0, #1
 8000bfa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bfe:	3a01      	subeq	r2, #1
 8000c00:	d0f9      	beq.n	8000bf6 <__aeabi_fmul+0xce>
 8000c02:	ea40 000c 	orr.w	r0, r0, ip
 8000c06:	f093 0f00 	teq	r3, #0
 8000c0a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c0e:	bf02      	ittt	eq
 8000c10:	0049      	lsleq	r1, r1, #1
 8000c12:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c16:	3b01      	subeq	r3, #1
 8000c18:	d0f9      	beq.n	8000c0e <__aeabi_fmul+0xe6>
 8000c1a:	ea41 010c 	orr.w	r1, r1, ip
 8000c1e:	e78f      	b.n	8000b40 <__aeabi_fmul+0x18>
 8000c20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c24:	ea92 0f0c 	teq	r2, ip
 8000c28:	bf18      	it	ne
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d00a      	beq.n	8000c46 <__aeabi_fmul+0x11e>
 8000c30:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c34:	bf18      	it	ne
 8000c36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c3a:	d1d8      	bne.n	8000bee <__aeabi_fmul+0xc6>
 8000c3c:	ea80 0001 	eor.w	r0, r0, r1
 8000c40:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f090 0f00 	teq	r0, #0
 8000c4a:	bf17      	itett	ne
 8000c4c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c50:	4608      	moveq	r0, r1
 8000c52:	f091 0f00 	teqne	r1, #0
 8000c56:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c5a:	d014      	beq.n	8000c86 <__aeabi_fmul+0x15e>
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	d101      	bne.n	8000c66 <__aeabi_fmul+0x13e>
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	d10f      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c66:	ea93 0f0c 	teq	r3, ip
 8000c6a:	d103      	bne.n	8000c74 <__aeabi_fmul+0x14c>
 8000c6c:	024b      	lsls	r3, r1, #9
 8000c6e:	bf18      	it	ne
 8000c70:	4608      	movne	r0, r1
 8000c72:	d108      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c8a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fdiv>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d069      	beq.n	8000d7c <__aeabi_fdiv+0xec>
 8000ca8:	eba2 0203 	sub.w	r2, r2, r3
 8000cac:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cb6:	d037      	beq.n	8000d28 <__aeabi_fdiv+0x98>
 8000cb8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cbc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cc0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cc4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	bf38      	it	cc
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000cd2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	bf24      	itt	cs
 8000cda:	1a5b      	subcs	r3, r3, r1
 8000cdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ce0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ce4:	bf24      	itt	cs
 8000ce6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cf2:	bf24      	itt	cs
 8000cf4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cfc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d00:	bf24      	itt	cs
 8000d02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	bf18      	it	ne
 8000d0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d12:	d1e0      	bne.n	8000cd6 <__aeabi_fdiv+0x46>
 8000d14:	2afd      	cmp	r2, #253	@ 0xfd
 8000d16:	f63f af50 	bhi.w	8000bba <__aeabi_fmul+0x92>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d30:	327f      	adds	r2, #127	@ 0x7f
 8000d32:	bfc2      	ittt	gt
 8000d34:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3c:	4770      	bxgt	lr
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	3a01      	subs	r2, #1
 8000d48:	e737      	b.n	8000bba <__aeabi_fmul+0x92>
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fdiv+0xc2>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fdiv+0xda>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e795      	b.n	8000ca8 <__aeabi_fdiv+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	d108      	bne.n	8000d98 <__aeabi_fdiv+0x108>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	f47f af7d 	bne.w	8000c86 <__aeabi_fmul+0x15e>
 8000d8c:	ea93 0f0c 	teq	r3, ip
 8000d90:	f47f af70 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e776      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000d98:	ea93 0f0c 	teq	r3, ip
 8000d9c:	d104      	bne.n	8000da8 <__aeabi_fdiv+0x118>
 8000d9e:	024b      	lsls	r3, r1, #9
 8000da0:	f43f af4c 	beq.w	8000c3c <__aeabi_fmul+0x114>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e76e      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db2:	d1ca      	bne.n	8000d4a <__aeabi_fdiv+0xba>
 8000db4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000db8:	f47f af5c 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000dbc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000dc0:	f47f af3c 	bne.w	8000c3c <__aeabi_fmul+0x114>
 8000dc4:	e75f      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_ldivmod>:
 8000dc8:	b97b      	cbnz	r3, 8000dea <__aeabi_ldivmod+0x22>
 8000dca:	b972      	cbnz	r2, 8000dea <__aeabi_ldivmod+0x22>
 8000dcc:	2900      	cmp	r1, #0
 8000dce:	bfbe      	ittt	lt
 8000dd0:	2000      	movlt	r0, #0
 8000dd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000dd6:	e006      	blt.n	8000de6 <__aeabi_ldivmod+0x1e>
 8000dd8:	bf08      	it	eq
 8000dda:	2800      	cmpeq	r0, #0
 8000ddc:	bf1c      	itt	ne
 8000dde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000de2:	f04f 30ff 	movne.w	r0, #4294967295
 8000de6:	f000 b9bf 	b.w	8001168 <__aeabi_idiv0>
 8000dea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000df2:	2900      	cmp	r1, #0
 8000df4:	db09      	blt.n	8000e0a <__aeabi_ldivmod+0x42>
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db1a      	blt.n	8000e30 <__aeabi_ldivmod+0x68>
 8000dfa:	f000 f835 	bl	8000e68 <__udivmoddi4>
 8000dfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e06:	b004      	add	sp, #16
 8000e08:	4770      	bx	lr
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db1b      	blt.n	8000e4c <__aeabi_ldivmod+0x84>
 8000e14:	f000 f828 	bl	8000e68 <__udivmoddi4>
 8000e18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e20:	b004      	add	sp, #16
 8000e22:	4240      	negs	r0, r0
 8000e24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e28:	4252      	negs	r2, r2
 8000e2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e2e:	4770      	bx	lr
 8000e30:	4252      	negs	r2, r2
 8000e32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e36:	f000 f817 	bl	8000e68 <__udivmoddi4>
 8000e3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e42:	b004      	add	sp, #16
 8000e44:	4240      	negs	r0, r0
 8000e46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4a:	4770      	bx	lr
 8000e4c:	4252      	negs	r2, r2
 8000e4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e52:	f000 f809 	bl	8000e68 <__udivmoddi4>
 8000e56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5e:	b004      	add	sp, #16
 8000e60:	4252      	negs	r2, r2
 8000e62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e66:	4770      	bx	lr

08000e68 <__udivmoddi4>:
 8000e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e6c:	9d08      	ldr	r5, [sp, #32]
 8000e6e:	468e      	mov	lr, r1
 8000e70:	4604      	mov	r4, r0
 8000e72:	4688      	mov	r8, r1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d14a      	bne.n	8000f0e <__udivmoddi4+0xa6>
 8000e78:	428a      	cmp	r2, r1
 8000e7a:	4617      	mov	r7, r2
 8000e7c:	d962      	bls.n	8000f44 <__udivmoddi4+0xdc>
 8000e7e:	fab2 f682 	clz	r6, r2
 8000e82:	b14e      	cbz	r6, 8000e98 <__udivmoddi4+0x30>
 8000e84:	f1c6 0320 	rsb	r3, r6, #32
 8000e88:	fa01 f806 	lsl.w	r8, r1, r6
 8000e8c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e90:	40b7      	lsls	r7, r6
 8000e92:	ea43 0808 	orr.w	r8, r3, r8
 8000e96:	40b4      	lsls	r4, r6
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ea0:	fa1f fc87 	uxth.w	ip, r7
 8000ea4:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ea8:	fb01 f20c 	mul.w	r2, r1, ip
 8000eac:	0c23      	lsrs	r3, r4, #16
 8000eae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d909      	bls.n	8000eca <__udivmoddi4+0x62>
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ebc:	f080 80eb 	bcs.w	8001096 <__udivmoddi4+0x22e>
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	f240 80e8 	bls.w	8001096 <__udivmoddi4+0x22e>
 8000ec6:	3902      	subs	r1, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	1a9a      	subs	r2, r3, r2
 8000ecc:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ed0:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ed4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ed8:	b2a3      	uxth	r3, r4
 8000eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ede:	459c      	cmp	ip, r3
 8000ee0:	d909      	bls.n	8000ef6 <__udivmoddi4+0x8e>
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ee8:	f080 80d7 	bcs.w	800109a <__udivmoddi4+0x232>
 8000eec:	459c      	cmp	ip, r3
 8000eee:	f240 80d4 	bls.w	800109a <__udivmoddi4+0x232>
 8000ef2:	443b      	add	r3, r7
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000efa:	2100      	movs	r1, #0
 8000efc:	eba3 030c 	sub.w	r3, r3, ip
 8000f00:	b11d      	cbz	r5, 8000f0a <__udivmoddi4+0xa2>
 8000f02:	2200      	movs	r2, #0
 8000f04:	40f3      	lsrs	r3, r6
 8000f06:	e9c5 3200 	strd	r3, r2, [r5]
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d905      	bls.n	8000f1e <__udivmoddi4+0xb6>
 8000f12:	b10d      	cbz	r5, 8000f18 <__udivmoddi4+0xb0>
 8000f14:	e9c5 0100 	strd	r0, r1, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e7f5      	b.n	8000f0a <__udivmoddi4+0xa2>
 8000f1e:	fab3 f183 	clz	r1, r3
 8000f22:	2900      	cmp	r1, #0
 8000f24:	d146      	bne.n	8000fb4 <__udivmoddi4+0x14c>
 8000f26:	4573      	cmp	r3, lr
 8000f28:	d302      	bcc.n	8000f30 <__udivmoddi4+0xc8>
 8000f2a:	4282      	cmp	r2, r0
 8000f2c:	f200 8108 	bhi.w	8001140 <__udivmoddi4+0x2d8>
 8000f30:	1a84      	subs	r4, r0, r2
 8000f32:	eb6e 0203 	sbc.w	r2, lr, r3
 8000f36:	2001      	movs	r0, #1
 8000f38:	4690      	mov	r8, r2
 8000f3a:	2d00      	cmp	r5, #0
 8000f3c:	d0e5      	beq.n	8000f0a <__udivmoddi4+0xa2>
 8000f3e:	e9c5 4800 	strd	r4, r8, [r5]
 8000f42:	e7e2      	b.n	8000f0a <__udivmoddi4+0xa2>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	f000 8091 	beq.w	800106c <__udivmoddi4+0x204>
 8000f4a:	fab2 f682 	clz	r6, r2
 8000f4e:	2e00      	cmp	r6, #0
 8000f50:	f040 80a5 	bne.w	800109e <__udivmoddi4+0x236>
 8000f54:	1a8a      	subs	r2, r1, r2
 8000f56:	2101      	movs	r1, #1
 8000f58:	0c03      	lsrs	r3, r0, #16
 8000f5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	b2bc      	uxth	r4, r7
 8000f62:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f66:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f6e:	fb04 f20c 	mul.w	r2, r4, ip
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x11e>
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f7c:	d202      	bcs.n	8000f84 <__udivmoddi4+0x11c>
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	f200 80e3 	bhi.w	800114a <__udivmoddi4+0x2e2>
 8000f84:	46c4      	mov	ip, r8
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f8c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f90:	fb02 f404 	mul.w	r4, r2, r4
 8000f94:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f98:	429c      	cmp	r4, r3
 8000f9a:	d907      	bls.n	8000fac <__udivmoddi4+0x144>
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000fa2:	d202      	bcs.n	8000faa <__udivmoddi4+0x142>
 8000fa4:	429c      	cmp	r4, r3
 8000fa6:	f200 80cd 	bhi.w	8001144 <__udivmoddi4+0x2dc>
 8000faa:	4602      	mov	r2, r0
 8000fac:	1b1b      	subs	r3, r3, r4
 8000fae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000fb2:	e7a5      	b.n	8000f00 <__udivmoddi4+0x98>
 8000fb4:	f1c1 0620 	rsb	r6, r1, #32
 8000fb8:	408b      	lsls	r3, r1
 8000fba:	fa22 f706 	lsr.w	r7, r2, r6
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	fa2e fa06 	lsr.w	sl, lr, r6
 8000fc4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000fc8:	fbba f8f9 	udiv	r8, sl, r9
 8000fcc:	fa0e fe01 	lsl.w	lr, lr, r1
 8000fd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000fd4:	fb09 aa18 	mls	sl, r9, r8, sl
 8000fd8:	fa1f fc87 	uxth.w	ip, r7
 8000fdc:	ea43 030e 	orr.w	r3, r3, lr
 8000fe0:	fa00 fe01 	lsl.w	lr, r0, r1
 8000fe4:	fb08 f00c 	mul.w	r0, r8, ip
 8000fe8:	0c1c      	lsrs	r4, r3, #16
 8000fea:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000fee:	42a0      	cmp	r0, r4
 8000ff0:	fa02 f201 	lsl.w	r2, r2, r1
 8000ff4:	d90a      	bls.n	800100c <__udivmoddi4+0x1a4>
 8000ff6:	193c      	adds	r4, r7, r4
 8000ff8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ffc:	f080 809e 	bcs.w	800113c <__udivmoddi4+0x2d4>
 8001000:	42a0      	cmp	r0, r4
 8001002:	f240 809b 	bls.w	800113c <__udivmoddi4+0x2d4>
 8001006:	f1a8 0802 	sub.w	r8, r8, #2
 800100a:	443c      	add	r4, r7
 800100c:	1a24      	subs	r4, r4, r0
 800100e:	b298      	uxth	r0, r3
 8001010:	fbb4 f3f9 	udiv	r3, r4, r9
 8001014:	fb09 4413 	mls	r4, r9, r3, r4
 8001018:	fb03 fc0c 	mul.w	ip, r3, ip
 800101c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001020:	45a4      	cmp	ip, r4
 8001022:	d909      	bls.n	8001038 <__udivmoddi4+0x1d0>
 8001024:	193c      	adds	r4, r7, r4
 8001026:	f103 30ff 	add.w	r0, r3, #4294967295
 800102a:	f080 8085 	bcs.w	8001138 <__udivmoddi4+0x2d0>
 800102e:	45a4      	cmp	ip, r4
 8001030:	f240 8082 	bls.w	8001138 <__udivmoddi4+0x2d0>
 8001034:	3b02      	subs	r3, #2
 8001036:	443c      	add	r4, r7
 8001038:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800103c:	eba4 040c 	sub.w	r4, r4, ip
 8001040:	fba0 8c02 	umull	r8, ip, r0, r2
 8001044:	4564      	cmp	r4, ip
 8001046:	4643      	mov	r3, r8
 8001048:	46e1      	mov	r9, ip
 800104a:	d364      	bcc.n	8001116 <__udivmoddi4+0x2ae>
 800104c:	d061      	beq.n	8001112 <__udivmoddi4+0x2aa>
 800104e:	b15d      	cbz	r5, 8001068 <__udivmoddi4+0x200>
 8001050:	ebbe 0203 	subs.w	r2, lr, r3
 8001054:	eb64 0409 	sbc.w	r4, r4, r9
 8001058:	fa04 f606 	lsl.w	r6, r4, r6
 800105c:	fa22 f301 	lsr.w	r3, r2, r1
 8001060:	431e      	orrs	r6, r3
 8001062:	40cc      	lsrs	r4, r1
 8001064:	e9c5 6400 	strd	r6, r4, [r5]
 8001068:	2100      	movs	r1, #0
 800106a:	e74e      	b.n	8000f0a <__udivmoddi4+0xa2>
 800106c:	fbb1 fcf2 	udiv	ip, r1, r2
 8001070:	0c01      	lsrs	r1, r0, #16
 8001072:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001076:	b280      	uxth	r0, r0
 8001078:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800107c:	463b      	mov	r3, r7
 800107e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001082:	4638      	mov	r0, r7
 8001084:	463c      	mov	r4, r7
 8001086:	46b8      	mov	r8, r7
 8001088:	46be      	mov	lr, r7
 800108a:	2620      	movs	r6, #32
 800108c:	eba2 0208 	sub.w	r2, r2, r8
 8001090:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001094:	e765      	b.n	8000f62 <__udivmoddi4+0xfa>
 8001096:	4601      	mov	r1, r0
 8001098:	e717      	b.n	8000eca <__udivmoddi4+0x62>
 800109a:	4610      	mov	r0, r2
 800109c:	e72b      	b.n	8000ef6 <__udivmoddi4+0x8e>
 800109e:	f1c6 0120 	rsb	r1, r6, #32
 80010a2:	fa2e fc01 	lsr.w	ip, lr, r1
 80010a6:	40b7      	lsls	r7, r6
 80010a8:	fa0e fe06 	lsl.w	lr, lr, r6
 80010ac:	fa20 f101 	lsr.w	r1, r0, r1
 80010b0:	ea41 010e 	orr.w	r1, r1, lr
 80010b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010b8:	fbbc f8fe 	udiv	r8, ip, lr
 80010bc:	b2bc      	uxth	r4, r7
 80010be:	fb0e cc18 	mls	ip, lr, r8, ip
 80010c2:	fb08 f904 	mul.w	r9, r8, r4
 80010c6:	0c0a      	lsrs	r2, r1, #16
 80010c8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80010cc:	40b0      	lsls	r0, r6
 80010ce:	4591      	cmp	r9, r2
 80010d0:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80010d4:	b280      	uxth	r0, r0
 80010d6:	d93e      	bls.n	8001156 <__udivmoddi4+0x2ee>
 80010d8:	18ba      	adds	r2, r7, r2
 80010da:	f108 3cff 	add.w	ip, r8, #4294967295
 80010de:	d201      	bcs.n	80010e4 <__udivmoddi4+0x27c>
 80010e0:	4591      	cmp	r9, r2
 80010e2:	d81f      	bhi.n	8001124 <__udivmoddi4+0x2bc>
 80010e4:	eba2 0209 	sub.w	r2, r2, r9
 80010e8:	fbb2 f9fe 	udiv	r9, r2, lr
 80010ec:	fb09 f804 	mul.w	r8, r9, r4
 80010f0:	fb0e 2a19 	mls	sl, lr, r9, r2
 80010f4:	b28a      	uxth	r2, r1
 80010f6:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80010fa:	4542      	cmp	r2, r8
 80010fc:	d229      	bcs.n	8001152 <__udivmoddi4+0x2ea>
 80010fe:	18ba      	adds	r2, r7, r2
 8001100:	f109 31ff 	add.w	r1, r9, #4294967295
 8001104:	d2c2      	bcs.n	800108c <__udivmoddi4+0x224>
 8001106:	4542      	cmp	r2, r8
 8001108:	d2c0      	bcs.n	800108c <__udivmoddi4+0x224>
 800110a:	f1a9 0102 	sub.w	r1, r9, #2
 800110e:	443a      	add	r2, r7
 8001110:	e7bc      	b.n	800108c <__udivmoddi4+0x224>
 8001112:	45c6      	cmp	lr, r8
 8001114:	d29b      	bcs.n	800104e <__udivmoddi4+0x1e6>
 8001116:	ebb8 0302 	subs.w	r3, r8, r2
 800111a:	eb6c 0c07 	sbc.w	ip, ip, r7
 800111e:	3801      	subs	r0, #1
 8001120:	46e1      	mov	r9, ip
 8001122:	e794      	b.n	800104e <__udivmoddi4+0x1e6>
 8001124:	eba7 0909 	sub.w	r9, r7, r9
 8001128:	444a      	add	r2, r9
 800112a:	fbb2 f9fe 	udiv	r9, r2, lr
 800112e:	f1a8 0c02 	sub.w	ip, r8, #2
 8001132:	fb09 f804 	mul.w	r8, r9, r4
 8001136:	e7db      	b.n	80010f0 <__udivmoddi4+0x288>
 8001138:	4603      	mov	r3, r0
 800113a:	e77d      	b.n	8001038 <__udivmoddi4+0x1d0>
 800113c:	46d0      	mov	r8, sl
 800113e:	e765      	b.n	800100c <__udivmoddi4+0x1a4>
 8001140:	4608      	mov	r0, r1
 8001142:	e6fa      	b.n	8000f3a <__udivmoddi4+0xd2>
 8001144:	443b      	add	r3, r7
 8001146:	3a02      	subs	r2, #2
 8001148:	e730      	b.n	8000fac <__udivmoddi4+0x144>
 800114a:	f1ac 0c02 	sub.w	ip, ip, #2
 800114e:	443b      	add	r3, r7
 8001150:	e719      	b.n	8000f86 <__udivmoddi4+0x11e>
 8001152:	4649      	mov	r1, r9
 8001154:	e79a      	b.n	800108c <__udivmoddi4+0x224>
 8001156:	eba2 0209 	sub.w	r2, r2, r9
 800115a:	fbb2 f9fe 	udiv	r9, r2, lr
 800115e:	46c4      	mov	ip, r8
 8001160:	fb09 f804 	mul.w	r8, r9, r4
 8001164:	e7c4      	b.n	80010f0 <__udivmoddi4+0x288>
 8001166:	bf00      	nop

08001168 <__aeabi_idiv0>:
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	@ 0x30
 8001170:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2319      	movs	r3, #25
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	463b      	mov	r3, r7
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	2288      	movs	r2, #136	@ 0x88
 8001184:	21ec      	movs	r1, #236	@ 0xec
 8001186:	485f      	ldr	r0, [pc, #380]	@ (8001304 <TrimRead+0x198>)
 8001188:	f002 f89a 	bl	80032c0 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 800118c:	463b      	mov	r3, r7
 800118e:	3319      	adds	r3, #25
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	9202      	str	r2, [sp, #8]
 8001196:	2207      	movs	r2, #7
 8001198:	9201      	str	r2, [sp, #4]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	22e1      	movs	r2, #225	@ 0xe1
 80011a0:	21ec      	movs	r1, #236	@ 0xec
 80011a2:	4858      	ldr	r0, [pc, #352]	@ (8001304 <TrimRead+0x198>)
 80011a4:	f002 f88c 	bl	80032c0 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	783b      	ldrb	r3, [r7, #0]
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b53      	ldr	r3, [pc, #332]	@ (8001308 <TrimRead+0x19c>)
 80011bc:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	78bb      	ldrb	r3, [r7, #2]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	4b4f      	ldr	r3, [pc, #316]	@ (800130c <TrimRead+0x1a0>)
 80011d0:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80011d2:	797b      	ldrb	r3, [r7, #5]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b21a      	sxth	r2, r3
 80011da:	793b      	ldrb	r3, [r7, #4]
 80011dc:	b21b      	sxth	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001310 <TrimRead+0x1a4>)
 80011e4:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	797b      	ldrb	r3, [r7, #5]
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b46      	ldr	r3, [pc, #280]	@ (8001314 <TrimRead+0x1a8>)
 80011fa:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 80011fc:	7a7b      	ldrb	r3, [r7, #9]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b42      	ldr	r3, [pc, #264]	@ (8001318 <TrimRead+0x1ac>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001210:	7afb      	ldrb	r3, [r7, #11]
 8001212:	b21b      	sxth	r3, r3
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	7abb      	ldrb	r3, [r7, #10]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b21a      	sxth	r2, r3
 8001220:	4b3e      	ldr	r3, [pc, #248]	@ (800131c <TrimRead+0x1b0>)
 8001222:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001224:	7b7b      	ldrb	r3, [r7, #13]
 8001226:	b21b      	sxth	r3, r3
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b21a      	sxth	r2, r3
 800122c:	7b3b      	ldrb	r3, [r7, #12]
 800122e:	b21b      	sxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b21a      	sxth	r2, r3
 8001234:	4b3a      	ldr	r3, [pc, #232]	@ (8001320 <TrimRead+0x1b4>)
 8001236:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	b21b      	sxth	r3, r3
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b36      	ldr	r3, [pc, #216]	@ (8001324 <TrimRead+0x1b8>)
 800124a:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 800124c:	7c7b      	ldrb	r3, [r7, #17]
 800124e:	b21b      	sxth	r3, r3
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b21a      	sxth	r2, r3
 8001254:	7c3b      	ldrb	r3, [r7, #16]
 8001256:	b21b      	sxth	r3, r3
 8001258:	4313      	orrs	r3, r2
 800125a:	b21a      	sxth	r2, r3
 800125c:	4b32      	ldr	r3, [pc, #200]	@ (8001328 <TrimRead+0x1bc>)
 800125e:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001260:	7cfb      	ldrb	r3, [r7, #19]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7cbb      	ldrb	r3, [r7, #18]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	4b2e      	ldr	r3, [pc, #184]	@ (800132c <TrimRead+0x1c0>)
 8001272:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001274:	7d7b      	ldrb	r3, [r7, #21]
 8001276:	b21b      	sxth	r3, r3
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21a      	sxth	r2, r3
 800127c:	7d3b      	ldrb	r3, [r7, #20]
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21a      	sxth	r2, r3
 8001284:	4b2a      	ldr	r3, [pc, #168]	@ (8001330 <TrimRead+0x1c4>)
 8001286:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	b21b      	sxth	r3, r3
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b21a      	sxth	r2, r3
 8001290:	7dbb      	ldrb	r3, [r7, #22]
 8001292:	b21b      	sxth	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b21a      	sxth	r2, r3
 8001298:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <TrimRead+0x1c8>)
 800129a:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 800129c:	7e3b      	ldrb	r3, [r7, #24]
 800129e:	461a      	mov	r2, r3
 80012a0:	4b25      	ldr	r3, [pc, #148]	@ (8001338 <TrimRead+0x1cc>)
 80012a2:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80012a4:	7ebb      	ldrb	r3, [r7, #26]
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	7e7b      	ldrb	r3, [r7, #25]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <TrimRead+0x1d0>)
 80012b6:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80012b8:	7efb      	ldrb	r3, [r7, #27]
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <TrimRead+0x1d4>)
 80012be:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80012c0:	7f3b      	ldrb	r3, [r7, #28]
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	7f7b      	ldrb	r3, [r7, #29]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <TrimRead+0x1d8>)
 80012d8:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80012da:	7fbb      	ldrb	r3, [r7, #30]
 80012dc:	b21b      	sxth	r3, r3
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	7f7b      	ldrb	r3, [r7, #29]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <TrimRead+0x1dc>)
 80012f0:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b15      	ldr	r3, [pc, #84]	@ (800134c <TrimRead+0x1e0>)
 80012f8:	801a      	strh	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000224 	.word	0x20000224
 8001308:	200001fc 	.word	0x200001fc
 800130c:	20000204 	.word	0x20000204
 8001310:	20000206 	.word	0x20000206
 8001314:	200001fe 	.word	0x200001fe
 8001318:	20000208 	.word	0x20000208
 800131c:	2000020a 	.word	0x2000020a
 8001320:	2000020c 	.word	0x2000020c
 8001324:	2000020e 	.word	0x2000020e
 8001328:	20000210 	.word	0x20000210
 800132c:	20000212 	.word	0x20000212
 8001330:	20000214 	.word	0x20000214
 8001334:	20000216 	.word	0x20000216
 8001338:	20000200 	.word	0x20000200
 800133c:	20000218 	.word	0x20000218
 8001340:	20000202 	.word	0x20000202
 8001344:	2000021a 	.word	0x2000021a
 8001348:	2000021c 	.word	0x2000021c
 800134c:	2000021e 	.word	0x2000021e

08001350 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b089      	sub	sp, #36	@ 0x24
 8001354:	af04      	add	r7, sp, #16
 8001356:	4604      	mov	r4, r0
 8001358:	4608      	mov	r0, r1
 800135a:	4611      	mov	r1, r2
 800135c:	461a      	mov	r2, r3
 800135e:	4623      	mov	r3, r4
 8001360:	71fb      	strb	r3, [r7, #7]
 8001362:	4603      	mov	r3, r0
 8001364:	71bb      	strb	r3, [r7, #6]
 8001366:	460b      	mov	r3, r1
 8001368:	717b      	strb	r3, [r7, #5]
 800136a:	4613      	mov	r3, r2
 800136c:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 800136e:	f7ff fefd 	bl	800116c <TrimRead>


	uint8_t datatowrite = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 800137a:	23b6      	movs	r3, #182	@ 0xb6
 800137c:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800137e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	2301      	movs	r3, #1
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	f107 030f 	add.w	r3, r7, #15
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2301      	movs	r3, #1
 8001390:	22e0      	movs	r2, #224	@ 0xe0
 8001392:	21ec      	movs	r1, #236	@ 0xec
 8001394:	4842      	ldr	r0, [pc, #264]	@ (80014a0 <BME280_Config+0x150>)
 8001396:	f001 fe99 	bl	80030cc <HAL_I2C_Mem_Write>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <BME280_Config+0x56>
	{
		return -1;
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
 80013a4:	e077      	b.n	8001496 <BME280_Config+0x146>
	}

	HAL_Delay (100);
 80013a6:	2064      	movs	r0, #100	@ 0x64
 80013a8:	f001 f9e4 	bl	8002774 <HAL_Delay>
	// write the humidity oversampling to 0xF2



	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80013ac:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80013b0:	015b      	lsls	r3, r3, #5
 80013b2:	b25a      	sxtb	r2, r3
 80013b4:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2301      	movs	r3, #1
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	f107 030f 	add.w	r3, r7, #15
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	22f5      	movs	r2, #245	@ 0xf5
 80013d8:	21ec      	movs	r1, #236	@ 0xec
 80013da:	4831      	ldr	r0, [pc, #196]	@ (80014a0 <BME280_Config+0x150>)
 80013dc:	f001 fe76 	bl	80030cc <HAL_I2C_Mem_Write>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <BME280_Config+0x9c>
	{
		return -1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e054      	b.n	8001496 <BME280_Config+0x146>
	}
	HAL_Delay (100);
 80013ec:	2064      	movs	r0, #100	@ 0x64
 80013ee:	f001 f9c1 	bl	8002774 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80013f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	2301      	movs	r3, #1
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	f107 030e 	add.w	r3, r7, #14
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2301      	movs	r3, #1
 8001404:	22f5      	movs	r2, #245	@ 0xf5
 8001406:	21ec      	movs	r1, #236	@ 0xec
 8001408:	4825      	ldr	r0, [pc, #148]	@ (80014a0 <BME280_Config+0x150>)
 800140a:	f001 ff59 	bl	80032c0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800140e:	7bba      	ldrb	r2, [r7, #14]
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	429a      	cmp	r2, r3
 8001414:	d002      	beq.n	800141c <BME280_Config+0xcc>
	{
		return -1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e03c      	b.n	8001496 <BME280_Config+0x146>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	015b      	lsls	r3, r3, #5
 8001422:	b25a      	sxtb	r2, r3
 8001424:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	b25b      	sxtb	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b25a      	sxtb	r2, r3
 8001430:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001434:	4313      	orrs	r3, r2
 8001436:	b25b      	sxtb	r3, r3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800143c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2301      	movs	r3, #1
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	f107 030f 	add.w	r3, r7, #15
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	22f4      	movs	r2, #244	@ 0xf4
 8001450:	21ec      	movs	r1, #236	@ 0xec
 8001452:	4813      	ldr	r0, [pc, #76]	@ (80014a0 <BME280_Config+0x150>)
 8001454:	f001 fe3a 	bl	80030cc <HAL_I2C_Mem_Write>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <BME280_Config+0x114>
	{
		return -1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e018      	b.n	8001496 <BME280_Config+0x146>
	}
	HAL_Delay (100);
 8001464:	2064      	movs	r0, #100	@ 0x64
 8001466:	f001 f985 	bl	8002774 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800146a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	2301      	movs	r3, #1
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	f107 030e 	add.w	r3, r7, #14
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	22f4      	movs	r2, #244	@ 0xf4
 800147e:	21ec      	movs	r1, #236	@ 0xec
 8001480:	4807      	ldr	r0, [pc, #28]	@ (80014a0 <BME280_Config+0x150>)
 8001482:	f001 ff1d 	bl	80032c0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001486:	7bba      	ldrb	r2, [r7, #14]
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	429a      	cmp	r2, r3
 800148c:	d002      	beq.n	8001494 <BME280_Config+0x144>
	{
		return -1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e000      	b.n	8001496 <BME280_Config+0x146>
	}

	return 0;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000224 	.word	0x20000224

080014a4 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80014aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ae:	9302      	str	r3, [sp, #8]
 80014b0:	2301      	movs	r3, #1
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <BMEReadRaw+0x80>)
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2301      	movs	r3, #1
 80014ba:	22d0      	movs	r2, #208	@ 0xd0
 80014bc:	21ec      	movs	r1, #236	@ 0xec
 80014be:	481a      	ldr	r0, [pc, #104]	@ (8001528 <BMEReadRaw+0x84>)
 80014c0:	f001 fefe 	bl	80032c0 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <BMEReadRaw+0x80>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b60      	cmp	r3, #96	@ 0x60
 80014ca:	d124      	bne.n	8001516 <BMEReadRaw+0x72>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	2308      	movs	r3, #8
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	463b      	mov	r3, r7
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2301      	movs	r3, #1
 80014dc:	22f7      	movs	r2, #247	@ 0xf7
 80014de:	21ec      	movs	r1, #236	@ 0xec
 80014e0:	4811      	ldr	r0, [pc, #68]	@ (8001528 <BMEReadRaw+0x84>)
 80014e2:	f001 feed 	bl	80032c0 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80014e6:	783b      	ldrb	r3, [r7, #0]
 80014e8:	031a      	lsls	r2, r3, #12
 80014ea:	787b      	ldrb	r3, [r7, #1]
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	4313      	orrs	r3, r2
 80014f0:	78ba      	ldrb	r2, [r7, #2]
 80014f2:	0912      	lsrs	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	4313      	orrs	r3, r2
 80014f8:	4a0c      	ldr	r2, [pc, #48]	@ (800152c <BMEReadRaw+0x88>)
 80014fa:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	031a      	lsls	r2, r3, #12
 8001500:	793b      	ldrb	r3, [r7, #4]
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	4313      	orrs	r3, r2
 8001506:	797a      	ldrb	r2, [r7, #5]
 8001508:	0912      	lsrs	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	4313      	orrs	r3, r2
 800150e:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <BMEReadRaw+0x8c>)
 8001510:	6013      	str	r3, [r2, #0]


		return 0;
 8001512:	2300      	movs	r3, #0
 8001514:	e001      	b.n	800151a <BMEReadRaw+0x76>
	}

	else return -1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200001f0 	.word	0x200001f0
 8001528:	20000224 	.word	0x20000224
 800152c:	200001f8 	.word	0x200001f8
 8001530:	200001f4 	.word	0x200001f4

08001534 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	10da      	asrs	r2, r3, #3
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <BME280_compensate_T_int32+0x70>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	4a17      	ldr	r2, [pc, #92]	@ (80015a8 <BME280_compensate_T_int32+0x74>)
 800154a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	12db      	asrs	r3, r3, #11
 8001554:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	111b      	asrs	r3, r3, #4
 800155a:	4a12      	ldr	r2, [pc, #72]	@ (80015a4 <BME280_compensate_T_int32+0x70>)
 800155c:	8812      	ldrh	r2, [r2, #0]
 800155e:	1a9b      	subs	r3, r3, r2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	1112      	asrs	r2, r2, #4
 8001564:	490f      	ldr	r1, [pc, #60]	@ (80015a4 <BME280_compensate_T_int32+0x70>)
 8001566:	8809      	ldrh	r1, [r1, #0]
 8001568:	1a52      	subs	r2, r2, r1
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	131b      	asrs	r3, r3, #12
 8001570:	4a0e      	ldr	r2, [pc, #56]	@ (80015ac <BME280_compensate_T_int32+0x78>)
 8001572:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	139b      	asrs	r3, r3, #14
 800157c:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4413      	add	r3, r2
 8001584:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <BME280_compensate_T_int32+0x7c>)
 8001586:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <BME280_compensate_T_int32+0x7c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	3380      	adds	r3, #128	@ 0x80
 8001594:	121b      	asrs	r3, r3, #8
 8001596:	60fb      	str	r3, [r7, #12]
	return T;
 8001598:	68fb      	ldr	r3, [r7, #12]
}
 800159a:	4618      	mov	r0, r3
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	200001fc 	.word	0x200001fc
 80015a8:	20000204 	.word	0x20000204
 80015ac:	20000206 	.word	0x20000206
 80015b0:	20000220 	.word	0x20000220

080015b4 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 80015b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015b8:	b0ca      	sub	sp, #296	@ 0x128
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80015c0:	4bae      	ldr	r3, [pc, #696]	@ (800187c <BME280_compensate_P_int64+0x2c8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	17da      	asrs	r2, r3, #31
 80015c6:	461c      	mov	r4, r3
 80015c8:	4615      	mov	r5, r2
 80015ca:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80015ce:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015d2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80015d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015de:	fb03 f102 	mul.w	r1, r3, r2
 80015e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	18ca      	adds	r2, r1, r3
 80015f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015f4:	fba3 8903 	umull	r8, r9, r3, r3
 80015f8:	eb02 0309 	add.w	r3, r2, r9
 80015fc:	4699      	mov	r9, r3
 80015fe:	4ba0      	ldr	r3, [pc, #640]	@ (8001880 <BME280_compensate_P_int64+0x2cc>)
 8001600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001604:	b21b      	sxth	r3, r3
 8001606:	17da      	asrs	r2, r3, #31
 8001608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800160c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001610:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001614:	4603      	mov	r3, r0
 8001616:	fb03 f209 	mul.w	r2, r3, r9
 800161a:	460b      	mov	r3, r1
 800161c:	fb08 f303 	mul.w	r3, r8, r3
 8001620:	4413      	add	r3, r2
 8001622:	4602      	mov	r2, r0
 8001624:	fba8 2102 	umull	r2, r1, r8, r2
 8001628:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 800162c:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001630:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001634:	4413      	add	r3, r2
 8001636:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800163a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800163e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001642:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001646:	4b8f      	ldr	r3, [pc, #572]	@ (8001884 <BME280_compensate_P_int64+0x2d0>)
 8001648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164c:	b21b      	sxth	r3, r3
 800164e:	17da      	asrs	r2, r3, #31
 8001650:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001654:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001658:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800165c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001660:	462a      	mov	r2, r5
 8001662:	fb02 f203 	mul.w	r2, r2, r3
 8001666:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800166a:	4621      	mov	r1, r4
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	441a      	add	r2, r3
 8001672:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001676:	4621      	mov	r1, r4
 8001678:	fba3 3101 	umull	r3, r1, r3, r1
 800167c:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8001680:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001688:	18d3      	adds	r3, r2, r3
 800168a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800168e:	f04f 0000 	mov.w	r0, #0
 8001692:	f04f 0100 	mov.w	r1, #0
 8001696:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800169a:	462b      	mov	r3, r5
 800169c:	0459      	lsls	r1, r3, #17
 800169e:	4622      	mov	r2, r4
 80016a0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80016a4:	4623      	mov	r3, r4
 80016a6:	0458      	lsls	r0, r3, #17
 80016a8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80016ac:	1814      	adds	r4, r2, r0
 80016ae:	643c      	str	r4, [r7, #64]	@ 0x40
 80016b0:	414b      	adcs	r3, r1
 80016b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80016b4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80016b8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80016bc:	4b72      	ldr	r3, [pc, #456]	@ (8001888 <BME280_compensate_P_int64+0x2d4>)
 80016be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	17da      	asrs	r2, r3, #31
 80016c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80016ca:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80016ce:	f04f 0000 	mov.w	r0, #0
 80016d2:	f04f 0100 	mov.w	r1, #0
 80016d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016da:	00d9      	lsls	r1, r3, #3
 80016dc:	2000      	movs	r0, #0
 80016de:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80016e2:	1814      	adds	r4, r2, r0
 80016e4:	63bc      	str	r4, [r7, #56]	@ 0x38
 80016e6:	414b      	adcs	r3, r1
 80016e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016ea:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80016ee:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80016f2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80016f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016fa:	fb03 f102 	mul.w	r1, r3, r2
 80016fe:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001702:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	18ca      	adds	r2, r1, r3
 800170c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001710:	fba3 3103 	umull	r3, r1, r3, r3
 8001714:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001718:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800171c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001720:	18d3      	adds	r3, r2, r3
 8001722:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001726:	4b59      	ldr	r3, [pc, #356]	@ (800188c <BME280_compensate_P_int64+0x2d8>)
 8001728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172c:	b21b      	sxth	r3, r3
 800172e:	17da      	asrs	r2, r3, #31
 8001730:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001734:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001738:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 800173c:	4622      	mov	r2, r4
 800173e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001742:	4641      	mov	r1, r8
 8001744:	fb01 f202 	mul.w	r2, r1, r2
 8001748:	464d      	mov	r5, r9
 800174a:	4618      	mov	r0, r3
 800174c:	4621      	mov	r1, r4
 800174e:	4603      	mov	r3, r0
 8001750:	fb03 f305 	mul.w	r3, r3, r5
 8001754:	4413      	add	r3, r2
 8001756:	4602      	mov	r2, r0
 8001758:	4641      	mov	r1, r8
 800175a:	fba2 2101 	umull	r2, r1, r2, r1
 800175e:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8001762:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001766:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800176a:	4413      	add	r3, r2
 800176c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001770:	f04f 0000 	mov.w	r0, #0
 8001774:	f04f 0100 	mov.w	r1, #0
 8001778:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800177c:	4623      	mov	r3, r4
 800177e:	0a18      	lsrs	r0, r3, #8
 8001780:	462a      	mov	r2, r5
 8001782:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001786:	462b      	mov	r3, r5
 8001788:	1219      	asrs	r1, r3, #8
 800178a:	4b41      	ldr	r3, [pc, #260]	@ (8001890 <BME280_compensate_P_int64+0x2dc>)
 800178c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001790:	b21b      	sxth	r3, r3
 8001792:	17da      	asrs	r2, r3, #31
 8001794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001798:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800179c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017a0:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80017a4:	464a      	mov	r2, r9
 80017a6:	fb02 f203 	mul.w	r2, r2, r3
 80017aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017ae:	4644      	mov	r4, r8
 80017b0:	fb04 f303 	mul.w	r3, r4, r3
 80017b4:	441a      	add	r2, r3
 80017b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017ba:	4644      	mov	r4, r8
 80017bc:	fba3 3404 	umull	r3, r4, r3, r4
 80017c0:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 80017c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80017c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80017cc:	18d3      	adds	r3, r2, r3
 80017ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80017de:	464c      	mov	r4, r9
 80017e0:	0323      	lsls	r3, r4, #12
 80017e2:	46c4      	mov	ip, r8
 80017e4:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 80017e8:	4644      	mov	r4, r8
 80017ea:	0322      	lsls	r2, r4, #12
 80017ec:	1884      	adds	r4, r0, r2
 80017ee:	633c      	str	r4, [r7, #48]	@ 0x30
 80017f0:	eb41 0303 	adc.w	r3, r1, r3
 80017f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80017f6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80017fa:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80017fe:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001802:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001806:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800180a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800180e:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <BME280_compensate_P_int64+0x2e0>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	b29b      	uxth	r3, r3
 8001814:	2200      	movs	r2, #0
 8001816:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800181a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800181e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001822:	4622      	mov	r2, r4
 8001824:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001828:	4641      	mov	r1, r8
 800182a:	fb01 f202 	mul.w	r2, r1, r2
 800182e:	464d      	mov	r5, r9
 8001830:	4618      	mov	r0, r3
 8001832:	4621      	mov	r1, r4
 8001834:	4603      	mov	r3, r0
 8001836:	fb03 f305 	mul.w	r3, r3, r5
 800183a:	4413      	add	r3, r2
 800183c:	4602      	mov	r2, r0
 800183e:	4641      	mov	r1, r8
 8001840:	fba2 2101 	umull	r2, r1, r2, r1
 8001844:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001848:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800184c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001850:	4413      	add	r3, r2
 8001852:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001862:	4629      	mov	r1, r5
 8001864:	104a      	asrs	r2, r1, #1
 8001866:	4629      	mov	r1, r5
 8001868:	17cb      	asrs	r3, r1, #31
 800186a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 800186e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001872:	4313      	orrs	r3, r2
 8001874:	d110      	bne.n	8001898 <BME280_compensate_P_int64+0x2e4>
	{
		return 0; // avoid exception caused by division by zero
 8001876:	2300      	movs	r3, #0
 8001878:	e152      	b.n	8001b20 <BME280_compensate_P_int64+0x56c>
 800187a:	bf00      	nop
 800187c:	20000220 	.word	0x20000220
 8001880:	20000210 	.word	0x20000210
 8001884:	2000020e 	.word	0x2000020e
 8001888:	2000020c 	.word	0x2000020c
 800188c:	2000020a 	.word	0x2000020a
 8001890:	20000208 	.word	0x20000208
 8001894:	200001fe 	.word	0x200001fe
	}
	p = 1048576-adc_P;
 8001898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800189c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80018a0:	17da      	asrs	r2, r3, #31
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018a6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80018aa:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80018ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018b2:	105b      	asrs	r3, r3, #1
 80018b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80018b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018bc:	07db      	lsls	r3, r3, #31
 80018be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80018c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80018ca:	4604      	mov	r4, r0
 80018cc:	1aa4      	subs	r4, r4, r2
 80018ce:	67bc      	str	r4, [r7, #120]	@ 0x78
 80018d0:	eb61 0303 	sbc.w	r3, r1, r3
 80018d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80018da:	4622      	mov	r2, r4
 80018dc:	462b      	mov	r3, r5
 80018de:	1891      	adds	r1, r2, r2
 80018e0:	6239      	str	r1, [r7, #32]
 80018e2:	415b      	adcs	r3, r3
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018ea:	4621      	mov	r1, r4
 80018ec:	1851      	adds	r1, r2, r1
 80018ee:	61b9      	str	r1, [r7, #24]
 80018f0:	4629      	mov	r1, r5
 80018f2:	414b      	adcs	r3, r1
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001902:	4649      	mov	r1, r9
 8001904:	018b      	lsls	r3, r1, #6
 8001906:	4641      	mov	r1, r8
 8001908:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800190c:	4641      	mov	r1, r8
 800190e:	018a      	lsls	r2, r1, #6
 8001910:	4641      	mov	r1, r8
 8001912:	1889      	adds	r1, r1, r2
 8001914:	6139      	str	r1, [r7, #16]
 8001916:	4649      	mov	r1, r9
 8001918:	eb43 0101 	adc.w	r1, r3, r1
 800191c:	6179      	str	r1, [r7, #20]
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800192a:	4649      	mov	r1, r9
 800192c:	008b      	lsls	r3, r1, #2
 800192e:	46c4      	mov	ip, r8
 8001930:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001934:	4641      	mov	r1, r8
 8001936:	008a      	lsls	r2, r1, #2
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	4603      	mov	r3, r0
 800193e:	4622      	mov	r2, r4
 8001940:	189b      	adds	r3, r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	460b      	mov	r3, r1
 8001946:	462a      	mov	r2, r5
 8001948:	eb42 0303 	adc.w	r3, r2, r3
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800195a:	4649      	mov	r1, r9
 800195c:	008b      	lsls	r3, r1, #2
 800195e:	46c4      	mov	ip, r8
 8001960:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001964:	4641      	mov	r1, r8
 8001966:	008a      	lsls	r2, r1, #2
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	4603      	mov	r3, r0
 800196e:	4622      	mov	r2, r4
 8001970:	189b      	adds	r3, r3, r2
 8001972:	673b      	str	r3, [r7, #112]	@ 0x70
 8001974:	462b      	mov	r3, r5
 8001976:	460a      	mov	r2, r1
 8001978:	eb42 0303 	adc.w	r3, r2, r3
 800197c:	677b      	str	r3, [r7, #116]	@ 0x74
 800197e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001982:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001986:	f7ff fa1f 	bl	8000dc8 <__aeabi_ldivmod>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001992:	4b66      	ldr	r3, [pc, #408]	@ (8001b2c <BME280_compensate_P_int64+0x578>)
 8001994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001998:	b21b      	sxth	r3, r3
 800199a:	17da      	asrs	r2, r3, #31
 800199c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800199e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019a0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80019a4:	f04f 0000 	mov.w	r0, #0
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	0b50      	lsrs	r0, r2, #13
 80019ae:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019b2:	1359      	asrs	r1, r3, #13
 80019b4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80019b8:	462b      	mov	r3, r5
 80019ba:	fb00 f203 	mul.w	r2, r0, r3
 80019be:	4623      	mov	r3, r4
 80019c0:	fb03 f301 	mul.w	r3, r3, r1
 80019c4:	4413      	add	r3, r2
 80019c6:	4622      	mov	r2, r4
 80019c8:	fba2 2100 	umull	r2, r1, r2, r0
 80019cc:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 80019d0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80019d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80019d8:	4413      	add	r3, r2
 80019da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80019de:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80019e2:	f04f 0000 	mov.w	r0, #0
 80019e6:	f04f 0100 	mov.w	r1, #0
 80019ea:	0b50      	lsrs	r0, r2, #13
 80019ec:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019f0:	1359      	asrs	r1, r3, #13
 80019f2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80019f6:	462b      	mov	r3, r5
 80019f8:	fb00 f203 	mul.w	r2, r0, r3
 80019fc:	4623      	mov	r3, r4
 80019fe:	fb03 f301 	mul.w	r3, r3, r1
 8001a02:	4413      	add	r3, r2
 8001a04:	4622      	mov	r2, r4
 8001a06:	fba2 2100 	umull	r2, r1, r2, r0
 8001a0a:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001a0e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a16:	4413      	add	r3, r2
 8001a18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001a28:	4621      	mov	r1, r4
 8001a2a:	0e4a      	lsrs	r2, r1, #25
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	4629      	mov	r1, r5
 8001a30:	460c      	mov	r4, r1
 8001a32:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001a36:	164b      	asrs	r3, r1, #25
 8001a38:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001a3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b30 <BME280_compensate_P_int64+0x57c>)
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	17da      	asrs	r2, r3, #31
 8001a46:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a48:	667a      	str	r2, [r7, #100]	@ 0x64
 8001a4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a4e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a52:	462a      	mov	r2, r5
 8001a54:	fb02 f203 	mul.w	r2, r2, r3
 8001a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001a68:	4621      	mov	r1, r4
 8001a6a:	fba2 2101 	umull	r2, r1, r2, r1
 8001a6e:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001a72:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001a76:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	0cca      	lsrs	r2, r1, #19
 8001a90:	4620      	mov	r0, r4
 8001a92:	4629      	mov	r1, r5
 8001a94:	460c      	mov	r4, r1
 8001a96:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001a9a:	14cb      	asrs	r3, r1, #19
 8001a9c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001aa0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001aa4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001aa8:	1884      	adds	r4, r0, r2
 8001aaa:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001aac:	eb41 0303 	adc.w	r3, r1, r3
 8001ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ab2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001ab6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001aba:	4621      	mov	r1, r4
 8001abc:	1889      	adds	r1, r1, r2
 8001abe:	6539      	str	r1, [r7, #80]	@ 0x50
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	eb43 0101 	adc.w	r1, r3, r1
 8001ac6:	6579      	str	r1, [r7, #84]	@ 0x54
 8001ac8:	f04f 0000 	mov.w	r0, #0
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001ad4:	4623      	mov	r3, r4
 8001ad6:	0a18      	lsrs	r0, r3, #8
 8001ad8:	462a      	mov	r2, r5
 8001ada:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001ade:	462b      	mov	r3, r5
 8001ae0:	1219      	asrs	r1, r3, #8
 8001ae2:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <BME280_compensate_P_int64+0x580>)
 8001ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	17da      	asrs	r2, r3, #31
 8001aec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001aee:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001afc:	464c      	mov	r4, r9
 8001afe:	0123      	lsls	r3, r4, #4
 8001b00:	46c4      	mov	ip, r8
 8001b02:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001b06:	4644      	mov	r4, r8
 8001b08:	0122      	lsls	r2, r4, #4
 8001b0a:	1884      	adds	r4, r0, r2
 8001b0c:	603c      	str	r4, [r7, #0]
 8001b0e:	eb41 0303 	adc.w	r3, r1, r3
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b18:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001b1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001b26:	46bd      	mov	sp, r7
 8001b28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2c:	20000216 	.word	0x20000216
 8001b30:	20000214 	.word	0x20000214
 8001b34:	20000212 	.word	0x20000212

08001b38 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001b3c:	f7ff fcb2 	bl	80014a4 <BMEReadRaw>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d142      	bne.n	8001bcc <BME280_Measure+0x94>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001b46:	4b26      	ldr	r3, [pc, #152]	@ (8001be0 <BME280_Measure+0xa8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b4e:	d104      	bne.n	8001b5a <BME280_Measure+0x22>
 8001b50:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <BME280_Measure+0xac>)
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e016      	b.n	8001b88 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001b5a:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <BME280_Measure+0xa8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fce8 	bl	8001534 <BME280_compensate_T_int32>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fc4c 	bl	8000404 <__aeabi_i2d>
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <BME280_Measure+0xb0>)
 8001b72:	f7fe fddb 	bl	800072c <__aeabi_ddiv>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7fe ff83 	bl	8000a88 <__aeabi_d2f>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <BME280_Measure+0xac>)
 8001b86:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001b88:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <BME280_Measure+0xb4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b90:	d104      	bne.n	8001b9c <BME280_Measure+0x64>
 8001b92:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <BME280_Measure+0xb8>)
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = 0;
	}
}
 8001b9a:	e01f      	b.n	8001bdc <BME280_Measure+0xa4>
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001b9c:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <BME280_Measure+0xb4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fd07 	bl	80015b4 <BME280_compensate_P_int64>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fc1b 	bl	80003e4 <__aeabi_ui2d>
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <BME280_Measure+0xbc>)
 8001bb4:	f7fe fdba 	bl	800072c <__aeabi_ddiv>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe ff62 	bl	8000a88 <__aeabi_d2f>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <BME280_Measure+0xb8>)
 8001bc8:	6013      	str	r3, [r2, #0]
}
 8001bca:	e007      	b.n	8001bdc <BME280_Measure+0xa4>
		Temperature = Pressure = 0;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <BME280_Measure+0xb8>)
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <BME280_Measure+0xb8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a02      	ldr	r2, [pc, #8]	@ (8001be4 <BME280_Measure+0xac>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200001f4 	.word	0x200001f4
 8001be4:	200003a8 	.word	0x200003a8
 8001be8:	40590000 	.word	0x40590000
 8001bec:	200001f8 	.word	0x200001f8
 8001bf0:	200003ac 	.word	0x200003ac
 8001bf4:	40700000 	.word	0x40700000

08001bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bfc:	b0ab      	sub	sp, #172	@ 0xac
 8001bfe:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c00:	f000 fd56 	bl	80026b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c04:	f000 f90c 	bl	8001e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c08:	f000 fa28 	bl	800205c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c0c:	f000 f944 	bl	8001e98 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c10:	f000 f970 	bl	8001ef4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001c14:	f000 f9a4 	bl	8001f60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001c18:	f000 f9cc 	bl	8001fb4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001c1c:	f000 f9f4 	bl	8002008 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_2, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001c20:	2304      	movs	r3, #4
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	2300      	movs	r3, #0
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2303      	movs	r3, #3
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	2002      	movs	r0, #2
 8001c30:	f7ff fb8e 	bl	8001350 <BME280_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 8001c34:	466b      	mov	r3, sp
 8001c36:	461e      	mov	r6, r3

		BME280_Measure();
 8001c38:	f7ff ff7e 	bl	8001b38 <BME280_Measure>
		altitude = 44330 * (1- pow((Pressure/101325), (1/5.225)));
 8001c3c:	4b72      	ldr	r3, [pc, #456]	@ (8001e08 <main+0x210>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4972      	ldr	r1, [pc, #456]	@ (8001e0c <main+0x214>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f824 	bl	8000c90 <__aeabi_fdiv>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fbec 	bl	8000428 <__aeabi_f2d>
 8001c50:	a369      	add	r3, pc, #420	@ (adr r3, 8001df8 <main+0x200>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	f008 f859 	bl	8009d0c <pow>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	f04f 0000 	mov.w	r0, #0
 8001c62:	496b      	ldr	r1, [pc, #428]	@ (8001e10 <main+0x218>)
 8001c64:	f7fe fa80 	bl	8000168 <__aeabi_dsub>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	a363      	add	r3, pc, #396	@ (adr r3, 8001e00 <main+0x208>)
 8001c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c76:	f7fe fc2f 	bl	80004d8 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f7fe ff01 	bl	8000a88 <__aeabi_d2f>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4a62      	ldr	r2, [pc, #392]	@ (8001e14 <main+0x21c>)
 8001c8a:	6013      	str	r3, [r2, #0]
		HAL_Delay (500);
 8001c8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c90:	f000 fd70 	bl	8002774 <HAL_Delay>

		static float previous_altitude = 0;  // İlk başta 0, bir kez ayarlanacak

		mpu9250_veri(59, imu_data, sizeof(imu_data));
 8001c94:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c98:	220e      	movs	r2, #14
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	203b      	movs	r0, #59	@ 0x3b
 8001c9e:	f000 fa1b 	bl	80020d8 <mpu9250_veri>
		accel_data_x = ((int16_t)imu_data[0]<<8) + imu_data[1]; //shift 8 bits ve bir sonraki byte'ı ekle
 8001ca2:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 8001cae:	4413      	add	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
		accel_data_y = ((int16_t)imu_data[2]<<8) + imu_data[3]; // y axis
 8001cb6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
		accel_data_z = ((int16_t)imu_data[4]<<8) + imu_data[5]; // z axis
 8001cca:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f897 2079 	ldrb.w	r2, [r7, #121]	@ 0x79
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

		mpu9250_veri(67, imu_data_2, sizeof(imu_data_2));
 8001cde:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ce2:	220e      	movs	r2, #14
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	2043      	movs	r0, #67	@ 0x43
 8001ce8:	f000 f9f6 	bl	80020d8 <mpu9250_veri>
		gyro_data_x = ((int16_t)imu_data_2[0]<<8) + imu_data_2[1]; //shift 8 bits ve bir sonraki byte'ı ekle
 8001cec:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
		gyro_data_y = ((int16_t)imu_data_2[2]<<8) + imu_data_2[3]; // y axis
 8001d00:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
		gyro_data_z = ((int16_t)imu_data_2[4]<<8) + imu_data_2[5]; // z axis
 8001d14:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 8001d20:	4413      	add	r3, r2
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

			char buffer[100];
			uint16_t len;


			uint8_t hedef_adres_h = 0x00;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
			uint8_t hedef_adres_l = 0x02;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
			uint8_t kanal = 0x17;
 8001d34:	2317      	movs	r3, #23
 8001d36:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91

			len = sprintf(buffer, "x: %d, y: %d, z: %d\r\n", accel_data_x, accel_data_y , accel_data_z);
 8001d3a:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	@ 0x9e
 8001d3e:	f9b7 109c 	ldrsh.w	r1, [r7, #156]	@ 0x9c
 8001d42:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	@ 0x9a
 8001d46:	4638      	mov	r0, r7
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4932      	ldr	r1, [pc, #200]	@ (8001e18 <main+0x220>)
 8001d4e:	f005 fea1 	bl	8007a94 <siprintf>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e


		        uint8_t paket[3 + len];
 8001d58:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001d5c:	1cd9      	adds	r1, r3, #3
 8001d5e:	1e4b      	subs	r3, r1, #1
 8001d60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001d64:	460a      	mov	r2, r1
 8001d66:	2300      	movs	r3, #0
 8001d68:	4614      	mov	r4, r2
 8001d6a:	461d      	mov	r5, r3
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	00eb      	lsls	r3, r5, #3
 8001d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d7a:	00e2      	lsls	r2, r4, #3
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	2300      	movs	r3, #0
 8001d80:	4690      	mov	r8, r2
 8001d82:	4699      	mov	r9, r3
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d98:	460b      	mov	r3, r1
 8001d9a:	3307      	adds	r3, #7
 8001d9c:	08db      	lsrs	r3, r3, #3
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	ebad 0d03 	sub.w	sp, sp, r3
 8001da4:	ab02      	add	r3, sp, #8
 8001da6:	3300      	adds	r3, #0
 8001da8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		        paket[0] = hedef_adres_h;
 8001dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001db0:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8001db4:	701a      	strb	r2, [r3, #0]
		        paket[1] = hedef_adres_l;
 8001db6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001dba:	f897 2092 	ldrb.w	r2, [r7, #146]	@ 0x92
 8001dbe:	705a      	strb	r2, [r3, #1]
		        paket[2] = kanal;
 8001dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001dc4:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 8001dc8:	709a      	strb	r2, [r3, #2]
		        memcpy(&paket[3], buffer, len);
 8001dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001dce:	3303      	adds	r3, #3
 8001dd0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8001dd4:	4639      	mov	r1, r7
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f005 ff4f 	bl	8007c7a <memcpy>

		        HAL_UART_Transmit(&huart3, paket, 3 + len , HAL_MAX_DELAY);
 8001ddc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001de0:	3303      	adds	r3, #3
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295
 8001de8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001dec:	480b      	ldr	r0, [pc, #44]	@ (8001e1c <main+0x224>)
 8001dee:	f004 ff60 	bl	8006cb2 <HAL_UART_Transmit>
 8001df2:	46b5      	mov	sp, r6
  {
 8001df4:	bf00      	nop
 8001df6:	e71d      	b.n	8001c34 <main+0x3c>
 8001df8:	371e9f3c 	.word	0x371e9f3c
 8001dfc:	3fc87f63 	.word	0x3fc87f63
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40e5a540 	.word	0x40e5a540
 8001e08:	200003ac 	.word	0x200003ac
 8001e0c:	47c5e680 	.word	0x47c5e680
 8001e10:	3ff00000 	.word	0x3ff00000
 8001e14:	200003b0 	.word	0x200003b0
 8001e18:	0800ab38 	.word	0x0800ab38
 8001e1c:	20000360 	.word	0x20000360

08001e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b090      	sub	sp, #64	@ 0x40
 8001e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e26:	f107 0318 	add.w	r3, r7, #24
 8001e2a:	2228      	movs	r2, #40	@ 0x28
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f005 fe95 	bl	8007b5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e46:	2301      	movs	r3, #1
 8001e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e4a:	2310      	movs	r3, #16
 8001e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e52:	f107 0318 	add.w	r3, r7, #24
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 fc32 	bl	80056c0 <HAL_RCC_OscConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001e62:	f000 f967 	bl	8002134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e66:	230f      	movs	r3, #15
 8001e68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fea0 	bl	8005bc4 <HAL_RCC_ClockConfig>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001e8a:	f000 f953 	bl	8002134 <Error_Handler>
  }
}
 8001e8e:	bf00      	nop
 8001e90:	3740      	adds	r7, #64	@ 0x40
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001e9e:	4a13      	ldr	r2, [pc, #76]	@ (8001eec <MX_I2C1_Init+0x54>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ea4:	4a12      	ldr	r2, [pc, #72]	@ (8001ef0 <MX_I2C1_Init+0x58>)
 8001ea6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001eb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ed6:	f000 ffa1 	bl	8002e1c <HAL_I2C_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ee0:	f000 f928 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000224 	.word	0x20000224
 8001eec:	40005400 	.word	0x40005400
 8001ef0:	000186a0 	.word	0x000186a0

08001ef4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001efa:	4a18      	ldr	r2, [pc, #96]	@ (8001f5c <MX_SPI1_Init+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f06:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f12:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f38:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f40:	220a      	movs	r2, #10
 8001f42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f46:	f003 ffcb 	bl	8005ee0 <HAL_SPI_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f50:	f000 f8f0 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000278 	.word	0x20000278
 8001f5c:	40013000 	.word	0x40013000

08001f60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <MX_USART1_UART_Init+0x50>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f86:	220c      	movs	r2, #12
 8001f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_USART1_UART_Init+0x4c>)
 8001f98:	f004 fe3b 	bl	8006c12 <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fa2:	f000 f8c7 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200002d0 	.word	0x200002d0
 8001fb0:	40013800 	.word	0x40013800

08001fb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	@ (8002004 <MX_USART2_UART_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fc0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001fc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	@ (8002000 <MX_USART2_UART_Init+0x4c>)
 8001fec:	f004 fe11 	bl	8006c12 <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f000 f89d 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000318 	.word	0x20000318
 8002004:	40004400 	.word	0x40004400

08002008 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 800200e:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <MX_USART3_UART_Init+0x50>)
 8002010:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 8002014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002018:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 8002040:	f004 fde7 	bl	8006c12 <HAL_UART_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800204a:	f000 f873 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000360 	.word	0x20000360
 8002058:	40004800 	.word	0x40004800

0800205c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	4b17      	ldr	r3, [pc, #92]	@ (80020d0 <MX_GPIO_Init+0x74>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	4a16      	ldr	r2, [pc, #88]	@ (80020d0 <MX_GPIO_Init+0x74>)
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	6193      	str	r3, [r2, #24]
 800207c:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <MX_GPIO_Init+0x74>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <MX_GPIO_Init+0x74>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	4a10      	ldr	r2, [pc, #64]	@ (80020d0 <MX_GPIO_Init+0x74>)
 800208e:	f043 0308 	orr.w	r3, r3, #8
 8002092:	6193      	str	r3, [r2, #24]
 8002094:	4b0e      	ldr	r3, [pc, #56]	@ (80020d0 <MX_GPIO_Init+0x74>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2110      	movs	r1, #16
 80020a4:	480b      	ldr	r0, [pc, #44]	@ (80020d4 <MX_GPIO_Init+0x78>)
 80020a6:	f000 fea1 	bl	8002dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020aa:	2310      	movs	r3, #16
 80020ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2302      	movs	r3, #2
 80020b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	4619      	mov	r1, r3
 80020c0:	4804      	ldr	r0, [pc, #16]	@ (80020d4 <MX_GPIO_Init+0x78>)
 80020c2:	f000 fd0f 	bl	8002ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40010800 	.word	0x40010800

080020d8 <mpu9250_veri>:

/* USER CODE BEGIN 4 */
void mpu9250_veri(uint8_t reg, uint8_t *data, uint8_t data_length){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
 80020e4:	4613      	mov	r3, r2
 80020e6:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buffer[1];
	tx_buffer[0] = 0x80 | reg;  // Okuma ve adres
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2110      	movs	r1, #16
 80020f6:	480d      	ldr	r0, [pc, #52]	@ (800212c <mpu9250_veri+0x54>)
 80020f8:	f000 fe78 	bl	8002dec <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, tx_buffer, 1, 100);               // İlk olarak register adresini gönder
 80020fc:	f107 010c 	add.w	r1, r7, #12
 8002100:	2364      	movs	r3, #100	@ 0x64
 8002102:	2201      	movs	r2, #1
 8002104:	480a      	ldr	r0, [pc, #40]	@ (8002130 <mpu9250_veri+0x58>)
 8002106:	f003 ff6f 	bl	8005fe8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, data_length, 100);           // Ardından veri oku
 800210a:	79bb      	ldrb	r3, [r7, #6]
 800210c:	b29a      	uxth	r2, r3
 800210e:	2364      	movs	r3, #100	@ 0x64
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	4807      	ldr	r0, [pc, #28]	@ (8002130 <mpu9250_veri+0x58>)
 8002114:	f004 f8ac 	bl	8006270 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8002118:	2201      	movs	r2, #1
 800211a:	2110      	movs	r1, #16
 800211c:	4803      	ldr	r0, [pc, #12]	@ (800212c <mpu9250_veri+0x54>)
 800211e:	f000 fe65 	bl	8002dec <HAL_GPIO_WritePin>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40010800 	.word	0x40010800
 8002130:	20000278 	.word	0x20000278

08002134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002138:	b672      	cpsid	i
}
 800213a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800213c:	bf00      	nop
 800213e:	e7fd      	b.n	800213c <Error_Handler+0x8>

08002140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002146:	4b15      	ldr	r3, [pc, #84]	@ (800219c <HAL_MspInit+0x5c>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	4a14      	ldr	r2, [pc, #80]	@ (800219c <HAL_MspInit+0x5c>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6193      	str	r3, [r2, #24]
 8002152:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_MspInit+0x5c>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <HAL_MspInit+0x5c>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4a0e      	ldr	r2, [pc, #56]	@ (800219c <HAL_MspInit+0x5c>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002168:	61d3      	str	r3, [r2, #28]
 800216a:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <HAL_MspInit+0x5c>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002176:	4b0a      	ldr	r3, [pc, #40]	@ (80021a0 <HAL_MspInit+0x60>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	4a04      	ldr	r2, [pc, #16]	@ (80021a0 <HAL_MspInit+0x60>)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	40021000 	.word	0x40021000
 80021a0:	40010000 	.word	0x40010000

080021a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a19      	ldr	r2, [pc, #100]	@ (8002224 <HAL_I2C_MspInit+0x80>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d12b      	bne.n	800221c <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c4:	4b18      	ldr	r3, [pc, #96]	@ (8002228 <HAL_I2C_MspInit+0x84>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <HAL_I2C_MspInit+0x84>)
 80021ca:	f043 0308 	orr.w	r3, r3, #8
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <HAL_I2C_MspInit+0x84>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021dc:	23c0      	movs	r3, #192	@ 0xc0
 80021de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e0:	2312      	movs	r3, #18
 80021e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	4619      	mov	r1, r3
 80021ee:	480f      	ldr	r0, [pc, #60]	@ (800222c <HAL_I2C_MspInit+0x88>)
 80021f0:	f000 fc78 	bl	8002ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <HAL_I2C_MspInit+0x84>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002228 <HAL_I2C_MspInit+0x84>)
 80021fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021fe:	61d3      	str	r3, [r2, #28]
 8002200:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <HAL_I2C_MspInit+0x84>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2100      	movs	r1, #0
 8002210:	201f      	movs	r0, #31
 8002212:	f000 fbaa 	bl	800296a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002216:	201f      	movs	r0, #31
 8002218:	f000 fbc3 	bl	80029a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800221c:	bf00      	nop
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40005400 	.word	0x40005400
 8002228:	40021000 	.word	0x40021000
 800222c:	40010c00 	.word	0x40010c00

08002230 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1f      	ldr	r2, [pc, #124]	@ (80022c8 <HAL_SPI_MspInit+0x98>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d137      	bne.n	80022c0 <HAL_SPI_MspInit+0x90>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002250:	4b1e      	ldr	r3, [pc, #120]	@ (80022cc <HAL_SPI_MspInit+0x9c>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	4a1d      	ldr	r2, [pc, #116]	@ (80022cc <HAL_SPI_MspInit+0x9c>)
 8002256:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800225a:	6193      	str	r3, [r2, #24]
 800225c:	4b1b      	ldr	r3, [pc, #108]	@ (80022cc <HAL_SPI_MspInit+0x9c>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002268:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <HAL_SPI_MspInit+0x9c>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a17      	ldr	r2, [pc, #92]	@ (80022cc <HAL_SPI_MspInit+0x9c>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <HAL_SPI_MspInit+0x9c>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002280:	23a0      	movs	r3, #160	@ 0xa0
 8002282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002288:	2303      	movs	r3, #3
 800228a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	4619      	mov	r1, r3
 8002292:	480f      	ldr	r0, [pc, #60]	@ (80022d0 <HAL_SPI_MspInit+0xa0>)
 8002294:	f000 fc26 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002298:	2340      	movs	r3, #64	@ 0x40
 800229a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	4619      	mov	r1, r3
 80022aa:	4809      	ldr	r0, [pc, #36]	@ (80022d0 <HAL_SPI_MspInit+0xa0>)
 80022ac:	f000 fc1a 	bl	8002ae4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	2023      	movs	r0, #35	@ 0x23
 80022b6:	f000 fb58 	bl	800296a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80022ba:	2023      	movs	r0, #35	@ 0x23
 80022bc:	f000 fb71 	bl	80029a2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80022c0:	bf00      	nop
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40013000 	.word	0x40013000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010800 	.word	0x40010800

080022d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	@ 0x30
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0320 	add.w	r3, r7, #32
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a53      	ldr	r2, [pc, #332]	@ (800243c <HAL_UART_MspInit+0x168>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d132      	bne.n	800235a <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022f4:	4b52      	ldr	r3, [pc, #328]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a51      	ldr	r2, [pc, #324]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 80022fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b4f      	ldr	r3, [pc, #316]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230c:	4b4c      	ldr	r3, [pc, #304]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a4b      	ldr	r2, [pc, #300]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b49      	ldr	r3, [pc, #292]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002324:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232e:	2303      	movs	r3, #3
 8002330:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002332:	f107 0320 	add.w	r3, r7, #32
 8002336:	4619      	mov	r1, r3
 8002338:	4842      	ldr	r0, [pc, #264]	@ (8002444 <HAL_UART_MspInit+0x170>)
 800233a:	f000 fbd3 	bl	8002ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800233e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	f107 0320 	add.w	r3, r7, #32
 8002350:	4619      	mov	r1, r3
 8002352:	483c      	ldr	r0, [pc, #240]	@ (8002444 <HAL_UART_MspInit+0x170>)
 8002354:	f000 fbc6 	bl	8002ae4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002358:	e06c      	b.n	8002434 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a3a      	ldr	r2, [pc, #232]	@ (8002448 <HAL_UART_MspInit+0x174>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d130      	bne.n	80023c6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002364:	4b36      	ldr	r3, [pc, #216]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	4a35      	ldr	r2, [pc, #212]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 800236a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800236e:	61d3      	str	r3, [r2, #28]
 8002370:	4b33      	ldr	r3, [pc, #204]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237c:	4b30      	ldr	r3, [pc, #192]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4a2f      	ldr	r2, [pc, #188]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 8002382:	f043 0304 	orr.w	r3, r3, #4
 8002386:	6193      	str	r3, [r2, #24]
 8002388:	4b2d      	ldr	r3, [pc, #180]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002394:	2304      	movs	r3, #4
 8002396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	f107 0320 	add.w	r3, r7, #32
 80023a4:	4619      	mov	r1, r3
 80023a6:	4827      	ldr	r0, [pc, #156]	@ (8002444 <HAL_UART_MspInit+0x170>)
 80023a8:	f000 fb9c 	bl	8002ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023ac:	2308      	movs	r3, #8
 80023ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	f107 0320 	add.w	r3, r7, #32
 80023bc:	4619      	mov	r1, r3
 80023be:	4821      	ldr	r0, [pc, #132]	@ (8002444 <HAL_UART_MspInit+0x170>)
 80023c0:	f000 fb90 	bl	8002ae4 <HAL_GPIO_Init>
}
 80023c4:	e036      	b.n	8002434 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a20      	ldr	r2, [pc, #128]	@ (800244c <HAL_UART_MspInit+0x178>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d131      	bne.n	8002434 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 80023d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023da:	61d3      	str	r3, [r2, #28]
 80023dc:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e8:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	4a14      	ldr	r2, [pc, #80]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 80023ee:	f043 0308 	orr.w	r3, r3, #8
 80023f2:	6193      	str	r3, [r2, #24]
 80023f4:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <HAL_UART_MspInit+0x16c>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002400:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240e:	f107 0320 	add.w	r3, r7, #32
 8002412:	4619      	mov	r1, r3
 8002414:	480e      	ldr	r0, [pc, #56]	@ (8002450 <HAL_UART_MspInit+0x17c>)
 8002416:	f000 fb65 	bl	8002ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800241a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800241e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002420:	2300      	movs	r3, #0
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002428:	f107 0320 	add.w	r3, r7, #32
 800242c:	4619      	mov	r1, r3
 800242e:	4808      	ldr	r0, [pc, #32]	@ (8002450 <HAL_UART_MspInit+0x17c>)
 8002430:	f000 fb58 	bl	8002ae4 <HAL_GPIO_Init>
}
 8002434:	bf00      	nop
 8002436:	3730      	adds	r7, #48	@ 0x30
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40013800 	.word	0x40013800
 8002440:	40021000 	.word	0x40021000
 8002444:	40010800 	.word	0x40010800
 8002448:	40004400 	.word	0x40004400
 800244c:	40004800 	.word	0x40004800
 8002450:	40010c00 	.word	0x40010c00

08002454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <NMI_Handler+0x4>

0800245c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <MemManage_Handler+0x4>

0800246c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <UsageFault_Handler+0x4>

0800247c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a4:	f000 f94a 	bl	800273c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80024b0:	4802      	ldr	r0, [pc, #8]	@ (80024bc <I2C1_EV_IRQHandler+0x10>)
 80024b2:	f001 f979 	bl	80037a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000224 	.word	0x20000224

080024c0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80024c4:	4802      	ldr	r0, [pc, #8]	@ (80024d0 <SPI1_IRQHandler+0x10>)
 80024c6:	f004 f995 	bl	80067f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000278 	.word	0x20000278

080024d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return 1;
 80024d8:	2301      	movs	r3, #1
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <_kill>:

int _kill(int pid, int sig)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024ec:	f005 fb8a 	bl	8007c04 <__errno>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2216      	movs	r2, #22
 80024f4:	601a      	str	r2, [r3, #0]
  return -1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_exit>:

void _exit (int status)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800250a:	f04f 31ff 	mov.w	r1, #4294967295
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffe7 	bl	80024e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <_exit+0x12>

08002518 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	e00a      	b.n	8002540 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800252a:	f3af 8000 	nop.w
 800252e:	4601      	mov	r1, r0
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	60ba      	str	r2, [r7, #8]
 8002536:	b2ca      	uxtb	r2, r1
 8002538:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	3301      	adds	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	dbf0      	blt.n	800252a <_read+0x12>
  }

  return len;
 8002548:	687b      	ldr	r3, [r7, #4]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e009      	b.n	8002578 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	60ba      	str	r2, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	dbf1      	blt.n	8002564 <_write+0x12>
  }
  return len;
 8002580:	687b      	ldr	r3, [r7, #4]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_close>:

int _close(int file)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025b0:	605a      	str	r2, [r3, #4]
  return 0;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <_isatty>:

int _isatty(int file)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
	...

080025ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f4:	4a14      	ldr	r2, [pc, #80]	@ (8002648 <_sbrk+0x5c>)
 80025f6:	4b15      	ldr	r3, [pc, #84]	@ (800264c <_sbrk+0x60>)
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002600:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002608:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <_sbrk+0x64>)
 800260a:	4a12      	ldr	r2, [pc, #72]	@ (8002654 <_sbrk+0x68>)
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260e:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	429a      	cmp	r2, r3
 800261a:	d207      	bcs.n	800262c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800261c:	f005 faf2 	bl	8007c04 <__errno>
 8002620:	4603      	mov	r3, r0
 8002622:	220c      	movs	r2, #12
 8002624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	e009      	b.n	8002640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800262c:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002632:	4b07      	ldr	r3, [pc, #28]	@ (8002650 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	4a05      	ldr	r2, [pc, #20]	@ (8002650 <_sbrk+0x64>)
 800263c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20005000 	.word	0x20005000
 800264c:	00000400 	.word	0x00000400
 8002650:	200003b4 	.word	0x200003b4
 8002654:	20000508 	.word	0x20000508

08002658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002664:	f7ff fff8 	bl	8002658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002668:	480b      	ldr	r0, [pc, #44]	@ (8002698 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800266a:	490c      	ldr	r1, [pc, #48]	@ (800269c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800266c:	4a0c      	ldr	r2, [pc, #48]	@ (80026a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800266e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002670:	e002      	b.n	8002678 <LoopCopyDataInit>

08002672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002676:	3304      	adds	r3, #4

08002678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800267c:	d3f9      	bcc.n	8002672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800267e:	4a09      	ldr	r2, [pc, #36]	@ (80026a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002680:	4c09      	ldr	r4, [pc, #36]	@ (80026a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002684:	e001      	b.n	800268a <LoopFillZerobss>

08002686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002688:	3204      	adds	r2, #4

0800268a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800268c:	d3fb      	bcc.n	8002686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800268e:	f005 fabf 	bl	8007c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002692:	f7ff fab1 	bl	8001bf8 <main>
  bx lr
 8002696:	4770      	bx	lr
  ldr r0, =_sdata
 8002698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800269c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80026a0:	0800af40 	.word	0x0800af40
  ldr r2, =_sbss
 80026a4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80026a8:	20000508 	.word	0x20000508

080026ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026ac:	e7fe      	b.n	80026ac <ADC1_2_IRQHandler>
	...

080026b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b4:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <HAL_Init+0x28>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a07      	ldr	r2, [pc, #28]	@ (80026d8 <HAL_Init+0x28>)
 80026ba:	f043 0310 	orr.w	r3, r3, #16
 80026be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c0:	2003      	movs	r0, #3
 80026c2:	f000 f947 	bl	8002954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026c6:	200f      	movs	r0, #15
 80026c8:	f000 f808 	bl	80026dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026cc:	f7ff fd38 	bl	8002140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40022000 	.word	0x40022000

080026dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e4:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <HAL_InitTick+0x54>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b12      	ldr	r3, [pc, #72]	@ (8002734 <HAL_InitTick+0x58>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f95f 	bl	80029be <HAL_SYSTICK_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e00e      	b.n	8002728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b0f      	cmp	r3, #15
 800270e:	d80a      	bhi.n	8002726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002710:	2200      	movs	r2, #0
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	f000 f927 	bl	800296a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800271c:	4a06      	ldr	r2, [pc, #24]	@ (8002738 <HAL_InitTick+0x5c>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e000      	b.n	8002728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000000 	.word	0x20000000
 8002734:	20000008 	.word	0x20000008
 8002738:	20000004 	.word	0x20000004

0800273c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_IncTick+0x1c>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4b05      	ldr	r3, [pc, #20]	@ (800275c <HAL_IncTick+0x20>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4413      	add	r3, r2
 800274c:	4a03      	ldr	r2, [pc, #12]	@ (800275c <HAL_IncTick+0x20>)
 800274e:	6013      	str	r3, [r2, #0]
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	20000008 	.word	0x20000008
 800275c:	200003b8 	.word	0x200003b8

08002760 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return uwTick;
 8002764:	4b02      	ldr	r3, [pc, #8]	@ (8002770 <HAL_GetTick+0x10>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	200003b8 	.word	0x200003b8

08002774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800277c:	f7ff fff0 	bl	8002760 <HAL_GetTick>
 8002780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d005      	beq.n	800279a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_Delay+0x44>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800279a:	bf00      	nop
 800279c:	f7ff ffe0 	bl	8002760 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d8f7      	bhi.n	800279c <HAL_Delay+0x28>
  {
  }
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000008 	.word	0x20000008

080027bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027d8:	4013      	ands	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ee:	4a04      	ldr	r2, [pc, #16]	@ (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	60d3      	str	r3, [r2, #12]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002808:	4b04      	ldr	r3, [pc, #16]	@ (800281c <__NVIC_GetPriorityGrouping+0x18>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	f003 0307 	and.w	r3, r3, #7
}
 8002812:	4618      	mov	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	2b00      	cmp	r3, #0
 8002830:	db0b      	blt.n	800284a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	f003 021f 	and.w	r2, r3, #31
 8002838:	4906      	ldr	r1, [pc, #24]	@ (8002854 <__NVIC_EnableIRQ+0x34>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	2001      	movs	r0, #1
 8002842:	fa00 f202 	lsl.w	r2, r0, r2
 8002846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100

08002858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	6039      	str	r1, [r7, #0]
 8002862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	2b00      	cmp	r3, #0
 800286a:	db0a      	blt.n	8002882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	490c      	ldr	r1, [pc, #48]	@ (80028a4 <__NVIC_SetPriority+0x4c>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	440b      	add	r3, r1
 800287c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002880:	e00a      	b.n	8002898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4908      	ldr	r1, [pc, #32]	@ (80028a8 <__NVIC_SetPriority+0x50>)
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	3b04      	subs	r3, #4
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	440b      	add	r3, r1
 8002896:	761a      	strb	r2, [r3, #24]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e100 	.word	0xe000e100
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	@ 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f1c3 0307 	rsb	r3, r3, #7
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	bf28      	it	cs
 80028ca:	2304      	movcs	r3, #4
 80028cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3304      	adds	r3, #4
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d902      	bls.n	80028dc <NVIC_EncodePriority+0x30>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3b03      	subs	r3, #3
 80028da:	e000      	b.n	80028de <NVIC_EncodePriority+0x32>
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	f04f 32ff 	mov.w	r2, #4294967295
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43da      	mvns	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	401a      	ands	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f4:	f04f 31ff 	mov.w	r1, #4294967295
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	43d9      	mvns	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	4313      	orrs	r3, r2
         );
}
 8002906:	4618      	mov	r0, r3
 8002908:	3724      	adds	r7, #36	@ 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002920:	d301      	bcc.n	8002926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002922:	2301      	movs	r3, #1
 8002924:	e00f      	b.n	8002946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002926:	4a0a      	ldr	r2, [pc, #40]	@ (8002950 <SysTick_Config+0x40>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292e:	210f      	movs	r1, #15
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f7ff ff90 	bl	8002858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002938:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <SysTick_Config+0x40>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293e:	4b04      	ldr	r3, [pc, #16]	@ (8002950 <SysTick_Config+0x40>)
 8002940:	2207      	movs	r2, #7
 8002942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	e000e010 	.word	0xe000e010

08002954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ff2d 	bl	80027bc <__NVIC_SetPriorityGrouping>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800297c:	f7ff ff42 	bl	8002804 <__NVIC_GetPriorityGrouping>
 8002980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	6978      	ldr	r0, [r7, #20]
 8002988:	f7ff ff90 	bl	80028ac <NVIC_EncodePriority>
 800298c:	4602      	mov	r2, r0
 800298e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff5f 	bl	8002858 <__NVIC_SetPriority>
}
 800299a:	bf00      	nop
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff35 	bl	8002820 <__NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffa2 	bl	8002910 <SysTick_Config>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d005      	beq.n	80029fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2204      	movs	r2, #4
 80029f4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e051      	b.n	8002aa0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 020e 	bic.w	r2, r2, #14
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a22      	ldr	r2, [pc, #136]	@ (8002aac <HAL_DMA_Abort_IT+0xd4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d029      	beq.n	8002a7a <HAL_DMA_Abort_IT+0xa2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a21      	ldr	r2, [pc, #132]	@ (8002ab0 <HAL_DMA_Abort_IT+0xd8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x9e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab4 <HAL_DMA_Abort_IT+0xdc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01a      	beq.n	8002a70 <HAL_DMA_Abort_IT+0x98>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab8 <HAL_DMA_Abort_IT+0xe0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d012      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x92>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1c      	ldr	r2, [pc, #112]	@ (8002abc <HAL_DMA_Abort_IT+0xe4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00a      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x8c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac0 <HAL_DMA_Abort_IT+0xe8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d102      	bne.n	8002a5e <HAL_DMA_Abort_IT+0x86>
 8002a58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a5c:	e00e      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a62:	e00b      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a68:	e008      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a6e:	e005      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a74:	e002      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a76:	2310      	movs	r3, #16
 8002a78:	e000      	b.n	8002a7c <HAL_DMA_Abort_IT+0xa4>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	4a11      	ldr	r2, [pc, #68]	@ (8002ac4 <HAL_DMA_Abort_IT+0xec>)
 8002a7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
    } 
  }
  return status;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40020008 	.word	0x40020008
 8002ab0:	4002001c 	.word	0x4002001c
 8002ab4:	40020030 	.word	0x40020030
 8002ab8:	40020044 	.word	0x40020044
 8002abc:	40020058 	.word	0x40020058
 8002ac0:	4002006c 	.word	0x4002006c
 8002ac4:	40020000 	.word	0x40020000

08002ac8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ad6:	b2db      	uxtb	r3, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b08b      	sub	sp, #44	@ 0x2c
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aee:	2300      	movs	r3, #0
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002af2:	2300      	movs	r3, #0
 8002af4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af6:	e169      	b.n	8002dcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002af8:	2201      	movs	r2, #1
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f040 8158 	bne.w	8002dc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4a9a      	ldr	r2, [pc, #616]	@ (8002d84 <HAL_GPIO_Init+0x2a0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d05e      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b20:	4a98      	ldr	r2, [pc, #608]	@ (8002d84 <HAL_GPIO_Init+0x2a0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d875      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b26:	4a98      	ldr	r2, [pc, #608]	@ (8002d88 <HAL_GPIO_Init+0x2a4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d058      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b2c:	4a96      	ldr	r2, [pc, #600]	@ (8002d88 <HAL_GPIO_Init+0x2a4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d86f      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b32:	4a96      	ldr	r2, [pc, #600]	@ (8002d8c <HAL_GPIO_Init+0x2a8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d052      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b38:	4a94      	ldr	r2, [pc, #592]	@ (8002d8c <HAL_GPIO_Init+0x2a8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d869      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b3e:	4a94      	ldr	r2, [pc, #592]	@ (8002d90 <HAL_GPIO_Init+0x2ac>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04c      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b44:	4a92      	ldr	r2, [pc, #584]	@ (8002d90 <HAL_GPIO_Init+0x2ac>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d863      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b4a:	4a92      	ldr	r2, [pc, #584]	@ (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d046      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
 8002b50:	4a90      	ldr	r2, [pc, #576]	@ (8002d94 <HAL_GPIO_Init+0x2b0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d85d      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b56:	2b12      	cmp	r3, #18
 8002b58:	d82a      	bhi.n	8002bb0 <HAL_GPIO_Init+0xcc>
 8002b5a:	2b12      	cmp	r3, #18
 8002b5c:	d859      	bhi.n	8002c12 <HAL_GPIO_Init+0x12e>
 8002b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b64 <HAL_GPIO_Init+0x80>)
 8002b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b64:	08002bdf 	.word	0x08002bdf
 8002b68:	08002bb9 	.word	0x08002bb9
 8002b6c:	08002bcb 	.word	0x08002bcb
 8002b70:	08002c0d 	.word	0x08002c0d
 8002b74:	08002c13 	.word	0x08002c13
 8002b78:	08002c13 	.word	0x08002c13
 8002b7c:	08002c13 	.word	0x08002c13
 8002b80:	08002c13 	.word	0x08002c13
 8002b84:	08002c13 	.word	0x08002c13
 8002b88:	08002c13 	.word	0x08002c13
 8002b8c:	08002c13 	.word	0x08002c13
 8002b90:	08002c13 	.word	0x08002c13
 8002b94:	08002c13 	.word	0x08002c13
 8002b98:	08002c13 	.word	0x08002c13
 8002b9c:	08002c13 	.word	0x08002c13
 8002ba0:	08002c13 	.word	0x08002c13
 8002ba4:	08002c13 	.word	0x08002c13
 8002ba8:	08002bc1 	.word	0x08002bc1
 8002bac:	08002bd5 	.word	0x08002bd5
 8002bb0:	4a79      	ldr	r2, [pc, #484]	@ (8002d98 <HAL_GPIO_Init+0x2b4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bb6:	e02c      	b.n	8002c12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	623b      	str	r3, [r7, #32]
          break;
 8002bbe:	e029      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	623b      	str	r3, [r7, #32]
          break;
 8002bc8:	e024      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	3308      	adds	r3, #8
 8002bd0:	623b      	str	r3, [r7, #32]
          break;
 8002bd2:	e01f      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	623b      	str	r3, [r7, #32]
          break;
 8002bdc:	e01a      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002be6:	2304      	movs	r3, #4
 8002be8:	623b      	str	r3, [r7, #32]
          break;
 8002bea:	e013      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d105      	bne.n	8002c00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	611a      	str	r2, [r3, #16]
          break;
 8002bfe:	e009      	b.n	8002c14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c00:	2308      	movs	r3, #8
 8002c02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	615a      	str	r2, [r3, #20]
          break;
 8002c0a:	e003      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	623b      	str	r3, [r7, #32]
          break;
 8002c10:	e000      	b.n	8002c14 <HAL_GPIO_Init+0x130>
          break;
 8002c12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2bff      	cmp	r3, #255	@ 0xff
 8002c18:	d801      	bhi.n	8002c1e <HAL_GPIO_Init+0x13a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	e001      	b.n	8002c22 <HAL_GPIO_Init+0x13e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2bff      	cmp	r3, #255	@ 0xff
 8002c28:	d802      	bhi.n	8002c30 <HAL_GPIO_Init+0x14c>
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	e002      	b.n	8002c36 <HAL_GPIO_Init+0x152>
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	3b08      	subs	r3, #8
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	210f      	movs	r1, #15
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	401a      	ands	r2, r3
 8002c48:	6a39      	ldr	r1, [r7, #32]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	431a      	orrs	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80b1 	beq.w	8002dc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c64:	4b4d      	ldr	r3, [pc, #308]	@ (8002d9c <HAL_GPIO_Init+0x2b8>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	4a4c      	ldr	r2, [pc, #304]	@ (8002d9c <HAL_GPIO_Init+0x2b8>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6193      	str	r3, [r2, #24]
 8002c70:	4b4a      	ldr	r3, [pc, #296]	@ (8002d9c <HAL_GPIO_Init+0x2b8>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c7c:	4a48      	ldr	r2, [pc, #288]	@ (8002da0 <HAL_GPIO_Init+0x2bc>)
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	3302      	adds	r3, #2
 8002c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	220f      	movs	r2, #15
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a40      	ldr	r2, [pc, #256]	@ (8002da4 <HAL_GPIO_Init+0x2c0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_GPIO_Init+0x1ec>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3f      	ldr	r2, [pc, #252]	@ (8002da8 <HAL_GPIO_Init+0x2c4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00d      	beq.n	8002ccc <HAL_GPIO_Init+0x1e8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8002dac <HAL_GPIO_Init+0x2c8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <HAL_GPIO_Init+0x1e4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3d      	ldr	r2, [pc, #244]	@ (8002db0 <HAL_GPIO_Init+0x2cc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_GPIO_Init+0x1e0>
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e006      	b.n	8002cd2 <HAL_GPIO_Init+0x1ee>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e004      	b.n	8002cd2 <HAL_GPIO_Init+0x1ee>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e002      	b.n	8002cd2 <HAL_GPIO_Init+0x1ee>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_GPIO_Init+0x1ee>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd4:	f002 0203 	and.w	r2, r2, #3
 8002cd8:	0092      	lsls	r2, r2, #2
 8002cda:	4093      	lsls	r3, r2
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ce2:	492f      	ldr	r1, [pc, #188]	@ (8002da0 <HAL_GPIO_Init+0x2bc>)
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	089b      	lsrs	r3, r3, #2
 8002ce8:	3302      	adds	r3, #2
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	492c      	ldr	r1, [pc, #176]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	4928      	ldr	r1, [pc, #160]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d24:	4b23      	ldr	r3, [pc, #140]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	4922      	ldr	r1, [pc, #136]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60cb      	str	r3, [r1, #12]
 8002d30:	e006      	b.n	8002d40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d32:	4b20      	ldr	r3, [pc, #128]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	491e      	ldr	r1, [pc, #120]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d4c:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	4918      	ldr	r1, [pc, #96]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
 8002d58:	e006      	b.n	8002d68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d5a:	4b16      	ldr	r3, [pc, #88]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	4914      	ldr	r1, [pc, #80]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d021      	beq.n	8002db8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d74:	4b0f      	ldr	r3, [pc, #60]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	490e      	ldr	r1, [pc, #56]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	e021      	b.n	8002dc6 <HAL_GPIO_Init+0x2e2>
 8002d82:	bf00      	nop
 8002d84:	10320000 	.word	0x10320000
 8002d88:	10310000 	.word	0x10310000
 8002d8c:	10220000 	.word	0x10220000
 8002d90:	10210000 	.word	0x10210000
 8002d94:	10120000 	.word	0x10120000
 8002d98:	10110000 	.word	0x10110000
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40010800 	.word	0x40010800
 8002da8:	40010c00 	.word	0x40010c00
 8002dac:	40011000 	.word	0x40011000
 8002db0:	40011400 	.word	0x40011400
 8002db4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	4909      	ldr	r1, [pc, #36]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	3301      	adds	r3, #1
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f47f ae8e 	bne.w	8002af8 <HAL_GPIO_Init+0x14>
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	372c      	adds	r7, #44	@ 0x2c
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	40010400 	.word	0x40010400

08002dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dfc:	787b      	ldrb	r3, [r7, #1]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e08:	e003      	b.n	8002e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	041a      	lsls	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e12b      	b.n	8003086 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff f9ae 	bl	80021a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	@ 0x24
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e80:	f002 ffe8 	bl	8005e54 <HAL_RCC_GetPCLK1Freq>
 8002e84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4a81      	ldr	r2, [pc, #516]	@ (8003090 <HAL_I2C_Init+0x274>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d807      	bhi.n	8002ea0 <HAL_I2C_Init+0x84>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4a80      	ldr	r2, [pc, #512]	@ (8003094 <HAL_I2C_Init+0x278>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	bf94      	ite	ls
 8002e98:	2301      	movls	r3, #1
 8002e9a:	2300      	movhi	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e006      	b.n	8002eae <HAL_I2C_Init+0x92>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a7d      	ldr	r2, [pc, #500]	@ (8003098 <HAL_I2C_Init+0x27c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	bf94      	ite	ls
 8002ea8:	2301      	movls	r3, #1
 8002eaa:	2300      	movhi	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0e7      	b.n	8003086 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a78      	ldr	r2, [pc, #480]	@ (800309c <HAL_I2C_Init+0x280>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0c9b      	lsrs	r3, r3, #18
 8002ec0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a6a      	ldr	r2, [pc, #424]	@ (8003090 <HAL_I2C_Init+0x274>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d802      	bhi.n	8002ef0 <HAL_I2C_Init+0xd4>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	3301      	adds	r3, #1
 8002eee:	e009      	b.n	8002f04 <HAL_I2C_Init+0xe8>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	4a69      	ldr	r2, [pc, #420]	@ (80030a0 <HAL_I2C_Init+0x284>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	3301      	adds	r3, #1
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	495c      	ldr	r1, [pc, #368]	@ (8003090 <HAL_I2C_Init+0x274>)
 8002f20:	428b      	cmp	r3, r1
 8002f22:	d819      	bhi.n	8002f58 <HAL_I2C_Init+0x13c>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1e59      	subs	r1, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f32:	1c59      	adds	r1, r3, #1
 8002f34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f38:	400b      	ands	r3, r1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_I2C_Init+0x138>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1e59      	subs	r1, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f52:	e051      	b.n	8002ff8 <HAL_I2C_Init+0x1dc>
 8002f54:	2304      	movs	r3, #4
 8002f56:	e04f      	b.n	8002ff8 <HAL_I2C_Init+0x1dc>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d111      	bne.n	8002f84 <HAL_I2C_Init+0x168>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1e58      	subs	r0, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	440b      	add	r3, r1
 8002f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf0c      	ite	eq
 8002f7c:	2301      	moveq	r3, #1
 8002f7e:	2300      	movne	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e012      	b.n	8002faa <HAL_I2C_Init+0x18e>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e58      	subs	r0, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	0099      	lsls	r1, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Init+0x196>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e022      	b.n	8002ff8 <HAL_I2C_Init+0x1dc>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_I2C_Init+0x1bc>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1e58      	subs	r0, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	440b      	add	r3, r1
 8002fc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fcc:	3301      	adds	r3, #1
 8002fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fd6:	e00f      	b.n	8002ff8 <HAL_I2C_Init+0x1dc>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1e58      	subs	r0, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	0099      	lsls	r1, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	6809      	ldr	r1, [r1, #0]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003026:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6911      	ldr	r1, [r2, #16]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68d2      	ldr	r2, [r2, #12]
 8003032:	4311      	orrs	r1, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	430b      	orrs	r3, r1
 800303a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	000186a0 	.word	0x000186a0
 8003094:	001e847f 	.word	0x001e847f
 8003098:	003d08ff 	.word	0x003d08ff
 800309c:	431bde83 	.word	0x431bde83
 80030a0:	10624dd3 	.word	0x10624dd3

080030a4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b6:	2b80      	cmp	r3, #128	@ 0x80
 80030b8:	d103      	bne.n	80030c2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
  }
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	817b      	strh	r3, [r7, #10]
 80030de:	460b      	mov	r3, r1
 80030e0:	813b      	strh	r3, [r7, #8]
 80030e2:	4613      	mov	r3, r2
 80030e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e6:	f7ff fb3b 	bl	8002760 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	f040 80d9 	bne.w	80032ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2319      	movs	r3, #25
 8003100:	2201      	movs	r2, #1
 8003102:	496d      	ldr	r1, [pc, #436]	@ (80032b8 <HAL_I2C_Mem_Write+0x1ec>)
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f002 f859 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
 8003112:	e0cc      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_I2C_Mem_Write+0x56>
 800311e:	2302      	movs	r3, #2
 8003120:	e0c5      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d007      	beq.n	8003148 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003156:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2221      	movs	r2, #33	@ 0x21
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2240      	movs	r2, #64	@ 0x40
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a3a      	ldr	r2, [r7, #32]
 8003172:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003178:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a4d      	ldr	r2, [pc, #308]	@ (80032bc <HAL_I2C_Mem_Write+0x1f0>)
 8003188:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800318a:	88f8      	ldrh	r0, [r7, #6]
 800318c:	893a      	ldrh	r2, [r7, #8]
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	4603      	mov	r3, r0
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f001 fde8 	bl	8004d70 <I2C_RequestMemoryWrite>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d052      	beq.n	800324c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e081      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f002 f91e 	bl	80053f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00d      	beq.n	80031d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d107      	bne.n	80031d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e06b      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	781a      	ldrb	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b04      	cmp	r3, #4
 8003212:	d11b      	bne.n	800324c <HAL_I2C_Mem_Write+0x180>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003218:	2b00      	cmp	r3, #0
 800321a:	d017      	beq.n	800324c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003236:	3b01      	subs	r3, #1
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1aa      	bne.n	80031aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f002 f911 	bl	8005480 <I2C_WaitOnBTFFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00d      	beq.n	8003280 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	2b04      	cmp	r3, #4
 800326a:	d107      	bne.n	800327c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800327a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e016      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800328e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	00100002 	.word	0x00100002
 80032bc:	ffff0000 	.word	0xffff0000

080032c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	@ 0x30
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	4608      	mov	r0, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	461a      	mov	r2, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	817b      	strh	r3, [r7, #10]
 80032d2:	460b      	mov	r3, r1
 80032d4:	813b      	strh	r3, [r7, #8]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032de:	f7ff fa3f 	bl	8002760 <HAL_GetTick>
 80032e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	f040 8250 	bne.w	8003792 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	2319      	movs	r3, #25
 80032f8:	2201      	movs	r2, #1
 80032fa:	4982      	ldr	r1, [pc, #520]	@ (8003504 <HAL_I2C_Mem_Read+0x244>)
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f001 ff5d 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003308:	2302      	movs	r3, #2
 800330a:	e243      	b.n	8003794 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_I2C_Mem_Read+0x5a>
 8003316:	2302      	movs	r3, #2
 8003318:	e23c      	b.n	8003794 <HAL_I2C_Mem_Read+0x4d4>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d007      	beq.n	8003340 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800334e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2222      	movs	r2, #34	@ 0x22
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2240      	movs	r2, #64	@ 0x40
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800336a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003370:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a62      	ldr	r2, [pc, #392]	@ (8003508 <HAL_I2C_Mem_Read+0x248>)
 8003380:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003382:	88f8      	ldrh	r0, [r7, #6]
 8003384:	893a      	ldrh	r2, [r7, #8]
 8003386:	8979      	ldrh	r1, [r7, #10]
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	9301      	str	r3, [sp, #4]
 800338c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	4603      	mov	r3, r0
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f001 fd82 	bl	8004e9c <I2C_RequestMemoryRead>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e1f8      	b.n	8003794 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d113      	bne.n	80033d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e1cc      	b.n	800376c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d11e      	bne.n	8003418 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033ea:	b672      	cpsid	i
}
 80033ec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ee:	2300      	movs	r3, #0
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003412:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003414:	b662      	cpsie	i
}
 8003416:	e035      	b.n	8003484 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341c:	2b02      	cmp	r3, #2
 800341e:	d11e      	bne.n	800345e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800342e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003430:	b672      	cpsid	i
}
 8003432:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003458:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800345a:	b662      	cpsie	i
}
 800345c:	e012      	b.n	8003484 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800346c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003484:	e172      	b.n	800376c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348a:	2b03      	cmp	r3, #3
 800348c:	f200 811f 	bhi.w	80036ce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003494:	2b01      	cmp	r3, #1
 8003496:	d123      	bne.n	80034e0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f002 f869 	bl	8005574 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e173      	b.n	8003794 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034de:	e145      	b.n	800376c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d152      	bne.n	800358e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ee:	2200      	movs	r2, #0
 80034f0:	4906      	ldr	r1, [pc, #24]	@ (800350c <HAL_I2C_Mem_Read+0x24c>)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f001 fe62 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e148      	b.n	8003794 <HAL_I2C_Mem_Read+0x4d4>
 8003502:	bf00      	nop
 8003504:	00100002 	.word	0x00100002
 8003508:	ffff0000 	.word	0xffff0000
 800350c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003510:	b672      	cpsid	i
}
 8003512:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003556:	b662      	cpsie	i
}
 8003558:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800358c:	e0ee      	b.n	800376c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003594:	2200      	movs	r2, #0
 8003596:	4981      	ldr	r1, [pc, #516]	@ (800379c <HAL_I2C_Mem_Read+0x4dc>)
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f001 fe0f 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0f5      	b.n	8003794 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035b8:	b672      	cpsid	i
}
 80035ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80035ee:	4b6c      	ldr	r3, [pc, #432]	@ (80037a0 <HAL_I2C_Mem_Read+0x4e0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	08db      	lsrs	r3, r3, #3
 80035f4:	4a6b      	ldr	r2, [pc, #428]	@ (80037a4 <HAL_I2C_Mem_Read+0x4e4>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	0a1a      	lsrs	r2, r3, #8
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	00da      	lsls	r2, r3, #3
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	3b01      	subs	r3, #1
 800360c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d118      	bne.n	8003646 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003636:	b662      	cpsie	i
}
 8003638:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0a6      	b.n	8003794 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b04      	cmp	r3, #4
 8003652:	d1d9      	bne.n	8003608 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003662:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003696:	b662      	cpsie	i
}
 8003698:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036cc:	e04e      	b.n	800376c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f001 ff4e 	bl	8005574 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e058      	b.n	8003794 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b04      	cmp	r3, #4
 8003720:	d124      	bne.n	800376c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003726:	2b03      	cmp	r3, #3
 8003728:	d107      	bne.n	800373a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003738:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003770:	2b00      	cmp	r3, #0
 8003772:	f47f ae88 	bne.w	8003486 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e000      	b.n	8003794 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3728      	adds	r7, #40	@ 0x28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	00010004 	.word	0x00010004
 80037a0:	20000000 	.word	0x20000000
 80037a4:	14f8b589 	.word	0x14f8b589

080037a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d003      	beq.n	80037e0 <HAL_I2C_EV_IRQHandler+0x38>
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b40      	cmp	r3, #64	@ 0x40
 80037dc:	f040 80c1 	bne.w	8003962 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10d      	bne.n	8003816 <HAL_I2C_EV_IRQHandler+0x6e>
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003800:	d003      	beq.n	800380a <HAL_I2C_EV_IRQHandler+0x62>
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003808:	d101      	bne.n	800380e <HAL_I2C_EV_IRQHandler+0x66>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_I2C_EV_IRQHandler+0x68>
 800380e:	2300      	movs	r3, #0
 8003810:	2b01      	cmp	r3, #1
 8003812:	f000 8132 	beq.w	8003a7a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00c      	beq.n	800383a <HAL_I2C_EV_IRQHandler+0x92>
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	0a5b      	lsrs	r3, r3, #9
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d006      	beq.n	800383a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f001 ff2c 	bl	800568a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fcea 	bl	800420c <I2C_Master_SB>
 8003838:	e092      	b.n	8003960 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	08db      	lsrs	r3, r3, #3
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <HAL_I2C_EV_IRQHandler+0xb2>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	0a5b      	lsrs	r3, r3, #9
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fd5f 	bl	8004316 <I2C_Master_ADD10>
 8003858:	e082      	b.n	8003960 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HAL_I2C_EV_IRQHandler+0xd2>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	0a5b      	lsrs	r3, r3, #9
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fd78 	bl	8004368 <I2C_Master_ADDR>
 8003878:	e072      	b.n	8003960 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	089b      	lsrs	r3, r3, #2
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d03b      	beq.n	80038fe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003894:	f000 80f3 	beq.w	8003a7e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	09db      	lsrs	r3, r3, #7
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00f      	beq.n	80038c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	0a9b      	lsrs	r3, r3, #10
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d009      	beq.n	80038c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d103      	bne.n	80038c4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f942 	bl	8003b46 <I2C_MasterTransmit_TXE>
 80038c2:	e04d      	b.n	8003960 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80d6 	beq.w	8003a7e <HAL_I2C_EV_IRQHandler+0x2d6>
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	0a5b      	lsrs	r3, r3, #9
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80cf 	beq.w	8003a7e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80038e0:	7bbb      	ldrb	r3, [r7, #14]
 80038e2:	2b21      	cmp	r3, #33	@ 0x21
 80038e4:	d103      	bne.n	80038ee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f9c9 	bl	8003c7e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ec:	e0c7      	b.n	8003a7e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	2b40      	cmp	r3, #64	@ 0x40
 80038f2:	f040 80c4 	bne.w	8003a7e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa37 	bl	8003d6a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038fc:	e0bf      	b.n	8003a7e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800390c:	f000 80b7 	beq.w	8003a7e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00f      	beq.n	800393c <HAL_I2C_EV_IRQHandler+0x194>
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	0a9b      	lsrs	r3, r3, #10
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <HAL_I2C_EV_IRQHandler+0x194>
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d103      	bne.n	800393c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fab0 	bl	8003e9a <I2C_MasterReceive_RXNE>
 800393a:	e011      	b.n	8003960 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 809a 	beq.w	8003a7e <HAL_I2C_EV_IRQHandler+0x2d6>
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	0a5b      	lsrs	r3, r3, #9
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8093 	beq.w	8003a7e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fb66 	bl	800402a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800395e:	e08e      	b.n	8003a7e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003960:	e08d      	b.n	8003a7e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d004      	beq.n	8003974 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	e007      	b.n	8003984 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d012      	beq.n	80039b6 <HAL_I2C_EV_IRQHandler+0x20e>
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	0a5b      	lsrs	r3, r3, #9
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00c      	beq.n	80039b6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80039ac:	69b9      	ldr	r1, [r7, #24]
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 ff31 	bl	8004816 <I2C_Slave_ADDR>
 80039b4:	e066      	b.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <HAL_I2C_EV_IRQHandler+0x22e>
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	0a5b      	lsrs	r3, r3, #9
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 ff6c 	bl	80048ac <I2C_Slave_STOPF>
 80039d4:	e056      	b.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039d6:	7bbb      	ldrb	r3, [r7, #14]
 80039d8:	2b21      	cmp	r3, #33	@ 0x21
 80039da:	d002      	beq.n	80039e2 <HAL_I2C_EV_IRQHandler+0x23a>
 80039dc:	7bbb      	ldrb	r3, [r7, #14]
 80039de:	2b29      	cmp	r3, #41	@ 0x29
 80039e0:	d125      	bne.n	8003a2e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	09db      	lsrs	r3, r3, #7
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00f      	beq.n	8003a0e <HAL_I2C_EV_IRQHandler+0x266>
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	0a9b      	lsrs	r3, r3, #10
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <HAL_I2C_EV_IRQHandler+0x266>
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d103      	bne.n	8003a0e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fe49 	bl	800469e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a0c:	e039      	b.n	8003a82 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d033      	beq.n	8003a82 <HAL_I2C_EV_IRQHandler+0x2da>
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	0a5b      	lsrs	r3, r3, #9
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d02d      	beq.n	8003a82 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fe76 	bl	8004718 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a2c:	e029      	b.n	8003a82 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	099b      	lsrs	r3, r3, #6
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00f      	beq.n	8003a5a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	0a9b      	lsrs	r3, r3, #10
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fe80 	bl	8004758 <I2C_SlaveReceive_RXNE>
 8003a58:	e014      	b.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00e      	beq.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	0a5b      	lsrs	r3, r3, #9
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 feae 	bl	80047d4 <I2C_SlaveReceive_BTF>
 8003a78:	e004      	b.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003a7a:	bf00      	nop
 8003a7c:	e002      	b.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7e:	bf00      	nop
 8003a80:	e000      	b.n	8003a84 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a82:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	460b      	mov	r3, r1
 8003adc:	70fb      	strb	r3, [r7, #3]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr

08003afe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b5c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b62:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d150      	bne.n	8003c0e <I2C_MasterTransmit_TXE+0xc8>
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b21      	cmp	r3, #33	@ 0x21
 8003b70:	d14d      	bne.n	8003c0e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d01d      	beq.n	8003bb4 <I2C_MasterTransmit_TXE+0x6e>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d01a      	beq.n	8003bb4 <I2C_MasterTransmit_TXE+0x6e>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b84:	d016      	beq.n	8003bb4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b94:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2211      	movs	r2, #17
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff6c 	bl	8003a8a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bb2:	e060      	b.n	8003c76 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bc2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bd2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b40      	cmp	r3, #64	@ 0x40
 8003bec:	d107      	bne.n	8003bfe <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff ff81 	bl	8003afe <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bfc:	e03b      	b.n	8003c76 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff ff3f 	bl	8003a8a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c0c:	e033      	b.n	8003c76 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	2b21      	cmp	r3, #33	@ 0x21
 8003c12:	d005      	beq.n	8003c20 <I2C_MasterTransmit_TXE+0xda>
 8003c14:	7bbb      	ldrb	r3, [r7, #14]
 8003c16:	2b40      	cmp	r3, #64	@ 0x40
 8003c18:	d12d      	bne.n	8003c76 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	2b22      	cmp	r3, #34	@ 0x22
 8003c1e:	d12a      	bne.n	8003c76 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d108      	bne.n	8003c3c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c38:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003c3a:	e01c      	b.n	8003c76 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b40      	cmp	r3, #64	@ 0x40
 8003c46:	d103      	bne.n	8003c50 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f88e 	bl	8003d6a <I2C_MemoryTransmit_TXE_BTF>
}
 8003c4e:	e012      	b.n	8003c76 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	781a      	ldrb	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003c74:	e7ff      	b.n	8003c76 <I2C_MasterTransmit_TXE+0x130>
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b21      	cmp	r3, #33	@ 0x21
 8003c96:	d164      	bne.n	8003d62 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d012      	beq.n	8003cc8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003cc6:	e04c      	b.n	8003d62 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d01d      	beq.n	8003d0a <I2C_MasterTransmit_BTF+0x8c>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d01a      	beq.n	8003d0a <I2C_MasterTransmit_BTF+0x8c>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cda:	d016      	beq.n	8003d0a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cea:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2211      	movs	r2, #17
 8003cf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff fec1 	bl	8003a8a <HAL_I2C_MasterTxCpltCallback>
}
 8003d08:	e02b      	b.n	8003d62 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d18:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d28:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b40      	cmp	r3, #64	@ 0x40
 8003d42:	d107      	bne.n	8003d54 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff fed6 	bl	8003afe <HAL_I2C_MemTxCpltCallback>
}
 8003d52:	e006      	b.n	8003d62 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff fe94 	bl	8003a8a <HAL_I2C_MasterTxCpltCallback>
}
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d78:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d11d      	bne.n	8003dbe <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d10b      	bne.n	8003da2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9a:	1c9a      	adds	r2, r3, #2
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003da0:	e077      	b.n	8003e92 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	121b      	asrs	r3, r3, #8
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003dbc:	e069      	b.n	8003e92 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10b      	bne.n	8003dde <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ddc:	e059      	b.n	8003e92 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d152      	bne.n	8003e8c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	2b22      	cmp	r3, #34	@ 0x22
 8003dea:	d10d      	bne.n	8003e08 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dfa:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003e06:	e044      	b.n	8003e92 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d015      	beq.n	8003e3e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	2b21      	cmp	r3, #33	@ 0x21
 8003e16:	d112      	bne.n	8003e3e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1c:	781a      	ldrb	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e3c:	e029      	b.n	8003e92 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d124      	bne.n	8003e92 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b21      	cmp	r3, #33	@ 0x21
 8003e4c:	d121      	bne.n	8003e92 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e5c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e6c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff fe3a 	bl	8003afe <HAL_I2C_MemTxCpltCallback>
}
 8003e8a:	e002      	b.n	8003e92 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff f909 	bl	80030a4 <I2C_Flush_DR>
}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b22      	cmp	r3, #34	@ 0x22
 8003eac:	f040 80b9 	bne.w	8004022 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d921      	bls.n	8003f08 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	f040 8096 	bne.w	8004022 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f04:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003f06:	e08c      	b.n	8004022 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d07f      	beq.n	8004010 <I2C_MasterReceive_RXNE+0x176>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d002      	beq.n	8003f1c <I2C_MasterReceive_RXNE+0x82>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d179      	bne.n	8004010 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f001 faf7 	bl	8005510 <I2C_WaitOnSTOPRequestThroughIT>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d14c      	bne.n	8003fc2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f36:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f46:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b40      	cmp	r3, #64	@ 0x40
 8003f80:	d10a      	bne.n	8003f98 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff fdbd 	bl	8003b10 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f96:	e044      	b.n	8004022 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d002      	beq.n	8003fac <I2C_MasterReceive_RXNE+0x112>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d103      	bne.n	8003fb4 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fb2:	e002      	b.n	8003fba <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2212      	movs	r2, #18
 8003fb8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fd6e 	bl	8003a9c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003fc0:	e02f      	b.n	8004022 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fd0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff fd8a 	bl	8003b22 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800400e:	e008      	b.n	8004022 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800401e:	605a      	str	r2, [r3, #4]
}
 8004020:	e7ff      	b.n	8004022 <I2C_MasterReceive_RXNE+0x188>
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004036:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b04      	cmp	r3, #4
 8004040:	d11b      	bne.n	800407a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004050:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004078:	e0c4      	b.n	8004204 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b03      	cmp	r3, #3
 8004082:	d129      	bne.n	80040d8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004092:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b04      	cmp	r3, #4
 8004098:	d00a      	beq.n	80040b0 <I2C_MasterReceive_BTF+0x86>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d007      	beq.n	80040b0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80040d6:	e095      	b.n	8004204 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d17d      	bne.n	80041de <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d002      	beq.n	80040ee <I2C_MasterReceive_BTF+0xc4>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b10      	cmp	r3, #16
 80040ec:	d108      	bne.n	8004100 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e016      	b.n	800412e <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b04      	cmp	r3, #4
 8004104:	d002      	beq.n	800410c <I2C_MasterReceive_BTF+0xe2>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d108      	bne.n	800411e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e007      	b.n	800412e <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800412c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004188:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b40      	cmp	r3, #64	@ 0x40
 800419c:	d10a      	bne.n	80041b4 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff fcaf 	bl	8003b10 <HAL_I2C_MemRxCpltCallback>
}
 80041b2:	e027      	b.n	8004204 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d002      	beq.n	80041c8 <I2C_MasterReceive_BTF+0x19e>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d103      	bne.n	80041d0 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80041ce:	e002      	b.n	80041d6 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2212      	movs	r2, #18
 80041d4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff fc60 	bl	8003a9c <HAL_I2C_MasterRxCpltCallback>
}
 80041dc:	e012      	b.n	8004204 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004204:	bf00      	nop
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b40      	cmp	r3, #64	@ 0x40
 800421e:	d117      	bne.n	8004250 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422c:	b2db      	uxtb	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004238:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800423a:	e067      	b.n	800430c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	b2da      	uxtb	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	611a      	str	r2, [r3, #16]
}
 800424e:	e05d      	b.n	800430c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004258:	d133      	bne.n	80042c2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b21      	cmp	r3, #33	@ 0x21
 8004264:	d109      	bne.n	800427a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	b2db      	uxtb	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004276:	611a      	str	r2, [r3, #16]
 8004278:	e008      	b.n	800428c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	b2da      	uxtb	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <I2C_Master_SB+0x92>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	d108      	bne.n	80042b0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d032      	beq.n	800430c <I2C_Master_SB+0x100>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02d      	beq.n	800430c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042be:	605a      	str	r2, [r3, #4]
}
 80042c0:	e024      	b.n	800430c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10e      	bne.n	80042e8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	11db      	asrs	r3, r3, #7
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f003 0306 	and.w	r3, r3, #6
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f063 030f 	orn	r3, r3, #15
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	611a      	str	r2, [r3, #16]
}
 80042e6:	e011      	b.n	800430c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d10d      	bne.n	800430c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	11db      	asrs	r3, r3, #7
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f003 0306 	and.w	r3, r3, #6
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f063 030e 	orn	r3, r3, #14
 8004304:	b2da      	uxtb	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	611a      	str	r2, [r3, #16]
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr

08004316 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004322:	b2da      	uxtb	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432e:	2b00      	cmp	r3, #0
 8004330:	d004      	beq.n	800433c <I2C_Master_ADD10+0x26>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	d108      	bne.n	800434e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00c      	beq.n	800435e <I2C_Master_ADD10+0x48>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800435c:	605a      	str	r2, [r3, #4]
  }
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004368:	b480      	push	{r7}
 800436a:	b091      	sub	sp, #68	@ 0x44
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004376:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004384:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b22      	cmp	r3, #34	@ 0x22
 8004390:	f040 8174 	bne.w	800467c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10f      	bne.n	80043bc <I2C_Master_ADDR+0x54>
 800439c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80043a0:	2b40      	cmp	r3, #64	@ 0x40
 80043a2:	d10b      	bne.n	80043bc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a4:	2300      	movs	r3, #0
 80043a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80043b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ba:	e16b      	b.n	8004694 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11d      	bne.n	8004400 <I2C_Master_ADDR+0x98>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80043cc:	d118      	bne.n	8004400 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ce:	2300      	movs	r3, #0
 80043d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043f2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80043fe:	e149      	b.n	8004694 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d113      	bne.n	8004432 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440a:	2300      	movs	r3, #0
 800440c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800441e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	e120      	b.n	8004674 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	f040 808a 	bne.w	8004552 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800443e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004440:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004444:	d137      	bne.n	80044b6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004454:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004464:	d113      	bne.n	800448e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004474:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	e0f2      	b.n	8004674 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	623b      	str	r3, [r7, #32]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	e0de      	b.n	8004674 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80044b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d02e      	beq.n	800451a <I2C_Master_ADDR+0x1b2>
 80044bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d02b      	beq.n	800451a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80044c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c4:	2b12      	cmp	r3, #18
 80044c6:	d102      	bne.n	80044ce <I2C_Master_ADDR+0x166>
 80044c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d125      	bne.n	800451a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d00e      	beq.n	80044f2 <I2C_Master_ADDR+0x18a>
 80044d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d00b      	beq.n	80044f2 <I2C_Master_ADDR+0x18a>
 80044da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d008      	beq.n	80044f2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e007      	b.n	8004502 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004500:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	e0ac      	b.n	8004674 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004528:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452a:	2300      	movs	r3, #0
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e090      	b.n	8004674 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d158      	bne.n	800460e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800455c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455e:	2b04      	cmp	r3, #4
 8004560:	d021      	beq.n	80045a6 <I2C_Master_ADDR+0x23e>
 8004562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004564:	2b02      	cmp	r3, #2
 8004566:	d01e      	beq.n	80045a6 <I2C_Master_ADDR+0x23e>
 8004568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456a:	2b10      	cmp	r3, #16
 800456c:	d01b      	beq.n	80045a6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800457c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e012      	b.n	80045cc <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045b4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045da:	d14b      	bne.n	8004674 <I2C_Master_ADDR+0x30c>
 80045dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045e2:	d00b      	beq.n	80045fc <I2C_Master_ADDR+0x294>
 80045e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d008      	beq.n	80045fc <I2C_Master_ADDR+0x294>
 80045ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d005      	beq.n	80045fc <I2C_Master_ADDR+0x294>
 80045f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d002      	beq.n	80045fc <I2C_Master_ADDR+0x294>
 80045f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d13b      	bne.n	8004674 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800460a:	605a      	str	r2, [r3, #4]
 800460c:	e032      	b.n	8004674 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800461c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800462c:	d117      	bne.n	800465e <I2C_Master_ADDR+0x2f6>
 800462e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004630:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004634:	d00b      	beq.n	800464e <I2C_Master_ADDR+0x2e6>
 8004636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004638:	2b01      	cmp	r3, #1
 800463a:	d008      	beq.n	800464e <I2C_Master_ADDR+0x2e6>
 800463c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463e:	2b08      	cmp	r3, #8
 8004640:	d005      	beq.n	800464e <I2C_Master_ADDR+0x2e6>
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	2b10      	cmp	r3, #16
 8004646:	d002      	beq.n	800464e <I2C_Master_ADDR+0x2e6>
 8004648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464a:	2b20      	cmp	r3, #32
 800464c:	d107      	bne.n	800465e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800465c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800467a:	e00b      	b.n	8004694 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467c:	2300      	movs	r3, #0
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	68bb      	ldr	r3, [r7, #8]
}
 8004692:	e7ff      	b.n	8004694 <I2C_Master_ADDR+0x32c>
 8004694:	bf00      	nop
 8004696:	3744      	adds	r7, #68	@ 0x44
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr

0800469e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d02b      	beq.n	8004710 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	781a      	ldrb	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d114      	bne.n	8004710 <I2C_SlaveTransmit_TXE+0x72>
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b29      	cmp	r3, #41	@ 0x29
 80046ea:	d111      	bne.n	8004710 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2221      	movs	r2, #33	@ 0x21
 8004700:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2228      	movs	r2, #40	@ 0x28
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff f9cf 	bl	8003aae <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d011      	beq.n	800474e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	781a      	ldrb	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004766:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d02c      	beq.n	80047cc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d114      	bne.n	80047cc <I2C_SlaveReceive_RXNE+0x74>
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80047a6:	d111      	bne.n	80047cc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2222      	movs	r2, #34	@ 0x22
 80047bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2228      	movs	r2, #40	@ 0x28
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff f97a 	bl	8003ac0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d012      	beq.n	800480c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004820:	2300      	movs	r3, #0
 8004822:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004830:	2b28      	cmp	r3, #40	@ 0x28
 8004832:	d127      	bne.n	8004884 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004842:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	089b      	lsrs	r3, r3, #2
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	09db      	lsrs	r3, r3, #7
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d103      	bne.n	8004868 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	81bb      	strh	r3, [r7, #12]
 8004866:	e002      	b.n	800486e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004876:	89ba      	ldrh	r2, [r7, #12]
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	4619      	mov	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff f928 	bl	8003ad2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004882:	e00e      	b.n	80048a2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004884:	2300      	movs	r3, #0
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	60bb      	str	r3, [r7, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80048a2:	bf00      	nop
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004908:	d172      	bne.n	80049f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	2b22      	cmp	r3, #34	@ 0x22
 800490e:	d002      	beq.n	8004916 <I2C_Slave_STOPF+0x6a>
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b2a      	cmp	r3, #42	@ 0x2a
 8004914:	d135      	bne.n	8004982 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	b29a      	uxth	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	f043 0204 	orr.w	r2, r3, #4
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004948:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe f8ba 	bl	8002ac8 <HAL_DMA_GetState>
 8004954:	4603      	mov	r3, r0
 8004956:	2b01      	cmp	r3, #1
 8004958:	d049      	beq.n	80049ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	4a69      	ldr	r2, [pc, #420]	@ (8004b04 <I2C_Slave_STOPF+0x258>)
 8004960:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004966:	4618      	mov	r0, r3
 8004968:	f7fe f836 	bl	80029d8 <HAL_DMA_Abort_IT>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d03d      	beq.n	80049ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800497c:	4610      	mov	r0, r2
 800497e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004980:	e035      	b.n	80049ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	f043 0204 	orr.w	r2, r3, #4
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe f884 	bl	8002ac8 <HAL_DMA_GetState>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d014      	beq.n	80049f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004b04 <I2C_Slave_STOPF+0x258>)
 80049cc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe f800 	bl	80029d8 <HAL_DMA_Abort_IT>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049e8:	4610      	mov	r0, r2
 80049ea:	4798      	blx	r3
 80049ec:	e000      	b.n	80049f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d03e      	beq.n	8004a78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d112      	bne.n	8004a2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a38:	2b40      	cmp	r3, #64	@ 0x40
 8004a3a:	d112      	bne.n	8004a62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a70:	f043 0204 	orr.w	r2, r3, #4
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f843 	bl	8004b0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004a86:	e039      	b.n	8004afc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a8c:	d109      	bne.n	8004aa2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2228      	movs	r2, #40	@ 0x28
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff f80f 	bl	8003ac0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b28      	cmp	r3, #40	@ 0x28
 8004aac:	d111      	bne.n	8004ad2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a15      	ldr	r2, [pc, #84]	@ (8004b08 <I2C_Slave_STOPF+0x25c>)
 8004ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff f80e 	bl	8003aec <HAL_I2C_ListenCpltCallback>
}
 8004ad0:	e014      	b.n	8004afc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	2b22      	cmp	r3, #34	@ 0x22
 8004ad8:	d002      	beq.n	8004ae0 <I2C_Slave_STOPF+0x234>
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	2b22      	cmp	r3, #34	@ 0x22
 8004ade:	d10d      	bne.n	8004afc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fe ffe2 	bl	8003ac0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	0800506d 	.word	0x0800506d
 8004b08:	ffff0000 	.word	0xffff0000

08004b0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b24:	7bbb      	ldrb	r3, [r7, #14]
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d002      	beq.n	8004b30 <I2C_ITError+0x24>
 8004b2a:	7bbb      	ldrb	r3, [r7, #14]
 8004b2c:	2b40      	cmp	r3, #64	@ 0x40
 8004b2e:	d10a      	bne.n	8004b46 <I2C_ITError+0x3a>
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b22      	cmp	r3, #34	@ 0x22
 8004b34:	d107      	bne.n	8004b46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b4c:	2b28      	cmp	r3, #40	@ 0x28
 8004b4e:	d107      	bne.n	8004b60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2228      	movs	r2, #40	@ 0x28
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b5e:	e015      	b.n	8004b8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b6e:	d00a      	beq.n	8004b86 <I2C_ITError+0x7a>
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	2b60      	cmp	r3, #96	@ 0x60
 8004b74:	d007      	beq.n	8004b86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b9a:	d162      	bne.n	8004c62 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004baa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d020      	beq.n	8004bfc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bbe:	4a6a      	ldr	r2, [pc, #424]	@ (8004d68 <I2C_ITError+0x25c>)
 8004bc0:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fd ff06 	bl	80029d8 <HAL_DMA_Abort_IT>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 8089 	beq.w	8004ce6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0201 	bic.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	4798      	blx	r3
 8004bfa:	e074      	b.n	8004ce6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c00:	4a59      	ldr	r2, [pc, #356]	@ (8004d68 <I2C_ITError+0x25c>)
 8004c02:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fd fee5 	bl	80029d8 <HAL_DMA_Abort_IT>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d068      	beq.n	8004ce6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1e:	2b40      	cmp	r3, #64	@ 0x40
 8004c20:	d10b      	bne.n	8004c3a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4798      	blx	r3
 8004c60:	e041      	b.n	8004ce6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b60      	cmp	r3, #96	@ 0x60
 8004c6c:	d125      	bne.n	8004cba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c86:	2b40      	cmp	r3, #64	@ 0x40
 8004c88:	d10b      	bne.n	8004ca2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fe ff3e 	bl	8003b34 <HAL_I2C_AbortCpltCallback>
 8004cb8:	e015      	b.n	8004ce6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc4:	2b40      	cmp	r3, #64	@ 0x40
 8004cc6:	d10b      	bne.n	8004ce0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fe ff1e 	bl	8003b22 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10e      	bne.n	8004d14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d22:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d2a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d113      	bne.n	8004d60 <I2C_ITError+0x254>
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	2b28      	cmp	r3, #40	@ 0x28
 8004d3c:	d110      	bne.n	8004d60 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	@ (8004d6c <I2C_ITError+0x260>)
 8004d42:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fe fec6 	bl	8003aec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	0800506d 	.word	0x0800506d
 8004d6c:	ffff0000 	.word	0xffff0000

08004d70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	4608      	mov	r0, r1
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	817b      	strh	r3, [r7, #10]
 8004d82:	460b      	mov	r3, r1
 8004d84:	813b      	strh	r3, [r7, #8]
 8004d86:	4613      	mov	r3, r2
 8004d88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 fa08 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00d      	beq.n	8004dce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dc0:	d103      	bne.n	8004dca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e05f      	b.n	8004e8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dce:	897b      	ldrh	r3, [r7, #10]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ddc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	6a3a      	ldr	r2, [r7, #32]
 8004de2:	492d      	ldr	r1, [pc, #180]	@ (8004e98 <I2C_RequestMemoryWrite+0x128>)
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fa63 	bl	80052b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e04c      	b.n	8004e8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e0c:	6a39      	ldr	r1, [r7, #32]
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 faee 	bl	80053f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00d      	beq.n	8004e36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d107      	bne.n	8004e32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e02b      	b.n	8004e8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d105      	bne.n	8004e48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e3c:	893b      	ldrh	r3, [r7, #8]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	611a      	str	r2, [r3, #16]
 8004e46:	e021      	b.n	8004e8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e48:	893b      	ldrh	r3, [r7, #8]
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e58:	6a39      	ldr	r1, [r7, #32]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fac8 	bl	80053f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d107      	bne.n	8004e7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e005      	b.n	8004e8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e82:	893b      	ldrh	r3, [r7, #8]
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	00010002 	.word	0x00010002

08004e9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4603      	mov	r3, r0
 8004eac:	817b      	strh	r3, [r7, #10]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	813b      	strh	r3, [r7, #8]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ec4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ed4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f96a 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00d      	beq.n	8004f0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004efc:	d103      	bne.n	8004f06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e0aa      	b.n	8005060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f0a:	897b      	ldrh	r3, [r7, #10]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	6a3a      	ldr	r2, [r7, #32]
 8004f1e:	4952      	ldr	r1, [pc, #328]	@ (8005068 <I2C_RequestMemoryRead+0x1cc>)
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f9c5 	bl	80052b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e097      	b.n	8005060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f48:	6a39      	ldr	r1, [r7, #32]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 fa50 	bl	80053f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00d      	beq.n	8004f72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d107      	bne.n	8004f6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e076      	b.n	8005060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d105      	bne.n	8004f84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f78:	893b      	ldrh	r3, [r7, #8]
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	611a      	str	r2, [r3, #16]
 8004f82:	e021      	b.n	8004fc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f84:	893b      	ldrh	r3, [r7, #8]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f94:	6a39      	ldr	r1, [r7, #32]
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fa2a 	bl	80053f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00d      	beq.n	8004fbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d107      	bne.n	8004fba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e050      	b.n	8005060 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fbe:	893b      	ldrh	r3, [r7, #8]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fca:	6a39      	ldr	r1, [r7, #32]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fa0f 	bl	80053f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00d      	beq.n	8004ff4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d107      	bne.n	8004ff0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e035      	b.n	8005060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005002:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	2200      	movs	r2, #0
 800500c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f8d3 	bl	80051bc <I2C_WaitOnFlagUntilTimeout>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00d      	beq.n	8005038 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800502a:	d103      	bne.n	8005034 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005032:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e013      	b.n	8005060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005038:	897b      	ldrh	r3, [r7, #10]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	b2da      	uxtb	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	6a3a      	ldr	r2, [r7, #32]
 800504c:	4906      	ldr	r1, [pc, #24]	@ (8005068 <I2C_RequestMemoryRead+0x1cc>)
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f92e 	bl	80052b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	00010002 	.word	0x00010002

0800506c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005084:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005086:	4b4b      	ldr	r3, [pc, #300]	@ (80051b4 <I2C_DMAAbort+0x148>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	08db      	lsrs	r3, r3, #3
 800508c:	4a4a      	ldr	r2, [pc, #296]	@ (80051b8 <I2C_DMAAbort+0x14c>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	0a1a      	lsrs	r2, r3, #8
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	00da      	lsls	r2, r3, #3
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80050b2:	e00a      	b.n	80050ca <I2C_DMAAbort+0x5e>
    }
    count--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050c8:	d0ea      	beq.n	80050a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d6:	2200      	movs	r2, #0
 80050d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e6:	2200      	movs	r2, #0
 80050e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2200      	movs	r2, #0
 80050fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510c:	2200      	movs	r2, #0
 800510e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511c:	2200      	movs	r2, #0
 800511e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0201 	bic.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b60      	cmp	r3, #96	@ 0x60
 800513a:	d10e      	bne.n	800515a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2200      	movs	r2, #0
 8005150:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005152:	6978      	ldr	r0, [r7, #20]
 8005154:	f7fe fcee 	bl	8003b34 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005158:	e027      	b.n	80051aa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800515a:	7cfb      	ldrb	r3, [r7, #19]
 800515c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005160:	2b28      	cmp	r3, #40	@ 0x28
 8005162:	d117      	bne.n	8005194 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0201 	orr.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005182:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2200      	movs	r2, #0
 8005188:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2228      	movs	r2, #40	@ 0x28
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005192:	e007      	b.n	80051a4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80051a4:	6978      	ldr	r0, [r7, #20]
 80051a6:	f7fe fcbc 	bl	8003b22 <HAL_I2C_ErrorCallback>
}
 80051aa:	bf00      	nop
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000000 	.word	0x20000000
 80051b8:	14f8b589 	.word	0x14f8b589

080051bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051cc:	e048      	b.n	8005260 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d044      	beq.n	8005260 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7fd fac3 	bl	8002760 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d139      	bne.n	8005260 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	0c1b      	lsrs	r3, r3, #16
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d10d      	bne.n	8005212 <I2C_WaitOnFlagUntilTimeout+0x56>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	43da      	mvns	r2, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4013      	ands	r3, r2
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	e00c      	b.n	800522c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	43da      	mvns	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4013      	ands	r3, r2
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	bf0c      	ite	eq
 8005224:	2301      	moveq	r3, #1
 8005226:	2300      	movne	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	461a      	mov	r2, r3
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	429a      	cmp	r2, r3
 8005230:	d116      	bne.n	8005260 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524c:	f043 0220 	orr.w	r2, r3, #32
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e023      	b.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	0c1b      	lsrs	r3, r3, #16
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	d10d      	bne.n	8005286 <I2C_WaitOnFlagUntilTimeout+0xca>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	43da      	mvns	r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	4013      	ands	r3, r2
 8005276:	b29b      	uxth	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	bf0c      	ite	eq
 800527c:	2301      	moveq	r3, #1
 800527e:	2300      	movne	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	e00c      	b.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	43da      	mvns	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4013      	ands	r3, r2
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d093      	beq.n	80051ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052be:	e071      	b.n	80053a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ce:	d123      	bne.n	8005318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005304:	f043 0204 	orr.w	r2, r3, #4
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e067      	b.n	80053e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531e:	d041      	beq.n	80053a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005320:	f7fd fa1e 	bl	8002760 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	d302      	bcc.n	8005336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d136      	bne.n	80053a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	0c1b      	lsrs	r3, r3, #16
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	d10c      	bne.n	800535a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	43da      	mvns	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4013      	ands	r3, r2
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	bf14      	ite	ne
 8005352:	2301      	movne	r3, #1
 8005354:	2300      	moveq	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	e00b      	b.n	8005372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	43da      	mvns	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4013      	ands	r3, r2
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	bf14      	ite	ne
 800536c:	2301      	movne	r3, #1
 800536e:	2300      	moveq	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d016      	beq.n	80053a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005390:	f043 0220 	orr.w	r2, r3, #32
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e021      	b.n	80053e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	0c1b      	lsrs	r3, r3, #16
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d10c      	bne.n	80053c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	43da      	mvns	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4013      	ands	r3, r2
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	e00b      	b.n	80053e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	43da      	mvns	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4013      	ands	r3, r2
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bf14      	ite	ne
 80053da:	2301      	movne	r3, #1
 80053dc:	2300      	moveq	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f47f af6d 	bne.w	80052c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053fc:	e034      	b.n	8005468 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f915 	bl	800562e <I2C_IsAcknowledgeFailed>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e034      	b.n	8005478 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005414:	d028      	beq.n	8005468 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005416:	f7fd f9a3 	bl	8002760 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	429a      	cmp	r2, r3
 8005424:	d302      	bcc.n	800542c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d11d      	bne.n	8005468 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005436:	2b80      	cmp	r3, #128	@ 0x80
 8005438:	d016      	beq.n	8005468 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005454:	f043 0220 	orr.w	r2, r3, #32
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e007      	b.n	8005478 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005472:	2b80      	cmp	r3, #128	@ 0x80
 8005474:	d1c3      	bne.n	80053fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800548c:	e034      	b.n	80054f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 f8cd 	bl	800562e <I2C_IsAcknowledgeFailed>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e034      	b.n	8005508 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d028      	beq.n	80054f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a6:	f7fd f95b 	bl	8002760 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d302      	bcc.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d11d      	bne.n	80054f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d016      	beq.n	80054f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e4:	f043 0220 	orr.w	r2, r3, #32
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e007      	b.n	8005508 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b04      	cmp	r3, #4
 8005504:	d1c3      	bne.n	800548e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800551c:	4b13      	ldr	r3, [pc, #76]	@ (800556c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	08db      	lsrs	r3, r3, #3
 8005522:	4a13      	ldr	r2, [pc, #76]	@ (8005570 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005524:	fba2 2303 	umull	r2, r3, r2, r3
 8005528:	0a1a      	lsrs	r2, r3, #8
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3b01      	subs	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d107      	bne.n	800554e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	f043 0220 	orr.w	r2, r3, #32
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e008      	b.n	8005560 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005558:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800555c:	d0e9      	beq.n	8005532 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20000000 	.word	0x20000000
 8005570:	14f8b589 	.word	0x14f8b589

08005574 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005580:	e049      	b.n	8005616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b10      	cmp	r3, #16
 800558e:	d119      	bne.n	80055c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0210 	mvn.w	r2, #16
 8005598:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e030      	b.n	8005626 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c4:	f7fd f8cc 	bl	8002760 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d302      	bcc.n	80055da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d11d      	bne.n	8005616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e4:	2b40      	cmp	r3, #64	@ 0x40
 80055e6:	d016      	beq.n	8005616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	f043 0220 	orr.w	r2, r3, #32
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e007      	b.n	8005626 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005620:	2b40      	cmp	r3, #64	@ 0x40
 8005622:	d1ae      	bne.n	8005582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005644:	d11b      	bne.n	800567e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800564e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566a:	f043 0204 	orr.w	r2, r3, #4
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr

0800568a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005696:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800569a:	d103      	bne.n	80056a4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80056a2:	e007      	b.n	80056b4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80056ac:	d102      	bne.n	80056b4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2208      	movs	r2, #8
 80056b2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr
	...

080056c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e272      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8087 	beq.w	80057ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056e0:	4b92      	ldr	r3, [pc, #584]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f003 030c 	and.w	r3, r3, #12
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d00c      	beq.n	8005706 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056ec:	4b8f      	ldr	r3, [pc, #572]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f003 030c 	and.w	r3, r3, #12
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d112      	bne.n	800571e <HAL_RCC_OscConfig+0x5e>
 80056f8:	4b8c      	ldr	r3, [pc, #560]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005704:	d10b      	bne.n	800571e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005706:	4b89      	ldr	r3, [pc, #548]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d06c      	beq.n	80057ec <HAL_RCC_OscConfig+0x12c>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d168      	bne.n	80057ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e24c      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005726:	d106      	bne.n	8005736 <HAL_RCC_OscConfig+0x76>
 8005728:	4b80      	ldr	r3, [pc, #512]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a7f      	ldr	r2, [pc, #508]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 800572e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	e02e      	b.n	8005794 <HAL_RCC_OscConfig+0xd4>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10c      	bne.n	8005758 <HAL_RCC_OscConfig+0x98>
 800573e:	4b7b      	ldr	r3, [pc, #492]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a7a      	ldr	r2, [pc, #488]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	4b78      	ldr	r3, [pc, #480]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a77      	ldr	r2, [pc, #476]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005750:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e01d      	b.n	8005794 <HAL_RCC_OscConfig+0xd4>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005760:	d10c      	bne.n	800577c <HAL_RCC_OscConfig+0xbc>
 8005762:	4b72      	ldr	r3, [pc, #456]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a71      	ldr	r2, [pc, #452]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005768:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	4b6f      	ldr	r3, [pc, #444]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a6e      	ldr	r2, [pc, #440]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	e00b      	b.n	8005794 <HAL_RCC_OscConfig+0xd4>
 800577c:	4b6b      	ldr	r3, [pc, #428]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a6a      	ldr	r2, [pc, #424]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	4b68      	ldr	r3, [pc, #416]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a67      	ldr	r2, [pc, #412]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 800578e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005792:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d013      	beq.n	80057c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579c:	f7fc ffe0 	bl	8002760 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a4:	f7fc ffdc 	bl	8002760 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b64      	cmp	r3, #100	@ 0x64
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e200      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b6:	4b5d      	ldr	r3, [pc, #372]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0f0      	beq.n	80057a4 <HAL_RCC_OscConfig+0xe4>
 80057c2:	e014      	b.n	80057ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c4:	f7fc ffcc 	bl	8002760 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057cc:	f7fc ffc8 	bl	8002760 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b64      	cmp	r3, #100	@ 0x64
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e1ec      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057de:	4b53      	ldr	r3, [pc, #332]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1f0      	bne.n	80057cc <HAL_RCC_OscConfig+0x10c>
 80057ea:	e000      	b.n	80057ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d063      	beq.n	80058c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057fa:	4b4c      	ldr	r3, [pc, #304]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f003 030c 	and.w	r3, r3, #12
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005806:	4b49      	ldr	r3, [pc, #292]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f003 030c 	and.w	r3, r3, #12
 800580e:	2b08      	cmp	r3, #8
 8005810:	d11c      	bne.n	800584c <HAL_RCC_OscConfig+0x18c>
 8005812:	4b46      	ldr	r3, [pc, #280]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d116      	bne.n	800584c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800581e:	4b43      	ldr	r3, [pc, #268]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <HAL_RCC_OscConfig+0x176>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d001      	beq.n	8005836 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e1c0      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005836:	4b3d      	ldr	r3, [pc, #244]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	4939      	ldr	r1, [pc, #228]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005846:	4313      	orrs	r3, r2
 8005848:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800584a:	e03a      	b.n	80058c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d020      	beq.n	8005896 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005854:	4b36      	ldr	r3, [pc, #216]	@ (8005930 <HAL_RCC_OscConfig+0x270>)
 8005856:	2201      	movs	r2, #1
 8005858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585a:	f7fc ff81 	bl	8002760 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005862:	f7fc ff7d 	bl	8002760 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e1a1      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005874:	4b2d      	ldr	r3, [pc, #180]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f0      	beq.n	8005862 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005880:	4b2a      	ldr	r3, [pc, #168]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4927      	ldr	r1, [pc, #156]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 8005890:	4313      	orrs	r3, r2
 8005892:	600b      	str	r3, [r1, #0]
 8005894:	e015      	b.n	80058c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005896:	4b26      	ldr	r3, [pc, #152]	@ (8005930 <HAL_RCC_OscConfig+0x270>)
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589c:	f7fc ff60 	bl	8002760 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a4:	f7fc ff5c 	bl	8002760 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e180      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058b6:	4b1d      	ldr	r3, [pc, #116]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d03a      	beq.n	8005944 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d019      	beq.n	800590a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058d6:	4b17      	ldr	r3, [pc, #92]	@ (8005934 <HAL_RCC_OscConfig+0x274>)
 80058d8:	2201      	movs	r2, #1
 80058da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058dc:	f7fc ff40 	bl	8002760 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058e4:	f7fc ff3c 	bl	8002760 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e160      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058f6:	4b0d      	ldr	r3, [pc, #52]	@ (800592c <HAL_RCC_OscConfig+0x26c>)
 80058f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f0      	beq.n	80058e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005902:	2001      	movs	r0, #1
 8005904:	f000 face 	bl	8005ea4 <RCC_Delay>
 8005908:	e01c      	b.n	8005944 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800590a:	4b0a      	ldr	r3, [pc, #40]	@ (8005934 <HAL_RCC_OscConfig+0x274>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005910:	f7fc ff26 	bl	8002760 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005916:	e00f      	b.n	8005938 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005918:	f7fc ff22 	bl	8002760 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d908      	bls.n	8005938 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e146      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
 800592a:	bf00      	nop
 800592c:	40021000 	.word	0x40021000
 8005930:	42420000 	.word	0x42420000
 8005934:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005938:	4b92      	ldr	r3, [pc, #584]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 800593a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e9      	bne.n	8005918 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80a6 	beq.w	8005a9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005952:	2300      	movs	r3, #0
 8005954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005956:	4b8b      	ldr	r3, [pc, #556]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10d      	bne.n	800597e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005962:	4b88      	ldr	r3, [pc, #544]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	4a87      	ldr	r2, [pc, #540]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800596c:	61d3      	str	r3, [r2, #28]
 800596e:	4b85      	ldr	r3, [pc, #532]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005976:	60bb      	str	r3, [r7, #8]
 8005978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800597a:	2301      	movs	r3, #1
 800597c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597e:	4b82      	ldr	r3, [pc, #520]	@ (8005b88 <HAL_RCC_OscConfig+0x4c8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d118      	bne.n	80059bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800598a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b88 <HAL_RCC_OscConfig+0x4c8>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b88 <HAL_RCC_OscConfig+0x4c8>)
 8005990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005996:	f7fc fee3 	bl	8002760 <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599c:	e008      	b.n	80059b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800599e:	f7fc fedf 	bl	8002760 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b64      	cmp	r3, #100	@ 0x64
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e103      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b0:	4b75      	ldr	r3, [pc, #468]	@ (8005b88 <HAL_RCC_OscConfig+0x4c8>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d0f0      	beq.n	800599e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d106      	bne.n	80059d2 <HAL_RCC_OscConfig+0x312>
 80059c4:	4b6f      	ldr	r3, [pc, #444]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	4a6e      	ldr	r2, [pc, #440]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	6213      	str	r3, [r2, #32]
 80059d0:	e02d      	b.n	8005a2e <HAL_RCC_OscConfig+0x36e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10c      	bne.n	80059f4 <HAL_RCC_OscConfig+0x334>
 80059da:	4b6a      	ldr	r3, [pc, #424]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	4a69      	ldr	r2, [pc, #420]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 80059e0:	f023 0301 	bic.w	r3, r3, #1
 80059e4:	6213      	str	r3, [r2, #32]
 80059e6:	4b67      	ldr	r3, [pc, #412]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	4a66      	ldr	r2, [pc, #408]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 80059ec:	f023 0304 	bic.w	r3, r3, #4
 80059f0:	6213      	str	r3, [r2, #32]
 80059f2:	e01c      	b.n	8005a2e <HAL_RCC_OscConfig+0x36e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b05      	cmp	r3, #5
 80059fa:	d10c      	bne.n	8005a16 <HAL_RCC_OscConfig+0x356>
 80059fc:	4b61      	ldr	r3, [pc, #388]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	4a60      	ldr	r2, [pc, #384]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005a02:	f043 0304 	orr.w	r3, r3, #4
 8005a06:	6213      	str	r3, [r2, #32]
 8005a08:	4b5e      	ldr	r3, [pc, #376]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	4a5d      	ldr	r2, [pc, #372]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005a0e:	f043 0301 	orr.w	r3, r3, #1
 8005a12:	6213      	str	r3, [r2, #32]
 8005a14:	e00b      	b.n	8005a2e <HAL_RCC_OscConfig+0x36e>
 8005a16:	4b5b      	ldr	r3, [pc, #364]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	4a5a      	ldr	r2, [pc, #360]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005a1c:	f023 0301 	bic.w	r3, r3, #1
 8005a20:	6213      	str	r3, [r2, #32]
 8005a22:	4b58      	ldr	r3, [pc, #352]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	4a57      	ldr	r2, [pc, #348]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005a28:	f023 0304 	bic.w	r3, r3, #4
 8005a2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d015      	beq.n	8005a62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a36:	f7fc fe93 	bl	8002760 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a3c:	e00a      	b.n	8005a54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3e:	f7fc fe8f 	bl	8002760 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e0b1      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a54:	4b4b      	ldr	r3, [pc, #300]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0ee      	beq.n	8005a3e <HAL_RCC_OscConfig+0x37e>
 8005a60:	e014      	b.n	8005a8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a62:	f7fc fe7d 	bl	8002760 <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a68:	e00a      	b.n	8005a80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a6a:	f7fc fe79 	bl	8002760 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e09b      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a80:	4b40      	ldr	r3, [pc, #256]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1ee      	bne.n	8005a6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d105      	bne.n	8005a9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a92:	4b3c      	ldr	r3, [pc, #240]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	4a3b      	ldr	r2, [pc, #236]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005a98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 8087 	beq.w	8005bb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aa8:	4b36      	ldr	r3, [pc, #216]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f003 030c 	and.w	r3, r3, #12
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d061      	beq.n	8005b78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d146      	bne.n	8005b4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005abc:	4b33      	ldr	r3, [pc, #204]	@ (8005b8c <HAL_RCC_OscConfig+0x4cc>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac2:	f7fc fe4d 	bl	8002760 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aca:	f7fc fe49 	bl	8002760 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e06d      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005adc:	4b29      	ldr	r3, [pc, #164]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f0      	bne.n	8005aca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af0:	d108      	bne.n	8005b04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005af2:	4b24      	ldr	r3, [pc, #144]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	4921      	ldr	r1, [pc, #132]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b04:	4b1f      	ldr	r3, [pc, #124]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a19      	ldr	r1, [r3, #32]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b14:	430b      	orrs	r3, r1
 8005b16:	491b      	ldr	r1, [pc, #108]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005b8c <HAL_RCC_OscConfig+0x4cc>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b22:	f7fc fe1d 	bl	8002760 <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2a:	f7fc fe19 	bl	8002760 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e03d      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b3c:	4b11      	ldr	r3, [pc, #68]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0f0      	beq.n	8005b2a <HAL_RCC_OscConfig+0x46a>
 8005b48:	e035      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b4a:	4b10      	ldr	r3, [pc, #64]	@ (8005b8c <HAL_RCC_OscConfig+0x4cc>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b50:	f7fc fe06 	bl	8002760 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b58:	f7fc fe02 	bl	8002760 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e026      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b6a:	4b06      	ldr	r3, [pc, #24]	@ (8005b84 <HAL_RCC_OscConfig+0x4c4>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f0      	bne.n	8005b58 <HAL_RCC_OscConfig+0x498>
 8005b76:	e01e      	b.n	8005bb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d107      	bne.n	8005b90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e019      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
 8005b84:	40021000 	.word	0x40021000
 8005b88:	40007000 	.word	0x40007000
 8005b8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b90:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc0 <HAL_RCC_OscConfig+0x500>)
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d106      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d001      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40021000 	.word	0x40021000

08005bc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0d0      	b.n	8005d7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8005d84 <HAL_RCC_ClockConfig+0x1c0>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d910      	bls.n	8005c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be6:	4b67      	ldr	r3, [pc, #412]	@ (8005d84 <HAL_RCC_ClockConfig+0x1c0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f023 0207 	bic.w	r2, r3, #7
 8005bee:	4965      	ldr	r1, [pc, #404]	@ (8005d84 <HAL_RCC_ClockConfig+0x1c0>)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf6:	4b63      	ldr	r3, [pc, #396]	@ (8005d84 <HAL_RCC_ClockConfig+0x1c0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d001      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e0b8      	b.n	8005d7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d020      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c20:	4b59      	ldr	r3, [pc, #356]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4a58      	ldr	r2, [pc, #352]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005c26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c38:	4b53      	ldr	r3, [pc, #332]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	4a52      	ldr	r2, [pc, #328]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005c42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c44:	4b50      	ldr	r3, [pc, #320]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	494d      	ldr	r1, [pc, #308]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d040      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d107      	bne.n	8005c7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6a:	4b47      	ldr	r3, [pc, #284]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d115      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e07f      	b.n	8005d7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d107      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c82:	4b41      	ldr	r3, [pc, #260]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d109      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e073      	b.n	8005d7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c92:	4b3d      	ldr	r3, [pc, #244]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e06b      	b.n	8005d7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ca2:	4b39      	ldr	r3, [pc, #228]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f023 0203 	bic.w	r2, r3, #3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	4936      	ldr	r1, [pc, #216]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cb4:	f7fc fd54 	bl	8002760 <HAL_GetTick>
 8005cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cba:	e00a      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cbc:	f7fc fd50 	bl	8002760 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e053      	b.n	8005d7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 020c 	and.w	r2, r3, #12
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d1eb      	bne.n	8005cbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce4:	4b27      	ldr	r3, [pc, #156]	@ (8005d84 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d210      	bcs.n	8005d14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf2:	4b24      	ldr	r3, [pc, #144]	@ (8005d84 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f023 0207 	bic.w	r2, r3, #7
 8005cfa:	4922      	ldr	r1, [pc, #136]	@ (8005d84 <HAL_RCC_ClockConfig+0x1c0>)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d02:	4b20      	ldr	r3, [pc, #128]	@ (8005d84 <HAL_RCC_ClockConfig+0x1c0>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d001      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e032      	b.n	8005d7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d20:	4b19      	ldr	r3, [pc, #100]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	4916      	ldr	r1, [pc, #88]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d3e:	4b12      	ldr	r3, [pc, #72]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	490e      	ldr	r1, [pc, #56]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d52:	f000 f821 	bl	8005d98 <HAL_RCC_GetSysClockFreq>
 8005d56:	4602      	mov	r2, r0
 8005d58:	4b0b      	ldr	r3, [pc, #44]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c4>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	091b      	lsrs	r3, r3, #4
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	490a      	ldr	r1, [pc, #40]	@ (8005d8c <HAL_RCC_ClockConfig+0x1c8>)
 8005d64:	5ccb      	ldrb	r3, [r1, r3]
 8005d66:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6a:	4a09      	ldr	r2, [pc, #36]	@ (8005d90 <HAL_RCC_ClockConfig+0x1cc>)
 8005d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d6e:	4b09      	ldr	r3, [pc, #36]	@ (8005d94 <HAL_RCC_ClockConfig+0x1d0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fc fcb2 	bl	80026dc <HAL_InitTick>

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	40022000 	.word	0x40022000
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	0800ab50 	.word	0x0800ab50
 8005d90:	20000000 	.word	0x20000000
 8005d94:	20000004 	.word	0x20000004

08005d98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	2300      	movs	r3, #0
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	2300      	movs	r3, #0
 8005dac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005db2:	4b1e      	ldr	r3, [pc, #120]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x94>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d002      	beq.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x30>
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d003      	beq.n	8005dce <HAL_RCC_GetSysClockFreq+0x36>
 8005dc6:	e027      	b.n	8005e18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dc8:	4b19      	ldr	r3, [pc, #100]	@ (8005e30 <HAL_RCC_GetSysClockFreq+0x98>)
 8005dca:	613b      	str	r3, [r7, #16]
      break;
 8005dcc:	e027      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	0c9b      	lsrs	r3, r3, #18
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	4a17      	ldr	r2, [pc, #92]	@ (8005e34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005dd8:	5cd3      	ldrb	r3, [r2, r3]
 8005dda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d010      	beq.n	8005e08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005de6:	4b11      	ldr	r3, [pc, #68]	@ (8005e2c <HAL_RCC_GetSysClockFreq+0x94>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	0c5b      	lsrs	r3, r3, #17
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	4a11      	ldr	r2, [pc, #68]	@ (8005e38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005df2:	5cd3      	ldrb	r3, [r2, r3]
 8005df4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a0d      	ldr	r2, [pc, #52]	@ (8005e30 <HAL_RCC_GetSysClockFreq+0x98>)
 8005dfa:	fb03 f202 	mul.w	r2, r3, r2
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	e004      	b.n	8005e12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005e0c:	fb02 f303 	mul.w	r3, r2, r3
 8005e10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	613b      	str	r3, [r7, #16]
      break;
 8005e16:	e002      	b.n	8005e1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e18:	4b05      	ldr	r3, [pc, #20]	@ (8005e30 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e1a:	613b      	str	r3, [r7, #16]
      break;
 8005e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e1e:	693b      	ldr	r3, [r7, #16]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40021000 	.word	0x40021000
 8005e30:	007a1200 	.word	0x007a1200
 8005e34:	0800ab68 	.word	0x0800ab68
 8005e38:	0800ab78 	.word	0x0800ab78
 8005e3c:	003d0900 	.word	0x003d0900

08005e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e44:	4b02      	ldr	r3, [pc, #8]	@ (8005e50 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e46:	681b      	ldr	r3, [r3, #0]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr
 8005e50:	20000000 	.word	0x20000000

08005e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e58:	f7ff fff2 	bl	8005e40 <HAL_RCC_GetHCLKFreq>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	0a1b      	lsrs	r3, r3, #8
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	4903      	ldr	r1, [pc, #12]	@ (8005e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e6a:	5ccb      	ldrb	r3, [r1, r3]
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40021000 	.word	0x40021000
 8005e78:	0800ab60 	.word	0x0800ab60

08005e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e80:	f7ff ffde 	bl	8005e40 <HAL_RCC_GetHCLKFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b05      	ldr	r3, [pc, #20]	@ (8005e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	0adb      	lsrs	r3, r3, #11
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	4903      	ldr	r1, [pc, #12]	@ (8005ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	0800ab60 	.word	0x0800ab60

08005ea4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005eac:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed8 <RCC_Delay+0x34>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8005edc <RCC_Delay+0x38>)
 8005eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb6:	0a5b      	lsrs	r3, r3, #9
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	fb02 f303 	mul.w	r3, r2, r3
 8005ebe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ec0:	bf00      	nop
  }
  while (Delay --);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1e5a      	subs	r2, r3, #1
 8005ec6:	60fa      	str	r2, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1f9      	bne.n	8005ec0 <RCC_Delay+0x1c>
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr
 8005ed8:	20000000 	.word	0x20000000
 8005edc:	10624dd3 	.word	0x10624dd3

08005ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e076      	b.n	8005fe0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d108      	bne.n	8005f0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f02:	d009      	beq.n	8005f18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	61da      	str	r2, [r3, #28]
 8005f0a:	e005      	b.n	8005f18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d106      	bne.n	8005f38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fc f97c 	bl	8002230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9c:	ea42 0103 	orr.w	r1, r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	0c1a      	lsrs	r2, r3, #16
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f002 0204 	and.w	r2, r2, #4
 8005fbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69da      	ldr	r2, [r3, #28]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ff8:	f7fc fbb2 	bl	8002760 <HAL_GetTick>
 8005ffc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005ffe:	88fb      	ldrh	r3, [r7, #6]
 8006000:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	d001      	beq.n	8006012 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800600e:	2302      	movs	r3, #2
 8006010:	e12a      	b.n	8006268 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_SPI_Transmit+0x36>
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e122      	b.n	8006268 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_SPI_Transmit+0x48>
 800602c:	2302      	movs	r3, #2
 800602e:	e11b      	b.n	8006268 <HAL_SPI_Transmit+0x280>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2203      	movs	r2, #3
 800603c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	88fa      	ldrh	r2, [r7, #6]
 8006050:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	88fa      	ldrh	r2, [r7, #6]
 8006056:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800607e:	d10f      	bne.n	80060a0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800608e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800609e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060aa:	2b40      	cmp	r3, #64	@ 0x40
 80060ac:	d007      	beq.n	80060be <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060c6:	d152      	bne.n	800616e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_SPI_Transmit+0xee>
 80060d0:	8b7b      	ldrh	r3, [r7, #26]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d145      	bne.n	8006162 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060da:	881a      	ldrh	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e6:	1c9a      	adds	r2, r3, #2
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060fa:	e032      	b.n	8006162 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b02      	cmp	r3, #2
 8006108:	d112      	bne.n	8006130 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610e:	881a      	ldrh	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611a:	1c9a      	adds	r2, r3, #2
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800612e:	e018      	b.n	8006162 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006130:	f7fc fb16 	bl	8002760 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d803      	bhi.n	8006148 <HAL_SPI_Transmit+0x160>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006146:	d102      	bne.n	800614e <HAL_SPI_Transmit+0x166>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d109      	bne.n	8006162 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e082      	b.n	8006268 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1c7      	bne.n	80060fc <HAL_SPI_Transmit+0x114>
 800616c:	e053      	b.n	8006216 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_SPI_Transmit+0x194>
 8006176:	8b7b      	ldrh	r3, [r7, #26]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d147      	bne.n	800620c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	330c      	adds	r3, #12
 8006186:	7812      	ldrb	r2, [r2, #0]
 8006188:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061a2:	e033      	b.n	800620c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d113      	bne.n	80061da <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	7812      	ldrb	r2, [r2, #0]
 80061be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80061d8:	e018      	b.n	800620c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061da:	f7fc fac1 	bl	8002760 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d803      	bhi.n	80061f2 <HAL_SPI_Transmit+0x20a>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d102      	bne.n	80061f8 <HAL_SPI_Transmit+0x210>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d109      	bne.n	800620c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e02d      	b.n	8006268 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1c6      	bne.n	80061a4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 fcc8 	bl	8006bb0 <SPI_EndRxTxTransaction>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10a      	bne.n	800624a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006266:	2300      	movs	r3, #0
  }
}
 8006268:	4618      	mov	r0, r3
 800626a:	3720      	adds	r7, #32
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af02      	add	r7, sp, #8
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	4613      	mov	r3, r2
 800627e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	d001      	beq.n	8006290 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800628c:	2302      	movs	r3, #2
 800628e:	e104      	b.n	800649a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006298:	d112      	bne.n	80062c0 <HAL_SPI_Receive+0x50>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10e      	bne.n	80062c0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2204      	movs	r2, #4
 80062a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f8f3 	bl	80064a2 <HAL_SPI_TransmitReceive>
 80062bc:	4603      	mov	r3, r0
 80062be:	e0ec      	b.n	800649a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062c0:	f7fc fa4e 	bl	8002760 <HAL_GetTick>
 80062c4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <HAL_SPI_Receive+0x62>
 80062cc:	88fb      	ldrh	r3, [r7, #6]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e0e1      	b.n	800649a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_SPI_Receive+0x74>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e0da      	b.n	800649a <HAL_SPI_Receive+0x22a>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2204      	movs	r2, #4
 80062f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	88fa      	ldrh	r2, [r7, #6]
 8006304:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	88fa      	ldrh	r2, [r7, #6]
 800630a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006332:	d10f      	bne.n	8006354 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006342:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006352:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635e:	2b40      	cmp	r3, #64	@ 0x40
 8006360:	d007      	beq.n	8006372 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006370:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d170      	bne.n	800645c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800637a:	e035      	b.n	80063e8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b01      	cmp	r3, #1
 8006388:	d115      	bne.n	80063b6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f103 020c 	add.w	r2, r3, #12
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006396:	7812      	ldrb	r2, [r2, #0]
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063b4:	e018      	b.n	80063e8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063b6:	f7fc f9d3 	bl	8002760 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d803      	bhi.n	80063ce <HAL_SPI_Receive+0x15e>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063cc:	d102      	bne.n	80063d4 <HAL_SPI_Receive+0x164>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d109      	bne.n	80063e8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e058      	b.n	800649a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1c4      	bne.n	800637c <HAL_SPI_Receive+0x10c>
 80063f2:	e038      	b.n	8006466 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d113      	bne.n	800642a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68da      	ldr	r2, [r3, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640c:	b292      	uxth	r2, r2
 800640e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006414:	1c9a      	adds	r2, r3, #2
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006428:	e018      	b.n	800645c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800642a:	f7fc f999 	bl	8002760 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d803      	bhi.n	8006442 <HAL_SPI_Receive+0x1d2>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d102      	bne.n	8006448 <HAL_SPI_Receive+0x1d8>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e01e      	b.n	800649a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1c6      	bne.n	80063f4 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fb4e 	bl	8006b0c <SPI_EndRxTransaction>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2220      	movs	r2, #32
 800647a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e000      	b.n	800649a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006498:	2300      	movs	r3, #0
  }
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b08a      	sub	sp, #40	@ 0x28
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064b0:	2301      	movs	r3, #1
 80064b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064b4:	f7fc f954 	bl	8002760 <HAL_GetTick>
 80064b8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064c0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80064c8:	887b      	ldrh	r3, [r7, #2]
 80064ca:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064cc:	7ffb      	ldrb	r3, [r7, #31]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d00c      	beq.n	80064ec <HAL_SPI_TransmitReceive+0x4a>
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064d8:	d106      	bne.n	80064e8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d102      	bne.n	80064e8 <HAL_SPI_TransmitReceive+0x46>
 80064e2:	7ffb      	ldrb	r3, [r7, #31]
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d001      	beq.n	80064ec <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80064e8:	2302      	movs	r3, #2
 80064ea:	e17f      	b.n	80067ec <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <HAL_SPI_TransmitReceive+0x5c>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_SPI_TransmitReceive+0x5c>
 80064f8:	887b      	ldrh	r3, [r7, #2]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e174      	b.n	80067ec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_SPI_TransmitReceive+0x6e>
 800650c:	2302      	movs	r3, #2
 800650e:	e16d      	b.n	80067ec <HAL_SPI_TransmitReceive+0x34a>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b04      	cmp	r3, #4
 8006522:	d003      	beq.n	800652c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2205      	movs	r2, #5
 8006528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	887a      	ldrh	r2, [r7, #2]
 800653c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	887a      	ldrh	r2, [r7, #2]
 8006542:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	887a      	ldrh	r2, [r7, #2]
 800654e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	887a      	ldrh	r2, [r7, #2]
 8006554:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800656c:	2b40      	cmp	r3, #64	@ 0x40
 800656e:	d007      	beq.n	8006580 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800657e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006588:	d17e      	bne.n	8006688 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <HAL_SPI_TransmitReceive+0xf6>
 8006592:	8afb      	ldrh	r3, [r7, #22]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d16c      	bne.n	8006672 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659c:	881a      	ldrh	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a8:	1c9a      	adds	r2, r3, #2
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065bc:	e059      	b.n	8006672 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d11b      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x162>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d016      	beq.n	8006604 <HAL_SPI_TransmitReceive+0x162>
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d113      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e0:	881a      	ldrh	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ec:	1c9a      	adds	r2, r3, #2
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b01      	cmp	r3, #1
 8006610:	d119      	bne.n	8006646 <HAL_SPI_TransmitReceive+0x1a4>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006616:	b29b      	uxth	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d014      	beq.n	8006646 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	b292      	uxth	r2, r2
 8006628:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662e:	1c9a      	adds	r2, r3, #2
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006638:	b29b      	uxth	r3, r3
 800663a:	3b01      	subs	r3, #1
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006642:	2301      	movs	r3, #1
 8006644:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006646:	f7fc f88b 	bl	8002760 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006652:	429a      	cmp	r2, r3
 8006654:	d80d      	bhi.n	8006672 <HAL_SPI_TransmitReceive+0x1d0>
 8006656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665c:	d009      	beq.n	8006672 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e0bc      	b.n	80067ec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1a0      	bne.n	80065be <HAL_SPI_TransmitReceive+0x11c>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d19b      	bne.n	80065be <HAL_SPI_TransmitReceive+0x11c>
 8006686:	e082      	b.n	800678e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_SPI_TransmitReceive+0x1f4>
 8006690:	8afb      	ldrh	r3, [r7, #22]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d171      	bne.n	800677a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	7812      	ldrb	r2, [r2, #0]
 80066a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066bc:	e05d      	b.n	800677a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d11c      	bne.n	8006706 <HAL_SPI_TransmitReceive+0x264>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d017      	beq.n	8006706 <HAL_SPI_TransmitReceive+0x264>
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d114      	bne.n	8006706 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	7812      	ldrb	r2, [r2, #0]
 80066e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b01      	cmp	r3, #1
 8006712:	d119      	bne.n	8006748 <HAL_SPI_TransmitReceive+0x2a6>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d014      	beq.n	8006748 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006744:	2301      	movs	r3, #1
 8006746:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006748:	f7fc f80a 	bl	8002760 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006754:	429a      	cmp	r2, r3
 8006756:	d803      	bhi.n	8006760 <HAL_SPI_TransmitReceive+0x2be>
 8006758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675e:	d102      	bne.n	8006766 <HAL_SPI_TransmitReceive+0x2c4>
 8006760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e038      	b.n	80067ec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d19c      	bne.n	80066be <HAL_SPI_TransmitReceive+0x21c>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d197      	bne.n	80066be <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800678e:	6a3a      	ldr	r2, [r7, #32]
 8006790:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 fa0c 	bl	8006bb0 <SPI_EndRxTxTransaction>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d008      	beq.n	80067b0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2220      	movs	r2, #32
 80067a2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e01d      	b.n	80067ec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067b8:	2300      	movs	r3, #0
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	613b      	str	r3, [r7, #16]
 80067cc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80067ea:	2300      	movs	r3, #0
  }
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3728      	adds	r7, #40	@ 0x28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	099b      	lsrs	r3, r3, #6
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10f      	bne.n	8006838 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	099b      	lsrs	r3, r3, #6
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d004      	beq.n	8006838 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	4798      	blx	r3
    return;
 8006836:	e0be      	b.n	80069b6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <HAL_SPI_IRQHandler+0x66>
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	09db      	lsrs	r3, r3, #7
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d004      	beq.n	800685a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
    return;
 8006858:	e0ad      	b.n	80069b6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_SPI_IRQHandler+0x80>
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	099b      	lsrs	r3, r3, #6
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 80a1 	beq.w	80069b6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 809a 	beq.w	80069b6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	099b      	lsrs	r3, r3, #6
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d023      	beq.n	80068d6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b03      	cmp	r3, #3
 8006898:	d011      	beq.n	80068be <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689e:	f043 0204 	orr.w	r2, r3, #4
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	617b      	str	r3, [r7, #20]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	e00b      	b.n	80068d6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068be:	2300      	movs	r3, #0
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	693b      	ldr	r3, [r7, #16]
        return;
 80068d4:	e06f      	b.n	80069b6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d014      	beq.n	800690c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e6:	f043 0201 	orr.w	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006910:	2b00      	cmp	r3, #0
 8006912:	d04f      	beq.n	80069b4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006922:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <HAL_SPI_IRQHandler+0x14c>
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d034      	beq.n	80069aa <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0203 	bic.w	r2, r2, #3
 800694e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006954:	2b00      	cmp	r3, #0
 8006956:	d011      	beq.n	800697c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800695c:	4a17      	ldr	r2, [pc, #92]	@ (80069bc <HAL_SPI_IRQHandler+0x1c8>)
 800695e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006964:	4618      	mov	r0, r3
 8006966:	f7fc f837 	bl	80029d8 <HAL_DMA_Abort_IT>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006974:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006980:	2b00      	cmp	r3, #0
 8006982:	d016      	beq.n	80069b2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006988:	4a0c      	ldr	r2, [pc, #48]	@ (80069bc <HAL_SPI_IRQHandler+0x1c8>)
 800698a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006990:	4618      	mov	r0, r3
 8006992:	f7fc f821 	bl	80029d8 <HAL_DMA_Abort_IT>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80069a8:	e003      	b.n	80069b2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f808 	bl	80069c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80069b0:	e000      	b.n	80069b4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80069b2:	bf00      	nop
    return;
 80069b4:	bf00      	nop
  }
}
 80069b6:	3720      	adds	r7, #32
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	080069d3 	.word	0x080069d3

080069c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069de:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f7ff ffe7 	bl	80069c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b088      	sub	sp, #32
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a0c:	f7fb fea8 	bl	8002760 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a14:	1a9b      	subs	r3, r3, r2
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	4413      	add	r3, r2
 8006a1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a1c:	f7fb fea0 	bl	8002760 <HAL_GetTick>
 8006a20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a22:	4b39      	ldr	r3, [pc, #228]	@ (8006b08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	015b      	lsls	r3, r3, #5
 8006a28:	0d1b      	lsrs	r3, r3, #20
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	fb02 f303 	mul.w	r3, r2, r3
 8006a30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a32:	e054      	b.n	8006ade <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3a:	d050      	beq.n	8006ade <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a3c:	f7fb fe90 	bl	8002760 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d902      	bls.n	8006a52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d13d      	bne.n	8006ace <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a6a:	d111      	bne.n	8006a90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a74:	d004      	beq.n	8006a80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a7e:	d107      	bne.n	8006a90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a98:	d10f      	bne.n	8006aba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ab8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e017      	b.n	8006afe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	bf0c      	ite	eq
 8006aee:	2301      	moveq	r3, #1
 8006af0:	2300      	movne	r3, #0
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d19b      	bne.n	8006a34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3720      	adds	r7, #32
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000000 	.word	0x20000000

08006b0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b20:	d111      	bne.n	8006b46 <SPI_EndRxTransaction+0x3a>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b2a:	d004      	beq.n	8006b36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b34:	d107      	bne.n	8006b46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b44:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b4e:	d117      	bne.n	8006b80 <SPI_EndRxTransaction+0x74>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b58:	d112      	bne.n	8006b80 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2200      	movs	r2, #0
 8006b62:	2101      	movs	r1, #1
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff ff49 	bl	80069fc <SPI_WaitFlagStateUntilTimeout>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01a      	beq.n	8006ba6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b74:	f043 0220 	orr.w	r2, r3, #32
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e013      	b.n	8006ba8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2200      	movs	r2, #0
 8006b88:	2180      	movs	r1, #128	@ 0x80
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff ff36 	bl	80069fc <SPI_WaitFlagStateUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b9a:	f043 0220 	orr.w	r2, r3, #32
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e000      	b.n	8006ba8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	2102      	movs	r1, #2
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff ff18 	bl	80069fc <SPI_WaitFlagStateUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d007      	beq.n	8006be2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd6:	f043 0220 	orr.w	r2, r3, #32
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e013      	b.n	8006c0a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2200      	movs	r2, #0
 8006bea:	2180      	movs	r1, #128	@ 0x80
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff ff05 	bl	80069fc <SPI_WaitFlagStateUntilTimeout>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d007      	beq.n	8006c08 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bfc:	f043 0220 	orr.w	r2, r3, #32
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e000      	b.n	8006c0a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e042      	b.n	8006caa <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d106      	bne.n	8006c3e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7fb fb4b 	bl	80022d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2224      	movs	r2, #36	@ 0x24
 8006c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c54:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f972 	bl	8006f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695a      	ldr	r2, [r3, #20]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c7a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c8a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b08a      	sub	sp, #40	@ 0x28
 8006cb6:	af02      	add	r7, sp, #8
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	603b      	str	r3, [r7, #0]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	d175      	bne.n	8006dbe <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_UART_Transmit+0x2c>
 8006cd8:	88fb      	ldrh	r3, [r7, #6]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e06e      	b.n	8006dc0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2221      	movs	r2, #33	@ 0x21
 8006cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cf0:	f7fb fd36 	bl	8002760 <HAL_GetTick>
 8006cf4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	88fa      	ldrh	r2, [r7, #6]
 8006cfa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d0a:	d108      	bne.n	8006d1e <HAL_UART_Transmit+0x6c>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d104      	bne.n	8006d1e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	61bb      	str	r3, [r7, #24]
 8006d1c:	e003      	b.n	8006d26 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d26:	e02e      	b.n	8006d86 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	2180      	movs	r1, #128	@ 0x80
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 f848 	bl	8006dc8 <UART_WaitOnFlagUntilTimeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e03a      	b.n	8006dc0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10b      	bne.n	8006d68 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d5e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	3302      	adds	r3, #2
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	e007      	b.n	8006d78 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	781a      	ldrb	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	3301      	adds	r3, #1
 8006d76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1cb      	bne.n	8006d28 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2200      	movs	r2, #0
 8006d98:	2140      	movs	r1, #64	@ 0x40
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 f814 	bl	8006dc8 <UART_WaitOnFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e006      	b.n	8006dc0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e000      	b.n	8006dc0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006dbe:	2302      	movs	r3, #2
  }
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3720      	adds	r7, #32
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd8:	e03b      	b.n	8006e52 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de0:	d037      	beq.n	8006e52 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de2:	f7fb fcbd 	bl	8002760 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	6a3a      	ldr	r2, [r7, #32]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d302      	bcc.n	8006df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e03a      	b.n	8006e72 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d023      	beq.n	8006e52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2b80      	cmp	r3, #128	@ 0x80
 8006e0e:	d020      	beq.n	8006e52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2b40      	cmp	r3, #64	@ 0x40
 8006e14:	d01d      	beq.n	8006e52 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d116      	bne.n	8006e52 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 f81d 	bl	8006e7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2208      	movs	r2, #8
 8006e44:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e00f      	b.n	8006e72 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	bf0c      	ite	eq
 8006e62:	2301      	moveq	r3, #1
 8006e64:	2300      	movne	r3, #0
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d0b4      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b095      	sub	sp, #84	@ 0x54
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	330c      	adds	r3, #12
 8006e88:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	330c      	adds	r3, #12
 8006ea0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ea2:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ea8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1e5      	bne.n	8006e82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3314      	adds	r3, #20
 8006ebc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	e853 3f00 	ldrex	r3, [r3]
 8006ec4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	f023 0301 	bic.w	r3, r3, #1
 8006ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3314      	adds	r3, #20
 8006ed4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006edc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e5      	bne.n	8006eb6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d119      	bne.n	8006f26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f023 0310 	bic.w	r3, r3, #16
 8006f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f12:	61ba      	str	r2, [r7, #24]
 8006f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	6979      	ldr	r1, [r7, #20]
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e5      	bne.n	8006ef2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f34:	bf00      	nop
 8006f36:	3754      	adds	r7, #84	@ 0x54
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bc80      	pop	{r7}
 8006f3c:	4770      	bx	lr
	...

08006f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006f7a:	f023 030c 	bic.w	r3, r3, #12
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6812      	ldr	r2, [r2, #0]
 8006f82:	68b9      	ldr	r1, [r7, #8]
 8006f84:	430b      	orrs	r3, r1
 8006f86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8007054 <UART_SetConfig+0x114>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d103      	bne.n	8006fb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006fa8:	f7fe ff68 	bl	8005e7c <HAL_RCC_GetPCLK2Freq>
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	e002      	b.n	8006fb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006fb0:	f7fe ff50 	bl	8005e54 <HAL_RCC_GetPCLK1Freq>
 8006fb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009a      	lsls	r2, r3, #2
 8006fc0:	441a      	add	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fcc:	4a22      	ldr	r2, [pc, #136]	@ (8007058 <UART_SetConfig+0x118>)
 8006fce:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd2:	095b      	lsrs	r3, r3, #5
 8006fd4:	0119      	lsls	r1, r3, #4
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	009a      	lsls	r2, r3, #2
 8006fe0:	441a      	add	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fec:	4b1a      	ldr	r3, [pc, #104]	@ (8007058 <UART_SetConfig+0x118>)
 8006fee:	fba3 0302 	umull	r0, r3, r3, r2
 8006ff2:	095b      	lsrs	r3, r3, #5
 8006ff4:	2064      	movs	r0, #100	@ 0x64
 8006ff6:	fb00 f303 	mul.w	r3, r0, r3
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	3332      	adds	r3, #50	@ 0x32
 8007000:	4a15      	ldr	r2, [pc, #84]	@ (8007058 <UART_SetConfig+0x118>)
 8007002:	fba2 2303 	umull	r2, r3, r2, r3
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800700c:	4419      	add	r1, r3
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4613      	mov	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	009a      	lsls	r2, r3, #2
 8007018:	441a      	add	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	fbb2 f2f3 	udiv	r2, r2, r3
 8007024:	4b0c      	ldr	r3, [pc, #48]	@ (8007058 <UART_SetConfig+0x118>)
 8007026:	fba3 0302 	umull	r0, r3, r3, r2
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	2064      	movs	r0, #100	@ 0x64
 800702e:	fb00 f303 	mul.w	r3, r0, r3
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	3332      	adds	r3, #50	@ 0x32
 8007038:	4a07      	ldr	r2, [pc, #28]	@ (8007058 <UART_SetConfig+0x118>)
 800703a:	fba2 2303 	umull	r2, r3, r2, r3
 800703e:	095b      	lsrs	r3, r3, #5
 8007040:	f003 020f 	and.w	r2, r3, #15
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	440a      	add	r2, r1
 800704a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800704c:	bf00      	nop
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	40013800 	.word	0x40013800
 8007058:	51eb851f 	.word	0x51eb851f

0800705c <__cvt>:
 800705c:	2b00      	cmp	r3, #0
 800705e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007062:	461d      	mov	r5, r3
 8007064:	bfbb      	ittet	lt
 8007066:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800706a:	461d      	movlt	r5, r3
 800706c:	2300      	movge	r3, #0
 800706e:	232d      	movlt	r3, #45	@ 0x2d
 8007070:	b088      	sub	sp, #32
 8007072:	4614      	mov	r4, r2
 8007074:	bfb8      	it	lt
 8007076:	4614      	movlt	r4, r2
 8007078:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800707a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800707c:	7013      	strb	r3, [r2, #0]
 800707e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007080:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007084:	f023 0820 	bic.w	r8, r3, #32
 8007088:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800708c:	d005      	beq.n	800709a <__cvt+0x3e>
 800708e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007092:	d100      	bne.n	8007096 <__cvt+0x3a>
 8007094:	3601      	adds	r6, #1
 8007096:	2302      	movs	r3, #2
 8007098:	e000      	b.n	800709c <__cvt+0x40>
 800709a:	2303      	movs	r3, #3
 800709c:	aa07      	add	r2, sp, #28
 800709e:	9204      	str	r2, [sp, #16]
 80070a0:	aa06      	add	r2, sp, #24
 80070a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80070a6:	e9cd 3600 	strd	r3, r6, [sp]
 80070aa:	4622      	mov	r2, r4
 80070ac:	462b      	mov	r3, r5
 80070ae:	f000 fe7b 	bl	8007da8 <_dtoa_r>
 80070b2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80070b6:	4607      	mov	r7, r0
 80070b8:	d119      	bne.n	80070ee <__cvt+0x92>
 80070ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070bc:	07db      	lsls	r3, r3, #31
 80070be:	d50e      	bpl.n	80070de <__cvt+0x82>
 80070c0:	eb00 0906 	add.w	r9, r0, r6
 80070c4:	2200      	movs	r2, #0
 80070c6:	2300      	movs	r3, #0
 80070c8:	4620      	mov	r0, r4
 80070ca:	4629      	mov	r1, r5
 80070cc:	f7f9 fc6c 	bl	80009a8 <__aeabi_dcmpeq>
 80070d0:	b108      	cbz	r0, 80070d6 <__cvt+0x7a>
 80070d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80070d6:	2230      	movs	r2, #48	@ 0x30
 80070d8:	9b07      	ldr	r3, [sp, #28]
 80070da:	454b      	cmp	r3, r9
 80070dc:	d31e      	bcc.n	800711c <__cvt+0xc0>
 80070de:	4638      	mov	r0, r7
 80070e0:	9b07      	ldr	r3, [sp, #28]
 80070e2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80070e4:	1bdb      	subs	r3, r3, r7
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	b008      	add	sp, #32
 80070ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070f2:	eb00 0906 	add.w	r9, r0, r6
 80070f6:	d1e5      	bne.n	80070c4 <__cvt+0x68>
 80070f8:	7803      	ldrb	r3, [r0, #0]
 80070fa:	2b30      	cmp	r3, #48	@ 0x30
 80070fc:	d10a      	bne.n	8007114 <__cvt+0xb8>
 80070fe:	2200      	movs	r2, #0
 8007100:	2300      	movs	r3, #0
 8007102:	4620      	mov	r0, r4
 8007104:	4629      	mov	r1, r5
 8007106:	f7f9 fc4f 	bl	80009a8 <__aeabi_dcmpeq>
 800710a:	b918      	cbnz	r0, 8007114 <__cvt+0xb8>
 800710c:	f1c6 0601 	rsb	r6, r6, #1
 8007110:	f8ca 6000 	str.w	r6, [sl]
 8007114:	f8da 3000 	ldr.w	r3, [sl]
 8007118:	4499      	add	r9, r3
 800711a:	e7d3      	b.n	80070c4 <__cvt+0x68>
 800711c:	1c59      	adds	r1, r3, #1
 800711e:	9107      	str	r1, [sp, #28]
 8007120:	701a      	strb	r2, [r3, #0]
 8007122:	e7d9      	b.n	80070d8 <__cvt+0x7c>

08007124 <__exponent>:
 8007124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007126:	2900      	cmp	r1, #0
 8007128:	bfb6      	itet	lt
 800712a:	232d      	movlt	r3, #45	@ 0x2d
 800712c:	232b      	movge	r3, #43	@ 0x2b
 800712e:	4249      	neglt	r1, r1
 8007130:	2909      	cmp	r1, #9
 8007132:	7002      	strb	r2, [r0, #0]
 8007134:	7043      	strb	r3, [r0, #1]
 8007136:	dd29      	ble.n	800718c <__exponent+0x68>
 8007138:	f10d 0307 	add.w	r3, sp, #7
 800713c:	461d      	mov	r5, r3
 800713e:	270a      	movs	r7, #10
 8007140:	fbb1 f6f7 	udiv	r6, r1, r7
 8007144:	461a      	mov	r2, r3
 8007146:	fb07 1416 	mls	r4, r7, r6, r1
 800714a:	3430      	adds	r4, #48	@ 0x30
 800714c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007150:	460c      	mov	r4, r1
 8007152:	2c63      	cmp	r4, #99	@ 0x63
 8007154:	4631      	mov	r1, r6
 8007156:	f103 33ff 	add.w	r3, r3, #4294967295
 800715a:	dcf1      	bgt.n	8007140 <__exponent+0x1c>
 800715c:	3130      	adds	r1, #48	@ 0x30
 800715e:	1e94      	subs	r4, r2, #2
 8007160:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007164:	4623      	mov	r3, r4
 8007166:	1c41      	adds	r1, r0, #1
 8007168:	42ab      	cmp	r3, r5
 800716a:	d30a      	bcc.n	8007182 <__exponent+0x5e>
 800716c:	f10d 0309 	add.w	r3, sp, #9
 8007170:	1a9b      	subs	r3, r3, r2
 8007172:	42ac      	cmp	r4, r5
 8007174:	bf88      	it	hi
 8007176:	2300      	movhi	r3, #0
 8007178:	3302      	adds	r3, #2
 800717a:	4403      	add	r3, r0
 800717c:	1a18      	subs	r0, r3, r0
 800717e:	b003      	add	sp, #12
 8007180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007182:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007186:	f801 6f01 	strb.w	r6, [r1, #1]!
 800718a:	e7ed      	b.n	8007168 <__exponent+0x44>
 800718c:	2330      	movs	r3, #48	@ 0x30
 800718e:	3130      	adds	r1, #48	@ 0x30
 8007190:	7083      	strb	r3, [r0, #2]
 8007192:	70c1      	strb	r1, [r0, #3]
 8007194:	1d03      	adds	r3, r0, #4
 8007196:	e7f1      	b.n	800717c <__exponent+0x58>

08007198 <_printf_float>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	b091      	sub	sp, #68	@ 0x44
 800719e:	460c      	mov	r4, r1
 80071a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80071a4:	4616      	mov	r6, r2
 80071a6:	461f      	mov	r7, r3
 80071a8:	4605      	mov	r5, r0
 80071aa:	f000 fce1 	bl	8007b70 <_localeconv_r>
 80071ae:	6803      	ldr	r3, [r0, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	9308      	str	r3, [sp, #32]
 80071b4:	f7f8 ffcc 	bl	8000150 <strlen>
 80071b8:	2300      	movs	r3, #0
 80071ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80071bc:	f8d8 3000 	ldr.w	r3, [r8]
 80071c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80071c2:	3307      	adds	r3, #7
 80071c4:	f023 0307 	bic.w	r3, r3, #7
 80071c8:	f103 0208 	add.w	r2, r3, #8
 80071cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80071d0:	f8d4 b000 	ldr.w	fp, [r4]
 80071d4:	f8c8 2000 	str.w	r2, [r8]
 80071d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80071e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071e2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80071e6:	f04f 32ff 	mov.w	r2, #4294967295
 80071ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80071f2:	4b9c      	ldr	r3, [pc, #624]	@ (8007464 <_printf_float+0x2cc>)
 80071f4:	f7f9 fc0a 	bl	8000a0c <__aeabi_dcmpun>
 80071f8:	bb70      	cbnz	r0, 8007258 <_printf_float+0xc0>
 80071fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007202:	4b98      	ldr	r3, [pc, #608]	@ (8007464 <_printf_float+0x2cc>)
 8007204:	f7f9 fbe4 	bl	80009d0 <__aeabi_dcmple>
 8007208:	bb30      	cbnz	r0, 8007258 <_printf_float+0xc0>
 800720a:	2200      	movs	r2, #0
 800720c:	2300      	movs	r3, #0
 800720e:	4640      	mov	r0, r8
 8007210:	4649      	mov	r1, r9
 8007212:	f7f9 fbd3 	bl	80009bc <__aeabi_dcmplt>
 8007216:	b110      	cbz	r0, 800721e <_printf_float+0x86>
 8007218:	232d      	movs	r3, #45	@ 0x2d
 800721a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800721e:	4a92      	ldr	r2, [pc, #584]	@ (8007468 <_printf_float+0x2d0>)
 8007220:	4b92      	ldr	r3, [pc, #584]	@ (800746c <_printf_float+0x2d4>)
 8007222:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007226:	bf8c      	ite	hi
 8007228:	4690      	movhi	r8, r2
 800722a:	4698      	movls	r8, r3
 800722c:	2303      	movs	r3, #3
 800722e:	f04f 0900 	mov.w	r9, #0
 8007232:	6123      	str	r3, [r4, #16]
 8007234:	f02b 0304 	bic.w	r3, fp, #4
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	4633      	mov	r3, r6
 800723c:	4621      	mov	r1, r4
 800723e:	4628      	mov	r0, r5
 8007240:	9700      	str	r7, [sp, #0]
 8007242:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007244:	f000 f9d4 	bl	80075f0 <_printf_common>
 8007248:	3001      	adds	r0, #1
 800724a:	f040 8090 	bne.w	800736e <_printf_float+0x1d6>
 800724e:	f04f 30ff 	mov.w	r0, #4294967295
 8007252:	b011      	add	sp, #68	@ 0x44
 8007254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007258:	4642      	mov	r2, r8
 800725a:	464b      	mov	r3, r9
 800725c:	4640      	mov	r0, r8
 800725e:	4649      	mov	r1, r9
 8007260:	f7f9 fbd4 	bl	8000a0c <__aeabi_dcmpun>
 8007264:	b148      	cbz	r0, 800727a <_printf_float+0xe2>
 8007266:	464b      	mov	r3, r9
 8007268:	2b00      	cmp	r3, #0
 800726a:	bfb8      	it	lt
 800726c:	232d      	movlt	r3, #45	@ 0x2d
 800726e:	4a80      	ldr	r2, [pc, #512]	@ (8007470 <_printf_float+0x2d8>)
 8007270:	bfb8      	it	lt
 8007272:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007276:	4b7f      	ldr	r3, [pc, #508]	@ (8007474 <_printf_float+0x2dc>)
 8007278:	e7d3      	b.n	8007222 <_printf_float+0x8a>
 800727a:	6863      	ldr	r3, [r4, #4]
 800727c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	d13f      	bne.n	8007304 <_printf_float+0x16c>
 8007284:	2306      	movs	r3, #6
 8007286:	6063      	str	r3, [r4, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800728e:	6023      	str	r3, [r4, #0]
 8007290:	9206      	str	r2, [sp, #24]
 8007292:	aa0e      	add	r2, sp, #56	@ 0x38
 8007294:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007298:	aa0d      	add	r2, sp, #52	@ 0x34
 800729a:	9203      	str	r2, [sp, #12]
 800729c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80072a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	4642      	mov	r2, r8
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	4628      	mov	r0, r5
 80072ac:	464b      	mov	r3, r9
 80072ae:	910a      	str	r1, [sp, #40]	@ 0x28
 80072b0:	f7ff fed4 	bl	800705c <__cvt>
 80072b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072b6:	4680      	mov	r8, r0
 80072b8:	2947      	cmp	r1, #71	@ 0x47
 80072ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80072bc:	d128      	bne.n	8007310 <_printf_float+0x178>
 80072be:	1cc8      	adds	r0, r1, #3
 80072c0:	db02      	blt.n	80072c8 <_printf_float+0x130>
 80072c2:	6863      	ldr	r3, [r4, #4]
 80072c4:	4299      	cmp	r1, r3
 80072c6:	dd40      	ble.n	800734a <_printf_float+0x1b2>
 80072c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80072cc:	fa5f fa8a 	uxtb.w	sl, sl
 80072d0:	4652      	mov	r2, sl
 80072d2:	3901      	subs	r1, #1
 80072d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80072d8:	910d      	str	r1, [sp, #52]	@ 0x34
 80072da:	f7ff ff23 	bl	8007124 <__exponent>
 80072de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072e0:	4681      	mov	r9, r0
 80072e2:	1813      	adds	r3, r2, r0
 80072e4:	2a01      	cmp	r2, #1
 80072e6:	6123      	str	r3, [r4, #16]
 80072e8:	dc02      	bgt.n	80072f0 <_printf_float+0x158>
 80072ea:	6822      	ldr	r2, [r4, #0]
 80072ec:	07d2      	lsls	r2, r2, #31
 80072ee:	d501      	bpl.n	80072f4 <_printf_float+0x15c>
 80072f0:	3301      	adds	r3, #1
 80072f2:	6123      	str	r3, [r4, #16]
 80072f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d09e      	beq.n	800723a <_printf_float+0xa2>
 80072fc:	232d      	movs	r3, #45	@ 0x2d
 80072fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007302:	e79a      	b.n	800723a <_printf_float+0xa2>
 8007304:	2947      	cmp	r1, #71	@ 0x47
 8007306:	d1bf      	bne.n	8007288 <_printf_float+0xf0>
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1bd      	bne.n	8007288 <_printf_float+0xf0>
 800730c:	2301      	movs	r3, #1
 800730e:	e7ba      	b.n	8007286 <_printf_float+0xee>
 8007310:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007314:	d9dc      	bls.n	80072d0 <_printf_float+0x138>
 8007316:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800731a:	d118      	bne.n	800734e <_printf_float+0x1b6>
 800731c:	2900      	cmp	r1, #0
 800731e:	6863      	ldr	r3, [r4, #4]
 8007320:	dd0b      	ble.n	800733a <_printf_float+0x1a2>
 8007322:	6121      	str	r1, [r4, #16]
 8007324:	b913      	cbnz	r3, 800732c <_printf_float+0x194>
 8007326:	6822      	ldr	r2, [r4, #0]
 8007328:	07d0      	lsls	r0, r2, #31
 800732a:	d502      	bpl.n	8007332 <_printf_float+0x19a>
 800732c:	3301      	adds	r3, #1
 800732e:	440b      	add	r3, r1
 8007330:	6123      	str	r3, [r4, #16]
 8007332:	f04f 0900 	mov.w	r9, #0
 8007336:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007338:	e7dc      	b.n	80072f4 <_printf_float+0x15c>
 800733a:	b913      	cbnz	r3, 8007342 <_printf_float+0x1aa>
 800733c:	6822      	ldr	r2, [r4, #0]
 800733e:	07d2      	lsls	r2, r2, #31
 8007340:	d501      	bpl.n	8007346 <_printf_float+0x1ae>
 8007342:	3302      	adds	r3, #2
 8007344:	e7f4      	b.n	8007330 <_printf_float+0x198>
 8007346:	2301      	movs	r3, #1
 8007348:	e7f2      	b.n	8007330 <_printf_float+0x198>
 800734a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800734e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007350:	4299      	cmp	r1, r3
 8007352:	db05      	blt.n	8007360 <_printf_float+0x1c8>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	6121      	str	r1, [r4, #16]
 8007358:	07d8      	lsls	r0, r3, #31
 800735a:	d5ea      	bpl.n	8007332 <_printf_float+0x19a>
 800735c:	1c4b      	adds	r3, r1, #1
 800735e:	e7e7      	b.n	8007330 <_printf_float+0x198>
 8007360:	2900      	cmp	r1, #0
 8007362:	bfcc      	ite	gt
 8007364:	2201      	movgt	r2, #1
 8007366:	f1c1 0202 	rsble	r2, r1, #2
 800736a:	4413      	add	r3, r2
 800736c:	e7e0      	b.n	8007330 <_printf_float+0x198>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	055a      	lsls	r2, r3, #21
 8007372:	d407      	bmi.n	8007384 <_printf_float+0x1ec>
 8007374:	6923      	ldr	r3, [r4, #16]
 8007376:	4642      	mov	r2, r8
 8007378:	4631      	mov	r1, r6
 800737a:	4628      	mov	r0, r5
 800737c:	47b8      	blx	r7
 800737e:	3001      	adds	r0, #1
 8007380:	d12b      	bne.n	80073da <_printf_float+0x242>
 8007382:	e764      	b.n	800724e <_printf_float+0xb6>
 8007384:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007388:	f240 80dc 	bls.w	8007544 <_printf_float+0x3ac>
 800738c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007390:	2200      	movs	r2, #0
 8007392:	2300      	movs	r3, #0
 8007394:	f7f9 fb08 	bl	80009a8 <__aeabi_dcmpeq>
 8007398:	2800      	cmp	r0, #0
 800739a:	d033      	beq.n	8007404 <_printf_float+0x26c>
 800739c:	2301      	movs	r3, #1
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	4a35      	ldr	r2, [pc, #212]	@ (8007478 <_printf_float+0x2e0>)
 80073a4:	47b8      	blx	r7
 80073a6:	3001      	adds	r0, #1
 80073a8:	f43f af51 	beq.w	800724e <_printf_float+0xb6>
 80073ac:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80073b0:	4543      	cmp	r3, r8
 80073b2:	db02      	blt.n	80073ba <_printf_float+0x222>
 80073b4:	6823      	ldr	r3, [r4, #0]
 80073b6:	07d8      	lsls	r0, r3, #31
 80073b8:	d50f      	bpl.n	80073da <_printf_float+0x242>
 80073ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073be:	4631      	mov	r1, r6
 80073c0:	4628      	mov	r0, r5
 80073c2:	47b8      	blx	r7
 80073c4:	3001      	adds	r0, #1
 80073c6:	f43f af42 	beq.w	800724e <_printf_float+0xb6>
 80073ca:	f04f 0900 	mov.w	r9, #0
 80073ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80073d2:	f104 0a1a 	add.w	sl, r4, #26
 80073d6:	45c8      	cmp	r8, r9
 80073d8:	dc09      	bgt.n	80073ee <_printf_float+0x256>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	079b      	lsls	r3, r3, #30
 80073de:	f100 8102 	bmi.w	80075e6 <_printf_float+0x44e>
 80073e2:	68e0      	ldr	r0, [r4, #12]
 80073e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073e6:	4298      	cmp	r0, r3
 80073e8:	bfb8      	it	lt
 80073ea:	4618      	movlt	r0, r3
 80073ec:	e731      	b.n	8007252 <_printf_float+0xba>
 80073ee:	2301      	movs	r3, #1
 80073f0:	4652      	mov	r2, sl
 80073f2:	4631      	mov	r1, r6
 80073f4:	4628      	mov	r0, r5
 80073f6:	47b8      	blx	r7
 80073f8:	3001      	adds	r0, #1
 80073fa:	f43f af28 	beq.w	800724e <_printf_float+0xb6>
 80073fe:	f109 0901 	add.w	r9, r9, #1
 8007402:	e7e8      	b.n	80073d6 <_printf_float+0x23e>
 8007404:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007406:	2b00      	cmp	r3, #0
 8007408:	dc38      	bgt.n	800747c <_printf_float+0x2e4>
 800740a:	2301      	movs	r3, #1
 800740c:	4631      	mov	r1, r6
 800740e:	4628      	mov	r0, r5
 8007410:	4a19      	ldr	r2, [pc, #100]	@ (8007478 <_printf_float+0x2e0>)
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	f43f af1a 	beq.w	800724e <_printf_float+0xb6>
 800741a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800741e:	ea59 0303 	orrs.w	r3, r9, r3
 8007422:	d102      	bne.n	800742a <_printf_float+0x292>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	07d9      	lsls	r1, r3, #31
 8007428:	d5d7      	bpl.n	80073da <_printf_float+0x242>
 800742a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	f43f af0a 	beq.w	800724e <_printf_float+0xb6>
 800743a:	f04f 0a00 	mov.w	sl, #0
 800743e:	f104 0b1a 	add.w	fp, r4, #26
 8007442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007444:	425b      	negs	r3, r3
 8007446:	4553      	cmp	r3, sl
 8007448:	dc01      	bgt.n	800744e <_printf_float+0x2b6>
 800744a:	464b      	mov	r3, r9
 800744c:	e793      	b.n	8007376 <_printf_float+0x1de>
 800744e:	2301      	movs	r3, #1
 8007450:	465a      	mov	r2, fp
 8007452:	4631      	mov	r1, r6
 8007454:	4628      	mov	r0, r5
 8007456:	47b8      	blx	r7
 8007458:	3001      	adds	r0, #1
 800745a:	f43f aef8 	beq.w	800724e <_printf_float+0xb6>
 800745e:	f10a 0a01 	add.w	sl, sl, #1
 8007462:	e7ee      	b.n	8007442 <_printf_float+0x2aa>
 8007464:	7fefffff 	.word	0x7fefffff
 8007468:	0800ab7e 	.word	0x0800ab7e
 800746c:	0800ab7a 	.word	0x0800ab7a
 8007470:	0800ab86 	.word	0x0800ab86
 8007474:	0800ab82 	.word	0x0800ab82
 8007478:	0800ab8a 	.word	0x0800ab8a
 800747c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800747e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007482:	4553      	cmp	r3, sl
 8007484:	bfa8      	it	ge
 8007486:	4653      	movge	r3, sl
 8007488:	2b00      	cmp	r3, #0
 800748a:	4699      	mov	r9, r3
 800748c:	dc36      	bgt.n	80074fc <_printf_float+0x364>
 800748e:	f04f 0b00 	mov.w	fp, #0
 8007492:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007496:	f104 021a 	add.w	r2, r4, #26
 800749a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800749c:	930a      	str	r3, [sp, #40]	@ 0x28
 800749e:	eba3 0309 	sub.w	r3, r3, r9
 80074a2:	455b      	cmp	r3, fp
 80074a4:	dc31      	bgt.n	800750a <_printf_float+0x372>
 80074a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074a8:	459a      	cmp	sl, r3
 80074aa:	dc3a      	bgt.n	8007522 <_printf_float+0x38a>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	07da      	lsls	r2, r3, #31
 80074b0:	d437      	bmi.n	8007522 <_printf_float+0x38a>
 80074b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074b4:	ebaa 0903 	sub.w	r9, sl, r3
 80074b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ba:	ebaa 0303 	sub.w	r3, sl, r3
 80074be:	4599      	cmp	r9, r3
 80074c0:	bfa8      	it	ge
 80074c2:	4699      	movge	r9, r3
 80074c4:	f1b9 0f00 	cmp.w	r9, #0
 80074c8:	dc33      	bgt.n	8007532 <_printf_float+0x39a>
 80074ca:	f04f 0800 	mov.w	r8, #0
 80074ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074d2:	f104 0b1a 	add.w	fp, r4, #26
 80074d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074d8:	ebaa 0303 	sub.w	r3, sl, r3
 80074dc:	eba3 0309 	sub.w	r3, r3, r9
 80074e0:	4543      	cmp	r3, r8
 80074e2:	f77f af7a 	ble.w	80073da <_printf_float+0x242>
 80074e6:	2301      	movs	r3, #1
 80074e8:	465a      	mov	r2, fp
 80074ea:	4631      	mov	r1, r6
 80074ec:	4628      	mov	r0, r5
 80074ee:	47b8      	blx	r7
 80074f0:	3001      	adds	r0, #1
 80074f2:	f43f aeac 	beq.w	800724e <_printf_float+0xb6>
 80074f6:	f108 0801 	add.w	r8, r8, #1
 80074fa:	e7ec      	b.n	80074d6 <_printf_float+0x33e>
 80074fc:	4642      	mov	r2, r8
 80074fe:	4631      	mov	r1, r6
 8007500:	4628      	mov	r0, r5
 8007502:	47b8      	blx	r7
 8007504:	3001      	adds	r0, #1
 8007506:	d1c2      	bne.n	800748e <_printf_float+0x2f6>
 8007508:	e6a1      	b.n	800724e <_printf_float+0xb6>
 800750a:	2301      	movs	r3, #1
 800750c:	4631      	mov	r1, r6
 800750e:	4628      	mov	r0, r5
 8007510:	920a      	str	r2, [sp, #40]	@ 0x28
 8007512:	47b8      	blx	r7
 8007514:	3001      	adds	r0, #1
 8007516:	f43f ae9a 	beq.w	800724e <_printf_float+0xb6>
 800751a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800751c:	f10b 0b01 	add.w	fp, fp, #1
 8007520:	e7bb      	b.n	800749a <_printf_float+0x302>
 8007522:	4631      	mov	r1, r6
 8007524:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007528:	4628      	mov	r0, r5
 800752a:	47b8      	blx	r7
 800752c:	3001      	adds	r0, #1
 800752e:	d1c0      	bne.n	80074b2 <_printf_float+0x31a>
 8007530:	e68d      	b.n	800724e <_printf_float+0xb6>
 8007532:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007534:	464b      	mov	r3, r9
 8007536:	4631      	mov	r1, r6
 8007538:	4628      	mov	r0, r5
 800753a:	4442      	add	r2, r8
 800753c:	47b8      	blx	r7
 800753e:	3001      	adds	r0, #1
 8007540:	d1c3      	bne.n	80074ca <_printf_float+0x332>
 8007542:	e684      	b.n	800724e <_printf_float+0xb6>
 8007544:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007548:	f1ba 0f01 	cmp.w	sl, #1
 800754c:	dc01      	bgt.n	8007552 <_printf_float+0x3ba>
 800754e:	07db      	lsls	r3, r3, #31
 8007550:	d536      	bpl.n	80075c0 <_printf_float+0x428>
 8007552:	2301      	movs	r3, #1
 8007554:	4642      	mov	r2, r8
 8007556:	4631      	mov	r1, r6
 8007558:	4628      	mov	r0, r5
 800755a:	47b8      	blx	r7
 800755c:	3001      	adds	r0, #1
 800755e:	f43f ae76 	beq.w	800724e <_printf_float+0xb6>
 8007562:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007566:	4631      	mov	r1, r6
 8007568:	4628      	mov	r0, r5
 800756a:	47b8      	blx	r7
 800756c:	3001      	adds	r0, #1
 800756e:	f43f ae6e 	beq.w	800724e <_printf_float+0xb6>
 8007572:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007576:	2200      	movs	r2, #0
 8007578:	2300      	movs	r3, #0
 800757a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800757e:	f7f9 fa13 	bl	80009a8 <__aeabi_dcmpeq>
 8007582:	b9c0      	cbnz	r0, 80075b6 <_printf_float+0x41e>
 8007584:	4653      	mov	r3, sl
 8007586:	f108 0201 	add.w	r2, r8, #1
 800758a:	4631      	mov	r1, r6
 800758c:	4628      	mov	r0, r5
 800758e:	47b8      	blx	r7
 8007590:	3001      	adds	r0, #1
 8007592:	d10c      	bne.n	80075ae <_printf_float+0x416>
 8007594:	e65b      	b.n	800724e <_printf_float+0xb6>
 8007596:	2301      	movs	r3, #1
 8007598:	465a      	mov	r2, fp
 800759a:	4631      	mov	r1, r6
 800759c:	4628      	mov	r0, r5
 800759e:	47b8      	blx	r7
 80075a0:	3001      	adds	r0, #1
 80075a2:	f43f ae54 	beq.w	800724e <_printf_float+0xb6>
 80075a6:	f108 0801 	add.w	r8, r8, #1
 80075aa:	45d0      	cmp	r8, sl
 80075ac:	dbf3      	blt.n	8007596 <_printf_float+0x3fe>
 80075ae:	464b      	mov	r3, r9
 80075b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80075b4:	e6e0      	b.n	8007378 <_printf_float+0x1e0>
 80075b6:	f04f 0800 	mov.w	r8, #0
 80075ba:	f104 0b1a 	add.w	fp, r4, #26
 80075be:	e7f4      	b.n	80075aa <_printf_float+0x412>
 80075c0:	2301      	movs	r3, #1
 80075c2:	4642      	mov	r2, r8
 80075c4:	e7e1      	b.n	800758a <_printf_float+0x3f2>
 80075c6:	2301      	movs	r3, #1
 80075c8:	464a      	mov	r2, r9
 80075ca:	4631      	mov	r1, r6
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	f43f ae3c 	beq.w	800724e <_printf_float+0xb6>
 80075d6:	f108 0801 	add.w	r8, r8, #1
 80075da:	68e3      	ldr	r3, [r4, #12]
 80075dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80075de:	1a5b      	subs	r3, r3, r1
 80075e0:	4543      	cmp	r3, r8
 80075e2:	dcf0      	bgt.n	80075c6 <_printf_float+0x42e>
 80075e4:	e6fd      	b.n	80073e2 <_printf_float+0x24a>
 80075e6:	f04f 0800 	mov.w	r8, #0
 80075ea:	f104 0919 	add.w	r9, r4, #25
 80075ee:	e7f4      	b.n	80075da <_printf_float+0x442>

080075f0 <_printf_common>:
 80075f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f4:	4616      	mov	r6, r2
 80075f6:	4698      	mov	r8, r3
 80075f8:	688a      	ldr	r2, [r1, #8]
 80075fa:	690b      	ldr	r3, [r1, #16]
 80075fc:	4607      	mov	r7, r0
 80075fe:	4293      	cmp	r3, r2
 8007600:	bfb8      	it	lt
 8007602:	4613      	movlt	r3, r2
 8007604:	6033      	str	r3, [r6, #0]
 8007606:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800760a:	460c      	mov	r4, r1
 800760c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007610:	b10a      	cbz	r2, 8007616 <_printf_common+0x26>
 8007612:	3301      	adds	r3, #1
 8007614:	6033      	str	r3, [r6, #0]
 8007616:	6823      	ldr	r3, [r4, #0]
 8007618:	0699      	lsls	r1, r3, #26
 800761a:	bf42      	ittt	mi
 800761c:	6833      	ldrmi	r3, [r6, #0]
 800761e:	3302      	addmi	r3, #2
 8007620:	6033      	strmi	r3, [r6, #0]
 8007622:	6825      	ldr	r5, [r4, #0]
 8007624:	f015 0506 	ands.w	r5, r5, #6
 8007628:	d106      	bne.n	8007638 <_printf_common+0x48>
 800762a:	f104 0a19 	add.w	sl, r4, #25
 800762e:	68e3      	ldr	r3, [r4, #12]
 8007630:	6832      	ldr	r2, [r6, #0]
 8007632:	1a9b      	subs	r3, r3, r2
 8007634:	42ab      	cmp	r3, r5
 8007636:	dc2b      	bgt.n	8007690 <_printf_common+0xa0>
 8007638:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800763c:	6822      	ldr	r2, [r4, #0]
 800763e:	3b00      	subs	r3, #0
 8007640:	bf18      	it	ne
 8007642:	2301      	movne	r3, #1
 8007644:	0692      	lsls	r2, r2, #26
 8007646:	d430      	bmi.n	80076aa <_printf_common+0xba>
 8007648:	4641      	mov	r1, r8
 800764a:	4638      	mov	r0, r7
 800764c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007650:	47c8      	blx	r9
 8007652:	3001      	adds	r0, #1
 8007654:	d023      	beq.n	800769e <_printf_common+0xae>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	6922      	ldr	r2, [r4, #16]
 800765a:	f003 0306 	and.w	r3, r3, #6
 800765e:	2b04      	cmp	r3, #4
 8007660:	bf14      	ite	ne
 8007662:	2500      	movne	r5, #0
 8007664:	6833      	ldreq	r3, [r6, #0]
 8007666:	f04f 0600 	mov.w	r6, #0
 800766a:	bf08      	it	eq
 800766c:	68e5      	ldreq	r5, [r4, #12]
 800766e:	f104 041a 	add.w	r4, r4, #26
 8007672:	bf08      	it	eq
 8007674:	1aed      	subeq	r5, r5, r3
 8007676:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800767a:	bf08      	it	eq
 800767c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007680:	4293      	cmp	r3, r2
 8007682:	bfc4      	itt	gt
 8007684:	1a9b      	subgt	r3, r3, r2
 8007686:	18ed      	addgt	r5, r5, r3
 8007688:	42b5      	cmp	r5, r6
 800768a:	d11a      	bne.n	80076c2 <_printf_common+0xd2>
 800768c:	2000      	movs	r0, #0
 800768e:	e008      	b.n	80076a2 <_printf_common+0xb2>
 8007690:	2301      	movs	r3, #1
 8007692:	4652      	mov	r2, sl
 8007694:	4641      	mov	r1, r8
 8007696:	4638      	mov	r0, r7
 8007698:	47c8      	blx	r9
 800769a:	3001      	adds	r0, #1
 800769c:	d103      	bne.n	80076a6 <_printf_common+0xb6>
 800769e:	f04f 30ff 	mov.w	r0, #4294967295
 80076a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a6:	3501      	adds	r5, #1
 80076a8:	e7c1      	b.n	800762e <_printf_common+0x3e>
 80076aa:	2030      	movs	r0, #48	@ 0x30
 80076ac:	18e1      	adds	r1, r4, r3
 80076ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076b8:	4422      	add	r2, r4
 80076ba:	3302      	adds	r3, #2
 80076bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076c0:	e7c2      	b.n	8007648 <_printf_common+0x58>
 80076c2:	2301      	movs	r3, #1
 80076c4:	4622      	mov	r2, r4
 80076c6:	4641      	mov	r1, r8
 80076c8:	4638      	mov	r0, r7
 80076ca:	47c8      	blx	r9
 80076cc:	3001      	adds	r0, #1
 80076ce:	d0e6      	beq.n	800769e <_printf_common+0xae>
 80076d0:	3601      	adds	r6, #1
 80076d2:	e7d9      	b.n	8007688 <_printf_common+0x98>

080076d4 <_printf_i>:
 80076d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076d8:	7e0f      	ldrb	r7, [r1, #24]
 80076da:	4691      	mov	r9, r2
 80076dc:	2f78      	cmp	r7, #120	@ 0x78
 80076de:	4680      	mov	r8, r0
 80076e0:	460c      	mov	r4, r1
 80076e2:	469a      	mov	sl, r3
 80076e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076ea:	d807      	bhi.n	80076fc <_printf_i+0x28>
 80076ec:	2f62      	cmp	r7, #98	@ 0x62
 80076ee:	d80a      	bhi.n	8007706 <_printf_i+0x32>
 80076f0:	2f00      	cmp	r7, #0
 80076f2:	f000 80d1 	beq.w	8007898 <_printf_i+0x1c4>
 80076f6:	2f58      	cmp	r7, #88	@ 0x58
 80076f8:	f000 80b8 	beq.w	800786c <_printf_i+0x198>
 80076fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007700:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007704:	e03a      	b.n	800777c <_printf_i+0xa8>
 8007706:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800770a:	2b15      	cmp	r3, #21
 800770c:	d8f6      	bhi.n	80076fc <_printf_i+0x28>
 800770e:	a101      	add	r1, pc, #4	@ (adr r1, 8007714 <_printf_i+0x40>)
 8007710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007714:	0800776d 	.word	0x0800776d
 8007718:	08007781 	.word	0x08007781
 800771c:	080076fd 	.word	0x080076fd
 8007720:	080076fd 	.word	0x080076fd
 8007724:	080076fd 	.word	0x080076fd
 8007728:	080076fd 	.word	0x080076fd
 800772c:	08007781 	.word	0x08007781
 8007730:	080076fd 	.word	0x080076fd
 8007734:	080076fd 	.word	0x080076fd
 8007738:	080076fd 	.word	0x080076fd
 800773c:	080076fd 	.word	0x080076fd
 8007740:	0800787f 	.word	0x0800787f
 8007744:	080077ab 	.word	0x080077ab
 8007748:	08007839 	.word	0x08007839
 800774c:	080076fd 	.word	0x080076fd
 8007750:	080076fd 	.word	0x080076fd
 8007754:	080078a1 	.word	0x080078a1
 8007758:	080076fd 	.word	0x080076fd
 800775c:	080077ab 	.word	0x080077ab
 8007760:	080076fd 	.word	0x080076fd
 8007764:	080076fd 	.word	0x080076fd
 8007768:	08007841 	.word	0x08007841
 800776c:	6833      	ldr	r3, [r6, #0]
 800776e:	1d1a      	adds	r2, r3, #4
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6032      	str	r2, [r6, #0]
 8007774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007778:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800777c:	2301      	movs	r3, #1
 800777e:	e09c      	b.n	80078ba <_printf_i+0x1e6>
 8007780:	6833      	ldr	r3, [r6, #0]
 8007782:	6820      	ldr	r0, [r4, #0]
 8007784:	1d19      	adds	r1, r3, #4
 8007786:	6031      	str	r1, [r6, #0]
 8007788:	0606      	lsls	r6, r0, #24
 800778a:	d501      	bpl.n	8007790 <_printf_i+0xbc>
 800778c:	681d      	ldr	r5, [r3, #0]
 800778e:	e003      	b.n	8007798 <_printf_i+0xc4>
 8007790:	0645      	lsls	r5, r0, #25
 8007792:	d5fb      	bpl.n	800778c <_printf_i+0xb8>
 8007794:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007798:	2d00      	cmp	r5, #0
 800779a:	da03      	bge.n	80077a4 <_printf_i+0xd0>
 800779c:	232d      	movs	r3, #45	@ 0x2d
 800779e:	426d      	negs	r5, r5
 80077a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077a4:	230a      	movs	r3, #10
 80077a6:	4858      	ldr	r0, [pc, #352]	@ (8007908 <_printf_i+0x234>)
 80077a8:	e011      	b.n	80077ce <_printf_i+0xfa>
 80077aa:	6821      	ldr	r1, [r4, #0]
 80077ac:	6833      	ldr	r3, [r6, #0]
 80077ae:	0608      	lsls	r0, r1, #24
 80077b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80077b4:	d402      	bmi.n	80077bc <_printf_i+0xe8>
 80077b6:	0649      	lsls	r1, r1, #25
 80077b8:	bf48      	it	mi
 80077ba:	b2ad      	uxthmi	r5, r5
 80077bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80077be:	6033      	str	r3, [r6, #0]
 80077c0:	bf14      	ite	ne
 80077c2:	230a      	movne	r3, #10
 80077c4:	2308      	moveq	r3, #8
 80077c6:	4850      	ldr	r0, [pc, #320]	@ (8007908 <_printf_i+0x234>)
 80077c8:	2100      	movs	r1, #0
 80077ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077ce:	6866      	ldr	r6, [r4, #4]
 80077d0:	2e00      	cmp	r6, #0
 80077d2:	60a6      	str	r6, [r4, #8]
 80077d4:	db05      	blt.n	80077e2 <_printf_i+0x10e>
 80077d6:	6821      	ldr	r1, [r4, #0]
 80077d8:	432e      	orrs	r6, r5
 80077da:	f021 0104 	bic.w	r1, r1, #4
 80077de:	6021      	str	r1, [r4, #0]
 80077e0:	d04b      	beq.n	800787a <_printf_i+0x1a6>
 80077e2:	4616      	mov	r6, r2
 80077e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80077e8:	fb03 5711 	mls	r7, r3, r1, r5
 80077ec:	5dc7      	ldrb	r7, [r0, r7]
 80077ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077f2:	462f      	mov	r7, r5
 80077f4:	42bb      	cmp	r3, r7
 80077f6:	460d      	mov	r5, r1
 80077f8:	d9f4      	bls.n	80077e4 <_printf_i+0x110>
 80077fa:	2b08      	cmp	r3, #8
 80077fc:	d10b      	bne.n	8007816 <_printf_i+0x142>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	07df      	lsls	r7, r3, #31
 8007802:	d508      	bpl.n	8007816 <_printf_i+0x142>
 8007804:	6923      	ldr	r3, [r4, #16]
 8007806:	6861      	ldr	r1, [r4, #4]
 8007808:	4299      	cmp	r1, r3
 800780a:	bfde      	ittt	le
 800780c:	2330      	movle	r3, #48	@ 0x30
 800780e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007812:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007816:	1b92      	subs	r2, r2, r6
 8007818:	6122      	str	r2, [r4, #16]
 800781a:	464b      	mov	r3, r9
 800781c:	4621      	mov	r1, r4
 800781e:	4640      	mov	r0, r8
 8007820:	f8cd a000 	str.w	sl, [sp]
 8007824:	aa03      	add	r2, sp, #12
 8007826:	f7ff fee3 	bl	80075f0 <_printf_common>
 800782a:	3001      	adds	r0, #1
 800782c:	d14a      	bne.n	80078c4 <_printf_i+0x1f0>
 800782e:	f04f 30ff 	mov.w	r0, #4294967295
 8007832:	b004      	add	sp, #16
 8007834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	f043 0320 	orr.w	r3, r3, #32
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	2778      	movs	r7, #120	@ 0x78
 8007842:	4832      	ldr	r0, [pc, #200]	@ (800790c <_printf_i+0x238>)
 8007844:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	6831      	ldr	r1, [r6, #0]
 800784c:	061f      	lsls	r7, r3, #24
 800784e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007852:	d402      	bmi.n	800785a <_printf_i+0x186>
 8007854:	065f      	lsls	r7, r3, #25
 8007856:	bf48      	it	mi
 8007858:	b2ad      	uxthmi	r5, r5
 800785a:	6031      	str	r1, [r6, #0]
 800785c:	07d9      	lsls	r1, r3, #31
 800785e:	bf44      	itt	mi
 8007860:	f043 0320 	orrmi.w	r3, r3, #32
 8007864:	6023      	strmi	r3, [r4, #0]
 8007866:	b11d      	cbz	r5, 8007870 <_printf_i+0x19c>
 8007868:	2310      	movs	r3, #16
 800786a:	e7ad      	b.n	80077c8 <_printf_i+0xf4>
 800786c:	4826      	ldr	r0, [pc, #152]	@ (8007908 <_printf_i+0x234>)
 800786e:	e7e9      	b.n	8007844 <_printf_i+0x170>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	f023 0320 	bic.w	r3, r3, #32
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	e7f6      	b.n	8007868 <_printf_i+0x194>
 800787a:	4616      	mov	r6, r2
 800787c:	e7bd      	b.n	80077fa <_printf_i+0x126>
 800787e:	6833      	ldr	r3, [r6, #0]
 8007880:	6825      	ldr	r5, [r4, #0]
 8007882:	1d18      	adds	r0, r3, #4
 8007884:	6961      	ldr	r1, [r4, #20]
 8007886:	6030      	str	r0, [r6, #0]
 8007888:	062e      	lsls	r6, r5, #24
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	d501      	bpl.n	8007892 <_printf_i+0x1be>
 800788e:	6019      	str	r1, [r3, #0]
 8007890:	e002      	b.n	8007898 <_printf_i+0x1c4>
 8007892:	0668      	lsls	r0, r5, #25
 8007894:	d5fb      	bpl.n	800788e <_printf_i+0x1ba>
 8007896:	8019      	strh	r1, [r3, #0]
 8007898:	2300      	movs	r3, #0
 800789a:	4616      	mov	r6, r2
 800789c:	6123      	str	r3, [r4, #16]
 800789e:	e7bc      	b.n	800781a <_printf_i+0x146>
 80078a0:	6833      	ldr	r3, [r6, #0]
 80078a2:	2100      	movs	r1, #0
 80078a4:	1d1a      	adds	r2, r3, #4
 80078a6:	6032      	str	r2, [r6, #0]
 80078a8:	681e      	ldr	r6, [r3, #0]
 80078aa:	6862      	ldr	r2, [r4, #4]
 80078ac:	4630      	mov	r0, r6
 80078ae:	f000 f9d6 	bl	8007c5e <memchr>
 80078b2:	b108      	cbz	r0, 80078b8 <_printf_i+0x1e4>
 80078b4:	1b80      	subs	r0, r0, r6
 80078b6:	6060      	str	r0, [r4, #4]
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	6123      	str	r3, [r4, #16]
 80078bc:	2300      	movs	r3, #0
 80078be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078c2:	e7aa      	b.n	800781a <_printf_i+0x146>
 80078c4:	4632      	mov	r2, r6
 80078c6:	4649      	mov	r1, r9
 80078c8:	4640      	mov	r0, r8
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	47d0      	blx	sl
 80078ce:	3001      	adds	r0, #1
 80078d0:	d0ad      	beq.n	800782e <_printf_i+0x15a>
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	079b      	lsls	r3, r3, #30
 80078d6:	d413      	bmi.n	8007900 <_printf_i+0x22c>
 80078d8:	68e0      	ldr	r0, [r4, #12]
 80078da:	9b03      	ldr	r3, [sp, #12]
 80078dc:	4298      	cmp	r0, r3
 80078de:	bfb8      	it	lt
 80078e0:	4618      	movlt	r0, r3
 80078e2:	e7a6      	b.n	8007832 <_printf_i+0x15e>
 80078e4:	2301      	movs	r3, #1
 80078e6:	4632      	mov	r2, r6
 80078e8:	4649      	mov	r1, r9
 80078ea:	4640      	mov	r0, r8
 80078ec:	47d0      	blx	sl
 80078ee:	3001      	adds	r0, #1
 80078f0:	d09d      	beq.n	800782e <_printf_i+0x15a>
 80078f2:	3501      	adds	r5, #1
 80078f4:	68e3      	ldr	r3, [r4, #12]
 80078f6:	9903      	ldr	r1, [sp, #12]
 80078f8:	1a5b      	subs	r3, r3, r1
 80078fa:	42ab      	cmp	r3, r5
 80078fc:	dcf2      	bgt.n	80078e4 <_printf_i+0x210>
 80078fe:	e7eb      	b.n	80078d8 <_printf_i+0x204>
 8007900:	2500      	movs	r5, #0
 8007902:	f104 0619 	add.w	r6, r4, #25
 8007906:	e7f5      	b.n	80078f4 <_printf_i+0x220>
 8007908:	0800ab8c 	.word	0x0800ab8c
 800790c:	0800ab9d 	.word	0x0800ab9d

08007910 <std>:
 8007910:	2300      	movs	r3, #0
 8007912:	b510      	push	{r4, lr}
 8007914:	4604      	mov	r4, r0
 8007916:	e9c0 3300 	strd	r3, r3, [r0]
 800791a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800791e:	6083      	str	r3, [r0, #8]
 8007920:	8181      	strh	r1, [r0, #12]
 8007922:	6643      	str	r3, [r0, #100]	@ 0x64
 8007924:	81c2      	strh	r2, [r0, #14]
 8007926:	6183      	str	r3, [r0, #24]
 8007928:	4619      	mov	r1, r3
 800792a:	2208      	movs	r2, #8
 800792c:	305c      	adds	r0, #92	@ 0x5c
 800792e:	f000 f916 	bl	8007b5e <memset>
 8007932:	4b0d      	ldr	r3, [pc, #52]	@ (8007968 <std+0x58>)
 8007934:	6224      	str	r4, [r4, #32]
 8007936:	6263      	str	r3, [r4, #36]	@ 0x24
 8007938:	4b0c      	ldr	r3, [pc, #48]	@ (800796c <std+0x5c>)
 800793a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800793c:	4b0c      	ldr	r3, [pc, #48]	@ (8007970 <std+0x60>)
 800793e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007940:	4b0c      	ldr	r3, [pc, #48]	@ (8007974 <std+0x64>)
 8007942:	6323      	str	r3, [r4, #48]	@ 0x30
 8007944:	4b0c      	ldr	r3, [pc, #48]	@ (8007978 <std+0x68>)
 8007946:	429c      	cmp	r4, r3
 8007948:	d006      	beq.n	8007958 <std+0x48>
 800794a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800794e:	4294      	cmp	r4, r2
 8007950:	d002      	beq.n	8007958 <std+0x48>
 8007952:	33d0      	adds	r3, #208	@ 0xd0
 8007954:	429c      	cmp	r4, r3
 8007956:	d105      	bne.n	8007964 <std+0x54>
 8007958:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800795c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007960:	f000 b97a 	b.w	8007c58 <__retarget_lock_init_recursive>
 8007964:	bd10      	pop	{r4, pc}
 8007966:	bf00      	nop
 8007968:	08007ad9 	.word	0x08007ad9
 800796c:	08007afb 	.word	0x08007afb
 8007970:	08007b33 	.word	0x08007b33
 8007974:	08007b57 	.word	0x08007b57
 8007978:	200003bc 	.word	0x200003bc

0800797c <stdio_exit_handler>:
 800797c:	4a02      	ldr	r2, [pc, #8]	@ (8007988 <stdio_exit_handler+0xc>)
 800797e:	4903      	ldr	r1, [pc, #12]	@ (800798c <stdio_exit_handler+0x10>)
 8007980:	4803      	ldr	r0, [pc, #12]	@ (8007990 <stdio_exit_handler+0x14>)
 8007982:	f000 b869 	b.w	8007a58 <_fwalk_sglue>
 8007986:	bf00      	nop
 8007988:	2000000c 	.word	0x2000000c
 800798c:	080095f1 	.word	0x080095f1
 8007990:	2000001c 	.word	0x2000001c

08007994 <cleanup_stdio>:
 8007994:	6841      	ldr	r1, [r0, #4]
 8007996:	4b0c      	ldr	r3, [pc, #48]	@ (80079c8 <cleanup_stdio+0x34>)
 8007998:	b510      	push	{r4, lr}
 800799a:	4299      	cmp	r1, r3
 800799c:	4604      	mov	r4, r0
 800799e:	d001      	beq.n	80079a4 <cleanup_stdio+0x10>
 80079a0:	f001 fe26 	bl	80095f0 <_fflush_r>
 80079a4:	68a1      	ldr	r1, [r4, #8]
 80079a6:	4b09      	ldr	r3, [pc, #36]	@ (80079cc <cleanup_stdio+0x38>)
 80079a8:	4299      	cmp	r1, r3
 80079aa:	d002      	beq.n	80079b2 <cleanup_stdio+0x1e>
 80079ac:	4620      	mov	r0, r4
 80079ae:	f001 fe1f 	bl	80095f0 <_fflush_r>
 80079b2:	68e1      	ldr	r1, [r4, #12]
 80079b4:	4b06      	ldr	r3, [pc, #24]	@ (80079d0 <cleanup_stdio+0x3c>)
 80079b6:	4299      	cmp	r1, r3
 80079b8:	d004      	beq.n	80079c4 <cleanup_stdio+0x30>
 80079ba:	4620      	mov	r0, r4
 80079bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c0:	f001 be16 	b.w	80095f0 <_fflush_r>
 80079c4:	bd10      	pop	{r4, pc}
 80079c6:	bf00      	nop
 80079c8:	200003bc 	.word	0x200003bc
 80079cc:	20000424 	.word	0x20000424
 80079d0:	2000048c 	.word	0x2000048c

080079d4 <global_stdio_init.part.0>:
 80079d4:	b510      	push	{r4, lr}
 80079d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a04 <global_stdio_init.part.0+0x30>)
 80079d8:	4c0b      	ldr	r4, [pc, #44]	@ (8007a08 <global_stdio_init.part.0+0x34>)
 80079da:	4a0c      	ldr	r2, [pc, #48]	@ (8007a0c <global_stdio_init.part.0+0x38>)
 80079dc:	4620      	mov	r0, r4
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	2104      	movs	r1, #4
 80079e2:	2200      	movs	r2, #0
 80079e4:	f7ff ff94 	bl	8007910 <std>
 80079e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079ec:	2201      	movs	r2, #1
 80079ee:	2109      	movs	r1, #9
 80079f0:	f7ff ff8e 	bl	8007910 <std>
 80079f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079f8:	2202      	movs	r2, #2
 80079fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079fe:	2112      	movs	r1, #18
 8007a00:	f7ff bf86 	b.w	8007910 <std>
 8007a04:	200004f4 	.word	0x200004f4
 8007a08:	200003bc 	.word	0x200003bc
 8007a0c:	0800797d 	.word	0x0800797d

08007a10 <__sfp_lock_acquire>:
 8007a10:	4801      	ldr	r0, [pc, #4]	@ (8007a18 <__sfp_lock_acquire+0x8>)
 8007a12:	f000 b922 	b.w	8007c5a <__retarget_lock_acquire_recursive>
 8007a16:	bf00      	nop
 8007a18:	200004fd 	.word	0x200004fd

08007a1c <__sfp_lock_release>:
 8007a1c:	4801      	ldr	r0, [pc, #4]	@ (8007a24 <__sfp_lock_release+0x8>)
 8007a1e:	f000 b91d 	b.w	8007c5c <__retarget_lock_release_recursive>
 8007a22:	bf00      	nop
 8007a24:	200004fd 	.word	0x200004fd

08007a28 <__sinit>:
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	f7ff fff0 	bl	8007a10 <__sfp_lock_acquire>
 8007a30:	6a23      	ldr	r3, [r4, #32]
 8007a32:	b11b      	cbz	r3, 8007a3c <__sinit+0x14>
 8007a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a38:	f7ff bff0 	b.w	8007a1c <__sfp_lock_release>
 8007a3c:	4b04      	ldr	r3, [pc, #16]	@ (8007a50 <__sinit+0x28>)
 8007a3e:	6223      	str	r3, [r4, #32]
 8007a40:	4b04      	ldr	r3, [pc, #16]	@ (8007a54 <__sinit+0x2c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1f5      	bne.n	8007a34 <__sinit+0xc>
 8007a48:	f7ff ffc4 	bl	80079d4 <global_stdio_init.part.0>
 8007a4c:	e7f2      	b.n	8007a34 <__sinit+0xc>
 8007a4e:	bf00      	nop
 8007a50:	08007995 	.word	0x08007995
 8007a54:	200004f4 	.word	0x200004f4

08007a58 <_fwalk_sglue>:
 8007a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	4688      	mov	r8, r1
 8007a60:	4614      	mov	r4, r2
 8007a62:	2600      	movs	r6, #0
 8007a64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a68:	f1b9 0901 	subs.w	r9, r9, #1
 8007a6c:	d505      	bpl.n	8007a7a <_fwalk_sglue+0x22>
 8007a6e:	6824      	ldr	r4, [r4, #0]
 8007a70:	2c00      	cmp	r4, #0
 8007a72:	d1f7      	bne.n	8007a64 <_fwalk_sglue+0xc>
 8007a74:	4630      	mov	r0, r6
 8007a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a7a:	89ab      	ldrh	r3, [r5, #12]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d907      	bls.n	8007a90 <_fwalk_sglue+0x38>
 8007a80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a84:	3301      	adds	r3, #1
 8007a86:	d003      	beq.n	8007a90 <_fwalk_sglue+0x38>
 8007a88:	4629      	mov	r1, r5
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	47c0      	blx	r8
 8007a8e:	4306      	orrs	r6, r0
 8007a90:	3568      	adds	r5, #104	@ 0x68
 8007a92:	e7e9      	b.n	8007a68 <_fwalk_sglue+0x10>

08007a94 <siprintf>:
 8007a94:	b40e      	push	{r1, r2, r3}
 8007a96:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a9a:	b510      	push	{r4, lr}
 8007a9c:	2400      	movs	r4, #0
 8007a9e:	b09d      	sub	sp, #116	@ 0x74
 8007aa0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007aa2:	9002      	str	r0, [sp, #8]
 8007aa4:	9006      	str	r0, [sp, #24]
 8007aa6:	9107      	str	r1, [sp, #28]
 8007aa8:	9104      	str	r1, [sp, #16]
 8007aaa:	4809      	ldr	r0, [pc, #36]	@ (8007ad0 <siprintf+0x3c>)
 8007aac:	4909      	ldr	r1, [pc, #36]	@ (8007ad4 <siprintf+0x40>)
 8007aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ab2:	9105      	str	r1, [sp, #20]
 8007ab4:	6800      	ldr	r0, [r0, #0]
 8007ab6:	a902      	add	r1, sp, #8
 8007ab8:	9301      	str	r3, [sp, #4]
 8007aba:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007abc:	f001 fc1c 	bl	80092f8 <_svfiprintf_r>
 8007ac0:	9b02      	ldr	r3, [sp, #8]
 8007ac2:	701c      	strb	r4, [r3, #0]
 8007ac4:	b01d      	add	sp, #116	@ 0x74
 8007ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aca:	b003      	add	sp, #12
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	20000018 	.word	0x20000018
 8007ad4:	ffff0208 	.word	0xffff0208

08007ad8 <__sread>:
 8007ad8:	b510      	push	{r4, lr}
 8007ada:	460c      	mov	r4, r1
 8007adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae0:	f000 f86c 	bl	8007bbc <_read_r>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	bfab      	itete	ge
 8007ae8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007aea:	89a3      	ldrhlt	r3, [r4, #12]
 8007aec:	181b      	addge	r3, r3, r0
 8007aee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007af2:	bfac      	ite	ge
 8007af4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007af6:	81a3      	strhlt	r3, [r4, #12]
 8007af8:	bd10      	pop	{r4, pc}

08007afa <__swrite>:
 8007afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afe:	461f      	mov	r7, r3
 8007b00:	898b      	ldrh	r3, [r1, #12]
 8007b02:	4605      	mov	r5, r0
 8007b04:	05db      	lsls	r3, r3, #23
 8007b06:	460c      	mov	r4, r1
 8007b08:	4616      	mov	r6, r2
 8007b0a:	d505      	bpl.n	8007b18 <__swrite+0x1e>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b14:	f000 f840 	bl	8007b98 <_lseek_r>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	4632      	mov	r2, r6
 8007b1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	4628      	mov	r0, r5
 8007b24:	463b      	mov	r3, r7
 8007b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2e:	f000 b857 	b.w	8007be0 <_write_r>

08007b32 <__sseek>:
 8007b32:	b510      	push	{r4, lr}
 8007b34:	460c      	mov	r4, r1
 8007b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b3a:	f000 f82d 	bl	8007b98 <_lseek_r>
 8007b3e:	1c43      	adds	r3, r0, #1
 8007b40:	89a3      	ldrh	r3, [r4, #12]
 8007b42:	bf15      	itete	ne
 8007b44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b4e:	81a3      	strheq	r3, [r4, #12]
 8007b50:	bf18      	it	ne
 8007b52:	81a3      	strhne	r3, [r4, #12]
 8007b54:	bd10      	pop	{r4, pc}

08007b56 <__sclose>:
 8007b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5a:	f000 b80d 	b.w	8007b78 <_close_r>

08007b5e <memset>:
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4402      	add	r2, r0
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d100      	bne.n	8007b68 <memset+0xa>
 8007b66:	4770      	bx	lr
 8007b68:	f803 1b01 	strb.w	r1, [r3], #1
 8007b6c:	e7f9      	b.n	8007b62 <memset+0x4>
	...

08007b70 <_localeconv_r>:
 8007b70:	4800      	ldr	r0, [pc, #0]	@ (8007b74 <_localeconv_r+0x4>)
 8007b72:	4770      	bx	lr
 8007b74:	20000158 	.word	0x20000158

08007b78 <_close_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4d05      	ldr	r5, [pc, #20]	@ (8007b94 <_close_r+0x1c>)
 8007b7e:	4604      	mov	r4, r0
 8007b80:	4608      	mov	r0, r1
 8007b82:	602b      	str	r3, [r5, #0]
 8007b84:	f7fa fd01 	bl	800258a <_close>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d102      	bne.n	8007b92 <_close_r+0x1a>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	b103      	cbz	r3, 8007b92 <_close_r+0x1a>
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	200004f8 	.word	0x200004f8

08007b98 <_lseek_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4d05      	ldr	r5, [pc, #20]	@ (8007bb8 <_lseek_r+0x20>)
 8007ba4:	602a      	str	r2, [r5, #0]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	f7fa fd13 	bl	80025d2 <_lseek>
 8007bac:	1c43      	adds	r3, r0, #1
 8007bae:	d102      	bne.n	8007bb6 <_lseek_r+0x1e>
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	b103      	cbz	r3, 8007bb6 <_lseek_r+0x1e>
 8007bb4:	6023      	str	r3, [r4, #0]
 8007bb6:	bd38      	pop	{r3, r4, r5, pc}
 8007bb8:	200004f8 	.word	0x200004f8

08007bbc <_read_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	4d05      	ldr	r5, [pc, #20]	@ (8007bdc <_read_r+0x20>)
 8007bc8:	602a      	str	r2, [r5, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f7fa fca4 	bl	8002518 <_read>
 8007bd0:	1c43      	adds	r3, r0, #1
 8007bd2:	d102      	bne.n	8007bda <_read_r+0x1e>
 8007bd4:	682b      	ldr	r3, [r5, #0]
 8007bd6:	b103      	cbz	r3, 8007bda <_read_r+0x1e>
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	bd38      	pop	{r3, r4, r5, pc}
 8007bdc:	200004f8 	.word	0x200004f8

08007be0 <_write_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	4604      	mov	r4, r0
 8007be4:	4608      	mov	r0, r1
 8007be6:	4611      	mov	r1, r2
 8007be8:	2200      	movs	r2, #0
 8007bea:	4d05      	ldr	r5, [pc, #20]	@ (8007c00 <_write_r+0x20>)
 8007bec:	602a      	str	r2, [r5, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f7fa fcaf 	bl	8002552 <_write>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	d102      	bne.n	8007bfe <_write_r+0x1e>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	b103      	cbz	r3, 8007bfe <_write_r+0x1e>
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	bd38      	pop	{r3, r4, r5, pc}
 8007c00:	200004f8 	.word	0x200004f8

08007c04 <__errno>:
 8007c04:	4b01      	ldr	r3, [pc, #4]	@ (8007c0c <__errno+0x8>)
 8007c06:	6818      	ldr	r0, [r3, #0]
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	20000018 	.word	0x20000018

08007c10 <__libc_init_array>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	2600      	movs	r6, #0
 8007c14:	4d0c      	ldr	r5, [pc, #48]	@ (8007c48 <__libc_init_array+0x38>)
 8007c16:	4c0d      	ldr	r4, [pc, #52]	@ (8007c4c <__libc_init_array+0x3c>)
 8007c18:	1b64      	subs	r4, r4, r5
 8007c1a:	10a4      	asrs	r4, r4, #2
 8007c1c:	42a6      	cmp	r6, r4
 8007c1e:	d109      	bne.n	8007c34 <__libc_init_array+0x24>
 8007c20:	f002 ff7e 	bl	800ab20 <_init>
 8007c24:	2600      	movs	r6, #0
 8007c26:	4d0a      	ldr	r5, [pc, #40]	@ (8007c50 <__libc_init_array+0x40>)
 8007c28:	4c0a      	ldr	r4, [pc, #40]	@ (8007c54 <__libc_init_array+0x44>)
 8007c2a:	1b64      	subs	r4, r4, r5
 8007c2c:	10a4      	asrs	r4, r4, #2
 8007c2e:	42a6      	cmp	r6, r4
 8007c30:	d105      	bne.n	8007c3e <__libc_init_array+0x2e>
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
 8007c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c38:	4798      	blx	r3
 8007c3a:	3601      	adds	r6, #1
 8007c3c:	e7ee      	b.n	8007c1c <__libc_init_array+0xc>
 8007c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c42:	4798      	blx	r3
 8007c44:	3601      	adds	r6, #1
 8007c46:	e7f2      	b.n	8007c2e <__libc_init_array+0x1e>
 8007c48:	0800af38 	.word	0x0800af38
 8007c4c:	0800af38 	.word	0x0800af38
 8007c50:	0800af38 	.word	0x0800af38
 8007c54:	0800af3c 	.word	0x0800af3c

08007c58 <__retarget_lock_init_recursive>:
 8007c58:	4770      	bx	lr

08007c5a <__retarget_lock_acquire_recursive>:
 8007c5a:	4770      	bx	lr

08007c5c <__retarget_lock_release_recursive>:
 8007c5c:	4770      	bx	lr

08007c5e <memchr>:
 8007c5e:	4603      	mov	r3, r0
 8007c60:	b510      	push	{r4, lr}
 8007c62:	b2c9      	uxtb	r1, r1
 8007c64:	4402      	add	r2, r0
 8007c66:	4293      	cmp	r3, r2
 8007c68:	4618      	mov	r0, r3
 8007c6a:	d101      	bne.n	8007c70 <memchr+0x12>
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	e003      	b.n	8007c78 <memchr+0x1a>
 8007c70:	7804      	ldrb	r4, [r0, #0]
 8007c72:	3301      	adds	r3, #1
 8007c74:	428c      	cmp	r4, r1
 8007c76:	d1f6      	bne.n	8007c66 <memchr+0x8>
 8007c78:	bd10      	pop	{r4, pc}

08007c7a <memcpy>:
 8007c7a:	440a      	add	r2, r1
 8007c7c:	4291      	cmp	r1, r2
 8007c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c82:	d100      	bne.n	8007c86 <memcpy+0xc>
 8007c84:	4770      	bx	lr
 8007c86:	b510      	push	{r4, lr}
 8007c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c8c:	4291      	cmp	r1, r2
 8007c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c92:	d1f9      	bne.n	8007c88 <memcpy+0xe>
 8007c94:	bd10      	pop	{r4, pc}

08007c96 <quorem>:
 8007c96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9a:	6903      	ldr	r3, [r0, #16]
 8007c9c:	690c      	ldr	r4, [r1, #16]
 8007c9e:	4607      	mov	r7, r0
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	db7e      	blt.n	8007da2 <quorem+0x10c>
 8007ca4:	3c01      	subs	r4, #1
 8007ca6:	00a3      	lsls	r3, r4, #2
 8007ca8:	f100 0514 	add.w	r5, r0, #20
 8007cac:	f101 0814 	add.w	r8, r1, #20
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cb6:	9301      	str	r3, [sp, #4]
 8007cb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007cbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ccc:	d32e      	bcc.n	8007d2c <quorem+0x96>
 8007cce:	f04f 0a00 	mov.w	sl, #0
 8007cd2:	46c4      	mov	ip, r8
 8007cd4:	46ae      	mov	lr, r5
 8007cd6:	46d3      	mov	fp, sl
 8007cd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007cdc:	b298      	uxth	r0, r3
 8007cde:	fb06 a000 	mla	r0, r6, r0, sl
 8007ce2:	0c1b      	lsrs	r3, r3, #16
 8007ce4:	0c02      	lsrs	r2, r0, #16
 8007ce6:	fb06 2303 	mla	r3, r6, r3, r2
 8007cea:	f8de 2000 	ldr.w	r2, [lr]
 8007cee:	b280      	uxth	r0, r0
 8007cf0:	b292      	uxth	r2, r2
 8007cf2:	1a12      	subs	r2, r2, r0
 8007cf4:	445a      	add	r2, fp
 8007cf6:	f8de 0000 	ldr.w	r0, [lr]
 8007cfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d08:	b292      	uxth	r2, r2
 8007d0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d0e:	45e1      	cmp	r9, ip
 8007d10:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d14:	f84e 2b04 	str.w	r2, [lr], #4
 8007d18:	d2de      	bcs.n	8007cd8 <quorem+0x42>
 8007d1a:	9b00      	ldr	r3, [sp, #0]
 8007d1c:	58eb      	ldr	r3, [r5, r3]
 8007d1e:	b92b      	cbnz	r3, 8007d2c <quorem+0x96>
 8007d20:	9b01      	ldr	r3, [sp, #4]
 8007d22:	3b04      	subs	r3, #4
 8007d24:	429d      	cmp	r5, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	d32f      	bcc.n	8007d8a <quorem+0xf4>
 8007d2a:	613c      	str	r4, [r7, #16]
 8007d2c:	4638      	mov	r0, r7
 8007d2e:	f001 f97f 	bl	8009030 <__mcmp>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	db25      	blt.n	8007d82 <quorem+0xec>
 8007d36:	4629      	mov	r1, r5
 8007d38:	2000      	movs	r0, #0
 8007d3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d3e:	f8d1 c000 	ldr.w	ip, [r1]
 8007d42:	fa1f fe82 	uxth.w	lr, r2
 8007d46:	fa1f f38c 	uxth.w	r3, ip
 8007d4a:	eba3 030e 	sub.w	r3, r3, lr
 8007d4e:	4403      	add	r3, r0
 8007d50:	0c12      	lsrs	r2, r2, #16
 8007d52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007d56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d60:	45c1      	cmp	r9, r8
 8007d62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d66:	f841 3b04 	str.w	r3, [r1], #4
 8007d6a:	d2e6      	bcs.n	8007d3a <quorem+0xa4>
 8007d6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d74:	b922      	cbnz	r2, 8007d80 <quorem+0xea>
 8007d76:	3b04      	subs	r3, #4
 8007d78:	429d      	cmp	r5, r3
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	d30b      	bcc.n	8007d96 <quorem+0x100>
 8007d7e:	613c      	str	r4, [r7, #16]
 8007d80:	3601      	adds	r6, #1
 8007d82:	4630      	mov	r0, r6
 8007d84:	b003      	add	sp, #12
 8007d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8a:	6812      	ldr	r2, [r2, #0]
 8007d8c:	3b04      	subs	r3, #4
 8007d8e:	2a00      	cmp	r2, #0
 8007d90:	d1cb      	bne.n	8007d2a <quorem+0x94>
 8007d92:	3c01      	subs	r4, #1
 8007d94:	e7c6      	b.n	8007d24 <quorem+0x8e>
 8007d96:	6812      	ldr	r2, [r2, #0]
 8007d98:	3b04      	subs	r3, #4
 8007d9a:	2a00      	cmp	r2, #0
 8007d9c:	d1ef      	bne.n	8007d7e <quorem+0xe8>
 8007d9e:	3c01      	subs	r4, #1
 8007da0:	e7ea      	b.n	8007d78 <quorem+0xe2>
 8007da2:	2000      	movs	r0, #0
 8007da4:	e7ee      	b.n	8007d84 <quorem+0xee>
	...

08007da8 <_dtoa_r>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	4614      	mov	r4, r2
 8007dae:	461d      	mov	r5, r3
 8007db0:	69c7      	ldr	r7, [r0, #28]
 8007db2:	b097      	sub	sp, #92	@ 0x5c
 8007db4:	4681      	mov	r9, r0
 8007db6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007dba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007dbc:	b97f      	cbnz	r7, 8007dde <_dtoa_r+0x36>
 8007dbe:	2010      	movs	r0, #16
 8007dc0:	f000 fe0e 	bl	80089e0 <malloc>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	f8c9 001c 	str.w	r0, [r9, #28]
 8007dca:	b920      	cbnz	r0, 8007dd6 <_dtoa_r+0x2e>
 8007dcc:	21ef      	movs	r1, #239	@ 0xef
 8007dce:	4bac      	ldr	r3, [pc, #688]	@ (8008080 <_dtoa_r+0x2d8>)
 8007dd0:	48ac      	ldr	r0, [pc, #688]	@ (8008084 <_dtoa_r+0x2dc>)
 8007dd2:	f001 fc5f 	bl	8009694 <__assert_func>
 8007dd6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007dda:	6007      	str	r7, [r0, #0]
 8007ddc:	60c7      	str	r7, [r0, #12]
 8007dde:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007de2:	6819      	ldr	r1, [r3, #0]
 8007de4:	b159      	cbz	r1, 8007dfe <_dtoa_r+0x56>
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	2301      	movs	r3, #1
 8007dea:	4093      	lsls	r3, r2
 8007dec:	604a      	str	r2, [r1, #4]
 8007dee:	608b      	str	r3, [r1, #8]
 8007df0:	4648      	mov	r0, r9
 8007df2:	f000 feeb 	bl	8008bcc <_Bfree>
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	1e2b      	subs	r3, r5, #0
 8007e00:	bfaf      	iteee	ge
 8007e02:	2300      	movge	r3, #0
 8007e04:	2201      	movlt	r2, #1
 8007e06:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e0a:	9307      	strlt	r3, [sp, #28]
 8007e0c:	bfa8      	it	ge
 8007e0e:	6033      	strge	r3, [r6, #0]
 8007e10:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007e14:	4b9c      	ldr	r3, [pc, #624]	@ (8008088 <_dtoa_r+0x2e0>)
 8007e16:	bfb8      	it	lt
 8007e18:	6032      	strlt	r2, [r6, #0]
 8007e1a:	ea33 0308 	bics.w	r3, r3, r8
 8007e1e:	d112      	bne.n	8007e46 <_dtoa_r+0x9e>
 8007e20:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e24:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007e2c:	4323      	orrs	r3, r4
 8007e2e:	f000 855e 	beq.w	80088ee <_dtoa_r+0xb46>
 8007e32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800808c <_dtoa_r+0x2e4>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 8560 	beq.w	80088fe <_dtoa_r+0xb56>
 8007e3e:	f10a 0303 	add.w	r3, sl, #3
 8007e42:	f000 bd5a 	b.w	80088fa <_dtoa_r+0xb52>
 8007e46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e4a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e52:	2200      	movs	r2, #0
 8007e54:	2300      	movs	r3, #0
 8007e56:	f7f8 fda7 	bl	80009a8 <__aeabi_dcmpeq>
 8007e5a:	4607      	mov	r7, r0
 8007e5c:	b158      	cbz	r0, 8007e76 <_dtoa_r+0xce>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e66:	b113      	cbz	r3, 8007e6e <_dtoa_r+0xc6>
 8007e68:	4b89      	ldr	r3, [pc, #548]	@ (8008090 <_dtoa_r+0x2e8>)
 8007e6a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008094 <_dtoa_r+0x2ec>
 8007e72:	f000 bd44 	b.w	80088fe <_dtoa_r+0xb56>
 8007e76:	ab14      	add	r3, sp, #80	@ 0x50
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	ab15      	add	r3, sp, #84	@ 0x54
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	4648      	mov	r0, r9
 8007e80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007e84:	f001 f984 	bl	8009190 <__d2b>
 8007e88:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007e8c:	9003      	str	r0, [sp, #12]
 8007e8e:	2e00      	cmp	r6, #0
 8007e90:	d078      	beq.n	8007f84 <_dtoa_r+0x1dc>
 8007e92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e98:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ea0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ea4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ea8:	9712      	str	r7, [sp, #72]	@ 0x48
 8007eaa:	4619      	mov	r1, r3
 8007eac:	2200      	movs	r2, #0
 8007eae:	4b7a      	ldr	r3, [pc, #488]	@ (8008098 <_dtoa_r+0x2f0>)
 8007eb0:	f7f8 f95a 	bl	8000168 <__aeabi_dsub>
 8007eb4:	a36c      	add	r3, pc, #432	@ (adr r3, 8008068 <_dtoa_r+0x2c0>)
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f7f8 fb0d 	bl	80004d8 <__aeabi_dmul>
 8007ebe:	a36c      	add	r3, pc, #432	@ (adr r3, 8008070 <_dtoa_r+0x2c8>)
 8007ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec4:	f7f8 f952 	bl	800016c <__adddf3>
 8007ec8:	4604      	mov	r4, r0
 8007eca:	4630      	mov	r0, r6
 8007ecc:	460d      	mov	r5, r1
 8007ece:	f7f8 fa99 	bl	8000404 <__aeabi_i2d>
 8007ed2:	a369      	add	r3, pc, #420	@ (adr r3, 8008078 <_dtoa_r+0x2d0>)
 8007ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed8:	f7f8 fafe 	bl	80004d8 <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	f7f8 f942 	bl	800016c <__adddf3>
 8007ee8:	4604      	mov	r4, r0
 8007eea:	460d      	mov	r5, r1
 8007eec:	f7f8 fda4 	bl	8000a38 <__aeabi_d2iz>
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4607      	mov	r7, r0
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	4629      	mov	r1, r5
 8007efa:	f7f8 fd5f 	bl	80009bc <__aeabi_dcmplt>
 8007efe:	b140      	cbz	r0, 8007f12 <_dtoa_r+0x16a>
 8007f00:	4638      	mov	r0, r7
 8007f02:	f7f8 fa7f 	bl	8000404 <__aeabi_i2d>
 8007f06:	4622      	mov	r2, r4
 8007f08:	462b      	mov	r3, r5
 8007f0a:	f7f8 fd4d 	bl	80009a8 <__aeabi_dcmpeq>
 8007f0e:	b900      	cbnz	r0, 8007f12 <_dtoa_r+0x16a>
 8007f10:	3f01      	subs	r7, #1
 8007f12:	2f16      	cmp	r7, #22
 8007f14:	d854      	bhi.n	8007fc0 <_dtoa_r+0x218>
 8007f16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f1a:	4b60      	ldr	r3, [pc, #384]	@ (800809c <_dtoa_r+0x2f4>)
 8007f1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f7f8 fd4a 	bl	80009bc <__aeabi_dcmplt>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d04b      	beq.n	8007fc4 <_dtoa_r+0x21c>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	3f01      	subs	r7, #1
 8007f30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f34:	1b9b      	subs	r3, r3, r6
 8007f36:	1e5a      	subs	r2, r3, #1
 8007f38:	bf49      	itett	mi
 8007f3a:	f1c3 0301 	rsbmi	r3, r3, #1
 8007f3e:	2300      	movpl	r3, #0
 8007f40:	9304      	strmi	r3, [sp, #16]
 8007f42:	2300      	movmi	r3, #0
 8007f44:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f46:	bf54      	ite	pl
 8007f48:	9304      	strpl	r3, [sp, #16]
 8007f4a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007f4c:	2f00      	cmp	r7, #0
 8007f4e:	db3b      	blt.n	8007fc8 <_dtoa_r+0x220>
 8007f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f52:	970e      	str	r7, [sp, #56]	@ 0x38
 8007f54:	443b      	add	r3, r7
 8007f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f58:	2300      	movs	r3, #0
 8007f5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f5e:	2b09      	cmp	r3, #9
 8007f60:	d865      	bhi.n	800802e <_dtoa_r+0x286>
 8007f62:	2b05      	cmp	r3, #5
 8007f64:	bfc4      	itt	gt
 8007f66:	3b04      	subgt	r3, #4
 8007f68:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007f6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f6c:	bfc8      	it	gt
 8007f6e:	2400      	movgt	r4, #0
 8007f70:	f1a3 0302 	sub.w	r3, r3, #2
 8007f74:	bfd8      	it	le
 8007f76:	2401      	movle	r4, #1
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d864      	bhi.n	8008046 <_dtoa_r+0x29e>
 8007f7c:	e8df f003 	tbb	[pc, r3]
 8007f80:	2c385553 	.word	0x2c385553
 8007f84:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007f88:	441e      	add	r6, r3
 8007f8a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	bfc1      	itttt	gt
 8007f92:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007f96:	fa08 f803 	lslgt.w	r8, r8, r3
 8007f9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007f9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007fa2:	bfd6      	itet	le
 8007fa4:	f1c3 0320 	rsble	r3, r3, #32
 8007fa8:	ea48 0003 	orrgt.w	r0, r8, r3
 8007fac:	fa04 f003 	lslle.w	r0, r4, r3
 8007fb0:	f7f8 fa18 	bl	80003e4 <__aeabi_ui2d>
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007fba:	3e01      	subs	r6, #1
 8007fbc:	9212      	str	r2, [sp, #72]	@ 0x48
 8007fbe:	e774      	b.n	8007eaa <_dtoa_r+0x102>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e7b5      	b.n	8007f30 <_dtoa_r+0x188>
 8007fc4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007fc6:	e7b4      	b.n	8007f32 <_dtoa_r+0x18a>
 8007fc8:	9b04      	ldr	r3, [sp, #16]
 8007fca:	1bdb      	subs	r3, r3, r7
 8007fcc:	9304      	str	r3, [sp, #16]
 8007fce:	427b      	negs	r3, r7
 8007fd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	930e      	str	r3, [sp, #56]	@ 0x38
 8007fd6:	e7c1      	b.n	8007f5c <_dtoa_r+0x1b4>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fdc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007fde:	eb07 0b03 	add.w	fp, r7, r3
 8007fe2:	f10b 0301 	add.w	r3, fp, #1
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	9308      	str	r3, [sp, #32]
 8007fea:	bfb8      	it	lt
 8007fec:	2301      	movlt	r3, #1
 8007fee:	e006      	b.n	8007ffe <_dtoa_r+0x256>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ff4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	dd28      	ble.n	800804c <_dtoa_r+0x2a4>
 8007ffa:	469b      	mov	fp, r3
 8007ffc:	9308      	str	r3, [sp, #32]
 8007ffe:	2100      	movs	r1, #0
 8008000:	2204      	movs	r2, #4
 8008002:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008006:	f102 0514 	add.w	r5, r2, #20
 800800a:	429d      	cmp	r5, r3
 800800c:	d926      	bls.n	800805c <_dtoa_r+0x2b4>
 800800e:	6041      	str	r1, [r0, #4]
 8008010:	4648      	mov	r0, r9
 8008012:	f000 fd9b 	bl	8008b4c <_Balloc>
 8008016:	4682      	mov	sl, r0
 8008018:	2800      	cmp	r0, #0
 800801a:	d143      	bne.n	80080a4 <_dtoa_r+0x2fc>
 800801c:	4602      	mov	r2, r0
 800801e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008022:	4b1f      	ldr	r3, [pc, #124]	@ (80080a0 <_dtoa_r+0x2f8>)
 8008024:	e6d4      	b.n	8007dd0 <_dtoa_r+0x28>
 8008026:	2300      	movs	r3, #0
 8008028:	e7e3      	b.n	8007ff2 <_dtoa_r+0x24a>
 800802a:	2300      	movs	r3, #0
 800802c:	e7d5      	b.n	8007fda <_dtoa_r+0x232>
 800802e:	2401      	movs	r4, #1
 8008030:	2300      	movs	r3, #0
 8008032:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008034:	9320      	str	r3, [sp, #128]	@ 0x80
 8008036:	f04f 3bff 	mov.w	fp, #4294967295
 800803a:	2200      	movs	r2, #0
 800803c:	2312      	movs	r3, #18
 800803e:	f8cd b020 	str.w	fp, [sp, #32]
 8008042:	9221      	str	r2, [sp, #132]	@ 0x84
 8008044:	e7db      	b.n	8007ffe <_dtoa_r+0x256>
 8008046:	2301      	movs	r3, #1
 8008048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800804a:	e7f4      	b.n	8008036 <_dtoa_r+0x28e>
 800804c:	f04f 0b01 	mov.w	fp, #1
 8008050:	465b      	mov	r3, fp
 8008052:	f8cd b020 	str.w	fp, [sp, #32]
 8008056:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800805a:	e7d0      	b.n	8007ffe <_dtoa_r+0x256>
 800805c:	3101      	adds	r1, #1
 800805e:	0052      	lsls	r2, r2, #1
 8008060:	e7d1      	b.n	8008006 <_dtoa_r+0x25e>
 8008062:	bf00      	nop
 8008064:	f3af 8000 	nop.w
 8008068:	636f4361 	.word	0x636f4361
 800806c:	3fd287a7 	.word	0x3fd287a7
 8008070:	8b60c8b3 	.word	0x8b60c8b3
 8008074:	3fc68a28 	.word	0x3fc68a28
 8008078:	509f79fb 	.word	0x509f79fb
 800807c:	3fd34413 	.word	0x3fd34413
 8008080:	0800abbb 	.word	0x0800abbb
 8008084:	0800abd2 	.word	0x0800abd2
 8008088:	7ff00000 	.word	0x7ff00000
 800808c:	0800abb7 	.word	0x0800abb7
 8008090:	0800ab8b 	.word	0x0800ab8b
 8008094:	0800ab8a 	.word	0x0800ab8a
 8008098:	3ff80000 	.word	0x3ff80000
 800809c:	0800ad20 	.word	0x0800ad20
 80080a0:	0800ac2a 	.word	0x0800ac2a
 80080a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80080a8:	6018      	str	r0, [r3, #0]
 80080aa:	9b08      	ldr	r3, [sp, #32]
 80080ac:	2b0e      	cmp	r3, #14
 80080ae:	f200 80a1 	bhi.w	80081f4 <_dtoa_r+0x44c>
 80080b2:	2c00      	cmp	r4, #0
 80080b4:	f000 809e 	beq.w	80081f4 <_dtoa_r+0x44c>
 80080b8:	2f00      	cmp	r7, #0
 80080ba:	dd33      	ble.n	8008124 <_dtoa_r+0x37c>
 80080bc:	4b9c      	ldr	r3, [pc, #624]	@ (8008330 <_dtoa_r+0x588>)
 80080be:	f007 020f 	and.w	r2, r7, #15
 80080c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080c6:	05f8      	lsls	r0, r7, #23
 80080c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80080d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80080d4:	d516      	bpl.n	8008104 <_dtoa_r+0x35c>
 80080d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080da:	4b96      	ldr	r3, [pc, #600]	@ (8008334 <_dtoa_r+0x58c>)
 80080dc:	2603      	movs	r6, #3
 80080de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080e2:	f7f8 fb23 	bl	800072c <__aeabi_ddiv>
 80080e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080ea:	f004 040f 	and.w	r4, r4, #15
 80080ee:	4d91      	ldr	r5, [pc, #580]	@ (8008334 <_dtoa_r+0x58c>)
 80080f0:	b954      	cbnz	r4, 8008108 <_dtoa_r+0x360>
 80080f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080fa:	f7f8 fb17 	bl	800072c <__aeabi_ddiv>
 80080fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008102:	e028      	b.n	8008156 <_dtoa_r+0x3ae>
 8008104:	2602      	movs	r6, #2
 8008106:	e7f2      	b.n	80080ee <_dtoa_r+0x346>
 8008108:	07e1      	lsls	r1, r4, #31
 800810a:	d508      	bpl.n	800811e <_dtoa_r+0x376>
 800810c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008110:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008114:	f7f8 f9e0 	bl	80004d8 <__aeabi_dmul>
 8008118:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800811c:	3601      	adds	r6, #1
 800811e:	1064      	asrs	r4, r4, #1
 8008120:	3508      	adds	r5, #8
 8008122:	e7e5      	b.n	80080f0 <_dtoa_r+0x348>
 8008124:	f000 80af 	beq.w	8008286 <_dtoa_r+0x4de>
 8008128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800812c:	427c      	negs	r4, r7
 800812e:	4b80      	ldr	r3, [pc, #512]	@ (8008330 <_dtoa_r+0x588>)
 8008130:	f004 020f 	and.w	r2, r4, #15
 8008134:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f7f8 f9cc 	bl	80004d8 <__aeabi_dmul>
 8008140:	2602      	movs	r6, #2
 8008142:	2300      	movs	r3, #0
 8008144:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008148:	4d7a      	ldr	r5, [pc, #488]	@ (8008334 <_dtoa_r+0x58c>)
 800814a:	1124      	asrs	r4, r4, #4
 800814c:	2c00      	cmp	r4, #0
 800814e:	f040 808f 	bne.w	8008270 <_dtoa_r+0x4c8>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1d3      	bne.n	80080fe <_dtoa_r+0x356>
 8008156:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800815a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 8094 	beq.w	800828a <_dtoa_r+0x4e2>
 8008162:	2200      	movs	r2, #0
 8008164:	4620      	mov	r0, r4
 8008166:	4629      	mov	r1, r5
 8008168:	4b73      	ldr	r3, [pc, #460]	@ (8008338 <_dtoa_r+0x590>)
 800816a:	f7f8 fc27 	bl	80009bc <__aeabi_dcmplt>
 800816e:	2800      	cmp	r0, #0
 8008170:	f000 808b 	beq.w	800828a <_dtoa_r+0x4e2>
 8008174:	9b08      	ldr	r3, [sp, #32]
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 8087 	beq.w	800828a <_dtoa_r+0x4e2>
 800817c:	f1bb 0f00 	cmp.w	fp, #0
 8008180:	dd34      	ble.n	80081ec <_dtoa_r+0x444>
 8008182:	4620      	mov	r0, r4
 8008184:	2200      	movs	r2, #0
 8008186:	4629      	mov	r1, r5
 8008188:	4b6c      	ldr	r3, [pc, #432]	@ (800833c <_dtoa_r+0x594>)
 800818a:	f7f8 f9a5 	bl	80004d8 <__aeabi_dmul>
 800818e:	465c      	mov	r4, fp
 8008190:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008194:	f107 38ff 	add.w	r8, r7, #4294967295
 8008198:	3601      	adds	r6, #1
 800819a:	4630      	mov	r0, r6
 800819c:	f7f8 f932 	bl	8000404 <__aeabi_i2d>
 80081a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081a4:	f7f8 f998 	bl	80004d8 <__aeabi_dmul>
 80081a8:	2200      	movs	r2, #0
 80081aa:	4b65      	ldr	r3, [pc, #404]	@ (8008340 <_dtoa_r+0x598>)
 80081ac:	f7f7 ffde 	bl	800016c <__adddf3>
 80081b0:	4605      	mov	r5, r0
 80081b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	d16a      	bne.n	8008290 <_dtoa_r+0x4e8>
 80081ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081be:	2200      	movs	r2, #0
 80081c0:	4b60      	ldr	r3, [pc, #384]	@ (8008344 <_dtoa_r+0x59c>)
 80081c2:	f7f7 ffd1 	bl	8000168 <__aeabi_dsub>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081ce:	462a      	mov	r2, r5
 80081d0:	4633      	mov	r3, r6
 80081d2:	f7f8 fc11 	bl	80009f8 <__aeabi_dcmpgt>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	f040 8298 	bne.w	800870c <_dtoa_r+0x964>
 80081dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081e0:	462a      	mov	r2, r5
 80081e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80081e6:	f7f8 fbe9 	bl	80009bc <__aeabi_dcmplt>
 80081ea:	bb38      	cbnz	r0, 800823c <_dtoa_r+0x494>
 80081ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80081f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80081f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f2c0 8157 	blt.w	80084aa <_dtoa_r+0x702>
 80081fc:	2f0e      	cmp	r7, #14
 80081fe:	f300 8154 	bgt.w	80084aa <_dtoa_r+0x702>
 8008202:	4b4b      	ldr	r3, [pc, #300]	@ (8008330 <_dtoa_r+0x588>)
 8008204:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008208:	e9d3 3400 	ldrd	r3, r4, [r3]
 800820c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008210:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008212:	2b00      	cmp	r3, #0
 8008214:	f280 80e5 	bge.w	80083e2 <_dtoa_r+0x63a>
 8008218:	9b08      	ldr	r3, [sp, #32]
 800821a:	2b00      	cmp	r3, #0
 800821c:	f300 80e1 	bgt.w	80083e2 <_dtoa_r+0x63a>
 8008220:	d10c      	bne.n	800823c <_dtoa_r+0x494>
 8008222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008226:	2200      	movs	r2, #0
 8008228:	4b46      	ldr	r3, [pc, #280]	@ (8008344 <_dtoa_r+0x59c>)
 800822a:	f7f8 f955 	bl	80004d8 <__aeabi_dmul>
 800822e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008232:	f7f8 fbd7 	bl	80009e4 <__aeabi_dcmpge>
 8008236:	2800      	cmp	r0, #0
 8008238:	f000 8266 	beq.w	8008708 <_dtoa_r+0x960>
 800823c:	2400      	movs	r4, #0
 800823e:	4625      	mov	r5, r4
 8008240:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008242:	4656      	mov	r6, sl
 8008244:	ea6f 0803 	mvn.w	r8, r3
 8008248:	2700      	movs	r7, #0
 800824a:	4621      	mov	r1, r4
 800824c:	4648      	mov	r0, r9
 800824e:	f000 fcbd 	bl	8008bcc <_Bfree>
 8008252:	2d00      	cmp	r5, #0
 8008254:	f000 80bd 	beq.w	80083d2 <_dtoa_r+0x62a>
 8008258:	b12f      	cbz	r7, 8008266 <_dtoa_r+0x4be>
 800825a:	42af      	cmp	r7, r5
 800825c:	d003      	beq.n	8008266 <_dtoa_r+0x4be>
 800825e:	4639      	mov	r1, r7
 8008260:	4648      	mov	r0, r9
 8008262:	f000 fcb3 	bl	8008bcc <_Bfree>
 8008266:	4629      	mov	r1, r5
 8008268:	4648      	mov	r0, r9
 800826a:	f000 fcaf 	bl	8008bcc <_Bfree>
 800826e:	e0b0      	b.n	80083d2 <_dtoa_r+0x62a>
 8008270:	07e2      	lsls	r2, r4, #31
 8008272:	d505      	bpl.n	8008280 <_dtoa_r+0x4d8>
 8008274:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008278:	f7f8 f92e 	bl	80004d8 <__aeabi_dmul>
 800827c:	2301      	movs	r3, #1
 800827e:	3601      	adds	r6, #1
 8008280:	1064      	asrs	r4, r4, #1
 8008282:	3508      	adds	r5, #8
 8008284:	e762      	b.n	800814c <_dtoa_r+0x3a4>
 8008286:	2602      	movs	r6, #2
 8008288:	e765      	b.n	8008156 <_dtoa_r+0x3ae>
 800828a:	46b8      	mov	r8, r7
 800828c:	9c08      	ldr	r4, [sp, #32]
 800828e:	e784      	b.n	800819a <_dtoa_r+0x3f2>
 8008290:	4b27      	ldr	r3, [pc, #156]	@ (8008330 <_dtoa_r+0x588>)
 8008292:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008294:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008298:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800829c:	4454      	add	r4, sl
 800829e:	2900      	cmp	r1, #0
 80082a0:	d054      	beq.n	800834c <_dtoa_r+0x5a4>
 80082a2:	2000      	movs	r0, #0
 80082a4:	4928      	ldr	r1, [pc, #160]	@ (8008348 <_dtoa_r+0x5a0>)
 80082a6:	f7f8 fa41 	bl	800072c <__aeabi_ddiv>
 80082aa:	4633      	mov	r3, r6
 80082ac:	462a      	mov	r2, r5
 80082ae:	f7f7 ff5b 	bl	8000168 <__aeabi_dsub>
 80082b2:	4656      	mov	r6, sl
 80082b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082bc:	f7f8 fbbc 	bl	8000a38 <__aeabi_d2iz>
 80082c0:	4605      	mov	r5, r0
 80082c2:	f7f8 f89f 	bl	8000404 <__aeabi_i2d>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082ce:	f7f7 ff4b 	bl	8000168 <__aeabi_dsub>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	3530      	adds	r5, #48	@ 0x30
 80082d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082e0:	f806 5b01 	strb.w	r5, [r6], #1
 80082e4:	f7f8 fb6a 	bl	80009bc <__aeabi_dcmplt>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d172      	bne.n	80083d2 <_dtoa_r+0x62a>
 80082ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082f0:	2000      	movs	r0, #0
 80082f2:	4911      	ldr	r1, [pc, #68]	@ (8008338 <_dtoa_r+0x590>)
 80082f4:	f7f7 ff38 	bl	8000168 <__aeabi_dsub>
 80082f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082fc:	f7f8 fb5e 	bl	80009bc <__aeabi_dcmplt>
 8008300:	2800      	cmp	r0, #0
 8008302:	f040 80b4 	bne.w	800846e <_dtoa_r+0x6c6>
 8008306:	42a6      	cmp	r6, r4
 8008308:	f43f af70 	beq.w	80081ec <_dtoa_r+0x444>
 800830c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008310:	2200      	movs	r2, #0
 8008312:	4b0a      	ldr	r3, [pc, #40]	@ (800833c <_dtoa_r+0x594>)
 8008314:	f7f8 f8e0 	bl	80004d8 <__aeabi_dmul>
 8008318:	2200      	movs	r2, #0
 800831a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800831e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008322:	4b06      	ldr	r3, [pc, #24]	@ (800833c <_dtoa_r+0x594>)
 8008324:	f7f8 f8d8 	bl	80004d8 <__aeabi_dmul>
 8008328:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800832c:	e7c4      	b.n	80082b8 <_dtoa_r+0x510>
 800832e:	bf00      	nop
 8008330:	0800ad20 	.word	0x0800ad20
 8008334:	0800acf8 	.word	0x0800acf8
 8008338:	3ff00000 	.word	0x3ff00000
 800833c:	40240000 	.word	0x40240000
 8008340:	401c0000 	.word	0x401c0000
 8008344:	40140000 	.word	0x40140000
 8008348:	3fe00000 	.word	0x3fe00000
 800834c:	4631      	mov	r1, r6
 800834e:	4628      	mov	r0, r5
 8008350:	f7f8 f8c2 	bl	80004d8 <__aeabi_dmul>
 8008354:	4656      	mov	r6, sl
 8008356:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800835a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800835c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008360:	f7f8 fb6a 	bl	8000a38 <__aeabi_d2iz>
 8008364:	4605      	mov	r5, r0
 8008366:	f7f8 f84d 	bl	8000404 <__aeabi_i2d>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008372:	f7f7 fef9 	bl	8000168 <__aeabi_dsub>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	3530      	adds	r5, #48	@ 0x30
 800837c:	f806 5b01 	strb.w	r5, [r6], #1
 8008380:	42a6      	cmp	r6, r4
 8008382:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008386:	f04f 0200 	mov.w	r2, #0
 800838a:	d124      	bne.n	80083d6 <_dtoa_r+0x62e>
 800838c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008390:	4bae      	ldr	r3, [pc, #696]	@ (800864c <_dtoa_r+0x8a4>)
 8008392:	f7f7 feeb 	bl	800016c <__adddf3>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800839e:	f7f8 fb2b 	bl	80009f8 <__aeabi_dcmpgt>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d163      	bne.n	800846e <_dtoa_r+0x6c6>
 80083a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083aa:	2000      	movs	r0, #0
 80083ac:	49a7      	ldr	r1, [pc, #668]	@ (800864c <_dtoa_r+0x8a4>)
 80083ae:	f7f7 fedb 	bl	8000168 <__aeabi_dsub>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083ba:	f7f8 faff 	bl	80009bc <__aeabi_dcmplt>
 80083be:	2800      	cmp	r0, #0
 80083c0:	f43f af14 	beq.w	80081ec <_dtoa_r+0x444>
 80083c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80083c6:	1e73      	subs	r3, r6, #1
 80083c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80083ce:	2b30      	cmp	r3, #48	@ 0x30
 80083d0:	d0f8      	beq.n	80083c4 <_dtoa_r+0x61c>
 80083d2:	4647      	mov	r7, r8
 80083d4:	e03b      	b.n	800844e <_dtoa_r+0x6a6>
 80083d6:	4b9e      	ldr	r3, [pc, #632]	@ (8008650 <_dtoa_r+0x8a8>)
 80083d8:	f7f8 f87e 	bl	80004d8 <__aeabi_dmul>
 80083dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80083e0:	e7bc      	b.n	800835c <_dtoa_r+0x5b4>
 80083e2:	4656      	mov	r6, sl
 80083e4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80083e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ec:	4620      	mov	r0, r4
 80083ee:	4629      	mov	r1, r5
 80083f0:	f7f8 f99c 	bl	800072c <__aeabi_ddiv>
 80083f4:	f7f8 fb20 	bl	8000a38 <__aeabi_d2iz>
 80083f8:	4680      	mov	r8, r0
 80083fa:	f7f8 f803 	bl	8000404 <__aeabi_i2d>
 80083fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008402:	f7f8 f869 	bl	80004d8 <__aeabi_dmul>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4620      	mov	r0, r4
 800840c:	4629      	mov	r1, r5
 800840e:	f7f7 feab 	bl	8000168 <__aeabi_dsub>
 8008412:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008416:	9d08      	ldr	r5, [sp, #32]
 8008418:	f806 4b01 	strb.w	r4, [r6], #1
 800841c:	eba6 040a 	sub.w	r4, r6, sl
 8008420:	42a5      	cmp	r5, r4
 8008422:	4602      	mov	r2, r0
 8008424:	460b      	mov	r3, r1
 8008426:	d133      	bne.n	8008490 <_dtoa_r+0x6e8>
 8008428:	f7f7 fea0 	bl	800016c <__adddf3>
 800842c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008430:	4604      	mov	r4, r0
 8008432:	460d      	mov	r5, r1
 8008434:	f7f8 fae0 	bl	80009f8 <__aeabi_dcmpgt>
 8008438:	b9c0      	cbnz	r0, 800846c <_dtoa_r+0x6c4>
 800843a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800843e:	4620      	mov	r0, r4
 8008440:	4629      	mov	r1, r5
 8008442:	f7f8 fab1 	bl	80009a8 <__aeabi_dcmpeq>
 8008446:	b110      	cbz	r0, 800844e <_dtoa_r+0x6a6>
 8008448:	f018 0f01 	tst.w	r8, #1
 800844c:	d10e      	bne.n	800846c <_dtoa_r+0x6c4>
 800844e:	4648      	mov	r0, r9
 8008450:	9903      	ldr	r1, [sp, #12]
 8008452:	f000 fbbb 	bl	8008bcc <_Bfree>
 8008456:	2300      	movs	r3, #0
 8008458:	7033      	strb	r3, [r6, #0]
 800845a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800845c:	3701      	adds	r7, #1
 800845e:	601f      	str	r7, [r3, #0]
 8008460:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 824b 	beq.w	80088fe <_dtoa_r+0xb56>
 8008468:	601e      	str	r6, [r3, #0]
 800846a:	e248      	b.n	80088fe <_dtoa_r+0xb56>
 800846c:	46b8      	mov	r8, r7
 800846e:	4633      	mov	r3, r6
 8008470:	461e      	mov	r6, r3
 8008472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008476:	2a39      	cmp	r2, #57	@ 0x39
 8008478:	d106      	bne.n	8008488 <_dtoa_r+0x6e0>
 800847a:	459a      	cmp	sl, r3
 800847c:	d1f8      	bne.n	8008470 <_dtoa_r+0x6c8>
 800847e:	2230      	movs	r2, #48	@ 0x30
 8008480:	f108 0801 	add.w	r8, r8, #1
 8008484:	f88a 2000 	strb.w	r2, [sl]
 8008488:	781a      	ldrb	r2, [r3, #0]
 800848a:	3201      	adds	r2, #1
 800848c:	701a      	strb	r2, [r3, #0]
 800848e:	e7a0      	b.n	80083d2 <_dtoa_r+0x62a>
 8008490:	2200      	movs	r2, #0
 8008492:	4b6f      	ldr	r3, [pc, #444]	@ (8008650 <_dtoa_r+0x8a8>)
 8008494:	f7f8 f820 	bl	80004d8 <__aeabi_dmul>
 8008498:	2200      	movs	r2, #0
 800849a:	2300      	movs	r3, #0
 800849c:	4604      	mov	r4, r0
 800849e:	460d      	mov	r5, r1
 80084a0:	f7f8 fa82 	bl	80009a8 <__aeabi_dcmpeq>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d09f      	beq.n	80083e8 <_dtoa_r+0x640>
 80084a8:	e7d1      	b.n	800844e <_dtoa_r+0x6a6>
 80084aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80084ac:	2a00      	cmp	r2, #0
 80084ae:	f000 80ea 	beq.w	8008686 <_dtoa_r+0x8de>
 80084b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80084b4:	2a01      	cmp	r2, #1
 80084b6:	f300 80cd 	bgt.w	8008654 <_dtoa_r+0x8ac>
 80084ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80084bc:	2a00      	cmp	r2, #0
 80084be:	f000 80c1 	beq.w	8008644 <_dtoa_r+0x89c>
 80084c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80084c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80084c8:	9e04      	ldr	r6, [sp, #16]
 80084ca:	9a04      	ldr	r2, [sp, #16]
 80084cc:	2101      	movs	r1, #1
 80084ce:	441a      	add	r2, r3
 80084d0:	9204      	str	r2, [sp, #16]
 80084d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084d4:	4648      	mov	r0, r9
 80084d6:	441a      	add	r2, r3
 80084d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80084da:	f000 fc2b 	bl	8008d34 <__i2b>
 80084de:	4605      	mov	r5, r0
 80084e0:	b166      	cbz	r6, 80084fc <_dtoa_r+0x754>
 80084e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	dd09      	ble.n	80084fc <_dtoa_r+0x754>
 80084e8:	42b3      	cmp	r3, r6
 80084ea:	bfa8      	it	ge
 80084ec:	4633      	movge	r3, r6
 80084ee:	9a04      	ldr	r2, [sp, #16]
 80084f0:	1af6      	subs	r6, r6, r3
 80084f2:	1ad2      	subs	r2, r2, r3
 80084f4:	9204      	str	r2, [sp, #16]
 80084f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80084fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084fe:	b30b      	cbz	r3, 8008544 <_dtoa_r+0x79c>
 8008500:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 80c6 	beq.w	8008694 <_dtoa_r+0x8ec>
 8008508:	2c00      	cmp	r4, #0
 800850a:	f000 80c0 	beq.w	800868e <_dtoa_r+0x8e6>
 800850e:	4629      	mov	r1, r5
 8008510:	4622      	mov	r2, r4
 8008512:	4648      	mov	r0, r9
 8008514:	f000 fcc6 	bl	8008ea4 <__pow5mult>
 8008518:	9a03      	ldr	r2, [sp, #12]
 800851a:	4601      	mov	r1, r0
 800851c:	4605      	mov	r5, r0
 800851e:	4648      	mov	r0, r9
 8008520:	f000 fc1e 	bl	8008d60 <__multiply>
 8008524:	9903      	ldr	r1, [sp, #12]
 8008526:	4680      	mov	r8, r0
 8008528:	4648      	mov	r0, r9
 800852a:	f000 fb4f 	bl	8008bcc <_Bfree>
 800852e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008530:	1b1b      	subs	r3, r3, r4
 8008532:	930a      	str	r3, [sp, #40]	@ 0x28
 8008534:	f000 80b1 	beq.w	800869a <_dtoa_r+0x8f2>
 8008538:	4641      	mov	r1, r8
 800853a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800853c:	4648      	mov	r0, r9
 800853e:	f000 fcb1 	bl	8008ea4 <__pow5mult>
 8008542:	9003      	str	r0, [sp, #12]
 8008544:	2101      	movs	r1, #1
 8008546:	4648      	mov	r0, r9
 8008548:	f000 fbf4 	bl	8008d34 <__i2b>
 800854c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800854e:	4604      	mov	r4, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 81d8 	beq.w	8008906 <_dtoa_r+0xb5e>
 8008556:	461a      	mov	r2, r3
 8008558:	4601      	mov	r1, r0
 800855a:	4648      	mov	r0, r9
 800855c:	f000 fca2 	bl	8008ea4 <__pow5mult>
 8008560:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008562:	4604      	mov	r4, r0
 8008564:	2b01      	cmp	r3, #1
 8008566:	f300 809f 	bgt.w	80086a8 <_dtoa_r+0x900>
 800856a:	9b06      	ldr	r3, [sp, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f040 8097 	bne.w	80086a0 <_dtoa_r+0x8f8>
 8008572:	9b07      	ldr	r3, [sp, #28]
 8008574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008578:	2b00      	cmp	r3, #0
 800857a:	f040 8093 	bne.w	80086a4 <_dtoa_r+0x8fc>
 800857e:	9b07      	ldr	r3, [sp, #28]
 8008580:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008584:	0d1b      	lsrs	r3, r3, #20
 8008586:	051b      	lsls	r3, r3, #20
 8008588:	b133      	cbz	r3, 8008598 <_dtoa_r+0x7f0>
 800858a:	9b04      	ldr	r3, [sp, #16]
 800858c:	3301      	adds	r3, #1
 800858e:	9304      	str	r3, [sp, #16]
 8008590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008592:	3301      	adds	r3, #1
 8008594:	9309      	str	r3, [sp, #36]	@ 0x24
 8008596:	2301      	movs	r3, #1
 8008598:	930a      	str	r3, [sp, #40]	@ 0x28
 800859a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 81b8 	beq.w	8008912 <_dtoa_r+0xb6a>
 80085a2:	6923      	ldr	r3, [r4, #16]
 80085a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085a8:	6918      	ldr	r0, [r3, #16]
 80085aa:	f000 fb77 	bl	8008c9c <__hi0bits>
 80085ae:	f1c0 0020 	rsb	r0, r0, #32
 80085b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b4:	4418      	add	r0, r3
 80085b6:	f010 001f 	ands.w	r0, r0, #31
 80085ba:	f000 8082 	beq.w	80086c2 <_dtoa_r+0x91a>
 80085be:	f1c0 0320 	rsb	r3, r0, #32
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	dd73      	ble.n	80086ae <_dtoa_r+0x906>
 80085c6:	9b04      	ldr	r3, [sp, #16]
 80085c8:	f1c0 001c 	rsb	r0, r0, #28
 80085cc:	4403      	add	r3, r0
 80085ce:	9304      	str	r3, [sp, #16]
 80085d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d2:	4406      	add	r6, r0
 80085d4:	4403      	add	r3, r0
 80085d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80085d8:	9b04      	ldr	r3, [sp, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	dd05      	ble.n	80085ea <_dtoa_r+0x842>
 80085de:	461a      	mov	r2, r3
 80085e0:	4648      	mov	r0, r9
 80085e2:	9903      	ldr	r1, [sp, #12]
 80085e4:	f000 fcb8 	bl	8008f58 <__lshift>
 80085e8:	9003      	str	r0, [sp, #12]
 80085ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	dd05      	ble.n	80085fc <_dtoa_r+0x854>
 80085f0:	4621      	mov	r1, r4
 80085f2:	461a      	mov	r2, r3
 80085f4:	4648      	mov	r0, r9
 80085f6:	f000 fcaf 	bl	8008f58 <__lshift>
 80085fa:	4604      	mov	r4, r0
 80085fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d061      	beq.n	80086c6 <_dtoa_r+0x91e>
 8008602:	4621      	mov	r1, r4
 8008604:	9803      	ldr	r0, [sp, #12]
 8008606:	f000 fd13 	bl	8009030 <__mcmp>
 800860a:	2800      	cmp	r0, #0
 800860c:	da5b      	bge.n	80086c6 <_dtoa_r+0x91e>
 800860e:	2300      	movs	r3, #0
 8008610:	220a      	movs	r2, #10
 8008612:	4648      	mov	r0, r9
 8008614:	9903      	ldr	r1, [sp, #12]
 8008616:	f000 fafb 	bl	8008c10 <__multadd>
 800861a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800861c:	f107 38ff 	add.w	r8, r7, #4294967295
 8008620:	9003      	str	r0, [sp, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 8177 	beq.w	8008916 <_dtoa_r+0xb6e>
 8008628:	4629      	mov	r1, r5
 800862a:	2300      	movs	r3, #0
 800862c:	220a      	movs	r2, #10
 800862e:	4648      	mov	r0, r9
 8008630:	f000 faee 	bl	8008c10 <__multadd>
 8008634:	f1bb 0f00 	cmp.w	fp, #0
 8008638:	4605      	mov	r5, r0
 800863a:	dc6f      	bgt.n	800871c <_dtoa_r+0x974>
 800863c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800863e:	2b02      	cmp	r3, #2
 8008640:	dc49      	bgt.n	80086d6 <_dtoa_r+0x92e>
 8008642:	e06b      	b.n	800871c <_dtoa_r+0x974>
 8008644:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008646:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800864a:	e73c      	b.n	80084c6 <_dtoa_r+0x71e>
 800864c:	3fe00000 	.word	0x3fe00000
 8008650:	40240000 	.word	0x40240000
 8008654:	9b08      	ldr	r3, [sp, #32]
 8008656:	1e5c      	subs	r4, r3, #1
 8008658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800865a:	42a3      	cmp	r3, r4
 800865c:	db09      	blt.n	8008672 <_dtoa_r+0x8ca>
 800865e:	1b1c      	subs	r4, r3, r4
 8008660:	9b08      	ldr	r3, [sp, #32]
 8008662:	2b00      	cmp	r3, #0
 8008664:	f6bf af30 	bge.w	80084c8 <_dtoa_r+0x720>
 8008668:	9b04      	ldr	r3, [sp, #16]
 800866a:	9a08      	ldr	r2, [sp, #32]
 800866c:	1a9e      	subs	r6, r3, r2
 800866e:	2300      	movs	r3, #0
 8008670:	e72b      	b.n	80084ca <_dtoa_r+0x722>
 8008672:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008674:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008676:	1ae3      	subs	r3, r4, r3
 8008678:	441a      	add	r2, r3
 800867a:	940a      	str	r4, [sp, #40]	@ 0x28
 800867c:	9e04      	ldr	r6, [sp, #16]
 800867e:	2400      	movs	r4, #0
 8008680:	9b08      	ldr	r3, [sp, #32]
 8008682:	920e      	str	r2, [sp, #56]	@ 0x38
 8008684:	e721      	b.n	80084ca <_dtoa_r+0x722>
 8008686:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008688:	9e04      	ldr	r6, [sp, #16]
 800868a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800868c:	e728      	b.n	80084e0 <_dtoa_r+0x738>
 800868e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008692:	e751      	b.n	8008538 <_dtoa_r+0x790>
 8008694:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008696:	9903      	ldr	r1, [sp, #12]
 8008698:	e750      	b.n	800853c <_dtoa_r+0x794>
 800869a:	f8cd 800c 	str.w	r8, [sp, #12]
 800869e:	e751      	b.n	8008544 <_dtoa_r+0x79c>
 80086a0:	2300      	movs	r3, #0
 80086a2:	e779      	b.n	8008598 <_dtoa_r+0x7f0>
 80086a4:	9b06      	ldr	r3, [sp, #24]
 80086a6:	e777      	b.n	8008598 <_dtoa_r+0x7f0>
 80086a8:	2300      	movs	r3, #0
 80086aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80086ac:	e779      	b.n	80085a2 <_dtoa_r+0x7fa>
 80086ae:	d093      	beq.n	80085d8 <_dtoa_r+0x830>
 80086b0:	9a04      	ldr	r2, [sp, #16]
 80086b2:	331c      	adds	r3, #28
 80086b4:	441a      	add	r2, r3
 80086b6:	9204      	str	r2, [sp, #16]
 80086b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086ba:	441e      	add	r6, r3
 80086bc:	441a      	add	r2, r3
 80086be:	9209      	str	r2, [sp, #36]	@ 0x24
 80086c0:	e78a      	b.n	80085d8 <_dtoa_r+0x830>
 80086c2:	4603      	mov	r3, r0
 80086c4:	e7f4      	b.n	80086b0 <_dtoa_r+0x908>
 80086c6:	9b08      	ldr	r3, [sp, #32]
 80086c8:	46b8      	mov	r8, r7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	dc20      	bgt.n	8008710 <_dtoa_r+0x968>
 80086ce:	469b      	mov	fp, r3
 80086d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	dd1e      	ble.n	8008714 <_dtoa_r+0x96c>
 80086d6:	f1bb 0f00 	cmp.w	fp, #0
 80086da:	f47f adb1 	bne.w	8008240 <_dtoa_r+0x498>
 80086de:	4621      	mov	r1, r4
 80086e0:	465b      	mov	r3, fp
 80086e2:	2205      	movs	r2, #5
 80086e4:	4648      	mov	r0, r9
 80086e6:	f000 fa93 	bl	8008c10 <__multadd>
 80086ea:	4601      	mov	r1, r0
 80086ec:	4604      	mov	r4, r0
 80086ee:	9803      	ldr	r0, [sp, #12]
 80086f0:	f000 fc9e 	bl	8009030 <__mcmp>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	f77f ada3 	ble.w	8008240 <_dtoa_r+0x498>
 80086fa:	4656      	mov	r6, sl
 80086fc:	2331      	movs	r3, #49	@ 0x31
 80086fe:	f108 0801 	add.w	r8, r8, #1
 8008702:	f806 3b01 	strb.w	r3, [r6], #1
 8008706:	e59f      	b.n	8008248 <_dtoa_r+0x4a0>
 8008708:	46b8      	mov	r8, r7
 800870a:	9c08      	ldr	r4, [sp, #32]
 800870c:	4625      	mov	r5, r4
 800870e:	e7f4      	b.n	80086fa <_dtoa_r+0x952>
 8008710:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008714:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 8101 	beq.w	800891e <_dtoa_r+0xb76>
 800871c:	2e00      	cmp	r6, #0
 800871e:	dd05      	ble.n	800872c <_dtoa_r+0x984>
 8008720:	4629      	mov	r1, r5
 8008722:	4632      	mov	r2, r6
 8008724:	4648      	mov	r0, r9
 8008726:	f000 fc17 	bl	8008f58 <__lshift>
 800872a:	4605      	mov	r5, r0
 800872c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800872e:	2b00      	cmp	r3, #0
 8008730:	d05c      	beq.n	80087ec <_dtoa_r+0xa44>
 8008732:	4648      	mov	r0, r9
 8008734:	6869      	ldr	r1, [r5, #4]
 8008736:	f000 fa09 	bl	8008b4c <_Balloc>
 800873a:	4606      	mov	r6, r0
 800873c:	b928      	cbnz	r0, 800874a <_dtoa_r+0x9a2>
 800873e:	4602      	mov	r2, r0
 8008740:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008744:	4b80      	ldr	r3, [pc, #512]	@ (8008948 <_dtoa_r+0xba0>)
 8008746:	f7ff bb43 	b.w	8007dd0 <_dtoa_r+0x28>
 800874a:	692a      	ldr	r2, [r5, #16]
 800874c:	f105 010c 	add.w	r1, r5, #12
 8008750:	3202      	adds	r2, #2
 8008752:	0092      	lsls	r2, r2, #2
 8008754:	300c      	adds	r0, #12
 8008756:	f7ff fa90 	bl	8007c7a <memcpy>
 800875a:	2201      	movs	r2, #1
 800875c:	4631      	mov	r1, r6
 800875e:	4648      	mov	r0, r9
 8008760:	f000 fbfa 	bl	8008f58 <__lshift>
 8008764:	462f      	mov	r7, r5
 8008766:	4605      	mov	r5, r0
 8008768:	f10a 0301 	add.w	r3, sl, #1
 800876c:	9304      	str	r3, [sp, #16]
 800876e:	eb0a 030b 	add.w	r3, sl, fp
 8008772:	930a      	str	r3, [sp, #40]	@ 0x28
 8008774:	9b06      	ldr	r3, [sp, #24]
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	9309      	str	r3, [sp, #36]	@ 0x24
 800877c:	9b04      	ldr	r3, [sp, #16]
 800877e:	4621      	mov	r1, r4
 8008780:	9803      	ldr	r0, [sp, #12]
 8008782:	f103 3bff 	add.w	fp, r3, #4294967295
 8008786:	f7ff fa86 	bl	8007c96 <quorem>
 800878a:	4603      	mov	r3, r0
 800878c:	4639      	mov	r1, r7
 800878e:	3330      	adds	r3, #48	@ 0x30
 8008790:	9006      	str	r0, [sp, #24]
 8008792:	9803      	ldr	r0, [sp, #12]
 8008794:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008796:	f000 fc4b 	bl	8009030 <__mcmp>
 800879a:	462a      	mov	r2, r5
 800879c:	9008      	str	r0, [sp, #32]
 800879e:	4621      	mov	r1, r4
 80087a0:	4648      	mov	r0, r9
 80087a2:	f000 fc61 	bl	8009068 <__mdiff>
 80087a6:	68c2      	ldr	r2, [r0, #12]
 80087a8:	4606      	mov	r6, r0
 80087aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087ac:	bb02      	cbnz	r2, 80087f0 <_dtoa_r+0xa48>
 80087ae:	4601      	mov	r1, r0
 80087b0:	9803      	ldr	r0, [sp, #12]
 80087b2:	f000 fc3d 	bl	8009030 <__mcmp>
 80087b6:	4602      	mov	r2, r0
 80087b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087ba:	4631      	mov	r1, r6
 80087bc:	4648      	mov	r0, r9
 80087be:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80087c2:	f000 fa03 	bl	8008bcc <_Bfree>
 80087c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80087c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80087ca:	9e04      	ldr	r6, [sp, #16]
 80087cc:	ea42 0103 	orr.w	r1, r2, r3
 80087d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d2:	4319      	orrs	r1, r3
 80087d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087d6:	d10d      	bne.n	80087f4 <_dtoa_r+0xa4c>
 80087d8:	2b39      	cmp	r3, #57	@ 0x39
 80087da:	d027      	beq.n	800882c <_dtoa_r+0xa84>
 80087dc:	9a08      	ldr	r2, [sp, #32]
 80087de:	2a00      	cmp	r2, #0
 80087e0:	dd01      	ble.n	80087e6 <_dtoa_r+0xa3e>
 80087e2:	9b06      	ldr	r3, [sp, #24]
 80087e4:	3331      	adds	r3, #49	@ 0x31
 80087e6:	f88b 3000 	strb.w	r3, [fp]
 80087ea:	e52e      	b.n	800824a <_dtoa_r+0x4a2>
 80087ec:	4628      	mov	r0, r5
 80087ee:	e7b9      	b.n	8008764 <_dtoa_r+0x9bc>
 80087f0:	2201      	movs	r2, #1
 80087f2:	e7e2      	b.n	80087ba <_dtoa_r+0xa12>
 80087f4:	9908      	ldr	r1, [sp, #32]
 80087f6:	2900      	cmp	r1, #0
 80087f8:	db04      	blt.n	8008804 <_dtoa_r+0xa5c>
 80087fa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80087fc:	4301      	orrs	r1, r0
 80087fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008800:	4301      	orrs	r1, r0
 8008802:	d120      	bne.n	8008846 <_dtoa_r+0xa9e>
 8008804:	2a00      	cmp	r2, #0
 8008806:	ddee      	ble.n	80087e6 <_dtoa_r+0xa3e>
 8008808:	2201      	movs	r2, #1
 800880a:	9903      	ldr	r1, [sp, #12]
 800880c:	4648      	mov	r0, r9
 800880e:	9304      	str	r3, [sp, #16]
 8008810:	f000 fba2 	bl	8008f58 <__lshift>
 8008814:	4621      	mov	r1, r4
 8008816:	9003      	str	r0, [sp, #12]
 8008818:	f000 fc0a 	bl	8009030 <__mcmp>
 800881c:	2800      	cmp	r0, #0
 800881e:	9b04      	ldr	r3, [sp, #16]
 8008820:	dc02      	bgt.n	8008828 <_dtoa_r+0xa80>
 8008822:	d1e0      	bne.n	80087e6 <_dtoa_r+0xa3e>
 8008824:	07da      	lsls	r2, r3, #31
 8008826:	d5de      	bpl.n	80087e6 <_dtoa_r+0xa3e>
 8008828:	2b39      	cmp	r3, #57	@ 0x39
 800882a:	d1da      	bne.n	80087e2 <_dtoa_r+0xa3a>
 800882c:	2339      	movs	r3, #57	@ 0x39
 800882e:	f88b 3000 	strb.w	r3, [fp]
 8008832:	4633      	mov	r3, r6
 8008834:	461e      	mov	r6, r3
 8008836:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800883a:	3b01      	subs	r3, #1
 800883c:	2a39      	cmp	r2, #57	@ 0x39
 800883e:	d04e      	beq.n	80088de <_dtoa_r+0xb36>
 8008840:	3201      	adds	r2, #1
 8008842:	701a      	strb	r2, [r3, #0]
 8008844:	e501      	b.n	800824a <_dtoa_r+0x4a2>
 8008846:	2a00      	cmp	r2, #0
 8008848:	dd03      	ble.n	8008852 <_dtoa_r+0xaaa>
 800884a:	2b39      	cmp	r3, #57	@ 0x39
 800884c:	d0ee      	beq.n	800882c <_dtoa_r+0xa84>
 800884e:	3301      	adds	r3, #1
 8008850:	e7c9      	b.n	80087e6 <_dtoa_r+0xa3e>
 8008852:	9a04      	ldr	r2, [sp, #16]
 8008854:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008856:	f802 3c01 	strb.w	r3, [r2, #-1]
 800885a:	428a      	cmp	r2, r1
 800885c:	d028      	beq.n	80088b0 <_dtoa_r+0xb08>
 800885e:	2300      	movs	r3, #0
 8008860:	220a      	movs	r2, #10
 8008862:	9903      	ldr	r1, [sp, #12]
 8008864:	4648      	mov	r0, r9
 8008866:	f000 f9d3 	bl	8008c10 <__multadd>
 800886a:	42af      	cmp	r7, r5
 800886c:	9003      	str	r0, [sp, #12]
 800886e:	f04f 0300 	mov.w	r3, #0
 8008872:	f04f 020a 	mov.w	r2, #10
 8008876:	4639      	mov	r1, r7
 8008878:	4648      	mov	r0, r9
 800887a:	d107      	bne.n	800888c <_dtoa_r+0xae4>
 800887c:	f000 f9c8 	bl	8008c10 <__multadd>
 8008880:	4607      	mov	r7, r0
 8008882:	4605      	mov	r5, r0
 8008884:	9b04      	ldr	r3, [sp, #16]
 8008886:	3301      	adds	r3, #1
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	e777      	b.n	800877c <_dtoa_r+0x9d4>
 800888c:	f000 f9c0 	bl	8008c10 <__multadd>
 8008890:	4629      	mov	r1, r5
 8008892:	4607      	mov	r7, r0
 8008894:	2300      	movs	r3, #0
 8008896:	220a      	movs	r2, #10
 8008898:	4648      	mov	r0, r9
 800889a:	f000 f9b9 	bl	8008c10 <__multadd>
 800889e:	4605      	mov	r5, r0
 80088a0:	e7f0      	b.n	8008884 <_dtoa_r+0xadc>
 80088a2:	f1bb 0f00 	cmp.w	fp, #0
 80088a6:	bfcc      	ite	gt
 80088a8:	465e      	movgt	r6, fp
 80088aa:	2601      	movle	r6, #1
 80088ac:	2700      	movs	r7, #0
 80088ae:	4456      	add	r6, sl
 80088b0:	2201      	movs	r2, #1
 80088b2:	9903      	ldr	r1, [sp, #12]
 80088b4:	4648      	mov	r0, r9
 80088b6:	9304      	str	r3, [sp, #16]
 80088b8:	f000 fb4e 	bl	8008f58 <__lshift>
 80088bc:	4621      	mov	r1, r4
 80088be:	9003      	str	r0, [sp, #12]
 80088c0:	f000 fbb6 	bl	8009030 <__mcmp>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	dcb4      	bgt.n	8008832 <_dtoa_r+0xa8a>
 80088c8:	d102      	bne.n	80088d0 <_dtoa_r+0xb28>
 80088ca:	9b04      	ldr	r3, [sp, #16]
 80088cc:	07db      	lsls	r3, r3, #31
 80088ce:	d4b0      	bmi.n	8008832 <_dtoa_r+0xa8a>
 80088d0:	4633      	mov	r3, r6
 80088d2:	461e      	mov	r6, r3
 80088d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088d8:	2a30      	cmp	r2, #48	@ 0x30
 80088da:	d0fa      	beq.n	80088d2 <_dtoa_r+0xb2a>
 80088dc:	e4b5      	b.n	800824a <_dtoa_r+0x4a2>
 80088de:	459a      	cmp	sl, r3
 80088e0:	d1a8      	bne.n	8008834 <_dtoa_r+0xa8c>
 80088e2:	2331      	movs	r3, #49	@ 0x31
 80088e4:	f108 0801 	add.w	r8, r8, #1
 80088e8:	f88a 3000 	strb.w	r3, [sl]
 80088ec:	e4ad      	b.n	800824a <_dtoa_r+0x4a2>
 80088ee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80088f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800894c <_dtoa_r+0xba4>
 80088f4:	b11b      	cbz	r3, 80088fe <_dtoa_r+0xb56>
 80088f6:	f10a 0308 	add.w	r3, sl, #8
 80088fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	4650      	mov	r0, sl
 8008900:	b017      	add	sp, #92	@ 0x5c
 8008902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008906:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008908:	2b01      	cmp	r3, #1
 800890a:	f77f ae2e 	ble.w	800856a <_dtoa_r+0x7c2>
 800890e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008910:	930a      	str	r3, [sp, #40]	@ 0x28
 8008912:	2001      	movs	r0, #1
 8008914:	e64d      	b.n	80085b2 <_dtoa_r+0x80a>
 8008916:	f1bb 0f00 	cmp.w	fp, #0
 800891a:	f77f aed9 	ble.w	80086d0 <_dtoa_r+0x928>
 800891e:	4656      	mov	r6, sl
 8008920:	4621      	mov	r1, r4
 8008922:	9803      	ldr	r0, [sp, #12]
 8008924:	f7ff f9b7 	bl	8007c96 <quorem>
 8008928:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800892c:	f806 3b01 	strb.w	r3, [r6], #1
 8008930:	eba6 020a 	sub.w	r2, r6, sl
 8008934:	4593      	cmp	fp, r2
 8008936:	ddb4      	ble.n	80088a2 <_dtoa_r+0xafa>
 8008938:	2300      	movs	r3, #0
 800893a:	220a      	movs	r2, #10
 800893c:	4648      	mov	r0, r9
 800893e:	9903      	ldr	r1, [sp, #12]
 8008940:	f000 f966 	bl	8008c10 <__multadd>
 8008944:	9003      	str	r0, [sp, #12]
 8008946:	e7eb      	b.n	8008920 <_dtoa_r+0xb78>
 8008948:	0800ac2a 	.word	0x0800ac2a
 800894c:	0800abae 	.word	0x0800abae

08008950 <_free_r>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	4605      	mov	r5, r0
 8008954:	2900      	cmp	r1, #0
 8008956:	d040      	beq.n	80089da <_free_r+0x8a>
 8008958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800895c:	1f0c      	subs	r4, r1, #4
 800895e:	2b00      	cmp	r3, #0
 8008960:	bfb8      	it	lt
 8008962:	18e4      	addlt	r4, r4, r3
 8008964:	f000 f8e6 	bl	8008b34 <__malloc_lock>
 8008968:	4a1c      	ldr	r2, [pc, #112]	@ (80089dc <_free_r+0x8c>)
 800896a:	6813      	ldr	r3, [r2, #0]
 800896c:	b933      	cbnz	r3, 800897c <_free_r+0x2c>
 800896e:	6063      	str	r3, [r4, #4]
 8008970:	6014      	str	r4, [r2, #0]
 8008972:	4628      	mov	r0, r5
 8008974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008978:	f000 b8e2 	b.w	8008b40 <__malloc_unlock>
 800897c:	42a3      	cmp	r3, r4
 800897e:	d908      	bls.n	8008992 <_free_r+0x42>
 8008980:	6820      	ldr	r0, [r4, #0]
 8008982:	1821      	adds	r1, r4, r0
 8008984:	428b      	cmp	r3, r1
 8008986:	bf01      	itttt	eq
 8008988:	6819      	ldreq	r1, [r3, #0]
 800898a:	685b      	ldreq	r3, [r3, #4]
 800898c:	1809      	addeq	r1, r1, r0
 800898e:	6021      	streq	r1, [r4, #0]
 8008990:	e7ed      	b.n	800896e <_free_r+0x1e>
 8008992:	461a      	mov	r2, r3
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	b10b      	cbz	r3, 800899c <_free_r+0x4c>
 8008998:	42a3      	cmp	r3, r4
 800899a:	d9fa      	bls.n	8008992 <_free_r+0x42>
 800899c:	6811      	ldr	r1, [r2, #0]
 800899e:	1850      	adds	r0, r2, r1
 80089a0:	42a0      	cmp	r0, r4
 80089a2:	d10b      	bne.n	80089bc <_free_r+0x6c>
 80089a4:	6820      	ldr	r0, [r4, #0]
 80089a6:	4401      	add	r1, r0
 80089a8:	1850      	adds	r0, r2, r1
 80089aa:	4283      	cmp	r3, r0
 80089ac:	6011      	str	r1, [r2, #0]
 80089ae:	d1e0      	bne.n	8008972 <_free_r+0x22>
 80089b0:	6818      	ldr	r0, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	4408      	add	r0, r1
 80089b6:	6010      	str	r0, [r2, #0]
 80089b8:	6053      	str	r3, [r2, #4]
 80089ba:	e7da      	b.n	8008972 <_free_r+0x22>
 80089bc:	d902      	bls.n	80089c4 <_free_r+0x74>
 80089be:	230c      	movs	r3, #12
 80089c0:	602b      	str	r3, [r5, #0]
 80089c2:	e7d6      	b.n	8008972 <_free_r+0x22>
 80089c4:	6820      	ldr	r0, [r4, #0]
 80089c6:	1821      	adds	r1, r4, r0
 80089c8:	428b      	cmp	r3, r1
 80089ca:	bf01      	itttt	eq
 80089cc:	6819      	ldreq	r1, [r3, #0]
 80089ce:	685b      	ldreq	r3, [r3, #4]
 80089d0:	1809      	addeq	r1, r1, r0
 80089d2:	6021      	streq	r1, [r4, #0]
 80089d4:	6063      	str	r3, [r4, #4]
 80089d6:	6054      	str	r4, [r2, #4]
 80089d8:	e7cb      	b.n	8008972 <_free_r+0x22>
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	20000504 	.word	0x20000504

080089e0 <malloc>:
 80089e0:	4b02      	ldr	r3, [pc, #8]	@ (80089ec <malloc+0xc>)
 80089e2:	4601      	mov	r1, r0
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	f000 b825 	b.w	8008a34 <_malloc_r>
 80089ea:	bf00      	nop
 80089ec:	20000018 	.word	0x20000018

080089f0 <sbrk_aligned>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	4e0f      	ldr	r6, [pc, #60]	@ (8008a30 <sbrk_aligned+0x40>)
 80089f4:	460c      	mov	r4, r1
 80089f6:	6831      	ldr	r1, [r6, #0]
 80089f8:	4605      	mov	r5, r0
 80089fa:	b911      	cbnz	r1, 8008a02 <sbrk_aligned+0x12>
 80089fc:	f000 fe3a 	bl	8009674 <_sbrk_r>
 8008a00:	6030      	str	r0, [r6, #0]
 8008a02:	4621      	mov	r1, r4
 8008a04:	4628      	mov	r0, r5
 8008a06:	f000 fe35 	bl	8009674 <_sbrk_r>
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	d103      	bne.n	8008a16 <sbrk_aligned+0x26>
 8008a0e:	f04f 34ff 	mov.w	r4, #4294967295
 8008a12:	4620      	mov	r0, r4
 8008a14:	bd70      	pop	{r4, r5, r6, pc}
 8008a16:	1cc4      	adds	r4, r0, #3
 8008a18:	f024 0403 	bic.w	r4, r4, #3
 8008a1c:	42a0      	cmp	r0, r4
 8008a1e:	d0f8      	beq.n	8008a12 <sbrk_aligned+0x22>
 8008a20:	1a21      	subs	r1, r4, r0
 8008a22:	4628      	mov	r0, r5
 8008a24:	f000 fe26 	bl	8009674 <_sbrk_r>
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d1f2      	bne.n	8008a12 <sbrk_aligned+0x22>
 8008a2c:	e7ef      	b.n	8008a0e <sbrk_aligned+0x1e>
 8008a2e:	bf00      	nop
 8008a30:	20000500 	.word	0x20000500

08008a34 <_malloc_r>:
 8008a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a38:	1ccd      	adds	r5, r1, #3
 8008a3a:	f025 0503 	bic.w	r5, r5, #3
 8008a3e:	3508      	adds	r5, #8
 8008a40:	2d0c      	cmp	r5, #12
 8008a42:	bf38      	it	cc
 8008a44:	250c      	movcc	r5, #12
 8008a46:	2d00      	cmp	r5, #0
 8008a48:	4606      	mov	r6, r0
 8008a4a:	db01      	blt.n	8008a50 <_malloc_r+0x1c>
 8008a4c:	42a9      	cmp	r1, r5
 8008a4e:	d904      	bls.n	8008a5a <_malloc_r+0x26>
 8008a50:	230c      	movs	r3, #12
 8008a52:	6033      	str	r3, [r6, #0]
 8008a54:	2000      	movs	r0, #0
 8008a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b30 <_malloc_r+0xfc>
 8008a5e:	f000 f869 	bl	8008b34 <__malloc_lock>
 8008a62:	f8d8 3000 	ldr.w	r3, [r8]
 8008a66:	461c      	mov	r4, r3
 8008a68:	bb44      	cbnz	r4, 8008abc <_malloc_r+0x88>
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f7ff ffbf 	bl	80089f0 <sbrk_aligned>
 8008a72:	1c43      	adds	r3, r0, #1
 8008a74:	4604      	mov	r4, r0
 8008a76:	d158      	bne.n	8008b2a <_malloc_r+0xf6>
 8008a78:	f8d8 4000 	ldr.w	r4, [r8]
 8008a7c:	4627      	mov	r7, r4
 8008a7e:	2f00      	cmp	r7, #0
 8008a80:	d143      	bne.n	8008b0a <_malloc_r+0xd6>
 8008a82:	2c00      	cmp	r4, #0
 8008a84:	d04b      	beq.n	8008b1e <_malloc_r+0xea>
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	4639      	mov	r1, r7
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	eb04 0903 	add.w	r9, r4, r3
 8008a90:	f000 fdf0 	bl	8009674 <_sbrk_r>
 8008a94:	4581      	cmp	r9, r0
 8008a96:	d142      	bne.n	8008b1e <_malloc_r+0xea>
 8008a98:	6821      	ldr	r1, [r4, #0]
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	1a6d      	subs	r5, r5, r1
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	f7ff ffa6 	bl	80089f0 <sbrk_aligned>
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d03a      	beq.n	8008b1e <_malloc_r+0xea>
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	442b      	add	r3, r5
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	f8d8 3000 	ldr.w	r3, [r8]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	bb62      	cbnz	r2, 8008b10 <_malloc_r+0xdc>
 8008ab6:	f8c8 7000 	str.w	r7, [r8]
 8008aba:	e00f      	b.n	8008adc <_malloc_r+0xa8>
 8008abc:	6822      	ldr	r2, [r4, #0]
 8008abe:	1b52      	subs	r2, r2, r5
 8008ac0:	d420      	bmi.n	8008b04 <_malloc_r+0xd0>
 8008ac2:	2a0b      	cmp	r2, #11
 8008ac4:	d917      	bls.n	8008af6 <_malloc_r+0xc2>
 8008ac6:	1961      	adds	r1, r4, r5
 8008ac8:	42a3      	cmp	r3, r4
 8008aca:	6025      	str	r5, [r4, #0]
 8008acc:	bf18      	it	ne
 8008ace:	6059      	strne	r1, [r3, #4]
 8008ad0:	6863      	ldr	r3, [r4, #4]
 8008ad2:	bf08      	it	eq
 8008ad4:	f8c8 1000 	streq.w	r1, [r8]
 8008ad8:	5162      	str	r2, [r4, r5]
 8008ada:	604b      	str	r3, [r1, #4]
 8008adc:	4630      	mov	r0, r6
 8008ade:	f000 f82f 	bl	8008b40 <__malloc_unlock>
 8008ae2:	f104 000b 	add.w	r0, r4, #11
 8008ae6:	1d23      	adds	r3, r4, #4
 8008ae8:	f020 0007 	bic.w	r0, r0, #7
 8008aec:	1ac2      	subs	r2, r0, r3
 8008aee:	bf1c      	itt	ne
 8008af0:	1a1b      	subne	r3, r3, r0
 8008af2:	50a3      	strne	r3, [r4, r2]
 8008af4:	e7af      	b.n	8008a56 <_malloc_r+0x22>
 8008af6:	6862      	ldr	r2, [r4, #4]
 8008af8:	42a3      	cmp	r3, r4
 8008afa:	bf0c      	ite	eq
 8008afc:	f8c8 2000 	streq.w	r2, [r8]
 8008b00:	605a      	strne	r2, [r3, #4]
 8008b02:	e7eb      	b.n	8008adc <_malloc_r+0xa8>
 8008b04:	4623      	mov	r3, r4
 8008b06:	6864      	ldr	r4, [r4, #4]
 8008b08:	e7ae      	b.n	8008a68 <_malloc_r+0x34>
 8008b0a:	463c      	mov	r4, r7
 8008b0c:	687f      	ldr	r7, [r7, #4]
 8008b0e:	e7b6      	b.n	8008a7e <_malloc_r+0x4a>
 8008b10:	461a      	mov	r2, r3
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	42a3      	cmp	r3, r4
 8008b16:	d1fb      	bne.n	8008b10 <_malloc_r+0xdc>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	6053      	str	r3, [r2, #4]
 8008b1c:	e7de      	b.n	8008adc <_malloc_r+0xa8>
 8008b1e:	230c      	movs	r3, #12
 8008b20:	4630      	mov	r0, r6
 8008b22:	6033      	str	r3, [r6, #0]
 8008b24:	f000 f80c 	bl	8008b40 <__malloc_unlock>
 8008b28:	e794      	b.n	8008a54 <_malloc_r+0x20>
 8008b2a:	6005      	str	r5, [r0, #0]
 8008b2c:	e7d6      	b.n	8008adc <_malloc_r+0xa8>
 8008b2e:	bf00      	nop
 8008b30:	20000504 	.word	0x20000504

08008b34 <__malloc_lock>:
 8008b34:	4801      	ldr	r0, [pc, #4]	@ (8008b3c <__malloc_lock+0x8>)
 8008b36:	f7ff b890 	b.w	8007c5a <__retarget_lock_acquire_recursive>
 8008b3a:	bf00      	nop
 8008b3c:	200004fc 	.word	0x200004fc

08008b40 <__malloc_unlock>:
 8008b40:	4801      	ldr	r0, [pc, #4]	@ (8008b48 <__malloc_unlock+0x8>)
 8008b42:	f7ff b88b 	b.w	8007c5c <__retarget_lock_release_recursive>
 8008b46:	bf00      	nop
 8008b48:	200004fc 	.word	0x200004fc

08008b4c <_Balloc>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	69c6      	ldr	r6, [r0, #28]
 8008b50:	4604      	mov	r4, r0
 8008b52:	460d      	mov	r5, r1
 8008b54:	b976      	cbnz	r6, 8008b74 <_Balloc+0x28>
 8008b56:	2010      	movs	r0, #16
 8008b58:	f7ff ff42 	bl	80089e0 <malloc>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	61e0      	str	r0, [r4, #28]
 8008b60:	b920      	cbnz	r0, 8008b6c <_Balloc+0x20>
 8008b62:	216b      	movs	r1, #107	@ 0x6b
 8008b64:	4b17      	ldr	r3, [pc, #92]	@ (8008bc4 <_Balloc+0x78>)
 8008b66:	4818      	ldr	r0, [pc, #96]	@ (8008bc8 <_Balloc+0x7c>)
 8008b68:	f000 fd94 	bl	8009694 <__assert_func>
 8008b6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b70:	6006      	str	r6, [r0, #0]
 8008b72:	60c6      	str	r6, [r0, #12]
 8008b74:	69e6      	ldr	r6, [r4, #28]
 8008b76:	68f3      	ldr	r3, [r6, #12]
 8008b78:	b183      	cbz	r3, 8008b9c <_Balloc+0x50>
 8008b7a:	69e3      	ldr	r3, [r4, #28]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b82:	b9b8      	cbnz	r0, 8008bb4 <_Balloc+0x68>
 8008b84:	2101      	movs	r1, #1
 8008b86:	fa01 f605 	lsl.w	r6, r1, r5
 8008b8a:	1d72      	adds	r2, r6, #5
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	0092      	lsls	r2, r2, #2
 8008b90:	f000 fd9e 	bl	80096d0 <_calloc_r>
 8008b94:	b160      	cbz	r0, 8008bb0 <_Balloc+0x64>
 8008b96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b9a:	e00e      	b.n	8008bba <_Balloc+0x6e>
 8008b9c:	2221      	movs	r2, #33	@ 0x21
 8008b9e:	2104      	movs	r1, #4
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fd95 	bl	80096d0 <_calloc_r>
 8008ba6:	69e3      	ldr	r3, [r4, #28]
 8008ba8:	60f0      	str	r0, [r6, #12]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1e4      	bne.n	8008b7a <_Balloc+0x2e>
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}
 8008bb4:	6802      	ldr	r2, [r0, #0]
 8008bb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bc0:	e7f7      	b.n	8008bb2 <_Balloc+0x66>
 8008bc2:	bf00      	nop
 8008bc4:	0800abbb 	.word	0x0800abbb
 8008bc8:	0800ac3b 	.word	0x0800ac3b

08008bcc <_Bfree>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	69c6      	ldr	r6, [r0, #28]
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	b976      	cbnz	r6, 8008bf4 <_Bfree+0x28>
 8008bd6:	2010      	movs	r0, #16
 8008bd8:	f7ff ff02 	bl	80089e0 <malloc>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	61e8      	str	r0, [r5, #28]
 8008be0:	b920      	cbnz	r0, 8008bec <_Bfree+0x20>
 8008be2:	218f      	movs	r1, #143	@ 0x8f
 8008be4:	4b08      	ldr	r3, [pc, #32]	@ (8008c08 <_Bfree+0x3c>)
 8008be6:	4809      	ldr	r0, [pc, #36]	@ (8008c0c <_Bfree+0x40>)
 8008be8:	f000 fd54 	bl	8009694 <__assert_func>
 8008bec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bf0:	6006      	str	r6, [r0, #0]
 8008bf2:	60c6      	str	r6, [r0, #12]
 8008bf4:	b13c      	cbz	r4, 8008c06 <_Bfree+0x3a>
 8008bf6:	69eb      	ldr	r3, [r5, #28]
 8008bf8:	6862      	ldr	r2, [r4, #4]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c00:	6021      	str	r1, [r4, #0]
 8008c02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	0800abbb 	.word	0x0800abbb
 8008c0c:	0800ac3b 	.word	0x0800ac3b

08008c10 <__multadd>:
 8008c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c14:	4607      	mov	r7, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	461e      	mov	r6, r3
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	690d      	ldr	r5, [r1, #16]
 8008c1e:	f101 0c14 	add.w	ip, r1, #20
 8008c22:	f8dc 3000 	ldr.w	r3, [ip]
 8008c26:	3001      	adds	r0, #1
 8008c28:	b299      	uxth	r1, r3
 8008c2a:	fb02 6101 	mla	r1, r2, r1, r6
 8008c2e:	0c1e      	lsrs	r6, r3, #16
 8008c30:	0c0b      	lsrs	r3, r1, #16
 8008c32:	fb02 3306 	mla	r3, r2, r6, r3
 8008c36:	b289      	uxth	r1, r1
 8008c38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c3c:	4285      	cmp	r5, r0
 8008c3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c42:	f84c 1b04 	str.w	r1, [ip], #4
 8008c46:	dcec      	bgt.n	8008c22 <__multadd+0x12>
 8008c48:	b30e      	cbz	r6, 8008c8e <__multadd+0x7e>
 8008c4a:	68a3      	ldr	r3, [r4, #8]
 8008c4c:	42ab      	cmp	r3, r5
 8008c4e:	dc19      	bgt.n	8008c84 <__multadd+0x74>
 8008c50:	6861      	ldr	r1, [r4, #4]
 8008c52:	4638      	mov	r0, r7
 8008c54:	3101      	adds	r1, #1
 8008c56:	f7ff ff79 	bl	8008b4c <_Balloc>
 8008c5a:	4680      	mov	r8, r0
 8008c5c:	b928      	cbnz	r0, 8008c6a <__multadd+0x5a>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	21ba      	movs	r1, #186	@ 0xba
 8008c62:	4b0c      	ldr	r3, [pc, #48]	@ (8008c94 <__multadd+0x84>)
 8008c64:	480c      	ldr	r0, [pc, #48]	@ (8008c98 <__multadd+0x88>)
 8008c66:	f000 fd15 	bl	8009694 <__assert_func>
 8008c6a:	6922      	ldr	r2, [r4, #16]
 8008c6c:	f104 010c 	add.w	r1, r4, #12
 8008c70:	3202      	adds	r2, #2
 8008c72:	0092      	lsls	r2, r2, #2
 8008c74:	300c      	adds	r0, #12
 8008c76:	f7ff f800 	bl	8007c7a <memcpy>
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f7ff ffa5 	bl	8008bcc <_Bfree>
 8008c82:	4644      	mov	r4, r8
 8008c84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c88:	3501      	adds	r5, #1
 8008c8a:	615e      	str	r6, [r3, #20]
 8008c8c:	6125      	str	r5, [r4, #16]
 8008c8e:	4620      	mov	r0, r4
 8008c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c94:	0800ac2a 	.word	0x0800ac2a
 8008c98:	0800ac3b 	.word	0x0800ac3b

08008c9c <__hi0bits>:
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ca2:	bf3a      	itte	cc
 8008ca4:	0403      	lslcc	r3, r0, #16
 8008ca6:	2010      	movcc	r0, #16
 8008ca8:	2000      	movcs	r0, #0
 8008caa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cae:	bf3c      	itt	cc
 8008cb0:	021b      	lslcc	r3, r3, #8
 8008cb2:	3008      	addcc	r0, #8
 8008cb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cb8:	bf3c      	itt	cc
 8008cba:	011b      	lslcc	r3, r3, #4
 8008cbc:	3004      	addcc	r0, #4
 8008cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cc2:	bf3c      	itt	cc
 8008cc4:	009b      	lslcc	r3, r3, #2
 8008cc6:	3002      	addcc	r0, #2
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	db05      	blt.n	8008cd8 <__hi0bits+0x3c>
 8008ccc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008cd0:	f100 0001 	add.w	r0, r0, #1
 8008cd4:	bf08      	it	eq
 8008cd6:	2020      	moveq	r0, #32
 8008cd8:	4770      	bx	lr

08008cda <__lo0bits>:
 8008cda:	6803      	ldr	r3, [r0, #0]
 8008cdc:	4602      	mov	r2, r0
 8008cde:	f013 0007 	ands.w	r0, r3, #7
 8008ce2:	d00b      	beq.n	8008cfc <__lo0bits+0x22>
 8008ce4:	07d9      	lsls	r1, r3, #31
 8008ce6:	d421      	bmi.n	8008d2c <__lo0bits+0x52>
 8008ce8:	0798      	lsls	r0, r3, #30
 8008cea:	bf49      	itett	mi
 8008cec:	085b      	lsrmi	r3, r3, #1
 8008cee:	089b      	lsrpl	r3, r3, #2
 8008cf0:	2001      	movmi	r0, #1
 8008cf2:	6013      	strmi	r3, [r2, #0]
 8008cf4:	bf5c      	itt	pl
 8008cf6:	2002      	movpl	r0, #2
 8008cf8:	6013      	strpl	r3, [r2, #0]
 8008cfa:	4770      	bx	lr
 8008cfc:	b299      	uxth	r1, r3
 8008cfe:	b909      	cbnz	r1, 8008d04 <__lo0bits+0x2a>
 8008d00:	2010      	movs	r0, #16
 8008d02:	0c1b      	lsrs	r3, r3, #16
 8008d04:	b2d9      	uxtb	r1, r3
 8008d06:	b909      	cbnz	r1, 8008d0c <__lo0bits+0x32>
 8008d08:	3008      	adds	r0, #8
 8008d0a:	0a1b      	lsrs	r3, r3, #8
 8008d0c:	0719      	lsls	r1, r3, #28
 8008d0e:	bf04      	itt	eq
 8008d10:	091b      	lsreq	r3, r3, #4
 8008d12:	3004      	addeq	r0, #4
 8008d14:	0799      	lsls	r1, r3, #30
 8008d16:	bf04      	itt	eq
 8008d18:	089b      	lsreq	r3, r3, #2
 8008d1a:	3002      	addeq	r0, #2
 8008d1c:	07d9      	lsls	r1, r3, #31
 8008d1e:	d403      	bmi.n	8008d28 <__lo0bits+0x4e>
 8008d20:	085b      	lsrs	r3, r3, #1
 8008d22:	f100 0001 	add.w	r0, r0, #1
 8008d26:	d003      	beq.n	8008d30 <__lo0bits+0x56>
 8008d28:	6013      	str	r3, [r2, #0]
 8008d2a:	4770      	bx	lr
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	4770      	bx	lr
 8008d30:	2020      	movs	r0, #32
 8008d32:	4770      	bx	lr

08008d34 <__i2b>:
 8008d34:	b510      	push	{r4, lr}
 8008d36:	460c      	mov	r4, r1
 8008d38:	2101      	movs	r1, #1
 8008d3a:	f7ff ff07 	bl	8008b4c <_Balloc>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	b928      	cbnz	r0, 8008d4e <__i2b+0x1a>
 8008d42:	f240 1145 	movw	r1, #325	@ 0x145
 8008d46:	4b04      	ldr	r3, [pc, #16]	@ (8008d58 <__i2b+0x24>)
 8008d48:	4804      	ldr	r0, [pc, #16]	@ (8008d5c <__i2b+0x28>)
 8008d4a:	f000 fca3 	bl	8009694 <__assert_func>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	6144      	str	r4, [r0, #20]
 8008d52:	6103      	str	r3, [r0, #16]
 8008d54:	bd10      	pop	{r4, pc}
 8008d56:	bf00      	nop
 8008d58:	0800ac2a 	.word	0x0800ac2a
 8008d5c:	0800ac3b 	.word	0x0800ac3b

08008d60 <__multiply>:
 8008d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	4617      	mov	r7, r2
 8008d66:	690a      	ldr	r2, [r1, #16]
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	4689      	mov	r9, r1
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	bfa2      	ittt	ge
 8008d70:	463b      	movge	r3, r7
 8008d72:	460f      	movge	r7, r1
 8008d74:	4699      	movge	r9, r3
 8008d76:	693d      	ldr	r5, [r7, #16]
 8008d78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	6879      	ldr	r1, [r7, #4]
 8008d80:	eb05 060a 	add.w	r6, r5, sl
 8008d84:	42b3      	cmp	r3, r6
 8008d86:	b085      	sub	sp, #20
 8008d88:	bfb8      	it	lt
 8008d8a:	3101      	addlt	r1, #1
 8008d8c:	f7ff fede 	bl	8008b4c <_Balloc>
 8008d90:	b930      	cbnz	r0, 8008da0 <__multiply+0x40>
 8008d92:	4602      	mov	r2, r0
 8008d94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d98:	4b40      	ldr	r3, [pc, #256]	@ (8008e9c <__multiply+0x13c>)
 8008d9a:	4841      	ldr	r0, [pc, #260]	@ (8008ea0 <__multiply+0x140>)
 8008d9c:	f000 fc7a 	bl	8009694 <__assert_func>
 8008da0:	f100 0414 	add.w	r4, r0, #20
 8008da4:	4623      	mov	r3, r4
 8008da6:	2200      	movs	r2, #0
 8008da8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008dac:	4573      	cmp	r3, lr
 8008dae:	d320      	bcc.n	8008df2 <__multiply+0x92>
 8008db0:	f107 0814 	add.w	r8, r7, #20
 8008db4:	f109 0114 	add.w	r1, r9, #20
 8008db8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008dbc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008dc0:	9302      	str	r3, [sp, #8]
 8008dc2:	1beb      	subs	r3, r5, r7
 8008dc4:	3b15      	subs	r3, #21
 8008dc6:	f023 0303 	bic.w	r3, r3, #3
 8008dca:	3304      	adds	r3, #4
 8008dcc:	3715      	adds	r7, #21
 8008dce:	42bd      	cmp	r5, r7
 8008dd0:	bf38      	it	cc
 8008dd2:	2304      	movcc	r3, #4
 8008dd4:	9301      	str	r3, [sp, #4]
 8008dd6:	9b02      	ldr	r3, [sp, #8]
 8008dd8:	9103      	str	r1, [sp, #12]
 8008dda:	428b      	cmp	r3, r1
 8008ddc:	d80c      	bhi.n	8008df8 <__multiply+0x98>
 8008dde:	2e00      	cmp	r6, #0
 8008de0:	dd03      	ble.n	8008dea <__multiply+0x8a>
 8008de2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d055      	beq.n	8008e96 <__multiply+0x136>
 8008dea:	6106      	str	r6, [r0, #16]
 8008dec:	b005      	add	sp, #20
 8008dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df2:	f843 2b04 	str.w	r2, [r3], #4
 8008df6:	e7d9      	b.n	8008dac <__multiply+0x4c>
 8008df8:	f8b1 a000 	ldrh.w	sl, [r1]
 8008dfc:	f1ba 0f00 	cmp.w	sl, #0
 8008e00:	d01f      	beq.n	8008e42 <__multiply+0xe2>
 8008e02:	46c4      	mov	ip, r8
 8008e04:	46a1      	mov	r9, r4
 8008e06:	2700      	movs	r7, #0
 8008e08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e0c:	f8d9 3000 	ldr.w	r3, [r9]
 8008e10:	fa1f fb82 	uxth.w	fp, r2
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	fb0a 330b 	mla	r3, sl, fp, r3
 8008e1a:	443b      	add	r3, r7
 8008e1c:	f8d9 7000 	ldr.w	r7, [r9]
 8008e20:	0c12      	lsrs	r2, r2, #16
 8008e22:	0c3f      	lsrs	r7, r7, #16
 8008e24:	fb0a 7202 	mla	r2, sl, r2, r7
 8008e28:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e32:	4565      	cmp	r5, ip
 8008e34:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008e38:	f849 3b04 	str.w	r3, [r9], #4
 8008e3c:	d8e4      	bhi.n	8008e08 <__multiply+0xa8>
 8008e3e:	9b01      	ldr	r3, [sp, #4]
 8008e40:	50e7      	str	r7, [r4, r3]
 8008e42:	9b03      	ldr	r3, [sp, #12]
 8008e44:	3104      	adds	r1, #4
 8008e46:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008e4a:	f1b9 0f00 	cmp.w	r9, #0
 8008e4e:	d020      	beq.n	8008e92 <__multiply+0x132>
 8008e50:	4647      	mov	r7, r8
 8008e52:	46a4      	mov	ip, r4
 8008e54:	f04f 0a00 	mov.w	sl, #0
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	f8b7 b000 	ldrh.w	fp, [r7]
 8008e5e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	fb09 220b 	mla	r2, r9, fp, r2
 8008e68:	4452      	add	r2, sl
 8008e6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e6e:	f84c 3b04 	str.w	r3, [ip], #4
 8008e72:	f857 3b04 	ldr.w	r3, [r7], #4
 8008e76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e7a:	f8bc 3000 	ldrh.w	r3, [ip]
 8008e7e:	42bd      	cmp	r5, r7
 8008e80:	fb09 330a 	mla	r3, r9, sl, r3
 8008e84:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008e88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e8c:	d8e5      	bhi.n	8008e5a <__multiply+0xfa>
 8008e8e:	9a01      	ldr	r2, [sp, #4]
 8008e90:	50a3      	str	r3, [r4, r2]
 8008e92:	3404      	adds	r4, #4
 8008e94:	e79f      	b.n	8008dd6 <__multiply+0x76>
 8008e96:	3e01      	subs	r6, #1
 8008e98:	e7a1      	b.n	8008dde <__multiply+0x7e>
 8008e9a:	bf00      	nop
 8008e9c:	0800ac2a 	.word	0x0800ac2a
 8008ea0:	0800ac3b 	.word	0x0800ac3b

08008ea4 <__pow5mult>:
 8008ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea8:	4615      	mov	r5, r2
 8008eaa:	f012 0203 	ands.w	r2, r2, #3
 8008eae:	4607      	mov	r7, r0
 8008eb0:	460e      	mov	r6, r1
 8008eb2:	d007      	beq.n	8008ec4 <__pow5mult+0x20>
 8008eb4:	4c25      	ldr	r4, [pc, #148]	@ (8008f4c <__pow5mult+0xa8>)
 8008eb6:	3a01      	subs	r2, #1
 8008eb8:	2300      	movs	r3, #0
 8008eba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ebe:	f7ff fea7 	bl	8008c10 <__multadd>
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	10ad      	asrs	r5, r5, #2
 8008ec6:	d03d      	beq.n	8008f44 <__pow5mult+0xa0>
 8008ec8:	69fc      	ldr	r4, [r7, #28]
 8008eca:	b97c      	cbnz	r4, 8008eec <__pow5mult+0x48>
 8008ecc:	2010      	movs	r0, #16
 8008ece:	f7ff fd87 	bl	80089e0 <malloc>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	61f8      	str	r0, [r7, #28]
 8008ed6:	b928      	cbnz	r0, 8008ee4 <__pow5mult+0x40>
 8008ed8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008edc:	4b1c      	ldr	r3, [pc, #112]	@ (8008f50 <__pow5mult+0xac>)
 8008ede:	481d      	ldr	r0, [pc, #116]	@ (8008f54 <__pow5mult+0xb0>)
 8008ee0:	f000 fbd8 	bl	8009694 <__assert_func>
 8008ee4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ee8:	6004      	str	r4, [r0, #0]
 8008eea:	60c4      	str	r4, [r0, #12]
 8008eec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ef0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ef4:	b94c      	cbnz	r4, 8008f0a <__pow5mult+0x66>
 8008ef6:	f240 2171 	movw	r1, #625	@ 0x271
 8008efa:	4638      	mov	r0, r7
 8008efc:	f7ff ff1a 	bl	8008d34 <__i2b>
 8008f00:	2300      	movs	r3, #0
 8008f02:	4604      	mov	r4, r0
 8008f04:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f08:	6003      	str	r3, [r0, #0]
 8008f0a:	f04f 0900 	mov.w	r9, #0
 8008f0e:	07eb      	lsls	r3, r5, #31
 8008f10:	d50a      	bpl.n	8008f28 <__pow5mult+0x84>
 8008f12:	4631      	mov	r1, r6
 8008f14:	4622      	mov	r2, r4
 8008f16:	4638      	mov	r0, r7
 8008f18:	f7ff ff22 	bl	8008d60 <__multiply>
 8008f1c:	4680      	mov	r8, r0
 8008f1e:	4631      	mov	r1, r6
 8008f20:	4638      	mov	r0, r7
 8008f22:	f7ff fe53 	bl	8008bcc <_Bfree>
 8008f26:	4646      	mov	r6, r8
 8008f28:	106d      	asrs	r5, r5, #1
 8008f2a:	d00b      	beq.n	8008f44 <__pow5mult+0xa0>
 8008f2c:	6820      	ldr	r0, [r4, #0]
 8008f2e:	b938      	cbnz	r0, 8008f40 <__pow5mult+0x9c>
 8008f30:	4622      	mov	r2, r4
 8008f32:	4621      	mov	r1, r4
 8008f34:	4638      	mov	r0, r7
 8008f36:	f7ff ff13 	bl	8008d60 <__multiply>
 8008f3a:	6020      	str	r0, [r4, #0]
 8008f3c:	f8c0 9000 	str.w	r9, [r0]
 8008f40:	4604      	mov	r4, r0
 8008f42:	e7e4      	b.n	8008f0e <__pow5mult+0x6a>
 8008f44:	4630      	mov	r0, r6
 8008f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f4a:	bf00      	nop
 8008f4c:	0800acec 	.word	0x0800acec
 8008f50:	0800abbb 	.word	0x0800abbb
 8008f54:	0800ac3b 	.word	0x0800ac3b

08008f58 <__lshift>:
 8008f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	4607      	mov	r7, r0
 8008f60:	4691      	mov	r9, r2
 8008f62:	6923      	ldr	r3, [r4, #16]
 8008f64:	6849      	ldr	r1, [r1, #4]
 8008f66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f6a:	68a3      	ldr	r3, [r4, #8]
 8008f6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f70:	f108 0601 	add.w	r6, r8, #1
 8008f74:	42b3      	cmp	r3, r6
 8008f76:	db0b      	blt.n	8008f90 <__lshift+0x38>
 8008f78:	4638      	mov	r0, r7
 8008f7a:	f7ff fde7 	bl	8008b4c <_Balloc>
 8008f7e:	4605      	mov	r5, r0
 8008f80:	b948      	cbnz	r0, 8008f96 <__lshift+0x3e>
 8008f82:	4602      	mov	r2, r0
 8008f84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f88:	4b27      	ldr	r3, [pc, #156]	@ (8009028 <__lshift+0xd0>)
 8008f8a:	4828      	ldr	r0, [pc, #160]	@ (800902c <__lshift+0xd4>)
 8008f8c:	f000 fb82 	bl	8009694 <__assert_func>
 8008f90:	3101      	adds	r1, #1
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	e7ee      	b.n	8008f74 <__lshift+0x1c>
 8008f96:	2300      	movs	r3, #0
 8008f98:	f100 0114 	add.w	r1, r0, #20
 8008f9c:	f100 0210 	add.w	r2, r0, #16
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	4553      	cmp	r3, sl
 8008fa4:	db33      	blt.n	800900e <__lshift+0xb6>
 8008fa6:	6920      	ldr	r0, [r4, #16]
 8008fa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fac:	f104 0314 	add.w	r3, r4, #20
 8008fb0:	f019 091f 	ands.w	r9, r9, #31
 8008fb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008fbc:	d02b      	beq.n	8009016 <__lshift+0xbe>
 8008fbe:	468a      	mov	sl, r1
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f1c9 0e20 	rsb	lr, r9, #32
 8008fc6:	6818      	ldr	r0, [r3, #0]
 8008fc8:	fa00 f009 	lsl.w	r0, r0, r9
 8008fcc:	4310      	orrs	r0, r2
 8008fce:	f84a 0b04 	str.w	r0, [sl], #4
 8008fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fd6:	459c      	cmp	ip, r3
 8008fd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008fdc:	d8f3      	bhi.n	8008fc6 <__lshift+0x6e>
 8008fde:	ebac 0304 	sub.w	r3, ip, r4
 8008fe2:	3b15      	subs	r3, #21
 8008fe4:	f023 0303 	bic.w	r3, r3, #3
 8008fe8:	3304      	adds	r3, #4
 8008fea:	f104 0015 	add.w	r0, r4, #21
 8008fee:	4560      	cmp	r0, ip
 8008ff0:	bf88      	it	hi
 8008ff2:	2304      	movhi	r3, #4
 8008ff4:	50ca      	str	r2, [r1, r3]
 8008ff6:	b10a      	cbz	r2, 8008ffc <__lshift+0xa4>
 8008ff8:	f108 0602 	add.w	r6, r8, #2
 8008ffc:	3e01      	subs	r6, #1
 8008ffe:	4638      	mov	r0, r7
 8009000:	4621      	mov	r1, r4
 8009002:	612e      	str	r6, [r5, #16]
 8009004:	f7ff fde2 	bl	8008bcc <_Bfree>
 8009008:	4628      	mov	r0, r5
 800900a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009012:	3301      	adds	r3, #1
 8009014:	e7c5      	b.n	8008fa2 <__lshift+0x4a>
 8009016:	3904      	subs	r1, #4
 8009018:	f853 2b04 	ldr.w	r2, [r3], #4
 800901c:	459c      	cmp	ip, r3
 800901e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009022:	d8f9      	bhi.n	8009018 <__lshift+0xc0>
 8009024:	e7ea      	b.n	8008ffc <__lshift+0xa4>
 8009026:	bf00      	nop
 8009028:	0800ac2a 	.word	0x0800ac2a
 800902c:	0800ac3b 	.word	0x0800ac3b

08009030 <__mcmp>:
 8009030:	4603      	mov	r3, r0
 8009032:	690a      	ldr	r2, [r1, #16]
 8009034:	6900      	ldr	r0, [r0, #16]
 8009036:	b530      	push	{r4, r5, lr}
 8009038:	1a80      	subs	r0, r0, r2
 800903a:	d10e      	bne.n	800905a <__mcmp+0x2a>
 800903c:	3314      	adds	r3, #20
 800903e:	3114      	adds	r1, #20
 8009040:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009044:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009048:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800904c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009050:	4295      	cmp	r5, r2
 8009052:	d003      	beq.n	800905c <__mcmp+0x2c>
 8009054:	d205      	bcs.n	8009062 <__mcmp+0x32>
 8009056:	f04f 30ff 	mov.w	r0, #4294967295
 800905a:	bd30      	pop	{r4, r5, pc}
 800905c:	42a3      	cmp	r3, r4
 800905e:	d3f3      	bcc.n	8009048 <__mcmp+0x18>
 8009060:	e7fb      	b.n	800905a <__mcmp+0x2a>
 8009062:	2001      	movs	r0, #1
 8009064:	e7f9      	b.n	800905a <__mcmp+0x2a>
	...

08009068 <__mdiff>:
 8009068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	4689      	mov	r9, r1
 800906e:	4606      	mov	r6, r0
 8009070:	4611      	mov	r1, r2
 8009072:	4648      	mov	r0, r9
 8009074:	4614      	mov	r4, r2
 8009076:	f7ff ffdb 	bl	8009030 <__mcmp>
 800907a:	1e05      	subs	r5, r0, #0
 800907c:	d112      	bne.n	80090a4 <__mdiff+0x3c>
 800907e:	4629      	mov	r1, r5
 8009080:	4630      	mov	r0, r6
 8009082:	f7ff fd63 	bl	8008b4c <_Balloc>
 8009086:	4602      	mov	r2, r0
 8009088:	b928      	cbnz	r0, 8009096 <__mdiff+0x2e>
 800908a:	f240 2137 	movw	r1, #567	@ 0x237
 800908e:	4b3e      	ldr	r3, [pc, #248]	@ (8009188 <__mdiff+0x120>)
 8009090:	483e      	ldr	r0, [pc, #248]	@ (800918c <__mdiff+0x124>)
 8009092:	f000 faff 	bl	8009694 <__assert_func>
 8009096:	2301      	movs	r3, #1
 8009098:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800909c:	4610      	mov	r0, r2
 800909e:	b003      	add	sp, #12
 80090a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a4:	bfbc      	itt	lt
 80090a6:	464b      	movlt	r3, r9
 80090a8:	46a1      	movlt	r9, r4
 80090aa:	4630      	mov	r0, r6
 80090ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80090b0:	bfba      	itte	lt
 80090b2:	461c      	movlt	r4, r3
 80090b4:	2501      	movlt	r5, #1
 80090b6:	2500      	movge	r5, #0
 80090b8:	f7ff fd48 	bl	8008b4c <_Balloc>
 80090bc:	4602      	mov	r2, r0
 80090be:	b918      	cbnz	r0, 80090c8 <__mdiff+0x60>
 80090c0:	f240 2145 	movw	r1, #581	@ 0x245
 80090c4:	4b30      	ldr	r3, [pc, #192]	@ (8009188 <__mdiff+0x120>)
 80090c6:	e7e3      	b.n	8009090 <__mdiff+0x28>
 80090c8:	f100 0b14 	add.w	fp, r0, #20
 80090cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80090d0:	f109 0310 	add.w	r3, r9, #16
 80090d4:	60c5      	str	r5, [r0, #12]
 80090d6:	f04f 0c00 	mov.w	ip, #0
 80090da:	f109 0514 	add.w	r5, r9, #20
 80090de:	46d9      	mov	r9, fp
 80090e0:	6926      	ldr	r6, [r4, #16]
 80090e2:	f104 0e14 	add.w	lr, r4, #20
 80090e6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80090ea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	9b01      	ldr	r3, [sp, #4]
 80090f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80090f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80090fa:	b281      	uxth	r1, r0
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	fa1f f38a 	uxth.w	r3, sl
 8009102:	1a5b      	subs	r3, r3, r1
 8009104:	0c00      	lsrs	r0, r0, #16
 8009106:	4463      	add	r3, ip
 8009108:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800910c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009110:	b29b      	uxth	r3, r3
 8009112:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009116:	4576      	cmp	r6, lr
 8009118:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800911c:	f849 3b04 	str.w	r3, [r9], #4
 8009120:	d8e6      	bhi.n	80090f0 <__mdiff+0x88>
 8009122:	1b33      	subs	r3, r6, r4
 8009124:	3b15      	subs	r3, #21
 8009126:	f023 0303 	bic.w	r3, r3, #3
 800912a:	3415      	adds	r4, #21
 800912c:	3304      	adds	r3, #4
 800912e:	42a6      	cmp	r6, r4
 8009130:	bf38      	it	cc
 8009132:	2304      	movcc	r3, #4
 8009134:	441d      	add	r5, r3
 8009136:	445b      	add	r3, fp
 8009138:	461e      	mov	r6, r3
 800913a:	462c      	mov	r4, r5
 800913c:	4544      	cmp	r4, r8
 800913e:	d30e      	bcc.n	800915e <__mdiff+0xf6>
 8009140:	f108 0103 	add.w	r1, r8, #3
 8009144:	1b49      	subs	r1, r1, r5
 8009146:	f021 0103 	bic.w	r1, r1, #3
 800914a:	3d03      	subs	r5, #3
 800914c:	45a8      	cmp	r8, r5
 800914e:	bf38      	it	cc
 8009150:	2100      	movcc	r1, #0
 8009152:	440b      	add	r3, r1
 8009154:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009158:	b199      	cbz	r1, 8009182 <__mdiff+0x11a>
 800915a:	6117      	str	r7, [r2, #16]
 800915c:	e79e      	b.n	800909c <__mdiff+0x34>
 800915e:	46e6      	mov	lr, ip
 8009160:	f854 1b04 	ldr.w	r1, [r4], #4
 8009164:	fa1f fc81 	uxth.w	ip, r1
 8009168:	44f4      	add	ip, lr
 800916a:	0c08      	lsrs	r0, r1, #16
 800916c:	4471      	add	r1, lr
 800916e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009172:	b289      	uxth	r1, r1
 8009174:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009178:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800917c:	f846 1b04 	str.w	r1, [r6], #4
 8009180:	e7dc      	b.n	800913c <__mdiff+0xd4>
 8009182:	3f01      	subs	r7, #1
 8009184:	e7e6      	b.n	8009154 <__mdiff+0xec>
 8009186:	bf00      	nop
 8009188:	0800ac2a 	.word	0x0800ac2a
 800918c:	0800ac3b 	.word	0x0800ac3b

08009190 <__d2b>:
 8009190:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009194:	2101      	movs	r1, #1
 8009196:	4690      	mov	r8, r2
 8009198:	4699      	mov	r9, r3
 800919a:	9e08      	ldr	r6, [sp, #32]
 800919c:	f7ff fcd6 	bl	8008b4c <_Balloc>
 80091a0:	4604      	mov	r4, r0
 80091a2:	b930      	cbnz	r0, 80091b2 <__d2b+0x22>
 80091a4:	4602      	mov	r2, r0
 80091a6:	f240 310f 	movw	r1, #783	@ 0x30f
 80091aa:	4b23      	ldr	r3, [pc, #140]	@ (8009238 <__d2b+0xa8>)
 80091ac:	4823      	ldr	r0, [pc, #140]	@ (800923c <__d2b+0xac>)
 80091ae:	f000 fa71 	bl	8009694 <__assert_func>
 80091b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091ba:	b10d      	cbz	r5, 80091c0 <__d2b+0x30>
 80091bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	f1b8 0300 	subs.w	r3, r8, #0
 80091c6:	d024      	beq.n	8009212 <__d2b+0x82>
 80091c8:	4668      	mov	r0, sp
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	f7ff fd85 	bl	8008cda <__lo0bits>
 80091d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80091d4:	b1d8      	cbz	r0, 800920e <__d2b+0x7e>
 80091d6:	f1c0 0320 	rsb	r3, r0, #32
 80091da:	fa02 f303 	lsl.w	r3, r2, r3
 80091de:	430b      	orrs	r3, r1
 80091e0:	40c2      	lsrs	r2, r0
 80091e2:	6163      	str	r3, [r4, #20]
 80091e4:	9201      	str	r2, [sp, #4]
 80091e6:	9b01      	ldr	r3, [sp, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bf0c      	ite	eq
 80091ec:	2201      	moveq	r2, #1
 80091ee:	2202      	movne	r2, #2
 80091f0:	61a3      	str	r3, [r4, #24]
 80091f2:	6122      	str	r2, [r4, #16]
 80091f4:	b1ad      	cbz	r5, 8009222 <__d2b+0x92>
 80091f6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80091fa:	4405      	add	r5, r0
 80091fc:	6035      	str	r5, [r6, #0]
 80091fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009204:	6018      	str	r0, [r3, #0]
 8009206:	4620      	mov	r0, r4
 8009208:	b002      	add	sp, #8
 800920a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800920e:	6161      	str	r1, [r4, #20]
 8009210:	e7e9      	b.n	80091e6 <__d2b+0x56>
 8009212:	a801      	add	r0, sp, #4
 8009214:	f7ff fd61 	bl	8008cda <__lo0bits>
 8009218:	9b01      	ldr	r3, [sp, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	6163      	str	r3, [r4, #20]
 800921e:	3020      	adds	r0, #32
 8009220:	e7e7      	b.n	80091f2 <__d2b+0x62>
 8009222:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009226:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800922a:	6030      	str	r0, [r6, #0]
 800922c:	6918      	ldr	r0, [r3, #16]
 800922e:	f7ff fd35 	bl	8008c9c <__hi0bits>
 8009232:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009236:	e7e4      	b.n	8009202 <__d2b+0x72>
 8009238:	0800ac2a 	.word	0x0800ac2a
 800923c:	0800ac3b 	.word	0x0800ac3b

08009240 <__ssputs_r>:
 8009240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009244:	461f      	mov	r7, r3
 8009246:	688e      	ldr	r6, [r1, #8]
 8009248:	4682      	mov	sl, r0
 800924a:	42be      	cmp	r6, r7
 800924c:	460c      	mov	r4, r1
 800924e:	4690      	mov	r8, r2
 8009250:	680b      	ldr	r3, [r1, #0]
 8009252:	d82d      	bhi.n	80092b0 <__ssputs_r+0x70>
 8009254:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009258:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800925c:	d026      	beq.n	80092ac <__ssputs_r+0x6c>
 800925e:	6965      	ldr	r5, [r4, #20]
 8009260:	6909      	ldr	r1, [r1, #16]
 8009262:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009266:	eba3 0901 	sub.w	r9, r3, r1
 800926a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800926e:	1c7b      	adds	r3, r7, #1
 8009270:	444b      	add	r3, r9
 8009272:	106d      	asrs	r5, r5, #1
 8009274:	429d      	cmp	r5, r3
 8009276:	bf38      	it	cc
 8009278:	461d      	movcc	r5, r3
 800927a:	0553      	lsls	r3, r2, #21
 800927c:	d527      	bpl.n	80092ce <__ssputs_r+0x8e>
 800927e:	4629      	mov	r1, r5
 8009280:	f7ff fbd8 	bl	8008a34 <_malloc_r>
 8009284:	4606      	mov	r6, r0
 8009286:	b360      	cbz	r0, 80092e2 <__ssputs_r+0xa2>
 8009288:	464a      	mov	r2, r9
 800928a:	6921      	ldr	r1, [r4, #16]
 800928c:	f7fe fcf5 	bl	8007c7a <memcpy>
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800929a:	81a3      	strh	r3, [r4, #12]
 800929c:	6126      	str	r6, [r4, #16]
 800929e:	444e      	add	r6, r9
 80092a0:	6026      	str	r6, [r4, #0]
 80092a2:	463e      	mov	r6, r7
 80092a4:	6165      	str	r5, [r4, #20]
 80092a6:	eba5 0509 	sub.w	r5, r5, r9
 80092aa:	60a5      	str	r5, [r4, #8]
 80092ac:	42be      	cmp	r6, r7
 80092ae:	d900      	bls.n	80092b2 <__ssputs_r+0x72>
 80092b0:	463e      	mov	r6, r7
 80092b2:	4632      	mov	r2, r6
 80092b4:	4641      	mov	r1, r8
 80092b6:	6820      	ldr	r0, [r4, #0]
 80092b8:	f000 f9c2 	bl	8009640 <memmove>
 80092bc:	2000      	movs	r0, #0
 80092be:	68a3      	ldr	r3, [r4, #8]
 80092c0:	1b9b      	subs	r3, r3, r6
 80092c2:	60a3      	str	r3, [r4, #8]
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	4433      	add	r3, r6
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ce:	462a      	mov	r2, r5
 80092d0:	f000 fa24 	bl	800971c <_realloc_r>
 80092d4:	4606      	mov	r6, r0
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d1e0      	bne.n	800929c <__ssputs_r+0x5c>
 80092da:	4650      	mov	r0, sl
 80092dc:	6921      	ldr	r1, [r4, #16]
 80092de:	f7ff fb37 	bl	8008950 <_free_r>
 80092e2:	230c      	movs	r3, #12
 80092e4:	f8ca 3000 	str.w	r3, [sl]
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	f04f 30ff 	mov.w	r0, #4294967295
 80092ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092f2:	81a3      	strh	r3, [r4, #12]
 80092f4:	e7e9      	b.n	80092ca <__ssputs_r+0x8a>
	...

080092f8 <_svfiprintf_r>:
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	4698      	mov	r8, r3
 80092fe:	898b      	ldrh	r3, [r1, #12]
 8009300:	4607      	mov	r7, r0
 8009302:	061b      	lsls	r3, r3, #24
 8009304:	460d      	mov	r5, r1
 8009306:	4614      	mov	r4, r2
 8009308:	b09d      	sub	sp, #116	@ 0x74
 800930a:	d510      	bpl.n	800932e <_svfiprintf_r+0x36>
 800930c:	690b      	ldr	r3, [r1, #16]
 800930e:	b973      	cbnz	r3, 800932e <_svfiprintf_r+0x36>
 8009310:	2140      	movs	r1, #64	@ 0x40
 8009312:	f7ff fb8f 	bl	8008a34 <_malloc_r>
 8009316:	6028      	str	r0, [r5, #0]
 8009318:	6128      	str	r0, [r5, #16]
 800931a:	b930      	cbnz	r0, 800932a <_svfiprintf_r+0x32>
 800931c:	230c      	movs	r3, #12
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	f04f 30ff 	mov.w	r0, #4294967295
 8009324:	b01d      	add	sp, #116	@ 0x74
 8009326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800932a:	2340      	movs	r3, #64	@ 0x40
 800932c:	616b      	str	r3, [r5, #20]
 800932e:	2300      	movs	r3, #0
 8009330:	9309      	str	r3, [sp, #36]	@ 0x24
 8009332:	2320      	movs	r3, #32
 8009334:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009338:	2330      	movs	r3, #48	@ 0x30
 800933a:	f04f 0901 	mov.w	r9, #1
 800933e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009342:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80094dc <_svfiprintf_r+0x1e4>
 8009346:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800934a:	4623      	mov	r3, r4
 800934c:	469a      	mov	sl, r3
 800934e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009352:	b10a      	cbz	r2, 8009358 <_svfiprintf_r+0x60>
 8009354:	2a25      	cmp	r2, #37	@ 0x25
 8009356:	d1f9      	bne.n	800934c <_svfiprintf_r+0x54>
 8009358:	ebba 0b04 	subs.w	fp, sl, r4
 800935c:	d00b      	beq.n	8009376 <_svfiprintf_r+0x7e>
 800935e:	465b      	mov	r3, fp
 8009360:	4622      	mov	r2, r4
 8009362:	4629      	mov	r1, r5
 8009364:	4638      	mov	r0, r7
 8009366:	f7ff ff6b 	bl	8009240 <__ssputs_r>
 800936a:	3001      	adds	r0, #1
 800936c:	f000 80a7 	beq.w	80094be <_svfiprintf_r+0x1c6>
 8009370:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009372:	445a      	add	r2, fp
 8009374:	9209      	str	r2, [sp, #36]	@ 0x24
 8009376:	f89a 3000 	ldrb.w	r3, [sl]
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 809f 	beq.w	80094be <_svfiprintf_r+0x1c6>
 8009380:	2300      	movs	r3, #0
 8009382:	f04f 32ff 	mov.w	r2, #4294967295
 8009386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800938a:	f10a 0a01 	add.w	sl, sl, #1
 800938e:	9304      	str	r3, [sp, #16]
 8009390:	9307      	str	r3, [sp, #28]
 8009392:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009396:	931a      	str	r3, [sp, #104]	@ 0x68
 8009398:	4654      	mov	r4, sl
 800939a:	2205      	movs	r2, #5
 800939c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a0:	484e      	ldr	r0, [pc, #312]	@ (80094dc <_svfiprintf_r+0x1e4>)
 80093a2:	f7fe fc5c 	bl	8007c5e <memchr>
 80093a6:	9a04      	ldr	r2, [sp, #16]
 80093a8:	b9d8      	cbnz	r0, 80093e2 <_svfiprintf_r+0xea>
 80093aa:	06d0      	lsls	r0, r2, #27
 80093ac:	bf44      	itt	mi
 80093ae:	2320      	movmi	r3, #32
 80093b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093b4:	0711      	lsls	r1, r2, #28
 80093b6:	bf44      	itt	mi
 80093b8:	232b      	movmi	r3, #43	@ 0x2b
 80093ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093be:	f89a 3000 	ldrb.w	r3, [sl]
 80093c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80093c4:	d015      	beq.n	80093f2 <_svfiprintf_r+0xfa>
 80093c6:	4654      	mov	r4, sl
 80093c8:	2000      	movs	r0, #0
 80093ca:	f04f 0c0a 	mov.w	ip, #10
 80093ce:	9a07      	ldr	r2, [sp, #28]
 80093d0:	4621      	mov	r1, r4
 80093d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093d6:	3b30      	subs	r3, #48	@ 0x30
 80093d8:	2b09      	cmp	r3, #9
 80093da:	d94b      	bls.n	8009474 <_svfiprintf_r+0x17c>
 80093dc:	b1b0      	cbz	r0, 800940c <_svfiprintf_r+0x114>
 80093de:	9207      	str	r2, [sp, #28]
 80093e0:	e014      	b.n	800940c <_svfiprintf_r+0x114>
 80093e2:	eba0 0308 	sub.w	r3, r0, r8
 80093e6:	fa09 f303 	lsl.w	r3, r9, r3
 80093ea:	4313      	orrs	r3, r2
 80093ec:	46a2      	mov	sl, r4
 80093ee:	9304      	str	r3, [sp, #16]
 80093f0:	e7d2      	b.n	8009398 <_svfiprintf_r+0xa0>
 80093f2:	9b03      	ldr	r3, [sp, #12]
 80093f4:	1d19      	adds	r1, r3, #4
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	9103      	str	r1, [sp, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	bfbb      	ittet	lt
 80093fe:	425b      	neglt	r3, r3
 8009400:	f042 0202 	orrlt.w	r2, r2, #2
 8009404:	9307      	strge	r3, [sp, #28]
 8009406:	9307      	strlt	r3, [sp, #28]
 8009408:	bfb8      	it	lt
 800940a:	9204      	strlt	r2, [sp, #16]
 800940c:	7823      	ldrb	r3, [r4, #0]
 800940e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009410:	d10a      	bne.n	8009428 <_svfiprintf_r+0x130>
 8009412:	7863      	ldrb	r3, [r4, #1]
 8009414:	2b2a      	cmp	r3, #42	@ 0x2a
 8009416:	d132      	bne.n	800947e <_svfiprintf_r+0x186>
 8009418:	9b03      	ldr	r3, [sp, #12]
 800941a:	3402      	adds	r4, #2
 800941c:	1d1a      	adds	r2, r3, #4
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	9203      	str	r2, [sp, #12]
 8009422:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009426:	9305      	str	r3, [sp, #20]
 8009428:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80094e0 <_svfiprintf_r+0x1e8>
 800942c:	2203      	movs	r2, #3
 800942e:	4650      	mov	r0, sl
 8009430:	7821      	ldrb	r1, [r4, #0]
 8009432:	f7fe fc14 	bl	8007c5e <memchr>
 8009436:	b138      	cbz	r0, 8009448 <_svfiprintf_r+0x150>
 8009438:	2240      	movs	r2, #64	@ 0x40
 800943a:	9b04      	ldr	r3, [sp, #16]
 800943c:	eba0 000a 	sub.w	r0, r0, sl
 8009440:	4082      	lsls	r2, r0
 8009442:	4313      	orrs	r3, r2
 8009444:	3401      	adds	r4, #1
 8009446:	9304      	str	r3, [sp, #16]
 8009448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800944c:	2206      	movs	r2, #6
 800944e:	4825      	ldr	r0, [pc, #148]	@ (80094e4 <_svfiprintf_r+0x1ec>)
 8009450:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009454:	f7fe fc03 	bl	8007c5e <memchr>
 8009458:	2800      	cmp	r0, #0
 800945a:	d036      	beq.n	80094ca <_svfiprintf_r+0x1d2>
 800945c:	4b22      	ldr	r3, [pc, #136]	@ (80094e8 <_svfiprintf_r+0x1f0>)
 800945e:	bb1b      	cbnz	r3, 80094a8 <_svfiprintf_r+0x1b0>
 8009460:	9b03      	ldr	r3, [sp, #12]
 8009462:	3307      	adds	r3, #7
 8009464:	f023 0307 	bic.w	r3, r3, #7
 8009468:	3308      	adds	r3, #8
 800946a:	9303      	str	r3, [sp, #12]
 800946c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800946e:	4433      	add	r3, r6
 8009470:	9309      	str	r3, [sp, #36]	@ 0x24
 8009472:	e76a      	b.n	800934a <_svfiprintf_r+0x52>
 8009474:	460c      	mov	r4, r1
 8009476:	2001      	movs	r0, #1
 8009478:	fb0c 3202 	mla	r2, ip, r2, r3
 800947c:	e7a8      	b.n	80093d0 <_svfiprintf_r+0xd8>
 800947e:	2300      	movs	r3, #0
 8009480:	f04f 0c0a 	mov.w	ip, #10
 8009484:	4619      	mov	r1, r3
 8009486:	3401      	adds	r4, #1
 8009488:	9305      	str	r3, [sp, #20]
 800948a:	4620      	mov	r0, r4
 800948c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009490:	3a30      	subs	r2, #48	@ 0x30
 8009492:	2a09      	cmp	r2, #9
 8009494:	d903      	bls.n	800949e <_svfiprintf_r+0x1a6>
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0c6      	beq.n	8009428 <_svfiprintf_r+0x130>
 800949a:	9105      	str	r1, [sp, #20]
 800949c:	e7c4      	b.n	8009428 <_svfiprintf_r+0x130>
 800949e:	4604      	mov	r4, r0
 80094a0:	2301      	movs	r3, #1
 80094a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80094a6:	e7f0      	b.n	800948a <_svfiprintf_r+0x192>
 80094a8:	ab03      	add	r3, sp, #12
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	462a      	mov	r2, r5
 80094ae:	4638      	mov	r0, r7
 80094b0:	4b0e      	ldr	r3, [pc, #56]	@ (80094ec <_svfiprintf_r+0x1f4>)
 80094b2:	a904      	add	r1, sp, #16
 80094b4:	f7fd fe70 	bl	8007198 <_printf_float>
 80094b8:	1c42      	adds	r2, r0, #1
 80094ba:	4606      	mov	r6, r0
 80094bc:	d1d6      	bne.n	800946c <_svfiprintf_r+0x174>
 80094be:	89ab      	ldrh	r3, [r5, #12]
 80094c0:	065b      	lsls	r3, r3, #25
 80094c2:	f53f af2d 	bmi.w	8009320 <_svfiprintf_r+0x28>
 80094c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094c8:	e72c      	b.n	8009324 <_svfiprintf_r+0x2c>
 80094ca:	ab03      	add	r3, sp, #12
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	462a      	mov	r2, r5
 80094d0:	4638      	mov	r0, r7
 80094d2:	4b06      	ldr	r3, [pc, #24]	@ (80094ec <_svfiprintf_r+0x1f4>)
 80094d4:	a904      	add	r1, sp, #16
 80094d6:	f7fe f8fd 	bl	80076d4 <_printf_i>
 80094da:	e7ed      	b.n	80094b8 <_svfiprintf_r+0x1c0>
 80094dc:	0800ac94 	.word	0x0800ac94
 80094e0:	0800ac9a 	.word	0x0800ac9a
 80094e4:	0800ac9e 	.word	0x0800ac9e
 80094e8:	08007199 	.word	0x08007199
 80094ec:	08009241 	.word	0x08009241

080094f0 <__sflush_r>:
 80094f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	0716      	lsls	r6, r2, #28
 80094f8:	4605      	mov	r5, r0
 80094fa:	460c      	mov	r4, r1
 80094fc:	d454      	bmi.n	80095a8 <__sflush_r+0xb8>
 80094fe:	684b      	ldr	r3, [r1, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	dc02      	bgt.n	800950a <__sflush_r+0x1a>
 8009504:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009506:	2b00      	cmp	r3, #0
 8009508:	dd48      	ble.n	800959c <__sflush_r+0xac>
 800950a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800950c:	2e00      	cmp	r6, #0
 800950e:	d045      	beq.n	800959c <__sflush_r+0xac>
 8009510:	2300      	movs	r3, #0
 8009512:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009516:	682f      	ldr	r7, [r5, #0]
 8009518:	6a21      	ldr	r1, [r4, #32]
 800951a:	602b      	str	r3, [r5, #0]
 800951c:	d030      	beq.n	8009580 <__sflush_r+0x90>
 800951e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	0759      	lsls	r1, r3, #29
 8009524:	d505      	bpl.n	8009532 <__sflush_r+0x42>
 8009526:	6863      	ldr	r3, [r4, #4]
 8009528:	1ad2      	subs	r2, r2, r3
 800952a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800952c:	b10b      	cbz	r3, 8009532 <__sflush_r+0x42>
 800952e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009530:	1ad2      	subs	r2, r2, r3
 8009532:	2300      	movs	r3, #0
 8009534:	4628      	mov	r0, r5
 8009536:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009538:	6a21      	ldr	r1, [r4, #32]
 800953a:	47b0      	blx	r6
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	d106      	bne.n	8009550 <__sflush_r+0x60>
 8009542:	6829      	ldr	r1, [r5, #0]
 8009544:	291d      	cmp	r1, #29
 8009546:	d82b      	bhi.n	80095a0 <__sflush_r+0xb0>
 8009548:	4a28      	ldr	r2, [pc, #160]	@ (80095ec <__sflush_r+0xfc>)
 800954a:	40ca      	lsrs	r2, r1
 800954c:	07d6      	lsls	r6, r2, #31
 800954e:	d527      	bpl.n	80095a0 <__sflush_r+0xb0>
 8009550:	2200      	movs	r2, #0
 8009552:	6062      	str	r2, [r4, #4]
 8009554:	6922      	ldr	r2, [r4, #16]
 8009556:	04d9      	lsls	r1, r3, #19
 8009558:	6022      	str	r2, [r4, #0]
 800955a:	d504      	bpl.n	8009566 <__sflush_r+0x76>
 800955c:	1c42      	adds	r2, r0, #1
 800955e:	d101      	bne.n	8009564 <__sflush_r+0x74>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b903      	cbnz	r3, 8009566 <__sflush_r+0x76>
 8009564:	6560      	str	r0, [r4, #84]	@ 0x54
 8009566:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009568:	602f      	str	r7, [r5, #0]
 800956a:	b1b9      	cbz	r1, 800959c <__sflush_r+0xac>
 800956c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009570:	4299      	cmp	r1, r3
 8009572:	d002      	beq.n	800957a <__sflush_r+0x8a>
 8009574:	4628      	mov	r0, r5
 8009576:	f7ff f9eb 	bl	8008950 <_free_r>
 800957a:	2300      	movs	r3, #0
 800957c:	6363      	str	r3, [r4, #52]	@ 0x34
 800957e:	e00d      	b.n	800959c <__sflush_r+0xac>
 8009580:	2301      	movs	r3, #1
 8009582:	4628      	mov	r0, r5
 8009584:	47b0      	blx	r6
 8009586:	4602      	mov	r2, r0
 8009588:	1c50      	adds	r0, r2, #1
 800958a:	d1c9      	bne.n	8009520 <__sflush_r+0x30>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d0c6      	beq.n	8009520 <__sflush_r+0x30>
 8009592:	2b1d      	cmp	r3, #29
 8009594:	d001      	beq.n	800959a <__sflush_r+0xaa>
 8009596:	2b16      	cmp	r3, #22
 8009598:	d11d      	bne.n	80095d6 <__sflush_r+0xe6>
 800959a:	602f      	str	r7, [r5, #0]
 800959c:	2000      	movs	r0, #0
 800959e:	e021      	b.n	80095e4 <__sflush_r+0xf4>
 80095a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095a4:	b21b      	sxth	r3, r3
 80095a6:	e01a      	b.n	80095de <__sflush_r+0xee>
 80095a8:	690f      	ldr	r7, [r1, #16]
 80095aa:	2f00      	cmp	r7, #0
 80095ac:	d0f6      	beq.n	800959c <__sflush_r+0xac>
 80095ae:	0793      	lsls	r3, r2, #30
 80095b0:	bf18      	it	ne
 80095b2:	2300      	movne	r3, #0
 80095b4:	680e      	ldr	r6, [r1, #0]
 80095b6:	bf08      	it	eq
 80095b8:	694b      	ldreq	r3, [r1, #20]
 80095ba:	1bf6      	subs	r6, r6, r7
 80095bc:	600f      	str	r7, [r1, #0]
 80095be:	608b      	str	r3, [r1, #8]
 80095c0:	2e00      	cmp	r6, #0
 80095c2:	ddeb      	ble.n	800959c <__sflush_r+0xac>
 80095c4:	4633      	mov	r3, r6
 80095c6:	463a      	mov	r2, r7
 80095c8:	4628      	mov	r0, r5
 80095ca:	6a21      	ldr	r1, [r4, #32]
 80095cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80095d0:	47e0      	blx	ip
 80095d2:	2800      	cmp	r0, #0
 80095d4:	dc07      	bgt.n	80095e6 <__sflush_r+0xf6>
 80095d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095de:	f04f 30ff 	mov.w	r0, #4294967295
 80095e2:	81a3      	strh	r3, [r4, #12]
 80095e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095e6:	4407      	add	r7, r0
 80095e8:	1a36      	subs	r6, r6, r0
 80095ea:	e7e9      	b.n	80095c0 <__sflush_r+0xd0>
 80095ec:	20400001 	.word	0x20400001

080095f0 <_fflush_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	690b      	ldr	r3, [r1, #16]
 80095f4:	4605      	mov	r5, r0
 80095f6:	460c      	mov	r4, r1
 80095f8:	b913      	cbnz	r3, 8009600 <_fflush_r+0x10>
 80095fa:	2500      	movs	r5, #0
 80095fc:	4628      	mov	r0, r5
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	b118      	cbz	r0, 800960a <_fflush_r+0x1a>
 8009602:	6a03      	ldr	r3, [r0, #32]
 8009604:	b90b      	cbnz	r3, 800960a <_fflush_r+0x1a>
 8009606:	f7fe fa0f 	bl	8007a28 <__sinit>
 800960a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0f3      	beq.n	80095fa <_fflush_r+0xa>
 8009612:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009614:	07d0      	lsls	r0, r2, #31
 8009616:	d404      	bmi.n	8009622 <_fflush_r+0x32>
 8009618:	0599      	lsls	r1, r3, #22
 800961a:	d402      	bmi.n	8009622 <_fflush_r+0x32>
 800961c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800961e:	f7fe fb1c 	bl	8007c5a <__retarget_lock_acquire_recursive>
 8009622:	4628      	mov	r0, r5
 8009624:	4621      	mov	r1, r4
 8009626:	f7ff ff63 	bl	80094f0 <__sflush_r>
 800962a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800962c:	4605      	mov	r5, r0
 800962e:	07da      	lsls	r2, r3, #31
 8009630:	d4e4      	bmi.n	80095fc <_fflush_r+0xc>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	059b      	lsls	r3, r3, #22
 8009636:	d4e1      	bmi.n	80095fc <_fflush_r+0xc>
 8009638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800963a:	f7fe fb0f 	bl	8007c5c <__retarget_lock_release_recursive>
 800963e:	e7dd      	b.n	80095fc <_fflush_r+0xc>

08009640 <memmove>:
 8009640:	4288      	cmp	r0, r1
 8009642:	b510      	push	{r4, lr}
 8009644:	eb01 0402 	add.w	r4, r1, r2
 8009648:	d902      	bls.n	8009650 <memmove+0x10>
 800964a:	4284      	cmp	r4, r0
 800964c:	4623      	mov	r3, r4
 800964e:	d807      	bhi.n	8009660 <memmove+0x20>
 8009650:	1e43      	subs	r3, r0, #1
 8009652:	42a1      	cmp	r1, r4
 8009654:	d008      	beq.n	8009668 <memmove+0x28>
 8009656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800965a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800965e:	e7f8      	b.n	8009652 <memmove+0x12>
 8009660:	4601      	mov	r1, r0
 8009662:	4402      	add	r2, r0
 8009664:	428a      	cmp	r2, r1
 8009666:	d100      	bne.n	800966a <memmove+0x2a>
 8009668:	bd10      	pop	{r4, pc}
 800966a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800966e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009672:	e7f7      	b.n	8009664 <memmove+0x24>

08009674 <_sbrk_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	2300      	movs	r3, #0
 8009678:	4d05      	ldr	r5, [pc, #20]	@ (8009690 <_sbrk_r+0x1c>)
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	602b      	str	r3, [r5, #0]
 8009680:	f7f8 ffb4 	bl	80025ec <_sbrk>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_sbrk_r+0x1a>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b103      	cbz	r3, 800968e <_sbrk_r+0x1a>
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	200004f8 	.word	0x200004f8

08009694 <__assert_func>:
 8009694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009696:	4614      	mov	r4, r2
 8009698:	461a      	mov	r2, r3
 800969a:	4b09      	ldr	r3, [pc, #36]	@ (80096c0 <__assert_func+0x2c>)
 800969c:	4605      	mov	r5, r0
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68d8      	ldr	r0, [r3, #12]
 80096a2:	b14c      	cbz	r4, 80096b8 <__assert_func+0x24>
 80096a4:	4b07      	ldr	r3, [pc, #28]	@ (80096c4 <__assert_func+0x30>)
 80096a6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096aa:	9100      	str	r1, [sp, #0]
 80096ac:	462b      	mov	r3, r5
 80096ae:	4906      	ldr	r1, [pc, #24]	@ (80096c8 <__assert_func+0x34>)
 80096b0:	f000 f870 	bl	8009794 <fiprintf>
 80096b4:	f000 f880 	bl	80097b8 <abort>
 80096b8:	4b04      	ldr	r3, [pc, #16]	@ (80096cc <__assert_func+0x38>)
 80096ba:	461c      	mov	r4, r3
 80096bc:	e7f3      	b.n	80096a6 <__assert_func+0x12>
 80096be:	bf00      	nop
 80096c0:	20000018 	.word	0x20000018
 80096c4:	0800acaf 	.word	0x0800acaf
 80096c8:	0800acbc 	.word	0x0800acbc
 80096cc:	0800acea 	.word	0x0800acea

080096d0 <_calloc_r>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	fba1 5402 	umull	r5, r4, r1, r2
 80096d6:	b934      	cbnz	r4, 80096e6 <_calloc_r+0x16>
 80096d8:	4629      	mov	r1, r5
 80096da:	f7ff f9ab 	bl	8008a34 <_malloc_r>
 80096de:	4606      	mov	r6, r0
 80096e0:	b928      	cbnz	r0, 80096ee <_calloc_r+0x1e>
 80096e2:	4630      	mov	r0, r6
 80096e4:	bd70      	pop	{r4, r5, r6, pc}
 80096e6:	220c      	movs	r2, #12
 80096e8:	2600      	movs	r6, #0
 80096ea:	6002      	str	r2, [r0, #0]
 80096ec:	e7f9      	b.n	80096e2 <_calloc_r+0x12>
 80096ee:	462a      	mov	r2, r5
 80096f0:	4621      	mov	r1, r4
 80096f2:	f7fe fa34 	bl	8007b5e <memset>
 80096f6:	e7f4      	b.n	80096e2 <_calloc_r+0x12>

080096f8 <__ascii_mbtowc>:
 80096f8:	b082      	sub	sp, #8
 80096fa:	b901      	cbnz	r1, 80096fe <__ascii_mbtowc+0x6>
 80096fc:	a901      	add	r1, sp, #4
 80096fe:	b142      	cbz	r2, 8009712 <__ascii_mbtowc+0x1a>
 8009700:	b14b      	cbz	r3, 8009716 <__ascii_mbtowc+0x1e>
 8009702:	7813      	ldrb	r3, [r2, #0]
 8009704:	600b      	str	r3, [r1, #0]
 8009706:	7812      	ldrb	r2, [r2, #0]
 8009708:	1e10      	subs	r0, r2, #0
 800970a:	bf18      	it	ne
 800970c:	2001      	movne	r0, #1
 800970e:	b002      	add	sp, #8
 8009710:	4770      	bx	lr
 8009712:	4610      	mov	r0, r2
 8009714:	e7fb      	b.n	800970e <__ascii_mbtowc+0x16>
 8009716:	f06f 0001 	mvn.w	r0, #1
 800971a:	e7f8      	b.n	800970e <__ascii_mbtowc+0x16>

0800971c <_realloc_r>:
 800971c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009720:	4607      	mov	r7, r0
 8009722:	4614      	mov	r4, r2
 8009724:	460d      	mov	r5, r1
 8009726:	b921      	cbnz	r1, 8009732 <_realloc_r+0x16>
 8009728:	4611      	mov	r1, r2
 800972a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800972e:	f7ff b981 	b.w	8008a34 <_malloc_r>
 8009732:	b92a      	cbnz	r2, 8009740 <_realloc_r+0x24>
 8009734:	f7ff f90c 	bl	8008950 <_free_r>
 8009738:	4625      	mov	r5, r4
 800973a:	4628      	mov	r0, r5
 800973c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009740:	f000 f841 	bl	80097c6 <_malloc_usable_size_r>
 8009744:	4284      	cmp	r4, r0
 8009746:	4606      	mov	r6, r0
 8009748:	d802      	bhi.n	8009750 <_realloc_r+0x34>
 800974a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800974e:	d8f4      	bhi.n	800973a <_realloc_r+0x1e>
 8009750:	4621      	mov	r1, r4
 8009752:	4638      	mov	r0, r7
 8009754:	f7ff f96e 	bl	8008a34 <_malloc_r>
 8009758:	4680      	mov	r8, r0
 800975a:	b908      	cbnz	r0, 8009760 <_realloc_r+0x44>
 800975c:	4645      	mov	r5, r8
 800975e:	e7ec      	b.n	800973a <_realloc_r+0x1e>
 8009760:	42b4      	cmp	r4, r6
 8009762:	4622      	mov	r2, r4
 8009764:	4629      	mov	r1, r5
 8009766:	bf28      	it	cs
 8009768:	4632      	movcs	r2, r6
 800976a:	f7fe fa86 	bl	8007c7a <memcpy>
 800976e:	4629      	mov	r1, r5
 8009770:	4638      	mov	r0, r7
 8009772:	f7ff f8ed 	bl	8008950 <_free_r>
 8009776:	e7f1      	b.n	800975c <_realloc_r+0x40>

08009778 <__ascii_wctomb>:
 8009778:	4603      	mov	r3, r0
 800977a:	4608      	mov	r0, r1
 800977c:	b141      	cbz	r1, 8009790 <__ascii_wctomb+0x18>
 800977e:	2aff      	cmp	r2, #255	@ 0xff
 8009780:	d904      	bls.n	800978c <__ascii_wctomb+0x14>
 8009782:	228a      	movs	r2, #138	@ 0x8a
 8009784:	f04f 30ff 	mov.w	r0, #4294967295
 8009788:	601a      	str	r2, [r3, #0]
 800978a:	4770      	bx	lr
 800978c:	2001      	movs	r0, #1
 800978e:	700a      	strb	r2, [r1, #0]
 8009790:	4770      	bx	lr
	...

08009794 <fiprintf>:
 8009794:	b40e      	push	{r1, r2, r3}
 8009796:	b503      	push	{r0, r1, lr}
 8009798:	4601      	mov	r1, r0
 800979a:	ab03      	add	r3, sp, #12
 800979c:	4805      	ldr	r0, [pc, #20]	@ (80097b4 <fiprintf+0x20>)
 800979e:	f853 2b04 	ldr.w	r2, [r3], #4
 80097a2:	6800      	ldr	r0, [r0, #0]
 80097a4:	9301      	str	r3, [sp, #4]
 80097a6:	f000 f83d 	bl	8009824 <_vfiprintf_r>
 80097aa:	b002      	add	sp, #8
 80097ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80097b0:	b003      	add	sp, #12
 80097b2:	4770      	bx	lr
 80097b4:	20000018 	.word	0x20000018

080097b8 <abort>:
 80097b8:	2006      	movs	r0, #6
 80097ba:	b508      	push	{r3, lr}
 80097bc:	f000 fa06 	bl	8009bcc <raise>
 80097c0:	2001      	movs	r0, #1
 80097c2:	f7f8 fe9e 	bl	8002502 <_exit>

080097c6 <_malloc_usable_size_r>:
 80097c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ca:	1f18      	subs	r0, r3, #4
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	bfbc      	itt	lt
 80097d0:	580b      	ldrlt	r3, [r1, r0]
 80097d2:	18c0      	addlt	r0, r0, r3
 80097d4:	4770      	bx	lr

080097d6 <__sfputc_r>:
 80097d6:	6893      	ldr	r3, [r2, #8]
 80097d8:	b410      	push	{r4}
 80097da:	3b01      	subs	r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	6093      	str	r3, [r2, #8]
 80097e0:	da07      	bge.n	80097f2 <__sfputc_r+0x1c>
 80097e2:	6994      	ldr	r4, [r2, #24]
 80097e4:	42a3      	cmp	r3, r4
 80097e6:	db01      	blt.n	80097ec <__sfputc_r+0x16>
 80097e8:	290a      	cmp	r1, #10
 80097ea:	d102      	bne.n	80097f2 <__sfputc_r+0x1c>
 80097ec:	bc10      	pop	{r4}
 80097ee:	f000 b931 	b.w	8009a54 <__swbuf_r>
 80097f2:	6813      	ldr	r3, [r2, #0]
 80097f4:	1c58      	adds	r0, r3, #1
 80097f6:	6010      	str	r0, [r2, #0]
 80097f8:	7019      	strb	r1, [r3, #0]
 80097fa:	4608      	mov	r0, r1
 80097fc:	bc10      	pop	{r4}
 80097fe:	4770      	bx	lr

08009800 <__sfputs_r>:
 8009800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009802:	4606      	mov	r6, r0
 8009804:	460f      	mov	r7, r1
 8009806:	4614      	mov	r4, r2
 8009808:	18d5      	adds	r5, r2, r3
 800980a:	42ac      	cmp	r4, r5
 800980c:	d101      	bne.n	8009812 <__sfputs_r+0x12>
 800980e:	2000      	movs	r0, #0
 8009810:	e007      	b.n	8009822 <__sfputs_r+0x22>
 8009812:	463a      	mov	r2, r7
 8009814:	4630      	mov	r0, r6
 8009816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981a:	f7ff ffdc 	bl	80097d6 <__sfputc_r>
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	d1f3      	bne.n	800980a <__sfputs_r+0xa>
 8009822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009824 <_vfiprintf_r>:
 8009824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009828:	460d      	mov	r5, r1
 800982a:	4614      	mov	r4, r2
 800982c:	4698      	mov	r8, r3
 800982e:	4606      	mov	r6, r0
 8009830:	b09d      	sub	sp, #116	@ 0x74
 8009832:	b118      	cbz	r0, 800983c <_vfiprintf_r+0x18>
 8009834:	6a03      	ldr	r3, [r0, #32]
 8009836:	b90b      	cbnz	r3, 800983c <_vfiprintf_r+0x18>
 8009838:	f7fe f8f6 	bl	8007a28 <__sinit>
 800983c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800983e:	07d9      	lsls	r1, r3, #31
 8009840:	d405      	bmi.n	800984e <_vfiprintf_r+0x2a>
 8009842:	89ab      	ldrh	r3, [r5, #12]
 8009844:	059a      	lsls	r2, r3, #22
 8009846:	d402      	bmi.n	800984e <_vfiprintf_r+0x2a>
 8009848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800984a:	f7fe fa06 	bl	8007c5a <__retarget_lock_acquire_recursive>
 800984e:	89ab      	ldrh	r3, [r5, #12]
 8009850:	071b      	lsls	r3, r3, #28
 8009852:	d501      	bpl.n	8009858 <_vfiprintf_r+0x34>
 8009854:	692b      	ldr	r3, [r5, #16]
 8009856:	b99b      	cbnz	r3, 8009880 <_vfiprintf_r+0x5c>
 8009858:	4629      	mov	r1, r5
 800985a:	4630      	mov	r0, r6
 800985c:	f000 f938 	bl	8009ad0 <__swsetup_r>
 8009860:	b170      	cbz	r0, 8009880 <_vfiprintf_r+0x5c>
 8009862:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009864:	07dc      	lsls	r4, r3, #31
 8009866:	d504      	bpl.n	8009872 <_vfiprintf_r+0x4e>
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	b01d      	add	sp, #116	@ 0x74
 800986e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009872:	89ab      	ldrh	r3, [r5, #12]
 8009874:	0598      	lsls	r0, r3, #22
 8009876:	d4f7      	bmi.n	8009868 <_vfiprintf_r+0x44>
 8009878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800987a:	f7fe f9ef 	bl	8007c5c <__retarget_lock_release_recursive>
 800987e:	e7f3      	b.n	8009868 <_vfiprintf_r+0x44>
 8009880:	2300      	movs	r3, #0
 8009882:	9309      	str	r3, [sp, #36]	@ 0x24
 8009884:	2320      	movs	r3, #32
 8009886:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800988a:	2330      	movs	r3, #48	@ 0x30
 800988c:	f04f 0901 	mov.w	r9, #1
 8009890:	f8cd 800c 	str.w	r8, [sp, #12]
 8009894:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009a40 <_vfiprintf_r+0x21c>
 8009898:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800989c:	4623      	mov	r3, r4
 800989e:	469a      	mov	sl, r3
 80098a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098a4:	b10a      	cbz	r2, 80098aa <_vfiprintf_r+0x86>
 80098a6:	2a25      	cmp	r2, #37	@ 0x25
 80098a8:	d1f9      	bne.n	800989e <_vfiprintf_r+0x7a>
 80098aa:	ebba 0b04 	subs.w	fp, sl, r4
 80098ae:	d00b      	beq.n	80098c8 <_vfiprintf_r+0xa4>
 80098b0:	465b      	mov	r3, fp
 80098b2:	4622      	mov	r2, r4
 80098b4:	4629      	mov	r1, r5
 80098b6:	4630      	mov	r0, r6
 80098b8:	f7ff ffa2 	bl	8009800 <__sfputs_r>
 80098bc:	3001      	adds	r0, #1
 80098be:	f000 80a7 	beq.w	8009a10 <_vfiprintf_r+0x1ec>
 80098c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098c4:	445a      	add	r2, fp
 80098c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80098c8:	f89a 3000 	ldrb.w	r3, [sl]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 809f 	beq.w	8009a10 <_vfiprintf_r+0x1ec>
 80098d2:	2300      	movs	r3, #0
 80098d4:	f04f 32ff 	mov.w	r2, #4294967295
 80098d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098dc:	f10a 0a01 	add.w	sl, sl, #1
 80098e0:	9304      	str	r3, [sp, #16]
 80098e2:	9307      	str	r3, [sp, #28]
 80098e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80098ea:	4654      	mov	r4, sl
 80098ec:	2205      	movs	r2, #5
 80098ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f2:	4853      	ldr	r0, [pc, #332]	@ (8009a40 <_vfiprintf_r+0x21c>)
 80098f4:	f7fe f9b3 	bl	8007c5e <memchr>
 80098f8:	9a04      	ldr	r2, [sp, #16]
 80098fa:	b9d8      	cbnz	r0, 8009934 <_vfiprintf_r+0x110>
 80098fc:	06d1      	lsls	r1, r2, #27
 80098fe:	bf44      	itt	mi
 8009900:	2320      	movmi	r3, #32
 8009902:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009906:	0713      	lsls	r3, r2, #28
 8009908:	bf44      	itt	mi
 800990a:	232b      	movmi	r3, #43	@ 0x2b
 800990c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009910:	f89a 3000 	ldrb.w	r3, [sl]
 8009914:	2b2a      	cmp	r3, #42	@ 0x2a
 8009916:	d015      	beq.n	8009944 <_vfiprintf_r+0x120>
 8009918:	4654      	mov	r4, sl
 800991a:	2000      	movs	r0, #0
 800991c:	f04f 0c0a 	mov.w	ip, #10
 8009920:	9a07      	ldr	r2, [sp, #28]
 8009922:	4621      	mov	r1, r4
 8009924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009928:	3b30      	subs	r3, #48	@ 0x30
 800992a:	2b09      	cmp	r3, #9
 800992c:	d94b      	bls.n	80099c6 <_vfiprintf_r+0x1a2>
 800992e:	b1b0      	cbz	r0, 800995e <_vfiprintf_r+0x13a>
 8009930:	9207      	str	r2, [sp, #28]
 8009932:	e014      	b.n	800995e <_vfiprintf_r+0x13a>
 8009934:	eba0 0308 	sub.w	r3, r0, r8
 8009938:	fa09 f303 	lsl.w	r3, r9, r3
 800993c:	4313      	orrs	r3, r2
 800993e:	46a2      	mov	sl, r4
 8009940:	9304      	str	r3, [sp, #16]
 8009942:	e7d2      	b.n	80098ea <_vfiprintf_r+0xc6>
 8009944:	9b03      	ldr	r3, [sp, #12]
 8009946:	1d19      	adds	r1, r3, #4
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	9103      	str	r1, [sp, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	bfbb      	ittet	lt
 8009950:	425b      	neglt	r3, r3
 8009952:	f042 0202 	orrlt.w	r2, r2, #2
 8009956:	9307      	strge	r3, [sp, #28]
 8009958:	9307      	strlt	r3, [sp, #28]
 800995a:	bfb8      	it	lt
 800995c:	9204      	strlt	r2, [sp, #16]
 800995e:	7823      	ldrb	r3, [r4, #0]
 8009960:	2b2e      	cmp	r3, #46	@ 0x2e
 8009962:	d10a      	bne.n	800997a <_vfiprintf_r+0x156>
 8009964:	7863      	ldrb	r3, [r4, #1]
 8009966:	2b2a      	cmp	r3, #42	@ 0x2a
 8009968:	d132      	bne.n	80099d0 <_vfiprintf_r+0x1ac>
 800996a:	9b03      	ldr	r3, [sp, #12]
 800996c:	3402      	adds	r4, #2
 800996e:	1d1a      	adds	r2, r3, #4
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	9203      	str	r2, [sp, #12]
 8009974:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009978:	9305      	str	r3, [sp, #20]
 800997a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009a44 <_vfiprintf_r+0x220>
 800997e:	2203      	movs	r2, #3
 8009980:	4650      	mov	r0, sl
 8009982:	7821      	ldrb	r1, [r4, #0]
 8009984:	f7fe f96b 	bl	8007c5e <memchr>
 8009988:	b138      	cbz	r0, 800999a <_vfiprintf_r+0x176>
 800998a:	2240      	movs	r2, #64	@ 0x40
 800998c:	9b04      	ldr	r3, [sp, #16]
 800998e:	eba0 000a 	sub.w	r0, r0, sl
 8009992:	4082      	lsls	r2, r0
 8009994:	4313      	orrs	r3, r2
 8009996:	3401      	adds	r4, #1
 8009998:	9304      	str	r3, [sp, #16]
 800999a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800999e:	2206      	movs	r2, #6
 80099a0:	4829      	ldr	r0, [pc, #164]	@ (8009a48 <_vfiprintf_r+0x224>)
 80099a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099a6:	f7fe f95a 	bl	8007c5e <memchr>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d03f      	beq.n	8009a2e <_vfiprintf_r+0x20a>
 80099ae:	4b27      	ldr	r3, [pc, #156]	@ (8009a4c <_vfiprintf_r+0x228>)
 80099b0:	bb1b      	cbnz	r3, 80099fa <_vfiprintf_r+0x1d6>
 80099b2:	9b03      	ldr	r3, [sp, #12]
 80099b4:	3307      	adds	r3, #7
 80099b6:	f023 0307 	bic.w	r3, r3, #7
 80099ba:	3308      	adds	r3, #8
 80099bc:	9303      	str	r3, [sp, #12]
 80099be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c0:	443b      	add	r3, r7
 80099c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80099c4:	e76a      	b.n	800989c <_vfiprintf_r+0x78>
 80099c6:	460c      	mov	r4, r1
 80099c8:	2001      	movs	r0, #1
 80099ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80099ce:	e7a8      	b.n	8009922 <_vfiprintf_r+0xfe>
 80099d0:	2300      	movs	r3, #0
 80099d2:	f04f 0c0a 	mov.w	ip, #10
 80099d6:	4619      	mov	r1, r3
 80099d8:	3401      	adds	r4, #1
 80099da:	9305      	str	r3, [sp, #20]
 80099dc:	4620      	mov	r0, r4
 80099de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099e2:	3a30      	subs	r2, #48	@ 0x30
 80099e4:	2a09      	cmp	r2, #9
 80099e6:	d903      	bls.n	80099f0 <_vfiprintf_r+0x1cc>
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d0c6      	beq.n	800997a <_vfiprintf_r+0x156>
 80099ec:	9105      	str	r1, [sp, #20]
 80099ee:	e7c4      	b.n	800997a <_vfiprintf_r+0x156>
 80099f0:	4604      	mov	r4, r0
 80099f2:	2301      	movs	r3, #1
 80099f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80099f8:	e7f0      	b.n	80099dc <_vfiprintf_r+0x1b8>
 80099fa:	ab03      	add	r3, sp, #12
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	462a      	mov	r2, r5
 8009a00:	4630      	mov	r0, r6
 8009a02:	4b13      	ldr	r3, [pc, #76]	@ (8009a50 <_vfiprintf_r+0x22c>)
 8009a04:	a904      	add	r1, sp, #16
 8009a06:	f7fd fbc7 	bl	8007198 <_printf_float>
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	1c78      	adds	r0, r7, #1
 8009a0e:	d1d6      	bne.n	80099be <_vfiprintf_r+0x19a>
 8009a10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a12:	07d9      	lsls	r1, r3, #31
 8009a14:	d405      	bmi.n	8009a22 <_vfiprintf_r+0x1fe>
 8009a16:	89ab      	ldrh	r3, [r5, #12]
 8009a18:	059a      	lsls	r2, r3, #22
 8009a1a:	d402      	bmi.n	8009a22 <_vfiprintf_r+0x1fe>
 8009a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a1e:	f7fe f91d 	bl	8007c5c <__retarget_lock_release_recursive>
 8009a22:	89ab      	ldrh	r3, [r5, #12]
 8009a24:	065b      	lsls	r3, r3, #25
 8009a26:	f53f af1f 	bmi.w	8009868 <_vfiprintf_r+0x44>
 8009a2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a2c:	e71e      	b.n	800986c <_vfiprintf_r+0x48>
 8009a2e:	ab03      	add	r3, sp, #12
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	462a      	mov	r2, r5
 8009a34:	4630      	mov	r0, r6
 8009a36:	4b06      	ldr	r3, [pc, #24]	@ (8009a50 <_vfiprintf_r+0x22c>)
 8009a38:	a904      	add	r1, sp, #16
 8009a3a:	f7fd fe4b 	bl	80076d4 <_printf_i>
 8009a3e:	e7e4      	b.n	8009a0a <_vfiprintf_r+0x1e6>
 8009a40:	0800ac94 	.word	0x0800ac94
 8009a44:	0800ac9a 	.word	0x0800ac9a
 8009a48:	0800ac9e 	.word	0x0800ac9e
 8009a4c:	08007199 	.word	0x08007199
 8009a50:	08009801 	.word	0x08009801

08009a54 <__swbuf_r>:
 8009a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a56:	460e      	mov	r6, r1
 8009a58:	4614      	mov	r4, r2
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	b118      	cbz	r0, 8009a66 <__swbuf_r+0x12>
 8009a5e:	6a03      	ldr	r3, [r0, #32]
 8009a60:	b90b      	cbnz	r3, 8009a66 <__swbuf_r+0x12>
 8009a62:	f7fd ffe1 	bl	8007a28 <__sinit>
 8009a66:	69a3      	ldr	r3, [r4, #24]
 8009a68:	60a3      	str	r3, [r4, #8]
 8009a6a:	89a3      	ldrh	r3, [r4, #12]
 8009a6c:	071a      	lsls	r2, r3, #28
 8009a6e:	d501      	bpl.n	8009a74 <__swbuf_r+0x20>
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	b943      	cbnz	r3, 8009a86 <__swbuf_r+0x32>
 8009a74:	4621      	mov	r1, r4
 8009a76:	4628      	mov	r0, r5
 8009a78:	f000 f82a 	bl	8009ad0 <__swsetup_r>
 8009a7c:	b118      	cbz	r0, 8009a86 <__swbuf_r+0x32>
 8009a7e:	f04f 37ff 	mov.w	r7, #4294967295
 8009a82:	4638      	mov	r0, r7
 8009a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	6922      	ldr	r2, [r4, #16]
 8009a8a:	b2f6      	uxtb	r6, r6
 8009a8c:	1a98      	subs	r0, r3, r2
 8009a8e:	6963      	ldr	r3, [r4, #20]
 8009a90:	4637      	mov	r7, r6
 8009a92:	4283      	cmp	r3, r0
 8009a94:	dc05      	bgt.n	8009aa2 <__swbuf_r+0x4e>
 8009a96:	4621      	mov	r1, r4
 8009a98:	4628      	mov	r0, r5
 8009a9a:	f7ff fda9 	bl	80095f0 <_fflush_r>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d1ed      	bne.n	8009a7e <__swbuf_r+0x2a>
 8009aa2:	68a3      	ldr	r3, [r4, #8]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	60a3      	str	r3, [r4, #8]
 8009aa8:	6823      	ldr	r3, [r4, #0]
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	6022      	str	r2, [r4, #0]
 8009aae:	701e      	strb	r6, [r3, #0]
 8009ab0:	6962      	ldr	r2, [r4, #20]
 8009ab2:	1c43      	adds	r3, r0, #1
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d004      	beq.n	8009ac2 <__swbuf_r+0x6e>
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	07db      	lsls	r3, r3, #31
 8009abc:	d5e1      	bpl.n	8009a82 <__swbuf_r+0x2e>
 8009abe:	2e0a      	cmp	r6, #10
 8009ac0:	d1df      	bne.n	8009a82 <__swbuf_r+0x2e>
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	f7ff fd93 	bl	80095f0 <_fflush_r>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d0d9      	beq.n	8009a82 <__swbuf_r+0x2e>
 8009ace:	e7d6      	b.n	8009a7e <__swbuf_r+0x2a>

08009ad0 <__swsetup_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4b29      	ldr	r3, [pc, #164]	@ (8009b78 <__swsetup_r+0xa8>)
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	6818      	ldr	r0, [r3, #0]
 8009ad8:	460c      	mov	r4, r1
 8009ada:	b118      	cbz	r0, 8009ae4 <__swsetup_r+0x14>
 8009adc:	6a03      	ldr	r3, [r0, #32]
 8009ade:	b90b      	cbnz	r3, 8009ae4 <__swsetup_r+0x14>
 8009ae0:	f7fd ffa2 	bl	8007a28 <__sinit>
 8009ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae8:	0719      	lsls	r1, r3, #28
 8009aea:	d422      	bmi.n	8009b32 <__swsetup_r+0x62>
 8009aec:	06da      	lsls	r2, r3, #27
 8009aee:	d407      	bmi.n	8009b00 <__swsetup_r+0x30>
 8009af0:	2209      	movs	r2, #9
 8009af2:	602a      	str	r2, [r5, #0]
 8009af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009af8:	f04f 30ff 	mov.w	r0, #4294967295
 8009afc:	81a3      	strh	r3, [r4, #12]
 8009afe:	e033      	b.n	8009b68 <__swsetup_r+0x98>
 8009b00:	0758      	lsls	r0, r3, #29
 8009b02:	d512      	bpl.n	8009b2a <__swsetup_r+0x5a>
 8009b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b06:	b141      	cbz	r1, 8009b1a <__swsetup_r+0x4a>
 8009b08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b0c:	4299      	cmp	r1, r3
 8009b0e:	d002      	beq.n	8009b16 <__swsetup_r+0x46>
 8009b10:	4628      	mov	r0, r5
 8009b12:	f7fe ff1d 	bl	8008950 <_free_r>
 8009b16:	2300      	movs	r3, #0
 8009b18:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b20:	81a3      	strh	r3, [r4, #12]
 8009b22:	2300      	movs	r3, #0
 8009b24:	6063      	str	r3, [r4, #4]
 8009b26:	6923      	ldr	r3, [r4, #16]
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	f043 0308 	orr.w	r3, r3, #8
 8009b30:	81a3      	strh	r3, [r4, #12]
 8009b32:	6923      	ldr	r3, [r4, #16]
 8009b34:	b94b      	cbnz	r3, 8009b4a <__swsetup_r+0x7a>
 8009b36:	89a3      	ldrh	r3, [r4, #12]
 8009b38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b40:	d003      	beq.n	8009b4a <__swsetup_r+0x7a>
 8009b42:	4621      	mov	r1, r4
 8009b44:	4628      	mov	r0, r5
 8009b46:	f000 f882 	bl	8009c4e <__smakebuf_r>
 8009b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b4e:	f013 0201 	ands.w	r2, r3, #1
 8009b52:	d00a      	beq.n	8009b6a <__swsetup_r+0x9a>
 8009b54:	2200      	movs	r2, #0
 8009b56:	60a2      	str	r2, [r4, #8]
 8009b58:	6962      	ldr	r2, [r4, #20]
 8009b5a:	4252      	negs	r2, r2
 8009b5c:	61a2      	str	r2, [r4, #24]
 8009b5e:	6922      	ldr	r2, [r4, #16]
 8009b60:	b942      	cbnz	r2, 8009b74 <__swsetup_r+0xa4>
 8009b62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b66:	d1c5      	bne.n	8009af4 <__swsetup_r+0x24>
 8009b68:	bd38      	pop	{r3, r4, r5, pc}
 8009b6a:	0799      	lsls	r1, r3, #30
 8009b6c:	bf58      	it	pl
 8009b6e:	6962      	ldrpl	r2, [r4, #20]
 8009b70:	60a2      	str	r2, [r4, #8]
 8009b72:	e7f4      	b.n	8009b5e <__swsetup_r+0x8e>
 8009b74:	2000      	movs	r0, #0
 8009b76:	e7f7      	b.n	8009b68 <__swsetup_r+0x98>
 8009b78:	20000018 	.word	0x20000018

08009b7c <_raise_r>:
 8009b7c:	291f      	cmp	r1, #31
 8009b7e:	b538      	push	{r3, r4, r5, lr}
 8009b80:	4605      	mov	r5, r0
 8009b82:	460c      	mov	r4, r1
 8009b84:	d904      	bls.n	8009b90 <_raise_r+0x14>
 8009b86:	2316      	movs	r3, #22
 8009b88:	6003      	str	r3, [r0, #0]
 8009b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b92:	b112      	cbz	r2, 8009b9a <_raise_r+0x1e>
 8009b94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b98:	b94b      	cbnz	r3, 8009bae <_raise_r+0x32>
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f000 f830 	bl	8009c00 <_getpid_r>
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009baa:	f000 b817 	b.w	8009bdc <_kill_r>
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d00a      	beq.n	8009bc8 <_raise_r+0x4c>
 8009bb2:	1c59      	adds	r1, r3, #1
 8009bb4:	d103      	bne.n	8009bbe <_raise_r+0x42>
 8009bb6:	2316      	movs	r3, #22
 8009bb8:	6003      	str	r3, [r0, #0]
 8009bba:	2001      	movs	r0, #1
 8009bbc:	e7e7      	b.n	8009b8e <_raise_r+0x12>
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009bc6:	4798      	blx	r3
 8009bc8:	2000      	movs	r0, #0
 8009bca:	e7e0      	b.n	8009b8e <_raise_r+0x12>

08009bcc <raise>:
 8009bcc:	4b02      	ldr	r3, [pc, #8]	@ (8009bd8 <raise+0xc>)
 8009bce:	4601      	mov	r1, r0
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	f7ff bfd3 	b.w	8009b7c <_raise_r>
 8009bd6:	bf00      	nop
 8009bd8:	20000018 	.word	0x20000018

08009bdc <_kill_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	2300      	movs	r3, #0
 8009be0:	4d06      	ldr	r5, [pc, #24]	@ (8009bfc <_kill_r+0x20>)
 8009be2:	4604      	mov	r4, r0
 8009be4:	4608      	mov	r0, r1
 8009be6:	4611      	mov	r1, r2
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	f7f8 fc7a 	bl	80024e2 <_kill>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	d102      	bne.n	8009bf8 <_kill_r+0x1c>
 8009bf2:	682b      	ldr	r3, [r5, #0]
 8009bf4:	b103      	cbz	r3, 8009bf8 <_kill_r+0x1c>
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	bd38      	pop	{r3, r4, r5, pc}
 8009bfa:	bf00      	nop
 8009bfc:	200004f8 	.word	0x200004f8

08009c00 <_getpid_r>:
 8009c00:	f7f8 bc68 	b.w	80024d4 <_getpid>

08009c04 <__swhatbuf_r>:
 8009c04:	b570      	push	{r4, r5, r6, lr}
 8009c06:	460c      	mov	r4, r1
 8009c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c0c:	4615      	mov	r5, r2
 8009c0e:	2900      	cmp	r1, #0
 8009c10:	461e      	mov	r6, r3
 8009c12:	b096      	sub	sp, #88	@ 0x58
 8009c14:	da0c      	bge.n	8009c30 <__swhatbuf_r+0x2c>
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	2100      	movs	r1, #0
 8009c1a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c1e:	bf14      	ite	ne
 8009c20:	2340      	movne	r3, #64	@ 0x40
 8009c22:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c26:	2000      	movs	r0, #0
 8009c28:	6031      	str	r1, [r6, #0]
 8009c2a:	602b      	str	r3, [r5, #0]
 8009c2c:	b016      	add	sp, #88	@ 0x58
 8009c2e:	bd70      	pop	{r4, r5, r6, pc}
 8009c30:	466a      	mov	r2, sp
 8009c32:	f000 f849 	bl	8009cc8 <_fstat_r>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	dbed      	blt.n	8009c16 <__swhatbuf_r+0x12>
 8009c3a:	9901      	ldr	r1, [sp, #4]
 8009c3c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c40:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c44:	4259      	negs	r1, r3
 8009c46:	4159      	adcs	r1, r3
 8009c48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c4c:	e7eb      	b.n	8009c26 <__swhatbuf_r+0x22>

08009c4e <__smakebuf_r>:
 8009c4e:	898b      	ldrh	r3, [r1, #12]
 8009c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c52:	079d      	lsls	r5, r3, #30
 8009c54:	4606      	mov	r6, r0
 8009c56:	460c      	mov	r4, r1
 8009c58:	d507      	bpl.n	8009c6a <__smakebuf_r+0x1c>
 8009c5a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c5e:	6023      	str	r3, [r4, #0]
 8009c60:	6123      	str	r3, [r4, #16]
 8009c62:	2301      	movs	r3, #1
 8009c64:	6163      	str	r3, [r4, #20]
 8009c66:	b003      	add	sp, #12
 8009c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c6a:	466a      	mov	r2, sp
 8009c6c:	ab01      	add	r3, sp, #4
 8009c6e:	f7ff ffc9 	bl	8009c04 <__swhatbuf_r>
 8009c72:	9f00      	ldr	r7, [sp, #0]
 8009c74:	4605      	mov	r5, r0
 8009c76:	4639      	mov	r1, r7
 8009c78:	4630      	mov	r0, r6
 8009c7a:	f7fe fedb 	bl	8008a34 <_malloc_r>
 8009c7e:	b948      	cbnz	r0, 8009c94 <__smakebuf_r+0x46>
 8009c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c84:	059a      	lsls	r2, r3, #22
 8009c86:	d4ee      	bmi.n	8009c66 <__smakebuf_r+0x18>
 8009c88:	f023 0303 	bic.w	r3, r3, #3
 8009c8c:	f043 0302 	orr.w	r3, r3, #2
 8009c90:	81a3      	strh	r3, [r4, #12]
 8009c92:	e7e2      	b.n	8009c5a <__smakebuf_r+0xc>
 8009c94:	89a3      	ldrh	r3, [r4, #12]
 8009c96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c9e:	81a3      	strh	r3, [r4, #12]
 8009ca0:	9b01      	ldr	r3, [sp, #4]
 8009ca2:	6020      	str	r0, [r4, #0]
 8009ca4:	b15b      	cbz	r3, 8009cbe <__smakebuf_r+0x70>
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cac:	f000 f81e 	bl	8009cec <_isatty_r>
 8009cb0:	b128      	cbz	r0, 8009cbe <__smakebuf_r+0x70>
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	f023 0303 	bic.w	r3, r3, #3
 8009cb8:	f043 0301 	orr.w	r3, r3, #1
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	431d      	orrs	r5, r3
 8009cc2:	81a5      	strh	r5, [r4, #12]
 8009cc4:	e7cf      	b.n	8009c66 <__smakebuf_r+0x18>
	...

08009cc8 <_fstat_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	2300      	movs	r3, #0
 8009ccc:	4d06      	ldr	r5, [pc, #24]	@ (8009ce8 <_fstat_r+0x20>)
 8009cce:	4604      	mov	r4, r0
 8009cd0:	4608      	mov	r0, r1
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	602b      	str	r3, [r5, #0]
 8009cd6:	f7f8 fc63 	bl	80025a0 <_fstat>
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	d102      	bne.n	8009ce4 <_fstat_r+0x1c>
 8009cde:	682b      	ldr	r3, [r5, #0]
 8009ce0:	b103      	cbz	r3, 8009ce4 <_fstat_r+0x1c>
 8009ce2:	6023      	str	r3, [r4, #0]
 8009ce4:	bd38      	pop	{r3, r4, r5, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200004f8 	.word	0x200004f8

08009cec <_isatty_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4d05      	ldr	r5, [pc, #20]	@ (8009d08 <_isatty_r+0x1c>)
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	602b      	str	r3, [r5, #0]
 8009cf8:	f7f8 fc61 	bl	80025be <_isatty>
 8009cfc:	1c43      	adds	r3, r0, #1
 8009cfe:	d102      	bne.n	8009d06 <_isatty_r+0x1a>
 8009d00:	682b      	ldr	r3, [r5, #0]
 8009d02:	b103      	cbz	r3, 8009d06 <_isatty_r+0x1a>
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	bd38      	pop	{r3, r4, r5, pc}
 8009d08:	200004f8 	.word	0x200004f8

08009d0c <pow>:
 8009d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d10:	4614      	mov	r4, r2
 8009d12:	461d      	mov	r5, r3
 8009d14:	4680      	mov	r8, r0
 8009d16:	4689      	mov	r9, r1
 8009d18:	f000 f866 	bl	8009de8 <__ieee754_pow>
 8009d1c:	4622      	mov	r2, r4
 8009d1e:	4606      	mov	r6, r0
 8009d20:	460f      	mov	r7, r1
 8009d22:	462b      	mov	r3, r5
 8009d24:	4620      	mov	r0, r4
 8009d26:	4629      	mov	r1, r5
 8009d28:	f7f6 fe70 	bl	8000a0c <__aeabi_dcmpun>
 8009d2c:	bbc8      	cbnz	r0, 8009da2 <pow+0x96>
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2300      	movs	r3, #0
 8009d32:	4640      	mov	r0, r8
 8009d34:	4649      	mov	r1, r9
 8009d36:	f7f6 fe37 	bl	80009a8 <__aeabi_dcmpeq>
 8009d3a:	b1b8      	cbz	r0, 8009d6c <pow+0x60>
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2300      	movs	r3, #0
 8009d40:	4620      	mov	r0, r4
 8009d42:	4629      	mov	r1, r5
 8009d44:	f7f6 fe30 	bl	80009a8 <__aeabi_dcmpeq>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d141      	bne.n	8009dd0 <pow+0xc4>
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	4629      	mov	r1, r5
 8009d50:	f000 f844 	bl	8009ddc <finite>
 8009d54:	b328      	cbz	r0, 8009da2 <pow+0x96>
 8009d56:	2200      	movs	r2, #0
 8009d58:	2300      	movs	r3, #0
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	f7f6 fe2d 	bl	80009bc <__aeabi_dcmplt>
 8009d62:	b1f0      	cbz	r0, 8009da2 <pow+0x96>
 8009d64:	f7fd ff4e 	bl	8007c04 <__errno>
 8009d68:	2322      	movs	r3, #34	@ 0x22
 8009d6a:	e019      	b.n	8009da0 <pow+0x94>
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	4639      	mov	r1, r7
 8009d70:	f000 f834 	bl	8009ddc <finite>
 8009d74:	b9c8      	cbnz	r0, 8009daa <pow+0x9e>
 8009d76:	4640      	mov	r0, r8
 8009d78:	4649      	mov	r1, r9
 8009d7a:	f000 f82f 	bl	8009ddc <finite>
 8009d7e:	b1a0      	cbz	r0, 8009daa <pow+0x9e>
 8009d80:	4620      	mov	r0, r4
 8009d82:	4629      	mov	r1, r5
 8009d84:	f000 f82a 	bl	8009ddc <finite>
 8009d88:	b178      	cbz	r0, 8009daa <pow+0x9e>
 8009d8a:	4632      	mov	r2, r6
 8009d8c:	463b      	mov	r3, r7
 8009d8e:	4630      	mov	r0, r6
 8009d90:	4639      	mov	r1, r7
 8009d92:	f7f6 fe3b 	bl	8000a0c <__aeabi_dcmpun>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d0e4      	beq.n	8009d64 <pow+0x58>
 8009d9a:	f7fd ff33 	bl	8007c04 <__errno>
 8009d9e:	2321      	movs	r3, #33	@ 0x21
 8009da0:	6003      	str	r3, [r0, #0]
 8009da2:	4630      	mov	r0, r6
 8009da4:	4639      	mov	r1, r7
 8009da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009daa:	2200      	movs	r2, #0
 8009dac:	2300      	movs	r3, #0
 8009dae:	4630      	mov	r0, r6
 8009db0:	4639      	mov	r1, r7
 8009db2:	f7f6 fdf9 	bl	80009a8 <__aeabi_dcmpeq>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d0f3      	beq.n	8009da2 <pow+0x96>
 8009dba:	4640      	mov	r0, r8
 8009dbc:	4649      	mov	r1, r9
 8009dbe:	f000 f80d 	bl	8009ddc <finite>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d0ed      	beq.n	8009da2 <pow+0x96>
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	4629      	mov	r1, r5
 8009dca:	f000 f807 	bl	8009ddc <finite>
 8009dce:	e7c8      	b.n	8009d62 <pow+0x56>
 8009dd0:	2600      	movs	r6, #0
 8009dd2:	4f01      	ldr	r7, [pc, #4]	@ (8009dd8 <pow+0xcc>)
 8009dd4:	e7e5      	b.n	8009da2 <pow+0x96>
 8009dd6:	bf00      	nop
 8009dd8:	3ff00000 	.word	0x3ff00000

08009ddc <finite>:
 8009ddc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009de0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009de4:	0fc0      	lsrs	r0, r0, #31
 8009de6:	4770      	bx	lr

08009de8 <__ieee754_pow>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	b091      	sub	sp, #68	@ 0x44
 8009dee:	e9cd 2300 	strd	r2, r3, [sp]
 8009df2:	468b      	mov	fp, r1
 8009df4:	e9dd 1800 	ldrd	r1, r8, [sp]
 8009df8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8009dfc:	4682      	mov	sl, r0
 8009dfe:	ea57 0001 	orrs.w	r0, r7, r1
 8009e02:	d112      	bne.n	8009e2a <__ieee754_pow+0x42>
 8009e04:	4653      	mov	r3, sl
 8009e06:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8009e0a:	18db      	adds	r3, r3, r3
 8009e0c:	4152      	adcs	r2, r2
 8009e0e:	4298      	cmp	r0, r3
 8009e10:	4b93      	ldr	r3, [pc, #588]	@ (800a060 <__ieee754_pow+0x278>)
 8009e12:	4193      	sbcs	r3, r2
 8009e14:	f080 84cd 	bcs.w	800a7b2 <__ieee754_pow+0x9ca>
 8009e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e1c:	4650      	mov	r0, sl
 8009e1e:	4659      	mov	r1, fp
 8009e20:	f7f6 f9a4 	bl	800016c <__adddf3>
 8009e24:	b011      	add	sp, #68	@ 0x44
 8009e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2a:	4b8e      	ldr	r3, [pc, #568]	@ (800a064 <__ieee754_pow+0x27c>)
 8009e2c:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8009e30:	429d      	cmp	r5, r3
 8009e32:	465e      	mov	r6, fp
 8009e34:	46d1      	mov	r9, sl
 8009e36:	d80b      	bhi.n	8009e50 <__ieee754_pow+0x68>
 8009e38:	d105      	bne.n	8009e46 <__ieee754_pow+0x5e>
 8009e3a:	f1ba 0f00 	cmp.w	sl, #0
 8009e3e:	d1eb      	bne.n	8009e18 <__ieee754_pow+0x30>
 8009e40:	42af      	cmp	r7, r5
 8009e42:	d8e9      	bhi.n	8009e18 <__ieee754_pow+0x30>
 8009e44:	e001      	b.n	8009e4a <__ieee754_pow+0x62>
 8009e46:	429f      	cmp	r7, r3
 8009e48:	d802      	bhi.n	8009e50 <__ieee754_pow+0x68>
 8009e4a:	429f      	cmp	r7, r3
 8009e4c:	d10f      	bne.n	8009e6e <__ieee754_pow+0x86>
 8009e4e:	b171      	cbz	r1, 8009e6e <__ieee754_pow+0x86>
 8009e50:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8009e54:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009e58:	ea56 0609 	orrs.w	r6, r6, r9
 8009e5c:	d1dc      	bne.n	8009e18 <__ieee754_pow+0x30>
 8009e5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e62:	18db      	adds	r3, r3, r3
 8009e64:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009e68:	4152      	adcs	r2, r2
 8009e6a:	429e      	cmp	r6, r3
 8009e6c:	e7d0      	b.n	8009e10 <__ieee754_pow+0x28>
 8009e6e:	2e00      	cmp	r6, #0
 8009e70:	462b      	mov	r3, r5
 8009e72:	da42      	bge.n	8009efa <__ieee754_pow+0x112>
 8009e74:	4a7c      	ldr	r2, [pc, #496]	@ (800a068 <__ieee754_pow+0x280>)
 8009e76:	4297      	cmp	r7, r2
 8009e78:	d856      	bhi.n	8009f28 <__ieee754_pow+0x140>
 8009e7a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009e7e:	4297      	cmp	r7, r2
 8009e80:	f240 84a6 	bls.w	800a7d0 <__ieee754_pow+0x9e8>
 8009e84:	153a      	asrs	r2, r7, #20
 8009e86:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009e8a:	2a14      	cmp	r2, #20
 8009e8c:	dd18      	ble.n	8009ec0 <__ieee754_pow+0xd8>
 8009e8e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009e92:	fa21 f402 	lsr.w	r4, r1, r2
 8009e96:	fa04 f202 	lsl.w	r2, r4, r2
 8009e9a:	428a      	cmp	r2, r1
 8009e9c:	f040 8498 	bne.w	800a7d0 <__ieee754_pow+0x9e8>
 8009ea0:	f004 0401 	and.w	r4, r4, #1
 8009ea4:	f1c4 0402 	rsb	r4, r4, #2
 8009ea8:	2900      	cmp	r1, #0
 8009eaa:	d159      	bne.n	8009f60 <__ieee754_pow+0x178>
 8009eac:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8009eb0:	d149      	bne.n	8009f46 <__ieee754_pow+0x15e>
 8009eb2:	4652      	mov	r2, sl
 8009eb4:	465b      	mov	r3, fp
 8009eb6:	4650      	mov	r0, sl
 8009eb8:	4659      	mov	r1, fp
 8009eba:	f7f6 fb0d 	bl	80004d8 <__aeabi_dmul>
 8009ebe:	e7b1      	b.n	8009e24 <__ieee754_pow+0x3c>
 8009ec0:	2900      	cmp	r1, #0
 8009ec2:	d14c      	bne.n	8009f5e <__ieee754_pow+0x176>
 8009ec4:	f1c2 0214 	rsb	r2, r2, #20
 8009ec8:	fa47 f402 	asr.w	r4, r7, r2
 8009ecc:	fa04 f202 	lsl.w	r2, r4, r2
 8009ed0:	42ba      	cmp	r2, r7
 8009ed2:	f040 847a 	bne.w	800a7ca <__ieee754_pow+0x9e2>
 8009ed6:	f004 0401 	and.w	r4, r4, #1
 8009eda:	f1c4 0402 	rsb	r4, r4, #2
 8009ede:	4a63      	ldr	r2, [pc, #396]	@ (800a06c <__ieee754_pow+0x284>)
 8009ee0:	4297      	cmp	r7, r2
 8009ee2:	d1e3      	bne.n	8009eac <__ieee754_pow+0xc4>
 8009ee4:	f1b8 0f00 	cmp.w	r8, #0
 8009ee8:	f280 846b 	bge.w	800a7c2 <__ieee754_pow+0x9da>
 8009eec:	4652      	mov	r2, sl
 8009eee:	465b      	mov	r3, fp
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	495e      	ldr	r1, [pc, #376]	@ (800a06c <__ieee754_pow+0x284>)
 8009ef4:	f7f6 fc1a 	bl	800072c <__aeabi_ddiv>
 8009ef8:	e794      	b.n	8009e24 <__ieee754_pow+0x3c>
 8009efa:	2400      	movs	r4, #0
 8009efc:	bb81      	cbnz	r1, 8009f60 <__ieee754_pow+0x178>
 8009efe:	4a59      	ldr	r2, [pc, #356]	@ (800a064 <__ieee754_pow+0x27c>)
 8009f00:	4297      	cmp	r7, r2
 8009f02:	d1ec      	bne.n	8009ede <__ieee754_pow+0xf6>
 8009f04:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8009f08:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8009f0c:	ea53 0309 	orrs.w	r3, r3, r9
 8009f10:	f000 844f 	beq.w	800a7b2 <__ieee754_pow+0x9ca>
 8009f14:	4b56      	ldr	r3, [pc, #344]	@ (800a070 <__ieee754_pow+0x288>)
 8009f16:	429d      	cmp	r5, r3
 8009f18:	d908      	bls.n	8009f2c <__ieee754_pow+0x144>
 8009f1a:	f1b8 0f00 	cmp.w	r8, #0
 8009f1e:	f280 844c 	bge.w	800a7ba <__ieee754_pow+0x9d2>
 8009f22:	2000      	movs	r0, #0
 8009f24:	2100      	movs	r1, #0
 8009f26:	e77d      	b.n	8009e24 <__ieee754_pow+0x3c>
 8009f28:	2402      	movs	r4, #2
 8009f2a:	e7e7      	b.n	8009efc <__ieee754_pow+0x114>
 8009f2c:	f1b8 0f00 	cmp.w	r8, #0
 8009f30:	f04f 0000 	mov.w	r0, #0
 8009f34:	f04f 0100 	mov.w	r1, #0
 8009f38:	f6bf af74 	bge.w	8009e24 <__ieee754_pow+0x3c>
 8009f3c:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009f40:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009f44:	e76e      	b.n	8009e24 <__ieee754_pow+0x3c>
 8009f46:	4a4b      	ldr	r2, [pc, #300]	@ (800a074 <__ieee754_pow+0x28c>)
 8009f48:	4590      	cmp	r8, r2
 8009f4a:	d109      	bne.n	8009f60 <__ieee754_pow+0x178>
 8009f4c:	2e00      	cmp	r6, #0
 8009f4e:	db07      	blt.n	8009f60 <__ieee754_pow+0x178>
 8009f50:	4650      	mov	r0, sl
 8009f52:	4659      	mov	r1, fp
 8009f54:	b011      	add	sp, #68	@ 0x44
 8009f56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5a:	f000 bd0f 	b.w	800a97c <__ieee754_sqrt>
 8009f5e:	2400      	movs	r4, #0
 8009f60:	4650      	mov	r0, sl
 8009f62:	4659      	mov	r1, fp
 8009f64:	9302      	str	r3, [sp, #8]
 8009f66:	f000 fc69 	bl	800a83c <fabs>
 8009f6a:	9b02      	ldr	r3, [sp, #8]
 8009f6c:	f1b9 0f00 	cmp.w	r9, #0
 8009f70:	d127      	bne.n	8009fc2 <__ieee754_pow+0x1da>
 8009f72:	4a3e      	ldr	r2, [pc, #248]	@ (800a06c <__ieee754_pow+0x284>)
 8009f74:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8009f78:	4594      	cmp	ip, r2
 8009f7a:	d000      	beq.n	8009f7e <__ieee754_pow+0x196>
 8009f7c:	bb0d      	cbnz	r5, 8009fc2 <__ieee754_pow+0x1da>
 8009f7e:	f1b8 0f00 	cmp.w	r8, #0
 8009f82:	da05      	bge.n	8009f90 <__ieee754_pow+0x1a8>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	2000      	movs	r0, #0
 8009f8a:	4938      	ldr	r1, [pc, #224]	@ (800a06c <__ieee754_pow+0x284>)
 8009f8c:	f7f6 fbce 	bl	800072c <__aeabi_ddiv>
 8009f90:	2e00      	cmp	r6, #0
 8009f92:	f6bf af47 	bge.w	8009e24 <__ieee754_pow+0x3c>
 8009f96:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009f9a:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009f9e:	4325      	orrs	r5, r4
 8009fa0:	d108      	bne.n	8009fb4 <__ieee754_pow+0x1cc>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	4619      	mov	r1, r3
 8009faa:	f7f6 f8dd 	bl	8000168 <__aeabi_dsub>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	e79f      	b.n	8009ef4 <__ieee754_pow+0x10c>
 8009fb4:	2c01      	cmp	r4, #1
 8009fb6:	f47f af35 	bne.w	8009e24 <__ieee754_pow+0x3c>
 8009fba:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	e730      	b.n	8009e24 <__ieee754_pow+0x3c>
 8009fc2:	0ff2      	lsrs	r2, r6, #31
 8009fc4:	3a01      	subs	r2, #1
 8009fc6:	ea52 0c04 	orrs.w	ip, r2, r4
 8009fca:	d102      	bne.n	8009fd2 <__ieee754_pow+0x1ea>
 8009fcc:	4652      	mov	r2, sl
 8009fce:	465b      	mov	r3, fp
 8009fd0:	e7e9      	b.n	8009fa6 <__ieee754_pow+0x1be>
 8009fd2:	f04f 0900 	mov.w	r9, #0
 8009fd6:	3c01      	subs	r4, #1
 8009fd8:	4314      	orrs	r4, r2
 8009fda:	bf14      	ite	ne
 8009fdc:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800a06c <__ieee754_pow+0x284>
 8009fe0:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800a078 <__ieee754_pow+0x290>
 8009fe4:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8009fe8:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8009fec:	f240 8104 	bls.w	800a1f8 <__ieee754_pow+0x410>
 8009ff0:	4b22      	ldr	r3, [pc, #136]	@ (800a07c <__ieee754_pow+0x294>)
 8009ff2:	429f      	cmp	r7, r3
 8009ff4:	4b1e      	ldr	r3, [pc, #120]	@ (800a070 <__ieee754_pow+0x288>)
 8009ff6:	d913      	bls.n	800a020 <__ieee754_pow+0x238>
 8009ff8:	429d      	cmp	r5, r3
 8009ffa:	d808      	bhi.n	800a00e <__ieee754_pow+0x226>
 8009ffc:	f1b8 0f00 	cmp.w	r8, #0
 800a000:	da08      	bge.n	800a014 <__ieee754_pow+0x22c>
 800a002:	2000      	movs	r0, #0
 800a004:	b011      	add	sp, #68	@ 0x44
 800a006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00a:	f000 bcb1 	b.w	800a970 <__math_oflow>
 800a00e:	f1b8 0f00 	cmp.w	r8, #0
 800a012:	dcf6      	bgt.n	800a002 <__ieee754_pow+0x21a>
 800a014:	2000      	movs	r0, #0
 800a016:	b011      	add	sp, #68	@ 0x44
 800a018:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	f000 bca3 	b.w	800a966 <__math_uflow>
 800a020:	429d      	cmp	r5, r3
 800a022:	d20c      	bcs.n	800a03e <__ieee754_pow+0x256>
 800a024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a028:	2200      	movs	r2, #0
 800a02a:	2300      	movs	r3, #0
 800a02c:	f7f6 fcc6 	bl	80009bc <__aeabi_dcmplt>
 800a030:	3800      	subs	r0, #0
 800a032:	bf18      	it	ne
 800a034:	2001      	movne	r0, #1
 800a036:	f1b8 0f00 	cmp.w	r8, #0
 800a03a:	daec      	bge.n	800a016 <__ieee754_pow+0x22e>
 800a03c:	e7e2      	b.n	800a004 <__ieee754_pow+0x21c>
 800a03e:	4b0b      	ldr	r3, [pc, #44]	@ (800a06c <__ieee754_pow+0x284>)
 800a040:	2200      	movs	r2, #0
 800a042:	429d      	cmp	r5, r3
 800a044:	d91c      	bls.n	800a080 <__ieee754_pow+0x298>
 800a046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a04a:	2300      	movs	r3, #0
 800a04c:	f7f6 fcb6 	bl	80009bc <__aeabi_dcmplt>
 800a050:	3800      	subs	r0, #0
 800a052:	bf18      	it	ne
 800a054:	2001      	movne	r0, #1
 800a056:	f1b8 0f00 	cmp.w	r8, #0
 800a05a:	dcd3      	bgt.n	800a004 <__ieee754_pow+0x21c>
 800a05c:	e7db      	b.n	800a016 <__ieee754_pow+0x22e>
 800a05e:	bf00      	nop
 800a060:	fff00000 	.word	0xfff00000
 800a064:	7ff00000 	.word	0x7ff00000
 800a068:	433fffff 	.word	0x433fffff
 800a06c:	3ff00000 	.word	0x3ff00000
 800a070:	3fefffff 	.word	0x3fefffff
 800a074:	3fe00000 	.word	0x3fe00000
 800a078:	bff00000 	.word	0xbff00000
 800a07c:	43f00000 	.word	0x43f00000
 800a080:	4b59      	ldr	r3, [pc, #356]	@ (800a1e8 <__ieee754_pow+0x400>)
 800a082:	f7f6 f871 	bl	8000168 <__aeabi_dsub>
 800a086:	a350      	add	r3, pc, #320	@ (adr r3, 800a1c8 <__ieee754_pow+0x3e0>)
 800a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08c:	4604      	mov	r4, r0
 800a08e:	460d      	mov	r5, r1
 800a090:	f7f6 fa22 	bl	80004d8 <__aeabi_dmul>
 800a094:	a34e      	add	r3, pc, #312	@ (adr r3, 800a1d0 <__ieee754_pow+0x3e8>)
 800a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09a:	4606      	mov	r6, r0
 800a09c:	460f      	mov	r7, r1
 800a09e:	4620      	mov	r0, r4
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f7f6 fa19 	bl	80004d8 <__aeabi_dmul>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	468b      	mov	fp, r1
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	4b4e      	ldr	r3, [pc, #312]	@ (800a1ec <__ieee754_pow+0x404>)
 800a0b2:	f7f6 fa11 	bl	80004d8 <__aeabi_dmul>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	a147      	add	r1, pc, #284	@ (adr r1, 800a1d8 <__ieee754_pow+0x3f0>)
 800a0bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0c0:	f7f6 f852 	bl	8000168 <__aeabi_dsub>
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	462b      	mov	r3, r5
 800a0c8:	f7f6 fa06 	bl	80004d8 <__aeabi_dmul>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	4947      	ldr	r1, [pc, #284]	@ (800a1f0 <__ieee754_pow+0x408>)
 800a0d4:	f7f6 f848 	bl	8000168 <__aeabi_dsub>
 800a0d8:	4622      	mov	r2, r4
 800a0da:	4680      	mov	r8, r0
 800a0dc:	4689      	mov	r9, r1
 800a0de:	462b      	mov	r3, r5
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	f7f6 f9f8 	bl	80004d8 <__aeabi_dmul>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4640      	mov	r0, r8
 800a0ee:	4649      	mov	r1, r9
 800a0f0:	f7f6 f9f2 	bl	80004d8 <__aeabi_dmul>
 800a0f4:	a33a      	add	r3, pc, #232	@ (adr r3, 800a1e0 <__ieee754_pow+0x3f8>)
 800a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fa:	f7f6 f9ed 	bl	80004d8 <__aeabi_dmul>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4650      	mov	r0, sl
 800a104:	4659      	mov	r1, fp
 800a106:	f7f6 f82f 	bl	8000168 <__aeabi_dsub>
 800a10a:	2400      	movs	r4, #0
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	4680      	mov	r8, r0
 800a112:	4689      	mov	r9, r1
 800a114:	4630      	mov	r0, r6
 800a116:	4639      	mov	r1, r7
 800a118:	f7f6 f828 	bl	800016c <__adddf3>
 800a11c:	4632      	mov	r2, r6
 800a11e:	463b      	mov	r3, r7
 800a120:	4620      	mov	r0, r4
 800a122:	460d      	mov	r5, r1
 800a124:	f7f6 f820 	bl	8000168 <__aeabi_dsub>
 800a128:	4602      	mov	r2, r0
 800a12a:	460b      	mov	r3, r1
 800a12c:	4640      	mov	r0, r8
 800a12e:	4649      	mov	r1, r9
 800a130:	f7f6 f81a 	bl	8000168 <__aeabi_dsub>
 800a134:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a138:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a13c:	2300      	movs	r3, #0
 800a13e:	9304      	str	r3, [sp, #16]
 800a140:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a144:	4606      	mov	r6, r0
 800a146:	460f      	mov	r7, r1
 800a148:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a14c:	465b      	mov	r3, fp
 800a14e:	4652      	mov	r2, sl
 800a150:	f7f6 f80a 	bl	8000168 <__aeabi_dsub>
 800a154:	4622      	mov	r2, r4
 800a156:	462b      	mov	r3, r5
 800a158:	f7f6 f9be 	bl	80004d8 <__aeabi_dmul>
 800a15c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a160:	4680      	mov	r8, r0
 800a162:	4689      	mov	r9, r1
 800a164:	4630      	mov	r0, r6
 800a166:	4639      	mov	r1, r7
 800a168:	f7f6 f9b6 	bl	80004d8 <__aeabi_dmul>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	4640      	mov	r0, r8
 800a172:	4649      	mov	r1, r9
 800a174:	f7f5 fffa 	bl	800016c <__adddf3>
 800a178:	465b      	mov	r3, fp
 800a17a:	4606      	mov	r6, r0
 800a17c:	460f      	mov	r7, r1
 800a17e:	4652      	mov	r2, sl
 800a180:	4620      	mov	r0, r4
 800a182:	4629      	mov	r1, r5
 800a184:	f7f6 f9a8 	bl	80004d8 <__aeabi_dmul>
 800a188:	460b      	mov	r3, r1
 800a18a:	4602      	mov	r2, r0
 800a18c:	4680      	mov	r8, r0
 800a18e:	4689      	mov	r9, r1
 800a190:	4630      	mov	r0, r6
 800a192:	4639      	mov	r1, r7
 800a194:	f7f5 ffea 	bl	800016c <__adddf3>
 800a198:	4b16      	ldr	r3, [pc, #88]	@ (800a1f4 <__ieee754_pow+0x40c>)
 800a19a:	4604      	mov	r4, r0
 800a19c:	4299      	cmp	r1, r3
 800a19e:	460d      	mov	r5, r1
 800a1a0:	468b      	mov	fp, r1
 800a1a2:	f340 81fd 	ble.w	800a5a0 <__ieee754_pow+0x7b8>
 800a1a6:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a1aa:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a1ae:	4303      	orrs	r3, r0
 800a1b0:	f000 81dc 	beq.w	800a56c <__ieee754_pow+0x784>
 800a1b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f7f6 fbfe 	bl	80009bc <__aeabi_dcmplt>
 800a1c0:	3800      	subs	r0, #0
 800a1c2:	bf18      	it	ne
 800a1c4:	2001      	movne	r0, #1
 800a1c6:	e71d      	b.n	800a004 <__ieee754_pow+0x21c>
 800a1c8:	60000000 	.word	0x60000000
 800a1cc:	3ff71547 	.word	0x3ff71547
 800a1d0:	f85ddf44 	.word	0xf85ddf44
 800a1d4:	3e54ae0b 	.word	0x3e54ae0b
 800a1d8:	55555555 	.word	0x55555555
 800a1dc:	3fd55555 	.word	0x3fd55555
 800a1e0:	652b82fe 	.word	0x652b82fe
 800a1e4:	3ff71547 	.word	0x3ff71547
 800a1e8:	3ff00000 	.word	0x3ff00000
 800a1ec:	3fd00000 	.word	0x3fd00000
 800a1f0:	3fe00000 	.word	0x3fe00000
 800a1f4:	408fffff 	.word	0x408fffff
 800a1f8:	4ad3      	ldr	r2, [pc, #844]	@ (800a548 <__ieee754_pow+0x760>)
 800a1fa:	4032      	ands	r2, r6
 800a1fc:	2a00      	cmp	r2, #0
 800a1fe:	f040 817a 	bne.w	800a4f6 <__ieee754_pow+0x70e>
 800a202:	4bd2      	ldr	r3, [pc, #840]	@ (800a54c <__ieee754_pow+0x764>)
 800a204:	2200      	movs	r2, #0
 800a206:	f7f6 f967 	bl	80004d8 <__aeabi_dmul>
 800a20a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800a20e:	460b      	mov	r3, r1
 800a210:	151a      	asrs	r2, r3, #20
 800a212:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a216:	4422      	add	r2, r4
 800a218:	920a      	str	r2, [sp, #40]	@ 0x28
 800a21a:	4acd      	ldr	r2, [pc, #820]	@ (800a550 <__ieee754_pow+0x768>)
 800a21c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a220:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800a224:	4293      	cmp	r3, r2
 800a226:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a22a:	dd08      	ble.n	800a23e <__ieee754_pow+0x456>
 800a22c:	4ac9      	ldr	r2, [pc, #804]	@ (800a554 <__ieee754_pow+0x76c>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	f340 8163 	ble.w	800a4fa <__ieee754_pow+0x712>
 800a234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a236:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a23a:	3301      	adds	r3, #1
 800a23c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a23e:	2600      	movs	r6, #0
 800a240:	00f3      	lsls	r3, r6, #3
 800a242:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a244:	4bc4      	ldr	r3, [pc, #784]	@ (800a558 <__ieee754_pow+0x770>)
 800a246:	4629      	mov	r1, r5
 800a248:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a24c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a250:	461a      	mov	r2, r3
 800a252:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a256:	4623      	mov	r3, r4
 800a258:	4682      	mov	sl, r0
 800a25a:	f7f5 ff85 	bl	8000168 <__aeabi_dsub>
 800a25e:	4652      	mov	r2, sl
 800a260:	462b      	mov	r3, r5
 800a262:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a266:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a26a:	f7f5 ff7f 	bl	800016c <__adddf3>
 800a26e:	4602      	mov	r2, r0
 800a270:	460b      	mov	r3, r1
 800a272:	2000      	movs	r0, #0
 800a274:	49b9      	ldr	r1, [pc, #740]	@ (800a55c <__ieee754_pow+0x774>)
 800a276:	f7f6 fa59 	bl	800072c <__aeabi_ddiv>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a282:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a286:	f7f6 f927 	bl	80004d8 <__aeabi_dmul>
 800a28a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a28e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a292:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a296:	2300      	movs	r3, #0
 800a298:	2200      	movs	r2, #0
 800a29a:	46ab      	mov	fp, r5
 800a29c:	106d      	asrs	r5, r5, #1
 800a29e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a2a2:	9304      	str	r3, [sp, #16]
 800a2a4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a2a8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a2ac:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a2b0:	4640      	mov	r0, r8
 800a2b2:	4649      	mov	r1, r9
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	461d      	mov	r5, r3
 800a2b8:	f7f6 f90e 	bl	80004d8 <__aeabi_dmul>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2c4:	f7f5 ff50 	bl	8000168 <__aeabi_dsub>
 800a2c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	f7f5 ff48 	bl	8000168 <__aeabi_dsub>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4650      	mov	r0, sl
 800a2de:	4659      	mov	r1, fp
 800a2e0:	f7f5 ff42 	bl	8000168 <__aeabi_dsub>
 800a2e4:	4642      	mov	r2, r8
 800a2e6:	464b      	mov	r3, r9
 800a2e8:	f7f6 f8f6 	bl	80004d8 <__aeabi_dmul>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	4639      	mov	r1, r7
 800a2f4:	f7f5 ff38 	bl	8000168 <__aeabi_dsub>
 800a2f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a2fc:	f7f6 f8ec 	bl	80004d8 <__aeabi_dmul>
 800a300:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a304:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a308:	4610      	mov	r0, r2
 800a30a:	4619      	mov	r1, r3
 800a30c:	f7f6 f8e4 	bl	80004d8 <__aeabi_dmul>
 800a310:	a37b      	add	r3, pc, #492	@ (adr r3, 800a500 <__ieee754_pow+0x718>)
 800a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a316:	4604      	mov	r4, r0
 800a318:	460d      	mov	r5, r1
 800a31a:	f7f6 f8dd 	bl	80004d8 <__aeabi_dmul>
 800a31e:	a37a      	add	r3, pc, #488	@ (adr r3, 800a508 <__ieee754_pow+0x720>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	f7f5 ff22 	bl	800016c <__adddf3>
 800a328:	4622      	mov	r2, r4
 800a32a:	462b      	mov	r3, r5
 800a32c:	f7f6 f8d4 	bl	80004d8 <__aeabi_dmul>
 800a330:	a377      	add	r3, pc, #476	@ (adr r3, 800a510 <__ieee754_pow+0x728>)
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	f7f5 ff19 	bl	800016c <__adddf3>
 800a33a:	4622      	mov	r2, r4
 800a33c:	462b      	mov	r3, r5
 800a33e:	f7f6 f8cb 	bl	80004d8 <__aeabi_dmul>
 800a342:	a375      	add	r3, pc, #468	@ (adr r3, 800a518 <__ieee754_pow+0x730>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f5 ff10 	bl	800016c <__adddf3>
 800a34c:	4622      	mov	r2, r4
 800a34e:	462b      	mov	r3, r5
 800a350:	f7f6 f8c2 	bl	80004d8 <__aeabi_dmul>
 800a354:	a372      	add	r3, pc, #456	@ (adr r3, 800a520 <__ieee754_pow+0x738>)
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f7f5 ff07 	bl	800016c <__adddf3>
 800a35e:	4622      	mov	r2, r4
 800a360:	462b      	mov	r3, r5
 800a362:	f7f6 f8b9 	bl	80004d8 <__aeabi_dmul>
 800a366:	a370      	add	r3, pc, #448	@ (adr r3, 800a528 <__ieee754_pow+0x740>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f7f5 fefe 	bl	800016c <__adddf3>
 800a370:	4622      	mov	r2, r4
 800a372:	4606      	mov	r6, r0
 800a374:	460f      	mov	r7, r1
 800a376:	462b      	mov	r3, r5
 800a378:	4620      	mov	r0, r4
 800a37a:	4629      	mov	r1, r5
 800a37c:	f7f6 f8ac 	bl	80004d8 <__aeabi_dmul>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4630      	mov	r0, r6
 800a386:	4639      	mov	r1, r7
 800a388:	f7f6 f8a6 	bl	80004d8 <__aeabi_dmul>
 800a38c:	4604      	mov	r4, r0
 800a38e:	460d      	mov	r5, r1
 800a390:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a394:	4642      	mov	r2, r8
 800a396:	464b      	mov	r3, r9
 800a398:	f7f5 fee8 	bl	800016c <__adddf3>
 800a39c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3a0:	f7f6 f89a 	bl	80004d8 <__aeabi_dmul>
 800a3a4:	4622      	mov	r2, r4
 800a3a6:	462b      	mov	r3, r5
 800a3a8:	f7f5 fee0 	bl	800016c <__adddf3>
 800a3ac:	4642      	mov	r2, r8
 800a3ae:	4682      	mov	sl, r0
 800a3b0:	468b      	mov	fp, r1
 800a3b2:	464b      	mov	r3, r9
 800a3b4:	4640      	mov	r0, r8
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	f7f6 f88e 	bl	80004d8 <__aeabi_dmul>
 800a3bc:	2200      	movs	r2, #0
 800a3be:	4b68      	ldr	r3, [pc, #416]	@ (800a560 <__ieee754_pow+0x778>)
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	460f      	mov	r7, r1
 800a3c4:	f7f5 fed2 	bl	800016c <__adddf3>
 800a3c8:	4652      	mov	r2, sl
 800a3ca:	465b      	mov	r3, fp
 800a3cc:	f7f5 fece 	bl	800016c <__adddf3>
 800a3d0:	2400      	movs	r4, #0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	4622      	mov	r2, r4
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4640      	mov	r0, r8
 800a3da:	4649      	mov	r1, r9
 800a3dc:	f7f6 f87c 	bl	80004d8 <__aeabi_dmul>
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	4680      	mov	r8, r0
 800a3e4:	4689      	mov	r9, r1
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4b5d      	ldr	r3, [pc, #372]	@ (800a560 <__ieee754_pow+0x778>)
 800a3ec:	f7f5 febc 	bl	8000168 <__aeabi_dsub>
 800a3f0:	4632      	mov	r2, r6
 800a3f2:	463b      	mov	r3, r7
 800a3f4:	f7f5 feb8 	bl	8000168 <__aeabi_dsub>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	4650      	mov	r0, sl
 800a3fe:	4659      	mov	r1, fp
 800a400:	f7f5 feb2 	bl	8000168 <__aeabi_dsub>
 800a404:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a408:	f7f6 f866 	bl	80004d8 <__aeabi_dmul>
 800a40c:	4622      	mov	r2, r4
 800a40e:	4606      	mov	r6, r0
 800a410:	460f      	mov	r7, r1
 800a412:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a416:	462b      	mov	r3, r5
 800a418:	f7f6 f85e 	bl	80004d8 <__aeabi_dmul>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4630      	mov	r0, r6
 800a422:	4639      	mov	r1, r7
 800a424:	f7f5 fea2 	bl	800016c <__adddf3>
 800a428:	2400      	movs	r4, #0
 800a42a:	4606      	mov	r6, r0
 800a42c:	460f      	mov	r7, r1
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	4640      	mov	r0, r8
 800a434:	4649      	mov	r1, r9
 800a436:	f7f5 fe99 	bl	800016c <__adddf3>
 800a43a:	a33d      	add	r3, pc, #244	@ (adr r3, 800a530 <__ieee754_pow+0x748>)
 800a43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a440:	4620      	mov	r0, r4
 800a442:	460d      	mov	r5, r1
 800a444:	f7f6 f848 	bl	80004d8 <__aeabi_dmul>
 800a448:	4642      	mov	r2, r8
 800a44a:	464b      	mov	r3, r9
 800a44c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a450:	4620      	mov	r0, r4
 800a452:	4629      	mov	r1, r5
 800a454:	f7f5 fe88 	bl	8000168 <__aeabi_dsub>
 800a458:	4602      	mov	r2, r0
 800a45a:	460b      	mov	r3, r1
 800a45c:	4630      	mov	r0, r6
 800a45e:	4639      	mov	r1, r7
 800a460:	f7f5 fe82 	bl	8000168 <__aeabi_dsub>
 800a464:	a334      	add	r3, pc, #208	@ (adr r3, 800a538 <__ieee754_pow+0x750>)
 800a466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46a:	f7f6 f835 	bl	80004d8 <__aeabi_dmul>
 800a46e:	a334      	add	r3, pc, #208	@ (adr r3, 800a540 <__ieee754_pow+0x758>)
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	4606      	mov	r6, r0
 800a476:	460f      	mov	r7, r1
 800a478:	4620      	mov	r0, r4
 800a47a:	4629      	mov	r1, r5
 800a47c:	f7f6 f82c 	bl	80004d8 <__aeabi_dmul>
 800a480:	4602      	mov	r2, r0
 800a482:	460b      	mov	r3, r1
 800a484:	4630      	mov	r0, r6
 800a486:	4639      	mov	r1, r7
 800a488:	f7f5 fe70 	bl	800016c <__adddf3>
 800a48c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a48e:	4b35      	ldr	r3, [pc, #212]	@ (800a564 <__ieee754_pow+0x77c>)
 800a490:	2400      	movs	r4, #0
 800a492:	4413      	add	r3, r2
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	f7f5 fe68 	bl	800016c <__adddf3>
 800a49c:	4682      	mov	sl, r0
 800a49e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a4a0:	468b      	mov	fp, r1
 800a4a2:	f7f5 ffaf 	bl	8000404 <__aeabi_i2d>
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	460f      	mov	r7, r1
 800a4aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a4ac:	4b2e      	ldr	r3, [pc, #184]	@ (800a568 <__ieee754_pow+0x780>)
 800a4ae:	4413      	add	r3, r2
 800a4b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4b4:	4652      	mov	r2, sl
 800a4b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4ba:	465b      	mov	r3, fp
 800a4bc:	f7f5 fe56 	bl	800016c <__adddf3>
 800a4c0:	4642      	mov	r2, r8
 800a4c2:	464b      	mov	r3, r9
 800a4c4:	f7f5 fe52 	bl	800016c <__adddf3>
 800a4c8:	4632      	mov	r2, r6
 800a4ca:	463b      	mov	r3, r7
 800a4cc:	f7f5 fe4e 	bl	800016c <__adddf3>
 800a4d0:	4632      	mov	r2, r6
 800a4d2:	463b      	mov	r3, r7
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	460d      	mov	r5, r1
 800a4d8:	f7f5 fe46 	bl	8000168 <__aeabi_dsub>
 800a4dc:	4642      	mov	r2, r8
 800a4de:	464b      	mov	r3, r9
 800a4e0:	f7f5 fe42 	bl	8000168 <__aeabi_dsub>
 800a4e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4e8:	f7f5 fe3e 	bl	8000168 <__aeabi_dsub>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4650      	mov	r0, sl
 800a4f2:	4659      	mov	r1, fp
 800a4f4:	e61c      	b.n	800a130 <__ieee754_pow+0x348>
 800a4f6:	2400      	movs	r4, #0
 800a4f8:	e68a      	b.n	800a210 <__ieee754_pow+0x428>
 800a4fa:	2601      	movs	r6, #1
 800a4fc:	e6a0      	b.n	800a240 <__ieee754_pow+0x458>
 800a4fe:	bf00      	nop
 800a500:	4a454eef 	.word	0x4a454eef
 800a504:	3fca7e28 	.word	0x3fca7e28
 800a508:	93c9db65 	.word	0x93c9db65
 800a50c:	3fcd864a 	.word	0x3fcd864a
 800a510:	a91d4101 	.word	0xa91d4101
 800a514:	3fd17460 	.word	0x3fd17460
 800a518:	518f264d 	.word	0x518f264d
 800a51c:	3fd55555 	.word	0x3fd55555
 800a520:	db6fabff 	.word	0xdb6fabff
 800a524:	3fdb6db6 	.word	0x3fdb6db6
 800a528:	33333303 	.word	0x33333303
 800a52c:	3fe33333 	.word	0x3fe33333
 800a530:	e0000000 	.word	0xe0000000
 800a534:	3feec709 	.word	0x3feec709
 800a538:	dc3a03fd 	.word	0xdc3a03fd
 800a53c:	3feec709 	.word	0x3feec709
 800a540:	145b01f5 	.word	0x145b01f5
 800a544:	be3e2fe0 	.word	0xbe3e2fe0
 800a548:	7ff00000 	.word	0x7ff00000
 800a54c:	43400000 	.word	0x43400000
 800a550:	0003988e 	.word	0x0003988e
 800a554:	000bb679 	.word	0x000bb679
 800a558:	0800af10 	.word	0x0800af10
 800a55c:	3ff00000 	.word	0x3ff00000
 800a560:	40080000 	.word	0x40080000
 800a564:	0800aef0 	.word	0x0800aef0
 800a568:	0800af00 	.word	0x0800af00
 800a56c:	a39a      	add	r3, pc, #616	@ (adr r3, 800a7d8 <__ieee754_pow+0x9f0>)
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	4630      	mov	r0, r6
 800a574:	4639      	mov	r1, r7
 800a576:	f7f5 fdf9 	bl	800016c <__adddf3>
 800a57a:	4642      	mov	r2, r8
 800a57c:	e9cd 0100 	strd	r0, r1, [sp]
 800a580:	464b      	mov	r3, r9
 800a582:	4620      	mov	r0, r4
 800a584:	4629      	mov	r1, r5
 800a586:	f7f5 fdef 	bl	8000168 <__aeabi_dsub>
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a592:	f7f6 fa31 	bl	80009f8 <__aeabi_dcmpgt>
 800a596:	2800      	cmp	r0, #0
 800a598:	f47f ae0c 	bne.w	800a1b4 <__ieee754_pow+0x3cc>
 800a59c:	4ba0      	ldr	r3, [pc, #640]	@ (800a820 <__ieee754_pow+0xa38>)
 800a59e:	e022      	b.n	800a5e6 <__ieee754_pow+0x7fe>
 800a5a0:	4ca0      	ldr	r4, [pc, #640]	@ (800a824 <__ieee754_pow+0xa3c>)
 800a5a2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a5a6:	42a3      	cmp	r3, r4
 800a5a8:	d919      	bls.n	800a5de <__ieee754_pow+0x7f6>
 800a5aa:	4b9f      	ldr	r3, [pc, #636]	@ (800a828 <__ieee754_pow+0xa40>)
 800a5ac:	440b      	add	r3, r1
 800a5ae:	4303      	orrs	r3, r0
 800a5b0:	d009      	beq.n	800a5c6 <__ieee754_pow+0x7de>
 800a5b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f7f6 f9ff 	bl	80009bc <__aeabi_dcmplt>
 800a5be:	3800      	subs	r0, #0
 800a5c0:	bf18      	it	ne
 800a5c2:	2001      	movne	r0, #1
 800a5c4:	e527      	b.n	800a016 <__ieee754_pow+0x22e>
 800a5c6:	4642      	mov	r2, r8
 800a5c8:	464b      	mov	r3, r9
 800a5ca:	f7f5 fdcd 	bl	8000168 <__aeabi_dsub>
 800a5ce:	4632      	mov	r2, r6
 800a5d0:	463b      	mov	r3, r7
 800a5d2:	f7f6 fa07 	bl	80009e4 <__aeabi_dcmpge>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d1eb      	bne.n	800a5b2 <__ieee754_pow+0x7ca>
 800a5da:	4b94      	ldr	r3, [pc, #592]	@ (800a82c <__ieee754_pow+0xa44>)
 800a5dc:	e003      	b.n	800a5e6 <__ieee754_pow+0x7fe>
 800a5de:	4a94      	ldr	r2, [pc, #592]	@ (800a830 <__ieee754_pow+0xa48>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	f240 80e1 	bls.w	800a7a8 <__ieee754_pow+0x9c0>
 800a5e6:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a5ea:	151b      	asrs	r3, r3, #20
 800a5ec:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a5f0:	fa4a fa03 	asr.w	sl, sl, r3
 800a5f4:	44da      	add	sl, fp
 800a5f6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a5fa:	488e      	ldr	r0, [pc, #568]	@ (800a834 <__ieee754_pow+0xa4c>)
 800a5fc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a600:	4108      	asrs	r0, r1
 800a602:	ea00 030a 	and.w	r3, r0, sl
 800a606:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a60a:	f1c1 0114 	rsb	r1, r1, #20
 800a60e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a612:	4640      	mov	r0, r8
 800a614:	fa4a fa01 	asr.w	sl, sl, r1
 800a618:	f1bb 0f00 	cmp.w	fp, #0
 800a61c:	4649      	mov	r1, r9
 800a61e:	f04f 0200 	mov.w	r2, #0
 800a622:	bfb8      	it	lt
 800a624:	f1ca 0a00 	rsblt	sl, sl, #0
 800a628:	f7f5 fd9e 	bl	8000168 <__aeabi_dsub>
 800a62c:	4680      	mov	r8, r0
 800a62e:	4689      	mov	r9, r1
 800a630:	2400      	movs	r4, #0
 800a632:	4632      	mov	r2, r6
 800a634:	463b      	mov	r3, r7
 800a636:	4640      	mov	r0, r8
 800a638:	4649      	mov	r1, r9
 800a63a:	f7f5 fd97 	bl	800016c <__adddf3>
 800a63e:	a368      	add	r3, pc, #416	@ (adr r3, 800a7e0 <__ieee754_pow+0x9f8>)
 800a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a644:	4620      	mov	r0, r4
 800a646:	460d      	mov	r5, r1
 800a648:	f7f5 ff46 	bl	80004d8 <__aeabi_dmul>
 800a64c:	4642      	mov	r2, r8
 800a64e:	464b      	mov	r3, r9
 800a650:	e9cd 0100 	strd	r0, r1, [sp]
 800a654:	4620      	mov	r0, r4
 800a656:	4629      	mov	r1, r5
 800a658:	f7f5 fd86 	bl	8000168 <__aeabi_dsub>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	4630      	mov	r0, r6
 800a662:	4639      	mov	r1, r7
 800a664:	f7f5 fd80 	bl	8000168 <__aeabi_dsub>
 800a668:	a35f      	add	r3, pc, #380	@ (adr r3, 800a7e8 <__ieee754_pow+0xa00>)
 800a66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66e:	f7f5 ff33 	bl	80004d8 <__aeabi_dmul>
 800a672:	a35f      	add	r3, pc, #380	@ (adr r3, 800a7f0 <__ieee754_pow+0xa08>)
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	4680      	mov	r8, r0
 800a67a:	4689      	mov	r9, r1
 800a67c:	4620      	mov	r0, r4
 800a67e:	4629      	mov	r1, r5
 800a680:	f7f5 ff2a 	bl	80004d8 <__aeabi_dmul>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4640      	mov	r0, r8
 800a68a:	4649      	mov	r1, r9
 800a68c:	f7f5 fd6e 	bl	800016c <__adddf3>
 800a690:	4604      	mov	r4, r0
 800a692:	460d      	mov	r5, r1
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a69c:	f7f5 fd66 	bl	800016c <__adddf3>
 800a6a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6a4:	4680      	mov	r8, r0
 800a6a6:	4689      	mov	r9, r1
 800a6a8:	f7f5 fd5e 	bl	8000168 <__aeabi_dsub>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	f7f5 fd58 	bl	8000168 <__aeabi_dsub>
 800a6b8:	4642      	mov	r2, r8
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	460f      	mov	r7, r1
 800a6be:	464b      	mov	r3, r9
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	f7f5 ff08 	bl	80004d8 <__aeabi_dmul>
 800a6c8:	a34b      	add	r3, pc, #300	@ (adr r3, 800a7f8 <__ieee754_pow+0xa10>)
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	460d      	mov	r5, r1
 800a6d2:	f7f5 ff01 	bl	80004d8 <__aeabi_dmul>
 800a6d6:	a34a      	add	r3, pc, #296	@ (adr r3, 800a800 <__ieee754_pow+0xa18>)
 800a6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6dc:	f7f5 fd44 	bl	8000168 <__aeabi_dsub>
 800a6e0:	4622      	mov	r2, r4
 800a6e2:	462b      	mov	r3, r5
 800a6e4:	f7f5 fef8 	bl	80004d8 <__aeabi_dmul>
 800a6e8:	a347      	add	r3, pc, #284	@ (adr r3, 800a808 <__ieee754_pow+0xa20>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f7f5 fd3d 	bl	800016c <__adddf3>
 800a6f2:	4622      	mov	r2, r4
 800a6f4:	462b      	mov	r3, r5
 800a6f6:	f7f5 feef 	bl	80004d8 <__aeabi_dmul>
 800a6fa:	a345      	add	r3, pc, #276	@ (adr r3, 800a810 <__ieee754_pow+0xa28>)
 800a6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a700:	f7f5 fd32 	bl	8000168 <__aeabi_dsub>
 800a704:	4622      	mov	r2, r4
 800a706:	462b      	mov	r3, r5
 800a708:	f7f5 fee6 	bl	80004d8 <__aeabi_dmul>
 800a70c:	a342      	add	r3, pc, #264	@ (adr r3, 800a818 <__ieee754_pow+0xa30>)
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	f7f5 fd2b 	bl	800016c <__adddf3>
 800a716:	4622      	mov	r2, r4
 800a718:	462b      	mov	r3, r5
 800a71a:	f7f5 fedd 	bl	80004d8 <__aeabi_dmul>
 800a71e:	4602      	mov	r2, r0
 800a720:	460b      	mov	r3, r1
 800a722:	4640      	mov	r0, r8
 800a724:	4649      	mov	r1, r9
 800a726:	f7f5 fd1f 	bl	8000168 <__aeabi_dsub>
 800a72a:	4604      	mov	r4, r0
 800a72c:	460d      	mov	r5, r1
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	4640      	mov	r0, r8
 800a734:	4649      	mov	r1, r9
 800a736:	f7f5 fecf 	bl	80004d8 <__aeabi_dmul>
 800a73a:	2200      	movs	r2, #0
 800a73c:	e9cd 0100 	strd	r0, r1, [sp]
 800a740:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a744:	4620      	mov	r0, r4
 800a746:	4629      	mov	r1, r5
 800a748:	f7f5 fd0e 	bl	8000168 <__aeabi_dsub>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a754:	f7f5 ffea 	bl	800072c <__aeabi_ddiv>
 800a758:	4632      	mov	r2, r6
 800a75a:	4604      	mov	r4, r0
 800a75c:	460d      	mov	r5, r1
 800a75e:	463b      	mov	r3, r7
 800a760:	4640      	mov	r0, r8
 800a762:	4649      	mov	r1, r9
 800a764:	f7f5 feb8 	bl	80004d8 <__aeabi_dmul>
 800a768:	4632      	mov	r2, r6
 800a76a:	463b      	mov	r3, r7
 800a76c:	f7f5 fcfe 	bl	800016c <__adddf3>
 800a770:	4602      	mov	r2, r0
 800a772:	460b      	mov	r3, r1
 800a774:	4620      	mov	r0, r4
 800a776:	4629      	mov	r1, r5
 800a778:	f7f5 fcf6 	bl	8000168 <__aeabi_dsub>
 800a77c:	4642      	mov	r2, r8
 800a77e:	464b      	mov	r3, r9
 800a780:	f7f5 fcf2 	bl	8000168 <__aeabi_dsub>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	2000      	movs	r0, #0
 800a78a:	492b      	ldr	r1, [pc, #172]	@ (800a838 <__ieee754_pow+0xa50>)
 800a78c:	f7f5 fcec 	bl	8000168 <__aeabi_dsub>
 800a790:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a794:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800a798:	da09      	bge.n	800a7ae <__ieee754_pow+0x9c6>
 800a79a:	4652      	mov	r2, sl
 800a79c:	f000 f854 	bl	800a848 <scalbn>
 800a7a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7a4:	f7ff bb89 	b.w	8009eba <__ieee754_pow+0xd2>
 800a7a8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a7ac:	e740      	b.n	800a630 <__ieee754_pow+0x848>
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	e7f6      	b.n	800a7a0 <__ieee754_pow+0x9b8>
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	4920      	ldr	r1, [pc, #128]	@ (800a838 <__ieee754_pow+0xa50>)
 800a7b6:	f7ff bb35 	b.w	8009e24 <__ieee754_pow+0x3c>
 800a7ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7be:	f7ff bb31 	b.w	8009e24 <__ieee754_pow+0x3c>
 800a7c2:	4650      	mov	r0, sl
 800a7c4:	4659      	mov	r1, fp
 800a7c6:	f7ff bb2d 	b.w	8009e24 <__ieee754_pow+0x3c>
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	f7ff bb87 	b.w	8009ede <__ieee754_pow+0xf6>
 800a7d0:	2400      	movs	r4, #0
 800a7d2:	f7ff bb69 	b.w	8009ea8 <__ieee754_pow+0xc0>
 800a7d6:	bf00      	nop
 800a7d8:	652b82fe 	.word	0x652b82fe
 800a7dc:	3c971547 	.word	0x3c971547
 800a7e0:	00000000 	.word	0x00000000
 800a7e4:	3fe62e43 	.word	0x3fe62e43
 800a7e8:	fefa39ef 	.word	0xfefa39ef
 800a7ec:	3fe62e42 	.word	0x3fe62e42
 800a7f0:	0ca86c39 	.word	0x0ca86c39
 800a7f4:	be205c61 	.word	0xbe205c61
 800a7f8:	72bea4d0 	.word	0x72bea4d0
 800a7fc:	3e663769 	.word	0x3e663769
 800a800:	c5d26bf1 	.word	0xc5d26bf1
 800a804:	3ebbbd41 	.word	0x3ebbbd41
 800a808:	af25de2c 	.word	0xaf25de2c
 800a80c:	3f11566a 	.word	0x3f11566a
 800a810:	16bebd93 	.word	0x16bebd93
 800a814:	3f66c16c 	.word	0x3f66c16c
 800a818:	5555553e 	.word	0x5555553e
 800a81c:	3fc55555 	.word	0x3fc55555
 800a820:	40900000 	.word	0x40900000
 800a824:	4090cbff 	.word	0x4090cbff
 800a828:	3f6f3400 	.word	0x3f6f3400
 800a82c:	4090cc00 	.word	0x4090cc00
 800a830:	3fe00000 	.word	0x3fe00000
 800a834:	fff00000 	.word	0xfff00000
 800a838:	3ff00000 	.word	0x3ff00000

0800a83c <fabs>:
 800a83c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a840:	4619      	mov	r1, r3
 800a842:	4770      	bx	lr
 800a844:	0000      	movs	r0, r0
	...

0800a848 <scalbn>:
 800a848:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a84c:	4616      	mov	r6, r2
 800a84e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a852:	4683      	mov	fp, r0
 800a854:	468c      	mov	ip, r1
 800a856:	460b      	mov	r3, r1
 800a858:	b982      	cbnz	r2, 800a87c <scalbn+0x34>
 800a85a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a85e:	4303      	orrs	r3, r0
 800a860:	d035      	beq.n	800a8ce <scalbn+0x86>
 800a862:	4b2d      	ldr	r3, [pc, #180]	@ (800a918 <scalbn+0xd0>)
 800a864:	2200      	movs	r2, #0
 800a866:	f7f5 fe37 	bl	80004d8 <__aeabi_dmul>
 800a86a:	4b2c      	ldr	r3, [pc, #176]	@ (800a91c <scalbn+0xd4>)
 800a86c:	4683      	mov	fp, r0
 800a86e:	429e      	cmp	r6, r3
 800a870:	468c      	mov	ip, r1
 800a872:	da0d      	bge.n	800a890 <scalbn+0x48>
 800a874:	a324      	add	r3, pc, #144	@ (adr r3, 800a908 <scalbn+0xc0>)
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	e019      	b.n	800a8b0 <scalbn+0x68>
 800a87c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a880:	42ba      	cmp	r2, r7
 800a882:	d109      	bne.n	800a898 <scalbn+0x50>
 800a884:	4602      	mov	r2, r0
 800a886:	f7f5 fc71 	bl	800016c <__adddf3>
 800a88a:	4683      	mov	fp, r0
 800a88c:	468c      	mov	ip, r1
 800a88e:	e01e      	b.n	800a8ce <scalbn+0x86>
 800a890:	460b      	mov	r3, r1
 800a892:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a896:	3a36      	subs	r2, #54	@ 0x36
 800a898:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a89c:	428e      	cmp	r6, r1
 800a89e:	dd0a      	ble.n	800a8b6 <scalbn+0x6e>
 800a8a0:	a31b      	add	r3, pc, #108	@ (adr r3, 800a910 <scalbn+0xc8>)
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	4665      	mov	r5, ip
 800a8a8:	f363 051e 	bfi	r5, r3, #0, #31
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	481c      	ldr	r0, [pc, #112]	@ (800a920 <scalbn+0xd8>)
 800a8b0:	f7f5 fe12 	bl	80004d8 <__aeabi_dmul>
 800a8b4:	e7e9      	b.n	800a88a <scalbn+0x42>
 800a8b6:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a8ba:	4432      	add	r2, r6
 800a8bc:	428a      	cmp	r2, r1
 800a8be:	dcef      	bgt.n	800a8a0 <scalbn+0x58>
 800a8c0:	2a00      	cmp	r2, #0
 800a8c2:	dd08      	ble.n	800a8d6 <scalbn+0x8e>
 800a8c4:	f36f 531e 	bfc	r3, #20, #11
 800a8c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a8cc:	46ac      	mov	ip, r5
 800a8ce:	4658      	mov	r0, fp
 800a8d0:	4661      	mov	r1, ip
 800a8d2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a8d6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a8da:	da09      	bge.n	800a8f0 <scalbn+0xa8>
 800a8dc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a8e0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a8e4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a8e8:	480e      	ldr	r0, [pc, #56]	@ (800a924 <scalbn+0xdc>)
 800a8ea:	f041 011f 	orr.w	r1, r1, #31
 800a8ee:	e7c1      	b.n	800a874 <scalbn+0x2c>
 800a8f0:	3236      	adds	r2, #54	@ 0x36
 800a8f2:	f36f 531e 	bfc	r3, #20, #11
 800a8f6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a8fa:	4658      	mov	r0, fp
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	2200      	movs	r2, #0
 800a900:	4b09      	ldr	r3, [pc, #36]	@ (800a928 <scalbn+0xe0>)
 800a902:	e7d5      	b.n	800a8b0 <scalbn+0x68>
 800a904:	f3af 8000 	nop.w
 800a908:	c2f8f359 	.word	0xc2f8f359
 800a90c:	01a56e1f 	.word	0x01a56e1f
 800a910:	8800759c 	.word	0x8800759c
 800a914:	7e37e43c 	.word	0x7e37e43c
 800a918:	43500000 	.word	0x43500000
 800a91c:	ffff3cb0 	.word	0xffff3cb0
 800a920:	8800759c 	.word	0x8800759c
 800a924:	c2f8f359 	.word	0xc2f8f359
 800a928:	3c900000 	.word	0x3c900000

0800a92c <with_errno>:
 800a92c:	b570      	push	{r4, r5, r6, lr}
 800a92e:	4604      	mov	r4, r0
 800a930:	460d      	mov	r5, r1
 800a932:	4616      	mov	r6, r2
 800a934:	f7fd f966 	bl	8007c04 <__errno>
 800a938:	4629      	mov	r1, r5
 800a93a:	6006      	str	r6, [r0, #0]
 800a93c:	4620      	mov	r0, r4
 800a93e:	bd70      	pop	{r4, r5, r6, pc}

0800a940 <xflow>:
 800a940:	b513      	push	{r0, r1, r4, lr}
 800a942:	4604      	mov	r4, r0
 800a944:	4619      	mov	r1, r3
 800a946:	4610      	mov	r0, r2
 800a948:	b10c      	cbz	r4, 800a94e <xflow+0xe>
 800a94a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a94e:	e9cd 2300 	strd	r2, r3, [sp]
 800a952:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a956:	f7f5 fdbf 	bl	80004d8 <__aeabi_dmul>
 800a95a:	2222      	movs	r2, #34	@ 0x22
 800a95c:	b002      	add	sp, #8
 800a95e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a962:	f7ff bfe3 	b.w	800a92c <with_errno>

0800a966 <__math_uflow>:
 800a966:	2200      	movs	r2, #0
 800a968:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a96c:	f7ff bfe8 	b.w	800a940 <xflow>

0800a970 <__math_oflow>:
 800a970:	2200      	movs	r2, #0
 800a972:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800a976:	f7ff bfe3 	b.w	800a940 <xflow>
	...

0800a97c <__ieee754_sqrt>:
 800a97c:	4a65      	ldr	r2, [pc, #404]	@ (800ab14 <__ieee754_sqrt+0x198>)
 800a97e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a982:	438a      	bics	r2, r1
 800a984:	4606      	mov	r6, r0
 800a986:	460f      	mov	r7, r1
 800a988:	460b      	mov	r3, r1
 800a98a:	4604      	mov	r4, r0
 800a98c:	d10e      	bne.n	800a9ac <__ieee754_sqrt+0x30>
 800a98e:	4602      	mov	r2, r0
 800a990:	f7f5 fda2 	bl	80004d8 <__aeabi_dmul>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	4630      	mov	r0, r6
 800a99a:	4639      	mov	r1, r7
 800a99c:	f7f5 fbe6 	bl	800016c <__adddf3>
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	460f      	mov	r7, r1
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ac:	2900      	cmp	r1, #0
 800a9ae:	dc0c      	bgt.n	800a9ca <__ieee754_sqrt+0x4e>
 800a9b0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800a9b4:	4302      	orrs	r2, r0
 800a9b6:	d0f5      	beq.n	800a9a4 <__ieee754_sqrt+0x28>
 800a9b8:	b189      	cbz	r1, 800a9de <__ieee754_sqrt+0x62>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	f7f5 fbd4 	bl	8000168 <__aeabi_dsub>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	f7f5 feb2 	bl	800072c <__aeabi_ddiv>
 800a9c8:	e7ea      	b.n	800a9a0 <__ieee754_sqrt+0x24>
 800a9ca:	150a      	asrs	r2, r1, #20
 800a9cc:	d115      	bne.n	800a9fa <__ieee754_sqrt+0x7e>
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	e009      	b.n	800a9e6 <__ieee754_sqrt+0x6a>
 800a9d2:	0ae3      	lsrs	r3, r4, #11
 800a9d4:	3a15      	subs	r2, #21
 800a9d6:	0564      	lsls	r4, r4, #21
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d0fa      	beq.n	800a9d2 <__ieee754_sqrt+0x56>
 800a9dc:	e7f7      	b.n	800a9ce <__ieee754_sqrt+0x52>
 800a9de:	460a      	mov	r2, r1
 800a9e0:	e7fa      	b.n	800a9d8 <__ieee754_sqrt+0x5c>
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	3101      	adds	r1, #1
 800a9e6:	02d8      	lsls	r0, r3, #11
 800a9e8:	d5fb      	bpl.n	800a9e2 <__ieee754_sqrt+0x66>
 800a9ea:	1e48      	subs	r0, r1, #1
 800a9ec:	1a12      	subs	r2, r2, r0
 800a9ee:	f1c1 0020 	rsb	r0, r1, #32
 800a9f2:	fa24 f000 	lsr.w	r0, r4, r0
 800a9f6:	4303      	orrs	r3, r0
 800a9f8:	408c      	lsls	r4, r1
 800a9fa:	2700      	movs	r7, #0
 800a9fc:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800aa00:	2116      	movs	r1, #22
 800aa02:	07d2      	lsls	r2, r2, #31
 800aa04:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800aa08:	463a      	mov	r2, r7
 800aa0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa12:	bf5c      	itt	pl
 800aa14:	005b      	lslpl	r3, r3, #1
 800aa16:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800aa1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa1e:	bf58      	it	pl
 800aa20:	0064      	lslpl	r4, r4, #1
 800aa22:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800aa26:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa2a:	0064      	lsls	r4, r4, #1
 800aa2c:	1815      	adds	r5, r2, r0
 800aa2e:	429d      	cmp	r5, r3
 800aa30:	bfde      	ittt	le
 800aa32:	182a      	addle	r2, r5, r0
 800aa34:	1b5b      	suble	r3, r3, r5
 800aa36:	183f      	addle	r7, r7, r0
 800aa38:	0fe5      	lsrs	r5, r4, #31
 800aa3a:	3901      	subs	r1, #1
 800aa3c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800aa40:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800aa44:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800aa48:	d1f0      	bne.n	800aa2c <__ieee754_sqrt+0xb0>
 800aa4a:	460d      	mov	r5, r1
 800aa4c:	2620      	movs	r6, #32
 800aa4e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800aa52:	4293      	cmp	r3, r2
 800aa54:	eb00 0c01 	add.w	ip, r0, r1
 800aa58:	dc02      	bgt.n	800aa60 <__ieee754_sqrt+0xe4>
 800aa5a:	d113      	bne.n	800aa84 <__ieee754_sqrt+0x108>
 800aa5c:	45a4      	cmp	ip, r4
 800aa5e:	d811      	bhi.n	800aa84 <__ieee754_sqrt+0x108>
 800aa60:	f1bc 0f00 	cmp.w	ip, #0
 800aa64:	eb0c 0100 	add.w	r1, ip, r0
 800aa68:	da3e      	bge.n	800aae8 <__ieee754_sqrt+0x16c>
 800aa6a:	2900      	cmp	r1, #0
 800aa6c:	db3c      	blt.n	800aae8 <__ieee754_sqrt+0x16c>
 800aa6e:	f102 0e01 	add.w	lr, r2, #1
 800aa72:	1a9b      	subs	r3, r3, r2
 800aa74:	4672      	mov	r2, lr
 800aa76:	45a4      	cmp	ip, r4
 800aa78:	bf88      	it	hi
 800aa7a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800aa7e:	eba4 040c 	sub.w	r4, r4, ip
 800aa82:	4405      	add	r5, r0
 800aa84:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800aa88:	3e01      	subs	r6, #1
 800aa8a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800aa8e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800aa92:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800aa96:	d1dc      	bne.n	800aa52 <__ieee754_sqrt+0xd6>
 800aa98:	431c      	orrs	r4, r3
 800aa9a:	d01a      	beq.n	800aad2 <__ieee754_sqrt+0x156>
 800aa9c:	4c1e      	ldr	r4, [pc, #120]	@ (800ab18 <__ieee754_sqrt+0x19c>)
 800aa9e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800ab1c <__ieee754_sqrt+0x1a0>
 800aaa2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aaa6:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aaaa:	f7f5 fb5d 	bl	8000168 <__aeabi_dsub>
 800aaae:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	4650      	mov	r0, sl
 800aab8:	4659      	mov	r1, fp
 800aaba:	f7f5 ff89 	bl	80009d0 <__aeabi_dcmple>
 800aabe:	b140      	cbz	r0, 800aad2 <__ieee754_sqrt+0x156>
 800aac0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aac4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aac8:	f1b5 3fff 	cmp.w	r5, #4294967295
 800aacc:	d10e      	bne.n	800aaec <__ieee754_sqrt+0x170>
 800aace:	4635      	mov	r5, r6
 800aad0:	3701      	adds	r7, #1
 800aad2:	107b      	asrs	r3, r7, #1
 800aad4:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800aad8:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800aadc:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800aae0:	086b      	lsrs	r3, r5, #1
 800aae2:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800aae6:	e75b      	b.n	800a9a0 <__ieee754_sqrt+0x24>
 800aae8:	4696      	mov	lr, r2
 800aaea:	e7c2      	b.n	800aa72 <__ieee754_sqrt+0xf6>
 800aaec:	f7f5 fb3e 	bl	800016c <__adddf3>
 800aaf0:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4650      	mov	r0, sl
 800aafa:	4659      	mov	r1, fp
 800aafc:	f7f5 ff5e 	bl	80009bc <__aeabi_dcmplt>
 800ab00:	b120      	cbz	r0, 800ab0c <__ieee754_sqrt+0x190>
 800ab02:	1cab      	adds	r3, r5, #2
 800ab04:	bf08      	it	eq
 800ab06:	3701      	addeq	r7, #1
 800ab08:	3502      	adds	r5, #2
 800ab0a:	e7e2      	b.n	800aad2 <__ieee754_sqrt+0x156>
 800ab0c:	1c6b      	adds	r3, r5, #1
 800ab0e:	f023 0501 	bic.w	r5, r3, #1
 800ab12:	e7de      	b.n	800aad2 <__ieee754_sqrt+0x156>
 800ab14:	7ff00000 	.word	0x7ff00000
 800ab18:	0800af28 	.word	0x0800af28
 800ab1c:	0800af20 	.word	0x0800af20

0800ab20 <_init>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	bf00      	nop
 800ab24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab26:	bc08      	pop	{r3}
 800ab28:	469e      	mov	lr, r3
 800ab2a:	4770      	bx	lr

0800ab2c <_fini>:
 800ab2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2e:	bf00      	nop
 800ab30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab32:	bc08      	pop	{r3}
 800ab34:	469e      	mov	lr, r3
 800ab36:	4770      	bx	lr
