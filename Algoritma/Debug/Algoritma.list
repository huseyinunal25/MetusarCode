
Algoritma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abc8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800acd8  0800acd8  0000bcd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0f0  0800b0f0  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b0f0  0800b0f0  0000c0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0f8  0800b0f8  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0f8  0800b0f8  0000c0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0fc  0800b0fc  0000c0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b100  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001d4  0800b2d4  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  0800b2d4  0000d47c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc6c  00000000  00000000  0000d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204a  00000000  00000000  00019e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0001beb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099d  00000000  00000000  0001cb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187ed  00000000  00000000  0001d4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f36f  00000000  00000000  00035c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c70  00000000  00000000  00045001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdc71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c8  00000000  00000000  000cdcb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d257c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800acc0 	.word	0x0800acc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800acc0 	.word	0x0800acc0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_ldivmod>:
 80010d0:	b97b      	cbnz	r3, 80010f2 <__aeabi_ldivmod+0x22>
 80010d2:	b972      	cbnz	r2, 80010f2 <__aeabi_ldivmod+0x22>
 80010d4:	2900      	cmp	r1, #0
 80010d6:	bfbe      	ittt	lt
 80010d8:	2000      	movlt	r0, #0
 80010da:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80010de:	e006      	blt.n	80010ee <__aeabi_ldivmod+0x1e>
 80010e0:	bf08      	it	eq
 80010e2:	2800      	cmpeq	r0, #0
 80010e4:	bf1c      	itt	ne
 80010e6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80010ea:	f04f 30ff 	movne.w	r0, #4294967295
 80010ee:	f000 b9bf 	b.w	8001470 <__aeabi_idiv0>
 80010f2:	f1ad 0c08 	sub.w	ip, sp, #8
 80010f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010fa:	2900      	cmp	r1, #0
 80010fc:	db09      	blt.n	8001112 <__aeabi_ldivmod+0x42>
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db1a      	blt.n	8001138 <__aeabi_ldivmod+0x68>
 8001102:	f000 f835 	bl	8001170 <__udivmoddi4>
 8001106:	f8dd e004 	ldr.w	lr, [sp, #4]
 800110a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800110e:	b004      	add	sp, #16
 8001110:	4770      	bx	lr
 8001112:	4240      	negs	r0, r0
 8001114:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	db1b      	blt.n	8001154 <__aeabi_ldivmod+0x84>
 800111c:	f000 f828 	bl	8001170 <__udivmoddi4>
 8001120:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001128:	b004      	add	sp, #16
 800112a:	4240      	negs	r0, r0
 800112c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001130:	4252      	negs	r2, r2
 8001132:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001136:	4770      	bx	lr
 8001138:	4252      	negs	r2, r2
 800113a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800113e:	f000 f817 	bl	8001170 <__udivmoddi4>
 8001142:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800114a:	b004      	add	sp, #16
 800114c:	4240      	negs	r0, r0
 800114e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001152:	4770      	bx	lr
 8001154:	4252      	negs	r2, r2
 8001156:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800115a:	f000 f809 	bl	8001170 <__udivmoddi4>
 800115e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001162:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001166:	b004      	add	sp, #16
 8001168:	4252      	negs	r2, r2
 800116a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800116e:	4770      	bx	lr

08001170 <__udivmoddi4>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	9d08      	ldr	r5, [sp, #32]
 8001176:	468e      	mov	lr, r1
 8001178:	4604      	mov	r4, r0
 800117a:	4688      	mov	r8, r1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d14a      	bne.n	8001216 <__udivmoddi4+0xa6>
 8001180:	428a      	cmp	r2, r1
 8001182:	4617      	mov	r7, r2
 8001184:	d962      	bls.n	800124c <__udivmoddi4+0xdc>
 8001186:	fab2 f682 	clz	r6, r2
 800118a:	b14e      	cbz	r6, 80011a0 <__udivmoddi4+0x30>
 800118c:	f1c6 0320 	rsb	r3, r6, #32
 8001190:	fa01 f806 	lsl.w	r8, r1, r6
 8001194:	fa20 f303 	lsr.w	r3, r0, r3
 8001198:	40b7      	lsls	r7, r6
 800119a:	ea43 0808 	orr.w	r8, r3, r8
 800119e:	40b4      	lsls	r4, r6
 80011a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011a4:	fbb8 f1fe 	udiv	r1, r8, lr
 80011a8:	fa1f fc87 	uxth.w	ip, r7
 80011ac:	fb0e 8811 	mls	r8, lr, r1, r8
 80011b0:	fb01 f20c 	mul.w	r2, r1, ip
 80011b4:	0c23      	lsrs	r3, r4, #16
 80011b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d909      	bls.n	80011d2 <__udivmoddi4+0x62>
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80011c4:	f080 80eb 	bcs.w	800139e <__udivmoddi4+0x22e>
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f240 80e8 	bls.w	800139e <__udivmoddi4+0x22e>
 80011ce:	3902      	subs	r1, #2
 80011d0:	443b      	add	r3, r7
 80011d2:	1a9a      	subs	r2, r3, r2
 80011d4:	fbb2 f0fe 	udiv	r0, r2, lr
 80011d8:	fb0e 2210 	mls	r2, lr, r0, r2
 80011dc:	fb00 fc0c 	mul.w	ip, r0, ip
 80011e0:	b2a3      	uxth	r3, r4
 80011e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011e6:	459c      	cmp	ip, r3
 80011e8:	d909      	bls.n	80011fe <__udivmoddi4+0x8e>
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80011f0:	f080 80d7 	bcs.w	80013a2 <__udivmoddi4+0x232>
 80011f4:	459c      	cmp	ip, r3
 80011f6:	f240 80d4 	bls.w	80013a2 <__udivmoddi4+0x232>
 80011fa:	443b      	add	r3, r7
 80011fc:	3802      	subs	r0, #2
 80011fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001202:	2100      	movs	r1, #0
 8001204:	eba3 030c 	sub.w	r3, r3, ip
 8001208:	b11d      	cbz	r5, 8001212 <__udivmoddi4+0xa2>
 800120a:	2200      	movs	r2, #0
 800120c:	40f3      	lsrs	r3, r6
 800120e:	e9c5 3200 	strd	r3, r2, [r5]
 8001212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001216:	428b      	cmp	r3, r1
 8001218:	d905      	bls.n	8001226 <__udivmoddi4+0xb6>
 800121a:	b10d      	cbz	r5, 8001220 <__udivmoddi4+0xb0>
 800121c:	e9c5 0100 	strd	r0, r1, [r5]
 8001220:	2100      	movs	r1, #0
 8001222:	4608      	mov	r0, r1
 8001224:	e7f5      	b.n	8001212 <__udivmoddi4+0xa2>
 8001226:	fab3 f183 	clz	r1, r3
 800122a:	2900      	cmp	r1, #0
 800122c:	d146      	bne.n	80012bc <__udivmoddi4+0x14c>
 800122e:	4573      	cmp	r3, lr
 8001230:	d302      	bcc.n	8001238 <__udivmoddi4+0xc8>
 8001232:	4282      	cmp	r2, r0
 8001234:	f200 8108 	bhi.w	8001448 <__udivmoddi4+0x2d8>
 8001238:	1a84      	subs	r4, r0, r2
 800123a:	eb6e 0203 	sbc.w	r2, lr, r3
 800123e:	2001      	movs	r0, #1
 8001240:	4690      	mov	r8, r2
 8001242:	2d00      	cmp	r5, #0
 8001244:	d0e5      	beq.n	8001212 <__udivmoddi4+0xa2>
 8001246:	e9c5 4800 	strd	r4, r8, [r5]
 800124a:	e7e2      	b.n	8001212 <__udivmoddi4+0xa2>
 800124c:	2a00      	cmp	r2, #0
 800124e:	f000 8091 	beq.w	8001374 <__udivmoddi4+0x204>
 8001252:	fab2 f682 	clz	r6, r2
 8001256:	2e00      	cmp	r6, #0
 8001258:	f040 80a5 	bne.w	80013a6 <__udivmoddi4+0x236>
 800125c:	1a8a      	subs	r2, r1, r2
 800125e:	2101      	movs	r1, #1
 8001260:	0c03      	lsrs	r3, r0, #16
 8001262:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001266:	b280      	uxth	r0, r0
 8001268:	b2bc      	uxth	r4, r7
 800126a:	fbb2 fcfe 	udiv	ip, r2, lr
 800126e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001276:	fb04 f20c 	mul.w	r2, r4, ip
 800127a:	429a      	cmp	r2, r3
 800127c:	d907      	bls.n	800128e <__udivmoddi4+0x11e>
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001284:	d202      	bcs.n	800128c <__udivmoddi4+0x11c>
 8001286:	429a      	cmp	r2, r3
 8001288:	f200 80e3 	bhi.w	8001452 <__udivmoddi4+0x2e2>
 800128c:	46c4      	mov	ip, r8
 800128e:	1a9b      	subs	r3, r3, r2
 8001290:	fbb3 f2fe 	udiv	r2, r3, lr
 8001294:	fb0e 3312 	mls	r3, lr, r2, r3
 8001298:	fb02 f404 	mul.w	r4, r2, r4
 800129c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80012a0:	429c      	cmp	r4, r3
 80012a2:	d907      	bls.n	80012b4 <__udivmoddi4+0x144>
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80012aa:	d202      	bcs.n	80012b2 <__udivmoddi4+0x142>
 80012ac:	429c      	cmp	r4, r3
 80012ae:	f200 80cd 	bhi.w	800144c <__udivmoddi4+0x2dc>
 80012b2:	4602      	mov	r2, r0
 80012b4:	1b1b      	subs	r3, r3, r4
 80012b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80012ba:	e7a5      	b.n	8001208 <__udivmoddi4+0x98>
 80012bc:	f1c1 0620 	rsb	r6, r1, #32
 80012c0:	408b      	lsls	r3, r1
 80012c2:	fa22 f706 	lsr.w	r7, r2, r6
 80012c6:	431f      	orrs	r7, r3
 80012c8:	fa2e fa06 	lsr.w	sl, lr, r6
 80012cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80012d0:	fbba f8f9 	udiv	r8, sl, r9
 80012d4:	fa0e fe01 	lsl.w	lr, lr, r1
 80012d8:	fa20 f306 	lsr.w	r3, r0, r6
 80012dc:	fb09 aa18 	mls	sl, r9, r8, sl
 80012e0:	fa1f fc87 	uxth.w	ip, r7
 80012e4:	ea43 030e 	orr.w	r3, r3, lr
 80012e8:	fa00 fe01 	lsl.w	lr, r0, r1
 80012ec:	fb08 f00c 	mul.w	r0, r8, ip
 80012f0:	0c1c      	lsrs	r4, r3, #16
 80012f2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012f6:	42a0      	cmp	r0, r4
 80012f8:	fa02 f201 	lsl.w	r2, r2, r1
 80012fc:	d90a      	bls.n	8001314 <__udivmoddi4+0x1a4>
 80012fe:	193c      	adds	r4, r7, r4
 8001300:	f108 3aff 	add.w	sl, r8, #4294967295
 8001304:	f080 809e 	bcs.w	8001444 <__udivmoddi4+0x2d4>
 8001308:	42a0      	cmp	r0, r4
 800130a:	f240 809b 	bls.w	8001444 <__udivmoddi4+0x2d4>
 800130e:	f1a8 0802 	sub.w	r8, r8, #2
 8001312:	443c      	add	r4, r7
 8001314:	1a24      	subs	r4, r4, r0
 8001316:	b298      	uxth	r0, r3
 8001318:	fbb4 f3f9 	udiv	r3, r4, r9
 800131c:	fb09 4413 	mls	r4, r9, r3, r4
 8001320:	fb03 fc0c 	mul.w	ip, r3, ip
 8001324:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001328:	45a4      	cmp	ip, r4
 800132a:	d909      	bls.n	8001340 <__udivmoddi4+0x1d0>
 800132c:	193c      	adds	r4, r7, r4
 800132e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001332:	f080 8085 	bcs.w	8001440 <__udivmoddi4+0x2d0>
 8001336:	45a4      	cmp	ip, r4
 8001338:	f240 8082 	bls.w	8001440 <__udivmoddi4+0x2d0>
 800133c:	3b02      	subs	r3, #2
 800133e:	443c      	add	r4, r7
 8001340:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001344:	eba4 040c 	sub.w	r4, r4, ip
 8001348:	fba0 8c02 	umull	r8, ip, r0, r2
 800134c:	4564      	cmp	r4, ip
 800134e:	4643      	mov	r3, r8
 8001350:	46e1      	mov	r9, ip
 8001352:	d364      	bcc.n	800141e <__udivmoddi4+0x2ae>
 8001354:	d061      	beq.n	800141a <__udivmoddi4+0x2aa>
 8001356:	b15d      	cbz	r5, 8001370 <__udivmoddi4+0x200>
 8001358:	ebbe 0203 	subs.w	r2, lr, r3
 800135c:	eb64 0409 	sbc.w	r4, r4, r9
 8001360:	fa04 f606 	lsl.w	r6, r4, r6
 8001364:	fa22 f301 	lsr.w	r3, r2, r1
 8001368:	431e      	orrs	r6, r3
 800136a:	40cc      	lsrs	r4, r1
 800136c:	e9c5 6400 	strd	r6, r4, [r5]
 8001370:	2100      	movs	r1, #0
 8001372:	e74e      	b.n	8001212 <__udivmoddi4+0xa2>
 8001374:	fbb1 fcf2 	udiv	ip, r1, r2
 8001378:	0c01      	lsrs	r1, r0, #16
 800137a:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800137e:	b280      	uxth	r0, r0
 8001380:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001384:	463b      	mov	r3, r7
 8001386:	fbb1 f1f7 	udiv	r1, r1, r7
 800138a:	4638      	mov	r0, r7
 800138c:	463c      	mov	r4, r7
 800138e:	46b8      	mov	r8, r7
 8001390:	46be      	mov	lr, r7
 8001392:	2620      	movs	r6, #32
 8001394:	eba2 0208 	sub.w	r2, r2, r8
 8001398:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800139c:	e765      	b.n	800126a <__udivmoddi4+0xfa>
 800139e:	4601      	mov	r1, r0
 80013a0:	e717      	b.n	80011d2 <__udivmoddi4+0x62>
 80013a2:	4610      	mov	r0, r2
 80013a4:	e72b      	b.n	80011fe <__udivmoddi4+0x8e>
 80013a6:	f1c6 0120 	rsb	r1, r6, #32
 80013aa:	fa2e fc01 	lsr.w	ip, lr, r1
 80013ae:	40b7      	lsls	r7, r6
 80013b0:	fa0e fe06 	lsl.w	lr, lr, r6
 80013b4:	fa20 f101 	lsr.w	r1, r0, r1
 80013b8:	ea41 010e 	orr.w	r1, r1, lr
 80013bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013c0:	fbbc f8fe 	udiv	r8, ip, lr
 80013c4:	b2bc      	uxth	r4, r7
 80013c6:	fb0e cc18 	mls	ip, lr, r8, ip
 80013ca:	fb08 f904 	mul.w	r9, r8, r4
 80013ce:	0c0a      	lsrs	r2, r1, #16
 80013d0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80013d4:	40b0      	lsls	r0, r6
 80013d6:	4591      	cmp	r9, r2
 80013d8:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80013dc:	b280      	uxth	r0, r0
 80013de:	d93e      	bls.n	800145e <__udivmoddi4+0x2ee>
 80013e0:	18ba      	adds	r2, r7, r2
 80013e2:	f108 3cff 	add.w	ip, r8, #4294967295
 80013e6:	d201      	bcs.n	80013ec <__udivmoddi4+0x27c>
 80013e8:	4591      	cmp	r9, r2
 80013ea:	d81f      	bhi.n	800142c <__udivmoddi4+0x2bc>
 80013ec:	eba2 0209 	sub.w	r2, r2, r9
 80013f0:	fbb2 f9fe 	udiv	r9, r2, lr
 80013f4:	fb09 f804 	mul.w	r8, r9, r4
 80013f8:	fb0e 2a19 	mls	sl, lr, r9, r2
 80013fc:	b28a      	uxth	r2, r1
 80013fe:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001402:	4542      	cmp	r2, r8
 8001404:	d229      	bcs.n	800145a <__udivmoddi4+0x2ea>
 8001406:	18ba      	adds	r2, r7, r2
 8001408:	f109 31ff 	add.w	r1, r9, #4294967295
 800140c:	d2c2      	bcs.n	8001394 <__udivmoddi4+0x224>
 800140e:	4542      	cmp	r2, r8
 8001410:	d2c0      	bcs.n	8001394 <__udivmoddi4+0x224>
 8001412:	f1a9 0102 	sub.w	r1, r9, #2
 8001416:	443a      	add	r2, r7
 8001418:	e7bc      	b.n	8001394 <__udivmoddi4+0x224>
 800141a:	45c6      	cmp	lr, r8
 800141c:	d29b      	bcs.n	8001356 <__udivmoddi4+0x1e6>
 800141e:	ebb8 0302 	subs.w	r3, r8, r2
 8001422:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001426:	3801      	subs	r0, #1
 8001428:	46e1      	mov	r9, ip
 800142a:	e794      	b.n	8001356 <__udivmoddi4+0x1e6>
 800142c:	eba7 0909 	sub.w	r9, r7, r9
 8001430:	444a      	add	r2, r9
 8001432:	fbb2 f9fe 	udiv	r9, r2, lr
 8001436:	f1a8 0c02 	sub.w	ip, r8, #2
 800143a:	fb09 f804 	mul.w	r8, r9, r4
 800143e:	e7db      	b.n	80013f8 <__udivmoddi4+0x288>
 8001440:	4603      	mov	r3, r0
 8001442:	e77d      	b.n	8001340 <__udivmoddi4+0x1d0>
 8001444:	46d0      	mov	r8, sl
 8001446:	e765      	b.n	8001314 <__udivmoddi4+0x1a4>
 8001448:	4608      	mov	r0, r1
 800144a:	e6fa      	b.n	8001242 <__udivmoddi4+0xd2>
 800144c:	443b      	add	r3, r7
 800144e:	3a02      	subs	r2, #2
 8001450:	e730      	b.n	80012b4 <__udivmoddi4+0x144>
 8001452:	f1ac 0c02 	sub.w	ip, ip, #2
 8001456:	443b      	add	r3, r7
 8001458:	e719      	b.n	800128e <__udivmoddi4+0x11e>
 800145a:	4649      	mov	r1, r9
 800145c:	e79a      	b.n	8001394 <__udivmoddi4+0x224>
 800145e:	eba2 0209 	sub.w	r2, r2, r9
 8001462:	fbb2 f9fe 	udiv	r9, r2, lr
 8001466:	46c4      	mov	ip, r8
 8001468:	fb09 f804 	mul.w	r8, r9, r4
 800146c:	e7c4      	b.n	80013f8 <__udivmoddi4+0x288>
 800146e:	bf00      	nop

08001470 <__aeabi_idiv0>:
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop

08001474 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	@ 0x30
 8001478:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	2319      	movs	r3, #25
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	463b      	mov	r3, r7
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2301      	movs	r3, #1
 800148a:	2288      	movs	r2, #136	@ 0x88
 800148c:	21ec      	movs	r1, #236	@ 0xec
 800148e:	485f      	ldr	r0, [pc, #380]	@ (800160c <TrimRead+0x198>)
 8001490:	f001 ffd0 	bl	8003434 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8001494:	463b      	mov	r3, r7
 8001496:	3319      	adds	r3, #25
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	9202      	str	r2, [sp, #8]
 800149e:	2207      	movs	r2, #7
 80014a0:	9201      	str	r2, [sp, #4]
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2301      	movs	r3, #1
 80014a6:	22e1      	movs	r2, #225	@ 0xe1
 80014a8:	21ec      	movs	r1, #236	@ 0xec
 80014aa:	4858      	ldr	r0, [pc, #352]	@ (800160c <TrimRead+0x198>)
 80014ac:	f001 ffc2 	bl	8003434 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	783b      	ldrb	r3, [r7, #0]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21b      	sxth	r3, r3
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b53      	ldr	r3, [pc, #332]	@ (8001610 <TrimRead+0x19c>)
 80014c4:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	78bb      	ldrb	r3, [r7, #2]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001614 <TrimRead+0x1a0>)
 80014d8:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80014da:	797b      	ldrb	r3, [r7, #5]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	793b      	ldrb	r3, [r7, #4]
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001618 <TrimRead+0x1a4>)
 80014ec:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	797b      	ldrb	r3, [r7, #5]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	b29a      	uxth	r2, r3
 8001500:	4b46      	ldr	r3, [pc, #280]	@ (800161c <TrimRead+0x1a8>)
 8001502:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001504:	7a7b      	ldrb	r3, [r7, #9]
 8001506:	b21b      	sxth	r3, r3
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	b21a      	sxth	r2, r3
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	b21b      	sxth	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b21a      	sxth	r2, r3
 8001514:	4b42      	ldr	r3, [pc, #264]	@ (8001620 <TrimRead+0x1ac>)
 8001516:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001518:	7afb      	ldrb	r3, [r7, #11]
 800151a:	b21b      	sxth	r3, r3
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	7abb      	ldrb	r3, [r7, #10]
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	b21a      	sxth	r2, r3
 8001528:	4b3e      	ldr	r3, [pc, #248]	@ (8001624 <TrimRead+0x1b0>)
 800152a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800152c:	7b7b      	ldrb	r3, [r7, #13]
 800152e:	b21b      	sxth	r3, r3
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	b21a      	sxth	r2, r3
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b21a      	sxth	r2, r3
 800153c:	4b3a      	ldr	r3, [pc, #232]	@ (8001628 <TrimRead+0x1b4>)
 800153e:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	b21b      	sxth	r3, r3
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	b21a      	sxth	r2, r3
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	b21b      	sxth	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b21a      	sxth	r2, r3
 8001550:	4b36      	ldr	r3, [pc, #216]	@ (800162c <TrimRead+0x1b8>)
 8001552:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001554:	7c7b      	ldrb	r3, [r7, #17]
 8001556:	b21b      	sxth	r3, r3
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b21a      	sxth	r2, r3
 800155c:	7c3b      	ldrb	r3, [r7, #16]
 800155e:	b21b      	sxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b21a      	sxth	r2, r3
 8001564:	4b32      	ldr	r3, [pc, #200]	@ (8001630 <TrimRead+0x1bc>)
 8001566:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001568:	7cfb      	ldrb	r3, [r7, #19]
 800156a:	b21b      	sxth	r3, r3
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	7cbb      	ldrb	r3, [r7, #18]
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b21a      	sxth	r2, r3
 8001578:	4b2e      	ldr	r3, [pc, #184]	@ (8001634 <TrimRead+0x1c0>)
 800157a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 800157c:	7d7b      	ldrb	r3, [r7, #21]
 800157e:	b21b      	sxth	r3, r3
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	7d3b      	ldrb	r3, [r7, #20]
 8001586:	b21b      	sxth	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <TrimRead+0x1c4>)
 800158e:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001590:	7dfb      	ldrb	r3, [r7, #23]
 8001592:	b21b      	sxth	r3, r3
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	7dbb      	ldrb	r3, [r7, #22]
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b21a      	sxth	r2, r3
 80015a0:	4b26      	ldr	r3, [pc, #152]	@ (800163c <TrimRead+0x1c8>)
 80015a2:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80015a4:	7e3b      	ldrb	r3, [r7, #24]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <TrimRead+0x1cc>)
 80015aa:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80015ac:	7ebb      	ldrb	r3, [r7, #26]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	7e7b      	ldrb	r3, [r7, #25]
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <TrimRead+0x1d0>)
 80015be:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80015c0:	7efb      	ldrb	r3, [r7, #27]
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <TrimRead+0x1d4>)
 80015c6:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80015c8:	7f3b      	ldrb	r3, [r7, #28]
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	7f7b      	ldrb	r3, [r7, #29]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	b21a      	sxth	r2, r3
 80015de:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <TrimRead+0x1d8>)
 80015e0:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80015e2:	7fbb      	ldrb	r3, [r7, #30]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	7f7b      	ldrb	r3, [r7, #29]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <TrimRead+0x1dc>)
 80015f8:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 80015fa:	7ffb      	ldrb	r3, [r7, #31]
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <TrimRead+0x1e0>)
 8001600:	801a      	strh	r2, [r3, #0]
}
 8001602:	bf00      	nop
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000224 	.word	0x20000224
 8001610:	200001fc 	.word	0x200001fc
 8001614:	20000204 	.word	0x20000204
 8001618:	20000206 	.word	0x20000206
 800161c:	200001fe 	.word	0x200001fe
 8001620:	20000208 	.word	0x20000208
 8001624:	2000020a 	.word	0x2000020a
 8001628:	2000020c 	.word	0x2000020c
 800162c:	2000020e 	.word	0x2000020e
 8001630:	20000210 	.word	0x20000210
 8001634:	20000212 	.word	0x20000212
 8001638:	20000214 	.word	0x20000214
 800163c:	20000216 	.word	0x20000216
 8001640:	20000200 	.word	0x20000200
 8001644:	20000218 	.word	0x20000218
 8001648:	20000202 	.word	0x20000202
 800164c:	2000021a 	.word	0x2000021a
 8001650:	2000021c 	.word	0x2000021c
 8001654:	2000021e 	.word	0x2000021e

08001658 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b089      	sub	sp, #36	@ 0x24
 800165c:	af04      	add	r7, sp, #16
 800165e:	4604      	mov	r4, r0
 8001660:	4608      	mov	r0, r1
 8001662:	4611      	mov	r1, r2
 8001664:	461a      	mov	r2, r3
 8001666:	4623      	mov	r3, r4
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	4603      	mov	r3, r0
 800166c:	71bb      	strb	r3, [r7, #6]
 800166e:	460b      	mov	r3, r1
 8001670:	717b      	strb	r3, [r7, #5]
 8001672:	4613      	mov	r3, r2
 8001674:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8001676:	f7ff fefd 	bl	8001474 <TrimRead>


	uint8_t datatowrite = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001682:	23b6      	movs	r3, #182	@ 0xb6
 8001684:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	2301      	movs	r3, #1
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	f107 030f 	add.w	r3, r7, #15
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2301      	movs	r3, #1
 8001698:	22e0      	movs	r2, #224	@ 0xe0
 800169a:	21ec      	movs	r1, #236	@ 0xec
 800169c:	4842      	ldr	r0, [pc, #264]	@ (80017a8 <BME280_Config+0x150>)
 800169e:	f001 fdcf 	bl	8003240 <HAL_I2C_Mem_Write>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <BME280_Config+0x56>
	{
		return -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ac:	e077      	b.n	800179e <BME280_Config+0x146>
	}

	HAL_Delay (100);
 80016ae:	2064      	movs	r0, #100	@ 0x64
 80016b0:	f001 f91a 	bl	80028e8 <HAL_Delay>
	// write the humidity oversampling to 0xF2



	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80016b4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80016b8:	015b      	lsls	r3, r3, #5
 80016ba:	b25a      	sxtb	r2, r3
 80016bc:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80016cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d0:	9302      	str	r3, [sp, #8]
 80016d2:	2301      	movs	r3, #1
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	f107 030f 	add.w	r3, r7, #15
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2301      	movs	r3, #1
 80016de:	22f5      	movs	r2, #245	@ 0xf5
 80016e0:	21ec      	movs	r1, #236	@ 0xec
 80016e2:	4831      	ldr	r0, [pc, #196]	@ (80017a8 <BME280_Config+0x150>)
 80016e4:	f001 fdac 	bl	8003240 <HAL_I2C_Mem_Write>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <BME280_Config+0x9c>
	{
		return -1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	e054      	b.n	800179e <BME280_Config+0x146>
	}
	HAL_Delay (100);
 80016f4:	2064      	movs	r0, #100	@ 0x64
 80016f6:	f001 f8f7 	bl	80028e8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80016fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	2301      	movs	r3, #1
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	f107 030e 	add.w	r3, r7, #14
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2301      	movs	r3, #1
 800170c:	22f5      	movs	r2, #245	@ 0xf5
 800170e:	21ec      	movs	r1, #236	@ 0xec
 8001710:	4825      	ldr	r0, [pc, #148]	@ (80017a8 <BME280_Config+0x150>)
 8001712:	f001 fe8f 	bl	8003434 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001716:	7bba      	ldrb	r2, [r7, #14]
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	429a      	cmp	r2, r3
 800171c:	d002      	beq.n	8001724 <BME280_Config+0xcc>
	{
		return -1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e03c      	b.n	800179e <BME280_Config+0x146>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	015b      	lsls	r3, r3, #5
 800172a:	b25a      	sxtb	r2, r3
 800172c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	b25b      	sxtb	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b25a      	sxtb	r2, r3
 8001738:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800173c:	4313      	orrs	r3, r2
 800173e:	b25b      	sxtb	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	2301      	movs	r3, #1
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	f107 030f 	add.w	r3, r7, #15
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2301      	movs	r3, #1
 8001756:	22f4      	movs	r2, #244	@ 0xf4
 8001758:	21ec      	movs	r1, #236	@ 0xec
 800175a:	4813      	ldr	r0, [pc, #76]	@ (80017a8 <BME280_Config+0x150>)
 800175c:	f001 fd70 	bl	8003240 <HAL_I2C_Mem_Write>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <BME280_Config+0x114>
	{
		return -1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e018      	b.n	800179e <BME280_Config+0x146>
	}
	HAL_Delay (100);
 800176c:	2064      	movs	r0, #100	@ 0x64
 800176e:	f001 f8bb 	bl	80028e8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8001772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	2301      	movs	r3, #1
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	f107 030e 	add.w	r3, r7, #14
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	22f4      	movs	r2, #244	@ 0xf4
 8001786:	21ec      	movs	r1, #236	@ 0xec
 8001788:	4807      	ldr	r0, [pc, #28]	@ (80017a8 <BME280_Config+0x150>)
 800178a:	f001 fe53 	bl	8003434 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800178e:	7bba      	ldrb	r2, [r7, #14]
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	429a      	cmp	r2, r3
 8001794:	d002      	beq.n	800179c <BME280_Config+0x144>
	{
		return -1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e000      	b.n	800179e <BME280_Config+0x146>
	}

	return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd90      	pop	{r4, r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000224 	.word	0x20000224

080017ac <BMEReadRaw>:


int BMEReadRaw(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	2301      	movs	r3, #1
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <BMEReadRaw+0x80>)
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2301      	movs	r3, #1
 80017c2:	22d0      	movs	r2, #208	@ 0xd0
 80017c4:	21ec      	movs	r1, #236	@ 0xec
 80017c6:	481a      	ldr	r0, [pc, #104]	@ (8001830 <BMEReadRaw+0x84>)
 80017c8:	f001 fe34 	bl	8003434 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 80017cc:	4b17      	ldr	r3, [pc, #92]	@ (800182c <BMEReadRaw+0x80>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b60      	cmp	r3, #96	@ 0x60
 80017d2:	d124      	bne.n	800181e <BMEReadRaw+0x72>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	9302      	str	r3, [sp, #8]
 80017da:	2308      	movs	r3, #8
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	463b      	mov	r3, r7
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2301      	movs	r3, #1
 80017e4:	22f7      	movs	r2, #247	@ 0xf7
 80017e6:	21ec      	movs	r1, #236	@ 0xec
 80017e8:	4811      	ldr	r0, [pc, #68]	@ (8001830 <BMEReadRaw+0x84>)
 80017ea:	f001 fe23 	bl	8003434 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80017ee:	783b      	ldrb	r3, [r7, #0]
 80017f0:	031a      	lsls	r2, r3, #12
 80017f2:	787b      	ldrb	r3, [r7, #1]
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4313      	orrs	r3, r2
 80017f8:	78ba      	ldrb	r2, [r7, #2]
 80017fa:	0912      	lsrs	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	4313      	orrs	r3, r2
 8001800:	4a0c      	ldr	r2, [pc, #48]	@ (8001834 <BMEReadRaw+0x88>)
 8001802:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	031a      	lsls	r2, r3, #12
 8001808:	793b      	ldrb	r3, [r7, #4]
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4313      	orrs	r3, r2
 800180e:	797a      	ldrb	r2, [r7, #5]
 8001810:	0912      	lsrs	r2, r2, #4
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	4313      	orrs	r3, r2
 8001816:	4a08      	ldr	r2, [pc, #32]	@ (8001838 <BMEReadRaw+0x8c>)
 8001818:	6013      	str	r3, [r2, #0]


		return 0;
 800181a:	2300      	movs	r3, #0
 800181c:	e001      	b.n	8001822 <BMEReadRaw+0x76>
	}

	else return -1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200001f0 	.word	0x200001f0
 8001830:	20000224 	.word	0x20000224
 8001834:	200001f8 	.word	0x200001f8
 8001838:	200001f4 	.word	0x200001f4

0800183c <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	10da      	asrs	r2, r3, #3
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <BME280_compensate_T_int32+0x70>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	4a17      	ldr	r2, [pc, #92]	@ (80018b0 <BME280_compensate_T_int32+0x74>)
 8001852:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	12db      	asrs	r3, r3, #11
 800185c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	111b      	asrs	r3, r3, #4
 8001862:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <BME280_compensate_T_int32+0x70>)
 8001864:	8812      	ldrh	r2, [r2, #0]
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	1112      	asrs	r2, r2, #4
 800186c:	490f      	ldr	r1, [pc, #60]	@ (80018ac <BME280_compensate_T_int32+0x70>)
 800186e:	8809      	ldrh	r1, [r1, #0]
 8001870:	1a52      	subs	r2, r2, r1
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	131b      	asrs	r3, r3, #12
 8001878:	4a0e      	ldr	r2, [pc, #56]	@ (80018b4 <BME280_compensate_T_int32+0x78>)
 800187a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	139b      	asrs	r3, r3, #14
 8001884:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4413      	add	r3, r2
 800188c:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <BME280_compensate_T_int32+0x7c>)
 800188e:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <BME280_compensate_T_int32+0x7c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	3380      	adds	r3, #128	@ 0x80
 800189c:	121b      	asrs	r3, r3, #8
 800189e:	60fb      	str	r3, [r7, #12]
	return T;
 80018a0:	68fb      	ldr	r3, [r7, #12]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	200001fc 	.word	0x200001fc
 80018b0:	20000204 	.word	0x20000204
 80018b4:	20000206 	.word	0x20000206
 80018b8:	20000220 	.word	0x20000220

080018bc <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 80018bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c0:	b0ca      	sub	sp, #296	@ 0x128
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80018c8:	4bae      	ldr	r3, [pc, #696]	@ (8001b84 <BME280_compensate_P_int64+0x2c8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	17da      	asrs	r2, r3, #31
 80018ce:	461c      	mov	r4, r3
 80018d0:	4615      	mov	r5, r2
 80018d2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80018d6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80018da:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80018de:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80018e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80018e6:	fb03 f102 	mul.w	r1, r3, r2
 80018ea:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80018ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	18ca      	adds	r2, r1, r3
 80018f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80018fc:	fba3 8903 	umull	r8, r9, r3, r3
 8001900:	eb02 0309 	add.w	r3, r2, r9
 8001904:	4699      	mov	r9, r3
 8001906:	4ba0      	ldr	r3, [pc, #640]	@ (8001b88 <BME280_compensate_P_int64+0x2cc>)
 8001908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190c:	b21b      	sxth	r3, r3
 800190e:	17da      	asrs	r2, r3, #31
 8001910:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001914:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001918:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800191c:	4603      	mov	r3, r0
 800191e:	fb03 f209 	mul.w	r2, r3, r9
 8001922:	460b      	mov	r3, r1
 8001924:	fb08 f303 	mul.w	r3, r8, r3
 8001928:	4413      	add	r3, r2
 800192a:	4602      	mov	r2, r0
 800192c:	fba8 2102 	umull	r2, r1, r8, r2
 8001930:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001934:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001938:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800193c:	4413      	add	r3, r2
 800193e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001942:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001946:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800194a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 800194e:	4b8f      	ldr	r3, [pc, #572]	@ (8001b8c <BME280_compensate_P_int64+0x2d0>)
 8001950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001954:	b21b      	sxth	r3, r3
 8001956:	17da      	asrs	r2, r3, #31
 8001958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800195c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001960:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001964:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001968:	462a      	mov	r2, r5
 800196a:	fb02 f203 	mul.w	r2, r2, r3
 800196e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001972:	4621      	mov	r1, r4
 8001974:	fb01 f303 	mul.w	r3, r1, r3
 8001978:	441a      	add	r2, r3
 800197a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800197e:	4621      	mov	r1, r4
 8001980:	fba3 3101 	umull	r3, r1, r3, r1
 8001984:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8001988:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800198c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001990:	18d3      	adds	r3, r2, r3
 8001992:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001996:	f04f 0000 	mov.w	r0, #0
 800199a:	f04f 0100 	mov.w	r1, #0
 800199e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80019a2:	462b      	mov	r3, r5
 80019a4:	0459      	lsls	r1, r3, #17
 80019a6:	4622      	mov	r2, r4
 80019a8:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80019ac:	4623      	mov	r3, r4
 80019ae:	0458      	lsls	r0, r3, #17
 80019b0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80019b4:	1814      	adds	r4, r2, r0
 80019b6:	643c      	str	r4, [r7, #64]	@ 0x40
 80019b8:	414b      	adcs	r3, r1
 80019ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80019bc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80019c0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80019c4:	4b72      	ldr	r3, [pc, #456]	@ (8001b90 <BME280_compensate_P_int64+0x2d4>)
 80019c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	17da      	asrs	r2, r3, #31
 80019ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80019d2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80019d6:	f04f 0000 	mov.w	r0, #0
 80019da:	f04f 0100 	mov.w	r1, #0
 80019de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019e2:	00d9      	lsls	r1, r3, #3
 80019e4:	2000      	movs	r0, #0
 80019e6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80019ea:	1814      	adds	r4, r2, r0
 80019ec:	63bc      	str	r4, [r7, #56]	@ 0x38
 80019ee:	414b      	adcs	r3, r1
 80019f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019f2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80019f6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80019fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80019fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a02:	fb03 f102 	mul.w	r1, r3, r2
 8001a06:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001a0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	18ca      	adds	r2, r1, r3
 8001a14:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a18:	fba3 3103 	umull	r3, r1, r3, r3
 8001a1c:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001a20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a28:	18d3      	adds	r3, r2, r3
 8001a2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001a2e:	4b59      	ldr	r3, [pc, #356]	@ (8001b94 <BME280_compensate_P_int64+0x2d8>)
 8001a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	17da      	asrs	r2, r3, #31
 8001a38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001a3c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001a40:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8001a44:	4622      	mov	r2, r4
 8001a46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001a4a:	4641      	mov	r1, r8
 8001a4c:	fb01 f202 	mul.w	r2, r1, r2
 8001a50:	464d      	mov	r5, r9
 8001a52:	4618      	mov	r0, r3
 8001a54:	4621      	mov	r1, r4
 8001a56:	4603      	mov	r3, r0
 8001a58:	fb03 f305 	mul.w	r3, r3, r5
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4641      	mov	r1, r8
 8001a62:	fba2 2101 	umull	r2, r1, r2, r1
 8001a66:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8001a6a:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001a6e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001a72:	4413      	add	r3, r2
 8001a74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	f04f 0100 	mov.w	r1, #0
 8001a80:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001a84:	4623      	mov	r3, r4
 8001a86:	0a18      	lsrs	r0, r3, #8
 8001a88:	462a      	mov	r2, r5
 8001a8a:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001a8e:	462b      	mov	r3, r5
 8001a90:	1219      	asrs	r1, r3, #8
 8001a92:	4b41      	ldr	r3, [pc, #260]	@ (8001b98 <BME280_compensate_P_int64+0x2dc>)
 8001a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	17da      	asrs	r2, r3, #31
 8001a9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001aa0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001aa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001aa8:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001aac:	464a      	mov	r2, r9
 8001aae:	fb02 f203 	mul.w	r2, r2, r3
 8001ab2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001ab6:	4644      	mov	r4, r8
 8001ab8:	fb04 f303 	mul.w	r3, r4, r3
 8001abc:	441a      	add	r2, r3
 8001abe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ac2:	4644      	mov	r4, r8
 8001ac4:	fba3 3404 	umull	r3, r4, r3, r4
 8001ac8:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001acc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001ad0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001ad4:	18d3      	adds	r3, r2, r3
 8001ad6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001ae6:	464c      	mov	r4, r9
 8001ae8:	0323      	lsls	r3, r4, #12
 8001aea:	46c4      	mov	ip, r8
 8001aec:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001af0:	4644      	mov	r4, r8
 8001af2:	0322      	lsls	r2, r4, #12
 8001af4:	1884      	adds	r4, r0, r2
 8001af6:	633c      	str	r4, [r7, #48]	@ 0x30
 8001af8:	eb41 0303 	adc.w	r3, r1, r3
 8001afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001afe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b02:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001b06:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b0a:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b0e:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001b12:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001b16:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <BME280_compensate_P_int64+0x2e0>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b22:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b26:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001b30:	4641      	mov	r1, r8
 8001b32:	fb01 f202 	mul.w	r2, r1, r2
 8001b36:	464d      	mov	r5, r9
 8001b38:	4618      	mov	r0, r3
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	fb03 f305 	mul.w	r3, r3, r5
 8001b42:	4413      	add	r3, r2
 8001b44:	4602      	mov	r2, r0
 8001b46:	4641      	mov	r1, r8
 8001b48:	fba2 2101 	umull	r2, r1, r2, r1
 8001b4c:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001b50:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001b54:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001b58:	4413      	add	r3, r2
 8001b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	104a      	asrs	r2, r1, #1
 8001b6e:	4629      	mov	r1, r5
 8001b70:	17cb      	asrs	r3, r1, #31
 8001b72:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001b76:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	d110      	bne.n	8001ba0 <BME280_compensate_P_int64+0x2e4>
	{
		return 0; // avoid exception caused by division by zero
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e152      	b.n	8001e28 <BME280_compensate_P_int64+0x56c>
 8001b82:	bf00      	nop
 8001b84:	20000220 	.word	0x20000220
 8001b88:	20000210 	.word	0x20000210
 8001b8c:	2000020e 	.word	0x2000020e
 8001b90:	2000020c 	.word	0x2000020c
 8001b94:	2000020a 	.word	0x2000020a
 8001b98:	20000208 	.word	0x20000208
 8001b9c:	200001fe 	.word	0x200001fe
	}
	p = 1048576-adc_P;
 8001ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ba4:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001ba8:	17da      	asrs	r2, r3, #31
 8001baa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bae:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001bb2:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001bb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001bba:	105b      	asrs	r3, r3, #1
 8001bbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001bc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001bc4:	07db      	lsls	r3, r3, #31
 8001bc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001bce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	1aa4      	subs	r4, r4, r2
 8001bd6:	67bc      	str	r4, [r7, #120]	@ 0x78
 8001bd8:	eb61 0303 	sbc.w	r3, r1, r3
 8001bdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001bde:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001be2:	4622      	mov	r2, r4
 8001be4:	462b      	mov	r3, r5
 8001be6:	1891      	adds	r1, r2, r2
 8001be8:	6239      	str	r1, [r7, #32]
 8001bea:	415b      	adcs	r3, r3
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	1851      	adds	r1, r2, r1
 8001bf6:	61b9      	str	r1, [r7, #24]
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	414b      	adcs	r3, r1
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c0a:	4649      	mov	r1, r9
 8001c0c:	018b      	lsls	r3, r1, #6
 8001c0e:	4641      	mov	r1, r8
 8001c10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c14:	4641      	mov	r1, r8
 8001c16:	018a      	lsls	r2, r1, #6
 8001c18:	4641      	mov	r1, r8
 8001c1a:	1889      	adds	r1, r1, r2
 8001c1c:	6139      	str	r1, [r7, #16]
 8001c1e:	4649      	mov	r1, r9
 8001c20:	eb43 0101 	adc.w	r1, r3, r1
 8001c24:	6179      	str	r1, [r7, #20]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c32:	4649      	mov	r1, r9
 8001c34:	008b      	lsls	r3, r1, #2
 8001c36:	46c4      	mov	ip, r8
 8001c38:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c3c:	4641      	mov	r1, r8
 8001c3e:	008a      	lsls	r2, r1, #2
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	4603      	mov	r3, r0
 8001c46:	4622      	mov	r2, r4
 8001c48:	189b      	adds	r3, r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	462a      	mov	r2, r5
 8001c50:	eb42 0303 	adc.w	r3, r2, r3
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c62:	4649      	mov	r1, r9
 8001c64:	008b      	lsls	r3, r1, #2
 8001c66:	46c4      	mov	ip, r8
 8001c68:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c6c:	4641      	mov	r1, r8
 8001c6e:	008a      	lsls	r2, r1, #2
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	4603      	mov	r3, r0
 8001c76:	4622      	mov	r2, r4
 8001c78:	189b      	adds	r3, r3, r2
 8001c7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8001c7c:	462b      	mov	r3, r5
 8001c7e:	460a      	mov	r2, r1
 8001c80:	eb42 0303 	adc.w	r3, r2, r3
 8001c84:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c86:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c8a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001c8e:	f7ff fa1f 	bl	80010d0 <__aeabi_ldivmod>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001c9a:	4b66      	ldr	r3, [pc, #408]	@ (8001e34 <BME280_compensate_P_int64+0x578>)
 8001c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	17da      	asrs	r2, r3, #31
 8001ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ca6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ca8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001cac:	f04f 0000 	mov.w	r0, #0
 8001cb0:	f04f 0100 	mov.w	r1, #0
 8001cb4:	0b50      	lsrs	r0, r2, #13
 8001cb6:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cba:	1359      	asrs	r1, r3, #13
 8001cbc:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	fb00 f203 	mul.w	r2, r0, r3
 8001cc6:	4623      	mov	r3, r4
 8001cc8:	fb03 f301 	mul.w	r3, r3, r1
 8001ccc:	4413      	add	r3, r2
 8001cce:	4622      	mov	r2, r4
 8001cd0:	fba2 2100 	umull	r2, r1, r2, r0
 8001cd4:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001cd8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001cdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001ce6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001cea:	f04f 0000 	mov.w	r0, #0
 8001cee:	f04f 0100 	mov.w	r1, #0
 8001cf2:	0b50      	lsrs	r0, r2, #13
 8001cf4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cf8:	1359      	asrs	r1, r3, #13
 8001cfa:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001cfe:	462b      	mov	r3, r5
 8001d00:	fb00 f203 	mul.w	r2, r0, r3
 8001d04:	4623      	mov	r3, r4
 8001d06:	fb03 f301 	mul.w	r3, r3, r1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4622      	mov	r2, r4
 8001d0e:	fba2 2100 	umull	r2, r1, r2, r0
 8001d12:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001d16:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001d1a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001d1e:	4413      	add	r3, r2
 8001d20:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001d30:	4621      	mov	r1, r4
 8001d32:	0e4a      	lsrs	r2, r1, #25
 8001d34:	4620      	mov	r0, r4
 8001d36:	4629      	mov	r1, r5
 8001d38:	460c      	mov	r4, r1
 8001d3a:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001d3e:	164b      	asrs	r3, r1, #25
 8001d40:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001d44:	4b3c      	ldr	r3, [pc, #240]	@ (8001e38 <BME280_compensate_P_int64+0x57c>)
 8001d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	17da      	asrs	r2, r3, #31
 8001d4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d50:	667a      	str	r2, [r7, #100]	@ 0x64
 8001d52:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d56:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001d5a:	462a      	mov	r2, r5
 8001d5c:	fb02 f203 	mul.w	r2, r2, r3
 8001d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d64:	4621      	mov	r1, r4
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001d70:	4621      	mov	r1, r4
 8001d72:	fba2 2101 	umull	r2, r1, r2, r1
 8001d76:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001d7a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001d7e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001d82:	4413      	add	r3, r2
 8001d84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001d94:	4621      	mov	r1, r4
 8001d96:	0cca      	lsrs	r2, r1, #19
 8001d98:	4620      	mov	r0, r4
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	460c      	mov	r4, r1
 8001d9e:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001da2:	14cb      	asrs	r3, r1, #19
 8001da4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001da8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001dac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001db0:	1884      	adds	r4, r0, r2
 8001db2:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001db4:	eb41 0303 	adc.w	r3, r1, r3
 8001db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001dba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001dbe:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	1889      	adds	r1, r1, r2
 8001dc6:	6539      	str	r1, [r7, #80]	@ 0x50
 8001dc8:	4629      	mov	r1, r5
 8001dca:	eb43 0101 	adc.w	r1, r3, r1
 8001dce:	6579      	str	r1, [r7, #84]	@ 0x54
 8001dd0:	f04f 0000 	mov.w	r0, #0
 8001dd4:	f04f 0100 	mov.w	r1, #0
 8001dd8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001ddc:	4623      	mov	r3, r4
 8001dde:	0a18      	lsrs	r0, r3, #8
 8001de0:	462a      	mov	r2, r5
 8001de2:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001de6:	462b      	mov	r3, r5
 8001de8:	1219      	asrs	r1, r3, #8
 8001dea:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <BME280_compensate_P_int64+0x580>)
 8001dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	17da      	asrs	r2, r3, #31
 8001df4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001df6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001e04:	464c      	mov	r4, r9
 8001e06:	0123      	lsls	r3, r4, #4
 8001e08:	46c4      	mov	ip, r8
 8001e0a:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001e0e:	4644      	mov	r4, r8
 8001e10:	0122      	lsls	r2, r4, #4
 8001e12:	1884      	adds	r4, r0, r2
 8001e14:	603c      	str	r4, [r7, #0]
 8001e16:	eb41 0303 	adc.w	r3, r1, r3
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e20:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001e24:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e34:	20000216 	.word	0x20000216
 8001e38:	20000214 	.word	0x20000214
 8001e3c:	20000212 	.word	0x20000212

08001e40 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001e44:	f7ff fcb2 	bl	80017ac <BMEReadRaw>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d142      	bne.n	8001ed4 <BME280_Measure+0x94>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001e4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ee8 <BME280_Measure+0xa8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e56:	d104      	bne.n	8001e62 <BME280_Measure+0x22>
 8001e58:	4b24      	ldr	r3, [pc, #144]	@ (8001eec <BME280_Measure+0xac>)
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e016      	b.n	8001e90 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001e62:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <BME280_Measure+0xa8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fce8 	bl	800183c <BME280_compensate_T_int32>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fac8 	bl	8000404 <__aeabi_i2d>
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <BME280_Measure+0xb0>)
 8001e7a:	f7fe fc57 	bl	800072c <__aeabi_ddiv>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fdff 	bl	8000a88 <__aeabi_d2f>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a17      	ldr	r2, [pc, #92]	@ (8001eec <BME280_Measure+0xac>)
 8001e8e:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001e90:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <BME280_Measure+0xb4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e98:	d104      	bne.n	8001ea4 <BME280_Measure+0x64>
 8001e9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <BME280_Measure+0xb8>)
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = 0;
	}
}
 8001ea2:	e01f      	b.n	8001ee4 <BME280_Measure+0xa4>
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001ea4:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <BME280_Measure+0xb4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fd07 	bl	80018bc <BME280_compensate_P_int64>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fa97 	bl	80003e4 <__aeabi_ui2d>
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <BME280_Measure+0xbc>)
 8001ebc:	f7fe fc36 	bl	800072c <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f7fe fdde 	bl	8000a88 <__aeabi_d2f>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <BME280_Measure+0xb8>)
 8001ed0:	6013      	str	r3, [r2, #0]
}
 8001ed2:	e007      	b.n	8001ee4 <BME280_Measure+0xa4>
		Temperature = Pressure = 0;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <BME280_Measure+0xb8>)
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <BME280_Measure+0xb8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a02      	ldr	r2, [pc, #8]	@ (8001eec <BME280_Measure+0xac>)
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200001f4 	.word	0x200001f4
 8001eec:	20000318 	.word	0x20000318
 8001ef0:	40590000 	.word	0x40590000
 8001ef4:	200001f8 	.word	0x200001f8
 8001ef8:	2000031c 	.word	0x2000031c
 8001efc:	40700000 	.word	0x40700000

08001f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f04:	b0aa      	sub	sp, #168	@ 0xa8
 8001f06:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f08:	f000 fc8c 	bl	8002824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f0c:	f000 f90a 	bl	8002124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f10:	f000 f9d2 	bl	80022b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f14:	f000 f942 	bl	800219c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001f18:	f000 f96e 	bl	80021f8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001f1c:	f000 f9a2 	bl	8002264 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_2, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001f20:	2304      	movs	r3, #4
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	2300      	movs	r3, #0
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2303      	movs	r3, #3
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7ff fb92 	bl	8001658 <BME280_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		BME280_Measure();
 8001f34:	f7ff ff84 	bl	8001e40 <BME280_Measure>
		altitude = 44330 * (1- pow((Pressure/101325), (1/5.225)));
 8001f38:	4b6f      	ldr	r3, [pc, #444]	@ (80020f8 <main+0x1f8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	496f      	ldr	r1, [pc, #444]	@ (80020fc <main+0x1fc>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe ffb4 	bl	8000eac <__aeabi_fdiv>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fa6e 	bl	8000428 <__aeabi_f2d>
 8001f4c:	a366      	add	r3, pc, #408	@ (adr r3, 80020e8 <main+0x1e8>)
 8001f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f52:	f007 ffa9 	bl	8009ea8 <pow>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	f04f 0000 	mov.w	r0, #0
 8001f5e:	4968      	ldr	r1, [pc, #416]	@ (8002100 <main+0x200>)
 8001f60:	f7fe f902 	bl	8000168 <__aeabi_dsub>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	a360      	add	r3, pc, #384	@ (adr r3, 80020f0 <main+0x1f0>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe fab1 	bl	80004d8 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7fe fd83 	bl	8000a88 <__aeabi_d2f>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a5f      	ldr	r2, [pc, #380]	@ (8002104 <main+0x204>)
 8001f86:	6013      	str	r3, [r2, #0]
		HAL_Delay (500);
 8001f88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f8c:	f000 fcac 	bl	80028e8 <HAL_Delay>

		static float previous_altitude = 0;  // İlk başta 0, bir kez ayarlanacak

		mpu9250_veri(59, imu_data, sizeof(imu_data));
 8001f90:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001f94:	220e      	movs	r2, #14
 8001f96:	4619      	mov	r1, r3
 8001f98:	203b      	movs	r0, #59	@ 0x3b
 8001f9a:	f000 f9cb 	bl	8002334 <mpu9250_veri>
		accel_data_x = ((int16_t)imu_data[0]<<8) + imu_data[1]; //shift 8 bits ve bir sonraki byte'ı ekle
 8001f9e:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 8001faa:	4413      	add	r3, r2
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		accel_data_y = ((int16_t)imu_data[2]<<8) + imu_data[3]; // y axis
 8001fb2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8001fbe:	4413      	add	r3, r2
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
		accel_data_z = ((int16_t)imu_data[4]<<8) + imu_data[5]; // z axis
 8001fc6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f897 2079 	ldrb.w	r2, [r7, #121]	@ 0x79
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

		mpu9250_veri(67, imu_data_2, sizeof(imu_data_2));
 8001fda:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fde:	220e      	movs	r2, #14
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	2043      	movs	r0, #67	@ 0x43
 8001fe4:	f000 f9a6 	bl	8002334 <mpu9250_veri>
		gyro_data_x = ((int16_t)imu_data_2[0]<<8) + imu_data_2[1]; //shift 8 bits ve bir sonraki byte'ı ekle
 8001fe8:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8001ff4:	4413      	add	r3, r2
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
		gyro_data_y = ((int16_t)imu_data_2[2]<<8) + imu_data_2[3]; // y axis
 8001ffc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	b29b      	uxth	r3, r3
 8002004:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8002008:	4413      	add	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		gyro_data_z = ((int16_t)imu_data_2[4]<<8) + imu_data_2[5]; // z axis
 8002010:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	b29b      	uxth	r3, r3
 8002018:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 800201c:	4413      	add	r3, r2
 800201e:	b29b      	uxth	r3, r3
 8002020:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84



			if (((accel_data_x > 11500 || accel_data_x < -11500) ||
 8002024:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 8002028:	f642 42ec 	movw	r2, #11500	@ 0x2cec
 800202c:	4293      	cmp	r3, r2
 800202e:	dc0f      	bgt.n	8002050 <main+0x150>
 8002030:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 8002034:	4a34      	ldr	r2, [pc, #208]	@ (8002108 <main+0x208>)
 8002036:	4293      	cmp	r3, r2
 8002038:	db0a      	blt.n	8002050 <main+0x150>
 800203a:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 800203e:	f642 42ec 	movw	r2, #11500	@ 0x2cec
 8002042:	4293      	cmp	r3, r2
 8002044:	dc04      	bgt.n	8002050 <main+0x150>
				 (accel_data_y > 11500 || accel_data_y < -11500)) &&
 8002046:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 800204a:	4a2f      	ldr	r2, [pc, #188]	@ (8002108 <main+0x208>)
 800204c:	4293      	cmp	r3, r2
 800204e:	da15      	bge.n	800207c <main+0x17c>
				((previous_altitude - altitude) > 3.0f)) {
 8002050:	4b2e      	ldr	r3, [pc, #184]	@ (800210c <main+0x20c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a2b      	ldr	r2, [pc, #172]	@ (8002104 <main+0x204>)
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fd68 	bl	8000b30 <__aeabi_fsub>
 8002060:	4603      	mov	r3, r0
				 (accel_data_y > 11500 || accel_data_y < -11500)) &&
 8002062:	492b      	ldr	r1, [pc, #172]	@ (8002110 <main+0x210>)
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f829 	bl	80010bc <__aeabi_fcmpgt>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <main+0x17c>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // Aktif et
 8002070:	2201      	movs	r2, #1
 8002072:	2104      	movs	r1, #4
 8002074:	4827      	ldr	r0, [pc, #156]	@ (8002114 <main+0x214>)
 8002076:	f000 ff73 	bl	8002f60 <HAL_GPIO_WritePin>
 800207a:	e004      	b.n	8002086 <main+0x186>

			} else {

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // Pasif et
 800207c:	2200      	movs	r2, #0
 800207e:	2104      	movs	r1, #4
 8002080:	4824      	ldr	r0, [pc, #144]	@ (8002114 <main+0x214>)
 8002082:	f000 ff6d 	bl	8002f60 <HAL_GPIO_WritePin>
			}




		previous_altitude = altitude;  // Her döngü sonunda güncelle
 8002086:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <main+0x204>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a20      	ldr	r2, [pc, #128]	@ (800210c <main+0x20c>)
 800208c:	6013      	str	r3, [r2, #0]


		char buffer[100];
		snprintf(buffer, sizeof(buffer), "Sicaklik: %.2f C,Basinc: %.2f, Altitude: %.2f m %%\r\n", Temperature, Pressure , altitude);
 800208e:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <main+0x218>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f9c8 	bl	8000428 <__aeabi_f2d>
 8002098:	4604      	mov	r4, r0
 800209a:	460d      	mov	r5, r1
 800209c:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <main+0x1f8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe f9c1 	bl	8000428 <__aeabi_f2d>
 80020a6:	4680      	mov	r8, r0
 80020a8:	4689      	mov	r9, r1
 80020aa:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <main+0x204>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f9ba 	bl	8000428 <__aeabi_f2d>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4638      	mov	r0, r7
 80020ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80020be:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80020c2:	e9cd 4500 	strd	r4, r5, [sp]
 80020c6:	4a15      	ldr	r2, [pc, #84]	@ (800211c <main+0x21c>)
 80020c8:	2164      	movs	r1, #100	@ 0x64
 80020ca:	f005 fd9d 	bl	8007c08 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80020ce:	463b      	mov	r3, r7
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe f83d 	bl	8000150 <strlen>
 80020d6:	4603      	mov	r3, r0
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4639      	mov	r1, r7
 80020dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020e0:	480f      	ldr	r0, [pc, #60]	@ (8002120 <main+0x220>)
 80020e2:	f004 fea0 	bl	8006e26 <HAL_UART_Transmit>
  {
 80020e6:	e725      	b.n	8001f34 <main+0x34>
 80020e8:	371e9f3c 	.word	0x371e9f3c
 80020ec:	3fc87f63 	.word	0x3fc87f63
 80020f0:	00000000 	.word	0x00000000
 80020f4:	40e5a540 	.word	0x40e5a540
 80020f8:	2000031c 	.word	0x2000031c
 80020fc:	47c5e680 	.word	0x47c5e680
 8002100:	3ff00000 	.word	0x3ff00000
 8002104:	20000320 	.word	0x20000320
 8002108:	ffffd314 	.word	0xffffd314
 800210c:	20000324 	.word	0x20000324
 8002110:	40400000 	.word	0x40400000
 8002114:	40010800 	.word	0x40010800
 8002118:	20000318 	.word	0x20000318
 800211c:	0800acd8 	.word	0x0800acd8
 8002120:	200002d0 	.word	0x200002d0

08002124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b090      	sub	sp, #64	@ 0x40
 8002128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800212a:	f107 0318 	add.w	r3, r7, #24
 800212e:	2228      	movs	r2, #40	@ 0x28
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f005 fde1 	bl	8007cfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800214a:	2301      	movs	r3, #1
 800214c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800214e:	2310      	movs	r3, #16
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002152:	2300      	movs	r3, #0
 8002154:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002156:	f107 0318 	add.w	r3, r7, #24
 800215a:	4618      	mov	r0, r3
 800215c:	f003 fb6a 	bl	8005834 <HAL_RCC_OscConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002166:	f000 f913 	bl	8002390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800216a:	230f      	movs	r3, #15
 800216c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f003 fdd8 	bl	8005d38 <HAL_RCC_ClockConfig>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800218e:	f000 f8ff 	bl	8002390 <Error_Handler>
  }
}
 8002192:	bf00      	nop
 8002194:	3740      	adds	r7, #64	@ 0x40
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021a0:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <MX_I2C1_Init+0x50>)
 80021a2:	4a13      	ldr	r2, [pc, #76]	@ (80021f0 <MX_I2C1_Init+0x54>)
 80021a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021a6:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <MX_I2C1_Init+0x50>)
 80021a8:	4a12      	ldr	r2, [pc, #72]	@ (80021f4 <MX_I2C1_Init+0x58>)
 80021aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <MX_I2C1_Init+0x50>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	@ (80021ec <MX_I2C1_Init+0x50>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <MX_I2C1_Init+0x50>)
 80021ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021c0:	4b0a      	ldr	r3, [pc, #40]	@ (80021ec <MX_I2C1_Init+0x50>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021c6:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <MX_I2C1_Init+0x50>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021cc:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <MX_I2C1_Init+0x50>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021d2:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <MX_I2C1_Init+0x50>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021d8:	4804      	ldr	r0, [pc, #16]	@ (80021ec <MX_I2C1_Init+0x50>)
 80021da:	f000 fed9 	bl	8002f90 <HAL_I2C_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021e4:	f000 f8d4 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000224 	.word	0x20000224
 80021f0:	40005400 	.word	0x40005400
 80021f4:	000186a0 	.word	0x000186a0

080021f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021fc:	4b17      	ldr	r3, [pc, #92]	@ (800225c <MX_SPI1_Init+0x64>)
 80021fe:	4a18      	ldr	r2, [pc, #96]	@ (8002260 <MX_SPI1_Init+0x68>)
 8002200:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002202:	4b16      	ldr	r3, [pc, #88]	@ (800225c <MX_SPI1_Init+0x64>)
 8002204:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002208:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800220a:	4b14      	ldr	r3, [pc, #80]	@ (800225c <MX_SPI1_Init+0x64>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <MX_SPI1_Init+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002216:	4b11      	ldr	r3, [pc, #68]	@ (800225c <MX_SPI1_Init+0x64>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800221c:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <MX_SPI1_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002222:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <MX_SPI1_Init+0x64>)
 8002224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002228:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800222a:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <MX_SPI1_Init+0x64>)
 800222c:	2200      	movs	r2, #0
 800222e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002230:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <MX_SPI1_Init+0x64>)
 8002232:	2200      	movs	r2, #0
 8002234:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002236:	4b09      	ldr	r3, [pc, #36]	@ (800225c <MX_SPI1_Init+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800223c:	4b07      	ldr	r3, [pc, #28]	@ (800225c <MX_SPI1_Init+0x64>)
 800223e:	2200      	movs	r2, #0
 8002240:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002242:	4b06      	ldr	r3, [pc, #24]	@ (800225c <MX_SPI1_Init+0x64>)
 8002244:	220a      	movs	r2, #10
 8002246:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002248:	4804      	ldr	r0, [pc, #16]	@ (800225c <MX_SPI1_Init+0x64>)
 800224a:	f003 ff03 	bl	8006054 <HAL_SPI_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002254:	f000 f89c 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000278 	.word	0x20000278
 8002260:	40013000 	.word	0x40013000

08002264 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002268:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 800226a:	4a12      	ldr	r2, [pc, #72]	@ (80022b4 <MX_USART1_UART_Init+0x50>)
 800226c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800226e:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 8002270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002276:	4b0e      	ldr	r3, [pc, #56]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002282:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800229a:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <MX_USART1_UART_Init+0x4c>)
 800229c:	f004 fd73 	bl	8006d86 <HAL_UART_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022a6:	f000 f873 	bl	8002390 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200002d0 	.word	0x200002d0
 80022b4:	40013800 	.word	0x40013800

080022b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022cc:	4b17      	ldr	r3, [pc, #92]	@ (800232c <MX_GPIO_Init+0x74>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a16      	ldr	r2, [pc, #88]	@ (800232c <MX_GPIO_Init+0x74>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b14      	ldr	r3, [pc, #80]	@ (800232c <MX_GPIO_Init+0x74>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e4:	4b11      	ldr	r3, [pc, #68]	@ (800232c <MX_GPIO_Init+0x74>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a10      	ldr	r2, [pc, #64]	@ (800232c <MX_GPIO_Init+0x74>)
 80022ea:	f043 0308 	orr.w	r3, r3, #8
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <MX_GPIO_Init+0x74>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2114      	movs	r1, #20
 8002300:	480b      	ldr	r0, [pc, #44]	@ (8002330 <MX_GPIO_Init+0x78>)
 8002302:	f000 fe2d 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8002306:	2314      	movs	r3, #20
 8002308:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230a:	2301      	movs	r3, #1
 800230c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2302      	movs	r3, #2
 8002314:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	4619      	mov	r1, r3
 800231c:	4804      	ldr	r0, [pc, #16]	@ (8002330 <MX_GPIO_Init+0x78>)
 800231e:	f000 fc9b 	bl	8002c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002322:	bf00      	nop
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	40010800 	.word	0x40010800

08002334 <mpu9250_veri>:

/* USER CODE BEGIN 4 */
void mpu9250_veri(uint8_t reg, uint8_t *data, uint8_t data_length){
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
 8002340:	4613      	mov	r3, r2
 8002342:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buffer[1];
	tx_buffer[0] = 0x80 | reg;  // Okuma ve adres
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800234a:	b2db      	uxtb	r3, r3
 800234c:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	2110      	movs	r1, #16
 8002352:	480d      	ldr	r0, [pc, #52]	@ (8002388 <mpu9250_veri+0x54>)
 8002354:	f000 fe04 	bl	8002f60 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, tx_buffer, 1, 100);               // İlk olarak register adresini gönder
 8002358:	f107 010c 	add.w	r1, r7, #12
 800235c:	2364      	movs	r3, #100	@ 0x64
 800235e:	2201      	movs	r2, #1
 8002360:	480a      	ldr	r0, [pc, #40]	@ (800238c <mpu9250_veri+0x58>)
 8002362:	f003 fefb 	bl	800615c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, data_length, 100);           // Ardından veri oku
 8002366:	79bb      	ldrb	r3, [r7, #6]
 8002368:	b29a      	uxth	r2, r3
 800236a:	2364      	movs	r3, #100	@ 0x64
 800236c:	6839      	ldr	r1, [r7, #0]
 800236e:	4807      	ldr	r0, [pc, #28]	@ (800238c <mpu9250_veri+0x58>)
 8002370:	f004 f838 	bl	80063e4 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8002374:	2201      	movs	r2, #1
 8002376:	2110      	movs	r1, #16
 8002378:	4803      	ldr	r0, [pc, #12]	@ (8002388 <mpu9250_veri+0x54>)
 800237a:	f000 fdf1 	bl	8002f60 <HAL_GPIO_WritePin>
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40010800 	.word	0x40010800
 800238c:	20000278 	.word	0x20000278

08002390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002394:	b672      	cpsid	i
}
 8002396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <Error_Handler+0x8>

0800239c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023a2:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <HAL_MspInit+0x5c>)
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	4a14      	ldr	r2, [pc, #80]	@ (80023f8 <HAL_MspInit+0x5c>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6193      	str	r3, [r2, #24]
 80023ae:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_MspInit+0x5c>)
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <HAL_MspInit+0x5c>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	4a0e      	ldr	r2, [pc, #56]	@ (80023f8 <HAL_MspInit+0x5c>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	61d3      	str	r3, [r2, #28]
 80023c6:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <HAL_MspInit+0x5c>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80023d2:	4b0a      	ldr	r3, [pc, #40]	@ (80023fc <HAL_MspInit+0x60>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <HAL_MspInit+0x60>)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40010000 	.word	0x40010000

08002400 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a19      	ldr	r2, [pc, #100]	@ (8002480 <HAL_I2C_MspInit+0x80>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d12b      	bne.n	8002478 <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002420:	4b18      	ldr	r3, [pc, #96]	@ (8002484 <HAL_I2C_MspInit+0x84>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4a17      	ldr	r2, [pc, #92]	@ (8002484 <HAL_I2C_MspInit+0x84>)
 8002426:	f043 0308 	orr.w	r3, r3, #8
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <HAL_I2C_MspInit+0x84>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002438:	23c0      	movs	r3, #192	@ 0xc0
 800243a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800243c:	2312      	movs	r3, #18
 800243e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002440:	2303      	movs	r3, #3
 8002442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	4619      	mov	r1, r3
 800244a:	480f      	ldr	r0, [pc, #60]	@ (8002488 <HAL_I2C_MspInit+0x88>)
 800244c:	f000 fc04 	bl	8002c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <HAL_I2C_MspInit+0x84>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4a0b      	ldr	r2, [pc, #44]	@ (8002484 <HAL_I2C_MspInit+0x84>)
 8002456:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800245a:	61d3      	str	r3, [r2, #28]
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <HAL_I2C_MspInit+0x84>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	201f      	movs	r0, #31
 800246e:	f000 fb36 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002472:	201f      	movs	r0, #31
 8002474:	f000 fb4f 	bl	8002b16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002478:	bf00      	nop
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40005400 	.word	0x40005400
 8002484:	40021000 	.word	0x40021000
 8002488:	40010c00 	.word	0x40010c00

0800248c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002524 <HAL_SPI_MspInit+0x98>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d137      	bne.n	800251c <HAL_SPI_MspInit+0x90>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002528 <HAL_SPI_MspInit+0x9c>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002528 <HAL_SPI_MspInit+0x9c>)
 80024b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_SPI_MspInit+0x9c>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c4:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <HAL_SPI_MspInit+0x9c>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	4a17      	ldr	r2, [pc, #92]	@ (8002528 <HAL_SPI_MspInit+0x9c>)
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	6193      	str	r3, [r2, #24]
 80024d0:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <HAL_SPI_MspInit+0x9c>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80024dc:	23a0      	movs	r3, #160	@ 0xa0
 80024de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	4619      	mov	r1, r3
 80024ee:	480f      	ldr	r0, [pc, #60]	@ (800252c <HAL_SPI_MspInit+0xa0>)
 80024f0:	f000 fbb2 	bl	8002c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024f4:	2340      	movs	r3, #64	@ 0x40
 80024f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	4619      	mov	r1, r3
 8002506:	4809      	ldr	r0, [pc, #36]	@ (800252c <HAL_SPI_MspInit+0xa0>)
 8002508:	f000 fba6 	bl	8002c58 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	2023      	movs	r0, #35	@ 0x23
 8002512:	f000 fae4 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002516:	2023      	movs	r0, #35	@ 0x23
 8002518:	f000 fafd 	bl	8002b16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800251c:	bf00      	nop
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40013000 	.word	0x40013000
 8002528:	40021000 	.word	0x40021000
 800252c:	40010800 	.word	0x40010800

08002530 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a1c      	ldr	r2, [pc, #112]	@ (80025bc <HAL_UART_MspInit+0x8c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d131      	bne.n	80025b4 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002550:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <HAL_UART_MspInit+0x90>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	4a1a      	ldr	r2, [pc, #104]	@ (80025c0 <HAL_UART_MspInit+0x90>)
 8002556:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800255a:	6193      	str	r3, [r2, #24]
 800255c:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <HAL_UART_MspInit+0x90>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002568:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <HAL_UART_MspInit+0x90>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4a14      	ldr	r2, [pc, #80]	@ (80025c0 <HAL_UART_MspInit+0x90>)
 800256e:	f043 0304 	orr.w	r3, r3, #4
 8002572:	6193      	str	r3, [r2, #24]
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <HAL_UART_MspInit+0x90>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002580:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0310 	add.w	r3, r7, #16
 8002592:	4619      	mov	r1, r3
 8002594:	480b      	ldr	r0, [pc, #44]	@ (80025c4 <HAL_UART_MspInit+0x94>)
 8002596:	f000 fb5f 	bl	8002c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800259a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800259e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	4619      	mov	r1, r3
 80025ae:	4805      	ldr	r0, [pc, #20]	@ (80025c4 <HAL_UART_MspInit+0x94>)
 80025b0:	f000 fb52 	bl	8002c58 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80025b4:	bf00      	nop
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010800 	.word	0x40010800

080025c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <NMI_Handler+0x4>

080025d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <HardFault_Handler+0x4>

080025d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <MemManage_Handler+0x4>

080025e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <BusFault_Handler+0x4>

080025e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <UsageFault_Handler+0x4>

080025f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002618:	f000 f94a 	bl	80028b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}

08002620 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <I2C1_EV_IRQHandler+0x10>)
 8002626:	f001 f979 	bl	800391c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000224 	.word	0x20000224

08002634 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <SPI1_IRQHandler+0x10>)
 800263a:	f004 f995 	bl	8006968 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000278 	.word	0x20000278

08002648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return 1;
 800264c:	2301      	movs	r3, #1
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <_kill>:

int _kill(int pid, int sig)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002660:	f005 fb9e 	bl	8007da0 <__errno>
 8002664:	4603      	mov	r3, r0
 8002666:	2216      	movs	r2, #22
 8002668:	601a      	str	r2, [r3, #0]
  return -1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <_exit>:

void _exit (int status)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800267e:	f04f 31ff 	mov.w	r1, #4294967295
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ffe7 	bl	8002656 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <_exit+0x12>

0800268c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	e00a      	b.n	80026b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800269e:	f3af 8000 	nop.w
 80026a2:	4601      	mov	r1, r0
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	60ba      	str	r2, [r7, #8]
 80026aa:	b2ca      	uxtb	r2, r1
 80026ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3301      	adds	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	dbf0      	blt.n	800269e <_read+0x12>
  }

  return len;
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e009      	b.n	80026ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	60ba      	str	r2, [r7, #8]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3301      	adds	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	dbf1      	blt.n	80026d8 <_write+0x12>
  }
  return len;
 80026f4:	687b      	ldr	r3, [r7, #4]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_close>:

int _close(int file)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002724:	605a      	str	r2, [r3, #4]
  return 0;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <_isatty>:

int _isatty(int file)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800273a:	2301      	movs	r3, #1
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
	...

08002760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002768:	4a14      	ldr	r2, [pc, #80]	@ (80027bc <_sbrk+0x5c>)
 800276a:	4b15      	ldr	r3, [pc, #84]	@ (80027c0 <_sbrk+0x60>)
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002774:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <_sbrk+0x64>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d102      	bne.n	8002782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800277c:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <_sbrk+0x64>)
 800277e:	4a12      	ldr	r2, [pc, #72]	@ (80027c8 <_sbrk+0x68>)
 8002780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002782:	4b10      	ldr	r3, [pc, #64]	@ (80027c4 <_sbrk+0x64>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	429a      	cmp	r2, r3
 800278e:	d207      	bcs.n	80027a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002790:	f005 fb06 	bl	8007da0 <__errno>
 8002794:	4603      	mov	r3, r0
 8002796:	220c      	movs	r2, #12
 8002798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800279a:	f04f 33ff 	mov.w	r3, #4294967295
 800279e:	e009      	b.n	80027b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a0:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <_sbrk+0x64>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027a6:	4b07      	ldr	r3, [pc, #28]	@ (80027c4 <_sbrk+0x64>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	4a05      	ldr	r2, [pc, #20]	@ (80027c4 <_sbrk+0x64>)
 80027b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027b2:	68fb      	ldr	r3, [r7, #12]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20005000 	.word	0x20005000
 80027c0:	00000400 	.word	0x00000400
 80027c4:	20000328 	.word	0x20000328
 80027c8:	20000480 	.word	0x20000480

080027cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027d8:	f7ff fff8 	bl	80027cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027dc:	480b      	ldr	r0, [pc, #44]	@ (800280c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027de:	490c      	ldr	r1, [pc, #48]	@ (8002810 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002814 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e4:	e002      	b.n	80027ec <LoopCopyDataInit>

080027e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ea:	3304      	adds	r3, #4

080027ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f0:	d3f9      	bcc.n	80027e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f2:	4a09      	ldr	r2, [pc, #36]	@ (8002818 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027f4:	4c09      	ldr	r4, [pc, #36]	@ (800281c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f8:	e001      	b.n	80027fe <LoopFillZerobss>

080027fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027fc:	3204      	adds	r2, #4

080027fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002800:	d3fb      	bcc.n	80027fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002802:	f005 fad3 	bl	8007dac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002806:	f7ff fb7b 	bl	8001f00 <main>
  bx lr
 800280a:	4770      	bx	lr
  ldr r0, =_sdata
 800280c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002810:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002814:	0800b100 	.word	0x0800b100
  ldr r2, =_sbss
 8002818:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800281c:	2000047c 	.word	0x2000047c

08002820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC1_2_IRQHandler>
	...

08002824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002828:	4b08      	ldr	r3, [pc, #32]	@ (800284c <HAL_Init+0x28>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a07      	ldr	r2, [pc, #28]	@ (800284c <HAL_Init+0x28>)
 800282e:	f043 0310 	orr.w	r3, r3, #16
 8002832:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002834:	2003      	movs	r0, #3
 8002836:	f000 f947 	bl	8002ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800283a:	200f      	movs	r0, #15
 800283c:	f000 f808 	bl	8002850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002840:	f7ff fdac 	bl	800239c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40022000 	.word	0x40022000

08002850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002858:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <HAL_InitTick+0x54>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b12      	ldr	r3, [pc, #72]	@ (80028a8 <HAL_InitTick+0x58>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002866:	fbb3 f3f1 	udiv	r3, r3, r1
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	4618      	mov	r0, r3
 8002870:	f000 f95f 	bl	8002b32 <HAL_SYSTICK_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e00e      	b.n	800289c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b0f      	cmp	r3, #15
 8002882:	d80a      	bhi.n	800289a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002884:	2200      	movs	r2, #0
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	f000 f927 	bl	8002ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002890:	4a06      	ldr	r2, [pc, #24]	@ (80028ac <HAL_InitTick+0x5c>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	e000      	b.n	800289c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20000008 	.word	0x20000008
 80028ac:	20000004 	.word	0x20000004

080028b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_IncTick+0x1c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <HAL_IncTick+0x20>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	4a03      	ldr	r2, [pc, #12]	@ (80028d0 <HAL_IncTick+0x20>)
 80028c2:	6013      	str	r3, [r2, #0]
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	20000008 	.word	0x20000008
 80028d0:	2000032c 	.word	0x2000032c

080028d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return uwTick;
 80028d8:	4b02      	ldr	r3, [pc, #8]	@ (80028e4 <HAL_GetTick+0x10>)
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	2000032c 	.word	0x2000032c

080028e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff fff0 	bl	80028d4 <HAL_GetTick>
 80028f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d005      	beq.n	800290e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002902:	4b0a      	ldr	r3, [pc, #40]	@ (800292c <HAL_Delay+0x44>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800290e:	bf00      	nop
 8002910:	f7ff ffe0 	bl	80028d4 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	429a      	cmp	r2, r3
 800291e:	d8f7      	bhi.n	8002910 <HAL_Delay+0x28>
  {
  }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000008 	.word	0x20000008

08002930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002940:	4b0c      	ldr	r3, [pc, #48]	@ (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800294c:	4013      	ands	r3, r2
 800294e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002958:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800295c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002962:	4a04      	ldr	r2, [pc, #16]	@ (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	60d3      	str	r3, [r2, #12]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800297c:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <__NVIC_GetPriorityGrouping+0x18>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	f003 0307 	and.w	r3, r3, #7
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	db0b      	blt.n	80029be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	4906      	ldr	r1, [pc, #24]	@ (80029c8 <__NVIC_EnableIRQ+0x34>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	2001      	movs	r0, #1
 80029b6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	@ (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	@ (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	@ 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	@ 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a94:	d301      	bcc.n	8002a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a96:	2301      	movs	r3, #1
 8002a98:	e00f      	b.n	8002aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac4 <SysTick_Config+0x40>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa2:	210f      	movs	r1, #15
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa8:	f7ff ff90 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aac:	4b05      	ldr	r3, [pc, #20]	@ (8002ac4 <SysTick_Config+0x40>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab2:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <SysTick_Config+0x40>)
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	e000e010 	.word	0xe000e010

08002ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ff2d 	bl	8002930 <__NVIC_SetPriorityGrouping>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af0:	f7ff ff42 	bl	8002978 <__NVIC_GetPriorityGrouping>
 8002af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f7ff ff90 	bl	8002a20 <NVIC_EncodePriority>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff5f 	bl	80029cc <__NVIC_SetPriority>
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff35 	bl	8002994 <__NVIC_EnableIRQ>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ffa2 	bl	8002a84 <SysTick_Config>
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d005      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2204      	movs	r2, #4
 8002b68:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	e051      	b.n	8002c14 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 020e 	bic.w	r2, r2, #14
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a22      	ldr	r2, [pc, #136]	@ (8002c20 <HAL_DMA_Abort_IT+0xd4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d029      	beq.n	8002bee <HAL_DMA_Abort_IT+0xa2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a21      	ldr	r2, [pc, #132]	@ (8002c24 <HAL_DMA_Abort_IT+0xd8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d022      	beq.n	8002bea <HAL_DMA_Abort_IT+0x9e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c28 <HAL_DMA_Abort_IT+0xdc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01a      	beq.n	8002be4 <HAL_DMA_Abort_IT+0x98>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c2c <HAL_DMA_Abort_IT+0xe0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d012      	beq.n	8002bde <HAL_DMA_Abort_IT+0x92>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c30 <HAL_DMA_Abort_IT+0xe4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0x8c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c34 <HAL_DMA_Abort_IT+0xe8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d102      	bne.n	8002bd2 <HAL_DMA_Abort_IT+0x86>
 8002bcc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bd0:	e00e      	b.n	8002bf0 <HAL_DMA_Abort_IT+0xa4>
 8002bd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bd6:	e00b      	b.n	8002bf0 <HAL_DMA_Abort_IT+0xa4>
 8002bd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bdc:	e008      	b.n	8002bf0 <HAL_DMA_Abort_IT+0xa4>
 8002bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002be2:	e005      	b.n	8002bf0 <HAL_DMA_Abort_IT+0xa4>
 8002be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002be8:	e002      	b.n	8002bf0 <HAL_DMA_Abort_IT+0xa4>
 8002bea:	2310      	movs	r3, #16
 8002bec:	e000      	b.n	8002bf0 <HAL_DMA_Abort_IT+0xa4>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	4a11      	ldr	r2, [pc, #68]	@ (8002c38 <HAL_DMA_Abort_IT+0xec>)
 8002bf2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
    } 
  }
  return status;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40020008 	.word	0x40020008
 8002c24:	4002001c 	.word	0x4002001c
 8002c28:	40020030 	.word	0x40020030
 8002c2c:	40020044 	.word	0x40020044
 8002c30:	40020058 	.word	0x40020058
 8002c34:	4002006c 	.word	0x4002006c
 8002c38:	40020000 	.word	0x40020000

08002c3c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c4a:	b2db      	uxtb	r3, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b08b      	sub	sp, #44	@ 0x2c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6a:	e169      	b.n	8002f40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	f040 8158 	bne.w	8002f3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4a9a      	ldr	r2, [pc, #616]	@ (8002ef8 <HAL_GPIO_Init+0x2a0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d05e      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002c94:	4a98      	ldr	r2, [pc, #608]	@ (8002ef8 <HAL_GPIO_Init+0x2a0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d875      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002c9a:	4a98      	ldr	r2, [pc, #608]	@ (8002efc <HAL_GPIO_Init+0x2a4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d058      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002ca0:	4a96      	ldr	r2, [pc, #600]	@ (8002efc <HAL_GPIO_Init+0x2a4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d86f      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002ca6:	4a96      	ldr	r2, [pc, #600]	@ (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d052      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cac:	4a94      	ldr	r2, [pc, #592]	@ (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d869      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cb2:	4a94      	ldr	r2, [pc, #592]	@ (8002f04 <HAL_GPIO_Init+0x2ac>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d04c      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cb8:	4a92      	ldr	r2, [pc, #584]	@ (8002f04 <HAL_GPIO_Init+0x2ac>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d863      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cbe:	4a92      	ldr	r2, [pc, #584]	@ (8002f08 <HAL_GPIO_Init+0x2b0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d046      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cc4:	4a90      	ldr	r2, [pc, #576]	@ (8002f08 <HAL_GPIO_Init+0x2b0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d85d      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cca:	2b12      	cmp	r3, #18
 8002ccc:	d82a      	bhi.n	8002d24 <HAL_GPIO_Init+0xcc>
 8002cce:	2b12      	cmp	r3, #18
 8002cd0:	d859      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd8 <HAL_GPIO_Init+0x80>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002d53 	.word	0x08002d53
 8002cdc:	08002d2d 	.word	0x08002d2d
 8002ce0:	08002d3f 	.word	0x08002d3f
 8002ce4:	08002d81 	.word	0x08002d81
 8002ce8:	08002d87 	.word	0x08002d87
 8002cec:	08002d87 	.word	0x08002d87
 8002cf0:	08002d87 	.word	0x08002d87
 8002cf4:	08002d87 	.word	0x08002d87
 8002cf8:	08002d87 	.word	0x08002d87
 8002cfc:	08002d87 	.word	0x08002d87
 8002d00:	08002d87 	.word	0x08002d87
 8002d04:	08002d87 	.word	0x08002d87
 8002d08:	08002d87 	.word	0x08002d87
 8002d0c:	08002d87 	.word	0x08002d87
 8002d10:	08002d87 	.word	0x08002d87
 8002d14:	08002d87 	.word	0x08002d87
 8002d18:	08002d87 	.word	0x08002d87
 8002d1c:	08002d35 	.word	0x08002d35
 8002d20:	08002d49 	.word	0x08002d49
 8002d24:	4a79      	ldr	r2, [pc, #484]	@ (8002f0c <HAL_GPIO_Init+0x2b4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d2a:	e02c      	b.n	8002d86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	623b      	str	r3, [r7, #32]
          break;
 8002d32:	e029      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	623b      	str	r3, [r7, #32]
          break;
 8002d3c:	e024      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	3308      	adds	r3, #8
 8002d44:	623b      	str	r3, [r7, #32]
          break;
 8002d46:	e01f      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	623b      	str	r3, [r7, #32]
          break;
 8002d50:	e01a      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	623b      	str	r3, [r7, #32]
          break;
 8002d5e:	e013      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d68:	2308      	movs	r3, #8
 8002d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	611a      	str	r2, [r3, #16]
          break;
 8002d72:	e009      	b.n	8002d88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d74:	2308      	movs	r3, #8
 8002d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	615a      	str	r2, [r3, #20]
          break;
 8002d7e:	e003      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
          break;
 8002d84:	e000      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          break;
 8002d86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2bff      	cmp	r3, #255	@ 0xff
 8002d8c:	d801      	bhi.n	8002d92 <HAL_GPIO_Init+0x13a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	e001      	b.n	8002d96 <HAL_GPIO_Init+0x13e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2bff      	cmp	r3, #255	@ 0xff
 8002d9c:	d802      	bhi.n	8002da4 <HAL_GPIO_Init+0x14c>
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	e002      	b.n	8002daa <HAL_GPIO_Init+0x152>
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	3b08      	subs	r3, #8
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	210f      	movs	r1, #15
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	401a      	ands	r2, r3
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80b1 	beq.w	8002f3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	4a4c      	ldr	r2, [pc, #304]	@ (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6193      	str	r3, [r2, #24]
 8002de4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002df0:	4a48      	ldr	r2, [pc, #288]	@ (8002f14 <HAL_GPIO_Init+0x2bc>)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	220f      	movs	r2, #15
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4013      	ands	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a40      	ldr	r2, [pc, #256]	@ (8002f18 <HAL_GPIO_Init+0x2c0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d013      	beq.n	8002e44 <HAL_GPIO_Init+0x1ec>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f1c <HAL_GPIO_Init+0x2c4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00d      	beq.n	8002e40 <HAL_GPIO_Init+0x1e8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a3e      	ldr	r2, [pc, #248]	@ (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d007      	beq.n	8002e3c <HAL_GPIO_Init+0x1e4>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f24 <HAL_GPIO_Init+0x2cc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d101      	bne.n	8002e38 <HAL_GPIO_Init+0x1e0>
 8002e34:	2303      	movs	r3, #3
 8002e36:	e006      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	e004      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e002      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e44:	2300      	movs	r3, #0
 8002e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e48:	f002 0203 	and.w	r2, r2, #3
 8002e4c:	0092      	lsls	r2, r2, #2
 8002e4e:	4093      	lsls	r3, r2
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e56:	492f      	ldr	r1, [pc, #188]	@ (8002f14 <HAL_GPIO_Init+0x2bc>)
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d006      	beq.n	8002e7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e70:	4b2d      	ldr	r3, [pc, #180]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	492c      	ldr	r1, [pc, #176]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	608b      	str	r3, [r1, #8]
 8002e7c:	e006      	b.n	8002e8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	4928      	ldr	r1, [pc, #160]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e98:	4b23      	ldr	r3, [pc, #140]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	4922      	ldr	r1, [pc, #136]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60cb      	str	r3, [r1, #12]
 8002ea4:	e006      	b.n	8002eb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ea6:	4b20      	ldr	r3, [pc, #128]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	491e      	ldr	r1, [pc, #120]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ec0:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	4918      	ldr	r1, [pc, #96]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
 8002ecc:	e006      	b.n	8002edc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ece:	4b16      	ldr	r3, [pc, #88]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	4914      	ldr	r1, [pc, #80]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d021      	beq.n	8002f2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	490e      	ldr	r1, [pc, #56]	@ (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
 8002ef4:	e021      	b.n	8002f3a <HAL_GPIO_Init+0x2e2>
 8002ef6:	bf00      	nop
 8002ef8:	10320000 	.word	0x10320000
 8002efc:	10310000 	.word	0x10310000
 8002f00:	10220000 	.word	0x10220000
 8002f04:	10210000 	.word	0x10210000
 8002f08:	10120000 	.word	0x10120000
 8002f0c:	10110000 	.word	0x10110000
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40010800 	.word	0x40010800
 8002f1c:	40010c00 	.word	0x40010c00
 8002f20:	40011000 	.word	0x40011000
 8002f24:	40011400 	.word	0x40011400
 8002f28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <HAL_GPIO_Init+0x304>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	4909      	ldr	r1, [pc, #36]	@ (8002f5c <HAL_GPIO_Init+0x304>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f47f ae8e 	bne.w	8002c6c <HAL_GPIO_Init+0x14>
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	372c      	adds	r7, #44	@ 0x2c
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	40010400 	.word	0x40010400

08002f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f70:	787b      	ldrb	r3, [r7, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f76:	887a      	ldrh	r2, [r7, #2]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f7c:	e003      	b.n	8002f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	041a      	lsls	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	611a      	str	r2, [r3, #16]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e12b      	b.n	80031fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff fa22 	bl	8002400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2224      	movs	r2, #36	@ 0x24
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f002 ffe8 	bl	8005fc8 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a81      	ldr	r2, [pc, #516]	@ (8003204 <HAL_I2C_Init+0x274>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d807      	bhi.n	8003014 <HAL_I2C_Init+0x84>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a80      	ldr	r2, [pc, #512]	@ (8003208 <HAL_I2C_Init+0x278>)
 8003008:	4293      	cmp	r3, r2
 800300a:	bf94      	ite	ls
 800300c:	2301      	movls	r3, #1
 800300e:	2300      	movhi	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e006      	b.n	8003022 <HAL_I2C_Init+0x92>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a7d      	ldr	r2, [pc, #500]	@ (800320c <HAL_I2C_Init+0x27c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	bf94      	ite	ls
 800301c:	2301      	movls	r3, #1
 800301e:	2300      	movhi	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0e7      	b.n	80031fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a78      	ldr	r2, [pc, #480]	@ (8003210 <HAL_I2C_Init+0x280>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0c9b      	lsrs	r3, r3, #18
 8003034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a6a      	ldr	r2, [pc, #424]	@ (8003204 <HAL_I2C_Init+0x274>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d802      	bhi.n	8003064 <HAL_I2C_Init+0xd4>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3301      	adds	r3, #1
 8003062:	e009      	b.n	8003078 <HAL_I2C_Init+0xe8>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	4a69      	ldr	r2, [pc, #420]	@ (8003214 <HAL_I2C_Init+0x284>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	3301      	adds	r3, #1
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	430b      	orrs	r3, r1
 800307e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800308a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	495c      	ldr	r1, [pc, #368]	@ (8003204 <HAL_I2C_Init+0x274>)
 8003094:	428b      	cmp	r3, r1
 8003096:	d819      	bhi.n	80030cc <HAL_I2C_Init+0x13c>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1e59      	subs	r1, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a6:	1c59      	adds	r1, r3, #1
 80030a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030ac:	400b      	ands	r3, r1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_I2C_Init+0x138>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1e59      	subs	r1, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c6:	e051      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030c8:	2304      	movs	r3, #4
 80030ca:	e04f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d111      	bne.n	80030f8 <HAL_I2C_Init+0x168>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e012      	b.n	800311e <HAL_I2C_Init+0x18e>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	0099      	lsls	r1, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Init+0x196>
 8003122:	2301      	movs	r3, #1
 8003124:	e022      	b.n	800316c <HAL_I2C_Init+0x1dc>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10e      	bne.n	800314c <HAL_I2C_Init+0x1bc>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e58      	subs	r0, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	440b      	add	r3, r1
 800313c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003140:	3301      	adds	r3, #1
 8003142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800314a:	e00f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	0099      	lsls	r1, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	6809      	ldr	r1, [r1, #0]
 8003170:	4313      	orrs	r3, r2
 8003172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800319a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6911      	ldr	r1, [r2, #16]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68d2      	ldr	r2, [r2, #12]
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	000186a0 	.word	0x000186a0
 8003208:	001e847f 	.word	0x001e847f
 800320c:	003d08ff 	.word	0x003d08ff
 8003210:	431bde83 	.word	0x431bde83
 8003214:	10624dd3 	.word	0x10624dd3

08003218 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322a:	2b80      	cmp	r3, #128	@ 0x80
 800322c:	d103      	bne.n	8003236 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	611a      	str	r2, [r3, #16]
  }
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4603      	mov	r3, r0
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	460b      	mov	r3, r1
 8003254:	813b      	strh	r3, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800325a:	f7ff fb3b 	bl	80028d4 <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b20      	cmp	r3, #32
 800326a:	f040 80d9 	bne.w	8003420 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	2319      	movs	r3, #25
 8003274:	2201      	movs	r2, #1
 8003276:	496d      	ldr	r1, [pc, #436]	@ (800342c <HAL_I2C_Mem_Write+0x1ec>)
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f002 f859 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
 8003286:	e0cc      	b.n	8003422 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_I2C_Mem_Write+0x56>
 8003292:	2302      	movs	r3, #2
 8003294:	e0c5      	b.n	8003422 <HAL_I2C_Mem_Write+0x1e2>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d007      	beq.n	80032bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2221      	movs	r2, #33	@ 0x21
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2240      	movs	r2, #64	@ 0x40
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a3a      	ldr	r2, [r7, #32]
 80032e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a4d      	ldr	r2, [pc, #308]	@ (8003430 <HAL_I2C_Mem_Write+0x1f0>)
 80032fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032fe:	88f8      	ldrh	r0, [r7, #6]
 8003300:	893a      	ldrh	r2, [r7, #8]
 8003302:	8979      	ldrh	r1, [r7, #10]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	9301      	str	r3, [sp, #4]
 8003308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	4603      	mov	r3, r0
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f001 fde8 	bl	8004ee4 <I2C_RequestMemoryWrite>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d052      	beq.n	80033c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e081      	b.n	8003422 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f002 f91e 	bl	8005564 <I2C_WaitOnTXEFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00d      	beq.n	800334a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	2b04      	cmp	r3, #4
 8003334:	d107      	bne.n	8003346 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003344:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e06b      	b.n	8003422 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b04      	cmp	r3, #4
 8003386:	d11b      	bne.n	80033c0 <HAL_I2C_Mem_Write+0x180>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338c:	2b00      	cmp	r3, #0
 800338e:	d017      	beq.n	80033c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1aa      	bne.n	800331e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f002 f911 	bl	80055f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00d      	beq.n	80033f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d107      	bne.n	80033f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e016      	b.n	8003422 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	00100002 	.word	0x00100002
 8003430:	ffff0000 	.word	0xffff0000

08003434 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08c      	sub	sp, #48	@ 0x30
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	4608      	mov	r0, r1
 800343e:	4611      	mov	r1, r2
 8003440:	461a      	mov	r2, r3
 8003442:	4603      	mov	r3, r0
 8003444:	817b      	strh	r3, [r7, #10]
 8003446:	460b      	mov	r3, r1
 8003448:	813b      	strh	r3, [r7, #8]
 800344a:	4613      	mov	r3, r2
 800344c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003452:	f7ff fa3f 	bl	80028d4 <HAL_GetTick>
 8003456:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b20      	cmp	r3, #32
 8003462:	f040 8250 	bne.w	8003906 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2319      	movs	r3, #25
 800346c:	2201      	movs	r2, #1
 800346e:	4982      	ldr	r1, [pc, #520]	@ (8003678 <HAL_I2C_Mem_Read+0x244>)
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f001 ff5d 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
 800347e:	e243      	b.n	8003908 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_I2C_Mem_Read+0x5a>
 800348a:	2302      	movs	r3, #2
 800348c:	e23c      	b.n	8003908 <HAL_I2C_Mem_Read+0x4d4>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d007      	beq.n	80034b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2222      	movs	r2, #34	@ 0x22
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2240      	movs	r2, #64	@ 0x40
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a62      	ldr	r2, [pc, #392]	@ (800367c <HAL_I2C_Mem_Read+0x248>)
 80034f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034f6:	88f8      	ldrh	r0, [r7, #6]
 80034f8:	893a      	ldrh	r2, [r7, #8]
 80034fa:	8979      	ldrh	r1, [r7, #10]
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	4603      	mov	r3, r0
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f001 fd82 	bl	8005010 <I2C_RequestMemoryRead>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e1f8      	b.n	8003908 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	d113      	bne.n	8003546 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e1cc      	b.n	80038e0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354a:	2b01      	cmp	r3, #1
 800354c:	d11e      	bne.n	800358c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800355c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800355e:	b672      	cpsid	i
}
 8003560:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003586:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003588:	b662      	cpsie	i
}
 800358a:	e035      	b.n	80035f8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003590:	2b02      	cmp	r3, #2
 8003592:	d11e      	bne.n	80035d2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035a4:	b672      	cpsid	i
}
 80035a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035ce:	b662      	cpsie	i
}
 80035d0:	e012      	b.n	80035f8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035e0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80035f8:	e172      	b.n	80038e0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fe:	2b03      	cmp	r3, #3
 8003600:	f200 811f 	bhi.w	8003842 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003608:	2b01      	cmp	r3, #1
 800360a:	d123      	bne.n	8003654 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800360e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f002 f869 	bl	80056e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e173      	b.n	8003908 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003652:	e145      	b.n	80038e0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003658:	2b02      	cmp	r3, #2
 800365a:	d152      	bne.n	8003702 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003662:	2200      	movs	r2, #0
 8003664:	4906      	ldr	r1, [pc, #24]	@ (8003680 <HAL_I2C_Mem_Read+0x24c>)
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f001 fe62 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e148      	b.n	8003908 <HAL_I2C_Mem_Read+0x4d4>
 8003676:	bf00      	nop
 8003678:	00100002 	.word	0x00100002
 800367c:	ffff0000 	.word	0xffff0000
 8003680:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003684:	b672      	cpsid	i
}
 8003686:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036ca:	b662      	cpsie	i
}
 80036cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003700:	e0ee      	b.n	80038e0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003708:	2200      	movs	r2, #0
 800370a:	4981      	ldr	r1, [pc, #516]	@ (8003910 <HAL_I2C_Mem_Read+0x4dc>)
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f001 fe0f 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0f5      	b.n	8003908 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800372a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800372c:	b672      	cpsid	i
}
 800372e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003762:	4b6c      	ldr	r3, [pc, #432]	@ (8003914 <HAL_I2C_Mem_Read+0x4e0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	08db      	lsrs	r3, r3, #3
 8003768:	4a6b      	ldr	r2, [pc, #428]	@ (8003918 <HAL_I2C_Mem_Read+0x4e4>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	0a1a      	lsrs	r2, r3, #8
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	00da      	lsls	r2, r3, #3
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	3b01      	subs	r3, #1
 8003780:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d118      	bne.n	80037ba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	f043 0220 	orr.w	r2, r3, #32
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80037aa:	b662      	cpsie	i
}
 80037ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0a6      	b.n	8003908 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d1d9      	bne.n	800377c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800380a:	b662      	cpsie	i
}
 800380c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003840:	e04e      	b.n	80038e0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003844:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f001 ff4e 	bl	80056e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e058      	b.n	8003908 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b04      	cmp	r3, #4
 8003894:	d124      	bne.n	80038e0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389a:	2b03      	cmp	r3, #3
 800389c:	d107      	bne.n	80038ae <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f47f ae88 	bne.w	80035fa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	e000      	b.n	8003908 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003906:	2302      	movs	r3, #2
  }
}
 8003908:	4618      	mov	r0, r3
 800390a:	3728      	adds	r7, #40	@ 0x28
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	00010004 	.word	0x00010004
 8003914:	20000000 	.word	0x20000000
 8003918:	14f8b589 	.word	0x14f8b589

0800391c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800393c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003944:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	2b10      	cmp	r3, #16
 800394a:	d003      	beq.n	8003954 <HAL_I2C_EV_IRQHandler+0x38>
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	2b40      	cmp	r3, #64	@ 0x40
 8003950:	f040 80c1 	bne.w	8003ad6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10d      	bne.n	800398a <HAL_I2C_EV_IRQHandler+0x6e>
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003974:	d003      	beq.n	800397e <HAL_I2C_EV_IRQHandler+0x62>
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800397c:	d101      	bne.n	8003982 <HAL_I2C_EV_IRQHandler+0x66>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <HAL_I2C_EV_IRQHandler+0x68>
 8003982:	2300      	movs	r3, #0
 8003984:	2b01      	cmp	r3, #1
 8003986:	f000 8132 	beq.w	8003bee <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00c      	beq.n	80039ae <HAL_I2C_EV_IRQHandler+0x92>
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	0a5b      	lsrs	r3, r3, #9
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f001 ff2c 	bl	80057fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fcea 	bl	8004380 <I2C_Master_SB>
 80039ac:	e092      	b.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	08db      	lsrs	r3, r3, #3
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HAL_I2C_EV_IRQHandler+0xb2>
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	0a5b      	lsrs	r3, r3, #9
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fd5f 	bl	800448a <I2C_Master_ADD10>
 80039cc:	e082      	b.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_I2C_EV_IRQHandler+0xd2>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	0a5b      	lsrs	r3, r3, #9
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fd78 	bl	80044dc <I2C_Master_ADDR>
 80039ec:	e072      	b.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	089b      	lsrs	r3, r3, #2
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d03b      	beq.n	8003a72 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a08:	f000 80f3 	beq.w	8003bf2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	09db      	lsrs	r3, r3, #7
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00f      	beq.n	8003a38 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	0a9b      	lsrs	r3, r3, #10
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	089b      	lsrs	r3, r3, #2
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d103      	bne.n	8003a38 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f942 	bl	8003cba <I2C_MasterTransmit_TXE>
 8003a36:	e04d      	b.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	089b      	lsrs	r3, r3, #2
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80d6 	beq.w	8003bf2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	0a5b      	lsrs	r3, r3, #9
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80cf 	beq.w	8003bf2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a54:	7bbb      	ldrb	r3, [r7, #14]
 8003a56:	2b21      	cmp	r3, #33	@ 0x21
 8003a58:	d103      	bne.n	8003a62 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f9c9 	bl	8003df2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a60:	e0c7      	b.n	8003bf2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	2b40      	cmp	r3, #64	@ 0x40
 8003a66:	f040 80c4 	bne.w	8003bf2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fa37 	bl	8003ede <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a70:	e0bf      	b.n	8003bf2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a80:	f000 80b7 	beq.w	8003bf2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00f      	beq.n	8003ab0 <HAL_I2C_EV_IRQHandler+0x194>
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	0a9b      	lsrs	r3, r3, #10
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d009      	beq.n	8003ab0 <HAL_I2C_EV_IRQHandler+0x194>
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	089b      	lsrs	r3, r3, #2
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fab0 	bl	800400e <I2C_MasterReceive_RXNE>
 8003aae:	e011      	b.n	8003ad4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	089b      	lsrs	r3, r3, #2
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 809a 	beq.w	8003bf2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	0a5b      	lsrs	r3, r3, #9
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 8093 	beq.w	8003bf2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fb66 	bl	800419e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ad2:	e08e      	b.n	8003bf2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ad4:	e08d      	b.n	8003bf2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	e007      	b.n	8003af8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d012      	beq.n	8003b2a <HAL_I2C_EV_IRQHandler+0x20e>
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	0a5b      	lsrs	r3, r3, #9
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00c      	beq.n	8003b2a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003b20:	69b9      	ldr	r1, [r7, #24]
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 ff31 	bl	800498a <I2C_Slave_ADDR>
 8003b28:	e066      	b.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HAL_I2C_EV_IRQHandler+0x22e>
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	0a5b      	lsrs	r3, r3, #9
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 ff6c 	bl	8004a20 <I2C_Slave_STOPF>
 8003b48:	e056      	b.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b4a:	7bbb      	ldrb	r3, [r7, #14]
 8003b4c:	2b21      	cmp	r3, #33	@ 0x21
 8003b4e:	d002      	beq.n	8003b56 <HAL_I2C_EV_IRQHandler+0x23a>
 8003b50:	7bbb      	ldrb	r3, [r7, #14]
 8003b52:	2b29      	cmp	r3, #41	@ 0x29
 8003b54:	d125      	bne.n	8003ba2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	09db      	lsrs	r3, r3, #7
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00f      	beq.n	8003b82 <HAL_I2C_EV_IRQHandler+0x266>
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	0a9b      	lsrs	r3, r3, #10
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_I2C_EV_IRQHandler+0x266>
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d103      	bne.n	8003b82 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fe49 	bl	8004812 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b80:	e039      	b.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d033      	beq.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x2da>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	0a5b      	lsrs	r3, r3, #9
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d02d      	beq.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fe76 	bl	800488c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ba0:	e029      	b.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00f      	beq.n	8003bce <HAL_I2C_EV_IRQHandler+0x2b2>
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	0a9b      	lsrs	r3, r3, #10
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_I2C_EV_IRQHandler+0x2b2>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fe80 	bl	80048cc <I2C_SlaveReceive_RXNE>
 8003bcc:	e014      	b.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	0a5b      	lsrs	r3, r3, #9
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 feae 	bl	8004948 <I2C_SlaveReceive_BTF>
 8003bec:	e004      	b.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003bee:	bf00      	nop
 8003bf0:	e002      	b.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bf2:	bf00      	nop
 8003bf4:	e000      	b.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bf6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr

08003c46 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	70fb      	strb	r3, [r7, #3]
 8003c52:	4613      	mov	r3, r2
 8003c54:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr

08003c96 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cd0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d150      	bne.n	8003d82 <I2C_MasterTransmit_TXE+0xc8>
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b21      	cmp	r3, #33	@ 0x21
 8003ce4:	d14d      	bne.n	8003d82 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d01d      	beq.n	8003d28 <I2C_MasterTransmit_TXE+0x6e>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	d01a      	beq.n	8003d28 <I2C_MasterTransmit_TXE+0x6e>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cf8:	d016      	beq.n	8003d28 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d08:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2211      	movs	r2, #17
 8003d0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ff6c 	bl	8003bfe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d26:	e060      	b.n	8003dea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d36:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d46:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b40      	cmp	r3, #64	@ 0x40
 8003d60:	d107      	bne.n	8003d72 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ff81 	bl	8003c72 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d70:	e03b      	b.n	8003dea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ff3f 	bl	8003bfe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d80:	e033      	b.n	8003dea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	2b21      	cmp	r3, #33	@ 0x21
 8003d86:	d005      	beq.n	8003d94 <I2C_MasterTransmit_TXE+0xda>
 8003d88:	7bbb      	ldrb	r3, [r7, #14]
 8003d8a:	2b40      	cmp	r3, #64	@ 0x40
 8003d8c:	d12d      	bne.n	8003dea <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
 8003d90:	2b22      	cmp	r3, #34	@ 0x22
 8003d92:	d12a      	bne.n	8003dea <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d108      	bne.n	8003db0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003dae:	e01c      	b.n	8003dea <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b40      	cmp	r3, #64	@ 0x40
 8003dba:	d103      	bne.n	8003dc4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f88e 	bl	8003ede <I2C_MemoryTransmit_TXE_BTF>
}
 8003dc2:	e012      	b.n	8003dea <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	781a      	ldrb	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003de8:	e7ff      	b.n	8003dea <I2C_MasterTransmit_TXE+0x130>
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b21      	cmp	r3, #33	@ 0x21
 8003e0a:	d164      	bne.n	8003ed6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d012      	beq.n	8003e3c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003e3a:	e04c      	b.n	8003ed6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d01d      	beq.n	8003e7e <I2C_MasterTransmit_BTF+0x8c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d01a      	beq.n	8003e7e <I2C_MasterTransmit_BTF+0x8c>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e4e:	d016      	beq.n	8003e7e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e5e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2211      	movs	r2, #17
 8003e64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff fec1 	bl	8003bfe <HAL_I2C_MasterTxCpltCallback>
}
 8003e7c:	e02b      	b.n	8003ed6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e8c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b40      	cmp	r3, #64	@ 0x40
 8003eb6:	d107      	bne.n	8003ec8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff fed6 	bl	8003c72 <HAL_I2C_MemTxCpltCallback>
}
 8003ec6:	e006      	b.n	8003ed6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff fe94 	bl	8003bfe <HAL_I2C_MasterTxCpltCallback>
}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d11d      	bne.n	8003f32 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d10b      	bne.n	8003f16 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0e:	1c9a      	adds	r2, r3, #2
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003f14:	e077      	b.n	8004006 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	121b      	asrs	r3, r3, #8
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f30:	e069      	b.n	8004006 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d10b      	bne.n	8003f52 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f50:	e059      	b.n	8004006 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d152      	bne.n	8004000 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b22      	cmp	r3, #34	@ 0x22
 8003f5e:	d10d      	bne.n	8003f7c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f6e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f7a:	e044      	b.n	8004006 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d015      	beq.n	8003fb2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	2b21      	cmp	r3, #33	@ 0x21
 8003f8a:	d112      	bne.n	8003fb2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	781a      	ldrb	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003fb0:	e029      	b.n	8004006 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d124      	bne.n	8004006 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	2b21      	cmp	r3, #33	@ 0x21
 8003fc0:	d121      	bne.n	8004006 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fd0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff fe3a 	bl	8003c72 <HAL_I2C_MemTxCpltCallback>
}
 8003ffe:	e002      	b.n	8004006 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff f909 	bl	8003218 <I2C_Flush_DR>
}
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b22      	cmp	r3, #34	@ 0x22
 8004020:	f040 80b9 	bne.w	8004196 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d921      	bls.n	800407c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b03      	cmp	r3, #3
 8004066:	f040 8096 	bne.w	8004196 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004078:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800407a:	e08c      	b.n	8004196 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	2b02      	cmp	r3, #2
 8004082:	d07f      	beq.n	8004184 <I2C_MasterReceive_RXNE+0x176>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d002      	beq.n	8004090 <I2C_MasterReceive_RXNE+0x82>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d179      	bne.n	8004184 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f001 faf7 	bl	8005684 <I2C_WaitOnSTOPRequestThroughIT>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d14c      	bne.n	8004136 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b40      	cmp	r3, #64	@ 0x40
 80040f4:	d10a      	bne.n	800410c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff fdbd 	bl	8003c84 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800410a:	e044      	b.n	8004196 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b08      	cmp	r3, #8
 8004118:	d002      	beq.n	8004120 <I2C_MasterReceive_RXNE+0x112>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b20      	cmp	r3, #32
 800411e:	d103      	bne.n	8004128 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	@ 0x30
 8004126:	e002      	b.n	800412e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2212      	movs	r2, #18
 800412c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fd6e 	bl	8003c10 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004134:	e02f      	b.n	8004196 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004144:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fd8a 	bl	8003c96 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004182:	e008      	b.n	8004196 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004192:	605a      	str	r2, [r3, #4]
}
 8004194:	e7ff      	b.n	8004196 <I2C_MasterReceive_RXNE+0x188>
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041aa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d11b      	bne.n	80041ee <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80041ec:	e0c4      	b.n	8004378 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d129      	bne.n	800424c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004206:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b04      	cmp	r3, #4
 800420c:	d00a      	beq.n	8004224 <I2C_MasterReceive_BTF+0x86>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d007      	beq.n	8004224 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004222:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800424a:	e095      	b.n	8004378 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d17d      	bne.n	8004352 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d002      	beq.n	8004262 <I2C_MasterReceive_BTF+0xc4>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b10      	cmp	r3, #16
 8004260:	d108      	bne.n	8004274 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	e016      	b.n	80042a2 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b04      	cmp	r3, #4
 8004278:	d002      	beq.n	8004280 <I2C_MasterReceive_BTF+0xe2>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d108      	bne.n	8004292 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e007      	b.n	80042a2 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80042fc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b40      	cmp	r3, #64	@ 0x40
 8004310:	d10a      	bne.n	8004328 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff fcaf 	bl	8003c84 <HAL_I2C_MemRxCpltCallback>
}
 8004326:	e027      	b.n	8004378 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b08      	cmp	r3, #8
 8004334:	d002      	beq.n	800433c <I2C_MasterReceive_BTF+0x19e>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b20      	cmp	r3, #32
 800433a:	d103      	bne.n	8004344 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	@ 0x30
 8004342:	e002      	b.n	800434a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2212      	movs	r2, #18
 8004348:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff fc60 	bl	8003c10 <HAL_I2C_MasterRxCpltCallback>
}
 8004350:	e012      	b.n	8004378 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b40      	cmp	r3, #64	@ 0x40
 8004392:	d117      	bne.n	80043c4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043ac:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80043ae:	e067      	b.n	8004480 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	611a      	str	r2, [r3, #16]
}
 80043c2:	e05d      	b.n	8004480 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043cc:	d133      	bne.n	8004436 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b21      	cmp	r3, #33	@ 0x21
 80043d8:	d109      	bne.n	80043ee <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043ea:	611a      	str	r2, [r3, #16]
 80043ec:	e008      	b.n	8004400 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <I2C_Master_SB+0x92>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440e:	2b00      	cmp	r3, #0
 8004410:	d108      	bne.n	8004424 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004416:	2b00      	cmp	r3, #0
 8004418:	d032      	beq.n	8004480 <I2C_Master_SB+0x100>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	2b00      	cmp	r3, #0
 8004422:	d02d      	beq.n	8004480 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004432:	605a      	str	r2, [r3, #4]
}
 8004434:	e024      	b.n	8004480 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10e      	bne.n	800445c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004442:	b29b      	uxth	r3, r3
 8004444:	11db      	asrs	r3, r3, #7
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 0306 	and.w	r3, r3, #6
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f063 030f 	orn	r3, r3, #15
 8004452:	b2da      	uxtb	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	611a      	str	r2, [r3, #16]
}
 800445a:	e011      	b.n	8004480 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004460:	2b01      	cmp	r3, #1
 8004462:	d10d      	bne.n	8004480 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004468:	b29b      	uxth	r3, r3
 800446a:	11db      	asrs	r3, r3, #7
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f003 0306 	and.w	r3, r3, #6
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f063 030e 	orn	r3, r3, #14
 8004478:	b2da      	uxtb	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	611a      	str	r2, [r3, #16]
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004496:	b2da      	uxtb	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <I2C_Master_ADD10+0x26>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d108      	bne.n	80044c2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00c      	beq.n	80044d2 <I2C_Master_ADD10+0x48>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d007      	beq.n	80044d2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044d0:	605a      	str	r2, [r3, #4]
  }
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80044dc:	b480      	push	{r7}
 80044de:	b091      	sub	sp, #68	@ 0x44
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b22      	cmp	r3, #34	@ 0x22
 8004504:	f040 8174 	bne.w	80047f0 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10f      	bne.n	8004530 <I2C_Master_ADDR+0x54>
 8004510:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004514:	2b40      	cmp	r3, #64	@ 0x40
 8004516:	d10b      	bne.n	8004530 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004518:	2300      	movs	r3, #0
 800451a:	633b      	str	r3, [r7, #48]	@ 0x30
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	633b      	str	r3, [r7, #48]	@ 0x30
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	633b      	str	r3, [r7, #48]	@ 0x30
 800452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452e:	e16b      	b.n	8004808 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004534:	2b00      	cmp	r3, #0
 8004536:	d11d      	bne.n	8004574 <I2C_Master_ADDR+0x98>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004540:	d118      	bne.n	8004574 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004542:	2300      	movs	r3, #0
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004566:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	651a      	str	r2, [r3, #80]	@ 0x50
 8004572:	e149      	b.n	8004808 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d113      	bne.n	80045a6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004592:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e120      	b.n	80047e8 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f040 808a 	bne.w	80046c6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80045b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045b8:	d137      	bne.n	800462a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045d8:	d113      	bne.n	8004602 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ea:	2300      	movs	r3, #0
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	e0f2      	b.n	80047e8 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004602:	2300      	movs	r3, #0
 8004604:	623b      	str	r3, [r7, #32]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	623b      	str	r3, [r7, #32]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	623b      	str	r3, [r7, #32]
 8004616:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e0de      	b.n	80047e8 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800462a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462c:	2b08      	cmp	r3, #8
 800462e:	d02e      	beq.n	800468e <I2C_Master_ADDR+0x1b2>
 8004630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004632:	2b20      	cmp	r3, #32
 8004634:	d02b      	beq.n	800468e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004638:	2b12      	cmp	r3, #18
 800463a:	d102      	bne.n	8004642 <I2C_Master_ADDR+0x166>
 800463c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463e:	2b01      	cmp	r3, #1
 8004640:	d125      	bne.n	800468e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	2b04      	cmp	r3, #4
 8004646:	d00e      	beq.n	8004666 <I2C_Master_ADDR+0x18a>
 8004648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464a:	2b02      	cmp	r3, #2
 800464c:	d00b      	beq.n	8004666 <I2C_Master_ADDR+0x18a>
 800464e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004650:	2b10      	cmp	r3, #16
 8004652:	d008      	beq.n	8004666 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	e007      	b.n	8004676 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004674:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	61fb      	str	r3, [r7, #28]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	e0ac      	b.n	80047e8 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800469c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	e090      	b.n	80047e8 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d158      	bne.n	8004782 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d021      	beq.n	800471a <I2C_Master_ADDR+0x23e>
 80046d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d01e      	beq.n	800471a <I2C_Master_ADDR+0x23e>
 80046dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046de:	2b10      	cmp	r3, #16
 80046e0:	d01b      	beq.n	800471a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046f0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e012      	b.n	8004740 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004728:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800474a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800474e:	d14b      	bne.n	80047e8 <I2C_Master_ADDR+0x30c>
 8004750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004752:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004756:	d00b      	beq.n	8004770 <I2C_Master_ADDR+0x294>
 8004758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475a:	2b01      	cmp	r3, #1
 800475c:	d008      	beq.n	8004770 <I2C_Master_ADDR+0x294>
 800475e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004760:	2b08      	cmp	r3, #8
 8004762:	d005      	beq.n	8004770 <I2C_Master_ADDR+0x294>
 8004764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004766:	2b10      	cmp	r3, #16
 8004768:	d002      	beq.n	8004770 <I2C_Master_ADDR+0x294>
 800476a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476c:	2b20      	cmp	r3, #32
 800476e:	d13b      	bne.n	80047e8 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800477e:	605a      	str	r2, [r3, #4]
 8004780:	e032      	b.n	80047e8 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004790:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800479c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047a0:	d117      	bne.n	80047d2 <I2C_Master_ADDR+0x2f6>
 80047a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047a8:	d00b      	beq.n	80047c2 <I2C_Master_ADDR+0x2e6>
 80047aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d008      	beq.n	80047c2 <I2C_Master_ADDR+0x2e6>
 80047b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d005      	beq.n	80047c2 <I2C_Master_ADDR+0x2e6>
 80047b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d002      	beq.n	80047c2 <I2C_Master_ADDR+0x2e6>
 80047bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d107      	bne.n	80047d2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047d0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80047ee:	e00b      	b.n	8004808 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f0:	2300      	movs	r3, #0
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	60bb      	str	r3, [r7, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	60bb      	str	r3, [r7, #8]
 8004804:	68bb      	ldr	r3, [r7, #8]
}
 8004806:	e7ff      	b.n	8004808 <I2C_Master_ADDR+0x32c>
 8004808:	bf00      	nop
 800480a:	3744      	adds	r7, #68	@ 0x44
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr

08004812 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004820:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004826:	b29b      	uxth	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d02b      	beq.n	8004884 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	781a      	ldrb	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d114      	bne.n	8004884 <I2C_SlaveTransmit_TXE+0x72>
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	2b29      	cmp	r3, #41	@ 0x29
 800485e:	d111      	bne.n	8004884 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800486e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2221      	movs	r2, #33	@ 0x21
 8004874:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2228      	movs	r2, #40	@ 0x28
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff f9cf 	bl	8003c22 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d011      	beq.n	80048c2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a2:	781a      	ldrb	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d02c      	beq.n	8004940 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d114      	bne.n	8004940 <I2C_SlaveReceive_RXNE+0x74>
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2b2a      	cmp	r3, #42	@ 0x2a
 800491a:	d111      	bne.n	8004940 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800492a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2222      	movs	r2, #34	@ 0x22
 8004930:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2228      	movs	r2, #40	@ 0x28
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff f97a 	bl	8003c34 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d012      	beq.n	8004980 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr

0800498a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004994:	2300      	movs	r3, #0
 8004996:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049a4:	2b28      	cmp	r3, #40	@ 0x28
 80049a6:	d127      	bne.n	80049f8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	09db      	lsrs	r3, r3, #7
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d103      	bne.n	80049dc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	81bb      	strh	r3, [r7, #12]
 80049da:	e002      	b.n	80049e2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80049ea:	89ba      	ldrh	r2, [r7, #12]
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	4619      	mov	r1, r3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff f928 	bl	8003c46 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049f6:	e00e      	b.n	8004a16 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f8:	2300      	movs	r3, #0
 80049fa:	60bb      	str	r3, [r7, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a3e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a40:	2300      	movs	r3, #0
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a6c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a7c:	d172      	bne.n	8004b64 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	2b22      	cmp	r3, #34	@ 0x22
 8004a82:	d002      	beq.n	8004a8a <I2C_Slave_STOPF+0x6a>
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a88:	d135      	bne.n	8004af6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	f043 0204 	orr.w	r2, r3, #4
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004abc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fe f8ba 	bl	8002c3c <HAL_DMA_GetState>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d049      	beq.n	8004b62 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad2:	4a69      	ldr	r2, [pc, #420]	@ (8004c78 <I2C_Slave_STOPF+0x258>)
 8004ad4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe f836 	bl	8002b4c <HAL_DMA_Abort_IT>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d03d      	beq.n	8004b62 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004af0:	4610      	mov	r0, r2
 8004af2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004af4:	e035      	b.n	8004b62 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	f043 0204 	orr.w	r2, r3, #4
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe f884 	bl	8002c3c <HAL_DMA_GetState>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d014      	beq.n	8004b64 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3e:	4a4e      	ldr	r2, [pc, #312]	@ (8004c78 <I2C_Slave_STOPF+0x258>)
 8004b40:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe f800 	bl	8002b4c <HAL_DMA_Abort_IT>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d008      	beq.n	8004b64 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4798      	blx	r3
 8004b60:	e000      	b.n	8004b64 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b62:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d03e      	beq.n	8004bec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d112      	bne.n	8004ba2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bac:	2b40      	cmp	r3, #64	@ 0x40
 8004bae:	d112      	bne.n	8004bd6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	f043 0204 	orr.w	r2, r3, #4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f843 	bl	8004c80 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004bfa:	e039      	b.n	8004c70 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c00:	d109      	bne.n	8004c16 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2228      	movs	r2, #40	@ 0x28
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff f80f 	bl	8003c34 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b28      	cmp	r3, #40	@ 0x28
 8004c20:	d111      	bne.n	8004c46 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a15      	ldr	r2, [pc, #84]	@ (8004c7c <I2C_Slave_STOPF+0x25c>)
 8004c26:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff f80e 	bl	8003c60 <HAL_I2C_ListenCpltCallback>
}
 8004c44:	e014      	b.n	8004c70 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4a:	2b22      	cmp	r3, #34	@ 0x22
 8004c4c:	d002      	beq.n	8004c54 <I2C_Slave_STOPF+0x234>
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b22      	cmp	r3, #34	@ 0x22
 8004c52:	d10d      	bne.n	8004c70 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fe ffe2 	bl	8003c34 <HAL_I2C_SlaveRxCpltCallback>
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	080051e1 	.word	0x080051e1
 8004c7c:	ffff0000 	.word	0xffff0000

08004c80 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c8e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c96:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c98:	7bbb      	ldrb	r3, [r7, #14]
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d002      	beq.n	8004ca4 <I2C_ITError+0x24>
 8004c9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ca0:	2b40      	cmp	r3, #64	@ 0x40
 8004ca2:	d10a      	bne.n	8004cba <I2C_ITError+0x3a>
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	2b22      	cmp	r3, #34	@ 0x22
 8004ca8:	d107      	bne.n	8004cba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cb8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004cc0:	2b28      	cmp	r3, #40	@ 0x28
 8004cc2:	d107      	bne.n	8004cd4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2228      	movs	r2, #40	@ 0x28
 8004cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004cd2:	e015      	b.n	8004d00 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ce2:	d00a      	beq.n	8004cfa <I2C_ITError+0x7a>
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	2b60      	cmp	r3, #96	@ 0x60
 8004ce8:	d007      	beq.n	8004cfa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d0e:	d162      	bne.n	8004dd6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d1e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d020      	beq.n	8004d70 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d32:	4a6a      	ldr	r2, [pc, #424]	@ (8004edc <I2C_ITError+0x25c>)
 8004d34:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fd ff06 	bl	8002b4c <HAL_DMA_Abort_IT>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 8089 	beq.w	8004e5a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0201 	bic.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	4798      	blx	r3
 8004d6e:	e074      	b.n	8004e5a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d74:	4a59      	ldr	r2, [pc, #356]	@ (8004edc <I2C_ITError+0x25c>)
 8004d76:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fd fee5 	bl	8002b4c <HAL_DMA_Abort_IT>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d068      	beq.n	8004e5a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d92:	2b40      	cmp	r3, #64	@ 0x40
 8004d94:	d10b      	bne.n	8004dae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4798      	blx	r3
 8004dd4:	e041      	b.n	8004e5a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b60      	cmp	r3, #96	@ 0x60
 8004de0:	d125      	bne.n	8004e2e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfa:	2b40      	cmp	r3, #64	@ 0x40
 8004dfc:	d10b      	bne.n	8004e16 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0201 	bic.w	r2, r2, #1
 8004e24:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fe ff3e 	bl	8003ca8 <HAL_I2C_AbortCpltCallback>
 8004e2c:	e015      	b.n	8004e5a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e38:	2b40      	cmp	r3, #64	@ 0x40
 8004e3a:	d10b      	bne.n	8004e54 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fe ff1e 	bl	8003c96 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10e      	bne.n	8004e88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d109      	bne.n	8004e88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d104      	bne.n	8004e88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e96:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e9e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d113      	bne.n	8004ed4 <I2C_ITError+0x254>
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	2b28      	cmp	r3, #40	@ 0x28
 8004eb0:	d110      	bne.n	8004ed4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee0 <I2C_ITError+0x260>)
 8004eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fe fec6 	bl	8003c60 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	080051e1 	.word	0x080051e1
 8004ee0:	ffff0000 	.word	0xffff0000

08004ee4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	4608      	mov	r0, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	817b      	strh	r3, [r7, #10]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	813b      	strh	r3, [r7, #8]
 8004efa:	4613      	mov	r3, r2
 8004efc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 fa08 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00d      	beq.n	8004f42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f34:	d103      	bne.n	8004f3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e05f      	b.n	8005002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f42:	897b      	ldrh	r3, [r7, #10]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	492d      	ldr	r1, [pc, #180]	@ (800500c <I2C_RequestMemoryWrite+0x128>)
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fa63 	bl	8005424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e04c      	b.n	8005002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f80:	6a39      	ldr	r1, [r7, #32]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 faee 	bl	8005564 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00d      	beq.n	8004faa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d107      	bne.n	8004fa6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e02b      	b.n	8005002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d105      	bne.n	8004fbc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb0:	893b      	ldrh	r3, [r7, #8]
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	611a      	str	r2, [r3, #16]
 8004fba:	e021      	b.n	8005000 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fbc:	893b      	ldrh	r3, [r7, #8]
 8004fbe:	0a1b      	lsrs	r3, r3, #8
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fcc:	6a39      	ldr	r1, [r7, #32]
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fac8 	bl	8005564 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00d      	beq.n	8004ff6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d107      	bne.n	8004ff2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e005      	b.n	8005002 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ff6:	893b      	ldrh	r3, [r7, #8]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	00010002 	.word	0x00010002

08005010 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	4608      	mov	r0, r1
 800501a:	4611      	mov	r1, r2
 800501c:	461a      	mov	r2, r3
 800501e:	4603      	mov	r3, r0
 8005020:	817b      	strh	r3, [r7, #10]
 8005022:	460b      	mov	r3, r1
 8005024:	813b      	strh	r3, [r7, #8]
 8005026:	4613      	mov	r3, r2
 8005028:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005038:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005048:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	2200      	movs	r2, #0
 8005052:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f96a 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00d      	beq.n	800507e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005070:	d103      	bne.n	800507a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005078:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e0aa      	b.n	80051d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800507e:	897b      	ldrh	r3, [r7, #10]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800508c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	6a3a      	ldr	r2, [r7, #32]
 8005092:	4952      	ldr	r1, [pc, #328]	@ (80051dc <I2C_RequestMemoryRead+0x1cc>)
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f9c5 	bl	8005424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e097      	b.n	80051d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050bc:	6a39      	ldr	r1, [r7, #32]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fa50 	bl	8005564 <I2C_WaitOnTXEFlagUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00d      	beq.n	80050e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d107      	bne.n	80050e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e076      	b.n	80051d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d105      	bne.n	80050f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050ec:	893b      	ldrh	r3, [r7, #8]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	611a      	str	r2, [r3, #16]
 80050f6:	e021      	b.n	800513c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050f8:	893b      	ldrh	r3, [r7, #8]
 80050fa:	0a1b      	lsrs	r3, r3, #8
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005108:	6a39      	ldr	r1, [r7, #32]
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 fa2a 	bl	8005564 <I2C_WaitOnTXEFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00d      	beq.n	8005132 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	2b04      	cmp	r3, #4
 800511c:	d107      	bne.n	800512e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800512c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e050      	b.n	80051d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005132:	893b      	ldrh	r3, [r7, #8]
 8005134:	b2da      	uxtb	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800513c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800513e:	6a39      	ldr	r1, [r7, #32]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 fa0f 	bl	8005564 <I2C_WaitOnTXEFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00d      	beq.n	8005168 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005150:	2b04      	cmp	r3, #4
 8005152:	d107      	bne.n	8005164 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005162:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e035      	b.n	80051d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005176:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	2200      	movs	r2, #0
 8005180:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f8d3 	bl	8005330 <I2C_WaitOnFlagUntilTimeout>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00d      	beq.n	80051ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519e:	d103      	bne.n	80051a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e013      	b.n	80051d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051ac:	897b      	ldrh	r3, [r7, #10]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f043 0301 	orr.w	r3, r3, #1
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	6a3a      	ldr	r2, [r7, #32]
 80051c0:	4906      	ldr	r1, [pc, #24]	@ (80051dc <I2C_RequestMemoryRead+0x1cc>)
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f92e 	bl	8005424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	00010002 	.word	0x00010002

080051e0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80051fa:	4b4b      	ldr	r3, [pc, #300]	@ (8005328 <I2C_DMAAbort+0x148>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	08db      	lsrs	r3, r3, #3
 8005200:	4a4a      	ldr	r2, [pc, #296]	@ (800532c <I2C_DMAAbort+0x14c>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	0a1a      	lsrs	r2, r3, #8
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	00da      	lsls	r2, r3, #3
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	f043 0220 	orr.w	r2, r3, #32
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005226:	e00a      	b.n	800523e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3b01      	subs	r3, #1
 800522c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800523c:	d0ea      	beq.n	8005214 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524a:	2200      	movs	r2, #0
 800524c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525a:	2200      	movs	r2, #0
 800525c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800526c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2200      	movs	r2, #0
 8005272:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005280:	2200      	movs	r2, #0
 8005282:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	2200      	movs	r2, #0
 8005292:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b60      	cmp	r3, #96	@ 0x60
 80052ae:	d10e      	bne.n	80052ce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2200      	movs	r2, #0
 80052c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052c6:	6978      	ldr	r0, [r7, #20]
 80052c8:	f7fe fcee 	bl	8003ca8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052cc:	e027      	b.n	800531e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052ce:	7cfb      	ldrb	r3, [r7, #19]
 80052d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80052d4:	2b28      	cmp	r3, #40	@ 0x28
 80052d6:	d117      	bne.n	8005308 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2228      	movs	r2, #40	@ 0x28
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005306:	e007      	b.n	8005318 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005318:	6978      	ldr	r0, [r7, #20]
 800531a:	f7fe fcbc 	bl	8003c96 <HAL_I2C_ErrorCallback>
}
 800531e:	bf00      	nop
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20000000 	.word	0x20000000
 800532c:	14f8b589 	.word	0x14f8b589

08005330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005340:	e048      	b.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005348:	d044      	beq.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534a:	f7fd fac3 	bl	80028d4 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d302      	bcc.n	8005360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d139      	bne.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	0c1b      	lsrs	r3, r3, #16
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b01      	cmp	r3, #1
 8005368:	d10d      	bne.n	8005386 <I2C_WaitOnFlagUntilTimeout+0x56>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	43da      	mvns	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4013      	ands	r3, r2
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	bf0c      	ite	eq
 800537c:	2301      	moveq	r3, #1
 800537e:	2300      	movne	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	e00c      	b.n	80053a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	43da      	mvns	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	4013      	ands	r3, r2
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d116      	bne.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	f043 0220 	orr.w	r2, r3, #32
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e023      	b.n	800541c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	0c1b      	lsrs	r3, r3, #16
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d10d      	bne.n	80053fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	43da      	mvns	r2, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	4013      	ands	r3, r2
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	e00c      	b.n	8005414 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	43da      	mvns	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4013      	ands	r3, r2
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	bf0c      	ite	eq
 800540c:	2301      	moveq	r3, #1
 800540e:	2300      	movne	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	429a      	cmp	r2, r3
 8005418:	d093      	beq.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005432:	e071      	b.n	8005518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800543e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005442:	d123      	bne.n	800548c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005452:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800545c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005478:	f043 0204 	orr.w	r2, r3, #4
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e067      	b.n	800555c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	d041      	beq.n	8005518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005494:	f7fd fa1e 	bl	80028d4 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d302      	bcc.n	80054aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d136      	bne.n	8005518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d10c      	bne.n	80054ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	43da      	mvns	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4013      	ands	r3, r2
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bf14      	ite	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	2300      	moveq	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	e00b      	b.n	80054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	43da      	mvns	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4013      	ands	r3, r2
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d016      	beq.n	8005518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005504:	f043 0220 	orr.w	r2, r3, #32
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e021      	b.n	800555c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	0c1b      	lsrs	r3, r3, #16
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b01      	cmp	r3, #1
 8005520:	d10c      	bne.n	800553c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	43da      	mvns	r2, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4013      	ands	r3, r2
 800552e:	b29b      	uxth	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	e00b      	b.n	8005554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	43da      	mvns	r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4013      	ands	r3, r2
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	f47f af6d 	bne.w	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005570:	e034      	b.n	80055dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f915 	bl	80057a2 <I2C_IsAcknowledgeFailed>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e034      	b.n	80055ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d028      	beq.n	80055dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fd f9a3 	bl	80028d4 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d11d      	bne.n	80055dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055aa:	2b80      	cmp	r3, #128	@ 0x80
 80055ac:	d016      	beq.n	80055dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c8:	f043 0220 	orr.w	r2, r3, #32
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e007      	b.n	80055ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e6:	2b80      	cmp	r3, #128	@ 0x80
 80055e8:	d1c3      	bne.n	8005572 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005600:	e034      	b.n	800566c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f8cd 	bl	80057a2 <I2C_IsAcknowledgeFailed>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e034      	b.n	800567c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d028      	beq.n	800566c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561a:	f7fd f95b 	bl	80028d4 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	d302      	bcc.n	8005630 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11d      	bne.n	800566c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b04      	cmp	r3, #4
 800563c:	d016      	beq.n	800566c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	f043 0220 	orr.w	r2, r3, #32
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e007      	b.n	800567c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b04      	cmp	r3, #4
 8005678:	d1c3      	bne.n	8005602 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005690:	4b13      	ldr	r3, [pc, #76]	@ (80056e0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	08db      	lsrs	r3, r3, #3
 8005696:	4a13      	ldr	r2, [pc, #76]	@ (80056e4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005698:	fba2 2303 	umull	r2, r3, r2, r3
 800569c:	0a1a      	lsrs	r2, r3, #8
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d107      	bne.n	80056c2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	f043 0220 	orr.w	r2, r3, #32
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e008      	b.n	80056d4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056d0:	d0e9      	beq.n	80056a6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc80      	pop	{r7}
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	20000000 	.word	0x20000000
 80056e4:	14f8b589 	.word	0x14f8b589

080056e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056f4:	e049      	b.n	800578a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b10      	cmp	r3, #16
 8005702:	d119      	bne.n	8005738 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0210 	mvn.w	r2, #16
 800570c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e030      	b.n	800579a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005738:	f7fd f8cc 	bl	80028d4 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	429a      	cmp	r2, r3
 8005746:	d302      	bcc.n	800574e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d11d      	bne.n	800578a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005758:	2b40      	cmp	r3, #64	@ 0x40
 800575a:	d016      	beq.n	800578a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005776:	f043 0220 	orr.w	r2, r3, #32
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e007      	b.n	800579a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005794:	2b40      	cmp	r3, #64	@ 0x40
 8005796:	d1ae      	bne.n	80056f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057b8:	d11b      	bne.n	80057f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	f043 0204 	orr.w	r2, r3, #4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc80      	pop	{r7}
 80057fc:	4770      	bx	lr

080057fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800580e:	d103      	bne.n	8005818 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005816:	e007      	b.n	8005828 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005820:	d102      	bne.n	8005828 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2208      	movs	r2, #8
 8005826:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr
	...

08005834 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e272      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8087 	beq.w	8005962 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005854:	4b92      	ldr	r3, [pc, #584]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 030c 	and.w	r3, r3, #12
 800585c:	2b04      	cmp	r3, #4
 800585e:	d00c      	beq.n	800587a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005860:	4b8f      	ldr	r3, [pc, #572]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 030c 	and.w	r3, r3, #12
 8005868:	2b08      	cmp	r3, #8
 800586a:	d112      	bne.n	8005892 <HAL_RCC_OscConfig+0x5e>
 800586c:	4b8c      	ldr	r3, [pc, #560]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005878:	d10b      	bne.n	8005892 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800587a:	4b89      	ldr	r3, [pc, #548]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d06c      	beq.n	8005960 <HAL_RCC_OscConfig+0x12c>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d168      	bne.n	8005960 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e24c      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800589a:	d106      	bne.n	80058aa <HAL_RCC_OscConfig+0x76>
 800589c:	4b80      	ldr	r3, [pc, #512]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a7f      	ldr	r2, [pc, #508]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80058a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	e02e      	b.n	8005908 <HAL_RCC_OscConfig+0xd4>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10c      	bne.n	80058cc <HAL_RCC_OscConfig+0x98>
 80058b2:	4b7b      	ldr	r3, [pc, #492]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a7a      	ldr	r2, [pc, #488]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80058b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	4b78      	ldr	r3, [pc, #480]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a77      	ldr	r2, [pc, #476]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80058c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	e01d      	b.n	8005908 <HAL_RCC_OscConfig+0xd4>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058d4:	d10c      	bne.n	80058f0 <HAL_RCC_OscConfig+0xbc>
 80058d6:	4b72      	ldr	r3, [pc, #456]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a71      	ldr	r2, [pc, #452]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80058dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	4b6f      	ldr	r3, [pc, #444]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a6e      	ldr	r2, [pc, #440]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80058e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	e00b      	b.n	8005908 <HAL_RCC_OscConfig+0xd4>
 80058f0:	4b6b      	ldr	r3, [pc, #428]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a6a      	ldr	r2, [pc, #424]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80058f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	4b68      	ldr	r3, [pc, #416]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a67      	ldr	r2, [pc, #412]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 8005902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005906:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d013      	beq.n	8005938 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005910:	f7fc ffe0 	bl	80028d4 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005918:	f7fc ffdc 	bl	80028d4 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b64      	cmp	r3, #100	@ 0x64
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e200      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592a:	4b5d      	ldr	r3, [pc, #372]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f0      	beq.n	8005918 <HAL_RCC_OscConfig+0xe4>
 8005936:	e014      	b.n	8005962 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005938:	f7fc ffcc 	bl	80028d4 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005940:	f7fc ffc8 	bl	80028d4 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b64      	cmp	r3, #100	@ 0x64
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e1ec      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005952:	4b53      	ldr	r3, [pc, #332]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0x10c>
 800595e:	e000      	b.n	8005962 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d063      	beq.n	8005a36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800596e:	4b4c      	ldr	r3, [pc, #304]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 030c 	and.w	r3, r3, #12
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00b      	beq.n	8005992 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800597a:	4b49      	ldr	r3, [pc, #292]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f003 030c 	and.w	r3, r3, #12
 8005982:	2b08      	cmp	r3, #8
 8005984:	d11c      	bne.n	80059c0 <HAL_RCC_OscConfig+0x18c>
 8005986:	4b46      	ldr	r3, [pc, #280]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d116      	bne.n	80059c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005992:	4b43      	ldr	r3, [pc, #268]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <HAL_RCC_OscConfig+0x176>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d001      	beq.n	80059aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e1c0      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059aa:	4b3d      	ldr	r3, [pc, #244]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4939      	ldr	r1, [pc, #228]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059be:	e03a      	b.n	8005a36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d020      	beq.n	8005a0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059c8:	4b36      	ldr	r3, [pc, #216]	@ (8005aa4 <HAL_RCC_OscConfig+0x270>)
 80059ca:	2201      	movs	r2, #1
 80059cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ce:	f7fc ff81 	bl	80028d4 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d6:	f7fc ff7d 	bl	80028d4 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e1a1      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e8:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f4:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	4927      	ldr	r1, [pc, #156]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	600b      	str	r3, [r1, #0]
 8005a08:	e015      	b.n	8005a36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a0a:	4b26      	ldr	r3, [pc, #152]	@ (8005aa4 <HAL_RCC_OscConfig+0x270>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a10:	f7fc ff60 	bl	80028d4 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a18:	f7fc ff5c 	bl	80028d4 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e180      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d03a      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d019      	beq.n	8005a7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a4a:	4b17      	ldr	r3, [pc, #92]	@ (8005aa8 <HAL_RCC_OscConfig+0x274>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a50:	f7fc ff40 	bl	80028d4 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a58:	f7fc ff3c 	bl	80028d4 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e160      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa0 <HAL_RCC_OscConfig+0x26c>)
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a76:	2001      	movs	r0, #1
 8005a78:	f000 face 	bl	8006018 <RCC_Delay>
 8005a7c:	e01c      	b.n	8005ab8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa8 <HAL_RCC_OscConfig+0x274>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a84:	f7fc ff26 	bl	80028d4 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a8a:	e00f      	b.n	8005aac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a8c:	f7fc ff22 	bl	80028d4 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d908      	bls.n	8005aac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e146      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	42420000 	.word	0x42420000
 8005aa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aac:	4b92      	ldr	r3, [pc, #584]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e9      	bne.n	8005a8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80a6 	beq.w	8005c12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aca:	4b8b      	ldr	r3, [pc, #556]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10d      	bne.n	8005af2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ad6:	4b88      	ldr	r3, [pc, #544]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	4a87      	ldr	r2, [pc, #540]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ae0:	61d3      	str	r3, [r2, #28]
 8005ae2:	4b85      	ldr	r3, [pc, #532]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aea:	60bb      	str	r3, [r7, #8]
 8005aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af2:	4b82      	ldr	r3, [pc, #520]	@ (8005cfc <HAL_RCC_OscConfig+0x4c8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d118      	bne.n	8005b30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005afe:	4b7f      	ldr	r3, [pc, #508]	@ (8005cfc <HAL_RCC_OscConfig+0x4c8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a7e      	ldr	r2, [pc, #504]	@ (8005cfc <HAL_RCC_OscConfig+0x4c8>)
 8005b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b0a:	f7fc fee3 	bl	80028d4 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b12:	f7fc fedf 	bl	80028d4 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b64      	cmp	r3, #100	@ 0x64
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e103      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b24:	4b75      	ldr	r3, [pc, #468]	@ (8005cfc <HAL_RCC_OscConfig+0x4c8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0f0      	beq.n	8005b12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d106      	bne.n	8005b46 <HAL_RCC_OscConfig+0x312>
 8005b38:	4b6f      	ldr	r3, [pc, #444]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	4a6e      	ldr	r2, [pc, #440]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b3e:	f043 0301 	orr.w	r3, r3, #1
 8005b42:	6213      	str	r3, [r2, #32]
 8005b44:	e02d      	b.n	8005ba2 <HAL_RCC_OscConfig+0x36e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10c      	bne.n	8005b68 <HAL_RCC_OscConfig+0x334>
 8005b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	4a69      	ldr	r2, [pc, #420]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	6213      	str	r3, [r2, #32]
 8005b5a:	4b67      	ldr	r3, [pc, #412]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	4a66      	ldr	r2, [pc, #408]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b60:	f023 0304 	bic.w	r3, r3, #4
 8005b64:	6213      	str	r3, [r2, #32]
 8005b66:	e01c      	b.n	8005ba2 <HAL_RCC_OscConfig+0x36e>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	2b05      	cmp	r3, #5
 8005b6e:	d10c      	bne.n	8005b8a <HAL_RCC_OscConfig+0x356>
 8005b70:	4b61      	ldr	r3, [pc, #388]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	4a60      	ldr	r2, [pc, #384]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b76:	f043 0304 	orr.w	r3, r3, #4
 8005b7a:	6213      	str	r3, [r2, #32]
 8005b7c:	4b5e      	ldr	r3, [pc, #376]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	4a5d      	ldr	r2, [pc, #372]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b82:	f043 0301 	orr.w	r3, r3, #1
 8005b86:	6213      	str	r3, [r2, #32]
 8005b88:	e00b      	b.n	8005ba2 <HAL_RCC_OscConfig+0x36e>
 8005b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	4a5a      	ldr	r2, [pc, #360]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b90:	f023 0301 	bic.w	r3, r3, #1
 8005b94:	6213      	str	r3, [r2, #32]
 8005b96:	4b58      	ldr	r3, [pc, #352]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	4a57      	ldr	r2, [pc, #348]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005b9c:	f023 0304 	bic.w	r3, r3, #4
 8005ba0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d015      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005baa:	f7fc fe93 	bl	80028d4 <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb0:	e00a      	b.n	8005bc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb2:	f7fc fe8f 	bl	80028d4 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e0b1      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ee      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x37e>
 8005bd4:	e014      	b.n	8005c00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bd6:	f7fc fe7d 	bl	80028d4 <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bdc:	e00a      	b.n	8005bf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bde:	f7fc fe79 	bl	80028d4 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e09b      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bf4:	4b40      	ldr	r3, [pc, #256]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1ee      	bne.n	8005bde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d105      	bne.n	8005c12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c06:	4b3c      	ldr	r3, [pc, #240]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	4a3b      	ldr	r2, [pc, #236]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 8087 	beq.w	8005d2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c1c:	4b36      	ldr	r3, [pc, #216]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f003 030c 	and.w	r3, r3, #12
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d061      	beq.n	8005cec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d146      	bne.n	8005cbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c30:	4b33      	ldr	r3, [pc, #204]	@ (8005d00 <HAL_RCC_OscConfig+0x4cc>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c36:	f7fc fe4d 	bl	80028d4 <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3e:	f7fc fe49 	bl	80028d4 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e06d      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c50:	4b29      	ldr	r3, [pc, #164]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1f0      	bne.n	8005c3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c64:	d108      	bne.n	8005c78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c66:	4b24      	ldr	r3, [pc, #144]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	4921      	ldr	r1, [pc, #132]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c78:	4b1f      	ldr	r3, [pc, #124]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a19      	ldr	r1, [r3, #32]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	491b      	ldr	r1, [pc, #108]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c90:	4b1b      	ldr	r3, [pc, #108]	@ (8005d00 <HAL_RCC_OscConfig+0x4cc>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c96:	f7fc fe1d 	bl	80028d4 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c9e:	f7fc fe19 	bl	80028d4 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e03d      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cb0:	4b11      	ldr	r3, [pc, #68]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0f0      	beq.n	8005c9e <HAL_RCC_OscConfig+0x46a>
 8005cbc:	e035      	b.n	8005d2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cbe:	4b10      	ldr	r3, [pc, #64]	@ (8005d00 <HAL_RCC_OscConfig+0x4cc>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc4:	f7fc fe06 	bl	80028d4 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ccc:	f7fc fe02 	bl	80028d4 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e026      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cde:	4b06      	ldr	r3, [pc, #24]	@ (8005cf8 <HAL_RCC_OscConfig+0x4c4>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f0      	bne.n	8005ccc <HAL_RCC_OscConfig+0x498>
 8005cea:	e01e      	b.n	8005d2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e019      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	40007000 	.word	0x40007000
 8005d00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d04:	4b0b      	ldr	r3, [pc, #44]	@ (8005d34 <HAL_RCC_OscConfig+0x500>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d106      	bne.n	8005d26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d001      	beq.n	8005d2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40021000 	.word	0x40021000

08005d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e0d0      	b.n	8005eee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d910      	bls.n	8005d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5a:	4b67      	ldr	r3, [pc, #412]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f023 0207 	bic.w	r2, r3, #7
 8005d62:	4965      	ldr	r1, [pc, #404]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d6a:	4b63      	ldr	r3, [pc, #396]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d001      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0b8      	b.n	8005eee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d020      	beq.n	8005dca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d94:	4b59      	ldr	r3, [pc, #356]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	4a58      	ldr	r2, [pc, #352]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005d9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dac:	4b53      	ldr	r3, [pc, #332]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	4a52      	ldr	r2, [pc, #328]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005db2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005db6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db8:	4b50      	ldr	r3, [pc, #320]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	494d      	ldr	r1, [pc, #308]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d040      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d107      	bne.n	8005dee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dde:	4b47      	ldr	r3, [pc, #284]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d115      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e07f      	b.n	8005eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d107      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df6:	4b41      	ldr	r3, [pc, #260]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e073      	b.n	8005eee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e06:	4b3d      	ldr	r3, [pc, #244]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e06b      	b.n	8005eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e16:	4b39      	ldr	r3, [pc, #228]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f023 0203 	bic.w	r2, r3, #3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	4936      	ldr	r1, [pc, #216]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e28:	f7fc fd54 	bl	80028d4 <HAL_GetTick>
 8005e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2e:	e00a      	b.n	8005e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e30:	f7fc fd50 	bl	80028d4 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e053      	b.n	8005eee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e46:	4b2d      	ldr	r3, [pc, #180]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f003 020c 	and.w	r2, r3, #12
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d1eb      	bne.n	8005e30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e58:	4b27      	ldr	r3, [pc, #156]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d210      	bcs.n	8005e88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e66:	4b24      	ldr	r3, [pc, #144]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f023 0207 	bic.w	r2, r3, #7
 8005e6e:	4922      	ldr	r1, [pc, #136]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e76:	4b20      	ldr	r3, [pc, #128]	@ (8005ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d001      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e032      	b.n	8005eee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d008      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e94:	4b19      	ldr	r3, [pc, #100]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	4916      	ldr	r1, [pc, #88]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005eb2:	4b12      	ldr	r3, [pc, #72]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	490e      	ldr	r1, [pc, #56]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ec6:	f000 f821 	bl	8005f0c <HAL_RCC_GetSysClockFreq>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	091b      	lsrs	r3, r3, #4
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	490a      	ldr	r1, [pc, #40]	@ (8005f00 <HAL_RCC_ClockConfig+0x1c8>)
 8005ed8:	5ccb      	ldrb	r3, [r1, r3]
 8005eda:	fa22 f303 	lsr.w	r3, r2, r3
 8005ede:	4a09      	ldr	r2, [pc, #36]	@ (8005f04 <HAL_RCC_ClockConfig+0x1cc>)
 8005ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005ee2:	4b09      	ldr	r3, [pc, #36]	@ (8005f08 <HAL_RCC_ClockConfig+0x1d0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fc fcb2 	bl	8002850 <HAL_InitTick>

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40022000 	.word	0x40022000
 8005efc:	40021000 	.word	0x40021000
 8005f00:	0800ad10 	.word	0x0800ad10
 8005f04:	20000000 	.word	0x20000000
 8005f08:	20000004 	.word	0x20000004

08005f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	2300      	movs	r3, #0
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f26:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f003 030c 	and.w	r3, r3, #12
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d002      	beq.n	8005f3c <HAL_RCC_GetSysClockFreq+0x30>
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d003      	beq.n	8005f42 <HAL_RCC_GetSysClockFreq+0x36>
 8005f3a:	e027      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f3c:	4b19      	ldr	r3, [pc, #100]	@ (8005fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f3e:	613b      	str	r3, [r7, #16]
      break;
 8005f40:	e027      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	0c9b      	lsrs	r3, r3, #18
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	4a17      	ldr	r2, [pc, #92]	@ (8005fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005f4c:	5cd3      	ldrb	r3, [r2, r3]
 8005f4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d010      	beq.n	8005f7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f5a:	4b11      	ldr	r3, [pc, #68]	@ (8005fa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	0c5b      	lsrs	r3, r3, #17
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	4a11      	ldr	r2, [pc, #68]	@ (8005fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8005f66:	5cd3      	ldrb	r3, [r2, r3]
 8005f68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8005fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f6e:	fb03 f202 	mul.w	r2, r3, r2
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f78:	617b      	str	r3, [r7, #20]
 8005f7a:	e004      	b.n	8005f86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f80:	fb02 f303 	mul.w	r3, r2, r3
 8005f84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	613b      	str	r3, [r7, #16]
      break;
 8005f8a:	e002      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f8c:	4b05      	ldr	r3, [pc, #20]	@ (8005fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f8e:	613b      	str	r3, [r7, #16]
      break;
 8005f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f92:	693b      	ldr	r3, [r7, #16]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	371c      	adds	r7, #28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bc80      	pop	{r7}
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	007a1200 	.word	0x007a1200
 8005fa8:	0800ad28 	.word	0x0800ad28
 8005fac:	0800ad38 	.word	0x0800ad38
 8005fb0:	003d0900 	.word	0x003d0900

08005fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fb8:	4b02      	ldr	r3, [pc, #8]	@ (8005fc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fba:	681b      	ldr	r3, [r3, #0]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr
 8005fc4:	20000000 	.word	0x20000000

08005fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fcc:	f7ff fff2 	bl	8005fb4 <HAL_RCC_GetHCLKFreq>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	4b05      	ldr	r3, [pc, #20]	@ (8005fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	0a1b      	lsrs	r3, r3, #8
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	4903      	ldr	r1, [pc, #12]	@ (8005fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fde:	5ccb      	ldrb	r3, [r1, r3]
 8005fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	0800ad20 	.word	0x0800ad20

08005ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ff4:	f7ff ffde 	bl	8005fb4 <HAL_RCC_GetHCLKFreq>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	4b05      	ldr	r3, [pc, #20]	@ (8006010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	0adb      	lsrs	r3, r3, #11
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	4903      	ldr	r1, [pc, #12]	@ (8006014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006006:	5ccb      	ldrb	r3, [r1, r3]
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800600c:	4618      	mov	r0, r3
 800600e:	bd80      	pop	{r7, pc}
 8006010:	40021000 	.word	0x40021000
 8006014:	0800ad20 	.word	0x0800ad20

08006018 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006020:	4b0a      	ldr	r3, [pc, #40]	@ (800604c <RCC_Delay+0x34>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a0a      	ldr	r2, [pc, #40]	@ (8006050 <RCC_Delay+0x38>)
 8006026:	fba2 2303 	umull	r2, r3, r2, r3
 800602a:	0a5b      	lsrs	r3, r3, #9
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	fb02 f303 	mul.w	r3, r2, r3
 8006032:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006034:	bf00      	nop
  }
  while (Delay --);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1e5a      	subs	r2, r3, #1
 800603a:	60fa      	str	r2, [r7, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1f9      	bne.n	8006034 <RCC_Delay+0x1c>
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	bc80      	pop	{r7}
 800604a:	4770      	bx	lr
 800604c:	20000000 	.word	0x20000000
 8006050:	10624dd3 	.word	0x10624dd3

08006054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e076      	b.n	8006154 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606a:	2b00      	cmp	r3, #0
 800606c:	d108      	bne.n	8006080 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006076:	d009      	beq.n	800608c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	61da      	str	r2, [r3, #28]
 800607e:	e005      	b.n	800608c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fc f9f0 	bl	800248c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006110:	ea42 0103 	orr.w	r1, r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006118:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	0c1a      	lsrs	r2, r3, #16
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f002 0204 	and.w	r2, r2, #4
 8006132:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69da      	ldr	r2, [r3, #28]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006142:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	4613      	mov	r3, r2
 800616a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800616c:	f7fc fbb2 	bl	80028d4 <HAL_GetTick>
 8006170:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b01      	cmp	r3, #1
 8006180:	d001      	beq.n	8006186 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006182:	2302      	movs	r3, #2
 8006184:	e12a      	b.n	80063dc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <HAL_SPI_Transmit+0x36>
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e122      	b.n	80063dc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_SPI_Transmit+0x48>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e11b      	b.n	80063dc <HAL_SPI_Transmit+0x280>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2203      	movs	r2, #3
 80061b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	88fa      	ldrh	r2, [r7, #6]
 80061c4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	88fa      	ldrh	r2, [r7, #6]
 80061ca:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061f2:	d10f      	bne.n	8006214 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006202:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006212:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800621e:	2b40      	cmp	r3, #64	@ 0x40
 8006220:	d007      	beq.n	8006232 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006230:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800623a:	d152      	bne.n	80062e2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <HAL_SPI_Transmit+0xee>
 8006244:	8b7b      	ldrh	r3, [r7, #26]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d145      	bne.n	80062d6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624e:	881a      	ldrh	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625a:	1c9a      	adds	r2, r3, #2
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800626e:	e032      	b.n	80062d6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b02      	cmp	r3, #2
 800627c:	d112      	bne.n	80062a4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006282:	881a      	ldrh	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628e:	1c9a      	adds	r2, r3, #2
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062a2:	e018      	b.n	80062d6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062a4:	f7fc fb16 	bl	80028d4 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d803      	bhi.n	80062bc <HAL_SPI_Transmit+0x160>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ba:	d102      	bne.n	80062c2 <HAL_SPI_Transmit+0x166>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e082      	b.n	80063dc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1c7      	bne.n	8006270 <HAL_SPI_Transmit+0x114>
 80062e0:	e053      	b.n	800638a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <HAL_SPI_Transmit+0x194>
 80062ea:	8b7b      	ldrh	r3, [r7, #26]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d147      	bne.n	8006380 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	7812      	ldrb	r2, [r2, #0]
 80062fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006316:	e033      	b.n	8006380 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b02      	cmp	r3, #2
 8006324:	d113      	bne.n	800634e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	330c      	adds	r3, #12
 8006330:	7812      	ldrb	r2, [r2, #0]
 8006332:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800634c:	e018      	b.n	8006380 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800634e:	f7fc fac1 	bl	80028d4 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d803      	bhi.n	8006366 <HAL_SPI_Transmit+0x20a>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d102      	bne.n	800636c <HAL_SPI_Transmit+0x210>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d109      	bne.n	8006380 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e02d      	b.n	80063dc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1c6      	bne.n	8006318 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 fcc8 	bl	8006d24 <SPI_EndRxTxTransaction>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2220      	movs	r2, #32
 800639e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80063da:	2300      	movs	r3, #0
  }
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3720      	adds	r7, #32
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	4613      	mov	r3, r2
 80063f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d001      	beq.n	8006404 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006400:	2302      	movs	r3, #2
 8006402:	e104      	b.n	800660e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800640c:	d112      	bne.n	8006434 <HAL_SPI_Receive+0x50>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10e      	bne.n	8006434 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2204      	movs	r2, #4
 800641a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800641e:	88fa      	ldrh	r2, [r7, #6]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	4613      	mov	r3, r2
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 f8f3 	bl	8006616 <HAL_SPI_TransmitReceive>
 8006430:	4603      	mov	r3, r0
 8006432:	e0ec      	b.n	800660e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006434:	f7fc fa4e 	bl	80028d4 <HAL_GetTick>
 8006438:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <HAL_SPI_Receive+0x62>
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e0e1      	b.n	800660e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_SPI_Receive+0x74>
 8006454:	2302      	movs	r3, #2
 8006456:	e0da      	b.n	800660e <HAL_SPI_Receive+0x22a>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2204      	movs	r2, #4
 8006464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	88fa      	ldrh	r2, [r7, #6]
 8006478:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	88fa      	ldrh	r2, [r7, #6]
 800647e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a6:	d10f      	bne.n	80064c8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80064c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d2:	2b40      	cmp	r3, #64	@ 0x40
 80064d4:	d007      	beq.n	80064e6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d170      	bne.n	80065d0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80064ee:	e035      	b.n	800655c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d115      	bne.n	800652a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f103 020c 	add.w	r2, r3, #12
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650a:	7812      	ldrb	r2, [r2, #0]
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006528:	e018      	b.n	800655c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800652a:	f7fc f9d3 	bl	80028d4 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d803      	bhi.n	8006542 <HAL_SPI_Receive+0x15e>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d102      	bne.n	8006548 <HAL_SPI_Receive+0x164>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d109      	bne.n	800655c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e058      	b.n	800660e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006560:	b29b      	uxth	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1c4      	bne.n	80064f0 <HAL_SPI_Receive+0x10c>
 8006566:	e038      	b.n	80065da <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b01      	cmp	r3, #1
 8006574:	d113      	bne.n	800659e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006580:	b292      	uxth	r2, r2
 8006582:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006588:	1c9a      	adds	r2, r3, #2
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800659c:	e018      	b.n	80065d0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800659e:	f7fc f999 	bl	80028d4 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d803      	bhi.n	80065b6 <HAL_SPI_Receive+0x1d2>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b4:	d102      	bne.n	80065bc <HAL_SPI_Receive+0x1d8>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e01e      	b.n	800660e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1c6      	bne.n	8006568 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 fb4e 	bl	8006c80 <SPI_EndRxTransaction>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800660c:	2300      	movs	r3, #0
  }
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b08a      	sub	sp, #40	@ 0x28
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006624:	2301      	movs	r3, #1
 8006626:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006628:	f7fc f954 	bl	80028d4 <HAL_GetTick>
 800662c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006634:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800663c:	887b      	ldrh	r3, [r7, #2]
 800663e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006640:	7ffb      	ldrb	r3, [r7, #31]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d00c      	beq.n	8006660 <HAL_SPI_TransmitReceive+0x4a>
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800664c:	d106      	bne.n	800665c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d102      	bne.n	800665c <HAL_SPI_TransmitReceive+0x46>
 8006656:	7ffb      	ldrb	r3, [r7, #31]
 8006658:	2b04      	cmp	r3, #4
 800665a:	d001      	beq.n	8006660 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800665c:	2302      	movs	r3, #2
 800665e:	e17f      	b.n	8006960 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d005      	beq.n	8006672 <HAL_SPI_TransmitReceive+0x5c>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <HAL_SPI_TransmitReceive+0x5c>
 800666c:	887b      	ldrh	r3, [r7, #2]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e174      	b.n	8006960 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_SPI_TransmitReceive+0x6e>
 8006680:	2302      	movs	r3, #2
 8006682:	e16d      	b.n	8006960 <HAL_SPI_TransmitReceive+0x34a>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b04      	cmp	r3, #4
 8006696:	d003      	beq.n	80066a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2205      	movs	r2, #5
 800669c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	887a      	ldrh	r2, [r7, #2]
 80066b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	887a      	ldrh	r2, [r7, #2]
 80066b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	887a      	ldrh	r2, [r7, #2]
 80066c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	887a      	ldrh	r2, [r7, #2]
 80066c8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e0:	2b40      	cmp	r3, #64	@ 0x40
 80066e2:	d007      	beq.n	80066f4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066fc:	d17e      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <HAL_SPI_TransmitReceive+0xf6>
 8006706:	8afb      	ldrh	r3, [r7, #22]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d16c      	bne.n	80067e6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006710:	881a      	ldrh	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671c:	1c9a      	adds	r2, r3, #2
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006726:	b29b      	uxth	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	b29a      	uxth	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006730:	e059      	b.n	80067e6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b02      	cmp	r3, #2
 800673e:	d11b      	bne.n	8006778 <HAL_SPI_TransmitReceive+0x162>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d016      	beq.n	8006778 <HAL_SPI_TransmitReceive+0x162>
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	2b01      	cmp	r3, #1
 800674e:	d113      	bne.n	8006778 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006754:	881a      	ldrh	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006760:	1c9a      	adds	r2, r3, #2
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b01      	subs	r3, #1
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b01      	cmp	r3, #1
 8006784:	d119      	bne.n	80067ba <HAL_SPI_TransmitReceive+0x1a4>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d014      	beq.n	80067ba <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679a:	b292      	uxth	r2, r2
 800679c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a2:	1c9a      	adds	r2, r3, #2
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067b6:	2301      	movs	r3, #1
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067ba:	f7fc f88b 	bl	80028d4 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d80d      	bhi.n	80067e6 <HAL_SPI_TransmitReceive+0x1d0>
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d009      	beq.n	80067e6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e0bc      	b.n	8006960 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1a0      	bne.n	8006732 <HAL_SPI_TransmitReceive+0x11c>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d19b      	bne.n	8006732 <HAL_SPI_TransmitReceive+0x11c>
 80067fa:	e082      	b.n	8006902 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <HAL_SPI_TransmitReceive+0x1f4>
 8006804:	8afb      	ldrh	r3, [r7, #22]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d171      	bne.n	80068ee <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	330c      	adds	r3, #12
 8006814:	7812      	ldrb	r2, [r2, #0]
 8006816:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006830:	e05d      	b.n	80068ee <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b02      	cmp	r3, #2
 800683e:	d11c      	bne.n	800687a <HAL_SPI_TransmitReceive+0x264>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006844:	b29b      	uxth	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d017      	beq.n	800687a <HAL_SPI_TransmitReceive+0x264>
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	2b01      	cmp	r3, #1
 800684e:	d114      	bne.n	800687a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	330c      	adds	r3, #12
 800685a:	7812      	ldrb	r2, [r2, #0]
 800685c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800686c:	b29b      	uxth	r3, r3
 800686e:	3b01      	subs	r3, #1
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b01      	cmp	r3, #1
 8006886:	d119      	bne.n	80068bc <HAL_SPI_TransmitReceive+0x2a6>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d014      	beq.n	80068bc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068b8:	2301      	movs	r3, #1
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068bc:	f7fc f80a 	bl	80028d4 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d803      	bhi.n	80068d4 <HAL_SPI_TransmitReceive+0x2be>
 80068cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d2:	d102      	bne.n	80068da <HAL_SPI_TransmitReceive+0x2c4>
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e038      	b.n	8006960 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d19c      	bne.n	8006832 <HAL_SPI_TransmitReceive+0x21c>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d197      	bne.n	8006832 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006902:	6a3a      	ldr	r2, [r7, #32]
 8006904:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 fa0c 	bl	8006d24 <SPI_EndRxTxTransaction>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d008      	beq.n	8006924 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2220      	movs	r2, #32
 8006916:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e01d      	b.n	8006960 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10a      	bne.n	8006942 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800692c:	2300      	movs	r3, #0
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	613b      	str	r3, [r7, #16]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800695e:	2300      	movs	r3, #0
  }
}
 8006960:	4618      	mov	r0, r3
 8006962:	3728      	adds	r7, #40	@ 0x28
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	099b      	lsrs	r3, r3, #6
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10f      	bne.n	80069ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	099b      	lsrs	r3, r3, #6
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d004      	beq.n	80069ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
    return;
 80069aa:	e0be      	b.n	8006b2a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	085b      	lsrs	r3, r3, #1
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00a      	beq.n	80069ce <HAL_SPI_IRQHandler+0x66>
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	09db      	lsrs	r3, r3, #7
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d004      	beq.n	80069ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	4798      	blx	r3
    return;
 80069cc:	e0ad      	b.n	8006b2a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d106      	bne.n	80069e8 <HAL_SPI_IRQHandler+0x80>
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	099b      	lsrs	r3, r3, #6
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 80a1 	beq.w	8006b2a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	095b      	lsrs	r3, r3, #5
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 809a 	beq.w	8006b2a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	099b      	lsrs	r3, r3, #6
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d023      	beq.n	8006a4a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d011      	beq.n	8006a32 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a12:	f043 0204 	orr.w	r2, r3, #4
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	e00b      	b.n	8006a4a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a32:	2300      	movs	r3, #0
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	613b      	str	r3, [r7, #16]
 8006a46:	693b      	ldr	r3, [r7, #16]
        return;
 8006a48:	e06f      	b.n	8006b2a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	095b      	lsrs	r3, r3, #5
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d014      	beq.n	8006a80 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a5a:	f043 0201 	orr.w	r2, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	60fb      	str	r3, [r7, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d04f      	beq.n	8006b28 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a96:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <HAL_SPI_IRQHandler+0x14c>
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d034      	beq.n	8006b1e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0203 	bic.w	r2, r2, #3
 8006ac2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d011      	beq.n	8006af0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ad0:	4a17      	ldr	r2, [pc, #92]	@ (8006b30 <HAL_SPI_IRQHandler+0x1c8>)
 8006ad2:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fc f837 	bl	8002b4c <HAL_DMA_Abort_IT>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d005      	beq.n	8006af0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d016      	beq.n	8006b26 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006afc:	4a0c      	ldr	r2, [pc, #48]	@ (8006b30 <HAL_SPI_IRQHandler+0x1c8>)
 8006afe:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fc f821 	bl	8002b4c <HAL_DMA_Abort_IT>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00a      	beq.n	8006b26 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006b1c:	e003      	b.n	8006b26 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f808 	bl	8006b34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006b24:	e000      	b.n	8006b28 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006b26:	bf00      	nop
    return;
 8006b28:	bf00      	nop
  }
}
 8006b2a:	3720      	adds	r7, #32
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	08006b47 	.word	0x08006b47

08006b34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr

08006b46 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b52:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f7ff ffe7 	bl	8006b34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b66:	bf00      	nop
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	603b      	str	r3, [r7, #0]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b80:	f7fb fea8 	bl	80028d4 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b90:	f7fb fea0 	bl	80028d4 <HAL_GetTick>
 8006b94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b96:	4b39      	ldr	r3, [pc, #228]	@ (8006c7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	015b      	lsls	r3, r3, #5
 8006b9c:	0d1b      	lsrs	r3, r3, #20
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	fb02 f303 	mul.w	r3, r2, r3
 8006ba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ba6:	e054      	b.n	8006c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bae:	d050      	beq.n	8006c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bb0:	f7fb fe90 	bl	80028d4 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d902      	bls.n	8006bc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d13d      	bne.n	8006c42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006bd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bde:	d111      	bne.n	8006c04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006be8:	d004      	beq.n	8006bf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bf2:	d107      	bne.n	8006c04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c0c:	d10f      	bne.n	8006c2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e017      	b.n	8006c72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	bf0c      	ite	eq
 8006c62:	2301      	moveq	r3, #1
 8006c64:	2300      	movne	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d19b      	bne.n	8006ba8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3720      	adds	r7, #32
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000000 	.word	0x20000000

08006c80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c94:	d111      	bne.n	8006cba <SPI_EndRxTransaction+0x3a>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c9e:	d004      	beq.n	8006caa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca8:	d107      	bne.n	8006cba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cb8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cc2:	d117      	bne.n	8006cf4 <SPI_EndRxTransaction+0x74>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ccc:	d112      	bne.n	8006cf4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7ff ff49 	bl	8006b70 <SPI_WaitFlagStateUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01a      	beq.n	8006d1a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce8:	f043 0220 	orr.w	r2, r3, #32
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e013      	b.n	8006d1c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2180      	movs	r1, #128	@ 0x80
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7ff ff36 	bl	8006b70 <SPI_WaitFlagStateUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d007      	beq.n	8006d1a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0e:	f043 0220 	orr.w	r2, r3, #32
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e000      	b.n	8006d1c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af02      	add	r7, sp, #8
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2201      	movs	r2, #1
 8006d38:	2102      	movs	r1, #2
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f7ff ff18 	bl	8006b70 <SPI_WaitFlagStateUntilTimeout>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d007      	beq.n	8006d56 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4a:	f043 0220 	orr.w	r2, r3, #32
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e013      	b.n	8006d7e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2180      	movs	r1, #128	@ 0x80
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7ff ff05 	bl	8006b70 <SPI_WaitFlagStateUntilTimeout>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d007      	beq.n	8006d7c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d70:	f043 0220 	orr.w	r2, r3, #32
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e000      	b.n	8006d7e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e042      	b.n	8006e1e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7fb fbbf 	bl	8002530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2224      	movs	r2, #36	@ 0x24
 8006db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dc8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f972 	bl	80070b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691a      	ldr	r2, [r3, #16]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dfe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b08a      	sub	sp, #40	@ 0x28
 8006e2a:	af02      	add	r7, sp, #8
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	4613      	mov	r3, r2
 8006e34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b20      	cmp	r3, #32
 8006e44:	d175      	bne.n	8006f32 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <HAL_UART_Transmit+0x2c>
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e06e      	b.n	8006f34 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2221      	movs	r2, #33	@ 0x21
 8006e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e64:	f7fb fd36 	bl	80028d4 <HAL_GetTick>
 8006e68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	88fa      	ldrh	r2, [r7, #6]
 8006e6e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	88fa      	ldrh	r2, [r7, #6]
 8006e74:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e7e:	d108      	bne.n	8006e92 <HAL_UART_Transmit+0x6c>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d104      	bne.n	8006e92 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	61bb      	str	r3, [r7, #24]
 8006e90:	e003      	b.n	8006e9a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e9a:	e02e      	b.n	8006efa <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2180      	movs	r1, #128	@ 0x80
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f848 	bl	8006f3c <UART_WaitOnFlagUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d005      	beq.n	8006ebe <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e03a      	b.n	8006f34 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10b      	bne.n	8006edc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ed2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	3302      	adds	r3, #2
 8006ed8:	61bb      	str	r3, [r7, #24]
 8006eda:	e007      	b.n	8006eec <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1cb      	bne.n	8006e9c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2140      	movs	r1, #64	@ 0x40
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 f814 	bl	8006f3c <UART_WaitOnFlagUntilTimeout>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d005      	beq.n	8006f26 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e006      	b.n	8006f34 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e000      	b.n	8006f34 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006f32:	2302      	movs	r3, #2
  }
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3720      	adds	r7, #32
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f4c:	e03b      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f54:	d037      	beq.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f56:	f7fb fcbd 	bl	80028d4 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	6a3a      	ldr	r2, [r7, #32]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d302      	bcc.n	8006f6c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e03a      	b.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d023      	beq.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2b80      	cmp	r3, #128	@ 0x80
 8006f82:	d020      	beq.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b40      	cmp	r3, #64	@ 0x40
 8006f88:	d01d      	beq.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b08      	cmp	r3, #8
 8006f96:	d116      	bne.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 f81d 	bl	8006fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2208      	movs	r2, #8
 8006fb8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e00f      	b.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	bf0c      	ite	eq
 8006fd6:	2301      	moveq	r3, #1
 8006fd8:	2300      	movne	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	461a      	mov	r2, r3
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d0b4      	beq.n	8006f4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b095      	sub	sp, #84	@ 0x54
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	330c      	adds	r3, #12
 8006ffc:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007008:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800700c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	330c      	adds	r3, #12
 8007014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007016:	643a      	str	r2, [r7, #64]	@ 0x40
 8007018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800701c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e5      	bne.n	8006ff6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3314      	adds	r3, #20
 8007030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	61fb      	str	r3, [r7, #28]
   return(result);
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	f023 0301 	bic.w	r3, r3, #1
 8007040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3314      	adds	r3, #20
 8007048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800704a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800704c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007050:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007052:	e841 2300 	strex	r3, r2, [r1]
 8007056:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1e5      	bne.n	800702a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007062:	2b01      	cmp	r3, #1
 8007064:	d119      	bne.n	800709a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	330c      	adds	r3, #12
 800706c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	60bb      	str	r3, [r7, #8]
   return(result);
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f023 0310 	bic.w	r3, r3, #16
 800707c:	647b      	str	r3, [r7, #68]	@ 0x44
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	330c      	adds	r3, #12
 8007084:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007086:	61ba      	str	r2, [r7, #24]
 8007088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6979      	ldr	r1, [r7, #20]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	613b      	str	r3, [r7, #16]
   return(result);
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e5      	bne.n	8007066 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80070a8:	bf00      	nop
 80070aa:	3754      	adds	r7, #84	@ 0x54
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bc80      	pop	{r7}
 80070b0:	4770      	bx	lr
	...

080070b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80070ee:	f023 030c 	bic.w	r3, r3, #12
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	430b      	orrs	r3, r1
 80070fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a2c      	ldr	r2, [pc, #176]	@ (80071c8 <UART_SetConfig+0x114>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d103      	bne.n	8007124 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800711c:	f7fe ff68 	bl	8005ff0 <HAL_RCC_GetPCLK2Freq>
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	e002      	b.n	800712a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007124:	f7fe ff50 	bl	8005fc8 <HAL_RCC_GetPCLK1Freq>
 8007128:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4613      	mov	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	009a      	lsls	r2, r3, #2
 8007134:	441a      	add	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007140:	4a22      	ldr	r2, [pc, #136]	@ (80071cc <UART_SetConfig+0x118>)
 8007142:	fba2 2303 	umull	r2, r3, r2, r3
 8007146:	095b      	lsrs	r3, r3, #5
 8007148:	0119      	lsls	r1, r3, #4
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009a      	lsls	r2, r3, #2
 8007154:	441a      	add	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007160:	4b1a      	ldr	r3, [pc, #104]	@ (80071cc <UART_SetConfig+0x118>)
 8007162:	fba3 0302 	umull	r0, r3, r3, r2
 8007166:	095b      	lsrs	r3, r3, #5
 8007168:	2064      	movs	r0, #100	@ 0x64
 800716a:	fb00 f303 	mul.w	r3, r0, r3
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	3332      	adds	r3, #50	@ 0x32
 8007174:	4a15      	ldr	r2, [pc, #84]	@ (80071cc <UART_SetConfig+0x118>)
 8007176:	fba2 2303 	umull	r2, r3, r2, r3
 800717a:	095b      	lsrs	r3, r3, #5
 800717c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007180:	4419      	add	r1, r3
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	009a      	lsls	r2, r3, #2
 800718c:	441a      	add	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	fbb2 f2f3 	udiv	r2, r2, r3
 8007198:	4b0c      	ldr	r3, [pc, #48]	@ (80071cc <UART_SetConfig+0x118>)
 800719a:	fba3 0302 	umull	r0, r3, r3, r2
 800719e:	095b      	lsrs	r3, r3, #5
 80071a0:	2064      	movs	r0, #100	@ 0x64
 80071a2:	fb00 f303 	mul.w	r3, r0, r3
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	3332      	adds	r3, #50	@ 0x32
 80071ac:	4a07      	ldr	r2, [pc, #28]	@ (80071cc <UART_SetConfig+0x118>)
 80071ae:	fba2 2303 	umull	r2, r3, r2, r3
 80071b2:	095b      	lsrs	r3, r3, #5
 80071b4:	f003 020f 	and.w	r2, r3, #15
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	440a      	add	r2, r1
 80071be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40013800 	.word	0x40013800
 80071cc:	51eb851f 	.word	0x51eb851f

080071d0 <__cvt>:
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d6:	461d      	mov	r5, r3
 80071d8:	bfbb      	ittet	lt
 80071da:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80071de:	461d      	movlt	r5, r3
 80071e0:	2300      	movge	r3, #0
 80071e2:	232d      	movlt	r3, #45	@ 0x2d
 80071e4:	b088      	sub	sp, #32
 80071e6:	4614      	mov	r4, r2
 80071e8:	bfb8      	it	lt
 80071ea:	4614      	movlt	r4, r2
 80071ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80071ee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80071f0:	7013      	strb	r3, [r2, #0]
 80071f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80071f8:	f023 0820 	bic.w	r8, r3, #32
 80071fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007200:	d005      	beq.n	800720e <__cvt+0x3e>
 8007202:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007206:	d100      	bne.n	800720a <__cvt+0x3a>
 8007208:	3601      	adds	r6, #1
 800720a:	2302      	movs	r3, #2
 800720c:	e000      	b.n	8007210 <__cvt+0x40>
 800720e:	2303      	movs	r3, #3
 8007210:	aa07      	add	r2, sp, #28
 8007212:	9204      	str	r2, [sp, #16]
 8007214:	aa06      	add	r2, sp, #24
 8007216:	e9cd a202 	strd	sl, r2, [sp, #8]
 800721a:	e9cd 3600 	strd	r3, r6, [sp]
 800721e:	4622      	mov	r2, r4
 8007220:	462b      	mov	r3, r5
 8007222:	f000 fe81 	bl	8007f28 <_dtoa_r>
 8007226:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800722a:	4607      	mov	r7, r0
 800722c:	d119      	bne.n	8007262 <__cvt+0x92>
 800722e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007230:	07db      	lsls	r3, r3, #31
 8007232:	d50e      	bpl.n	8007252 <__cvt+0x82>
 8007234:	eb00 0906 	add.w	r9, r0, r6
 8007238:	2200      	movs	r2, #0
 800723a:	2300      	movs	r3, #0
 800723c:	4620      	mov	r0, r4
 800723e:	4629      	mov	r1, r5
 8007240:	f7f9 fbb2 	bl	80009a8 <__aeabi_dcmpeq>
 8007244:	b108      	cbz	r0, 800724a <__cvt+0x7a>
 8007246:	f8cd 901c 	str.w	r9, [sp, #28]
 800724a:	2230      	movs	r2, #48	@ 0x30
 800724c:	9b07      	ldr	r3, [sp, #28]
 800724e:	454b      	cmp	r3, r9
 8007250:	d31e      	bcc.n	8007290 <__cvt+0xc0>
 8007252:	4638      	mov	r0, r7
 8007254:	9b07      	ldr	r3, [sp, #28]
 8007256:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007258:	1bdb      	subs	r3, r3, r7
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	b008      	add	sp, #32
 800725e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007262:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007266:	eb00 0906 	add.w	r9, r0, r6
 800726a:	d1e5      	bne.n	8007238 <__cvt+0x68>
 800726c:	7803      	ldrb	r3, [r0, #0]
 800726e:	2b30      	cmp	r3, #48	@ 0x30
 8007270:	d10a      	bne.n	8007288 <__cvt+0xb8>
 8007272:	2200      	movs	r2, #0
 8007274:	2300      	movs	r3, #0
 8007276:	4620      	mov	r0, r4
 8007278:	4629      	mov	r1, r5
 800727a:	f7f9 fb95 	bl	80009a8 <__aeabi_dcmpeq>
 800727e:	b918      	cbnz	r0, 8007288 <__cvt+0xb8>
 8007280:	f1c6 0601 	rsb	r6, r6, #1
 8007284:	f8ca 6000 	str.w	r6, [sl]
 8007288:	f8da 3000 	ldr.w	r3, [sl]
 800728c:	4499      	add	r9, r3
 800728e:	e7d3      	b.n	8007238 <__cvt+0x68>
 8007290:	1c59      	adds	r1, r3, #1
 8007292:	9107      	str	r1, [sp, #28]
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e7d9      	b.n	800724c <__cvt+0x7c>

08007298 <__exponent>:
 8007298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800729a:	2900      	cmp	r1, #0
 800729c:	bfb6      	itet	lt
 800729e:	232d      	movlt	r3, #45	@ 0x2d
 80072a0:	232b      	movge	r3, #43	@ 0x2b
 80072a2:	4249      	neglt	r1, r1
 80072a4:	2909      	cmp	r1, #9
 80072a6:	7002      	strb	r2, [r0, #0]
 80072a8:	7043      	strb	r3, [r0, #1]
 80072aa:	dd29      	ble.n	8007300 <__exponent+0x68>
 80072ac:	f10d 0307 	add.w	r3, sp, #7
 80072b0:	461d      	mov	r5, r3
 80072b2:	270a      	movs	r7, #10
 80072b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80072b8:	461a      	mov	r2, r3
 80072ba:	fb07 1416 	mls	r4, r7, r6, r1
 80072be:	3430      	adds	r4, #48	@ 0x30
 80072c0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80072c4:	460c      	mov	r4, r1
 80072c6:	2c63      	cmp	r4, #99	@ 0x63
 80072c8:	4631      	mov	r1, r6
 80072ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80072ce:	dcf1      	bgt.n	80072b4 <__exponent+0x1c>
 80072d0:	3130      	adds	r1, #48	@ 0x30
 80072d2:	1e94      	subs	r4, r2, #2
 80072d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80072d8:	4623      	mov	r3, r4
 80072da:	1c41      	adds	r1, r0, #1
 80072dc:	42ab      	cmp	r3, r5
 80072de:	d30a      	bcc.n	80072f6 <__exponent+0x5e>
 80072e0:	f10d 0309 	add.w	r3, sp, #9
 80072e4:	1a9b      	subs	r3, r3, r2
 80072e6:	42ac      	cmp	r4, r5
 80072e8:	bf88      	it	hi
 80072ea:	2300      	movhi	r3, #0
 80072ec:	3302      	adds	r3, #2
 80072ee:	4403      	add	r3, r0
 80072f0:	1a18      	subs	r0, r3, r0
 80072f2:	b003      	add	sp, #12
 80072f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80072fa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80072fe:	e7ed      	b.n	80072dc <__exponent+0x44>
 8007300:	2330      	movs	r3, #48	@ 0x30
 8007302:	3130      	adds	r1, #48	@ 0x30
 8007304:	7083      	strb	r3, [r0, #2]
 8007306:	70c1      	strb	r1, [r0, #3]
 8007308:	1d03      	adds	r3, r0, #4
 800730a:	e7f1      	b.n	80072f0 <__exponent+0x58>

0800730c <_printf_float>:
 800730c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007310:	b091      	sub	sp, #68	@ 0x44
 8007312:	460c      	mov	r4, r1
 8007314:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007318:	4616      	mov	r6, r2
 800731a:	461f      	mov	r7, r3
 800731c:	4605      	mov	r5, r0
 800731e:	f000 fcf5 	bl	8007d0c <_localeconv_r>
 8007322:	6803      	ldr	r3, [r0, #0]
 8007324:	4618      	mov	r0, r3
 8007326:	9308      	str	r3, [sp, #32]
 8007328:	f7f8 ff12 	bl	8000150 <strlen>
 800732c:	2300      	movs	r3, #0
 800732e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007330:	f8d8 3000 	ldr.w	r3, [r8]
 8007334:	9009      	str	r0, [sp, #36]	@ 0x24
 8007336:	3307      	adds	r3, #7
 8007338:	f023 0307 	bic.w	r3, r3, #7
 800733c:	f103 0208 	add.w	r2, r3, #8
 8007340:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007344:	f8d4 b000 	ldr.w	fp, [r4]
 8007348:	f8c8 2000 	str.w	r2, [r8]
 800734c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007350:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007354:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007356:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800735a:	f04f 32ff 	mov.w	r2, #4294967295
 800735e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007362:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007366:	4b9c      	ldr	r3, [pc, #624]	@ (80075d8 <_printf_float+0x2cc>)
 8007368:	f7f9 fb50 	bl	8000a0c <__aeabi_dcmpun>
 800736c:	bb70      	cbnz	r0, 80073cc <_printf_float+0xc0>
 800736e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007372:	f04f 32ff 	mov.w	r2, #4294967295
 8007376:	4b98      	ldr	r3, [pc, #608]	@ (80075d8 <_printf_float+0x2cc>)
 8007378:	f7f9 fb2a 	bl	80009d0 <__aeabi_dcmple>
 800737c:	bb30      	cbnz	r0, 80073cc <_printf_float+0xc0>
 800737e:	2200      	movs	r2, #0
 8007380:	2300      	movs	r3, #0
 8007382:	4640      	mov	r0, r8
 8007384:	4649      	mov	r1, r9
 8007386:	f7f9 fb19 	bl	80009bc <__aeabi_dcmplt>
 800738a:	b110      	cbz	r0, 8007392 <_printf_float+0x86>
 800738c:	232d      	movs	r3, #45	@ 0x2d
 800738e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007392:	4a92      	ldr	r2, [pc, #584]	@ (80075dc <_printf_float+0x2d0>)
 8007394:	4b92      	ldr	r3, [pc, #584]	@ (80075e0 <_printf_float+0x2d4>)
 8007396:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800739a:	bf8c      	ite	hi
 800739c:	4690      	movhi	r8, r2
 800739e:	4698      	movls	r8, r3
 80073a0:	2303      	movs	r3, #3
 80073a2:	f04f 0900 	mov.w	r9, #0
 80073a6:	6123      	str	r3, [r4, #16]
 80073a8:	f02b 0304 	bic.w	r3, fp, #4
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	4633      	mov	r3, r6
 80073b0:	4621      	mov	r1, r4
 80073b2:	4628      	mov	r0, r5
 80073b4:	9700      	str	r7, [sp, #0]
 80073b6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80073b8:	f000 f9d4 	bl	8007764 <_printf_common>
 80073bc:	3001      	adds	r0, #1
 80073be:	f040 8090 	bne.w	80074e2 <_printf_float+0x1d6>
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295
 80073c6:	b011      	add	sp, #68	@ 0x44
 80073c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073cc:	4642      	mov	r2, r8
 80073ce:	464b      	mov	r3, r9
 80073d0:	4640      	mov	r0, r8
 80073d2:	4649      	mov	r1, r9
 80073d4:	f7f9 fb1a 	bl	8000a0c <__aeabi_dcmpun>
 80073d8:	b148      	cbz	r0, 80073ee <_printf_float+0xe2>
 80073da:	464b      	mov	r3, r9
 80073dc:	2b00      	cmp	r3, #0
 80073de:	bfb8      	it	lt
 80073e0:	232d      	movlt	r3, #45	@ 0x2d
 80073e2:	4a80      	ldr	r2, [pc, #512]	@ (80075e4 <_printf_float+0x2d8>)
 80073e4:	bfb8      	it	lt
 80073e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80073ea:	4b7f      	ldr	r3, [pc, #508]	@ (80075e8 <_printf_float+0x2dc>)
 80073ec:	e7d3      	b.n	8007396 <_printf_float+0x8a>
 80073ee:	6863      	ldr	r3, [r4, #4]
 80073f0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	d13f      	bne.n	8007478 <_printf_float+0x16c>
 80073f8:	2306      	movs	r3, #6
 80073fa:	6063      	str	r3, [r4, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	9206      	str	r2, [sp, #24]
 8007406:	aa0e      	add	r2, sp, #56	@ 0x38
 8007408:	e9cd a204 	strd	sl, r2, [sp, #16]
 800740c:	aa0d      	add	r2, sp, #52	@ 0x34
 800740e:	9203      	str	r2, [sp, #12]
 8007410:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007414:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007418:	6863      	ldr	r3, [r4, #4]
 800741a:	4642      	mov	r2, r8
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	4628      	mov	r0, r5
 8007420:	464b      	mov	r3, r9
 8007422:	910a      	str	r1, [sp, #40]	@ 0x28
 8007424:	f7ff fed4 	bl	80071d0 <__cvt>
 8007428:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800742a:	4680      	mov	r8, r0
 800742c:	2947      	cmp	r1, #71	@ 0x47
 800742e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007430:	d128      	bne.n	8007484 <_printf_float+0x178>
 8007432:	1cc8      	adds	r0, r1, #3
 8007434:	db02      	blt.n	800743c <_printf_float+0x130>
 8007436:	6863      	ldr	r3, [r4, #4]
 8007438:	4299      	cmp	r1, r3
 800743a:	dd40      	ble.n	80074be <_printf_float+0x1b2>
 800743c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007440:	fa5f fa8a 	uxtb.w	sl, sl
 8007444:	4652      	mov	r2, sl
 8007446:	3901      	subs	r1, #1
 8007448:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800744c:	910d      	str	r1, [sp, #52]	@ 0x34
 800744e:	f7ff ff23 	bl	8007298 <__exponent>
 8007452:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007454:	4681      	mov	r9, r0
 8007456:	1813      	adds	r3, r2, r0
 8007458:	2a01      	cmp	r2, #1
 800745a:	6123      	str	r3, [r4, #16]
 800745c:	dc02      	bgt.n	8007464 <_printf_float+0x158>
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	07d2      	lsls	r2, r2, #31
 8007462:	d501      	bpl.n	8007468 <_printf_float+0x15c>
 8007464:	3301      	adds	r3, #1
 8007466:	6123      	str	r3, [r4, #16]
 8007468:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800746c:	2b00      	cmp	r3, #0
 800746e:	d09e      	beq.n	80073ae <_printf_float+0xa2>
 8007470:	232d      	movs	r3, #45	@ 0x2d
 8007472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007476:	e79a      	b.n	80073ae <_printf_float+0xa2>
 8007478:	2947      	cmp	r1, #71	@ 0x47
 800747a:	d1bf      	bne.n	80073fc <_printf_float+0xf0>
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1bd      	bne.n	80073fc <_printf_float+0xf0>
 8007480:	2301      	movs	r3, #1
 8007482:	e7ba      	b.n	80073fa <_printf_float+0xee>
 8007484:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007488:	d9dc      	bls.n	8007444 <_printf_float+0x138>
 800748a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800748e:	d118      	bne.n	80074c2 <_printf_float+0x1b6>
 8007490:	2900      	cmp	r1, #0
 8007492:	6863      	ldr	r3, [r4, #4]
 8007494:	dd0b      	ble.n	80074ae <_printf_float+0x1a2>
 8007496:	6121      	str	r1, [r4, #16]
 8007498:	b913      	cbnz	r3, 80074a0 <_printf_float+0x194>
 800749a:	6822      	ldr	r2, [r4, #0]
 800749c:	07d0      	lsls	r0, r2, #31
 800749e:	d502      	bpl.n	80074a6 <_printf_float+0x19a>
 80074a0:	3301      	adds	r3, #1
 80074a2:	440b      	add	r3, r1
 80074a4:	6123      	str	r3, [r4, #16]
 80074a6:	f04f 0900 	mov.w	r9, #0
 80074aa:	65a1      	str	r1, [r4, #88]	@ 0x58
 80074ac:	e7dc      	b.n	8007468 <_printf_float+0x15c>
 80074ae:	b913      	cbnz	r3, 80074b6 <_printf_float+0x1aa>
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	07d2      	lsls	r2, r2, #31
 80074b4:	d501      	bpl.n	80074ba <_printf_float+0x1ae>
 80074b6:	3302      	adds	r3, #2
 80074b8:	e7f4      	b.n	80074a4 <_printf_float+0x198>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e7f2      	b.n	80074a4 <_printf_float+0x198>
 80074be:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80074c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074c4:	4299      	cmp	r1, r3
 80074c6:	db05      	blt.n	80074d4 <_printf_float+0x1c8>
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	6121      	str	r1, [r4, #16]
 80074cc:	07d8      	lsls	r0, r3, #31
 80074ce:	d5ea      	bpl.n	80074a6 <_printf_float+0x19a>
 80074d0:	1c4b      	adds	r3, r1, #1
 80074d2:	e7e7      	b.n	80074a4 <_printf_float+0x198>
 80074d4:	2900      	cmp	r1, #0
 80074d6:	bfcc      	ite	gt
 80074d8:	2201      	movgt	r2, #1
 80074da:	f1c1 0202 	rsble	r2, r1, #2
 80074de:	4413      	add	r3, r2
 80074e0:	e7e0      	b.n	80074a4 <_printf_float+0x198>
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	055a      	lsls	r2, r3, #21
 80074e6:	d407      	bmi.n	80074f8 <_printf_float+0x1ec>
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	4642      	mov	r2, r8
 80074ec:	4631      	mov	r1, r6
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b8      	blx	r7
 80074f2:	3001      	adds	r0, #1
 80074f4:	d12b      	bne.n	800754e <_printf_float+0x242>
 80074f6:	e764      	b.n	80073c2 <_printf_float+0xb6>
 80074f8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074fc:	f240 80dc 	bls.w	80076b8 <_printf_float+0x3ac>
 8007500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007504:	2200      	movs	r2, #0
 8007506:	2300      	movs	r3, #0
 8007508:	f7f9 fa4e 	bl	80009a8 <__aeabi_dcmpeq>
 800750c:	2800      	cmp	r0, #0
 800750e:	d033      	beq.n	8007578 <_printf_float+0x26c>
 8007510:	2301      	movs	r3, #1
 8007512:	4631      	mov	r1, r6
 8007514:	4628      	mov	r0, r5
 8007516:	4a35      	ldr	r2, [pc, #212]	@ (80075ec <_printf_float+0x2e0>)
 8007518:	47b8      	blx	r7
 800751a:	3001      	adds	r0, #1
 800751c:	f43f af51 	beq.w	80073c2 <_printf_float+0xb6>
 8007520:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007524:	4543      	cmp	r3, r8
 8007526:	db02      	blt.n	800752e <_printf_float+0x222>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	07d8      	lsls	r0, r3, #31
 800752c:	d50f      	bpl.n	800754e <_printf_float+0x242>
 800752e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007532:	4631      	mov	r1, r6
 8007534:	4628      	mov	r0, r5
 8007536:	47b8      	blx	r7
 8007538:	3001      	adds	r0, #1
 800753a:	f43f af42 	beq.w	80073c2 <_printf_float+0xb6>
 800753e:	f04f 0900 	mov.w	r9, #0
 8007542:	f108 38ff 	add.w	r8, r8, #4294967295
 8007546:	f104 0a1a 	add.w	sl, r4, #26
 800754a:	45c8      	cmp	r8, r9
 800754c:	dc09      	bgt.n	8007562 <_printf_float+0x256>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	079b      	lsls	r3, r3, #30
 8007552:	f100 8102 	bmi.w	800775a <_printf_float+0x44e>
 8007556:	68e0      	ldr	r0, [r4, #12]
 8007558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800755a:	4298      	cmp	r0, r3
 800755c:	bfb8      	it	lt
 800755e:	4618      	movlt	r0, r3
 8007560:	e731      	b.n	80073c6 <_printf_float+0xba>
 8007562:	2301      	movs	r3, #1
 8007564:	4652      	mov	r2, sl
 8007566:	4631      	mov	r1, r6
 8007568:	4628      	mov	r0, r5
 800756a:	47b8      	blx	r7
 800756c:	3001      	adds	r0, #1
 800756e:	f43f af28 	beq.w	80073c2 <_printf_float+0xb6>
 8007572:	f109 0901 	add.w	r9, r9, #1
 8007576:	e7e8      	b.n	800754a <_printf_float+0x23e>
 8007578:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800757a:	2b00      	cmp	r3, #0
 800757c:	dc38      	bgt.n	80075f0 <_printf_float+0x2e4>
 800757e:	2301      	movs	r3, #1
 8007580:	4631      	mov	r1, r6
 8007582:	4628      	mov	r0, r5
 8007584:	4a19      	ldr	r2, [pc, #100]	@ (80075ec <_printf_float+0x2e0>)
 8007586:	47b8      	blx	r7
 8007588:	3001      	adds	r0, #1
 800758a:	f43f af1a 	beq.w	80073c2 <_printf_float+0xb6>
 800758e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007592:	ea59 0303 	orrs.w	r3, r9, r3
 8007596:	d102      	bne.n	800759e <_printf_float+0x292>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	07d9      	lsls	r1, r3, #31
 800759c:	d5d7      	bpl.n	800754e <_printf_float+0x242>
 800759e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80075a2:	4631      	mov	r1, r6
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b8      	blx	r7
 80075a8:	3001      	adds	r0, #1
 80075aa:	f43f af0a 	beq.w	80073c2 <_printf_float+0xb6>
 80075ae:	f04f 0a00 	mov.w	sl, #0
 80075b2:	f104 0b1a 	add.w	fp, r4, #26
 80075b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075b8:	425b      	negs	r3, r3
 80075ba:	4553      	cmp	r3, sl
 80075bc:	dc01      	bgt.n	80075c2 <_printf_float+0x2b6>
 80075be:	464b      	mov	r3, r9
 80075c0:	e793      	b.n	80074ea <_printf_float+0x1de>
 80075c2:	2301      	movs	r3, #1
 80075c4:	465a      	mov	r2, fp
 80075c6:	4631      	mov	r1, r6
 80075c8:	4628      	mov	r0, r5
 80075ca:	47b8      	blx	r7
 80075cc:	3001      	adds	r0, #1
 80075ce:	f43f aef8 	beq.w	80073c2 <_printf_float+0xb6>
 80075d2:	f10a 0a01 	add.w	sl, sl, #1
 80075d6:	e7ee      	b.n	80075b6 <_printf_float+0x2aa>
 80075d8:	7fefffff 	.word	0x7fefffff
 80075dc:	0800ad3e 	.word	0x0800ad3e
 80075e0:	0800ad3a 	.word	0x0800ad3a
 80075e4:	0800ad46 	.word	0x0800ad46
 80075e8:	0800ad42 	.word	0x0800ad42
 80075ec:	0800ad4a 	.word	0x0800ad4a
 80075f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075f2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80075f6:	4553      	cmp	r3, sl
 80075f8:	bfa8      	it	ge
 80075fa:	4653      	movge	r3, sl
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	4699      	mov	r9, r3
 8007600:	dc36      	bgt.n	8007670 <_printf_float+0x364>
 8007602:	f04f 0b00 	mov.w	fp, #0
 8007606:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800760a:	f104 021a 	add.w	r2, r4, #26
 800760e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007610:	930a      	str	r3, [sp, #40]	@ 0x28
 8007612:	eba3 0309 	sub.w	r3, r3, r9
 8007616:	455b      	cmp	r3, fp
 8007618:	dc31      	bgt.n	800767e <_printf_float+0x372>
 800761a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800761c:	459a      	cmp	sl, r3
 800761e:	dc3a      	bgt.n	8007696 <_printf_float+0x38a>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	07da      	lsls	r2, r3, #31
 8007624:	d437      	bmi.n	8007696 <_printf_float+0x38a>
 8007626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007628:	ebaa 0903 	sub.w	r9, sl, r3
 800762c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800762e:	ebaa 0303 	sub.w	r3, sl, r3
 8007632:	4599      	cmp	r9, r3
 8007634:	bfa8      	it	ge
 8007636:	4699      	movge	r9, r3
 8007638:	f1b9 0f00 	cmp.w	r9, #0
 800763c:	dc33      	bgt.n	80076a6 <_printf_float+0x39a>
 800763e:	f04f 0800 	mov.w	r8, #0
 8007642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007646:	f104 0b1a 	add.w	fp, r4, #26
 800764a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800764c:	ebaa 0303 	sub.w	r3, sl, r3
 8007650:	eba3 0309 	sub.w	r3, r3, r9
 8007654:	4543      	cmp	r3, r8
 8007656:	f77f af7a 	ble.w	800754e <_printf_float+0x242>
 800765a:	2301      	movs	r3, #1
 800765c:	465a      	mov	r2, fp
 800765e:	4631      	mov	r1, r6
 8007660:	4628      	mov	r0, r5
 8007662:	47b8      	blx	r7
 8007664:	3001      	adds	r0, #1
 8007666:	f43f aeac 	beq.w	80073c2 <_printf_float+0xb6>
 800766a:	f108 0801 	add.w	r8, r8, #1
 800766e:	e7ec      	b.n	800764a <_printf_float+0x33e>
 8007670:	4642      	mov	r2, r8
 8007672:	4631      	mov	r1, r6
 8007674:	4628      	mov	r0, r5
 8007676:	47b8      	blx	r7
 8007678:	3001      	adds	r0, #1
 800767a:	d1c2      	bne.n	8007602 <_printf_float+0x2f6>
 800767c:	e6a1      	b.n	80073c2 <_printf_float+0xb6>
 800767e:	2301      	movs	r3, #1
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	920a      	str	r2, [sp, #40]	@ 0x28
 8007686:	47b8      	blx	r7
 8007688:	3001      	adds	r0, #1
 800768a:	f43f ae9a 	beq.w	80073c2 <_printf_float+0xb6>
 800768e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007690:	f10b 0b01 	add.w	fp, fp, #1
 8007694:	e7bb      	b.n	800760e <_printf_float+0x302>
 8007696:	4631      	mov	r1, r6
 8007698:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800769c:	4628      	mov	r0, r5
 800769e:	47b8      	blx	r7
 80076a0:	3001      	adds	r0, #1
 80076a2:	d1c0      	bne.n	8007626 <_printf_float+0x31a>
 80076a4:	e68d      	b.n	80073c2 <_printf_float+0xb6>
 80076a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076a8:	464b      	mov	r3, r9
 80076aa:	4631      	mov	r1, r6
 80076ac:	4628      	mov	r0, r5
 80076ae:	4442      	add	r2, r8
 80076b0:	47b8      	blx	r7
 80076b2:	3001      	adds	r0, #1
 80076b4:	d1c3      	bne.n	800763e <_printf_float+0x332>
 80076b6:	e684      	b.n	80073c2 <_printf_float+0xb6>
 80076b8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80076bc:	f1ba 0f01 	cmp.w	sl, #1
 80076c0:	dc01      	bgt.n	80076c6 <_printf_float+0x3ba>
 80076c2:	07db      	lsls	r3, r3, #31
 80076c4:	d536      	bpl.n	8007734 <_printf_float+0x428>
 80076c6:	2301      	movs	r3, #1
 80076c8:	4642      	mov	r2, r8
 80076ca:	4631      	mov	r1, r6
 80076cc:	4628      	mov	r0, r5
 80076ce:	47b8      	blx	r7
 80076d0:	3001      	adds	r0, #1
 80076d2:	f43f ae76 	beq.w	80073c2 <_printf_float+0xb6>
 80076d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076da:	4631      	mov	r1, r6
 80076dc:	4628      	mov	r0, r5
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	f43f ae6e 	beq.w	80073c2 <_printf_float+0xb6>
 80076e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076ea:	2200      	movs	r2, #0
 80076ec:	2300      	movs	r3, #0
 80076ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076f2:	f7f9 f959 	bl	80009a8 <__aeabi_dcmpeq>
 80076f6:	b9c0      	cbnz	r0, 800772a <_printf_float+0x41e>
 80076f8:	4653      	mov	r3, sl
 80076fa:	f108 0201 	add.w	r2, r8, #1
 80076fe:	4631      	mov	r1, r6
 8007700:	4628      	mov	r0, r5
 8007702:	47b8      	blx	r7
 8007704:	3001      	adds	r0, #1
 8007706:	d10c      	bne.n	8007722 <_printf_float+0x416>
 8007708:	e65b      	b.n	80073c2 <_printf_float+0xb6>
 800770a:	2301      	movs	r3, #1
 800770c:	465a      	mov	r2, fp
 800770e:	4631      	mov	r1, r6
 8007710:	4628      	mov	r0, r5
 8007712:	47b8      	blx	r7
 8007714:	3001      	adds	r0, #1
 8007716:	f43f ae54 	beq.w	80073c2 <_printf_float+0xb6>
 800771a:	f108 0801 	add.w	r8, r8, #1
 800771e:	45d0      	cmp	r8, sl
 8007720:	dbf3      	blt.n	800770a <_printf_float+0x3fe>
 8007722:	464b      	mov	r3, r9
 8007724:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007728:	e6e0      	b.n	80074ec <_printf_float+0x1e0>
 800772a:	f04f 0800 	mov.w	r8, #0
 800772e:	f104 0b1a 	add.w	fp, r4, #26
 8007732:	e7f4      	b.n	800771e <_printf_float+0x412>
 8007734:	2301      	movs	r3, #1
 8007736:	4642      	mov	r2, r8
 8007738:	e7e1      	b.n	80076fe <_printf_float+0x3f2>
 800773a:	2301      	movs	r3, #1
 800773c:	464a      	mov	r2, r9
 800773e:	4631      	mov	r1, r6
 8007740:	4628      	mov	r0, r5
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	f43f ae3c 	beq.w	80073c2 <_printf_float+0xb6>
 800774a:	f108 0801 	add.w	r8, r8, #1
 800774e:	68e3      	ldr	r3, [r4, #12]
 8007750:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007752:	1a5b      	subs	r3, r3, r1
 8007754:	4543      	cmp	r3, r8
 8007756:	dcf0      	bgt.n	800773a <_printf_float+0x42e>
 8007758:	e6fd      	b.n	8007556 <_printf_float+0x24a>
 800775a:	f04f 0800 	mov.w	r8, #0
 800775e:	f104 0919 	add.w	r9, r4, #25
 8007762:	e7f4      	b.n	800774e <_printf_float+0x442>

08007764 <_printf_common>:
 8007764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007768:	4616      	mov	r6, r2
 800776a:	4698      	mov	r8, r3
 800776c:	688a      	ldr	r2, [r1, #8]
 800776e:	690b      	ldr	r3, [r1, #16]
 8007770:	4607      	mov	r7, r0
 8007772:	4293      	cmp	r3, r2
 8007774:	bfb8      	it	lt
 8007776:	4613      	movlt	r3, r2
 8007778:	6033      	str	r3, [r6, #0]
 800777a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800777e:	460c      	mov	r4, r1
 8007780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007784:	b10a      	cbz	r2, 800778a <_printf_common+0x26>
 8007786:	3301      	adds	r3, #1
 8007788:	6033      	str	r3, [r6, #0]
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	0699      	lsls	r1, r3, #26
 800778e:	bf42      	ittt	mi
 8007790:	6833      	ldrmi	r3, [r6, #0]
 8007792:	3302      	addmi	r3, #2
 8007794:	6033      	strmi	r3, [r6, #0]
 8007796:	6825      	ldr	r5, [r4, #0]
 8007798:	f015 0506 	ands.w	r5, r5, #6
 800779c:	d106      	bne.n	80077ac <_printf_common+0x48>
 800779e:	f104 0a19 	add.w	sl, r4, #25
 80077a2:	68e3      	ldr	r3, [r4, #12]
 80077a4:	6832      	ldr	r2, [r6, #0]
 80077a6:	1a9b      	subs	r3, r3, r2
 80077a8:	42ab      	cmp	r3, r5
 80077aa:	dc2b      	bgt.n	8007804 <_printf_common+0xa0>
 80077ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077b0:	6822      	ldr	r2, [r4, #0]
 80077b2:	3b00      	subs	r3, #0
 80077b4:	bf18      	it	ne
 80077b6:	2301      	movne	r3, #1
 80077b8:	0692      	lsls	r2, r2, #26
 80077ba:	d430      	bmi.n	800781e <_printf_common+0xba>
 80077bc:	4641      	mov	r1, r8
 80077be:	4638      	mov	r0, r7
 80077c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077c4:	47c8      	blx	r9
 80077c6:	3001      	adds	r0, #1
 80077c8:	d023      	beq.n	8007812 <_printf_common+0xae>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	6922      	ldr	r2, [r4, #16]
 80077ce:	f003 0306 	and.w	r3, r3, #6
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	bf14      	ite	ne
 80077d6:	2500      	movne	r5, #0
 80077d8:	6833      	ldreq	r3, [r6, #0]
 80077da:	f04f 0600 	mov.w	r6, #0
 80077de:	bf08      	it	eq
 80077e0:	68e5      	ldreq	r5, [r4, #12]
 80077e2:	f104 041a 	add.w	r4, r4, #26
 80077e6:	bf08      	it	eq
 80077e8:	1aed      	subeq	r5, r5, r3
 80077ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80077ee:	bf08      	it	eq
 80077f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f4:	4293      	cmp	r3, r2
 80077f6:	bfc4      	itt	gt
 80077f8:	1a9b      	subgt	r3, r3, r2
 80077fa:	18ed      	addgt	r5, r5, r3
 80077fc:	42b5      	cmp	r5, r6
 80077fe:	d11a      	bne.n	8007836 <_printf_common+0xd2>
 8007800:	2000      	movs	r0, #0
 8007802:	e008      	b.n	8007816 <_printf_common+0xb2>
 8007804:	2301      	movs	r3, #1
 8007806:	4652      	mov	r2, sl
 8007808:	4641      	mov	r1, r8
 800780a:	4638      	mov	r0, r7
 800780c:	47c8      	blx	r9
 800780e:	3001      	adds	r0, #1
 8007810:	d103      	bne.n	800781a <_printf_common+0xb6>
 8007812:	f04f 30ff 	mov.w	r0, #4294967295
 8007816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800781a:	3501      	adds	r5, #1
 800781c:	e7c1      	b.n	80077a2 <_printf_common+0x3e>
 800781e:	2030      	movs	r0, #48	@ 0x30
 8007820:	18e1      	adds	r1, r4, r3
 8007822:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800782c:	4422      	add	r2, r4
 800782e:	3302      	adds	r3, #2
 8007830:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007834:	e7c2      	b.n	80077bc <_printf_common+0x58>
 8007836:	2301      	movs	r3, #1
 8007838:	4622      	mov	r2, r4
 800783a:	4641      	mov	r1, r8
 800783c:	4638      	mov	r0, r7
 800783e:	47c8      	blx	r9
 8007840:	3001      	adds	r0, #1
 8007842:	d0e6      	beq.n	8007812 <_printf_common+0xae>
 8007844:	3601      	adds	r6, #1
 8007846:	e7d9      	b.n	80077fc <_printf_common+0x98>

08007848 <_printf_i>:
 8007848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800784c:	7e0f      	ldrb	r7, [r1, #24]
 800784e:	4691      	mov	r9, r2
 8007850:	2f78      	cmp	r7, #120	@ 0x78
 8007852:	4680      	mov	r8, r0
 8007854:	460c      	mov	r4, r1
 8007856:	469a      	mov	sl, r3
 8007858:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800785a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800785e:	d807      	bhi.n	8007870 <_printf_i+0x28>
 8007860:	2f62      	cmp	r7, #98	@ 0x62
 8007862:	d80a      	bhi.n	800787a <_printf_i+0x32>
 8007864:	2f00      	cmp	r7, #0
 8007866:	f000 80d1 	beq.w	8007a0c <_printf_i+0x1c4>
 800786a:	2f58      	cmp	r7, #88	@ 0x58
 800786c:	f000 80b8 	beq.w	80079e0 <_printf_i+0x198>
 8007870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007874:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007878:	e03a      	b.n	80078f0 <_printf_i+0xa8>
 800787a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800787e:	2b15      	cmp	r3, #21
 8007880:	d8f6      	bhi.n	8007870 <_printf_i+0x28>
 8007882:	a101      	add	r1, pc, #4	@ (adr r1, 8007888 <_printf_i+0x40>)
 8007884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007888:	080078e1 	.word	0x080078e1
 800788c:	080078f5 	.word	0x080078f5
 8007890:	08007871 	.word	0x08007871
 8007894:	08007871 	.word	0x08007871
 8007898:	08007871 	.word	0x08007871
 800789c:	08007871 	.word	0x08007871
 80078a0:	080078f5 	.word	0x080078f5
 80078a4:	08007871 	.word	0x08007871
 80078a8:	08007871 	.word	0x08007871
 80078ac:	08007871 	.word	0x08007871
 80078b0:	08007871 	.word	0x08007871
 80078b4:	080079f3 	.word	0x080079f3
 80078b8:	0800791f 	.word	0x0800791f
 80078bc:	080079ad 	.word	0x080079ad
 80078c0:	08007871 	.word	0x08007871
 80078c4:	08007871 	.word	0x08007871
 80078c8:	08007a15 	.word	0x08007a15
 80078cc:	08007871 	.word	0x08007871
 80078d0:	0800791f 	.word	0x0800791f
 80078d4:	08007871 	.word	0x08007871
 80078d8:	08007871 	.word	0x08007871
 80078dc:	080079b5 	.word	0x080079b5
 80078e0:	6833      	ldr	r3, [r6, #0]
 80078e2:	1d1a      	adds	r2, r3, #4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6032      	str	r2, [r6, #0]
 80078e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078f0:	2301      	movs	r3, #1
 80078f2:	e09c      	b.n	8007a2e <_printf_i+0x1e6>
 80078f4:	6833      	ldr	r3, [r6, #0]
 80078f6:	6820      	ldr	r0, [r4, #0]
 80078f8:	1d19      	adds	r1, r3, #4
 80078fa:	6031      	str	r1, [r6, #0]
 80078fc:	0606      	lsls	r6, r0, #24
 80078fe:	d501      	bpl.n	8007904 <_printf_i+0xbc>
 8007900:	681d      	ldr	r5, [r3, #0]
 8007902:	e003      	b.n	800790c <_printf_i+0xc4>
 8007904:	0645      	lsls	r5, r0, #25
 8007906:	d5fb      	bpl.n	8007900 <_printf_i+0xb8>
 8007908:	f9b3 5000 	ldrsh.w	r5, [r3]
 800790c:	2d00      	cmp	r5, #0
 800790e:	da03      	bge.n	8007918 <_printf_i+0xd0>
 8007910:	232d      	movs	r3, #45	@ 0x2d
 8007912:	426d      	negs	r5, r5
 8007914:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007918:	230a      	movs	r3, #10
 800791a:	4858      	ldr	r0, [pc, #352]	@ (8007a7c <_printf_i+0x234>)
 800791c:	e011      	b.n	8007942 <_printf_i+0xfa>
 800791e:	6821      	ldr	r1, [r4, #0]
 8007920:	6833      	ldr	r3, [r6, #0]
 8007922:	0608      	lsls	r0, r1, #24
 8007924:	f853 5b04 	ldr.w	r5, [r3], #4
 8007928:	d402      	bmi.n	8007930 <_printf_i+0xe8>
 800792a:	0649      	lsls	r1, r1, #25
 800792c:	bf48      	it	mi
 800792e:	b2ad      	uxthmi	r5, r5
 8007930:	2f6f      	cmp	r7, #111	@ 0x6f
 8007932:	6033      	str	r3, [r6, #0]
 8007934:	bf14      	ite	ne
 8007936:	230a      	movne	r3, #10
 8007938:	2308      	moveq	r3, #8
 800793a:	4850      	ldr	r0, [pc, #320]	@ (8007a7c <_printf_i+0x234>)
 800793c:	2100      	movs	r1, #0
 800793e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007942:	6866      	ldr	r6, [r4, #4]
 8007944:	2e00      	cmp	r6, #0
 8007946:	60a6      	str	r6, [r4, #8]
 8007948:	db05      	blt.n	8007956 <_printf_i+0x10e>
 800794a:	6821      	ldr	r1, [r4, #0]
 800794c:	432e      	orrs	r6, r5
 800794e:	f021 0104 	bic.w	r1, r1, #4
 8007952:	6021      	str	r1, [r4, #0]
 8007954:	d04b      	beq.n	80079ee <_printf_i+0x1a6>
 8007956:	4616      	mov	r6, r2
 8007958:	fbb5 f1f3 	udiv	r1, r5, r3
 800795c:	fb03 5711 	mls	r7, r3, r1, r5
 8007960:	5dc7      	ldrb	r7, [r0, r7]
 8007962:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007966:	462f      	mov	r7, r5
 8007968:	42bb      	cmp	r3, r7
 800796a:	460d      	mov	r5, r1
 800796c:	d9f4      	bls.n	8007958 <_printf_i+0x110>
 800796e:	2b08      	cmp	r3, #8
 8007970:	d10b      	bne.n	800798a <_printf_i+0x142>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	07df      	lsls	r7, r3, #31
 8007976:	d508      	bpl.n	800798a <_printf_i+0x142>
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	6861      	ldr	r1, [r4, #4]
 800797c:	4299      	cmp	r1, r3
 800797e:	bfde      	ittt	le
 8007980:	2330      	movle	r3, #48	@ 0x30
 8007982:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007986:	f106 36ff 	addle.w	r6, r6, #4294967295
 800798a:	1b92      	subs	r2, r2, r6
 800798c:	6122      	str	r2, [r4, #16]
 800798e:	464b      	mov	r3, r9
 8007990:	4621      	mov	r1, r4
 8007992:	4640      	mov	r0, r8
 8007994:	f8cd a000 	str.w	sl, [sp]
 8007998:	aa03      	add	r2, sp, #12
 800799a:	f7ff fee3 	bl	8007764 <_printf_common>
 800799e:	3001      	adds	r0, #1
 80079a0:	d14a      	bne.n	8007a38 <_printf_i+0x1f0>
 80079a2:	f04f 30ff 	mov.w	r0, #4294967295
 80079a6:	b004      	add	sp, #16
 80079a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	f043 0320 	orr.w	r3, r3, #32
 80079b2:	6023      	str	r3, [r4, #0]
 80079b4:	2778      	movs	r7, #120	@ 0x78
 80079b6:	4832      	ldr	r0, [pc, #200]	@ (8007a80 <_printf_i+0x238>)
 80079b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	6831      	ldr	r1, [r6, #0]
 80079c0:	061f      	lsls	r7, r3, #24
 80079c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80079c6:	d402      	bmi.n	80079ce <_printf_i+0x186>
 80079c8:	065f      	lsls	r7, r3, #25
 80079ca:	bf48      	it	mi
 80079cc:	b2ad      	uxthmi	r5, r5
 80079ce:	6031      	str	r1, [r6, #0]
 80079d0:	07d9      	lsls	r1, r3, #31
 80079d2:	bf44      	itt	mi
 80079d4:	f043 0320 	orrmi.w	r3, r3, #32
 80079d8:	6023      	strmi	r3, [r4, #0]
 80079da:	b11d      	cbz	r5, 80079e4 <_printf_i+0x19c>
 80079dc:	2310      	movs	r3, #16
 80079de:	e7ad      	b.n	800793c <_printf_i+0xf4>
 80079e0:	4826      	ldr	r0, [pc, #152]	@ (8007a7c <_printf_i+0x234>)
 80079e2:	e7e9      	b.n	80079b8 <_printf_i+0x170>
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	f023 0320 	bic.w	r3, r3, #32
 80079ea:	6023      	str	r3, [r4, #0]
 80079ec:	e7f6      	b.n	80079dc <_printf_i+0x194>
 80079ee:	4616      	mov	r6, r2
 80079f0:	e7bd      	b.n	800796e <_printf_i+0x126>
 80079f2:	6833      	ldr	r3, [r6, #0]
 80079f4:	6825      	ldr	r5, [r4, #0]
 80079f6:	1d18      	adds	r0, r3, #4
 80079f8:	6961      	ldr	r1, [r4, #20]
 80079fa:	6030      	str	r0, [r6, #0]
 80079fc:	062e      	lsls	r6, r5, #24
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	d501      	bpl.n	8007a06 <_printf_i+0x1be>
 8007a02:	6019      	str	r1, [r3, #0]
 8007a04:	e002      	b.n	8007a0c <_printf_i+0x1c4>
 8007a06:	0668      	lsls	r0, r5, #25
 8007a08:	d5fb      	bpl.n	8007a02 <_printf_i+0x1ba>
 8007a0a:	8019      	strh	r1, [r3, #0]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4616      	mov	r6, r2
 8007a10:	6123      	str	r3, [r4, #16]
 8007a12:	e7bc      	b.n	800798e <_printf_i+0x146>
 8007a14:	6833      	ldr	r3, [r6, #0]
 8007a16:	2100      	movs	r1, #0
 8007a18:	1d1a      	adds	r2, r3, #4
 8007a1a:	6032      	str	r2, [r6, #0]
 8007a1c:	681e      	ldr	r6, [r3, #0]
 8007a1e:	6862      	ldr	r2, [r4, #4]
 8007a20:	4630      	mov	r0, r6
 8007a22:	f000 f9ea 	bl	8007dfa <memchr>
 8007a26:	b108      	cbz	r0, 8007a2c <_printf_i+0x1e4>
 8007a28:	1b80      	subs	r0, r0, r6
 8007a2a:	6060      	str	r0, [r4, #4]
 8007a2c:	6863      	ldr	r3, [r4, #4]
 8007a2e:	6123      	str	r3, [r4, #16]
 8007a30:	2300      	movs	r3, #0
 8007a32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a36:	e7aa      	b.n	800798e <_printf_i+0x146>
 8007a38:	4632      	mov	r2, r6
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	6923      	ldr	r3, [r4, #16]
 8007a40:	47d0      	blx	sl
 8007a42:	3001      	adds	r0, #1
 8007a44:	d0ad      	beq.n	80079a2 <_printf_i+0x15a>
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	079b      	lsls	r3, r3, #30
 8007a4a:	d413      	bmi.n	8007a74 <_printf_i+0x22c>
 8007a4c:	68e0      	ldr	r0, [r4, #12]
 8007a4e:	9b03      	ldr	r3, [sp, #12]
 8007a50:	4298      	cmp	r0, r3
 8007a52:	bfb8      	it	lt
 8007a54:	4618      	movlt	r0, r3
 8007a56:	e7a6      	b.n	80079a6 <_printf_i+0x15e>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	4632      	mov	r2, r6
 8007a5c:	4649      	mov	r1, r9
 8007a5e:	4640      	mov	r0, r8
 8007a60:	47d0      	blx	sl
 8007a62:	3001      	adds	r0, #1
 8007a64:	d09d      	beq.n	80079a2 <_printf_i+0x15a>
 8007a66:	3501      	adds	r5, #1
 8007a68:	68e3      	ldr	r3, [r4, #12]
 8007a6a:	9903      	ldr	r1, [sp, #12]
 8007a6c:	1a5b      	subs	r3, r3, r1
 8007a6e:	42ab      	cmp	r3, r5
 8007a70:	dcf2      	bgt.n	8007a58 <_printf_i+0x210>
 8007a72:	e7eb      	b.n	8007a4c <_printf_i+0x204>
 8007a74:	2500      	movs	r5, #0
 8007a76:	f104 0619 	add.w	r6, r4, #25
 8007a7a:	e7f5      	b.n	8007a68 <_printf_i+0x220>
 8007a7c:	0800ad4c 	.word	0x0800ad4c
 8007a80:	0800ad5d 	.word	0x0800ad5d

08007a84 <std>:
 8007a84:	2300      	movs	r3, #0
 8007a86:	b510      	push	{r4, lr}
 8007a88:	4604      	mov	r4, r0
 8007a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8007a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a92:	6083      	str	r3, [r0, #8]
 8007a94:	8181      	strh	r1, [r0, #12]
 8007a96:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a98:	81c2      	strh	r2, [r0, #14]
 8007a9a:	6183      	str	r3, [r0, #24]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	2208      	movs	r2, #8
 8007aa0:	305c      	adds	r0, #92	@ 0x5c
 8007aa2:	f000 f92a 	bl	8007cfa <memset>
 8007aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007adc <std+0x58>)
 8007aa8:	6224      	str	r4, [r4, #32]
 8007aaa:	6263      	str	r3, [r4, #36]	@ 0x24
 8007aac:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae0 <std+0x5c>)
 8007aae:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae4 <std+0x60>)
 8007ab2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae8 <std+0x64>)
 8007ab6:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8007aec <std+0x68>)
 8007aba:	429c      	cmp	r4, r3
 8007abc:	d006      	beq.n	8007acc <std+0x48>
 8007abe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ac2:	4294      	cmp	r4, r2
 8007ac4:	d002      	beq.n	8007acc <std+0x48>
 8007ac6:	33d0      	adds	r3, #208	@ 0xd0
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	d105      	bne.n	8007ad8 <std+0x54>
 8007acc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ad4:	f000 b98e 	b.w	8007df4 <__retarget_lock_init_recursive>
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	bf00      	nop
 8007adc:	08007c75 	.word	0x08007c75
 8007ae0:	08007c97 	.word	0x08007c97
 8007ae4:	08007ccf 	.word	0x08007ccf
 8007ae8:	08007cf3 	.word	0x08007cf3
 8007aec:	20000330 	.word	0x20000330

08007af0 <stdio_exit_handler>:
 8007af0:	4a02      	ldr	r2, [pc, #8]	@ (8007afc <stdio_exit_handler+0xc>)
 8007af2:	4903      	ldr	r1, [pc, #12]	@ (8007b00 <stdio_exit_handler+0x10>)
 8007af4:	4803      	ldr	r0, [pc, #12]	@ (8007b04 <stdio_exit_handler+0x14>)
 8007af6:	f000 b869 	b.w	8007bcc <_fwalk_sglue>
 8007afa:	bf00      	nop
 8007afc:	2000000c 	.word	0x2000000c
 8007b00:	08009771 	.word	0x08009771
 8007b04:	2000001c 	.word	0x2000001c

08007b08 <cleanup_stdio>:
 8007b08:	6841      	ldr	r1, [r0, #4]
 8007b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b3c <cleanup_stdio+0x34>)
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	4299      	cmp	r1, r3
 8007b10:	4604      	mov	r4, r0
 8007b12:	d001      	beq.n	8007b18 <cleanup_stdio+0x10>
 8007b14:	f001 fe2c 	bl	8009770 <_fflush_r>
 8007b18:	68a1      	ldr	r1, [r4, #8]
 8007b1a:	4b09      	ldr	r3, [pc, #36]	@ (8007b40 <cleanup_stdio+0x38>)
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	d002      	beq.n	8007b26 <cleanup_stdio+0x1e>
 8007b20:	4620      	mov	r0, r4
 8007b22:	f001 fe25 	bl	8009770 <_fflush_r>
 8007b26:	68e1      	ldr	r1, [r4, #12]
 8007b28:	4b06      	ldr	r3, [pc, #24]	@ (8007b44 <cleanup_stdio+0x3c>)
 8007b2a:	4299      	cmp	r1, r3
 8007b2c:	d004      	beq.n	8007b38 <cleanup_stdio+0x30>
 8007b2e:	4620      	mov	r0, r4
 8007b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b34:	f001 be1c 	b.w	8009770 <_fflush_r>
 8007b38:	bd10      	pop	{r4, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000330 	.word	0x20000330
 8007b40:	20000398 	.word	0x20000398
 8007b44:	20000400 	.word	0x20000400

08007b48 <global_stdio_init.part.0>:
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b78 <global_stdio_init.part.0+0x30>)
 8007b4c:	4c0b      	ldr	r4, [pc, #44]	@ (8007b7c <global_stdio_init.part.0+0x34>)
 8007b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8007b80 <global_stdio_init.part.0+0x38>)
 8007b50:	4620      	mov	r0, r4
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	2104      	movs	r1, #4
 8007b56:	2200      	movs	r2, #0
 8007b58:	f7ff ff94 	bl	8007a84 <std>
 8007b5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b60:	2201      	movs	r2, #1
 8007b62:	2109      	movs	r1, #9
 8007b64:	f7ff ff8e 	bl	8007a84 <std>
 8007b68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b72:	2112      	movs	r1, #18
 8007b74:	f7ff bf86 	b.w	8007a84 <std>
 8007b78:	20000468 	.word	0x20000468
 8007b7c:	20000330 	.word	0x20000330
 8007b80:	08007af1 	.word	0x08007af1

08007b84 <__sfp_lock_acquire>:
 8007b84:	4801      	ldr	r0, [pc, #4]	@ (8007b8c <__sfp_lock_acquire+0x8>)
 8007b86:	f000 b936 	b.w	8007df6 <__retarget_lock_acquire_recursive>
 8007b8a:	bf00      	nop
 8007b8c:	20000471 	.word	0x20000471

08007b90 <__sfp_lock_release>:
 8007b90:	4801      	ldr	r0, [pc, #4]	@ (8007b98 <__sfp_lock_release+0x8>)
 8007b92:	f000 b931 	b.w	8007df8 <__retarget_lock_release_recursive>
 8007b96:	bf00      	nop
 8007b98:	20000471 	.word	0x20000471

08007b9c <__sinit>:
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	f7ff fff0 	bl	8007b84 <__sfp_lock_acquire>
 8007ba4:	6a23      	ldr	r3, [r4, #32]
 8007ba6:	b11b      	cbz	r3, 8007bb0 <__sinit+0x14>
 8007ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bac:	f7ff bff0 	b.w	8007b90 <__sfp_lock_release>
 8007bb0:	4b04      	ldr	r3, [pc, #16]	@ (8007bc4 <__sinit+0x28>)
 8007bb2:	6223      	str	r3, [r4, #32]
 8007bb4:	4b04      	ldr	r3, [pc, #16]	@ (8007bc8 <__sinit+0x2c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f5      	bne.n	8007ba8 <__sinit+0xc>
 8007bbc:	f7ff ffc4 	bl	8007b48 <global_stdio_init.part.0>
 8007bc0:	e7f2      	b.n	8007ba8 <__sinit+0xc>
 8007bc2:	bf00      	nop
 8007bc4:	08007b09 	.word	0x08007b09
 8007bc8:	20000468 	.word	0x20000468

08007bcc <_fwalk_sglue>:
 8007bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd0:	4607      	mov	r7, r0
 8007bd2:	4688      	mov	r8, r1
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	2600      	movs	r6, #0
 8007bd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bdc:	f1b9 0901 	subs.w	r9, r9, #1
 8007be0:	d505      	bpl.n	8007bee <_fwalk_sglue+0x22>
 8007be2:	6824      	ldr	r4, [r4, #0]
 8007be4:	2c00      	cmp	r4, #0
 8007be6:	d1f7      	bne.n	8007bd8 <_fwalk_sglue+0xc>
 8007be8:	4630      	mov	r0, r6
 8007bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d907      	bls.n	8007c04 <_fwalk_sglue+0x38>
 8007bf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	d003      	beq.n	8007c04 <_fwalk_sglue+0x38>
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	4638      	mov	r0, r7
 8007c00:	47c0      	blx	r8
 8007c02:	4306      	orrs	r6, r0
 8007c04:	3568      	adds	r5, #104	@ 0x68
 8007c06:	e7e9      	b.n	8007bdc <_fwalk_sglue+0x10>

08007c08 <sniprintf>:
 8007c08:	b40c      	push	{r2, r3}
 8007c0a:	b530      	push	{r4, r5, lr}
 8007c0c:	4b18      	ldr	r3, [pc, #96]	@ (8007c70 <sniprintf+0x68>)
 8007c0e:	1e0c      	subs	r4, r1, #0
 8007c10:	681d      	ldr	r5, [r3, #0]
 8007c12:	b09d      	sub	sp, #116	@ 0x74
 8007c14:	da08      	bge.n	8007c28 <sniprintf+0x20>
 8007c16:	238b      	movs	r3, #139	@ 0x8b
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1c:	602b      	str	r3, [r5, #0]
 8007c1e:	b01d      	add	sp, #116	@ 0x74
 8007c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c24:	b002      	add	sp, #8
 8007c26:	4770      	bx	lr
 8007c28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007c2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c30:	f04f 0300 	mov.w	r3, #0
 8007c34:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007c36:	bf0c      	ite	eq
 8007c38:	4623      	moveq	r3, r4
 8007c3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c3e:	9304      	str	r3, [sp, #16]
 8007c40:	9307      	str	r3, [sp, #28]
 8007c42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007c46:	9002      	str	r0, [sp, #8]
 8007c48:	9006      	str	r0, [sp, #24]
 8007c4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c4e:	4628      	mov	r0, r5
 8007c50:	ab21      	add	r3, sp, #132	@ 0x84
 8007c52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007c54:	a902      	add	r1, sp, #8
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	f001 fc0e 	bl	8009478 <_svfiprintf_r>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	bfbc      	itt	lt
 8007c60:	238b      	movlt	r3, #139	@ 0x8b
 8007c62:	602b      	strlt	r3, [r5, #0]
 8007c64:	2c00      	cmp	r4, #0
 8007c66:	d0da      	beq.n	8007c1e <sniprintf+0x16>
 8007c68:	2200      	movs	r2, #0
 8007c6a:	9b02      	ldr	r3, [sp, #8]
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	e7d6      	b.n	8007c1e <sniprintf+0x16>
 8007c70:	20000018 	.word	0x20000018

08007c74 <__sread>:
 8007c74:	b510      	push	{r4, lr}
 8007c76:	460c      	mov	r4, r1
 8007c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c7c:	f000 f86c 	bl	8007d58 <_read_r>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	bfab      	itete	ge
 8007c84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c86:	89a3      	ldrhlt	r3, [r4, #12]
 8007c88:	181b      	addge	r3, r3, r0
 8007c8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c8e:	bfac      	ite	ge
 8007c90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c92:	81a3      	strhlt	r3, [r4, #12]
 8007c94:	bd10      	pop	{r4, pc}

08007c96 <__swrite>:
 8007c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9a:	461f      	mov	r7, r3
 8007c9c:	898b      	ldrh	r3, [r1, #12]
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	05db      	lsls	r3, r3, #23
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	4616      	mov	r6, r2
 8007ca6:	d505      	bpl.n	8007cb4 <__swrite+0x1e>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	2200      	movs	r2, #0
 8007cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb0:	f000 f840 	bl	8007d34 <_lseek_r>
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	4632      	mov	r2, r6
 8007cb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	463b      	mov	r3, r7
 8007cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cca:	f000 b857 	b.w	8007d7c <_write_r>

08007cce <__sseek>:
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	460c      	mov	r4, r1
 8007cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd6:	f000 f82d 	bl	8007d34 <_lseek_r>
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	bf15      	itete	ne
 8007ce0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ce2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ce6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007cea:	81a3      	strheq	r3, [r4, #12]
 8007cec:	bf18      	it	ne
 8007cee:	81a3      	strhne	r3, [r4, #12]
 8007cf0:	bd10      	pop	{r4, pc}

08007cf2 <__sclose>:
 8007cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf6:	f000 b80d 	b.w	8007d14 <_close_r>

08007cfa <memset>:
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4402      	add	r2, r0
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d100      	bne.n	8007d04 <memset+0xa>
 8007d02:	4770      	bx	lr
 8007d04:	f803 1b01 	strb.w	r1, [r3], #1
 8007d08:	e7f9      	b.n	8007cfe <memset+0x4>
	...

08007d0c <_localeconv_r>:
 8007d0c:	4800      	ldr	r0, [pc, #0]	@ (8007d10 <_localeconv_r+0x4>)
 8007d0e:	4770      	bx	lr
 8007d10:	20000158 	.word	0x20000158

08007d14 <_close_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	2300      	movs	r3, #0
 8007d18:	4d05      	ldr	r5, [pc, #20]	@ (8007d30 <_close_r+0x1c>)
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	f7fa fced 	bl	80026fe <_close>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_close_r+0x1a>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_close_r+0x1a>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	2000046c 	.word	0x2000046c

08007d34 <_lseek_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4604      	mov	r4, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	4d05      	ldr	r5, [pc, #20]	@ (8007d54 <_lseek_r+0x20>)
 8007d40:	602a      	str	r2, [r5, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	f7fa fcff 	bl	8002746 <_lseek>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_lseek_r+0x1e>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_lseek_r+0x1e>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	2000046c 	.word	0x2000046c

08007d58 <_read_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	4608      	mov	r0, r1
 8007d5e:	4611      	mov	r1, r2
 8007d60:	2200      	movs	r2, #0
 8007d62:	4d05      	ldr	r5, [pc, #20]	@ (8007d78 <_read_r+0x20>)
 8007d64:	602a      	str	r2, [r5, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	f7fa fc90 	bl	800268c <_read>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_read_r+0x1e>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_read_r+0x1e>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	2000046c 	.word	0x2000046c

08007d7c <_write_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4604      	mov	r4, r0
 8007d80:	4608      	mov	r0, r1
 8007d82:	4611      	mov	r1, r2
 8007d84:	2200      	movs	r2, #0
 8007d86:	4d05      	ldr	r5, [pc, #20]	@ (8007d9c <_write_r+0x20>)
 8007d88:	602a      	str	r2, [r5, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f7fa fc9b 	bl	80026c6 <_write>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_write_r+0x1e>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_write_r+0x1e>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	2000046c 	.word	0x2000046c

08007da0 <__errno>:
 8007da0:	4b01      	ldr	r3, [pc, #4]	@ (8007da8 <__errno+0x8>)
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	20000018 	.word	0x20000018

08007dac <__libc_init_array>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	2600      	movs	r6, #0
 8007db0:	4d0c      	ldr	r5, [pc, #48]	@ (8007de4 <__libc_init_array+0x38>)
 8007db2:	4c0d      	ldr	r4, [pc, #52]	@ (8007de8 <__libc_init_array+0x3c>)
 8007db4:	1b64      	subs	r4, r4, r5
 8007db6:	10a4      	asrs	r4, r4, #2
 8007db8:	42a6      	cmp	r6, r4
 8007dba:	d109      	bne.n	8007dd0 <__libc_init_array+0x24>
 8007dbc:	f002 ff80 	bl	800acc0 <_init>
 8007dc0:	2600      	movs	r6, #0
 8007dc2:	4d0a      	ldr	r5, [pc, #40]	@ (8007dec <__libc_init_array+0x40>)
 8007dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8007df0 <__libc_init_array+0x44>)
 8007dc6:	1b64      	subs	r4, r4, r5
 8007dc8:	10a4      	asrs	r4, r4, #2
 8007dca:	42a6      	cmp	r6, r4
 8007dcc:	d105      	bne.n	8007dda <__libc_init_array+0x2e>
 8007dce:	bd70      	pop	{r4, r5, r6, pc}
 8007dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd4:	4798      	blx	r3
 8007dd6:	3601      	adds	r6, #1
 8007dd8:	e7ee      	b.n	8007db8 <__libc_init_array+0xc>
 8007dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dde:	4798      	blx	r3
 8007de0:	3601      	adds	r6, #1
 8007de2:	e7f2      	b.n	8007dca <__libc_init_array+0x1e>
 8007de4:	0800b0f8 	.word	0x0800b0f8
 8007de8:	0800b0f8 	.word	0x0800b0f8
 8007dec:	0800b0f8 	.word	0x0800b0f8
 8007df0:	0800b0fc 	.word	0x0800b0fc

08007df4 <__retarget_lock_init_recursive>:
 8007df4:	4770      	bx	lr

08007df6 <__retarget_lock_acquire_recursive>:
 8007df6:	4770      	bx	lr

08007df8 <__retarget_lock_release_recursive>:
 8007df8:	4770      	bx	lr

08007dfa <memchr>:
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	b510      	push	{r4, lr}
 8007dfe:	b2c9      	uxtb	r1, r1
 8007e00:	4402      	add	r2, r0
 8007e02:	4293      	cmp	r3, r2
 8007e04:	4618      	mov	r0, r3
 8007e06:	d101      	bne.n	8007e0c <memchr+0x12>
 8007e08:	2000      	movs	r0, #0
 8007e0a:	e003      	b.n	8007e14 <memchr+0x1a>
 8007e0c:	7804      	ldrb	r4, [r0, #0]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	428c      	cmp	r4, r1
 8007e12:	d1f6      	bne.n	8007e02 <memchr+0x8>
 8007e14:	bd10      	pop	{r4, pc}

08007e16 <quorem>:
 8007e16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1a:	6903      	ldr	r3, [r0, #16]
 8007e1c:	690c      	ldr	r4, [r1, #16]
 8007e1e:	4607      	mov	r7, r0
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	db7e      	blt.n	8007f22 <quorem+0x10c>
 8007e24:	3c01      	subs	r4, #1
 8007e26:	00a3      	lsls	r3, r4, #2
 8007e28:	f100 0514 	add.w	r5, r0, #20
 8007e2c:	f101 0814 	add.w	r8, r1, #20
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e40:	3301      	adds	r3, #1
 8007e42:	429a      	cmp	r2, r3
 8007e44:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e4c:	d32e      	bcc.n	8007eac <quorem+0x96>
 8007e4e:	f04f 0a00 	mov.w	sl, #0
 8007e52:	46c4      	mov	ip, r8
 8007e54:	46ae      	mov	lr, r5
 8007e56:	46d3      	mov	fp, sl
 8007e58:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e5c:	b298      	uxth	r0, r3
 8007e5e:	fb06 a000 	mla	r0, r6, r0, sl
 8007e62:	0c1b      	lsrs	r3, r3, #16
 8007e64:	0c02      	lsrs	r2, r0, #16
 8007e66:	fb06 2303 	mla	r3, r6, r3, r2
 8007e6a:	f8de 2000 	ldr.w	r2, [lr]
 8007e6e:	b280      	uxth	r0, r0
 8007e70:	b292      	uxth	r2, r2
 8007e72:	1a12      	subs	r2, r2, r0
 8007e74:	445a      	add	r2, fp
 8007e76:	f8de 0000 	ldr.w	r0, [lr]
 8007e7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007e84:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007e88:	b292      	uxth	r2, r2
 8007e8a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e8e:	45e1      	cmp	r9, ip
 8007e90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e94:	f84e 2b04 	str.w	r2, [lr], #4
 8007e98:	d2de      	bcs.n	8007e58 <quorem+0x42>
 8007e9a:	9b00      	ldr	r3, [sp, #0]
 8007e9c:	58eb      	ldr	r3, [r5, r3]
 8007e9e:	b92b      	cbnz	r3, 8007eac <quorem+0x96>
 8007ea0:	9b01      	ldr	r3, [sp, #4]
 8007ea2:	3b04      	subs	r3, #4
 8007ea4:	429d      	cmp	r5, r3
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	d32f      	bcc.n	8007f0a <quorem+0xf4>
 8007eaa:	613c      	str	r4, [r7, #16]
 8007eac:	4638      	mov	r0, r7
 8007eae:	f001 f97f 	bl	80091b0 <__mcmp>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	db25      	blt.n	8007f02 <quorem+0xec>
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	2000      	movs	r0, #0
 8007eba:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ebe:	f8d1 c000 	ldr.w	ip, [r1]
 8007ec2:	fa1f fe82 	uxth.w	lr, r2
 8007ec6:	fa1f f38c 	uxth.w	r3, ip
 8007eca:	eba3 030e 	sub.w	r3, r3, lr
 8007ece:	4403      	add	r3, r0
 8007ed0:	0c12      	lsrs	r2, r2, #16
 8007ed2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ed6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ee0:	45c1      	cmp	r9, r8
 8007ee2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ee6:	f841 3b04 	str.w	r3, [r1], #4
 8007eea:	d2e6      	bcs.n	8007eba <quorem+0xa4>
 8007eec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ef0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ef4:	b922      	cbnz	r2, 8007f00 <quorem+0xea>
 8007ef6:	3b04      	subs	r3, #4
 8007ef8:	429d      	cmp	r5, r3
 8007efa:	461a      	mov	r2, r3
 8007efc:	d30b      	bcc.n	8007f16 <quorem+0x100>
 8007efe:	613c      	str	r4, [r7, #16]
 8007f00:	3601      	adds	r6, #1
 8007f02:	4630      	mov	r0, r6
 8007f04:	b003      	add	sp, #12
 8007f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0a:	6812      	ldr	r2, [r2, #0]
 8007f0c:	3b04      	subs	r3, #4
 8007f0e:	2a00      	cmp	r2, #0
 8007f10:	d1cb      	bne.n	8007eaa <quorem+0x94>
 8007f12:	3c01      	subs	r4, #1
 8007f14:	e7c6      	b.n	8007ea4 <quorem+0x8e>
 8007f16:	6812      	ldr	r2, [r2, #0]
 8007f18:	3b04      	subs	r3, #4
 8007f1a:	2a00      	cmp	r2, #0
 8007f1c:	d1ef      	bne.n	8007efe <quorem+0xe8>
 8007f1e:	3c01      	subs	r4, #1
 8007f20:	e7ea      	b.n	8007ef8 <quorem+0xe2>
 8007f22:	2000      	movs	r0, #0
 8007f24:	e7ee      	b.n	8007f04 <quorem+0xee>
	...

08007f28 <_dtoa_r>:
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	4614      	mov	r4, r2
 8007f2e:	461d      	mov	r5, r3
 8007f30:	69c7      	ldr	r7, [r0, #28]
 8007f32:	b097      	sub	sp, #92	@ 0x5c
 8007f34:	4681      	mov	r9, r0
 8007f36:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007f3a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007f3c:	b97f      	cbnz	r7, 8007f5e <_dtoa_r+0x36>
 8007f3e:	2010      	movs	r0, #16
 8007f40:	f000 fe0e 	bl	8008b60 <malloc>
 8007f44:	4602      	mov	r2, r0
 8007f46:	f8c9 001c 	str.w	r0, [r9, #28]
 8007f4a:	b920      	cbnz	r0, 8007f56 <_dtoa_r+0x2e>
 8007f4c:	21ef      	movs	r1, #239	@ 0xef
 8007f4e:	4bac      	ldr	r3, [pc, #688]	@ (8008200 <_dtoa_r+0x2d8>)
 8007f50:	48ac      	ldr	r0, [pc, #688]	@ (8008204 <_dtoa_r+0x2dc>)
 8007f52:	f001 fc6d 	bl	8009830 <__assert_func>
 8007f56:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007f5a:	6007      	str	r7, [r0, #0]
 8007f5c:	60c7      	str	r7, [r0, #12]
 8007f5e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	b159      	cbz	r1, 8007f7e <_dtoa_r+0x56>
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	2301      	movs	r3, #1
 8007f6a:	4093      	lsls	r3, r2
 8007f6c:	604a      	str	r2, [r1, #4]
 8007f6e:	608b      	str	r3, [r1, #8]
 8007f70:	4648      	mov	r0, r9
 8007f72:	f000 feeb 	bl	8008d4c <_Bfree>
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	1e2b      	subs	r3, r5, #0
 8007f80:	bfaf      	iteee	ge
 8007f82:	2300      	movge	r3, #0
 8007f84:	2201      	movlt	r2, #1
 8007f86:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007f8a:	9307      	strlt	r3, [sp, #28]
 8007f8c:	bfa8      	it	ge
 8007f8e:	6033      	strge	r3, [r6, #0]
 8007f90:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007f94:	4b9c      	ldr	r3, [pc, #624]	@ (8008208 <_dtoa_r+0x2e0>)
 8007f96:	bfb8      	it	lt
 8007f98:	6032      	strlt	r2, [r6, #0]
 8007f9a:	ea33 0308 	bics.w	r3, r3, r8
 8007f9e:	d112      	bne.n	8007fc6 <_dtoa_r+0x9e>
 8007fa0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007fa4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007fa6:	6013      	str	r3, [r2, #0]
 8007fa8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007fac:	4323      	orrs	r3, r4
 8007fae:	f000 855e 	beq.w	8008a6e <_dtoa_r+0xb46>
 8007fb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007fb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800820c <_dtoa_r+0x2e4>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 8560 	beq.w	8008a7e <_dtoa_r+0xb56>
 8007fbe:	f10a 0303 	add.w	r3, sl, #3
 8007fc2:	f000 bd5a 	b.w	8008a7a <_dtoa_r+0xb52>
 8007fc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f7f8 fce7 	bl	80009a8 <__aeabi_dcmpeq>
 8007fda:	4607      	mov	r7, r0
 8007fdc:	b158      	cbz	r0, 8007ff6 <_dtoa_r+0xce>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007fe6:	b113      	cbz	r3, 8007fee <_dtoa_r+0xc6>
 8007fe8:	4b89      	ldr	r3, [pc, #548]	@ (8008210 <_dtoa_r+0x2e8>)
 8007fea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008214 <_dtoa_r+0x2ec>
 8007ff2:	f000 bd44 	b.w	8008a7e <_dtoa_r+0xb56>
 8007ff6:	ab14      	add	r3, sp, #80	@ 0x50
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	ab15      	add	r3, sp, #84	@ 0x54
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	4648      	mov	r0, r9
 8008000:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008004:	f001 f984 	bl	8009310 <__d2b>
 8008008:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800800c:	9003      	str	r0, [sp, #12]
 800800e:	2e00      	cmp	r6, #0
 8008010:	d078      	beq.n	8008104 <_dtoa_r+0x1dc>
 8008012:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008018:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800801c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008020:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008024:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008028:	9712      	str	r7, [sp, #72]	@ 0x48
 800802a:	4619      	mov	r1, r3
 800802c:	2200      	movs	r2, #0
 800802e:	4b7a      	ldr	r3, [pc, #488]	@ (8008218 <_dtoa_r+0x2f0>)
 8008030:	f7f8 f89a 	bl	8000168 <__aeabi_dsub>
 8008034:	a36c      	add	r3, pc, #432	@ (adr r3, 80081e8 <_dtoa_r+0x2c0>)
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	f7f8 fa4d 	bl	80004d8 <__aeabi_dmul>
 800803e:	a36c      	add	r3, pc, #432	@ (adr r3, 80081f0 <_dtoa_r+0x2c8>)
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	f7f8 f892 	bl	800016c <__adddf3>
 8008048:	4604      	mov	r4, r0
 800804a:	4630      	mov	r0, r6
 800804c:	460d      	mov	r5, r1
 800804e:	f7f8 f9d9 	bl	8000404 <__aeabi_i2d>
 8008052:	a369      	add	r3, pc, #420	@ (adr r3, 80081f8 <_dtoa_r+0x2d0>)
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f7f8 fa3e 	bl	80004d8 <__aeabi_dmul>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4620      	mov	r0, r4
 8008062:	4629      	mov	r1, r5
 8008064:	f7f8 f882 	bl	800016c <__adddf3>
 8008068:	4604      	mov	r4, r0
 800806a:	460d      	mov	r5, r1
 800806c:	f7f8 fce4 	bl	8000a38 <__aeabi_d2iz>
 8008070:	2200      	movs	r2, #0
 8008072:	4607      	mov	r7, r0
 8008074:	2300      	movs	r3, #0
 8008076:	4620      	mov	r0, r4
 8008078:	4629      	mov	r1, r5
 800807a:	f7f8 fc9f 	bl	80009bc <__aeabi_dcmplt>
 800807e:	b140      	cbz	r0, 8008092 <_dtoa_r+0x16a>
 8008080:	4638      	mov	r0, r7
 8008082:	f7f8 f9bf 	bl	8000404 <__aeabi_i2d>
 8008086:	4622      	mov	r2, r4
 8008088:	462b      	mov	r3, r5
 800808a:	f7f8 fc8d 	bl	80009a8 <__aeabi_dcmpeq>
 800808e:	b900      	cbnz	r0, 8008092 <_dtoa_r+0x16a>
 8008090:	3f01      	subs	r7, #1
 8008092:	2f16      	cmp	r7, #22
 8008094:	d854      	bhi.n	8008140 <_dtoa_r+0x218>
 8008096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800809a:	4b60      	ldr	r3, [pc, #384]	@ (800821c <_dtoa_r+0x2f4>)
 800809c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f7f8 fc8a 	bl	80009bc <__aeabi_dcmplt>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d04b      	beq.n	8008144 <_dtoa_r+0x21c>
 80080ac:	2300      	movs	r3, #0
 80080ae:	3f01      	subs	r7, #1
 80080b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80080b4:	1b9b      	subs	r3, r3, r6
 80080b6:	1e5a      	subs	r2, r3, #1
 80080b8:	bf49      	itett	mi
 80080ba:	f1c3 0301 	rsbmi	r3, r3, #1
 80080be:	2300      	movpl	r3, #0
 80080c0:	9304      	strmi	r3, [sp, #16]
 80080c2:	2300      	movmi	r3, #0
 80080c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80080c6:	bf54      	ite	pl
 80080c8:	9304      	strpl	r3, [sp, #16]
 80080ca:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80080cc:	2f00      	cmp	r7, #0
 80080ce:	db3b      	blt.n	8008148 <_dtoa_r+0x220>
 80080d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d2:	970e      	str	r7, [sp, #56]	@ 0x38
 80080d4:	443b      	add	r3, r7
 80080d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d8:	2300      	movs	r3, #0
 80080da:	930a      	str	r3, [sp, #40]	@ 0x28
 80080dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80080de:	2b09      	cmp	r3, #9
 80080e0:	d865      	bhi.n	80081ae <_dtoa_r+0x286>
 80080e2:	2b05      	cmp	r3, #5
 80080e4:	bfc4      	itt	gt
 80080e6:	3b04      	subgt	r3, #4
 80080e8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80080ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80080ec:	bfc8      	it	gt
 80080ee:	2400      	movgt	r4, #0
 80080f0:	f1a3 0302 	sub.w	r3, r3, #2
 80080f4:	bfd8      	it	le
 80080f6:	2401      	movle	r4, #1
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d864      	bhi.n	80081c6 <_dtoa_r+0x29e>
 80080fc:	e8df f003 	tbb	[pc, r3]
 8008100:	2c385553 	.word	0x2c385553
 8008104:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008108:	441e      	add	r6, r3
 800810a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800810e:	2b20      	cmp	r3, #32
 8008110:	bfc1      	itttt	gt
 8008112:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008116:	fa08 f803 	lslgt.w	r8, r8, r3
 800811a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800811e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008122:	bfd6      	itet	le
 8008124:	f1c3 0320 	rsble	r3, r3, #32
 8008128:	ea48 0003 	orrgt.w	r0, r8, r3
 800812c:	fa04 f003 	lslle.w	r0, r4, r3
 8008130:	f7f8 f958 	bl	80003e4 <__aeabi_ui2d>
 8008134:	2201      	movs	r2, #1
 8008136:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800813a:	3e01      	subs	r6, #1
 800813c:	9212      	str	r2, [sp, #72]	@ 0x48
 800813e:	e774      	b.n	800802a <_dtoa_r+0x102>
 8008140:	2301      	movs	r3, #1
 8008142:	e7b5      	b.n	80080b0 <_dtoa_r+0x188>
 8008144:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008146:	e7b4      	b.n	80080b2 <_dtoa_r+0x18a>
 8008148:	9b04      	ldr	r3, [sp, #16]
 800814a:	1bdb      	subs	r3, r3, r7
 800814c:	9304      	str	r3, [sp, #16]
 800814e:	427b      	negs	r3, r7
 8008150:	930a      	str	r3, [sp, #40]	@ 0x28
 8008152:	2300      	movs	r3, #0
 8008154:	930e      	str	r3, [sp, #56]	@ 0x38
 8008156:	e7c1      	b.n	80080dc <_dtoa_r+0x1b4>
 8008158:	2301      	movs	r3, #1
 800815a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800815c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800815e:	eb07 0b03 	add.w	fp, r7, r3
 8008162:	f10b 0301 	add.w	r3, fp, #1
 8008166:	2b01      	cmp	r3, #1
 8008168:	9308      	str	r3, [sp, #32]
 800816a:	bfb8      	it	lt
 800816c:	2301      	movlt	r3, #1
 800816e:	e006      	b.n	800817e <_dtoa_r+0x256>
 8008170:	2301      	movs	r3, #1
 8008172:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008174:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008176:	2b00      	cmp	r3, #0
 8008178:	dd28      	ble.n	80081cc <_dtoa_r+0x2a4>
 800817a:	469b      	mov	fp, r3
 800817c:	9308      	str	r3, [sp, #32]
 800817e:	2100      	movs	r1, #0
 8008180:	2204      	movs	r2, #4
 8008182:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008186:	f102 0514 	add.w	r5, r2, #20
 800818a:	429d      	cmp	r5, r3
 800818c:	d926      	bls.n	80081dc <_dtoa_r+0x2b4>
 800818e:	6041      	str	r1, [r0, #4]
 8008190:	4648      	mov	r0, r9
 8008192:	f000 fd9b 	bl	8008ccc <_Balloc>
 8008196:	4682      	mov	sl, r0
 8008198:	2800      	cmp	r0, #0
 800819a:	d143      	bne.n	8008224 <_dtoa_r+0x2fc>
 800819c:	4602      	mov	r2, r0
 800819e:	f240 11af 	movw	r1, #431	@ 0x1af
 80081a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008220 <_dtoa_r+0x2f8>)
 80081a4:	e6d4      	b.n	8007f50 <_dtoa_r+0x28>
 80081a6:	2300      	movs	r3, #0
 80081a8:	e7e3      	b.n	8008172 <_dtoa_r+0x24a>
 80081aa:	2300      	movs	r3, #0
 80081ac:	e7d5      	b.n	800815a <_dtoa_r+0x232>
 80081ae:	2401      	movs	r4, #1
 80081b0:	2300      	movs	r3, #0
 80081b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80081b4:	9320      	str	r3, [sp, #128]	@ 0x80
 80081b6:	f04f 3bff 	mov.w	fp, #4294967295
 80081ba:	2200      	movs	r2, #0
 80081bc:	2312      	movs	r3, #18
 80081be:	f8cd b020 	str.w	fp, [sp, #32]
 80081c2:	9221      	str	r2, [sp, #132]	@ 0x84
 80081c4:	e7db      	b.n	800817e <_dtoa_r+0x256>
 80081c6:	2301      	movs	r3, #1
 80081c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081ca:	e7f4      	b.n	80081b6 <_dtoa_r+0x28e>
 80081cc:	f04f 0b01 	mov.w	fp, #1
 80081d0:	465b      	mov	r3, fp
 80081d2:	f8cd b020 	str.w	fp, [sp, #32]
 80081d6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80081da:	e7d0      	b.n	800817e <_dtoa_r+0x256>
 80081dc:	3101      	adds	r1, #1
 80081de:	0052      	lsls	r2, r2, #1
 80081e0:	e7d1      	b.n	8008186 <_dtoa_r+0x25e>
 80081e2:	bf00      	nop
 80081e4:	f3af 8000 	nop.w
 80081e8:	636f4361 	.word	0x636f4361
 80081ec:	3fd287a7 	.word	0x3fd287a7
 80081f0:	8b60c8b3 	.word	0x8b60c8b3
 80081f4:	3fc68a28 	.word	0x3fc68a28
 80081f8:	509f79fb 	.word	0x509f79fb
 80081fc:	3fd34413 	.word	0x3fd34413
 8008200:	0800ad7b 	.word	0x0800ad7b
 8008204:	0800ad92 	.word	0x0800ad92
 8008208:	7ff00000 	.word	0x7ff00000
 800820c:	0800ad77 	.word	0x0800ad77
 8008210:	0800ad4b 	.word	0x0800ad4b
 8008214:	0800ad4a 	.word	0x0800ad4a
 8008218:	3ff80000 	.word	0x3ff80000
 800821c:	0800aee0 	.word	0x0800aee0
 8008220:	0800adea 	.word	0x0800adea
 8008224:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008228:	6018      	str	r0, [r3, #0]
 800822a:	9b08      	ldr	r3, [sp, #32]
 800822c:	2b0e      	cmp	r3, #14
 800822e:	f200 80a1 	bhi.w	8008374 <_dtoa_r+0x44c>
 8008232:	2c00      	cmp	r4, #0
 8008234:	f000 809e 	beq.w	8008374 <_dtoa_r+0x44c>
 8008238:	2f00      	cmp	r7, #0
 800823a:	dd33      	ble.n	80082a4 <_dtoa_r+0x37c>
 800823c:	4b9c      	ldr	r3, [pc, #624]	@ (80084b0 <_dtoa_r+0x588>)
 800823e:	f007 020f 	and.w	r2, r7, #15
 8008242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008246:	05f8      	lsls	r0, r7, #23
 8008248:	e9d3 3400 	ldrd	r3, r4, [r3]
 800824c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008250:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008254:	d516      	bpl.n	8008284 <_dtoa_r+0x35c>
 8008256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800825a:	4b96      	ldr	r3, [pc, #600]	@ (80084b4 <_dtoa_r+0x58c>)
 800825c:	2603      	movs	r6, #3
 800825e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008262:	f7f8 fa63 	bl	800072c <__aeabi_ddiv>
 8008266:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800826a:	f004 040f 	and.w	r4, r4, #15
 800826e:	4d91      	ldr	r5, [pc, #580]	@ (80084b4 <_dtoa_r+0x58c>)
 8008270:	b954      	cbnz	r4, 8008288 <_dtoa_r+0x360>
 8008272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008276:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800827a:	f7f8 fa57 	bl	800072c <__aeabi_ddiv>
 800827e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008282:	e028      	b.n	80082d6 <_dtoa_r+0x3ae>
 8008284:	2602      	movs	r6, #2
 8008286:	e7f2      	b.n	800826e <_dtoa_r+0x346>
 8008288:	07e1      	lsls	r1, r4, #31
 800828a:	d508      	bpl.n	800829e <_dtoa_r+0x376>
 800828c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008290:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008294:	f7f8 f920 	bl	80004d8 <__aeabi_dmul>
 8008298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800829c:	3601      	adds	r6, #1
 800829e:	1064      	asrs	r4, r4, #1
 80082a0:	3508      	adds	r5, #8
 80082a2:	e7e5      	b.n	8008270 <_dtoa_r+0x348>
 80082a4:	f000 80af 	beq.w	8008406 <_dtoa_r+0x4de>
 80082a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082ac:	427c      	negs	r4, r7
 80082ae:	4b80      	ldr	r3, [pc, #512]	@ (80084b0 <_dtoa_r+0x588>)
 80082b0:	f004 020f 	and.w	r2, r4, #15
 80082b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	f7f8 f90c 	bl	80004d8 <__aeabi_dmul>
 80082c0:	2602      	movs	r6, #2
 80082c2:	2300      	movs	r3, #0
 80082c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082c8:	4d7a      	ldr	r5, [pc, #488]	@ (80084b4 <_dtoa_r+0x58c>)
 80082ca:	1124      	asrs	r4, r4, #4
 80082cc:	2c00      	cmp	r4, #0
 80082ce:	f040 808f 	bne.w	80083f0 <_dtoa_r+0x4c8>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1d3      	bne.n	800827e <_dtoa_r+0x356>
 80082d6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80082da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 8094 	beq.w	800840a <_dtoa_r+0x4e2>
 80082e2:	2200      	movs	r2, #0
 80082e4:	4620      	mov	r0, r4
 80082e6:	4629      	mov	r1, r5
 80082e8:	4b73      	ldr	r3, [pc, #460]	@ (80084b8 <_dtoa_r+0x590>)
 80082ea:	f7f8 fb67 	bl	80009bc <__aeabi_dcmplt>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	f000 808b 	beq.w	800840a <_dtoa_r+0x4e2>
 80082f4:	9b08      	ldr	r3, [sp, #32]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 8087 	beq.w	800840a <_dtoa_r+0x4e2>
 80082fc:	f1bb 0f00 	cmp.w	fp, #0
 8008300:	dd34      	ble.n	800836c <_dtoa_r+0x444>
 8008302:	4620      	mov	r0, r4
 8008304:	2200      	movs	r2, #0
 8008306:	4629      	mov	r1, r5
 8008308:	4b6c      	ldr	r3, [pc, #432]	@ (80084bc <_dtoa_r+0x594>)
 800830a:	f7f8 f8e5 	bl	80004d8 <__aeabi_dmul>
 800830e:	465c      	mov	r4, fp
 8008310:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008314:	f107 38ff 	add.w	r8, r7, #4294967295
 8008318:	3601      	adds	r6, #1
 800831a:	4630      	mov	r0, r6
 800831c:	f7f8 f872 	bl	8000404 <__aeabi_i2d>
 8008320:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008324:	f7f8 f8d8 	bl	80004d8 <__aeabi_dmul>
 8008328:	2200      	movs	r2, #0
 800832a:	4b65      	ldr	r3, [pc, #404]	@ (80084c0 <_dtoa_r+0x598>)
 800832c:	f7f7 ff1e 	bl	800016c <__adddf3>
 8008330:	4605      	mov	r5, r0
 8008332:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008336:	2c00      	cmp	r4, #0
 8008338:	d16a      	bne.n	8008410 <_dtoa_r+0x4e8>
 800833a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800833e:	2200      	movs	r2, #0
 8008340:	4b60      	ldr	r3, [pc, #384]	@ (80084c4 <_dtoa_r+0x59c>)
 8008342:	f7f7 ff11 	bl	8000168 <__aeabi_dsub>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800834e:	462a      	mov	r2, r5
 8008350:	4633      	mov	r3, r6
 8008352:	f7f8 fb51 	bl	80009f8 <__aeabi_dcmpgt>
 8008356:	2800      	cmp	r0, #0
 8008358:	f040 8298 	bne.w	800888c <_dtoa_r+0x964>
 800835c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008360:	462a      	mov	r2, r5
 8008362:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008366:	f7f8 fb29 	bl	80009bc <__aeabi_dcmplt>
 800836a:	bb38      	cbnz	r0, 80083bc <_dtoa_r+0x494>
 800836c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008370:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008374:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008376:	2b00      	cmp	r3, #0
 8008378:	f2c0 8157 	blt.w	800862a <_dtoa_r+0x702>
 800837c:	2f0e      	cmp	r7, #14
 800837e:	f300 8154 	bgt.w	800862a <_dtoa_r+0x702>
 8008382:	4b4b      	ldr	r3, [pc, #300]	@ (80084b0 <_dtoa_r+0x588>)
 8008384:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008388:	e9d3 3400 	ldrd	r3, r4, [r3]
 800838c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008390:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008392:	2b00      	cmp	r3, #0
 8008394:	f280 80e5 	bge.w	8008562 <_dtoa_r+0x63a>
 8008398:	9b08      	ldr	r3, [sp, #32]
 800839a:	2b00      	cmp	r3, #0
 800839c:	f300 80e1 	bgt.w	8008562 <_dtoa_r+0x63a>
 80083a0:	d10c      	bne.n	80083bc <_dtoa_r+0x494>
 80083a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083a6:	2200      	movs	r2, #0
 80083a8:	4b46      	ldr	r3, [pc, #280]	@ (80084c4 <_dtoa_r+0x59c>)
 80083aa:	f7f8 f895 	bl	80004d8 <__aeabi_dmul>
 80083ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083b2:	f7f8 fb17 	bl	80009e4 <__aeabi_dcmpge>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f000 8266 	beq.w	8008888 <_dtoa_r+0x960>
 80083bc:	2400      	movs	r4, #0
 80083be:	4625      	mov	r5, r4
 80083c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083c2:	4656      	mov	r6, sl
 80083c4:	ea6f 0803 	mvn.w	r8, r3
 80083c8:	2700      	movs	r7, #0
 80083ca:	4621      	mov	r1, r4
 80083cc:	4648      	mov	r0, r9
 80083ce:	f000 fcbd 	bl	8008d4c <_Bfree>
 80083d2:	2d00      	cmp	r5, #0
 80083d4:	f000 80bd 	beq.w	8008552 <_dtoa_r+0x62a>
 80083d8:	b12f      	cbz	r7, 80083e6 <_dtoa_r+0x4be>
 80083da:	42af      	cmp	r7, r5
 80083dc:	d003      	beq.n	80083e6 <_dtoa_r+0x4be>
 80083de:	4639      	mov	r1, r7
 80083e0:	4648      	mov	r0, r9
 80083e2:	f000 fcb3 	bl	8008d4c <_Bfree>
 80083e6:	4629      	mov	r1, r5
 80083e8:	4648      	mov	r0, r9
 80083ea:	f000 fcaf 	bl	8008d4c <_Bfree>
 80083ee:	e0b0      	b.n	8008552 <_dtoa_r+0x62a>
 80083f0:	07e2      	lsls	r2, r4, #31
 80083f2:	d505      	bpl.n	8008400 <_dtoa_r+0x4d8>
 80083f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083f8:	f7f8 f86e 	bl	80004d8 <__aeabi_dmul>
 80083fc:	2301      	movs	r3, #1
 80083fe:	3601      	adds	r6, #1
 8008400:	1064      	asrs	r4, r4, #1
 8008402:	3508      	adds	r5, #8
 8008404:	e762      	b.n	80082cc <_dtoa_r+0x3a4>
 8008406:	2602      	movs	r6, #2
 8008408:	e765      	b.n	80082d6 <_dtoa_r+0x3ae>
 800840a:	46b8      	mov	r8, r7
 800840c:	9c08      	ldr	r4, [sp, #32]
 800840e:	e784      	b.n	800831a <_dtoa_r+0x3f2>
 8008410:	4b27      	ldr	r3, [pc, #156]	@ (80084b0 <_dtoa_r+0x588>)
 8008412:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008414:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008418:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800841c:	4454      	add	r4, sl
 800841e:	2900      	cmp	r1, #0
 8008420:	d054      	beq.n	80084cc <_dtoa_r+0x5a4>
 8008422:	2000      	movs	r0, #0
 8008424:	4928      	ldr	r1, [pc, #160]	@ (80084c8 <_dtoa_r+0x5a0>)
 8008426:	f7f8 f981 	bl	800072c <__aeabi_ddiv>
 800842a:	4633      	mov	r3, r6
 800842c:	462a      	mov	r2, r5
 800842e:	f7f7 fe9b 	bl	8000168 <__aeabi_dsub>
 8008432:	4656      	mov	r6, sl
 8008434:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008438:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800843c:	f7f8 fafc 	bl	8000a38 <__aeabi_d2iz>
 8008440:	4605      	mov	r5, r0
 8008442:	f7f7 ffdf 	bl	8000404 <__aeabi_i2d>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800844e:	f7f7 fe8b 	bl	8000168 <__aeabi_dsub>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	3530      	adds	r5, #48	@ 0x30
 8008458:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800845c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008460:	f806 5b01 	strb.w	r5, [r6], #1
 8008464:	f7f8 faaa 	bl	80009bc <__aeabi_dcmplt>
 8008468:	2800      	cmp	r0, #0
 800846a:	d172      	bne.n	8008552 <_dtoa_r+0x62a>
 800846c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008470:	2000      	movs	r0, #0
 8008472:	4911      	ldr	r1, [pc, #68]	@ (80084b8 <_dtoa_r+0x590>)
 8008474:	f7f7 fe78 	bl	8000168 <__aeabi_dsub>
 8008478:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800847c:	f7f8 fa9e 	bl	80009bc <__aeabi_dcmplt>
 8008480:	2800      	cmp	r0, #0
 8008482:	f040 80b4 	bne.w	80085ee <_dtoa_r+0x6c6>
 8008486:	42a6      	cmp	r6, r4
 8008488:	f43f af70 	beq.w	800836c <_dtoa_r+0x444>
 800848c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008490:	2200      	movs	r2, #0
 8008492:	4b0a      	ldr	r3, [pc, #40]	@ (80084bc <_dtoa_r+0x594>)
 8008494:	f7f8 f820 	bl	80004d8 <__aeabi_dmul>
 8008498:	2200      	movs	r2, #0
 800849a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800849e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084a2:	4b06      	ldr	r3, [pc, #24]	@ (80084bc <_dtoa_r+0x594>)
 80084a4:	f7f8 f818 	bl	80004d8 <__aeabi_dmul>
 80084a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80084ac:	e7c4      	b.n	8008438 <_dtoa_r+0x510>
 80084ae:	bf00      	nop
 80084b0:	0800aee0 	.word	0x0800aee0
 80084b4:	0800aeb8 	.word	0x0800aeb8
 80084b8:	3ff00000 	.word	0x3ff00000
 80084bc:	40240000 	.word	0x40240000
 80084c0:	401c0000 	.word	0x401c0000
 80084c4:	40140000 	.word	0x40140000
 80084c8:	3fe00000 	.word	0x3fe00000
 80084cc:	4631      	mov	r1, r6
 80084ce:	4628      	mov	r0, r5
 80084d0:	f7f8 f802 	bl	80004d8 <__aeabi_dmul>
 80084d4:	4656      	mov	r6, sl
 80084d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80084da:	9413      	str	r4, [sp, #76]	@ 0x4c
 80084dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084e0:	f7f8 faaa 	bl	8000a38 <__aeabi_d2iz>
 80084e4:	4605      	mov	r5, r0
 80084e6:	f7f7 ff8d 	bl	8000404 <__aeabi_i2d>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084f2:	f7f7 fe39 	bl	8000168 <__aeabi_dsub>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	3530      	adds	r5, #48	@ 0x30
 80084fc:	f806 5b01 	strb.w	r5, [r6], #1
 8008500:	42a6      	cmp	r6, r4
 8008502:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008506:	f04f 0200 	mov.w	r2, #0
 800850a:	d124      	bne.n	8008556 <_dtoa_r+0x62e>
 800850c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008510:	4bae      	ldr	r3, [pc, #696]	@ (80087cc <_dtoa_r+0x8a4>)
 8008512:	f7f7 fe2b 	bl	800016c <__adddf3>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800851e:	f7f8 fa6b 	bl	80009f8 <__aeabi_dcmpgt>
 8008522:	2800      	cmp	r0, #0
 8008524:	d163      	bne.n	80085ee <_dtoa_r+0x6c6>
 8008526:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800852a:	2000      	movs	r0, #0
 800852c:	49a7      	ldr	r1, [pc, #668]	@ (80087cc <_dtoa_r+0x8a4>)
 800852e:	f7f7 fe1b 	bl	8000168 <__aeabi_dsub>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800853a:	f7f8 fa3f 	bl	80009bc <__aeabi_dcmplt>
 800853e:	2800      	cmp	r0, #0
 8008540:	f43f af14 	beq.w	800836c <_dtoa_r+0x444>
 8008544:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008546:	1e73      	subs	r3, r6, #1
 8008548:	9313      	str	r3, [sp, #76]	@ 0x4c
 800854a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800854e:	2b30      	cmp	r3, #48	@ 0x30
 8008550:	d0f8      	beq.n	8008544 <_dtoa_r+0x61c>
 8008552:	4647      	mov	r7, r8
 8008554:	e03b      	b.n	80085ce <_dtoa_r+0x6a6>
 8008556:	4b9e      	ldr	r3, [pc, #632]	@ (80087d0 <_dtoa_r+0x8a8>)
 8008558:	f7f7 ffbe 	bl	80004d8 <__aeabi_dmul>
 800855c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008560:	e7bc      	b.n	80084dc <_dtoa_r+0x5b4>
 8008562:	4656      	mov	r6, sl
 8008564:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800856c:	4620      	mov	r0, r4
 800856e:	4629      	mov	r1, r5
 8008570:	f7f8 f8dc 	bl	800072c <__aeabi_ddiv>
 8008574:	f7f8 fa60 	bl	8000a38 <__aeabi_d2iz>
 8008578:	4680      	mov	r8, r0
 800857a:	f7f7 ff43 	bl	8000404 <__aeabi_i2d>
 800857e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008582:	f7f7 ffa9 	bl	80004d8 <__aeabi_dmul>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	4620      	mov	r0, r4
 800858c:	4629      	mov	r1, r5
 800858e:	f7f7 fdeb 	bl	8000168 <__aeabi_dsub>
 8008592:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008596:	9d08      	ldr	r5, [sp, #32]
 8008598:	f806 4b01 	strb.w	r4, [r6], #1
 800859c:	eba6 040a 	sub.w	r4, r6, sl
 80085a0:	42a5      	cmp	r5, r4
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	d133      	bne.n	8008610 <_dtoa_r+0x6e8>
 80085a8:	f7f7 fde0 	bl	800016c <__adddf3>
 80085ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085b0:	4604      	mov	r4, r0
 80085b2:	460d      	mov	r5, r1
 80085b4:	f7f8 fa20 	bl	80009f8 <__aeabi_dcmpgt>
 80085b8:	b9c0      	cbnz	r0, 80085ec <_dtoa_r+0x6c4>
 80085ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085be:	4620      	mov	r0, r4
 80085c0:	4629      	mov	r1, r5
 80085c2:	f7f8 f9f1 	bl	80009a8 <__aeabi_dcmpeq>
 80085c6:	b110      	cbz	r0, 80085ce <_dtoa_r+0x6a6>
 80085c8:	f018 0f01 	tst.w	r8, #1
 80085cc:	d10e      	bne.n	80085ec <_dtoa_r+0x6c4>
 80085ce:	4648      	mov	r0, r9
 80085d0:	9903      	ldr	r1, [sp, #12]
 80085d2:	f000 fbbb 	bl	8008d4c <_Bfree>
 80085d6:	2300      	movs	r3, #0
 80085d8:	7033      	strb	r3, [r6, #0]
 80085da:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80085dc:	3701      	adds	r7, #1
 80085de:	601f      	str	r7, [r3, #0]
 80085e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 824b 	beq.w	8008a7e <_dtoa_r+0xb56>
 80085e8:	601e      	str	r6, [r3, #0]
 80085ea:	e248      	b.n	8008a7e <_dtoa_r+0xb56>
 80085ec:	46b8      	mov	r8, r7
 80085ee:	4633      	mov	r3, r6
 80085f0:	461e      	mov	r6, r3
 80085f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085f6:	2a39      	cmp	r2, #57	@ 0x39
 80085f8:	d106      	bne.n	8008608 <_dtoa_r+0x6e0>
 80085fa:	459a      	cmp	sl, r3
 80085fc:	d1f8      	bne.n	80085f0 <_dtoa_r+0x6c8>
 80085fe:	2230      	movs	r2, #48	@ 0x30
 8008600:	f108 0801 	add.w	r8, r8, #1
 8008604:	f88a 2000 	strb.w	r2, [sl]
 8008608:	781a      	ldrb	r2, [r3, #0]
 800860a:	3201      	adds	r2, #1
 800860c:	701a      	strb	r2, [r3, #0]
 800860e:	e7a0      	b.n	8008552 <_dtoa_r+0x62a>
 8008610:	2200      	movs	r2, #0
 8008612:	4b6f      	ldr	r3, [pc, #444]	@ (80087d0 <_dtoa_r+0x8a8>)
 8008614:	f7f7 ff60 	bl	80004d8 <__aeabi_dmul>
 8008618:	2200      	movs	r2, #0
 800861a:	2300      	movs	r3, #0
 800861c:	4604      	mov	r4, r0
 800861e:	460d      	mov	r5, r1
 8008620:	f7f8 f9c2 	bl	80009a8 <__aeabi_dcmpeq>
 8008624:	2800      	cmp	r0, #0
 8008626:	d09f      	beq.n	8008568 <_dtoa_r+0x640>
 8008628:	e7d1      	b.n	80085ce <_dtoa_r+0x6a6>
 800862a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800862c:	2a00      	cmp	r2, #0
 800862e:	f000 80ea 	beq.w	8008806 <_dtoa_r+0x8de>
 8008632:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008634:	2a01      	cmp	r2, #1
 8008636:	f300 80cd 	bgt.w	80087d4 <_dtoa_r+0x8ac>
 800863a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800863c:	2a00      	cmp	r2, #0
 800863e:	f000 80c1 	beq.w	80087c4 <_dtoa_r+0x89c>
 8008642:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008646:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008648:	9e04      	ldr	r6, [sp, #16]
 800864a:	9a04      	ldr	r2, [sp, #16]
 800864c:	2101      	movs	r1, #1
 800864e:	441a      	add	r2, r3
 8008650:	9204      	str	r2, [sp, #16]
 8008652:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008654:	4648      	mov	r0, r9
 8008656:	441a      	add	r2, r3
 8008658:	9209      	str	r2, [sp, #36]	@ 0x24
 800865a:	f000 fc2b 	bl	8008eb4 <__i2b>
 800865e:	4605      	mov	r5, r0
 8008660:	b166      	cbz	r6, 800867c <_dtoa_r+0x754>
 8008662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008664:	2b00      	cmp	r3, #0
 8008666:	dd09      	ble.n	800867c <_dtoa_r+0x754>
 8008668:	42b3      	cmp	r3, r6
 800866a:	bfa8      	it	ge
 800866c:	4633      	movge	r3, r6
 800866e:	9a04      	ldr	r2, [sp, #16]
 8008670:	1af6      	subs	r6, r6, r3
 8008672:	1ad2      	subs	r2, r2, r3
 8008674:	9204      	str	r2, [sp, #16]
 8008676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	9309      	str	r3, [sp, #36]	@ 0x24
 800867c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800867e:	b30b      	cbz	r3, 80086c4 <_dtoa_r+0x79c>
 8008680:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 80c6 	beq.w	8008814 <_dtoa_r+0x8ec>
 8008688:	2c00      	cmp	r4, #0
 800868a:	f000 80c0 	beq.w	800880e <_dtoa_r+0x8e6>
 800868e:	4629      	mov	r1, r5
 8008690:	4622      	mov	r2, r4
 8008692:	4648      	mov	r0, r9
 8008694:	f000 fcc6 	bl	8009024 <__pow5mult>
 8008698:	9a03      	ldr	r2, [sp, #12]
 800869a:	4601      	mov	r1, r0
 800869c:	4605      	mov	r5, r0
 800869e:	4648      	mov	r0, r9
 80086a0:	f000 fc1e 	bl	8008ee0 <__multiply>
 80086a4:	9903      	ldr	r1, [sp, #12]
 80086a6:	4680      	mov	r8, r0
 80086a8:	4648      	mov	r0, r9
 80086aa:	f000 fb4f 	bl	8008d4c <_Bfree>
 80086ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086b0:	1b1b      	subs	r3, r3, r4
 80086b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80086b4:	f000 80b1 	beq.w	800881a <_dtoa_r+0x8f2>
 80086b8:	4641      	mov	r1, r8
 80086ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086bc:	4648      	mov	r0, r9
 80086be:	f000 fcb1 	bl	8009024 <__pow5mult>
 80086c2:	9003      	str	r0, [sp, #12]
 80086c4:	2101      	movs	r1, #1
 80086c6:	4648      	mov	r0, r9
 80086c8:	f000 fbf4 	bl	8008eb4 <__i2b>
 80086cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086ce:	4604      	mov	r4, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 81d8 	beq.w	8008a86 <_dtoa_r+0xb5e>
 80086d6:	461a      	mov	r2, r3
 80086d8:	4601      	mov	r1, r0
 80086da:	4648      	mov	r0, r9
 80086dc:	f000 fca2 	bl	8009024 <__pow5mult>
 80086e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086e2:	4604      	mov	r4, r0
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	f300 809f 	bgt.w	8008828 <_dtoa_r+0x900>
 80086ea:	9b06      	ldr	r3, [sp, #24]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f040 8097 	bne.w	8008820 <_dtoa_r+0x8f8>
 80086f2:	9b07      	ldr	r3, [sp, #28]
 80086f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f040 8093 	bne.w	8008824 <_dtoa_r+0x8fc>
 80086fe:	9b07      	ldr	r3, [sp, #28]
 8008700:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008704:	0d1b      	lsrs	r3, r3, #20
 8008706:	051b      	lsls	r3, r3, #20
 8008708:	b133      	cbz	r3, 8008718 <_dtoa_r+0x7f0>
 800870a:	9b04      	ldr	r3, [sp, #16]
 800870c:	3301      	adds	r3, #1
 800870e:	9304      	str	r3, [sp, #16]
 8008710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008712:	3301      	adds	r3, #1
 8008714:	9309      	str	r3, [sp, #36]	@ 0x24
 8008716:	2301      	movs	r3, #1
 8008718:	930a      	str	r3, [sp, #40]	@ 0x28
 800871a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 81b8 	beq.w	8008a92 <_dtoa_r+0xb6a>
 8008722:	6923      	ldr	r3, [r4, #16]
 8008724:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008728:	6918      	ldr	r0, [r3, #16]
 800872a:	f000 fb77 	bl	8008e1c <__hi0bits>
 800872e:	f1c0 0020 	rsb	r0, r0, #32
 8008732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008734:	4418      	add	r0, r3
 8008736:	f010 001f 	ands.w	r0, r0, #31
 800873a:	f000 8082 	beq.w	8008842 <_dtoa_r+0x91a>
 800873e:	f1c0 0320 	rsb	r3, r0, #32
 8008742:	2b04      	cmp	r3, #4
 8008744:	dd73      	ble.n	800882e <_dtoa_r+0x906>
 8008746:	9b04      	ldr	r3, [sp, #16]
 8008748:	f1c0 001c 	rsb	r0, r0, #28
 800874c:	4403      	add	r3, r0
 800874e:	9304      	str	r3, [sp, #16]
 8008750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008752:	4406      	add	r6, r0
 8008754:	4403      	add	r3, r0
 8008756:	9309      	str	r3, [sp, #36]	@ 0x24
 8008758:	9b04      	ldr	r3, [sp, #16]
 800875a:	2b00      	cmp	r3, #0
 800875c:	dd05      	ble.n	800876a <_dtoa_r+0x842>
 800875e:	461a      	mov	r2, r3
 8008760:	4648      	mov	r0, r9
 8008762:	9903      	ldr	r1, [sp, #12]
 8008764:	f000 fcb8 	bl	80090d8 <__lshift>
 8008768:	9003      	str	r0, [sp, #12]
 800876a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800876c:	2b00      	cmp	r3, #0
 800876e:	dd05      	ble.n	800877c <_dtoa_r+0x854>
 8008770:	4621      	mov	r1, r4
 8008772:	461a      	mov	r2, r3
 8008774:	4648      	mov	r0, r9
 8008776:	f000 fcaf 	bl	80090d8 <__lshift>
 800877a:	4604      	mov	r4, r0
 800877c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800877e:	2b00      	cmp	r3, #0
 8008780:	d061      	beq.n	8008846 <_dtoa_r+0x91e>
 8008782:	4621      	mov	r1, r4
 8008784:	9803      	ldr	r0, [sp, #12]
 8008786:	f000 fd13 	bl	80091b0 <__mcmp>
 800878a:	2800      	cmp	r0, #0
 800878c:	da5b      	bge.n	8008846 <_dtoa_r+0x91e>
 800878e:	2300      	movs	r3, #0
 8008790:	220a      	movs	r2, #10
 8008792:	4648      	mov	r0, r9
 8008794:	9903      	ldr	r1, [sp, #12]
 8008796:	f000 fafb 	bl	8008d90 <__multadd>
 800879a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800879c:	f107 38ff 	add.w	r8, r7, #4294967295
 80087a0:	9003      	str	r0, [sp, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 8177 	beq.w	8008a96 <_dtoa_r+0xb6e>
 80087a8:	4629      	mov	r1, r5
 80087aa:	2300      	movs	r3, #0
 80087ac:	220a      	movs	r2, #10
 80087ae:	4648      	mov	r0, r9
 80087b0:	f000 faee 	bl	8008d90 <__multadd>
 80087b4:	f1bb 0f00 	cmp.w	fp, #0
 80087b8:	4605      	mov	r5, r0
 80087ba:	dc6f      	bgt.n	800889c <_dtoa_r+0x974>
 80087bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80087be:	2b02      	cmp	r3, #2
 80087c0:	dc49      	bgt.n	8008856 <_dtoa_r+0x92e>
 80087c2:	e06b      	b.n	800889c <_dtoa_r+0x974>
 80087c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80087c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80087ca:	e73c      	b.n	8008646 <_dtoa_r+0x71e>
 80087cc:	3fe00000 	.word	0x3fe00000
 80087d0:	40240000 	.word	0x40240000
 80087d4:	9b08      	ldr	r3, [sp, #32]
 80087d6:	1e5c      	subs	r4, r3, #1
 80087d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087da:	42a3      	cmp	r3, r4
 80087dc:	db09      	blt.n	80087f2 <_dtoa_r+0x8ca>
 80087de:	1b1c      	subs	r4, r3, r4
 80087e0:	9b08      	ldr	r3, [sp, #32]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f6bf af30 	bge.w	8008648 <_dtoa_r+0x720>
 80087e8:	9b04      	ldr	r3, [sp, #16]
 80087ea:	9a08      	ldr	r2, [sp, #32]
 80087ec:	1a9e      	subs	r6, r3, r2
 80087ee:	2300      	movs	r3, #0
 80087f0:	e72b      	b.n	800864a <_dtoa_r+0x722>
 80087f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087f6:	1ae3      	subs	r3, r4, r3
 80087f8:	441a      	add	r2, r3
 80087fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80087fc:	9e04      	ldr	r6, [sp, #16]
 80087fe:	2400      	movs	r4, #0
 8008800:	9b08      	ldr	r3, [sp, #32]
 8008802:	920e      	str	r2, [sp, #56]	@ 0x38
 8008804:	e721      	b.n	800864a <_dtoa_r+0x722>
 8008806:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008808:	9e04      	ldr	r6, [sp, #16]
 800880a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800880c:	e728      	b.n	8008660 <_dtoa_r+0x738>
 800880e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008812:	e751      	b.n	80086b8 <_dtoa_r+0x790>
 8008814:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008816:	9903      	ldr	r1, [sp, #12]
 8008818:	e750      	b.n	80086bc <_dtoa_r+0x794>
 800881a:	f8cd 800c 	str.w	r8, [sp, #12]
 800881e:	e751      	b.n	80086c4 <_dtoa_r+0x79c>
 8008820:	2300      	movs	r3, #0
 8008822:	e779      	b.n	8008718 <_dtoa_r+0x7f0>
 8008824:	9b06      	ldr	r3, [sp, #24]
 8008826:	e777      	b.n	8008718 <_dtoa_r+0x7f0>
 8008828:	2300      	movs	r3, #0
 800882a:	930a      	str	r3, [sp, #40]	@ 0x28
 800882c:	e779      	b.n	8008722 <_dtoa_r+0x7fa>
 800882e:	d093      	beq.n	8008758 <_dtoa_r+0x830>
 8008830:	9a04      	ldr	r2, [sp, #16]
 8008832:	331c      	adds	r3, #28
 8008834:	441a      	add	r2, r3
 8008836:	9204      	str	r2, [sp, #16]
 8008838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800883a:	441e      	add	r6, r3
 800883c:	441a      	add	r2, r3
 800883e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008840:	e78a      	b.n	8008758 <_dtoa_r+0x830>
 8008842:	4603      	mov	r3, r0
 8008844:	e7f4      	b.n	8008830 <_dtoa_r+0x908>
 8008846:	9b08      	ldr	r3, [sp, #32]
 8008848:	46b8      	mov	r8, r7
 800884a:	2b00      	cmp	r3, #0
 800884c:	dc20      	bgt.n	8008890 <_dtoa_r+0x968>
 800884e:	469b      	mov	fp, r3
 8008850:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008852:	2b02      	cmp	r3, #2
 8008854:	dd1e      	ble.n	8008894 <_dtoa_r+0x96c>
 8008856:	f1bb 0f00 	cmp.w	fp, #0
 800885a:	f47f adb1 	bne.w	80083c0 <_dtoa_r+0x498>
 800885e:	4621      	mov	r1, r4
 8008860:	465b      	mov	r3, fp
 8008862:	2205      	movs	r2, #5
 8008864:	4648      	mov	r0, r9
 8008866:	f000 fa93 	bl	8008d90 <__multadd>
 800886a:	4601      	mov	r1, r0
 800886c:	4604      	mov	r4, r0
 800886e:	9803      	ldr	r0, [sp, #12]
 8008870:	f000 fc9e 	bl	80091b0 <__mcmp>
 8008874:	2800      	cmp	r0, #0
 8008876:	f77f ada3 	ble.w	80083c0 <_dtoa_r+0x498>
 800887a:	4656      	mov	r6, sl
 800887c:	2331      	movs	r3, #49	@ 0x31
 800887e:	f108 0801 	add.w	r8, r8, #1
 8008882:	f806 3b01 	strb.w	r3, [r6], #1
 8008886:	e59f      	b.n	80083c8 <_dtoa_r+0x4a0>
 8008888:	46b8      	mov	r8, r7
 800888a:	9c08      	ldr	r4, [sp, #32]
 800888c:	4625      	mov	r5, r4
 800888e:	e7f4      	b.n	800887a <_dtoa_r+0x952>
 8008890:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008894:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 8101 	beq.w	8008a9e <_dtoa_r+0xb76>
 800889c:	2e00      	cmp	r6, #0
 800889e:	dd05      	ble.n	80088ac <_dtoa_r+0x984>
 80088a0:	4629      	mov	r1, r5
 80088a2:	4632      	mov	r2, r6
 80088a4:	4648      	mov	r0, r9
 80088a6:	f000 fc17 	bl	80090d8 <__lshift>
 80088aa:	4605      	mov	r5, r0
 80088ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d05c      	beq.n	800896c <_dtoa_r+0xa44>
 80088b2:	4648      	mov	r0, r9
 80088b4:	6869      	ldr	r1, [r5, #4]
 80088b6:	f000 fa09 	bl	8008ccc <_Balloc>
 80088ba:	4606      	mov	r6, r0
 80088bc:	b928      	cbnz	r0, 80088ca <_dtoa_r+0x9a2>
 80088be:	4602      	mov	r2, r0
 80088c0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80088c4:	4b80      	ldr	r3, [pc, #512]	@ (8008ac8 <_dtoa_r+0xba0>)
 80088c6:	f7ff bb43 	b.w	8007f50 <_dtoa_r+0x28>
 80088ca:	692a      	ldr	r2, [r5, #16]
 80088cc:	f105 010c 	add.w	r1, r5, #12
 80088d0:	3202      	adds	r2, #2
 80088d2:	0092      	lsls	r2, r2, #2
 80088d4:	300c      	adds	r0, #12
 80088d6:	f000 ff9d 	bl	8009814 <memcpy>
 80088da:	2201      	movs	r2, #1
 80088dc:	4631      	mov	r1, r6
 80088de:	4648      	mov	r0, r9
 80088e0:	f000 fbfa 	bl	80090d8 <__lshift>
 80088e4:	462f      	mov	r7, r5
 80088e6:	4605      	mov	r5, r0
 80088e8:	f10a 0301 	add.w	r3, sl, #1
 80088ec:	9304      	str	r3, [sp, #16]
 80088ee:	eb0a 030b 	add.w	r3, sl, fp
 80088f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80088f4:	9b06      	ldr	r3, [sp, #24]
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80088fc:	9b04      	ldr	r3, [sp, #16]
 80088fe:	4621      	mov	r1, r4
 8008900:	9803      	ldr	r0, [sp, #12]
 8008902:	f103 3bff 	add.w	fp, r3, #4294967295
 8008906:	f7ff fa86 	bl	8007e16 <quorem>
 800890a:	4603      	mov	r3, r0
 800890c:	4639      	mov	r1, r7
 800890e:	3330      	adds	r3, #48	@ 0x30
 8008910:	9006      	str	r0, [sp, #24]
 8008912:	9803      	ldr	r0, [sp, #12]
 8008914:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008916:	f000 fc4b 	bl	80091b0 <__mcmp>
 800891a:	462a      	mov	r2, r5
 800891c:	9008      	str	r0, [sp, #32]
 800891e:	4621      	mov	r1, r4
 8008920:	4648      	mov	r0, r9
 8008922:	f000 fc61 	bl	80091e8 <__mdiff>
 8008926:	68c2      	ldr	r2, [r0, #12]
 8008928:	4606      	mov	r6, r0
 800892a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800892c:	bb02      	cbnz	r2, 8008970 <_dtoa_r+0xa48>
 800892e:	4601      	mov	r1, r0
 8008930:	9803      	ldr	r0, [sp, #12]
 8008932:	f000 fc3d 	bl	80091b0 <__mcmp>
 8008936:	4602      	mov	r2, r0
 8008938:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800893a:	4631      	mov	r1, r6
 800893c:	4648      	mov	r0, r9
 800893e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8008942:	f000 fa03 	bl	8008d4c <_Bfree>
 8008946:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008948:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800894a:	9e04      	ldr	r6, [sp, #16]
 800894c:	ea42 0103 	orr.w	r1, r2, r3
 8008950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008952:	4319      	orrs	r1, r3
 8008954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008956:	d10d      	bne.n	8008974 <_dtoa_r+0xa4c>
 8008958:	2b39      	cmp	r3, #57	@ 0x39
 800895a:	d027      	beq.n	80089ac <_dtoa_r+0xa84>
 800895c:	9a08      	ldr	r2, [sp, #32]
 800895e:	2a00      	cmp	r2, #0
 8008960:	dd01      	ble.n	8008966 <_dtoa_r+0xa3e>
 8008962:	9b06      	ldr	r3, [sp, #24]
 8008964:	3331      	adds	r3, #49	@ 0x31
 8008966:	f88b 3000 	strb.w	r3, [fp]
 800896a:	e52e      	b.n	80083ca <_dtoa_r+0x4a2>
 800896c:	4628      	mov	r0, r5
 800896e:	e7b9      	b.n	80088e4 <_dtoa_r+0x9bc>
 8008970:	2201      	movs	r2, #1
 8008972:	e7e2      	b.n	800893a <_dtoa_r+0xa12>
 8008974:	9908      	ldr	r1, [sp, #32]
 8008976:	2900      	cmp	r1, #0
 8008978:	db04      	blt.n	8008984 <_dtoa_r+0xa5c>
 800897a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800897c:	4301      	orrs	r1, r0
 800897e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008980:	4301      	orrs	r1, r0
 8008982:	d120      	bne.n	80089c6 <_dtoa_r+0xa9e>
 8008984:	2a00      	cmp	r2, #0
 8008986:	ddee      	ble.n	8008966 <_dtoa_r+0xa3e>
 8008988:	2201      	movs	r2, #1
 800898a:	9903      	ldr	r1, [sp, #12]
 800898c:	4648      	mov	r0, r9
 800898e:	9304      	str	r3, [sp, #16]
 8008990:	f000 fba2 	bl	80090d8 <__lshift>
 8008994:	4621      	mov	r1, r4
 8008996:	9003      	str	r0, [sp, #12]
 8008998:	f000 fc0a 	bl	80091b0 <__mcmp>
 800899c:	2800      	cmp	r0, #0
 800899e:	9b04      	ldr	r3, [sp, #16]
 80089a0:	dc02      	bgt.n	80089a8 <_dtoa_r+0xa80>
 80089a2:	d1e0      	bne.n	8008966 <_dtoa_r+0xa3e>
 80089a4:	07da      	lsls	r2, r3, #31
 80089a6:	d5de      	bpl.n	8008966 <_dtoa_r+0xa3e>
 80089a8:	2b39      	cmp	r3, #57	@ 0x39
 80089aa:	d1da      	bne.n	8008962 <_dtoa_r+0xa3a>
 80089ac:	2339      	movs	r3, #57	@ 0x39
 80089ae:	f88b 3000 	strb.w	r3, [fp]
 80089b2:	4633      	mov	r3, r6
 80089b4:	461e      	mov	r6, r3
 80089b6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	2a39      	cmp	r2, #57	@ 0x39
 80089be:	d04e      	beq.n	8008a5e <_dtoa_r+0xb36>
 80089c0:	3201      	adds	r2, #1
 80089c2:	701a      	strb	r2, [r3, #0]
 80089c4:	e501      	b.n	80083ca <_dtoa_r+0x4a2>
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	dd03      	ble.n	80089d2 <_dtoa_r+0xaaa>
 80089ca:	2b39      	cmp	r3, #57	@ 0x39
 80089cc:	d0ee      	beq.n	80089ac <_dtoa_r+0xa84>
 80089ce:	3301      	adds	r3, #1
 80089d0:	e7c9      	b.n	8008966 <_dtoa_r+0xa3e>
 80089d2:	9a04      	ldr	r2, [sp, #16]
 80089d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80089da:	428a      	cmp	r2, r1
 80089dc:	d028      	beq.n	8008a30 <_dtoa_r+0xb08>
 80089de:	2300      	movs	r3, #0
 80089e0:	220a      	movs	r2, #10
 80089e2:	9903      	ldr	r1, [sp, #12]
 80089e4:	4648      	mov	r0, r9
 80089e6:	f000 f9d3 	bl	8008d90 <__multadd>
 80089ea:	42af      	cmp	r7, r5
 80089ec:	9003      	str	r0, [sp, #12]
 80089ee:	f04f 0300 	mov.w	r3, #0
 80089f2:	f04f 020a 	mov.w	r2, #10
 80089f6:	4639      	mov	r1, r7
 80089f8:	4648      	mov	r0, r9
 80089fa:	d107      	bne.n	8008a0c <_dtoa_r+0xae4>
 80089fc:	f000 f9c8 	bl	8008d90 <__multadd>
 8008a00:	4607      	mov	r7, r0
 8008a02:	4605      	mov	r5, r0
 8008a04:	9b04      	ldr	r3, [sp, #16]
 8008a06:	3301      	adds	r3, #1
 8008a08:	9304      	str	r3, [sp, #16]
 8008a0a:	e777      	b.n	80088fc <_dtoa_r+0x9d4>
 8008a0c:	f000 f9c0 	bl	8008d90 <__multadd>
 8008a10:	4629      	mov	r1, r5
 8008a12:	4607      	mov	r7, r0
 8008a14:	2300      	movs	r3, #0
 8008a16:	220a      	movs	r2, #10
 8008a18:	4648      	mov	r0, r9
 8008a1a:	f000 f9b9 	bl	8008d90 <__multadd>
 8008a1e:	4605      	mov	r5, r0
 8008a20:	e7f0      	b.n	8008a04 <_dtoa_r+0xadc>
 8008a22:	f1bb 0f00 	cmp.w	fp, #0
 8008a26:	bfcc      	ite	gt
 8008a28:	465e      	movgt	r6, fp
 8008a2a:	2601      	movle	r6, #1
 8008a2c:	2700      	movs	r7, #0
 8008a2e:	4456      	add	r6, sl
 8008a30:	2201      	movs	r2, #1
 8008a32:	9903      	ldr	r1, [sp, #12]
 8008a34:	4648      	mov	r0, r9
 8008a36:	9304      	str	r3, [sp, #16]
 8008a38:	f000 fb4e 	bl	80090d8 <__lshift>
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	9003      	str	r0, [sp, #12]
 8008a40:	f000 fbb6 	bl	80091b0 <__mcmp>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	dcb4      	bgt.n	80089b2 <_dtoa_r+0xa8a>
 8008a48:	d102      	bne.n	8008a50 <_dtoa_r+0xb28>
 8008a4a:	9b04      	ldr	r3, [sp, #16]
 8008a4c:	07db      	lsls	r3, r3, #31
 8008a4e:	d4b0      	bmi.n	80089b2 <_dtoa_r+0xa8a>
 8008a50:	4633      	mov	r3, r6
 8008a52:	461e      	mov	r6, r3
 8008a54:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a58:	2a30      	cmp	r2, #48	@ 0x30
 8008a5a:	d0fa      	beq.n	8008a52 <_dtoa_r+0xb2a>
 8008a5c:	e4b5      	b.n	80083ca <_dtoa_r+0x4a2>
 8008a5e:	459a      	cmp	sl, r3
 8008a60:	d1a8      	bne.n	80089b4 <_dtoa_r+0xa8c>
 8008a62:	2331      	movs	r3, #49	@ 0x31
 8008a64:	f108 0801 	add.w	r8, r8, #1
 8008a68:	f88a 3000 	strb.w	r3, [sl]
 8008a6c:	e4ad      	b.n	80083ca <_dtoa_r+0x4a2>
 8008a6e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008a70:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008acc <_dtoa_r+0xba4>
 8008a74:	b11b      	cbz	r3, 8008a7e <_dtoa_r+0xb56>
 8008a76:	f10a 0308 	add.w	r3, sl, #8
 8008a7a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	4650      	mov	r0, sl
 8008a80:	b017      	add	sp, #92	@ 0x5c
 8008a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	f77f ae2e 	ble.w	80086ea <_dtoa_r+0x7c2>
 8008a8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a92:	2001      	movs	r0, #1
 8008a94:	e64d      	b.n	8008732 <_dtoa_r+0x80a>
 8008a96:	f1bb 0f00 	cmp.w	fp, #0
 8008a9a:	f77f aed9 	ble.w	8008850 <_dtoa_r+0x928>
 8008a9e:	4656      	mov	r6, sl
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	9803      	ldr	r0, [sp, #12]
 8008aa4:	f7ff f9b7 	bl	8007e16 <quorem>
 8008aa8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008aac:	f806 3b01 	strb.w	r3, [r6], #1
 8008ab0:	eba6 020a 	sub.w	r2, r6, sl
 8008ab4:	4593      	cmp	fp, r2
 8008ab6:	ddb4      	ble.n	8008a22 <_dtoa_r+0xafa>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	220a      	movs	r2, #10
 8008abc:	4648      	mov	r0, r9
 8008abe:	9903      	ldr	r1, [sp, #12]
 8008ac0:	f000 f966 	bl	8008d90 <__multadd>
 8008ac4:	9003      	str	r0, [sp, #12]
 8008ac6:	e7eb      	b.n	8008aa0 <_dtoa_r+0xb78>
 8008ac8:	0800adea 	.word	0x0800adea
 8008acc:	0800ad6e 	.word	0x0800ad6e

08008ad0 <_free_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	2900      	cmp	r1, #0
 8008ad6:	d040      	beq.n	8008b5a <_free_r+0x8a>
 8008ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008adc:	1f0c      	subs	r4, r1, #4
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bfb8      	it	lt
 8008ae2:	18e4      	addlt	r4, r4, r3
 8008ae4:	f000 f8e6 	bl	8008cb4 <__malloc_lock>
 8008ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8008b5c <_free_r+0x8c>)
 8008aea:	6813      	ldr	r3, [r2, #0]
 8008aec:	b933      	cbnz	r3, 8008afc <_free_r+0x2c>
 8008aee:	6063      	str	r3, [r4, #4]
 8008af0:	6014      	str	r4, [r2, #0]
 8008af2:	4628      	mov	r0, r5
 8008af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008af8:	f000 b8e2 	b.w	8008cc0 <__malloc_unlock>
 8008afc:	42a3      	cmp	r3, r4
 8008afe:	d908      	bls.n	8008b12 <_free_r+0x42>
 8008b00:	6820      	ldr	r0, [r4, #0]
 8008b02:	1821      	adds	r1, r4, r0
 8008b04:	428b      	cmp	r3, r1
 8008b06:	bf01      	itttt	eq
 8008b08:	6819      	ldreq	r1, [r3, #0]
 8008b0a:	685b      	ldreq	r3, [r3, #4]
 8008b0c:	1809      	addeq	r1, r1, r0
 8008b0e:	6021      	streq	r1, [r4, #0]
 8008b10:	e7ed      	b.n	8008aee <_free_r+0x1e>
 8008b12:	461a      	mov	r2, r3
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	b10b      	cbz	r3, 8008b1c <_free_r+0x4c>
 8008b18:	42a3      	cmp	r3, r4
 8008b1a:	d9fa      	bls.n	8008b12 <_free_r+0x42>
 8008b1c:	6811      	ldr	r1, [r2, #0]
 8008b1e:	1850      	adds	r0, r2, r1
 8008b20:	42a0      	cmp	r0, r4
 8008b22:	d10b      	bne.n	8008b3c <_free_r+0x6c>
 8008b24:	6820      	ldr	r0, [r4, #0]
 8008b26:	4401      	add	r1, r0
 8008b28:	1850      	adds	r0, r2, r1
 8008b2a:	4283      	cmp	r3, r0
 8008b2c:	6011      	str	r1, [r2, #0]
 8008b2e:	d1e0      	bne.n	8008af2 <_free_r+0x22>
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	4408      	add	r0, r1
 8008b36:	6010      	str	r0, [r2, #0]
 8008b38:	6053      	str	r3, [r2, #4]
 8008b3a:	e7da      	b.n	8008af2 <_free_r+0x22>
 8008b3c:	d902      	bls.n	8008b44 <_free_r+0x74>
 8008b3e:	230c      	movs	r3, #12
 8008b40:	602b      	str	r3, [r5, #0]
 8008b42:	e7d6      	b.n	8008af2 <_free_r+0x22>
 8008b44:	6820      	ldr	r0, [r4, #0]
 8008b46:	1821      	adds	r1, r4, r0
 8008b48:	428b      	cmp	r3, r1
 8008b4a:	bf01      	itttt	eq
 8008b4c:	6819      	ldreq	r1, [r3, #0]
 8008b4e:	685b      	ldreq	r3, [r3, #4]
 8008b50:	1809      	addeq	r1, r1, r0
 8008b52:	6021      	streq	r1, [r4, #0]
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	6054      	str	r4, [r2, #4]
 8008b58:	e7cb      	b.n	8008af2 <_free_r+0x22>
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	20000478 	.word	0x20000478

08008b60 <malloc>:
 8008b60:	4b02      	ldr	r3, [pc, #8]	@ (8008b6c <malloc+0xc>)
 8008b62:	4601      	mov	r1, r0
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	f000 b825 	b.w	8008bb4 <_malloc_r>
 8008b6a:	bf00      	nop
 8008b6c:	20000018 	.word	0x20000018

08008b70 <sbrk_aligned>:
 8008b70:	b570      	push	{r4, r5, r6, lr}
 8008b72:	4e0f      	ldr	r6, [pc, #60]	@ (8008bb0 <sbrk_aligned+0x40>)
 8008b74:	460c      	mov	r4, r1
 8008b76:	6831      	ldr	r1, [r6, #0]
 8008b78:	4605      	mov	r5, r0
 8008b7a:	b911      	cbnz	r1, 8008b82 <sbrk_aligned+0x12>
 8008b7c:	f000 fe3a 	bl	80097f4 <_sbrk_r>
 8008b80:	6030      	str	r0, [r6, #0]
 8008b82:	4621      	mov	r1, r4
 8008b84:	4628      	mov	r0, r5
 8008b86:	f000 fe35 	bl	80097f4 <_sbrk_r>
 8008b8a:	1c43      	adds	r3, r0, #1
 8008b8c:	d103      	bne.n	8008b96 <sbrk_aligned+0x26>
 8008b8e:	f04f 34ff 	mov.w	r4, #4294967295
 8008b92:	4620      	mov	r0, r4
 8008b94:	bd70      	pop	{r4, r5, r6, pc}
 8008b96:	1cc4      	adds	r4, r0, #3
 8008b98:	f024 0403 	bic.w	r4, r4, #3
 8008b9c:	42a0      	cmp	r0, r4
 8008b9e:	d0f8      	beq.n	8008b92 <sbrk_aligned+0x22>
 8008ba0:	1a21      	subs	r1, r4, r0
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f000 fe26 	bl	80097f4 <_sbrk_r>
 8008ba8:	3001      	adds	r0, #1
 8008baa:	d1f2      	bne.n	8008b92 <sbrk_aligned+0x22>
 8008bac:	e7ef      	b.n	8008b8e <sbrk_aligned+0x1e>
 8008bae:	bf00      	nop
 8008bb0:	20000474 	.word	0x20000474

08008bb4 <_malloc_r>:
 8008bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bb8:	1ccd      	adds	r5, r1, #3
 8008bba:	f025 0503 	bic.w	r5, r5, #3
 8008bbe:	3508      	adds	r5, #8
 8008bc0:	2d0c      	cmp	r5, #12
 8008bc2:	bf38      	it	cc
 8008bc4:	250c      	movcc	r5, #12
 8008bc6:	2d00      	cmp	r5, #0
 8008bc8:	4606      	mov	r6, r0
 8008bca:	db01      	blt.n	8008bd0 <_malloc_r+0x1c>
 8008bcc:	42a9      	cmp	r1, r5
 8008bce:	d904      	bls.n	8008bda <_malloc_r+0x26>
 8008bd0:	230c      	movs	r3, #12
 8008bd2:	6033      	str	r3, [r6, #0]
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cb0 <_malloc_r+0xfc>
 8008bde:	f000 f869 	bl	8008cb4 <__malloc_lock>
 8008be2:	f8d8 3000 	ldr.w	r3, [r8]
 8008be6:	461c      	mov	r4, r3
 8008be8:	bb44      	cbnz	r4, 8008c3c <_malloc_r+0x88>
 8008bea:	4629      	mov	r1, r5
 8008bec:	4630      	mov	r0, r6
 8008bee:	f7ff ffbf 	bl	8008b70 <sbrk_aligned>
 8008bf2:	1c43      	adds	r3, r0, #1
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	d158      	bne.n	8008caa <_malloc_r+0xf6>
 8008bf8:	f8d8 4000 	ldr.w	r4, [r8]
 8008bfc:	4627      	mov	r7, r4
 8008bfe:	2f00      	cmp	r7, #0
 8008c00:	d143      	bne.n	8008c8a <_malloc_r+0xd6>
 8008c02:	2c00      	cmp	r4, #0
 8008c04:	d04b      	beq.n	8008c9e <_malloc_r+0xea>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	4639      	mov	r1, r7
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	eb04 0903 	add.w	r9, r4, r3
 8008c10:	f000 fdf0 	bl	80097f4 <_sbrk_r>
 8008c14:	4581      	cmp	r9, r0
 8008c16:	d142      	bne.n	8008c9e <_malloc_r+0xea>
 8008c18:	6821      	ldr	r1, [r4, #0]
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	1a6d      	subs	r5, r5, r1
 8008c1e:	4629      	mov	r1, r5
 8008c20:	f7ff ffa6 	bl	8008b70 <sbrk_aligned>
 8008c24:	3001      	adds	r0, #1
 8008c26:	d03a      	beq.n	8008c9e <_malloc_r+0xea>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	442b      	add	r3, r5
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	bb62      	cbnz	r2, 8008c90 <_malloc_r+0xdc>
 8008c36:	f8c8 7000 	str.w	r7, [r8]
 8008c3a:	e00f      	b.n	8008c5c <_malloc_r+0xa8>
 8008c3c:	6822      	ldr	r2, [r4, #0]
 8008c3e:	1b52      	subs	r2, r2, r5
 8008c40:	d420      	bmi.n	8008c84 <_malloc_r+0xd0>
 8008c42:	2a0b      	cmp	r2, #11
 8008c44:	d917      	bls.n	8008c76 <_malloc_r+0xc2>
 8008c46:	1961      	adds	r1, r4, r5
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	6025      	str	r5, [r4, #0]
 8008c4c:	bf18      	it	ne
 8008c4e:	6059      	strne	r1, [r3, #4]
 8008c50:	6863      	ldr	r3, [r4, #4]
 8008c52:	bf08      	it	eq
 8008c54:	f8c8 1000 	streq.w	r1, [r8]
 8008c58:	5162      	str	r2, [r4, r5]
 8008c5a:	604b      	str	r3, [r1, #4]
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f000 f82f 	bl	8008cc0 <__malloc_unlock>
 8008c62:	f104 000b 	add.w	r0, r4, #11
 8008c66:	1d23      	adds	r3, r4, #4
 8008c68:	f020 0007 	bic.w	r0, r0, #7
 8008c6c:	1ac2      	subs	r2, r0, r3
 8008c6e:	bf1c      	itt	ne
 8008c70:	1a1b      	subne	r3, r3, r0
 8008c72:	50a3      	strne	r3, [r4, r2]
 8008c74:	e7af      	b.n	8008bd6 <_malloc_r+0x22>
 8008c76:	6862      	ldr	r2, [r4, #4]
 8008c78:	42a3      	cmp	r3, r4
 8008c7a:	bf0c      	ite	eq
 8008c7c:	f8c8 2000 	streq.w	r2, [r8]
 8008c80:	605a      	strne	r2, [r3, #4]
 8008c82:	e7eb      	b.n	8008c5c <_malloc_r+0xa8>
 8008c84:	4623      	mov	r3, r4
 8008c86:	6864      	ldr	r4, [r4, #4]
 8008c88:	e7ae      	b.n	8008be8 <_malloc_r+0x34>
 8008c8a:	463c      	mov	r4, r7
 8008c8c:	687f      	ldr	r7, [r7, #4]
 8008c8e:	e7b6      	b.n	8008bfe <_malloc_r+0x4a>
 8008c90:	461a      	mov	r2, r3
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	d1fb      	bne.n	8008c90 <_malloc_r+0xdc>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	6053      	str	r3, [r2, #4]
 8008c9c:	e7de      	b.n	8008c5c <_malloc_r+0xa8>
 8008c9e:	230c      	movs	r3, #12
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	6033      	str	r3, [r6, #0]
 8008ca4:	f000 f80c 	bl	8008cc0 <__malloc_unlock>
 8008ca8:	e794      	b.n	8008bd4 <_malloc_r+0x20>
 8008caa:	6005      	str	r5, [r0, #0]
 8008cac:	e7d6      	b.n	8008c5c <_malloc_r+0xa8>
 8008cae:	bf00      	nop
 8008cb0:	20000478 	.word	0x20000478

08008cb4 <__malloc_lock>:
 8008cb4:	4801      	ldr	r0, [pc, #4]	@ (8008cbc <__malloc_lock+0x8>)
 8008cb6:	f7ff b89e 	b.w	8007df6 <__retarget_lock_acquire_recursive>
 8008cba:	bf00      	nop
 8008cbc:	20000470 	.word	0x20000470

08008cc0 <__malloc_unlock>:
 8008cc0:	4801      	ldr	r0, [pc, #4]	@ (8008cc8 <__malloc_unlock+0x8>)
 8008cc2:	f7ff b899 	b.w	8007df8 <__retarget_lock_release_recursive>
 8008cc6:	bf00      	nop
 8008cc8:	20000470 	.word	0x20000470

08008ccc <_Balloc>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	69c6      	ldr	r6, [r0, #28]
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	460d      	mov	r5, r1
 8008cd4:	b976      	cbnz	r6, 8008cf4 <_Balloc+0x28>
 8008cd6:	2010      	movs	r0, #16
 8008cd8:	f7ff ff42 	bl	8008b60 <malloc>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	61e0      	str	r0, [r4, #28]
 8008ce0:	b920      	cbnz	r0, 8008cec <_Balloc+0x20>
 8008ce2:	216b      	movs	r1, #107	@ 0x6b
 8008ce4:	4b17      	ldr	r3, [pc, #92]	@ (8008d44 <_Balloc+0x78>)
 8008ce6:	4818      	ldr	r0, [pc, #96]	@ (8008d48 <_Balloc+0x7c>)
 8008ce8:	f000 fda2 	bl	8009830 <__assert_func>
 8008cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cf0:	6006      	str	r6, [r0, #0]
 8008cf2:	60c6      	str	r6, [r0, #12]
 8008cf4:	69e6      	ldr	r6, [r4, #28]
 8008cf6:	68f3      	ldr	r3, [r6, #12]
 8008cf8:	b183      	cbz	r3, 8008d1c <_Balloc+0x50>
 8008cfa:	69e3      	ldr	r3, [r4, #28]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d02:	b9b8      	cbnz	r0, 8008d34 <_Balloc+0x68>
 8008d04:	2101      	movs	r1, #1
 8008d06:	fa01 f605 	lsl.w	r6, r1, r5
 8008d0a:	1d72      	adds	r2, r6, #5
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	0092      	lsls	r2, r2, #2
 8008d10:	f000 fdac 	bl	800986c <_calloc_r>
 8008d14:	b160      	cbz	r0, 8008d30 <_Balloc+0x64>
 8008d16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d1a:	e00e      	b.n	8008d3a <_Balloc+0x6e>
 8008d1c:	2221      	movs	r2, #33	@ 0x21
 8008d1e:	2104      	movs	r1, #4
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 fda3 	bl	800986c <_calloc_r>
 8008d26:	69e3      	ldr	r3, [r4, #28]
 8008d28:	60f0      	str	r0, [r6, #12]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e4      	bne.n	8008cfa <_Balloc+0x2e>
 8008d30:	2000      	movs	r0, #0
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	6802      	ldr	r2, [r0, #0]
 8008d36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d40:	e7f7      	b.n	8008d32 <_Balloc+0x66>
 8008d42:	bf00      	nop
 8008d44:	0800ad7b 	.word	0x0800ad7b
 8008d48:	0800adfb 	.word	0x0800adfb

08008d4c <_Bfree>:
 8008d4c:	b570      	push	{r4, r5, r6, lr}
 8008d4e:	69c6      	ldr	r6, [r0, #28]
 8008d50:	4605      	mov	r5, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	b976      	cbnz	r6, 8008d74 <_Bfree+0x28>
 8008d56:	2010      	movs	r0, #16
 8008d58:	f7ff ff02 	bl	8008b60 <malloc>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	61e8      	str	r0, [r5, #28]
 8008d60:	b920      	cbnz	r0, 8008d6c <_Bfree+0x20>
 8008d62:	218f      	movs	r1, #143	@ 0x8f
 8008d64:	4b08      	ldr	r3, [pc, #32]	@ (8008d88 <_Bfree+0x3c>)
 8008d66:	4809      	ldr	r0, [pc, #36]	@ (8008d8c <_Bfree+0x40>)
 8008d68:	f000 fd62 	bl	8009830 <__assert_func>
 8008d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d70:	6006      	str	r6, [r0, #0]
 8008d72:	60c6      	str	r6, [r0, #12]
 8008d74:	b13c      	cbz	r4, 8008d86 <_Bfree+0x3a>
 8008d76:	69eb      	ldr	r3, [r5, #28]
 8008d78:	6862      	ldr	r2, [r4, #4]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d80:	6021      	str	r1, [r4, #0]
 8008d82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d86:	bd70      	pop	{r4, r5, r6, pc}
 8008d88:	0800ad7b 	.word	0x0800ad7b
 8008d8c:	0800adfb 	.word	0x0800adfb

08008d90 <__multadd>:
 8008d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d94:	4607      	mov	r7, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	461e      	mov	r6, r3
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	690d      	ldr	r5, [r1, #16]
 8008d9e:	f101 0c14 	add.w	ip, r1, #20
 8008da2:	f8dc 3000 	ldr.w	r3, [ip]
 8008da6:	3001      	adds	r0, #1
 8008da8:	b299      	uxth	r1, r3
 8008daa:	fb02 6101 	mla	r1, r2, r1, r6
 8008dae:	0c1e      	lsrs	r6, r3, #16
 8008db0:	0c0b      	lsrs	r3, r1, #16
 8008db2:	fb02 3306 	mla	r3, r2, r6, r3
 8008db6:	b289      	uxth	r1, r1
 8008db8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008dbc:	4285      	cmp	r5, r0
 8008dbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008dc2:	f84c 1b04 	str.w	r1, [ip], #4
 8008dc6:	dcec      	bgt.n	8008da2 <__multadd+0x12>
 8008dc8:	b30e      	cbz	r6, 8008e0e <__multadd+0x7e>
 8008dca:	68a3      	ldr	r3, [r4, #8]
 8008dcc:	42ab      	cmp	r3, r5
 8008dce:	dc19      	bgt.n	8008e04 <__multadd+0x74>
 8008dd0:	6861      	ldr	r1, [r4, #4]
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	3101      	adds	r1, #1
 8008dd6:	f7ff ff79 	bl	8008ccc <_Balloc>
 8008dda:	4680      	mov	r8, r0
 8008ddc:	b928      	cbnz	r0, 8008dea <__multadd+0x5a>
 8008dde:	4602      	mov	r2, r0
 8008de0:	21ba      	movs	r1, #186	@ 0xba
 8008de2:	4b0c      	ldr	r3, [pc, #48]	@ (8008e14 <__multadd+0x84>)
 8008de4:	480c      	ldr	r0, [pc, #48]	@ (8008e18 <__multadd+0x88>)
 8008de6:	f000 fd23 	bl	8009830 <__assert_func>
 8008dea:	6922      	ldr	r2, [r4, #16]
 8008dec:	f104 010c 	add.w	r1, r4, #12
 8008df0:	3202      	adds	r2, #2
 8008df2:	0092      	lsls	r2, r2, #2
 8008df4:	300c      	adds	r0, #12
 8008df6:	f000 fd0d 	bl	8009814 <memcpy>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f7ff ffa5 	bl	8008d4c <_Bfree>
 8008e02:	4644      	mov	r4, r8
 8008e04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e08:	3501      	adds	r5, #1
 8008e0a:	615e      	str	r6, [r3, #20]
 8008e0c:	6125      	str	r5, [r4, #16]
 8008e0e:	4620      	mov	r0, r4
 8008e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e14:	0800adea 	.word	0x0800adea
 8008e18:	0800adfb 	.word	0x0800adfb

08008e1c <__hi0bits>:
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e22:	bf3a      	itte	cc
 8008e24:	0403      	lslcc	r3, r0, #16
 8008e26:	2010      	movcc	r0, #16
 8008e28:	2000      	movcs	r0, #0
 8008e2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e2e:	bf3c      	itt	cc
 8008e30:	021b      	lslcc	r3, r3, #8
 8008e32:	3008      	addcc	r0, #8
 8008e34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e38:	bf3c      	itt	cc
 8008e3a:	011b      	lslcc	r3, r3, #4
 8008e3c:	3004      	addcc	r0, #4
 8008e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e42:	bf3c      	itt	cc
 8008e44:	009b      	lslcc	r3, r3, #2
 8008e46:	3002      	addcc	r0, #2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	db05      	blt.n	8008e58 <__hi0bits+0x3c>
 8008e4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008e50:	f100 0001 	add.w	r0, r0, #1
 8008e54:	bf08      	it	eq
 8008e56:	2020      	moveq	r0, #32
 8008e58:	4770      	bx	lr

08008e5a <__lo0bits>:
 8008e5a:	6803      	ldr	r3, [r0, #0]
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	f013 0007 	ands.w	r0, r3, #7
 8008e62:	d00b      	beq.n	8008e7c <__lo0bits+0x22>
 8008e64:	07d9      	lsls	r1, r3, #31
 8008e66:	d421      	bmi.n	8008eac <__lo0bits+0x52>
 8008e68:	0798      	lsls	r0, r3, #30
 8008e6a:	bf49      	itett	mi
 8008e6c:	085b      	lsrmi	r3, r3, #1
 8008e6e:	089b      	lsrpl	r3, r3, #2
 8008e70:	2001      	movmi	r0, #1
 8008e72:	6013      	strmi	r3, [r2, #0]
 8008e74:	bf5c      	itt	pl
 8008e76:	2002      	movpl	r0, #2
 8008e78:	6013      	strpl	r3, [r2, #0]
 8008e7a:	4770      	bx	lr
 8008e7c:	b299      	uxth	r1, r3
 8008e7e:	b909      	cbnz	r1, 8008e84 <__lo0bits+0x2a>
 8008e80:	2010      	movs	r0, #16
 8008e82:	0c1b      	lsrs	r3, r3, #16
 8008e84:	b2d9      	uxtb	r1, r3
 8008e86:	b909      	cbnz	r1, 8008e8c <__lo0bits+0x32>
 8008e88:	3008      	adds	r0, #8
 8008e8a:	0a1b      	lsrs	r3, r3, #8
 8008e8c:	0719      	lsls	r1, r3, #28
 8008e8e:	bf04      	itt	eq
 8008e90:	091b      	lsreq	r3, r3, #4
 8008e92:	3004      	addeq	r0, #4
 8008e94:	0799      	lsls	r1, r3, #30
 8008e96:	bf04      	itt	eq
 8008e98:	089b      	lsreq	r3, r3, #2
 8008e9a:	3002      	addeq	r0, #2
 8008e9c:	07d9      	lsls	r1, r3, #31
 8008e9e:	d403      	bmi.n	8008ea8 <__lo0bits+0x4e>
 8008ea0:	085b      	lsrs	r3, r3, #1
 8008ea2:	f100 0001 	add.w	r0, r0, #1
 8008ea6:	d003      	beq.n	8008eb0 <__lo0bits+0x56>
 8008ea8:	6013      	str	r3, [r2, #0]
 8008eaa:	4770      	bx	lr
 8008eac:	2000      	movs	r0, #0
 8008eae:	4770      	bx	lr
 8008eb0:	2020      	movs	r0, #32
 8008eb2:	4770      	bx	lr

08008eb4 <__i2b>:
 8008eb4:	b510      	push	{r4, lr}
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	2101      	movs	r1, #1
 8008eba:	f7ff ff07 	bl	8008ccc <_Balloc>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	b928      	cbnz	r0, 8008ece <__i2b+0x1a>
 8008ec2:	f240 1145 	movw	r1, #325	@ 0x145
 8008ec6:	4b04      	ldr	r3, [pc, #16]	@ (8008ed8 <__i2b+0x24>)
 8008ec8:	4804      	ldr	r0, [pc, #16]	@ (8008edc <__i2b+0x28>)
 8008eca:	f000 fcb1 	bl	8009830 <__assert_func>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	6144      	str	r4, [r0, #20]
 8008ed2:	6103      	str	r3, [r0, #16]
 8008ed4:	bd10      	pop	{r4, pc}
 8008ed6:	bf00      	nop
 8008ed8:	0800adea 	.word	0x0800adea
 8008edc:	0800adfb 	.word	0x0800adfb

08008ee0 <__multiply>:
 8008ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	4617      	mov	r7, r2
 8008ee6:	690a      	ldr	r2, [r1, #16]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	4689      	mov	r9, r1
 8008eec:	429a      	cmp	r2, r3
 8008eee:	bfa2      	ittt	ge
 8008ef0:	463b      	movge	r3, r7
 8008ef2:	460f      	movge	r7, r1
 8008ef4:	4699      	movge	r9, r3
 8008ef6:	693d      	ldr	r5, [r7, #16]
 8008ef8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	eb05 060a 	add.w	r6, r5, sl
 8008f04:	42b3      	cmp	r3, r6
 8008f06:	b085      	sub	sp, #20
 8008f08:	bfb8      	it	lt
 8008f0a:	3101      	addlt	r1, #1
 8008f0c:	f7ff fede 	bl	8008ccc <_Balloc>
 8008f10:	b930      	cbnz	r0, 8008f20 <__multiply+0x40>
 8008f12:	4602      	mov	r2, r0
 8008f14:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f18:	4b40      	ldr	r3, [pc, #256]	@ (800901c <__multiply+0x13c>)
 8008f1a:	4841      	ldr	r0, [pc, #260]	@ (8009020 <__multiply+0x140>)
 8008f1c:	f000 fc88 	bl	8009830 <__assert_func>
 8008f20:	f100 0414 	add.w	r4, r0, #20
 8008f24:	4623      	mov	r3, r4
 8008f26:	2200      	movs	r2, #0
 8008f28:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008f2c:	4573      	cmp	r3, lr
 8008f2e:	d320      	bcc.n	8008f72 <__multiply+0x92>
 8008f30:	f107 0814 	add.w	r8, r7, #20
 8008f34:	f109 0114 	add.w	r1, r9, #20
 8008f38:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008f3c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008f40:	9302      	str	r3, [sp, #8]
 8008f42:	1beb      	subs	r3, r5, r7
 8008f44:	3b15      	subs	r3, #21
 8008f46:	f023 0303 	bic.w	r3, r3, #3
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	3715      	adds	r7, #21
 8008f4e:	42bd      	cmp	r5, r7
 8008f50:	bf38      	it	cc
 8008f52:	2304      	movcc	r3, #4
 8008f54:	9301      	str	r3, [sp, #4]
 8008f56:	9b02      	ldr	r3, [sp, #8]
 8008f58:	9103      	str	r1, [sp, #12]
 8008f5a:	428b      	cmp	r3, r1
 8008f5c:	d80c      	bhi.n	8008f78 <__multiply+0x98>
 8008f5e:	2e00      	cmp	r6, #0
 8008f60:	dd03      	ble.n	8008f6a <__multiply+0x8a>
 8008f62:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d055      	beq.n	8009016 <__multiply+0x136>
 8008f6a:	6106      	str	r6, [r0, #16]
 8008f6c:	b005      	add	sp, #20
 8008f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f72:	f843 2b04 	str.w	r2, [r3], #4
 8008f76:	e7d9      	b.n	8008f2c <__multiply+0x4c>
 8008f78:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f7c:	f1ba 0f00 	cmp.w	sl, #0
 8008f80:	d01f      	beq.n	8008fc2 <__multiply+0xe2>
 8008f82:	46c4      	mov	ip, r8
 8008f84:	46a1      	mov	r9, r4
 8008f86:	2700      	movs	r7, #0
 8008f88:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f8c:	f8d9 3000 	ldr.w	r3, [r9]
 8008f90:	fa1f fb82 	uxth.w	fp, r2
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f9a:	443b      	add	r3, r7
 8008f9c:	f8d9 7000 	ldr.w	r7, [r9]
 8008fa0:	0c12      	lsrs	r2, r2, #16
 8008fa2:	0c3f      	lsrs	r7, r7, #16
 8008fa4:	fb0a 7202 	mla	r2, sl, r2, r7
 8008fa8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fb2:	4565      	cmp	r5, ip
 8008fb4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008fb8:	f849 3b04 	str.w	r3, [r9], #4
 8008fbc:	d8e4      	bhi.n	8008f88 <__multiply+0xa8>
 8008fbe:	9b01      	ldr	r3, [sp, #4]
 8008fc0:	50e7      	str	r7, [r4, r3]
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	3104      	adds	r1, #4
 8008fc6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008fca:	f1b9 0f00 	cmp.w	r9, #0
 8008fce:	d020      	beq.n	8009012 <__multiply+0x132>
 8008fd0:	4647      	mov	r7, r8
 8008fd2:	46a4      	mov	ip, r4
 8008fd4:	f04f 0a00 	mov.w	sl, #0
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	f8b7 b000 	ldrh.w	fp, [r7]
 8008fde:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	fb09 220b 	mla	r2, r9, fp, r2
 8008fe8:	4452      	add	r2, sl
 8008fea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fee:	f84c 3b04 	str.w	r3, [ip], #4
 8008ff2:	f857 3b04 	ldr.w	r3, [r7], #4
 8008ff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ffa:	f8bc 3000 	ldrh.w	r3, [ip]
 8008ffe:	42bd      	cmp	r5, r7
 8009000:	fb09 330a 	mla	r3, r9, sl, r3
 8009004:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009008:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800900c:	d8e5      	bhi.n	8008fda <__multiply+0xfa>
 800900e:	9a01      	ldr	r2, [sp, #4]
 8009010:	50a3      	str	r3, [r4, r2]
 8009012:	3404      	adds	r4, #4
 8009014:	e79f      	b.n	8008f56 <__multiply+0x76>
 8009016:	3e01      	subs	r6, #1
 8009018:	e7a1      	b.n	8008f5e <__multiply+0x7e>
 800901a:	bf00      	nop
 800901c:	0800adea 	.word	0x0800adea
 8009020:	0800adfb 	.word	0x0800adfb

08009024 <__pow5mult>:
 8009024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009028:	4615      	mov	r5, r2
 800902a:	f012 0203 	ands.w	r2, r2, #3
 800902e:	4607      	mov	r7, r0
 8009030:	460e      	mov	r6, r1
 8009032:	d007      	beq.n	8009044 <__pow5mult+0x20>
 8009034:	4c25      	ldr	r4, [pc, #148]	@ (80090cc <__pow5mult+0xa8>)
 8009036:	3a01      	subs	r2, #1
 8009038:	2300      	movs	r3, #0
 800903a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800903e:	f7ff fea7 	bl	8008d90 <__multadd>
 8009042:	4606      	mov	r6, r0
 8009044:	10ad      	asrs	r5, r5, #2
 8009046:	d03d      	beq.n	80090c4 <__pow5mult+0xa0>
 8009048:	69fc      	ldr	r4, [r7, #28]
 800904a:	b97c      	cbnz	r4, 800906c <__pow5mult+0x48>
 800904c:	2010      	movs	r0, #16
 800904e:	f7ff fd87 	bl	8008b60 <malloc>
 8009052:	4602      	mov	r2, r0
 8009054:	61f8      	str	r0, [r7, #28]
 8009056:	b928      	cbnz	r0, 8009064 <__pow5mult+0x40>
 8009058:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800905c:	4b1c      	ldr	r3, [pc, #112]	@ (80090d0 <__pow5mult+0xac>)
 800905e:	481d      	ldr	r0, [pc, #116]	@ (80090d4 <__pow5mult+0xb0>)
 8009060:	f000 fbe6 	bl	8009830 <__assert_func>
 8009064:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009068:	6004      	str	r4, [r0, #0]
 800906a:	60c4      	str	r4, [r0, #12]
 800906c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009070:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009074:	b94c      	cbnz	r4, 800908a <__pow5mult+0x66>
 8009076:	f240 2171 	movw	r1, #625	@ 0x271
 800907a:	4638      	mov	r0, r7
 800907c:	f7ff ff1a 	bl	8008eb4 <__i2b>
 8009080:	2300      	movs	r3, #0
 8009082:	4604      	mov	r4, r0
 8009084:	f8c8 0008 	str.w	r0, [r8, #8]
 8009088:	6003      	str	r3, [r0, #0]
 800908a:	f04f 0900 	mov.w	r9, #0
 800908e:	07eb      	lsls	r3, r5, #31
 8009090:	d50a      	bpl.n	80090a8 <__pow5mult+0x84>
 8009092:	4631      	mov	r1, r6
 8009094:	4622      	mov	r2, r4
 8009096:	4638      	mov	r0, r7
 8009098:	f7ff ff22 	bl	8008ee0 <__multiply>
 800909c:	4680      	mov	r8, r0
 800909e:	4631      	mov	r1, r6
 80090a0:	4638      	mov	r0, r7
 80090a2:	f7ff fe53 	bl	8008d4c <_Bfree>
 80090a6:	4646      	mov	r6, r8
 80090a8:	106d      	asrs	r5, r5, #1
 80090aa:	d00b      	beq.n	80090c4 <__pow5mult+0xa0>
 80090ac:	6820      	ldr	r0, [r4, #0]
 80090ae:	b938      	cbnz	r0, 80090c0 <__pow5mult+0x9c>
 80090b0:	4622      	mov	r2, r4
 80090b2:	4621      	mov	r1, r4
 80090b4:	4638      	mov	r0, r7
 80090b6:	f7ff ff13 	bl	8008ee0 <__multiply>
 80090ba:	6020      	str	r0, [r4, #0]
 80090bc:	f8c0 9000 	str.w	r9, [r0]
 80090c0:	4604      	mov	r4, r0
 80090c2:	e7e4      	b.n	800908e <__pow5mult+0x6a>
 80090c4:	4630      	mov	r0, r6
 80090c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ca:	bf00      	nop
 80090cc:	0800aeac 	.word	0x0800aeac
 80090d0:	0800ad7b 	.word	0x0800ad7b
 80090d4:	0800adfb 	.word	0x0800adfb

080090d8 <__lshift>:
 80090d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090dc:	460c      	mov	r4, r1
 80090de:	4607      	mov	r7, r0
 80090e0:	4691      	mov	r9, r2
 80090e2:	6923      	ldr	r3, [r4, #16]
 80090e4:	6849      	ldr	r1, [r1, #4]
 80090e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090ea:	68a3      	ldr	r3, [r4, #8]
 80090ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090f0:	f108 0601 	add.w	r6, r8, #1
 80090f4:	42b3      	cmp	r3, r6
 80090f6:	db0b      	blt.n	8009110 <__lshift+0x38>
 80090f8:	4638      	mov	r0, r7
 80090fa:	f7ff fde7 	bl	8008ccc <_Balloc>
 80090fe:	4605      	mov	r5, r0
 8009100:	b948      	cbnz	r0, 8009116 <__lshift+0x3e>
 8009102:	4602      	mov	r2, r0
 8009104:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009108:	4b27      	ldr	r3, [pc, #156]	@ (80091a8 <__lshift+0xd0>)
 800910a:	4828      	ldr	r0, [pc, #160]	@ (80091ac <__lshift+0xd4>)
 800910c:	f000 fb90 	bl	8009830 <__assert_func>
 8009110:	3101      	adds	r1, #1
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	e7ee      	b.n	80090f4 <__lshift+0x1c>
 8009116:	2300      	movs	r3, #0
 8009118:	f100 0114 	add.w	r1, r0, #20
 800911c:	f100 0210 	add.w	r2, r0, #16
 8009120:	4618      	mov	r0, r3
 8009122:	4553      	cmp	r3, sl
 8009124:	db33      	blt.n	800918e <__lshift+0xb6>
 8009126:	6920      	ldr	r0, [r4, #16]
 8009128:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800912c:	f104 0314 	add.w	r3, r4, #20
 8009130:	f019 091f 	ands.w	r9, r9, #31
 8009134:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009138:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800913c:	d02b      	beq.n	8009196 <__lshift+0xbe>
 800913e:	468a      	mov	sl, r1
 8009140:	2200      	movs	r2, #0
 8009142:	f1c9 0e20 	rsb	lr, r9, #32
 8009146:	6818      	ldr	r0, [r3, #0]
 8009148:	fa00 f009 	lsl.w	r0, r0, r9
 800914c:	4310      	orrs	r0, r2
 800914e:	f84a 0b04 	str.w	r0, [sl], #4
 8009152:	f853 2b04 	ldr.w	r2, [r3], #4
 8009156:	459c      	cmp	ip, r3
 8009158:	fa22 f20e 	lsr.w	r2, r2, lr
 800915c:	d8f3      	bhi.n	8009146 <__lshift+0x6e>
 800915e:	ebac 0304 	sub.w	r3, ip, r4
 8009162:	3b15      	subs	r3, #21
 8009164:	f023 0303 	bic.w	r3, r3, #3
 8009168:	3304      	adds	r3, #4
 800916a:	f104 0015 	add.w	r0, r4, #21
 800916e:	4560      	cmp	r0, ip
 8009170:	bf88      	it	hi
 8009172:	2304      	movhi	r3, #4
 8009174:	50ca      	str	r2, [r1, r3]
 8009176:	b10a      	cbz	r2, 800917c <__lshift+0xa4>
 8009178:	f108 0602 	add.w	r6, r8, #2
 800917c:	3e01      	subs	r6, #1
 800917e:	4638      	mov	r0, r7
 8009180:	4621      	mov	r1, r4
 8009182:	612e      	str	r6, [r5, #16]
 8009184:	f7ff fde2 	bl	8008d4c <_Bfree>
 8009188:	4628      	mov	r0, r5
 800918a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009192:	3301      	adds	r3, #1
 8009194:	e7c5      	b.n	8009122 <__lshift+0x4a>
 8009196:	3904      	subs	r1, #4
 8009198:	f853 2b04 	ldr.w	r2, [r3], #4
 800919c:	459c      	cmp	ip, r3
 800919e:	f841 2f04 	str.w	r2, [r1, #4]!
 80091a2:	d8f9      	bhi.n	8009198 <__lshift+0xc0>
 80091a4:	e7ea      	b.n	800917c <__lshift+0xa4>
 80091a6:	bf00      	nop
 80091a8:	0800adea 	.word	0x0800adea
 80091ac:	0800adfb 	.word	0x0800adfb

080091b0 <__mcmp>:
 80091b0:	4603      	mov	r3, r0
 80091b2:	690a      	ldr	r2, [r1, #16]
 80091b4:	6900      	ldr	r0, [r0, #16]
 80091b6:	b530      	push	{r4, r5, lr}
 80091b8:	1a80      	subs	r0, r0, r2
 80091ba:	d10e      	bne.n	80091da <__mcmp+0x2a>
 80091bc:	3314      	adds	r3, #20
 80091be:	3114      	adds	r1, #20
 80091c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80091c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80091c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091d0:	4295      	cmp	r5, r2
 80091d2:	d003      	beq.n	80091dc <__mcmp+0x2c>
 80091d4:	d205      	bcs.n	80091e2 <__mcmp+0x32>
 80091d6:	f04f 30ff 	mov.w	r0, #4294967295
 80091da:	bd30      	pop	{r4, r5, pc}
 80091dc:	42a3      	cmp	r3, r4
 80091de:	d3f3      	bcc.n	80091c8 <__mcmp+0x18>
 80091e0:	e7fb      	b.n	80091da <__mcmp+0x2a>
 80091e2:	2001      	movs	r0, #1
 80091e4:	e7f9      	b.n	80091da <__mcmp+0x2a>
	...

080091e8 <__mdiff>:
 80091e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	4689      	mov	r9, r1
 80091ee:	4606      	mov	r6, r0
 80091f0:	4611      	mov	r1, r2
 80091f2:	4648      	mov	r0, r9
 80091f4:	4614      	mov	r4, r2
 80091f6:	f7ff ffdb 	bl	80091b0 <__mcmp>
 80091fa:	1e05      	subs	r5, r0, #0
 80091fc:	d112      	bne.n	8009224 <__mdiff+0x3c>
 80091fe:	4629      	mov	r1, r5
 8009200:	4630      	mov	r0, r6
 8009202:	f7ff fd63 	bl	8008ccc <_Balloc>
 8009206:	4602      	mov	r2, r0
 8009208:	b928      	cbnz	r0, 8009216 <__mdiff+0x2e>
 800920a:	f240 2137 	movw	r1, #567	@ 0x237
 800920e:	4b3e      	ldr	r3, [pc, #248]	@ (8009308 <__mdiff+0x120>)
 8009210:	483e      	ldr	r0, [pc, #248]	@ (800930c <__mdiff+0x124>)
 8009212:	f000 fb0d 	bl	8009830 <__assert_func>
 8009216:	2301      	movs	r3, #1
 8009218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800921c:	4610      	mov	r0, r2
 800921e:	b003      	add	sp, #12
 8009220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009224:	bfbc      	itt	lt
 8009226:	464b      	movlt	r3, r9
 8009228:	46a1      	movlt	r9, r4
 800922a:	4630      	mov	r0, r6
 800922c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009230:	bfba      	itte	lt
 8009232:	461c      	movlt	r4, r3
 8009234:	2501      	movlt	r5, #1
 8009236:	2500      	movge	r5, #0
 8009238:	f7ff fd48 	bl	8008ccc <_Balloc>
 800923c:	4602      	mov	r2, r0
 800923e:	b918      	cbnz	r0, 8009248 <__mdiff+0x60>
 8009240:	f240 2145 	movw	r1, #581	@ 0x245
 8009244:	4b30      	ldr	r3, [pc, #192]	@ (8009308 <__mdiff+0x120>)
 8009246:	e7e3      	b.n	8009210 <__mdiff+0x28>
 8009248:	f100 0b14 	add.w	fp, r0, #20
 800924c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009250:	f109 0310 	add.w	r3, r9, #16
 8009254:	60c5      	str	r5, [r0, #12]
 8009256:	f04f 0c00 	mov.w	ip, #0
 800925a:	f109 0514 	add.w	r5, r9, #20
 800925e:	46d9      	mov	r9, fp
 8009260:	6926      	ldr	r6, [r4, #16]
 8009262:	f104 0e14 	add.w	lr, r4, #20
 8009266:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800926a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	9b01      	ldr	r3, [sp, #4]
 8009272:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009276:	f853 af04 	ldr.w	sl, [r3, #4]!
 800927a:	b281      	uxth	r1, r0
 800927c:	9301      	str	r3, [sp, #4]
 800927e:	fa1f f38a 	uxth.w	r3, sl
 8009282:	1a5b      	subs	r3, r3, r1
 8009284:	0c00      	lsrs	r0, r0, #16
 8009286:	4463      	add	r3, ip
 8009288:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800928c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009290:	b29b      	uxth	r3, r3
 8009292:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009296:	4576      	cmp	r6, lr
 8009298:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800929c:	f849 3b04 	str.w	r3, [r9], #4
 80092a0:	d8e6      	bhi.n	8009270 <__mdiff+0x88>
 80092a2:	1b33      	subs	r3, r6, r4
 80092a4:	3b15      	subs	r3, #21
 80092a6:	f023 0303 	bic.w	r3, r3, #3
 80092aa:	3415      	adds	r4, #21
 80092ac:	3304      	adds	r3, #4
 80092ae:	42a6      	cmp	r6, r4
 80092b0:	bf38      	it	cc
 80092b2:	2304      	movcc	r3, #4
 80092b4:	441d      	add	r5, r3
 80092b6:	445b      	add	r3, fp
 80092b8:	461e      	mov	r6, r3
 80092ba:	462c      	mov	r4, r5
 80092bc:	4544      	cmp	r4, r8
 80092be:	d30e      	bcc.n	80092de <__mdiff+0xf6>
 80092c0:	f108 0103 	add.w	r1, r8, #3
 80092c4:	1b49      	subs	r1, r1, r5
 80092c6:	f021 0103 	bic.w	r1, r1, #3
 80092ca:	3d03      	subs	r5, #3
 80092cc:	45a8      	cmp	r8, r5
 80092ce:	bf38      	it	cc
 80092d0:	2100      	movcc	r1, #0
 80092d2:	440b      	add	r3, r1
 80092d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092d8:	b199      	cbz	r1, 8009302 <__mdiff+0x11a>
 80092da:	6117      	str	r7, [r2, #16]
 80092dc:	e79e      	b.n	800921c <__mdiff+0x34>
 80092de:	46e6      	mov	lr, ip
 80092e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80092e4:	fa1f fc81 	uxth.w	ip, r1
 80092e8:	44f4      	add	ip, lr
 80092ea:	0c08      	lsrs	r0, r1, #16
 80092ec:	4471      	add	r1, lr
 80092ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80092f2:	b289      	uxth	r1, r1
 80092f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80092f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092fc:	f846 1b04 	str.w	r1, [r6], #4
 8009300:	e7dc      	b.n	80092bc <__mdiff+0xd4>
 8009302:	3f01      	subs	r7, #1
 8009304:	e7e6      	b.n	80092d4 <__mdiff+0xec>
 8009306:	bf00      	nop
 8009308:	0800adea 	.word	0x0800adea
 800930c:	0800adfb 	.word	0x0800adfb

08009310 <__d2b>:
 8009310:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009314:	2101      	movs	r1, #1
 8009316:	4690      	mov	r8, r2
 8009318:	4699      	mov	r9, r3
 800931a:	9e08      	ldr	r6, [sp, #32]
 800931c:	f7ff fcd6 	bl	8008ccc <_Balloc>
 8009320:	4604      	mov	r4, r0
 8009322:	b930      	cbnz	r0, 8009332 <__d2b+0x22>
 8009324:	4602      	mov	r2, r0
 8009326:	f240 310f 	movw	r1, #783	@ 0x30f
 800932a:	4b23      	ldr	r3, [pc, #140]	@ (80093b8 <__d2b+0xa8>)
 800932c:	4823      	ldr	r0, [pc, #140]	@ (80093bc <__d2b+0xac>)
 800932e:	f000 fa7f 	bl	8009830 <__assert_func>
 8009332:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009336:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800933a:	b10d      	cbz	r5, 8009340 <__d2b+0x30>
 800933c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009340:	9301      	str	r3, [sp, #4]
 8009342:	f1b8 0300 	subs.w	r3, r8, #0
 8009346:	d024      	beq.n	8009392 <__d2b+0x82>
 8009348:	4668      	mov	r0, sp
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	f7ff fd85 	bl	8008e5a <__lo0bits>
 8009350:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009354:	b1d8      	cbz	r0, 800938e <__d2b+0x7e>
 8009356:	f1c0 0320 	rsb	r3, r0, #32
 800935a:	fa02 f303 	lsl.w	r3, r2, r3
 800935e:	430b      	orrs	r3, r1
 8009360:	40c2      	lsrs	r2, r0
 8009362:	6163      	str	r3, [r4, #20]
 8009364:	9201      	str	r2, [sp, #4]
 8009366:	9b01      	ldr	r3, [sp, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	bf0c      	ite	eq
 800936c:	2201      	moveq	r2, #1
 800936e:	2202      	movne	r2, #2
 8009370:	61a3      	str	r3, [r4, #24]
 8009372:	6122      	str	r2, [r4, #16]
 8009374:	b1ad      	cbz	r5, 80093a2 <__d2b+0x92>
 8009376:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800937a:	4405      	add	r5, r0
 800937c:	6035      	str	r5, [r6, #0]
 800937e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009384:	6018      	str	r0, [r3, #0]
 8009386:	4620      	mov	r0, r4
 8009388:	b002      	add	sp, #8
 800938a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800938e:	6161      	str	r1, [r4, #20]
 8009390:	e7e9      	b.n	8009366 <__d2b+0x56>
 8009392:	a801      	add	r0, sp, #4
 8009394:	f7ff fd61 	bl	8008e5a <__lo0bits>
 8009398:	9b01      	ldr	r3, [sp, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	6163      	str	r3, [r4, #20]
 800939e:	3020      	adds	r0, #32
 80093a0:	e7e7      	b.n	8009372 <__d2b+0x62>
 80093a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093aa:	6030      	str	r0, [r6, #0]
 80093ac:	6918      	ldr	r0, [r3, #16]
 80093ae:	f7ff fd35 	bl	8008e1c <__hi0bits>
 80093b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093b6:	e7e4      	b.n	8009382 <__d2b+0x72>
 80093b8:	0800adea 	.word	0x0800adea
 80093bc:	0800adfb 	.word	0x0800adfb

080093c0 <__ssputs_r>:
 80093c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c4:	461f      	mov	r7, r3
 80093c6:	688e      	ldr	r6, [r1, #8]
 80093c8:	4682      	mov	sl, r0
 80093ca:	42be      	cmp	r6, r7
 80093cc:	460c      	mov	r4, r1
 80093ce:	4690      	mov	r8, r2
 80093d0:	680b      	ldr	r3, [r1, #0]
 80093d2:	d82d      	bhi.n	8009430 <__ssputs_r+0x70>
 80093d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80093dc:	d026      	beq.n	800942c <__ssputs_r+0x6c>
 80093de:	6965      	ldr	r5, [r4, #20]
 80093e0:	6909      	ldr	r1, [r1, #16]
 80093e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093e6:	eba3 0901 	sub.w	r9, r3, r1
 80093ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093ee:	1c7b      	adds	r3, r7, #1
 80093f0:	444b      	add	r3, r9
 80093f2:	106d      	asrs	r5, r5, #1
 80093f4:	429d      	cmp	r5, r3
 80093f6:	bf38      	it	cc
 80093f8:	461d      	movcc	r5, r3
 80093fa:	0553      	lsls	r3, r2, #21
 80093fc:	d527      	bpl.n	800944e <__ssputs_r+0x8e>
 80093fe:	4629      	mov	r1, r5
 8009400:	f7ff fbd8 	bl	8008bb4 <_malloc_r>
 8009404:	4606      	mov	r6, r0
 8009406:	b360      	cbz	r0, 8009462 <__ssputs_r+0xa2>
 8009408:	464a      	mov	r2, r9
 800940a:	6921      	ldr	r1, [r4, #16]
 800940c:	f000 fa02 	bl	8009814 <memcpy>
 8009410:	89a3      	ldrh	r3, [r4, #12]
 8009412:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800941a:	81a3      	strh	r3, [r4, #12]
 800941c:	6126      	str	r6, [r4, #16]
 800941e:	444e      	add	r6, r9
 8009420:	6026      	str	r6, [r4, #0]
 8009422:	463e      	mov	r6, r7
 8009424:	6165      	str	r5, [r4, #20]
 8009426:	eba5 0509 	sub.w	r5, r5, r9
 800942a:	60a5      	str	r5, [r4, #8]
 800942c:	42be      	cmp	r6, r7
 800942e:	d900      	bls.n	8009432 <__ssputs_r+0x72>
 8009430:	463e      	mov	r6, r7
 8009432:	4632      	mov	r2, r6
 8009434:	4641      	mov	r1, r8
 8009436:	6820      	ldr	r0, [r4, #0]
 8009438:	f000 f9c2 	bl	80097c0 <memmove>
 800943c:	2000      	movs	r0, #0
 800943e:	68a3      	ldr	r3, [r4, #8]
 8009440:	1b9b      	subs	r3, r3, r6
 8009442:	60a3      	str	r3, [r4, #8]
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	4433      	add	r3, r6
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800944e:	462a      	mov	r2, r5
 8009450:	f000 fa32 	bl	80098b8 <_realloc_r>
 8009454:	4606      	mov	r6, r0
 8009456:	2800      	cmp	r0, #0
 8009458:	d1e0      	bne.n	800941c <__ssputs_r+0x5c>
 800945a:	4650      	mov	r0, sl
 800945c:	6921      	ldr	r1, [r4, #16]
 800945e:	f7ff fb37 	bl	8008ad0 <_free_r>
 8009462:	230c      	movs	r3, #12
 8009464:	f8ca 3000 	str.w	r3, [sl]
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	f04f 30ff 	mov.w	r0, #4294967295
 800946e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009472:	81a3      	strh	r3, [r4, #12]
 8009474:	e7e9      	b.n	800944a <__ssputs_r+0x8a>
	...

08009478 <_svfiprintf_r>:
 8009478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947c:	4698      	mov	r8, r3
 800947e:	898b      	ldrh	r3, [r1, #12]
 8009480:	4607      	mov	r7, r0
 8009482:	061b      	lsls	r3, r3, #24
 8009484:	460d      	mov	r5, r1
 8009486:	4614      	mov	r4, r2
 8009488:	b09d      	sub	sp, #116	@ 0x74
 800948a:	d510      	bpl.n	80094ae <_svfiprintf_r+0x36>
 800948c:	690b      	ldr	r3, [r1, #16]
 800948e:	b973      	cbnz	r3, 80094ae <_svfiprintf_r+0x36>
 8009490:	2140      	movs	r1, #64	@ 0x40
 8009492:	f7ff fb8f 	bl	8008bb4 <_malloc_r>
 8009496:	6028      	str	r0, [r5, #0]
 8009498:	6128      	str	r0, [r5, #16]
 800949a:	b930      	cbnz	r0, 80094aa <_svfiprintf_r+0x32>
 800949c:	230c      	movs	r3, #12
 800949e:	603b      	str	r3, [r7, #0]
 80094a0:	f04f 30ff 	mov.w	r0, #4294967295
 80094a4:	b01d      	add	sp, #116	@ 0x74
 80094a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094aa:	2340      	movs	r3, #64	@ 0x40
 80094ac:	616b      	str	r3, [r5, #20]
 80094ae:	2300      	movs	r3, #0
 80094b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80094b2:	2320      	movs	r3, #32
 80094b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094b8:	2330      	movs	r3, #48	@ 0x30
 80094ba:	f04f 0901 	mov.w	r9, #1
 80094be:	f8cd 800c 	str.w	r8, [sp, #12]
 80094c2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800965c <_svfiprintf_r+0x1e4>
 80094c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094ca:	4623      	mov	r3, r4
 80094cc:	469a      	mov	sl, r3
 80094ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094d2:	b10a      	cbz	r2, 80094d8 <_svfiprintf_r+0x60>
 80094d4:	2a25      	cmp	r2, #37	@ 0x25
 80094d6:	d1f9      	bne.n	80094cc <_svfiprintf_r+0x54>
 80094d8:	ebba 0b04 	subs.w	fp, sl, r4
 80094dc:	d00b      	beq.n	80094f6 <_svfiprintf_r+0x7e>
 80094de:	465b      	mov	r3, fp
 80094e0:	4622      	mov	r2, r4
 80094e2:	4629      	mov	r1, r5
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff ff6b 	bl	80093c0 <__ssputs_r>
 80094ea:	3001      	adds	r0, #1
 80094ec:	f000 80a7 	beq.w	800963e <_svfiprintf_r+0x1c6>
 80094f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094f2:	445a      	add	r2, fp
 80094f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80094f6:	f89a 3000 	ldrb.w	r3, [sl]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 809f 	beq.w	800963e <_svfiprintf_r+0x1c6>
 8009500:	2300      	movs	r3, #0
 8009502:	f04f 32ff 	mov.w	r2, #4294967295
 8009506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800950a:	f10a 0a01 	add.w	sl, sl, #1
 800950e:	9304      	str	r3, [sp, #16]
 8009510:	9307      	str	r3, [sp, #28]
 8009512:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009516:	931a      	str	r3, [sp, #104]	@ 0x68
 8009518:	4654      	mov	r4, sl
 800951a:	2205      	movs	r2, #5
 800951c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009520:	484e      	ldr	r0, [pc, #312]	@ (800965c <_svfiprintf_r+0x1e4>)
 8009522:	f7fe fc6a 	bl	8007dfa <memchr>
 8009526:	9a04      	ldr	r2, [sp, #16]
 8009528:	b9d8      	cbnz	r0, 8009562 <_svfiprintf_r+0xea>
 800952a:	06d0      	lsls	r0, r2, #27
 800952c:	bf44      	itt	mi
 800952e:	2320      	movmi	r3, #32
 8009530:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009534:	0711      	lsls	r1, r2, #28
 8009536:	bf44      	itt	mi
 8009538:	232b      	movmi	r3, #43	@ 0x2b
 800953a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800953e:	f89a 3000 	ldrb.w	r3, [sl]
 8009542:	2b2a      	cmp	r3, #42	@ 0x2a
 8009544:	d015      	beq.n	8009572 <_svfiprintf_r+0xfa>
 8009546:	4654      	mov	r4, sl
 8009548:	2000      	movs	r0, #0
 800954a:	f04f 0c0a 	mov.w	ip, #10
 800954e:	9a07      	ldr	r2, [sp, #28]
 8009550:	4621      	mov	r1, r4
 8009552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009556:	3b30      	subs	r3, #48	@ 0x30
 8009558:	2b09      	cmp	r3, #9
 800955a:	d94b      	bls.n	80095f4 <_svfiprintf_r+0x17c>
 800955c:	b1b0      	cbz	r0, 800958c <_svfiprintf_r+0x114>
 800955e:	9207      	str	r2, [sp, #28]
 8009560:	e014      	b.n	800958c <_svfiprintf_r+0x114>
 8009562:	eba0 0308 	sub.w	r3, r0, r8
 8009566:	fa09 f303 	lsl.w	r3, r9, r3
 800956a:	4313      	orrs	r3, r2
 800956c:	46a2      	mov	sl, r4
 800956e:	9304      	str	r3, [sp, #16]
 8009570:	e7d2      	b.n	8009518 <_svfiprintf_r+0xa0>
 8009572:	9b03      	ldr	r3, [sp, #12]
 8009574:	1d19      	adds	r1, r3, #4
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	9103      	str	r1, [sp, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	bfbb      	ittet	lt
 800957e:	425b      	neglt	r3, r3
 8009580:	f042 0202 	orrlt.w	r2, r2, #2
 8009584:	9307      	strge	r3, [sp, #28]
 8009586:	9307      	strlt	r3, [sp, #28]
 8009588:	bfb8      	it	lt
 800958a:	9204      	strlt	r2, [sp, #16]
 800958c:	7823      	ldrb	r3, [r4, #0]
 800958e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009590:	d10a      	bne.n	80095a8 <_svfiprintf_r+0x130>
 8009592:	7863      	ldrb	r3, [r4, #1]
 8009594:	2b2a      	cmp	r3, #42	@ 0x2a
 8009596:	d132      	bne.n	80095fe <_svfiprintf_r+0x186>
 8009598:	9b03      	ldr	r3, [sp, #12]
 800959a:	3402      	adds	r4, #2
 800959c:	1d1a      	adds	r2, r3, #4
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	9203      	str	r2, [sp, #12]
 80095a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095a6:	9305      	str	r3, [sp, #20]
 80095a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009660 <_svfiprintf_r+0x1e8>
 80095ac:	2203      	movs	r2, #3
 80095ae:	4650      	mov	r0, sl
 80095b0:	7821      	ldrb	r1, [r4, #0]
 80095b2:	f7fe fc22 	bl	8007dfa <memchr>
 80095b6:	b138      	cbz	r0, 80095c8 <_svfiprintf_r+0x150>
 80095b8:	2240      	movs	r2, #64	@ 0x40
 80095ba:	9b04      	ldr	r3, [sp, #16]
 80095bc:	eba0 000a 	sub.w	r0, r0, sl
 80095c0:	4082      	lsls	r2, r0
 80095c2:	4313      	orrs	r3, r2
 80095c4:	3401      	adds	r4, #1
 80095c6:	9304      	str	r3, [sp, #16]
 80095c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095cc:	2206      	movs	r2, #6
 80095ce:	4825      	ldr	r0, [pc, #148]	@ (8009664 <_svfiprintf_r+0x1ec>)
 80095d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095d4:	f7fe fc11 	bl	8007dfa <memchr>
 80095d8:	2800      	cmp	r0, #0
 80095da:	d036      	beq.n	800964a <_svfiprintf_r+0x1d2>
 80095dc:	4b22      	ldr	r3, [pc, #136]	@ (8009668 <_svfiprintf_r+0x1f0>)
 80095de:	bb1b      	cbnz	r3, 8009628 <_svfiprintf_r+0x1b0>
 80095e0:	9b03      	ldr	r3, [sp, #12]
 80095e2:	3307      	adds	r3, #7
 80095e4:	f023 0307 	bic.w	r3, r3, #7
 80095e8:	3308      	adds	r3, #8
 80095ea:	9303      	str	r3, [sp, #12]
 80095ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ee:	4433      	add	r3, r6
 80095f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80095f2:	e76a      	b.n	80094ca <_svfiprintf_r+0x52>
 80095f4:	460c      	mov	r4, r1
 80095f6:	2001      	movs	r0, #1
 80095f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80095fc:	e7a8      	b.n	8009550 <_svfiprintf_r+0xd8>
 80095fe:	2300      	movs	r3, #0
 8009600:	f04f 0c0a 	mov.w	ip, #10
 8009604:	4619      	mov	r1, r3
 8009606:	3401      	adds	r4, #1
 8009608:	9305      	str	r3, [sp, #20]
 800960a:	4620      	mov	r0, r4
 800960c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009610:	3a30      	subs	r2, #48	@ 0x30
 8009612:	2a09      	cmp	r2, #9
 8009614:	d903      	bls.n	800961e <_svfiprintf_r+0x1a6>
 8009616:	2b00      	cmp	r3, #0
 8009618:	d0c6      	beq.n	80095a8 <_svfiprintf_r+0x130>
 800961a:	9105      	str	r1, [sp, #20]
 800961c:	e7c4      	b.n	80095a8 <_svfiprintf_r+0x130>
 800961e:	4604      	mov	r4, r0
 8009620:	2301      	movs	r3, #1
 8009622:	fb0c 2101 	mla	r1, ip, r1, r2
 8009626:	e7f0      	b.n	800960a <_svfiprintf_r+0x192>
 8009628:	ab03      	add	r3, sp, #12
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	462a      	mov	r2, r5
 800962e:	4638      	mov	r0, r7
 8009630:	4b0e      	ldr	r3, [pc, #56]	@ (800966c <_svfiprintf_r+0x1f4>)
 8009632:	a904      	add	r1, sp, #16
 8009634:	f7fd fe6a 	bl	800730c <_printf_float>
 8009638:	1c42      	adds	r2, r0, #1
 800963a:	4606      	mov	r6, r0
 800963c:	d1d6      	bne.n	80095ec <_svfiprintf_r+0x174>
 800963e:	89ab      	ldrh	r3, [r5, #12]
 8009640:	065b      	lsls	r3, r3, #25
 8009642:	f53f af2d 	bmi.w	80094a0 <_svfiprintf_r+0x28>
 8009646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009648:	e72c      	b.n	80094a4 <_svfiprintf_r+0x2c>
 800964a:	ab03      	add	r3, sp, #12
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	462a      	mov	r2, r5
 8009650:	4638      	mov	r0, r7
 8009652:	4b06      	ldr	r3, [pc, #24]	@ (800966c <_svfiprintf_r+0x1f4>)
 8009654:	a904      	add	r1, sp, #16
 8009656:	f7fe f8f7 	bl	8007848 <_printf_i>
 800965a:	e7ed      	b.n	8009638 <_svfiprintf_r+0x1c0>
 800965c:	0800ae54 	.word	0x0800ae54
 8009660:	0800ae5a 	.word	0x0800ae5a
 8009664:	0800ae5e 	.word	0x0800ae5e
 8009668:	0800730d 	.word	0x0800730d
 800966c:	080093c1 	.word	0x080093c1

08009670 <__sflush_r>:
 8009670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	0716      	lsls	r6, r2, #28
 8009678:	4605      	mov	r5, r0
 800967a:	460c      	mov	r4, r1
 800967c:	d454      	bmi.n	8009728 <__sflush_r+0xb8>
 800967e:	684b      	ldr	r3, [r1, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	dc02      	bgt.n	800968a <__sflush_r+0x1a>
 8009684:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009686:	2b00      	cmp	r3, #0
 8009688:	dd48      	ble.n	800971c <__sflush_r+0xac>
 800968a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800968c:	2e00      	cmp	r6, #0
 800968e:	d045      	beq.n	800971c <__sflush_r+0xac>
 8009690:	2300      	movs	r3, #0
 8009692:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009696:	682f      	ldr	r7, [r5, #0]
 8009698:	6a21      	ldr	r1, [r4, #32]
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	d030      	beq.n	8009700 <__sflush_r+0x90>
 800969e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	0759      	lsls	r1, r3, #29
 80096a4:	d505      	bpl.n	80096b2 <__sflush_r+0x42>
 80096a6:	6863      	ldr	r3, [r4, #4]
 80096a8:	1ad2      	subs	r2, r2, r3
 80096aa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096ac:	b10b      	cbz	r3, 80096b2 <__sflush_r+0x42>
 80096ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80096b0:	1ad2      	subs	r2, r2, r3
 80096b2:	2300      	movs	r3, #0
 80096b4:	4628      	mov	r0, r5
 80096b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096b8:	6a21      	ldr	r1, [r4, #32]
 80096ba:	47b0      	blx	r6
 80096bc:	1c43      	adds	r3, r0, #1
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	d106      	bne.n	80096d0 <__sflush_r+0x60>
 80096c2:	6829      	ldr	r1, [r5, #0]
 80096c4:	291d      	cmp	r1, #29
 80096c6:	d82b      	bhi.n	8009720 <__sflush_r+0xb0>
 80096c8:	4a28      	ldr	r2, [pc, #160]	@ (800976c <__sflush_r+0xfc>)
 80096ca:	40ca      	lsrs	r2, r1
 80096cc:	07d6      	lsls	r6, r2, #31
 80096ce:	d527      	bpl.n	8009720 <__sflush_r+0xb0>
 80096d0:	2200      	movs	r2, #0
 80096d2:	6062      	str	r2, [r4, #4]
 80096d4:	6922      	ldr	r2, [r4, #16]
 80096d6:	04d9      	lsls	r1, r3, #19
 80096d8:	6022      	str	r2, [r4, #0]
 80096da:	d504      	bpl.n	80096e6 <__sflush_r+0x76>
 80096dc:	1c42      	adds	r2, r0, #1
 80096de:	d101      	bne.n	80096e4 <__sflush_r+0x74>
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	b903      	cbnz	r3, 80096e6 <__sflush_r+0x76>
 80096e4:	6560      	str	r0, [r4, #84]	@ 0x54
 80096e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096e8:	602f      	str	r7, [r5, #0]
 80096ea:	b1b9      	cbz	r1, 800971c <__sflush_r+0xac>
 80096ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096f0:	4299      	cmp	r1, r3
 80096f2:	d002      	beq.n	80096fa <__sflush_r+0x8a>
 80096f4:	4628      	mov	r0, r5
 80096f6:	f7ff f9eb 	bl	8008ad0 <_free_r>
 80096fa:	2300      	movs	r3, #0
 80096fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80096fe:	e00d      	b.n	800971c <__sflush_r+0xac>
 8009700:	2301      	movs	r3, #1
 8009702:	4628      	mov	r0, r5
 8009704:	47b0      	blx	r6
 8009706:	4602      	mov	r2, r0
 8009708:	1c50      	adds	r0, r2, #1
 800970a:	d1c9      	bne.n	80096a0 <__sflush_r+0x30>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0c6      	beq.n	80096a0 <__sflush_r+0x30>
 8009712:	2b1d      	cmp	r3, #29
 8009714:	d001      	beq.n	800971a <__sflush_r+0xaa>
 8009716:	2b16      	cmp	r3, #22
 8009718:	d11d      	bne.n	8009756 <__sflush_r+0xe6>
 800971a:	602f      	str	r7, [r5, #0]
 800971c:	2000      	movs	r0, #0
 800971e:	e021      	b.n	8009764 <__sflush_r+0xf4>
 8009720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009724:	b21b      	sxth	r3, r3
 8009726:	e01a      	b.n	800975e <__sflush_r+0xee>
 8009728:	690f      	ldr	r7, [r1, #16]
 800972a:	2f00      	cmp	r7, #0
 800972c:	d0f6      	beq.n	800971c <__sflush_r+0xac>
 800972e:	0793      	lsls	r3, r2, #30
 8009730:	bf18      	it	ne
 8009732:	2300      	movne	r3, #0
 8009734:	680e      	ldr	r6, [r1, #0]
 8009736:	bf08      	it	eq
 8009738:	694b      	ldreq	r3, [r1, #20]
 800973a:	1bf6      	subs	r6, r6, r7
 800973c:	600f      	str	r7, [r1, #0]
 800973e:	608b      	str	r3, [r1, #8]
 8009740:	2e00      	cmp	r6, #0
 8009742:	ddeb      	ble.n	800971c <__sflush_r+0xac>
 8009744:	4633      	mov	r3, r6
 8009746:	463a      	mov	r2, r7
 8009748:	4628      	mov	r0, r5
 800974a:	6a21      	ldr	r1, [r4, #32]
 800974c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009750:	47e0      	blx	ip
 8009752:	2800      	cmp	r0, #0
 8009754:	dc07      	bgt.n	8009766 <__sflush_r+0xf6>
 8009756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800975a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800975e:	f04f 30ff 	mov.w	r0, #4294967295
 8009762:	81a3      	strh	r3, [r4, #12]
 8009764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009766:	4407      	add	r7, r0
 8009768:	1a36      	subs	r6, r6, r0
 800976a:	e7e9      	b.n	8009740 <__sflush_r+0xd0>
 800976c:	20400001 	.word	0x20400001

08009770 <_fflush_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	690b      	ldr	r3, [r1, #16]
 8009774:	4605      	mov	r5, r0
 8009776:	460c      	mov	r4, r1
 8009778:	b913      	cbnz	r3, 8009780 <_fflush_r+0x10>
 800977a:	2500      	movs	r5, #0
 800977c:	4628      	mov	r0, r5
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	b118      	cbz	r0, 800978a <_fflush_r+0x1a>
 8009782:	6a03      	ldr	r3, [r0, #32]
 8009784:	b90b      	cbnz	r3, 800978a <_fflush_r+0x1a>
 8009786:	f7fe fa09 	bl	8007b9c <__sinit>
 800978a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d0f3      	beq.n	800977a <_fflush_r+0xa>
 8009792:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009794:	07d0      	lsls	r0, r2, #31
 8009796:	d404      	bmi.n	80097a2 <_fflush_r+0x32>
 8009798:	0599      	lsls	r1, r3, #22
 800979a:	d402      	bmi.n	80097a2 <_fflush_r+0x32>
 800979c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800979e:	f7fe fb2a 	bl	8007df6 <__retarget_lock_acquire_recursive>
 80097a2:	4628      	mov	r0, r5
 80097a4:	4621      	mov	r1, r4
 80097a6:	f7ff ff63 	bl	8009670 <__sflush_r>
 80097aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097ac:	4605      	mov	r5, r0
 80097ae:	07da      	lsls	r2, r3, #31
 80097b0:	d4e4      	bmi.n	800977c <_fflush_r+0xc>
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	059b      	lsls	r3, r3, #22
 80097b6:	d4e1      	bmi.n	800977c <_fflush_r+0xc>
 80097b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097ba:	f7fe fb1d 	bl	8007df8 <__retarget_lock_release_recursive>
 80097be:	e7dd      	b.n	800977c <_fflush_r+0xc>

080097c0 <memmove>:
 80097c0:	4288      	cmp	r0, r1
 80097c2:	b510      	push	{r4, lr}
 80097c4:	eb01 0402 	add.w	r4, r1, r2
 80097c8:	d902      	bls.n	80097d0 <memmove+0x10>
 80097ca:	4284      	cmp	r4, r0
 80097cc:	4623      	mov	r3, r4
 80097ce:	d807      	bhi.n	80097e0 <memmove+0x20>
 80097d0:	1e43      	subs	r3, r0, #1
 80097d2:	42a1      	cmp	r1, r4
 80097d4:	d008      	beq.n	80097e8 <memmove+0x28>
 80097d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097de:	e7f8      	b.n	80097d2 <memmove+0x12>
 80097e0:	4601      	mov	r1, r0
 80097e2:	4402      	add	r2, r0
 80097e4:	428a      	cmp	r2, r1
 80097e6:	d100      	bne.n	80097ea <memmove+0x2a>
 80097e8:	bd10      	pop	{r4, pc}
 80097ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097f2:	e7f7      	b.n	80097e4 <memmove+0x24>

080097f4 <_sbrk_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	2300      	movs	r3, #0
 80097f8:	4d05      	ldr	r5, [pc, #20]	@ (8009810 <_sbrk_r+0x1c>)
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	602b      	str	r3, [r5, #0]
 8009800:	f7f8 ffae 	bl	8002760 <_sbrk>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d102      	bne.n	800980e <_sbrk_r+0x1a>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	b103      	cbz	r3, 800980e <_sbrk_r+0x1a>
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	2000046c 	.word	0x2000046c

08009814 <memcpy>:
 8009814:	440a      	add	r2, r1
 8009816:	4291      	cmp	r1, r2
 8009818:	f100 33ff 	add.w	r3, r0, #4294967295
 800981c:	d100      	bne.n	8009820 <memcpy+0xc>
 800981e:	4770      	bx	lr
 8009820:	b510      	push	{r4, lr}
 8009822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009826:	4291      	cmp	r1, r2
 8009828:	f803 4f01 	strb.w	r4, [r3, #1]!
 800982c:	d1f9      	bne.n	8009822 <memcpy+0xe>
 800982e:	bd10      	pop	{r4, pc}

08009830 <__assert_func>:
 8009830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009832:	4614      	mov	r4, r2
 8009834:	461a      	mov	r2, r3
 8009836:	4b09      	ldr	r3, [pc, #36]	@ (800985c <__assert_func+0x2c>)
 8009838:	4605      	mov	r5, r0
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68d8      	ldr	r0, [r3, #12]
 800983e:	b14c      	cbz	r4, 8009854 <__assert_func+0x24>
 8009840:	4b07      	ldr	r3, [pc, #28]	@ (8009860 <__assert_func+0x30>)
 8009842:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009846:	9100      	str	r1, [sp, #0]
 8009848:	462b      	mov	r3, r5
 800984a:	4906      	ldr	r1, [pc, #24]	@ (8009864 <__assert_func+0x34>)
 800984c:	f000 f870 	bl	8009930 <fiprintf>
 8009850:	f000 f880 	bl	8009954 <abort>
 8009854:	4b04      	ldr	r3, [pc, #16]	@ (8009868 <__assert_func+0x38>)
 8009856:	461c      	mov	r4, r3
 8009858:	e7f3      	b.n	8009842 <__assert_func+0x12>
 800985a:	bf00      	nop
 800985c:	20000018 	.word	0x20000018
 8009860:	0800ae6f 	.word	0x0800ae6f
 8009864:	0800ae7c 	.word	0x0800ae7c
 8009868:	0800aeaa 	.word	0x0800aeaa

0800986c <_calloc_r>:
 800986c:	b570      	push	{r4, r5, r6, lr}
 800986e:	fba1 5402 	umull	r5, r4, r1, r2
 8009872:	b934      	cbnz	r4, 8009882 <_calloc_r+0x16>
 8009874:	4629      	mov	r1, r5
 8009876:	f7ff f99d 	bl	8008bb4 <_malloc_r>
 800987a:	4606      	mov	r6, r0
 800987c:	b928      	cbnz	r0, 800988a <_calloc_r+0x1e>
 800987e:	4630      	mov	r0, r6
 8009880:	bd70      	pop	{r4, r5, r6, pc}
 8009882:	220c      	movs	r2, #12
 8009884:	2600      	movs	r6, #0
 8009886:	6002      	str	r2, [r0, #0]
 8009888:	e7f9      	b.n	800987e <_calloc_r+0x12>
 800988a:	462a      	mov	r2, r5
 800988c:	4621      	mov	r1, r4
 800988e:	f7fe fa34 	bl	8007cfa <memset>
 8009892:	e7f4      	b.n	800987e <_calloc_r+0x12>

08009894 <__ascii_mbtowc>:
 8009894:	b082      	sub	sp, #8
 8009896:	b901      	cbnz	r1, 800989a <__ascii_mbtowc+0x6>
 8009898:	a901      	add	r1, sp, #4
 800989a:	b142      	cbz	r2, 80098ae <__ascii_mbtowc+0x1a>
 800989c:	b14b      	cbz	r3, 80098b2 <__ascii_mbtowc+0x1e>
 800989e:	7813      	ldrb	r3, [r2, #0]
 80098a0:	600b      	str	r3, [r1, #0]
 80098a2:	7812      	ldrb	r2, [r2, #0]
 80098a4:	1e10      	subs	r0, r2, #0
 80098a6:	bf18      	it	ne
 80098a8:	2001      	movne	r0, #1
 80098aa:	b002      	add	sp, #8
 80098ac:	4770      	bx	lr
 80098ae:	4610      	mov	r0, r2
 80098b0:	e7fb      	b.n	80098aa <__ascii_mbtowc+0x16>
 80098b2:	f06f 0001 	mvn.w	r0, #1
 80098b6:	e7f8      	b.n	80098aa <__ascii_mbtowc+0x16>

080098b8 <_realloc_r>:
 80098b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098bc:	4607      	mov	r7, r0
 80098be:	4614      	mov	r4, r2
 80098c0:	460d      	mov	r5, r1
 80098c2:	b921      	cbnz	r1, 80098ce <_realloc_r+0x16>
 80098c4:	4611      	mov	r1, r2
 80098c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098ca:	f7ff b973 	b.w	8008bb4 <_malloc_r>
 80098ce:	b92a      	cbnz	r2, 80098dc <_realloc_r+0x24>
 80098d0:	f7ff f8fe 	bl	8008ad0 <_free_r>
 80098d4:	4625      	mov	r5, r4
 80098d6:	4628      	mov	r0, r5
 80098d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098dc:	f000 f841 	bl	8009962 <_malloc_usable_size_r>
 80098e0:	4284      	cmp	r4, r0
 80098e2:	4606      	mov	r6, r0
 80098e4:	d802      	bhi.n	80098ec <_realloc_r+0x34>
 80098e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098ea:	d8f4      	bhi.n	80098d6 <_realloc_r+0x1e>
 80098ec:	4621      	mov	r1, r4
 80098ee:	4638      	mov	r0, r7
 80098f0:	f7ff f960 	bl	8008bb4 <_malloc_r>
 80098f4:	4680      	mov	r8, r0
 80098f6:	b908      	cbnz	r0, 80098fc <_realloc_r+0x44>
 80098f8:	4645      	mov	r5, r8
 80098fa:	e7ec      	b.n	80098d6 <_realloc_r+0x1e>
 80098fc:	42b4      	cmp	r4, r6
 80098fe:	4622      	mov	r2, r4
 8009900:	4629      	mov	r1, r5
 8009902:	bf28      	it	cs
 8009904:	4632      	movcs	r2, r6
 8009906:	f7ff ff85 	bl	8009814 <memcpy>
 800990a:	4629      	mov	r1, r5
 800990c:	4638      	mov	r0, r7
 800990e:	f7ff f8df 	bl	8008ad0 <_free_r>
 8009912:	e7f1      	b.n	80098f8 <_realloc_r+0x40>

08009914 <__ascii_wctomb>:
 8009914:	4603      	mov	r3, r0
 8009916:	4608      	mov	r0, r1
 8009918:	b141      	cbz	r1, 800992c <__ascii_wctomb+0x18>
 800991a:	2aff      	cmp	r2, #255	@ 0xff
 800991c:	d904      	bls.n	8009928 <__ascii_wctomb+0x14>
 800991e:	228a      	movs	r2, #138	@ 0x8a
 8009920:	f04f 30ff 	mov.w	r0, #4294967295
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	4770      	bx	lr
 8009928:	2001      	movs	r0, #1
 800992a:	700a      	strb	r2, [r1, #0]
 800992c:	4770      	bx	lr
	...

08009930 <fiprintf>:
 8009930:	b40e      	push	{r1, r2, r3}
 8009932:	b503      	push	{r0, r1, lr}
 8009934:	4601      	mov	r1, r0
 8009936:	ab03      	add	r3, sp, #12
 8009938:	4805      	ldr	r0, [pc, #20]	@ (8009950 <fiprintf+0x20>)
 800993a:	f853 2b04 	ldr.w	r2, [r3], #4
 800993e:	6800      	ldr	r0, [r0, #0]
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	f000 f83d 	bl	80099c0 <_vfiprintf_r>
 8009946:	b002      	add	sp, #8
 8009948:	f85d eb04 	ldr.w	lr, [sp], #4
 800994c:	b003      	add	sp, #12
 800994e:	4770      	bx	lr
 8009950:	20000018 	.word	0x20000018

08009954 <abort>:
 8009954:	2006      	movs	r0, #6
 8009956:	b508      	push	{r3, lr}
 8009958:	f000 fa06 	bl	8009d68 <raise>
 800995c:	2001      	movs	r0, #1
 800995e:	f7f8 fe8a 	bl	8002676 <_exit>

08009962 <_malloc_usable_size_r>:
 8009962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009966:	1f18      	subs	r0, r3, #4
 8009968:	2b00      	cmp	r3, #0
 800996a:	bfbc      	itt	lt
 800996c:	580b      	ldrlt	r3, [r1, r0]
 800996e:	18c0      	addlt	r0, r0, r3
 8009970:	4770      	bx	lr

08009972 <__sfputc_r>:
 8009972:	6893      	ldr	r3, [r2, #8]
 8009974:	b410      	push	{r4}
 8009976:	3b01      	subs	r3, #1
 8009978:	2b00      	cmp	r3, #0
 800997a:	6093      	str	r3, [r2, #8]
 800997c:	da07      	bge.n	800998e <__sfputc_r+0x1c>
 800997e:	6994      	ldr	r4, [r2, #24]
 8009980:	42a3      	cmp	r3, r4
 8009982:	db01      	blt.n	8009988 <__sfputc_r+0x16>
 8009984:	290a      	cmp	r1, #10
 8009986:	d102      	bne.n	800998e <__sfputc_r+0x1c>
 8009988:	bc10      	pop	{r4}
 800998a:	f000 b931 	b.w	8009bf0 <__swbuf_r>
 800998e:	6813      	ldr	r3, [r2, #0]
 8009990:	1c58      	adds	r0, r3, #1
 8009992:	6010      	str	r0, [r2, #0]
 8009994:	7019      	strb	r1, [r3, #0]
 8009996:	4608      	mov	r0, r1
 8009998:	bc10      	pop	{r4}
 800999a:	4770      	bx	lr

0800999c <__sfputs_r>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	4606      	mov	r6, r0
 80099a0:	460f      	mov	r7, r1
 80099a2:	4614      	mov	r4, r2
 80099a4:	18d5      	adds	r5, r2, r3
 80099a6:	42ac      	cmp	r4, r5
 80099a8:	d101      	bne.n	80099ae <__sfputs_r+0x12>
 80099aa:	2000      	movs	r0, #0
 80099ac:	e007      	b.n	80099be <__sfputs_r+0x22>
 80099ae:	463a      	mov	r2, r7
 80099b0:	4630      	mov	r0, r6
 80099b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099b6:	f7ff ffdc 	bl	8009972 <__sfputc_r>
 80099ba:	1c43      	adds	r3, r0, #1
 80099bc:	d1f3      	bne.n	80099a6 <__sfputs_r+0xa>
 80099be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099c0 <_vfiprintf_r>:
 80099c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	460d      	mov	r5, r1
 80099c6:	4614      	mov	r4, r2
 80099c8:	4698      	mov	r8, r3
 80099ca:	4606      	mov	r6, r0
 80099cc:	b09d      	sub	sp, #116	@ 0x74
 80099ce:	b118      	cbz	r0, 80099d8 <_vfiprintf_r+0x18>
 80099d0:	6a03      	ldr	r3, [r0, #32]
 80099d2:	b90b      	cbnz	r3, 80099d8 <_vfiprintf_r+0x18>
 80099d4:	f7fe f8e2 	bl	8007b9c <__sinit>
 80099d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099da:	07d9      	lsls	r1, r3, #31
 80099dc:	d405      	bmi.n	80099ea <_vfiprintf_r+0x2a>
 80099de:	89ab      	ldrh	r3, [r5, #12]
 80099e0:	059a      	lsls	r2, r3, #22
 80099e2:	d402      	bmi.n	80099ea <_vfiprintf_r+0x2a>
 80099e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099e6:	f7fe fa06 	bl	8007df6 <__retarget_lock_acquire_recursive>
 80099ea:	89ab      	ldrh	r3, [r5, #12]
 80099ec:	071b      	lsls	r3, r3, #28
 80099ee:	d501      	bpl.n	80099f4 <_vfiprintf_r+0x34>
 80099f0:	692b      	ldr	r3, [r5, #16]
 80099f2:	b99b      	cbnz	r3, 8009a1c <_vfiprintf_r+0x5c>
 80099f4:	4629      	mov	r1, r5
 80099f6:	4630      	mov	r0, r6
 80099f8:	f000 f938 	bl	8009c6c <__swsetup_r>
 80099fc:	b170      	cbz	r0, 8009a1c <_vfiprintf_r+0x5c>
 80099fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a00:	07dc      	lsls	r4, r3, #31
 8009a02:	d504      	bpl.n	8009a0e <_vfiprintf_r+0x4e>
 8009a04:	f04f 30ff 	mov.w	r0, #4294967295
 8009a08:	b01d      	add	sp, #116	@ 0x74
 8009a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0e:	89ab      	ldrh	r3, [r5, #12]
 8009a10:	0598      	lsls	r0, r3, #22
 8009a12:	d4f7      	bmi.n	8009a04 <_vfiprintf_r+0x44>
 8009a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a16:	f7fe f9ef 	bl	8007df8 <__retarget_lock_release_recursive>
 8009a1a:	e7f3      	b.n	8009a04 <_vfiprintf_r+0x44>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a20:	2320      	movs	r3, #32
 8009a22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a26:	2330      	movs	r3, #48	@ 0x30
 8009a28:	f04f 0901 	mov.w	r9, #1
 8009a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a30:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009bdc <_vfiprintf_r+0x21c>
 8009a34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a38:	4623      	mov	r3, r4
 8009a3a:	469a      	mov	sl, r3
 8009a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a40:	b10a      	cbz	r2, 8009a46 <_vfiprintf_r+0x86>
 8009a42:	2a25      	cmp	r2, #37	@ 0x25
 8009a44:	d1f9      	bne.n	8009a3a <_vfiprintf_r+0x7a>
 8009a46:	ebba 0b04 	subs.w	fp, sl, r4
 8009a4a:	d00b      	beq.n	8009a64 <_vfiprintf_r+0xa4>
 8009a4c:	465b      	mov	r3, fp
 8009a4e:	4622      	mov	r2, r4
 8009a50:	4629      	mov	r1, r5
 8009a52:	4630      	mov	r0, r6
 8009a54:	f7ff ffa2 	bl	800999c <__sfputs_r>
 8009a58:	3001      	adds	r0, #1
 8009a5a:	f000 80a7 	beq.w	8009bac <_vfiprintf_r+0x1ec>
 8009a5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a60:	445a      	add	r2, fp
 8009a62:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a64:	f89a 3000 	ldrb.w	r3, [sl]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f000 809f 	beq.w	8009bac <_vfiprintf_r+0x1ec>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	f04f 32ff 	mov.w	r2, #4294967295
 8009a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a78:	f10a 0a01 	add.w	sl, sl, #1
 8009a7c:	9304      	str	r3, [sp, #16]
 8009a7e:	9307      	str	r3, [sp, #28]
 8009a80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a84:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a86:	4654      	mov	r4, sl
 8009a88:	2205      	movs	r2, #5
 8009a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a8e:	4853      	ldr	r0, [pc, #332]	@ (8009bdc <_vfiprintf_r+0x21c>)
 8009a90:	f7fe f9b3 	bl	8007dfa <memchr>
 8009a94:	9a04      	ldr	r2, [sp, #16]
 8009a96:	b9d8      	cbnz	r0, 8009ad0 <_vfiprintf_r+0x110>
 8009a98:	06d1      	lsls	r1, r2, #27
 8009a9a:	bf44      	itt	mi
 8009a9c:	2320      	movmi	r3, #32
 8009a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aa2:	0713      	lsls	r3, r2, #28
 8009aa4:	bf44      	itt	mi
 8009aa6:	232b      	movmi	r3, #43	@ 0x2b
 8009aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aac:	f89a 3000 	ldrb.w	r3, [sl]
 8009ab0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ab2:	d015      	beq.n	8009ae0 <_vfiprintf_r+0x120>
 8009ab4:	4654      	mov	r4, sl
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	f04f 0c0a 	mov.w	ip, #10
 8009abc:	9a07      	ldr	r2, [sp, #28]
 8009abe:	4621      	mov	r1, r4
 8009ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ac4:	3b30      	subs	r3, #48	@ 0x30
 8009ac6:	2b09      	cmp	r3, #9
 8009ac8:	d94b      	bls.n	8009b62 <_vfiprintf_r+0x1a2>
 8009aca:	b1b0      	cbz	r0, 8009afa <_vfiprintf_r+0x13a>
 8009acc:	9207      	str	r2, [sp, #28]
 8009ace:	e014      	b.n	8009afa <_vfiprintf_r+0x13a>
 8009ad0:	eba0 0308 	sub.w	r3, r0, r8
 8009ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	46a2      	mov	sl, r4
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	e7d2      	b.n	8009a86 <_vfiprintf_r+0xc6>
 8009ae0:	9b03      	ldr	r3, [sp, #12]
 8009ae2:	1d19      	adds	r1, r3, #4
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	9103      	str	r1, [sp, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	bfbb      	ittet	lt
 8009aec:	425b      	neglt	r3, r3
 8009aee:	f042 0202 	orrlt.w	r2, r2, #2
 8009af2:	9307      	strge	r3, [sp, #28]
 8009af4:	9307      	strlt	r3, [sp, #28]
 8009af6:	bfb8      	it	lt
 8009af8:	9204      	strlt	r2, [sp, #16]
 8009afa:	7823      	ldrb	r3, [r4, #0]
 8009afc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009afe:	d10a      	bne.n	8009b16 <_vfiprintf_r+0x156>
 8009b00:	7863      	ldrb	r3, [r4, #1]
 8009b02:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b04:	d132      	bne.n	8009b6c <_vfiprintf_r+0x1ac>
 8009b06:	9b03      	ldr	r3, [sp, #12]
 8009b08:	3402      	adds	r4, #2
 8009b0a:	1d1a      	adds	r2, r3, #4
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	9203      	str	r2, [sp, #12]
 8009b10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b14:	9305      	str	r3, [sp, #20]
 8009b16:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009be0 <_vfiprintf_r+0x220>
 8009b1a:	2203      	movs	r2, #3
 8009b1c:	4650      	mov	r0, sl
 8009b1e:	7821      	ldrb	r1, [r4, #0]
 8009b20:	f7fe f96b 	bl	8007dfa <memchr>
 8009b24:	b138      	cbz	r0, 8009b36 <_vfiprintf_r+0x176>
 8009b26:	2240      	movs	r2, #64	@ 0x40
 8009b28:	9b04      	ldr	r3, [sp, #16]
 8009b2a:	eba0 000a 	sub.w	r0, r0, sl
 8009b2e:	4082      	lsls	r2, r0
 8009b30:	4313      	orrs	r3, r2
 8009b32:	3401      	adds	r4, #1
 8009b34:	9304      	str	r3, [sp, #16]
 8009b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b3a:	2206      	movs	r2, #6
 8009b3c:	4829      	ldr	r0, [pc, #164]	@ (8009be4 <_vfiprintf_r+0x224>)
 8009b3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b42:	f7fe f95a 	bl	8007dfa <memchr>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d03f      	beq.n	8009bca <_vfiprintf_r+0x20a>
 8009b4a:	4b27      	ldr	r3, [pc, #156]	@ (8009be8 <_vfiprintf_r+0x228>)
 8009b4c:	bb1b      	cbnz	r3, 8009b96 <_vfiprintf_r+0x1d6>
 8009b4e:	9b03      	ldr	r3, [sp, #12]
 8009b50:	3307      	adds	r3, #7
 8009b52:	f023 0307 	bic.w	r3, r3, #7
 8009b56:	3308      	adds	r3, #8
 8009b58:	9303      	str	r3, [sp, #12]
 8009b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b5c:	443b      	add	r3, r7
 8009b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b60:	e76a      	b.n	8009a38 <_vfiprintf_r+0x78>
 8009b62:	460c      	mov	r4, r1
 8009b64:	2001      	movs	r0, #1
 8009b66:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b6a:	e7a8      	b.n	8009abe <_vfiprintf_r+0xfe>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f04f 0c0a 	mov.w	ip, #10
 8009b72:	4619      	mov	r1, r3
 8009b74:	3401      	adds	r4, #1
 8009b76:	9305      	str	r3, [sp, #20]
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b7e:	3a30      	subs	r2, #48	@ 0x30
 8009b80:	2a09      	cmp	r2, #9
 8009b82:	d903      	bls.n	8009b8c <_vfiprintf_r+0x1cc>
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0c6      	beq.n	8009b16 <_vfiprintf_r+0x156>
 8009b88:	9105      	str	r1, [sp, #20]
 8009b8a:	e7c4      	b.n	8009b16 <_vfiprintf_r+0x156>
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	2301      	movs	r3, #1
 8009b90:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b94:	e7f0      	b.n	8009b78 <_vfiprintf_r+0x1b8>
 8009b96:	ab03      	add	r3, sp, #12
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	462a      	mov	r2, r5
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	4b13      	ldr	r3, [pc, #76]	@ (8009bec <_vfiprintf_r+0x22c>)
 8009ba0:	a904      	add	r1, sp, #16
 8009ba2:	f7fd fbb3 	bl	800730c <_printf_float>
 8009ba6:	4607      	mov	r7, r0
 8009ba8:	1c78      	adds	r0, r7, #1
 8009baa:	d1d6      	bne.n	8009b5a <_vfiprintf_r+0x19a>
 8009bac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bae:	07d9      	lsls	r1, r3, #31
 8009bb0:	d405      	bmi.n	8009bbe <_vfiprintf_r+0x1fe>
 8009bb2:	89ab      	ldrh	r3, [r5, #12]
 8009bb4:	059a      	lsls	r2, r3, #22
 8009bb6:	d402      	bmi.n	8009bbe <_vfiprintf_r+0x1fe>
 8009bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bba:	f7fe f91d 	bl	8007df8 <__retarget_lock_release_recursive>
 8009bbe:	89ab      	ldrh	r3, [r5, #12]
 8009bc0:	065b      	lsls	r3, r3, #25
 8009bc2:	f53f af1f 	bmi.w	8009a04 <_vfiprintf_r+0x44>
 8009bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bc8:	e71e      	b.n	8009a08 <_vfiprintf_r+0x48>
 8009bca:	ab03      	add	r3, sp, #12
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	462a      	mov	r2, r5
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	4b06      	ldr	r3, [pc, #24]	@ (8009bec <_vfiprintf_r+0x22c>)
 8009bd4:	a904      	add	r1, sp, #16
 8009bd6:	f7fd fe37 	bl	8007848 <_printf_i>
 8009bda:	e7e4      	b.n	8009ba6 <_vfiprintf_r+0x1e6>
 8009bdc:	0800ae54 	.word	0x0800ae54
 8009be0:	0800ae5a 	.word	0x0800ae5a
 8009be4:	0800ae5e 	.word	0x0800ae5e
 8009be8:	0800730d 	.word	0x0800730d
 8009bec:	0800999d 	.word	0x0800999d

08009bf0 <__swbuf_r>:
 8009bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf2:	460e      	mov	r6, r1
 8009bf4:	4614      	mov	r4, r2
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	b118      	cbz	r0, 8009c02 <__swbuf_r+0x12>
 8009bfa:	6a03      	ldr	r3, [r0, #32]
 8009bfc:	b90b      	cbnz	r3, 8009c02 <__swbuf_r+0x12>
 8009bfe:	f7fd ffcd 	bl	8007b9c <__sinit>
 8009c02:	69a3      	ldr	r3, [r4, #24]
 8009c04:	60a3      	str	r3, [r4, #8]
 8009c06:	89a3      	ldrh	r3, [r4, #12]
 8009c08:	071a      	lsls	r2, r3, #28
 8009c0a:	d501      	bpl.n	8009c10 <__swbuf_r+0x20>
 8009c0c:	6923      	ldr	r3, [r4, #16]
 8009c0e:	b943      	cbnz	r3, 8009c22 <__swbuf_r+0x32>
 8009c10:	4621      	mov	r1, r4
 8009c12:	4628      	mov	r0, r5
 8009c14:	f000 f82a 	bl	8009c6c <__swsetup_r>
 8009c18:	b118      	cbz	r0, 8009c22 <__swbuf_r+0x32>
 8009c1a:	f04f 37ff 	mov.w	r7, #4294967295
 8009c1e:	4638      	mov	r0, r7
 8009c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	6922      	ldr	r2, [r4, #16]
 8009c26:	b2f6      	uxtb	r6, r6
 8009c28:	1a98      	subs	r0, r3, r2
 8009c2a:	6963      	ldr	r3, [r4, #20]
 8009c2c:	4637      	mov	r7, r6
 8009c2e:	4283      	cmp	r3, r0
 8009c30:	dc05      	bgt.n	8009c3e <__swbuf_r+0x4e>
 8009c32:	4621      	mov	r1, r4
 8009c34:	4628      	mov	r0, r5
 8009c36:	f7ff fd9b 	bl	8009770 <_fflush_r>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d1ed      	bne.n	8009c1a <__swbuf_r+0x2a>
 8009c3e:	68a3      	ldr	r3, [r4, #8]
 8009c40:	3b01      	subs	r3, #1
 8009c42:	60a3      	str	r3, [r4, #8]
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	1c5a      	adds	r2, r3, #1
 8009c48:	6022      	str	r2, [r4, #0]
 8009c4a:	701e      	strb	r6, [r3, #0]
 8009c4c:	6962      	ldr	r2, [r4, #20]
 8009c4e:	1c43      	adds	r3, r0, #1
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d004      	beq.n	8009c5e <__swbuf_r+0x6e>
 8009c54:	89a3      	ldrh	r3, [r4, #12]
 8009c56:	07db      	lsls	r3, r3, #31
 8009c58:	d5e1      	bpl.n	8009c1e <__swbuf_r+0x2e>
 8009c5a:	2e0a      	cmp	r6, #10
 8009c5c:	d1df      	bne.n	8009c1e <__swbuf_r+0x2e>
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4628      	mov	r0, r5
 8009c62:	f7ff fd85 	bl	8009770 <_fflush_r>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d0d9      	beq.n	8009c1e <__swbuf_r+0x2e>
 8009c6a:	e7d6      	b.n	8009c1a <__swbuf_r+0x2a>

08009c6c <__swsetup_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	4b29      	ldr	r3, [pc, #164]	@ (8009d14 <__swsetup_r+0xa8>)
 8009c70:	4605      	mov	r5, r0
 8009c72:	6818      	ldr	r0, [r3, #0]
 8009c74:	460c      	mov	r4, r1
 8009c76:	b118      	cbz	r0, 8009c80 <__swsetup_r+0x14>
 8009c78:	6a03      	ldr	r3, [r0, #32]
 8009c7a:	b90b      	cbnz	r3, 8009c80 <__swsetup_r+0x14>
 8009c7c:	f7fd ff8e 	bl	8007b9c <__sinit>
 8009c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c84:	0719      	lsls	r1, r3, #28
 8009c86:	d422      	bmi.n	8009cce <__swsetup_r+0x62>
 8009c88:	06da      	lsls	r2, r3, #27
 8009c8a:	d407      	bmi.n	8009c9c <__swsetup_r+0x30>
 8009c8c:	2209      	movs	r2, #9
 8009c8e:	602a      	str	r2, [r5, #0]
 8009c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c94:	f04f 30ff 	mov.w	r0, #4294967295
 8009c98:	81a3      	strh	r3, [r4, #12]
 8009c9a:	e033      	b.n	8009d04 <__swsetup_r+0x98>
 8009c9c:	0758      	lsls	r0, r3, #29
 8009c9e:	d512      	bpl.n	8009cc6 <__swsetup_r+0x5a>
 8009ca0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ca2:	b141      	cbz	r1, 8009cb6 <__swsetup_r+0x4a>
 8009ca4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ca8:	4299      	cmp	r1, r3
 8009caa:	d002      	beq.n	8009cb2 <__swsetup_r+0x46>
 8009cac:	4628      	mov	r0, r5
 8009cae:	f7fe ff0f 	bl	8008ad0 <_free_r>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	6063      	str	r3, [r4, #4]
 8009cc2:	6923      	ldr	r3, [r4, #16]
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	89a3      	ldrh	r3, [r4, #12]
 8009cc8:	f043 0308 	orr.w	r3, r3, #8
 8009ccc:	81a3      	strh	r3, [r4, #12]
 8009cce:	6923      	ldr	r3, [r4, #16]
 8009cd0:	b94b      	cbnz	r3, 8009ce6 <__swsetup_r+0x7a>
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cdc:	d003      	beq.n	8009ce6 <__swsetup_r+0x7a>
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f000 f882 	bl	8009dea <__smakebuf_r>
 8009ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cea:	f013 0201 	ands.w	r2, r3, #1
 8009cee:	d00a      	beq.n	8009d06 <__swsetup_r+0x9a>
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	60a2      	str	r2, [r4, #8]
 8009cf4:	6962      	ldr	r2, [r4, #20]
 8009cf6:	4252      	negs	r2, r2
 8009cf8:	61a2      	str	r2, [r4, #24]
 8009cfa:	6922      	ldr	r2, [r4, #16]
 8009cfc:	b942      	cbnz	r2, 8009d10 <__swsetup_r+0xa4>
 8009cfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d02:	d1c5      	bne.n	8009c90 <__swsetup_r+0x24>
 8009d04:	bd38      	pop	{r3, r4, r5, pc}
 8009d06:	0799      	lsls	r1, r3, #30
 8009d08:	bf58      	it	pl
 8009d0a:	6962      	ldrpl	r2, [r4, #20]
 8009d0c:	60a2      	str	r2, [r4, #8]
 8009d0e:	e7f4      	b.n	8009cfa <__swsetup_r+0x8e>
 8009d10:	2000      	movs	r0, #0
 8009d12:	e7f7      	b.n	8009d04 <__swsetup_r+0x98>
 8009d14:	20000018 	.word	0x20000018

08009d18 <_raise_r>:
 8009d18:	291f      	cmp	r1, #31
 8009d1a:	b538      	push	{r3, r4, r5, lr}
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	460c      	mov	r4, r1
 8009d20:	d904      	bls.n	8009d2c <_raise_r+0x14>
 8009d22:	2316      	movs	r3, #22
 8009d24:	6003      	str	r3, [r0, #0]
 8009d26:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2a:	bd38      	pop	{r3, r4, r5, pc}
 8009d2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d2e:	b112      	cbz	r2, 8009d36 <_raise_r+0x1e>
 8009d30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d34:	b94b      	cbnz	r3, 8009d4a <_raise_r+0x32>
 8009d36:	4628      	mov	r0, r5
 8009d38:	f000 f830 	bl	8009d9c <_getpid_r>
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	4601      	mov	r1, r0
 8009d40:	4628      	mov	r0, r5
 8009d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d46:	f000 b817 	b.w	8009d78 <_kill_r>
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d00a      	beq.n	8009d64 <_raise_r+0x4c>
 8009d4e:	1c59      	adds	r1, r3, #1
 8009d50:	d103      	bne.n	8009d5a <_raise_r+0x42>
 8009d52:	2316      	movs	r3, #22
 8009d54:	6003      	str	r3, [r0, #0]
 8009d56:	2001      	movs	r0, #1
 8009d58:	e7e7      	b.n	8009d2a <_raise_r+0x12>
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d62:	4798      	blx	r3
 8009d64:	2000      	movs	r0, #0
 8009d66:	e7e0      	b.n	8009d2a <_raise_r+0x12>

08009d68 <raise>:
 8009d68:	4b02      	ldr	r3, [pc, #8]	@ (8009d74 <raise+0xc>)
 8009d6a:	4601      	mov	r1, r0
 8009d6c:	6818      	ldr	r0, [r3, #0]
 8009d6e:	f7ff bfd3 	b.w	8009d18 <_raise_r>
 8009d72:	bf00      	nop
 8009d74:	20000018 	.word	0x20000018

08009d78 <_kill_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	4d06      	ldr	r5, [pc, #24]	@ (8009d98 <_kill_r+0x20>)
 8009d7e:	4604      	mov	r4, r0
 8009d80:	4608      	mov	r0, r1
 8009d82:	4611      	mov	r1, r2
 8009d84:	602b      	str	r3, [r5, #0]
 8009d86:	f7f8 fc66 	bl	8002656 <_kill>
 8009d8a:	1c43      	adds	r3, r0, #1
 8009d8c:	d102      	bne.n	8009d94 <_kill_r+0x1c>
 8009d8e:	682b      	ldr	r3, [r5, #0]
 8009d90:	b103      	cbz	r3, 8009d94 <_kill_r+0x1c>
 8009d92:	6023      	str	r3, [r4, #0]
 8009d94:	bd38      	pop	{r3, r4, r5, pc}
 8009d96:	bf00      	nop
 8009d98:	2000046c 	.word	0x2000046c

08009d9c <_getpid_r>:
 8009d9c:	f7f8 bc54 	b.w	8002648 <_getpid>

08009da0 <__swhatbuf_r>:
 8009da0:	b570      	push	{r4, r5, r6, lr}
 8009da2:	460c      	mov	r4, r1
 8009da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da8:	4615      	mov	r5, r2
 8009daa:	2900      	cmp	r1, #0
 8009dac:	461e      	mov	r6, r3
 8009dae:	b096      	sub	sp, #88	@ 0x58
 8009db0:	da0c      	bge.n	8009dcc <__swhatbuf_r+0x2c>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	2100      	movs	r1, #0
 8009db6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009dba:	bf14      	ite	ne
 8009dbc:	2340      	movne	r3, #64	@ 0x40
 8009dbe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	6031      	str	r1, [r6, #0]
 8009dc6:	602b      	str	r3, [r5, #0]
 8009dc8:	b016      	add	sp, #88	@ 0x58
 8009dca:	bd70      	pop	{r4, r5, r6, pc}
 8009dcc:	466a      	mov	r2, sp
 8009dce:	f000 f849 	bl	8009e64 <_fstat_r>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	dbed      	blt.n	8009db2 <__swhatbuf_r+0x12>
 8009dd6:	9901      	ldr	r1, [sp, #4]
 8009dd8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ddc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009de0:	4259      	negs	r1, r3
 8009de2:	4159      	adcs	r1, r3
 8009de4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009de8:	e7eb      	b.n	8009dc2 <__swhatbuf_r+0x22>

08009dea <__smakebuf_r>:
 8009dea:	898b      	ldrh	r3, [r1, #12]
 8009dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dee:	079d      	lsls	r5, r3, #30
 8009df0:	4606      	mov	r6, r0
 8009df2:	460c      	mov	r4, r1
 8009df4:	d507      	bpl.n	8009e06 <__smakebuf_r+0x1c>
 8009df6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009dfa:	6023      	str	r3, [r4, #0]
 8009dfc:	6123      	str	r3, [r4, #16]
 8009dfe:	2301      	movs	r3, #1
 8009e00:	6163      	str	r3, [r4, #20]
 8009e02:	b003      	add	sp, #12
 8009e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e06:	466a      	mov	r2, sp
 8009e08:	ab01      	add	r3, sp, #4
 8009e0a:	f7ff ffc9 	bl	8009da0 <__swhatbuf_r>
 8009e0e:	9f00      	ldr	r7, [sp, #0]
 8009e10:	4605      	mov	r5, r0
 8009e12:	4639      	mov	r1, r7
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7fe fecd 	bl	8008bb4 <_malloc_r>
 8009e1a:	b948      	cbnz	r0, 8009e30 <__smakebuf_r+0x46>
 8009e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e20:	059a      	lsls	r2, r3, #22
 8009e22:	d4ee      	bmi.n	8009e02 <__smakebuf_r+0x18>
 8009e24:	f023 0303 	bic.w	r3, r3, #3
 8009e28:	f043 0302 	orr.w	r3, r3, #2
 8009e2c:	81a3      	strh	r3, [r4, #12]
 8009e2e:	e7e2      	b.n	8009df6 <__smakebuf_r+0xc>
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e3a:	81a3      	strh	r3, [r4, #12]
 8009e3c:	9b01      	ldr	r3, [sp, #4]
 8009e3e:	6020      	str	r0, [r4, #0]
 8009e40:	b15b      	cbz	r3, 8009e5a <__smakebuf_r+0x70>
 8009e42:	4630      	mov	r0, r6
 8009e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e48:	f000 f81e 	bl	8009e88 <_isatty_r>
 8009e4c:	b128      	cbz	r0, 8009e5a <__smakebuf_r+0x70>
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	f023 0303 	bic.w	r3, r3, #3
 8009e54:	f043 0301 	orr.w	r3, r3, #1
 8009e58:	81a3      	strh	r3, [r4, #12]
 8009e5a:	89a3      	ldrh	r3, [r4, #12]
 8009e5c:	431d      	orrs	r5, r3
 8009e5e:	81a5      	strh	r5, [r4, #12]
 8009e60:	e7cf      	b.n	8009e02 <__smakebuf_r+0x18>
	...

08009e64 <_fstat_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	2300      	movs	r3, #0
 8009e68:	4d06      	ldr	r5, [pc, #24]	@ (8009e84 <_fstat_r+0x20>)
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	4608      	mov	r0, r1
 8009e6e:	4611      	mov	r1, r2
 8009e70:	602b      	str	r3, [r5, #0]
 8009e72:	f7f8 fc4f 	bl	8002714 <_fstat>
 8009e76:	1c43      	adds	r3, r0, #1
 8009e78:	d102      	bne.n	8009e80 <_fstat_r+0x1c>
 8009e7a:	682b      	ldr	r3, [r5, #0]
 8009e7c:	b103      	cbz	r3, 8009e80 <_fstat_r+0x1c>
 8009e7e:	6023      	str	r3, [r4, #0]
 8009e80:	bd38      	pop	{r3, r4, r5, pc}
 8009e82:	bf00      	nop
 8009e84:	2000046c 	.word	0x2000046c

08009e88 <_isatty_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	4d05      	ldr	r5, [pc, #20]	@ (8009ea4 <_isatty_r+0x1c>)
 8009e8e:	4604      	mov	r4, r0
 8009e90:	4608      	mov	r0, r1
 8009e92:	602b      	str	r3, [r5, #0]
 8009e94:	f7f8 fc4d 	bl	8002732 <_isatty>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_isatty_r+0x1a>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_isatty_r+0x1a>
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	2000046c 	.word	0x2000046c

08009ea8 <pow>:
 8009ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eac:	4614      	mov	r4, r2
 8009eae:	461d      	mov	r5, r3
 8009eb0:	4680      	mov	r8, r0
 8009eb2:	4689      	mov	r9, r1
 8009eb4:	f000 f868 	bl	8009f88 <__ieee754_pow>
 8009eb8:	4622      	mov	r2, r4
 8009eba:	4606      	mov	r6, r0
 8009ebc:	460f      	mov	r7, r1
 8009ebe:	462b      	mov	r3, r5
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	f7f6 fda2 	bl	8000a0c <__aeabi_dcmpun>
 8009ec8:	bbc8      	cbnz	r0, 8009f3e <pow+0x96>
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2300      	movs	r3, #0
 8009ece:	4640      	mov	r0, r8
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	f7f6 fd69 	bl	80009a8 <__aeabi_dcmpeq>
 8009ed6:	b1b8      	cbz	r0, 8009f08 <pow+0x60>
 8009ed8:	2200      	movs	r2, #0
 8009eda:	2300      	movs	r3, #0
 8009edc:	4620      	mov	r0, r4
 8009ede:	4629      	mov	r1, r5
 8009ee0:	f7f6 fd62 	bl	80009a8 <__aeabi_dcmpeq>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d141      	bne.n	8009f6c <pow+0xc4>
 8009ee8:	4620      	mov	r0, r4
 8009eea:	4629      	mov	r1, r5
 8009eec:	f000 f844 	bl	8009f78 <finite>
 8009ef0:	b328      	cbz	r0, 8009f3e <pow+0x96>
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	4629      	mov	r1, r5
 8009efa:	f7f6 fd5f 	bl	80009bc <__aeabi_dcmplt>
 8009efe:	b1f0      	cbz	r0, 8009f3e <pow+0x96>
 8009f00:	f7fd ff4e 	bl	8007da0 <__errno>
 8009f04:	2322      	movs	r3, #34	@ 0x22
 8009f06:	e019      	b.n	8009f3c <pow+0x94>
 8009f08:	4630      	mov	r0, r6
 8009f0a:	4639      	mov	r1, r7
 8009f0c:	f000 f834 	bl	8009f78 <finite>
 8009f10:	b9c8      	cbnz	r0, 8009f46 <pow+0x9e>
 8009f12:	4640      	mov	r0, r8
 8009f14:	4649      	mov	r1, r9
 8009f16:	f000 f82f 	bl	8009f78 <finite>
 8009f1a:	b1a0      	cbz	r0, 8009f46 <pow+0x9e>
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4629      	mov	r1, r5
 8009f20:	f000 f82a 	bl	8009f78 <finite>
 8009f24:	b178      	cbz	r0, 8009f46 <pow+0x9e>
 8009f26:	4632      	mov	r2, r6
 8009f28:	463b      	mov	r3, r7
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	f7f6 fd6d 	bl	8000a0c <__aeabi_dcmpun>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d0e4      	beq.n	8009f00 <pow+0x58>
 8009f36:	f7fd ff33 	bl	8007da0 <__errno>
 8009f3a:	2321      	movs	r3, #33	@ 0x21
 8009f3c:	6003      	str	r3, [r0, #0]
 8009f3e:	4630      	mov	r0, r6
 8009f40:	4639      	mov	r1, r7
 8009f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f46:	2200      	movs	r2, #0
 8009f48:	2300      	movs	r3, #0
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	4639      	mov	r1, r7
 8009f4e:	f7f6 fd2b 	bl	80009a8 <__aeabi_dcmpeq>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d0f3      	beq.n	8009f3e <pow+0x96>
 8009f56:	4640      	mov	r0, r8
 8009f58:	4649      	mov	r1, r9
 8009f5a:	f000 f80d 	bl	8009f78 <finite>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d0ed      	beq.n	8009f3e <pow+0x96>
 8009f62:	4620      	mov	r0, r4
 8009f64:	4629      	mov	r1, r5
 8009f66:	f000 f807 	bl	8009f78 <finite>
 8009f6a:	e7c8      	b.n	8009efe <pow+0x56>
 8009f6c:	2600      	movs	r6, #0
 8009f6e:	4f01      	ldr	r7, [pc, #4]	@ (8009f74 <pow+0xcc>)
 8009f70:	e7e5      	b.n	8009f3e <pow+0x96>
 8009f72:	bf00      	nop
 8009f74:	3ff00000 	.word	0x3ff00000

08009f78 <finite>:
 8009f78:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009f7c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009f80:	0fc0      	lsrs	r0, r0, #31
 8009f82:	4770      	bx	lr
 8009f84:	0000      	movs	r0, r0
	...

08009f88 <__ieee754_pow>:
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	b091      	sub	sp, #68	@ 0x44
 8009f8e:	e9cd 2300 	strd	r2, r3, [sp]
 8009f92:	468b      	mov	fp, r1
 8009f94:	e9dd 1800 	ldrd	r1, r8, [sp]
 8009f98:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8009f9c:	4682      	mov	sl, r0
 8009f9e:	ea57 0001 	orrs.w	r0, r7, r1
 8009fa2:	d112      	bne.n	8009fca <__ieee754_pow+0x42>
 8009fa4:	4653      	mov	r3, sl
 8009fa6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8009faa:	18db      	adds	r3, r3, r3
 8009fac:	4152      	adcs	r2, r2
 8009fae:	4298      	cmp	r0, r3
 8009fb0:	4b93      	ldr	r3, [pc, #588]	@ (800a200 <__ieee754_pow+0x278>)
 8009fb2:	4193      	sbcs	r3, r2
 8009fb4:	f080 84cd 	bcs.w	800a952 <__ieee754_pow+0x9ca>
 8009fb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fbc:	4650      	mov	r0, sl
 8009fbe:	4659      	mov	r1, fp
 8009fc0:	f7f6 f8d4 	bl	800016c <__adddf3>
 8009fc4:	b011      	add	sp, #68	@ 0x44
 8009fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fca:	4b8e      	ldr	r3, [pc, #568]	@ (800a204 <__ieee754_pow+0x27c>)
 8009fcc:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8009fd0:	429d      	cmp	r5, r3
 8009fd2:	465e      	mov	r6, fp
 8009fd4:	46d1      	mov	r9, sl
 8009fd6:	d80b      	bhi.n	8009ff0 <__ieee754_pow+0x68>
 8009fd8:	d105      	bne.n	8009fe6 <__ieee754_pow+0x5e>
 8009fda:	f1ba 0f00 	cmp.w	sl, #0
 8009fde:	d1eb      	bne.n	8009fb8 <__ieee754_pow+0x30>
 8009fe0:	42af      	cmp	r7, r5
 8009fe2:	d8e9      	bhi.n	8009fb8 <__ieee754_pow+0x30>
 8009fe4:	e001      	b.n	8009fea <__ieee754_pow+0x62>
 8009fe6:	429f      	cmp	r7, r3
 8009fe8:	d802      	bhi.n	8009ff0 <__ieee754_pow+0x68>
 8009fea:	429f      	cmp	r7, r3
 8009fec:	d10f      	bne.n	800a00e <__ieee754_pow+0x86>
 8009fee:	b171      	cbz	r1, 800a00e <__ieee754_pow+0x86>
 8009ff0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8009ff4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009ff8:	ea56 0609 	orrs.w	r6, r6, r9
 8009ffc:	d1dc      	bne.n	8009fb8 <__ieee754_pow+0x30>
 8009ffe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a002:	18db      	adds	r3, r3, r3
 800a004:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a008:	4152      	adcs	r2, r2
 800a00a:	429e      	cmp	r6, r3
 800a00c:	e7d0      	b.n	8009fb0 <__ieee754_pow+0x28>
 800a00e:	2e00      	cmp	r6, #0
 800a010:	462b      	mov	r3, r5
 800a012:	da42      	bge.n	800a09a <__ieee754_pow+0x112>
 800a014:	4a7c      	ldr	r2, [pc, #496]	@ (800a208 <__ieee754_pow+0x280>)
 800a016:	4297      	cmp	r7, r2
 800a018:	d856      	bhi.n	800a0c8 <__ieee754_pow+0x140>
 800a01a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a01e:	4297      	cmp	r7, r2
 800a020:	f240 84a6 	bls.w	800a970 <__ieee754_pow+0x9e8>
 800a024:	153a      	asrs	r2, r7, #20
 800a026:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a02a:	2a14      	cmp	r2, #20
 800a02c:	dd18      	ble.n	800a060 <__ieee754_pow+0xd8>
 800a02e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a032:	fa21 f402 	lsr.w	r4, r1, r2
 800a036:	fa04 f202 	lsl.w	r2, r4, r2
 800a03a:	428a      	cmp	r2, r1
 800a03c:	f040 8498 	bne.w	800a970 <__ieee754_pow+0x9e8>
 800a040:	f004 0401 	and.w	r4, r4, #1
 800a044:	f1c4 0402 	rsb	r4, r4, #2
 800a048:	2900      	cmp	r1, #0
 800a04a:	d159      	bne.n	800a100 <__ieee754_pow+0x178>
 800a04c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800a050:	d149      	bne.n	800a0e6 <__ieee754_pow+0x15e>
 800a052:	4652      	mov	r2, sl
 800a054:	465b      	mov	r3, fp
 800a056:	4650      	mov	r0, sl
 800a058:	4659      	mov	r1, fp
 800a05a:	f7f6 fa3d 	bl	80004d8 <__aeabi_dmul>
 800a05e:	e7b1      	b.n	8009fc4 <__ieee754_pow+0x3c>
 800a060:	2900      	cmp	r1, #0
 800a062:	d14c      	bne.n	800a0fe <__ieee754_pow+0x176>
 800a064:	f1c2 0214 	rsb	r2, r2, #20
 800a068:	fa47 f402 	asr.w	r4, r7, r2
 800a06c:	fa04 f202 	lsl.w	r2, r4, r2
 800a070:	42ba      	cmp	r2, r7
 800a072:	f040 847a 	bne.w	800a96a <__ieee754_pow+0x9e2>
 800a076:	f004 0401 	and.w	r4, r4, #1
 800a07a:	f1c4 0402 	rsb	r4, r4, #2
 800a07e:	4a63      	ldr	r2, [pc, #396]	@ (800a20c <__ieee754_pow+0x284>)
 800a080:	4297      	cmp	r7, r2
 800a082:	d1e3      	bne.n	800a04c <__ieee754_pow+0xc4>
 800a084:	f1b8 0f00 	cmp.w	r8, #0
 800a088:	f280 846b 	bge.w	800a962 <__ieee754_pow+0x9da>
 800a08c:	4652      	mov	r2, sl
 800a08e:	465b      	mov	r3, fp
 800a090:	2000      	movs	r0, #0
 800a092:	495e      	ldr	r1, [pc, #376]	@ (800a20c <__ieee754_pow+0x284>)
 800a094:	f7f6 fb4a 	bl	800072c <__aeabi_ddiv>
 800a098:	e794      	b.n	8009fc4 <__ieee754_pow+0x3c>
 800a09a:	2400      	movs	r4, #0
 800a09c:	bb81      	cbnz	r1, 800a100 <__ieee754_pow+0x178>
 800a09e:	4a59      	ldr	r2, [pc, #356]	@ (800a204 <__ieee754_pow+0x27c>)
 800a0a0:	4297      	cmp	r7, r2
 800a0a2:	d1ec      	bne.n	800a07e <__ieee754_pow+0xf6>
 800a0a4:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 800a0a8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800a0ac:	ea53 0309 	orrs.w	r3, r3, r9
 800a0b0:	f000 844f 	beq.w	800a952 <__ieee754_pow+0x9ca>
 800a0b4:	4b56      	ldr	r3, [pc, #344]	@ (800a210 <__ieee754_pow+0x288>)
 800a0b6:	429d      	cmp	r5, r3
 800a0b8:	d908      	bls.n	800a0cc <__ieee754_pow+0x144>
 800a0ba:	f1b8 0f00 	cmp.w	r8, #0
 800a0be:	f280 844c 	bge.w	800a95a <__ieee754_pow+0x9d2>
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	e77d      	b.n	8009fc4 <__ieee754_pow+0x3c>
 800a0c8:	2402      	movs	r4, #2
 800a0ca:	e7e7      	b.n	800a09c <__ieee754_pow+0x114>
 800a0cc:	f1b8 0f00 	cmp.w	r8, #0
 800a0d0:	f04f 0000 	mov.w	r0, #0
 800a0d4:	f04f 0100 	mov.w	r1, #0
 800a0d8:	f6bf af74 	bge.w	8009fc4 <__ieee754_pow+0x3c>
 800a0dc:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a0e0:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a0e4:	e76e      	b.n	8009fc4 <__ieee754_pow+0x3c>
 800a0e6:	4a4b      	ldr	r2, [pc, #300]	@ (800a214 <__ieee754_pow+0x28c>)
 800a0e8:	4590      	cmp	r8, r2
 800a0ea:	d109      	bne.n	800a100 <__ieee754_pow+0x178>
 800a0ec:	2e00      	cmp	r6, #0
 800a0ee:	db07      	blt.n	800a100 <__ieee754_pow+0x178>
 800a0f0:	4650      	mov	r0, sl
 800a0f2:	4659      	mov	r1, fp
 800a0f4:	b011      	add	sp, #68	@ 0x44
 800a0f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fa:	f000 bd0f 	b.w	800ab1c <__ieee754_sqrt>
 800a0fe:	2400      	movs	r4, #0
 800a100:	4650      	mov	r0, sl
 800a102:	4659      	mov	r1, fp
 800a104:	9302      	str	r3, [sp, #8]
 800a106:	f000 fc69 	bl	800a9dc <fabs>
 800a10a:	9b02      	ldr	r3, [sp, #8]
 800a10c:	f1b9 0f00 	cmp.w	r9, #0
 800a110:	d127      	bne.n	800a162 <__ieee754_pow+0x1da>
 800a112:	4a3e      	ldr	r2, [pc, #248]	@ (800a20c <__ieee754_pow+0x284>)
 800a114:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 800a118:	4594      	cmp	ip, r2
 800a11a:	d000      	beq.n	800a11e <__ieee754_pow+0x196>
 800a11c:	bb0d      	cbnz	r5, 800a162 <__ieee754_pow+0x1da>
 800a11e:	f1b8 0f00 	cmp.w	r8, #0
 800a122:	da05      	bge.n	800a130 <__ieee754_pow+0x1a8>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	2000      	movs	r0, #0
 800a12a:	4938      	ldr	r1, [pc, #224]	@ (800a20c <__ieee754_pow+0x284>)
 800a12c:	f7f6 fafe 	bl	800072c <__aeabi_ddiv>
 800a130:	2e00      	cmp	r6, #0
 800a132:	f6bf af47 	bge.w	8009fc4 <__ieee754_pow+0x3c>
 800a136:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a13a:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a13e:	4325      	orrs	r5, r4
 800a140:	d108      	bne.n	800a154 <__ieee754_pow+0x1cc>
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	4610      	mov	r0, r2
 800a148:	4619      	mov	r1, r3
 800a14a:	f7f6 f80d 	bl	8000168 <__aeabi_dsub>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	e79f      	b.n	800a094 <__ieee754_pow+0x10c>
 800a154:	2c01      	cmp	r4, #1
 800a156:	f47f af35 	bne.w	8009fc4 <__ieee754_pow+0x3c>
 800a15a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a15e:	4619      	mov	r1, r3
 800a160:	e730      	b.n	8009fc4 <__ieee754_pow+0x3c>
 800a162:	0ff2      	lsrs	r2, r6, #31
 800a164:	3a01      	subs	r2, #1
 800a166:	ea52 0c04 	orrs.w	ip, r2, r4
 800a16a:	d102      	bne.n	800a172 <__ieee754_pow+0x1ea>
 800a16c:	4652      	mov	r2, sl
 800a16e:	465b      	mov	r3, fp
 800a170:	e7e9      	b.n	800a146 <__ieee754_pow+0x1be>
 800a172:	f04f 0900 	mov.w	r9, #0
 800a176:	3c01      	subs	r4, #1
 800a178:	4314      	orrs	r4, r2
 800a17a:	bf14      	ite	ne
 800a17c:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800a20c <__ieee754_pow+0x284>
 800a180:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800a218 <__ieee754_pow+0x290>
 800a184:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800a188:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800a18c:	f240 8104 	bls.w	800a398 <__ieee754_pow+0x410>
 800a190:	4b22      	ldr	r3, [pc, #136]	@ (800a21c <__ieee754_pow+0x294>)
 800a192:	429f      	cmp	r7, r3
 800a194:	4b1e      	ldr	r3, [pc, #120]	@ (800a210 <__ieee754_pow+0x288>)
 800a196:	d913      	bls.n	800a1c0 <__ieee754_pow+0x238>
 800a198:	429d      	cmp	r5, r3
 800a19a:	d808      	bhi.n	800a1ae <__ieee754_pow+0x226>
 800a19c:	f1b8 0f00 	cmp.w	r8, #0
 800a1a0:	da08      	bge.n	800a1b4 <__ieee754_pow+0x22c>
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	b011      	add	sp, #68	@ 0x44
 800a1a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1aa:	f000 bcb1 	b.w	800ab10 <__math_oflow>
 800a1ae:	f1b8 0f00 	cmp.w	r8, #0
 800a1b2:	dcf6      	bgt.n	800a1a2 <__ieee754_pow+0x21a>
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	b011      	add	sp, #68	@ 0x44
 800a1b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1bc:	f000 bca3 	b.w	800ab06 <__math_uflow>
 800a1c0:	429d      	cmp	r5, r3
 800a1c2:	d20c      	bcs.n	800a1de <__ieee754_pow+0x256>
 800a1c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f7f6 fbf6 	bl	80009bc <__aeabi_dcmplt>
 800a1d0:	3800      	subs	r0, #0
 800a1d2:	bf18      	it	ne
 800a1d4:	2001      	movne	r0, #1
 800a1d6:	f1b8 0f00 	cmp.w	r8, #0
 800a1da:	daec      	bge.n	800a1b6 <__ieee754_pow+0x22e>
 800a1dc:	e7e2      	b.n	800a1a4 <__ieee754_pow+0x21c>
 800a1de:	4b0b      	ldr	r3, [pc, #44]	@ (800a20c <__ieee754_pow+0x284>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	429d      	cmp	r5, r3
 800a1e4:	d91c      	bls.n	800a220 <__ieee754_pow+0x298>
 800a1e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f7f6 fbe6 	bl	80009bc <__aeabi_dcmplt>
 800a1f0:	3800      	subs	r0, #0
 800a1f2:	bf18      	it	ne
 800a1f4:	2001      	movne	r0, #1
 800a1f6:	f1b8 0f00 	cmp.w	r8, #0
 800a1fa:	dcd3      	bgt.n	800a1a4 <__ieee754_pow+0x21c>
 800a1fc:	e7db      	b.n	800a1b6 <__ieee754_pow+0x22e>
 800a1fe:	bf00      	nop
 800a200:	fff00000 	.word	0xfff00000
 800a204:	7ff00000 	.word	0x7ff00000
 800a208:	433fffff 	.word	0x433fffff
 800a20c:	3ff00000 	.word	0x3ff00000
 800a210:	3fefffff 	.word	0x3fefffff
 800a214:	3fe00000 	.word	0x3fe00000
 800a218:	bff00000 	.word	0xbff00000
 800a21c:	43f00000 	.word	0x43f00000
 800a220:	4b59      	ldr	r3, [pc, #356]	@ (800a388 <__ieee754_pow+0x400>)
 800a222:	f7f5 ffa1 	bl	8000168 <__aeabi_dsub>
 800a226:	a350      	add	r3, pc, #320	@ (adr r3, 800a368 <__ieee754_pow+0x3e0>)
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	4604      	mov	r4, r0
 800a22e:	460d      	mov	r5, r1
 800a230:	f7f6 f952 	bl	80004d8 <__aeabi_dmul>
 800a234:	a34e      	add	r3, pc, #312	@ (adr r3, 800a370 <__ieee754_pow+0x3e8>)
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	4606      	mov	r6, r0
 800a23c:	460f      	mov	r7, r1
 800a23e:	4620      	mov	r0, r4
 800a240:	4629      	mov	r1, r5
 800a242:	f7f6 f949 	bl	80004d8 <__aeabi_dmul>
 800a246:	2200      	movs	r2, #0
 800a248:	4682      	mov	sl, r0
 800a24a:	468b      	mov	fp, r1
 800a24c:	4620      	mov	r0, r4
 800a24e:	4629      	mov	r1, r5
 800a250:	4b4e      	ldr	r3, [pc, #312]	@ (800a38c <__ieee754_pow+0x404>)
 800a252:	f7f6 f941 	bl	80004d8 <__aeabi_dmul>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	a147      	add	r1, pc, #284	@ (adr r1, 800a378 <__ieee754_pow+0x3f0>)
 800a25c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a260:	f7f5 ff82 	bl	8000168 <__aeabi_dsub>
 800a264:	4622      	mov	r2, r4
 800a266:	462b      	mov	r3, r5
 800a268:	f7f6 f936 	bl	80004d8 <__aeabi_dmul>
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	2000      	movs	r0, #0
 800a272:	4947      	ldr	r1, [pc, #284]	@ (800a390 <__ieee754_pow+0x408>)
 800a274:	f7f5 ff78 	bl	8000168 <__aeabi_dsub>
 800a278:	4622      	mov	r2, r4
 800a27a:	4680      	mov	r8, r0
 800a27c:	4689      	mov	r9, r1
 800a27e:	462b      	mov	r3, r5
 800a280:	4620      	mov	r0, r4
 800a282:	4629      	mov	r1, r5
 800a284:	f7f6 f928 	bl	80004d8 <__aeabi_dmul>
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	4640      	mov	r0, r8
 800a28e:	4649      	mov	r1, r9
 800a290:	f7f6 f922 	bl	80004d8 <__aeabi_dmul>
 800a294:	a33a      	add	r3, pc, #232	@ (adr r3, 800a380 <__ieee754_pow+0x3f8>)
 800a296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29a:	f7f6 f91d 	bl	80004d8 <__aeabi_dmul>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4650      	mov	r0, sl
 800a2a4:	4659      	mov	r1, fp
 800a2a6:	f7f5 ff5f 	bl	8000168 <__aeabi_dsub>
 800a2aa:	2400      	movs	r4, #0
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	4689      	mov	r9, r1
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	f7f5 ff58 	bl	800016c <__adddf3>
 800a2bc:	4632      	mov	r2, r6
 800a2be:	463b      	mov	r3, r7
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	f7f5 ff50 	bl	8000168 <__aeabi_dsub>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	f7f5 ff4a 	bl	8000168 <__aeabi_dsub>
 800a2d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9304      	str	r3, [sp, #16]
 800a2e0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	460f      	mov	r7, r1
 800a2e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2ec:	465b      	mov	r3, fp
 800a2ee:	4652      	mov	r2, sl
 800a2f0:	f7f5 ff3a 	bl	8000168 <__aeabi_dsub>
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	462b      	mov	r3, r5
 800a2f8:	f7f6 f8ee 	bl	80004d8 <__aeabi_dmul>
 800a2fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a300:	4680      	mov	r8, r0
 800a302:	4689      	mov	r9, r1
 800a304:	4630      	mov	r0, r6
 800a306:	4639      	mov	r1, r7
 800a308:	f7f6 f8e6 	bl	80004d8 <__aeabi_dmul>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	4640      	mov	r0, r8
 800a312:	4649      	mov	r1, r9
 800a314:	f7f5 ff2a 	bl	800016c <__adddf3>
 800a318:	465b      	mov	r3, fp
 800a31a:	4606      	mov	r6, r0
 800a31c:	460f      	mov	r7, r1
 800a31e:	4652      	mov	r2, sl
 800a320:	4620      	mov	r0, r4
 800a322:	4629      	mov	r1, r5
 800a324:	f7f6 f8d8 	bl	80004d8 <__aeabi_dmul>
 800a328:	460b      	mov	r3, r1
 800a32a:	4602      	mov	r2, r0
 800a32c:	4680      	mov	r8, r0
 800a32e:	4689      	mov	r9, r1
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f5 ff1a 	bl	800016c <__adddf3>
 800a338:	4b16      	ldr	r3, [pc, #88]	@ (800a394 <__ieee754_pow+0x40c>)
 800a33a:	4604      	mov	r4, r0
 800a33c:	4299      	cmp	r1, r3
 800a33e:	460d      	mov	r5, r1
 800a340:	468b      	mov	fp, r1
 800a342:	f340 81fd 	ble.w	800a740 <__ieee754_pow+0x7b8>
 800a346:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a34a:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a34e:	4303      	orrs	r3, r0
 800a350:	f000 81dc 	beq.w	800a70c <__ieee754_pow+0x784>
 800a354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a358:	2200      	movs	r2, #0
 800a35a:	2300      	movs	r3, #0
 800a35c:	f7f6 fb2e 	bl	80009bc <__aeabi_dcmplt>
 800a360:	3800      	subs	r0, #0
 800a362:	bf18      	it	ne
 800a364:	2001      	movne	r0, #1
 800a366:	e71d      	b.n	800a1a4 <__ieee754_pow+0x21c>
 800a368:	60000000 	.word	0x60000000
 800a36c:	3ff71547 	.word	0x3ff71547
 800a370:	f85ddf44 	.word	0xf85ddf44
 800a374:	3e54ae0b 	.word	0x3e54ae0b
 800a378:	55555555 	.word	0x55555555
 800a37c:	3fd55555 	.word	0x3fd55555
 800a380:	652b82fe 	.word	0x652b82fe
 800a384:	3ff71547 	.word	0x3ff71547
 800a388:	3ff00000 	.word	0x3ff00000
 800a38c:	3fd00000 	.word	0x3fd00000
 800a390:	3fe00000 	.word	0x3fe00000
 800a394:	408fffff 	.word	0x408fffff
 800a398:	4ad3      	ldr	r2, [pc, #844]	@ (800a6e8 <__ieee754_pow+0x760>)
 800a39a:	4032      	ands	r2, r6
 800a39c:	2a00      	cmp	r2, #0
 800a39e:	f040 817a 	bne.w	800a696 <__ieee754_pow+0x70e>
 800a3a2:	4bd2      	ldr	r3, [pc, #840]	@ (800a6ec <__ieee754_pow+0x764>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f7f6 f897 	bl	80004d8 <__aeabi_dmul>
 800a3aa:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	151a      	asrs	r2, r3, #20
 800a3b2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a3b6:	4422      	add	r2, r4
 800a3b8:	920a      	str	r2, [sp, #40]	@ 0x28
 800a3ba:	4acd      	ldr	r2, [pc, #820]	@ (800a6f0 <__ieee754_pow+0x768>)
 800a3bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3c0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a3ca:	dd08      	ble.n	800a3de <__ieee754_pow+0x456>
 800a3cc:	4ac9      	ldr	r2, [pc, #804]	@ (800a6f4 <__ieee754_pow+0x76c>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	f340 8163 	ble.w	800a69a <__ieee754_pow+0x712>
 800a3d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3d6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a3da:	3301      	adds	r3, #1
 800a3dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3de:	2600      	movs	r6, #0
 800a3e0:	00f3      	lsls	r3, r6, #3
 800a3e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3e4:	4bc4      	ldr	r3, [pc, #784]	@ (800a6f8 <__ieee754_pow+0x770>)
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a3f6:	4623      	mov	r3, r4
 800a3f8:	4682      	mov	sl, r0
 800a3fa:	f7f5 feb5 	bl	8000168 <__aeabi_dsub>
 800a3fe:	4652      	mov	r2, sl
 800a400:	462b      	mov	r3, r5
 800a402:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a406:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a40a:	f7f5 feaf 	bl	800016c <__adddf3>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	2000      	movs	r0, #0
 800a414:	49b9      	ldr	r1, [pc, #740]	@ (800a6fc <__ieee754_pow+0x774>)
 800a416:	f7f6 f989 	bl	800072c <__aeabi_ddiv>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a422:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a426:	f7f6 f857 	bl	80004d8 <__aeabi_dmul>
 800a42a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a42e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a432:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a436:	2300      	movs	r3, #0
 800a438:	2200      	movs	r2, #0
 800a43a:	46ab      	mov	fp, r5
 800a43c:	106d      	asrs	r5, r5, #1
 800a43e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a442:	9304      	str	r3, [sp, #16]
 800a444:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a448:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a44c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a450:	4640      	mov	r0, r8
 800a452:	4649      	mov	r1, r9
 800a454:	4614      	mov	r4, r2
 800a456:	461d      	mov	r5, r3
 800a458:	f7f6 f83e 	bl	80004d8 <__aeabi_dmul>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a464:	f7f5 fe80 	bl	8000168 <__aeabi_dsub>
 800a468:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a46c:	4606      	mov	r6, r0
 800a46e:	460f      	mov	r7, r1
 800a470:	4620      	mov	r0, r4
 800a472:	4629      	mov	r1, r5
 800a474:	f7f5 fe78 	bl	8000168 <__aeabi_dsub>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4650      	mov	r0, sl
 800a47e:	4659      	mov	r1, fp
 800a480:	f7f5 fe72 	bl	8000168 <__aeabi_dsub>
 800a484:	4642      	mov	r2, r8
 800a486:	464b      	mov	r3, r9
 800a488:	f7f6 f826 	bl	80004d8 <__aeabi_dmul>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4630      	mov	r0, r6
 800a492:	4639      	mov	r1, r7
 800a494:	f7f5 fe68 	bl	8000168 <__aeabi_dsub>
 800a498:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a49c:	f7f6 f81c 	bl	80004d8 <__aeabi_dmul>
 800a4a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	f7f6 f814 	bl	80004d8 <__aeabi_dmul>
 800a4b0:	a37b      	add	r3, pc, #492	@ (adr r3, 800a6a0 <__ieee754_pow+0x718>)
 800a4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	460d      	mov	r5, r1
 800a4ba:	f7f6 f80d 	bl	80004d8 <__aeabi_dmul>
 800a4be:	a37a      	add	r3, pc, #488	@ (adr r3, 800a6a8 <__ieee754_pow+0x720>)
 800a4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c4:	f7f5 fe52 	bl	800016c <__adddf3>
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	462b      	mov	r3, r5
 800a4cc:	f7f6 f804 	bl	80004d8 <__aeabi_dmul>
 800a4d0:	a377      	add	r3, pc, #476	@ (adr r3, 800a6b0 <__ieee754_pow+0x728>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	f7f5 fe49 	bl	800016c <__adddf3>
 800a4da:	4622      	mov	r2, r4
 800a4dc:	462b      	mov	r3, r5
 800a4de:	f7f5 fffb 	bl	80004d8 <__aeabi_dmul>
 800a4e2:	a375      	add	r3, pc, #468	@ (adr r3, 800a6b8 <__ieee754_pow+0x730>)
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	f7f5 fe40 	bl	800016c <__adddf3>
 800a4ec:	4622      	mov	r2, r4
 800a4ee:	462b      	mov	r3, r5
 800a4f0:	f7f5 fff2 	bl	80004d8 <__aeabi_dmul>
 800a4f4:	a372      	add	r3, pc, #456	@ (adr r3, 800a6c0 <__ieee754_pow+0x738>)
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	f7f5 fe37 	bl	800016c <__adddf3>
 800a4fe:	4622      	mov	r2, r4
 800a500:	462b      	mov	r3, r5
 800a502:	f7f5 ffe9 	bl	80004d8 <__aeabi_dmul>
 800a506:	a370      	add	r3, pc, #448	@ (adr r3, 800a6c8 <__ieee754_pow+0x740>)
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	f7f5 fe2e 	bl	800016c <__adddf3>
 800a510:	4622      	mov	r2, r4
 800a512:	4606      	mov	r6, r0
 800a514:	460f      	mov	r7, r1
 800a516:	462b      	mov	r3, r5
 800a518:	4620      	mov	r0, r4
 800a51a:	4629      	mov	r1, r5
 800a51c:	f7f5 ffdc 	bl	80004d8 <__aeabi_dmul>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	4630      	mov	r0, r6
 800a526:	4639      	mov	r1, r7
 800a528:	f7f5 ffd6 	bl	80004d8 <__aeabi_dmul>
 800a52c:	4604      	mov	r4, r0
 800a52e:	460d      	mov	r5, r1
 800a530:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a534:	4642      	mov	r2, r8
 800a536:	464b      	mov	r3, r9
 800a538:	f7f5 fe18 	bl	800016c <__adddf3>
 800a53c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a540:	f7f5 ffca 	bl	80004d8 <__aeabi_dmul>
 800a544:	4622      	mov	r2, r4
 800a546:	462b      	mov	r3, r5
 800a548:	f7f5 fe10 	bl	800016c <__adddf3>
 800a54c:	4642      	mov	r2, r8
 800a54e:	4682      	mov	sl, r0
 800a550:	468b      	mov	fp, r1
 800a552:	464b      	mov	r3, r9
 800a554:	4640      	mov	r0, r8
 800a556:	4649      	mov	r1, r9
 800a558:	f7f5 ffbe 	bl	80004d8 <__aeabi_dmul>
 800a55c:	2200      	movs	r2, #0
 800a55e:	4b68      	ldr	r3, [pc, #416]	@ (800a700 <__ieee754_pow+0x778>)
 800a560:	4606      	mov	r6, r0
 800a562:	460f      	mov	r7, r1
 800a564:	f7f5 fe02 	bl	800016c <__adddf3>
 800a568:	4652      	mov	r2, sl
 800a56a:	465b      	mov	r3, fp
 800a56c:	f7f5 fdfe 	bl	800016c <__adddf3>
 800a570:	2400      	movs	r4, #0
 800a572:	460d      	mov	r5, r1
 800a574:	4622      	mov	r2, r4
 800a576:	460b      	mov	r3, r1
 800a578:	4640      	mov	r0, r8
 800a57a:	4649      	mov	r1, r9
 800a57c:	f7f5 ffac 	bl	80004d8 <__aeabi_dmul>
 800a580:	2200      	movs	r2, #0
 800a582:	4680      	mov	r8, r0
 800a584:	4689      	mov	r9, r1
 800a586:	4620      	mov	r0, r4
 800a588:	4629      	mov	r1, r5
 800a58a:	4b5d      	ldr	r3, [pc, #372]	@ (800a700 <__ieee754_pow+0x778>)
 800a58c:	f7f5 fdec 	bl	8000168 <__aeabi_dsub>
 800a590:	4632      	mov	r2, r6
 800a592:	463b      	mov	r3, r7
 800a594:	f7f5 fde8 	bl	8000168 <__aeabi_dsub>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	4650      	mov	r0, sl
 800a59e:	4659      	mov	r1, fp
 800a5a0:	f7f5 fde2 	bl	8000168 <__aeabi_dsub>
 800a5a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5a8:	f7f5 ff96 	bl	80004d8 <__aeabi_dmul>
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	460f      	mov	r7, r1
 800a5b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a5b6:	462b      	mov	r3, r5
 800a5b8:	f7f5 ff8e 	bl	80004d8 <__aeabi_dmul>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f5 fdd2 	bl	800016c <__adddf3>
 800a5c8:	2400      	movs	r4, #0
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	460f      	mov	r7, r1
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	f7f5 fdc9 	bl	800016c <__adddf3>
 800a5da:	a33d      	add	r3, pc, #244	@ (adr r3, 800a6d0 <__ieee754_pow+0x748>)
 800a5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	460d      	mov	r5, r1
 800a5e4:	f7f5 ff78 	bl	80004d8 <__aeabi_dmul>
 800a5e8:	4642      	mov	r2, r8
 800a5ea:	464b      	mov	r3, r9
 800a5ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	f7f5 fdb8 	bl	8000168 <__aeabi_dsub>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	4639      	mov	r1, r7
 800a600:	f7f5 fdb2 	bl	8000168 <__aeabi_dsub>
 800a604:	a334      	add	r3, pc, #208	@ (adr r3, 800a6d8 <__ieee754_pow+0x750>)
 800a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60a:	f7f5 ff65 	bl	80004d8 <__aeabi_dmul>
 800a60e:	a334      	add	r3, pc, #208	@ (adr r3, 800a6e0 <__ieee754_pow+0x758>)
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	4606      	mov	r6, r0
 800a616:	460f      	mov	r7, r1
 800a618:	4620      	mov	r0, r4
 800a61a:	4629      	mov	r1, r5
 800a61c:	f7f5 ff5c 	bl	80004d8 <__aeabi_dmul>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4630      	mov	r0, r6
 800a626:	4639      	mov	r1, r7
 800a628:	f7f5 fda0 	bl	800016c <__adddf3>
 800a62c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a62e:	4b35      	ldr	r3, [pc, #212]	@ (800a704 <__ieee754_pow+0x77c>)
 800a630:	2400      	movs	r4, #0
 800a632:	4413      	add	r3, r2
 800a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a638:	f7f5 fd98 	bl	800016c <__adddf3>
 800a63c:	4682      	mov	sl, r0
 800a63e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a640:	468b      	mov	fp, r1
 800a642:	f7f5 fedf 	bl	8000404 <__aeabi_i2d>
 800a646:	4606      	mov	r6, r0
 800a648:	460f      	mov	r7, r1
 800a64a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a64c:	4b2e      	ldr	r3, [pc, #184]	@ (800a708 <__ieee754_pow+0x780>)
 800a64e:	4413      	add	r3, r2
 800a650:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a654:	4652      	mov	r2, sl
 800a656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a65a:	465b      	mov	r3, fp
 800a65c:	f7f5 fd86 	bl	800016c <__adddf3>
 800a660:	4642      	mov	r2, r8
 800a662:	464b      	mov	r3, r9
 800a664:	f7f5 fd82 	bl	800016c <__adddf3>
 800a668:	4632      	mov	r2, r6
 800a66a:	463b      	mov	r3, r7
 800a66c:	f7f5 fd7e 	bl	800016c <__adddf3>
 800a670:	4632      	mov	r2, r6
 800a672:	463b      	mov	r3, r7
 800a674:	4620      	mov	r0, r4
 800a676:	460d      	mov	r5, r1
 800a678:	f7f5 fd76 	bl	8000168 <__aeabi_dsub>
 800a67c:	4642      	mov	r2, r8
 800a67e:	464b      	mov	r3, r9
 800a680:	f7f5 fd72 	bl	8000168 <__aeabi_dsub>
 800a684:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a688:	f7f5 fd6e 	bl	8000168 <__aeabi_dsub>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	4650      	mov	r0, sl
 800a692:	4659      	mov	r1, fp
 800a694:	e61c      	b.n	800a2d0 <__ieee754_pow+0x348>
 800a696:	2400      	movs	r4, #0
 800a698:	e68a      	b.n	800a3b0 <__ieee754_pow+0x428>
 800a69a:	2601      	movs	r6, #1
 800a69c:	e6a0      	b.n	800a3e0 <__ieee754_pow+0x458>
 800a69e:	bf00      	nop
 800a6a0:	4a454eef 	.word	0x4a454eef
 800a6a4:	3fca7e28 	.word	0x3fca7e28
 800a6a8:	93c9db65 	.word	0x93c9db65
 800a6ac:	3fcd864a 	.word	0x3fcd864a
 800a6b0:	a91d4101 	.word	0xa91d4101
 800a6b4:	3fd17460 	.word	0x3fd17460
 800a6b8:	518f264d 	.word	0x518f264d
 800a6bc:	3fd55555 	.word	0x3fd55555
 800a6c0:	db6fabff 	.word	0xdb6fabff
 800a6c4:	3fdb6db6 	.word	0x3fdb6db6
 800a6c8:	33333303 	.word	0x33333303
 800a6cc:	3fe33333 	.word	0x3fe33333
 800a6d0:	e0000000 	.word	0xe0000000
 800a6d4:	3feec709 	.word	0x3feec709
 800a6d8:	dc3a03fd 	.word	0xdc3a03fd
 800a6dc:	3feec709 	.word	0x3feec709
 800a6e0:	145b01f5 	.word	0x145b01f5
 800a6e4:	be3e2fe0 	.word	0xbe3e2fe0
 800a6e8:	7ff00000 	.word	0x7ff00000
 800a6ec:	43400000 	.word	0x43400000
 800a6f0:	0003988e 	.word	0x0003988e
 800a6f4:	000bb679 	.word	0x000bb679
 800a6f8:	0800b0d0 	.word	0x0800b0d0
 800a6fc:	3ff00000 	.word	0x3ff00000
 800a700:	40080000 	.word	0x40080000
 800a704:	0800b0b0 	.word	0x0800b0b0
 800a708:	0800b0c0 	.word	0x0800b0c0
 800a70c:	a39a      	add	r3, pc, #616	@ (adr r3, 800a978 <__ieee754_pow+0x9f0>)
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	4630      	mov	r0, r6
 800a714:	4639      	mov	r1, r7
 800a716:	f7f5 fd29 	bl	800016c <__adddf3>
 800a71a:	4642      	mov	r2, r8
 800a71c:	e9cd 0100 	strd	r0, r1, [sp]
 800a720:	464b      	mov	r3, r9
 800a722:	4620      	mov	r0, r4
 800a724:	4629      	mov	r1, r5
 800a726:	f7f5 fd1f 	bl	8000168 <__aeabi_dsub>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a732:	f7f6 f961 	bl	80009f8 <__aeabi_dcmpgt>
 800a736:	2800      	cmp	r0, #0
 800a738:	f47f ae0c 	bne.w	800a354 <__ieee754_pow+0x3cc>
 800a73c:	4ba0      	ldr	r3, [pc, #640]	@ (800a9c0 <__ieee754_pow+0xa38>)
 800a73e:	e022      	b.n	800a786 <__ieee754_pow+0x7fe>
 800a740:	4ca0      	ldr	r4, [pc, #640]	@ (800a9c4 <__ieee754_pow+0xa3c>)
 800a742:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a746:	42a3      	cmp	r3, r4
 800a748:	d919      	bls.n	800a77e <__ieee754_pow+0x7f6>
 800a74a:	4b9f      	ldr	r3, [pc, #636]	@ (800a9c8 <__ieee754_pow+0xa40>)
 800a74c:	440b      	add	r3, r1
 800a74e:	4303      	orrs	r3, r0
 800a750:	d009      	beq.n	800a766 <__ieee754_pow+0x7de>
 800a752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a756:	2200      	movs	r2, #0
 800a758:	2300      	movs	r3, #0
 800a75a:	f7f6 f92f 	bl	80009bc <__aeabi_dcmplt>
 800a75e:	3800      	subs	r0, #0
 800a760:	bf18      	it	ne
 800a762:	2001      	movne	r0, #1
 800a764:	e527      	b.n	800a1b6 <__ieee754_pow+0x22e>
 800a766:	4642      	mov	r2, r8
 800a768:	464b      	mov	r3, r9
 800a76a:	f7f5 fcfd 	bl	8000168 <__aeabi_dsub>
 800a76e:	4632      	mov	r2, r6
 800a770:	463b      	mov	r3, r7
 800a772:	f7f6 f937 	bl	80009e4 <__aeabi_dcmpge>
 800a776:	2800      	cmp	r0, #0
 800a778:	d1eb      	bne.n	800a752 <__ieee754_pow+0x7ca>
 800a77a:	4b94      	ldr	r3, [pc, #592]	@ (800a9cc <__ieee754_pow+0xa44>)
 800a77c:	e003      	b.n	800a786 <__ieee754_pow+0x7fe>
 800a77e:	4a94      	ldr	r2, [pc, #592]	@ (800a9d0 <__ieee754_pow+0xa48>)
 800a780:	4293      	cmp	r3, r2
 800a782:	f240 80e1 	bls.w	800a948 <__ieee754_pow+0x9c0>
 800a786:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a78a:	151b      	asrs	r3, r3, #20
 800a78c:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a790:	fa4a fa03 	asr.w	sl, sl, r3
 800a794:	44da      	add	sl, fp
 800a796:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a79a:	488e      	ldr	r0, [pc, #568]	@ (800a9d4 <__ieee754_pow+0xa4c>)
 800a79c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a7a0:	4108      	asrs	r0, r1
 800a7a2:	ea00 030a 	and.w	r3, r0, sl
 800a7a6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a7aa:	f1c1 0114 	rsb	r1, r1, #20
 800a7ae:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	fa4a fa01 	asr.w	sl, sl, r1
 800a7b8:	f1bb 0f00 	cmp.w	fp, #0
 800a7bc:	4649      	mov	r1, r9
 800a7be:	f04f 0200 	mov.w	r2, #0
 800a7c2:	bfb8      	it	lt
 800a7c4:	f1ca 0a00 	rsblt	sl, sl, #0
 800a7c8:	f7f5 fcce 	bl	8000168 <__aeabi_dsub>
 800a7cc:	4680      	mov	r8, r0
 800a7ce:	4689      	mov	r9, r1
 800a7d0:	2400      	movs	r4, #0
 800a7d2:	4632      	mov	r2, r6
 800a7d4:	463b      	mov	r3, r7
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	4649      	mov	r1, r9
 800a7da:	f7f5 fcc7 	bl	800016c <__adddf3>
 800a7de:	a368      	add	r3, pc, #416	@ (adr r3, 800a980 <__ieee754_pow+0x9f8>)
 800a7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	460d      	mov	r5, r1
 800a7e8:	f7f5 fe76 	bl	80004d8 <__aeabi_dmul>
 800a7ec:	4642      	mov	r2, r8
 800a7ee:	464b      	mov	r3, r9
 800a7f0:	e9cd 0100 	strd	r0, r1, [sp]
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	f7f5 fcb6 	bl	8000168 <__aeabi_dsub>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4630      	mov	r0, r6
 800a802:	4639      	mov	r1, r7
 800a804:	f7f5 fcb0 	bl	8000168 <__aeabi_dsub>
 800a808:	a35f      	add	r3, pc, #380	@ (adr r3, 800a988 <__ieee754_pow+0xa00>)
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	f7f5 fe63 	bl	80004d8 <__aeabi_dmul>
 800a812:	a35f      	add	r3, pc, #380	@ (adr r3, 800a990 <__ieee754_pow+0xa08>)
 800a814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a818:	4680      	mov	r8, r0
 800a81a:	4689      	mov	r9, r1
 800a81c:	4620      	mov	r0, r4
 800a81e:	4629      	mov	r1, r5
 800a820:	f7f5 fe5a 	bl	80004d8 <__aeabi_dmul>
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	4640      	mov	r0, r8
 800a82a:	4649      	mov	r1, r9
 800a82c:	f7f5 fc9e 	bl	800016c <__adddf3>
 800a830:	4604      	mov	r4, r0
 800a832:	460d      	mov	r5, r1
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a83c:	f7f5 fc96 	bl	800016c <__adddf3>
 800a840:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a844:	4680      	mov	r8, r0
 800a846:	4689      	mov	r9, r1
 800a848:	f7f5 fc8e 	bl	8000168 <__aeabi_dsub>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4620      	mov	r0, r4
 800a852:	4629      	mov	r1, r5
 800a854:	f7f5 fc88 	bl	8000168 <__aeabi_dsub>
 800a858:	4642      	mov	r2, r8
 800a85a:	4606      	mov	r6, r0
 800a85c:	460f      	mov	r7, r1
 800a85e:	464b      	mov	r3, r9
 800a860:	4640      	mov	r0, r8
 800a862:	4649      	mov	r1, r9
 800a864:	f7f5 fe38 	bl	80004d8 <__aeabi_dmul>
 800a868:	a34b      	add	r3, pc, #300	@ (adr r3, 800a998 <__ieee754_pow+0xa10>)
 800a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86e:	4604      	mov	r4, r0
 800a870:	460d      	mov	r5, r1
 800a872:	f7f5 fe31 	bl	80004d8 <__aeabi_dmul>
 800a876:	a34a      	add	r3, pc, #296	@ (adr r3, 800a9a0 <__ieee754_pow+0xa18>)
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	f7f5 fc74 	bl	8000168 <__aeabi_dsub>
 800a880:	4622      	mov	r2, r4
 800a882:	462b      	mov	r3, r5
 800a884:	f7f5 fe28 	bl	80004d8 <__aeabi_dmul>
 800a888:	a347      	add	r3, pc, #284	@ (adr r3, 800a9a8 <__ieee754_pow+0xa20>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	f7f5 fc6d 	bl	800016c <__adddf3>
 800a892:	4622      	mov	r2, r4
 800a894:	462b      	mov	r3, r5
 800a896:	f7f5 fe1f 	bl	80004d8 <__aeabi_dmul>
 800a89a:	a345      	add	r3, pc, #276	@ (adr r3, 800a9b0 <__ieee754_pow+0xa28>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f7f5 fc62 	bl	8000168 <__aeabi_dsub>
 800a8a4:	4622      	mov	r2, r4
 800a8a6:	462b      	mov	r3, r5
 800a8a8:	f7f5 fe16 	bl	80004d8 <__aeabi_dmul>
 800a8ac:	a342      	add	r3, pc, #264	@ (adr r3, 800a9b8 <__ieee754_pow+0xa30>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	f7f5 fc5b 	bl	800016c <__adddf3>
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	462b      	mov	r3, r5
 800a8ba:	f7f5 fe0d 	bl	80004d8 <__aeabi_dmul>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	4649      	mov	r1, r9
 800a8c6:	f7f5 fc4f 	bl	8000168 <__aeabi_dsub>
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	460d      	mov	r5, r1
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	f7f5 fdff 	bl	80004d8 <__aeabi_dmul>
 800a8da:	2200      	movs	r2, #0
 800a8dc:	e9cd 0100 	strd	r0, r1, [sp]
 800a8e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	f7f5 fc3e 	bl	8000168 <__aeabi_dsub>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8f4:	f7f5 ff1a 	bl	800072c <__aeabi_ddiv>
 800a8f8:	4632      	mov	r2, r6
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	460d      	mov	r5, r1
 800a8fe:	463b      	mov	r3, r7
 800a900:	4640      	mov	r0, r8
 800a902:	4649      	mov	r1, r9
 800a904:	f7f5 fde8 	bl	80004d8 <__aeabi_dmul>
 800a908:	4632      	mov	r2, r6
 800a90a:	463b      	mov	r3, r7
 800a90c:	f7f5 fc2e 	bl	800016c <__adddf3>
 800a910:	4602      	mov	r2, r0
 800a912:	460b      	mov	r3, r1
 800a914:	4620      	mov	r0, r4
 800a916:	4629      	mov	r1, r5
 800a918:	f7f5 fc26 	bl	8000168 <__aeabi_dsub>
 800a91c:	4642      	mov	r2, r8
 800a91e:	464b      	mov	r3, r9
 800a920:	f7f5 fc22 	bl	8000168 <__aeabi_dsub>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	2000      	movs	r0, #0
 800a92a:	492b      	ldr	r1, [pc, #172]	@ (800a9d8 <__ieee754_pow+0xa50>)
 800a92c:	f7f5 fc1c 	bl	8000168 <__aeabi_dsub>
 800a930:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a934:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800a938:	da09      	bge.n	800a94e <__ieee754_pow+0x9c6>
 800a93a:	4652      	mov	r2, sl
 800a93c:	f000 f854 	bl	800a9e8 <scalbn>
 800a940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a944:	f7ff bb89 	b.w	800a05a <__ieee754_pow+0xd2>
 800a948:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a94c:	e740      	b.n	800a7d0 <__ieee754_pow+0x848>
 800a94e:	4621      	mov	r1, r4
 800a950:	e7f6      	b.n	800a940 <__ieee754_pow+0x9b8>
 800a952:	2000      	movs	r0, #0
 800a954:	4920      	ldr	r1, [pc, #128]	@ (800a9d8 <__ieee754_pow+0xa50>)
 800a956:	f7ff bb35 	b.w	8009fc4 <__ieee754_pow+0x3c>
 800a95a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a95e:	f7ff bb31 	b.w	8009fc4 <__ieee754_pow+0x3c>
 800a962:	4650      	mov	r0, sl
 800a964:	4659      	mov	r1, fp
 800a966:	f7ff bb2d 	b.w	8009fc4 <__ieee754_pow+0x3c>
 800a96a:	460c      	mov	r4, r1
 800a96c:	f7ff bb87 	b.w	800a07e <__ieee754_pow+0xf6>
 800a970:	2400      	movs	r4, #0
 800a972:	f7ff bb69 	b.w	800a048 <__ieee754_pow+0xc0>
 800a976:	bf00      	nop
 800a978:	652b82fe 	.word	0x652b82fe
 800a97c:	3c971547 	.word	0x3c971547
 800a980:	00000000 	.word	0x00000000
 800a984:	3fe62e43 	.word	0x3fe62e43
 800a988:	fefa39ef 	.word	0xfefa39ef
 800a98c:	3fe62e42 	.word	0x3fe62e42
 800a990:	0ca86c39 	.word	0x0ca86c39
 800a994:	be205c61 	.word	0xbe205c61
 800a998:	72bea4d0 	.word	0x72bea4d0
 800a99c:	3e663769 	.word	0x3e663769
 800a9a0:	c5d26bf1 	.word	0xc5d26bf1
 800a9a4:	3ebbbd41 	.word	0x3ebbbd41
 800a9a8:	af25de2c 	.word	0xaf25de2c
 800a9ac:	3f11566a 	.word	0x3f11566a
 800a9b0:	16bebd93 	.word	0x16bebd93
 800a9b4:	3f66c16c 	.word	0x3f66c16c
 800a9b8:	5555553e 	.word	0x5555553e
 800a9bc:	3fc55555 	.word	0x3fc55555
 800a9c0:	40900000 	.word	0x40900000
 800a9c4:	4090cbff 	.word	0x4090cbff
 800a9c8:	3f6f3400 	.word	0x3f6f3400
 800a9cc:	4090cc00 	.word	0x4090cc00
 800a9d0:	3fe00000 	.word	0x3fe00000
 800a9d4:	fff00000 	.word	0xfff00000
 800a9d8:	3ff00000 	.word	0x3ff00000

0800a9dc <fabs>:
 800a9dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	4770      	bx	lr
 800a9e4:	0000      	movs	r0, r0
	...

0800a9e8 <scalbn>:
 800a9e8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a9ec:	4616      	mov	r6, r2
 800a9ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a9f2:	4683      	mov	fp, r0
 800a9f4:	468c      	mov	ip, r1
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	b982      	cbnz	r2, 800aa1c <scalbn+0x34>
 800a9fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a9fe:	4303      	orrs	r3, r0
 800aa00:	d035      	beq.n	800aa6e <scalbn+0x86>
 800aa02:	4b2d      	ldr	r3, [pc, #180]	@ (800aab8 <scalbn+0xd0>)
 800aa04:	2200      	movs	r2, #0
 800aa06:	f7f5 fd67 	bl	80004d8 <__aeabi_dmul>
 800aa0a:	4b2c      	ldr	r3, [pc, #176]	@ (800aabc <scalbn+0xd4>)
 800aa0c:	4683      	mov	fp, r0
 800aa0e:	429e      	cmp	r6, r3
 800aa10:	468c      	mov	ip, r1
 800aa12:	da0d      	bge.n	800aa30 <scalbn+0x48>
 800aa14:	a324      	add	r3, pc, #144	@ (adr r3, 800aaa8 <scalbn+0xc0>)
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	e019      	b.n	800aa50 <scalbn+0x68>
 800aa1c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800aa20:	42ba      	cmp	r2, r7
 800aa22:	d109      	bne.n	800aa38 <scalbn+0x50>
 800aa24:	4602      	mov	r2, r0
 800aa26:	f7f5 fba1 	bl	800016c <__adddf3>
 800aa2a:	4683      	mov	fp, r0
 800aa2c:	468c      	mov	ip, r1
 800aa2e:	e01e      	b.n	800aa6e <scalbn+0x86>
 800aa30:	460b      	mov	r3, r1
 800aa32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa36:	3a36      	subs	r2, #54	@ 0x36
 800aa38:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800aa3c:	428e      	cmp	r6, r1
 800aa3e:	dd0a      	ble.n	800aa56 <scalbn+0x6e>
 800aa40:	a31b      	add	r3, pc, #108	@ (adr r3, 800aab0 <scalbn+0xc8>)
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	4665      	mov	r5, ip
 800aa48:	f363 051e 	bfi	r5, r3, #0, #31
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	481c      	ldr	r0, [pc, #112]	@ (800aac0 <scalbn+0xd8>)
 800aa50:	f7f5 fd42 	bl	80004d8 <__aeabi_dmul>
 800aa54:	e7e9      	b.n	800aa2a <scalbn+0x42>
 800aa56:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800aa5a:	4432      	add	r2, r6
 800aa5c:	428a      	cmp	r2, r1
 800aa5e:	dcef      	bgt.n	800aa40 <scalbn+0x58>
 800aa60:	2a00      	cmp	r2, #0
 800aa62:	dd08      	ble.n	800aa76 <scalbn+0x8e>
 800aa64:	f36f 531e 	bfc	r3, #20, #11
 800aa68:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa6c:	46ac      	mov	ip, r5
 800aa6e:	4658      	mov	r0, fp
 800aa70:	4661      	mov	r1, ip
 800aa72:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800aa76:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800aa7a:	da09      	bge.n	800aa90 <scalbn+0xa8>
 800aa7c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800aa80:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800aa84:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800aa88:	480e      	ldr	r0, [pc, #56]	@ (800aac4 <scalbn+0xdc>)
 800aa8a:	f041 011f 	orr.w	r1, r1, #31
 800aa8e:	e7c1      	b.n	800aa14 <scalbn+0x2c>
 800aa90:	3236      	adds	r2, #54	@ 0x36
 800aa92:	f36f 531e 	bfc	r3, #20, #11
 800aa96:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa9a:	4658      	mov	r0, fp
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	4b09      	ldr	r3, [pc, #36]	@ (800aac8 <scalbn+0xe0>)
 800aaa2:	e7d5      	b.n	800aa50 <scalbn+0x68>
 800aaa4:	f3af 8000 	nop.w
 800aaa8:	c2f8f359 	.word	0xc2f8f359
 800aaac:	01a56e1f 	.word	0x01a56e1f
 800aab0:	8800759c 	.word	0x8800759c
 800aab4:	7e37e43c 	.word	0x7e37e43c
 800aab8:	43500000 	.word	0x43500000
 800aabc:	ffff3cb0 	.word	0xffff3cb0
 800aac0:	8800759c 	.word	0x8800759c
 800aac4:	c2f8f359 	.word	0xc2f8f359
 800aac8:	3c900000 	.word	0x3c900000

0800aacc <with_errno>:
 800aacc:	b570      	push	{r4, r5, r6, lr}
 800aace:	4604      	mov	r4, r0
 800aad0:	460d      	mov	r5, r1
 800aad2:	4616      	mov	r6, r2
 800aad4:	f7fd f964 	bl	8007da0 <__errno>
 800aad8:	4629      	mov	r1, r5
 800aada:	6006      	str	r6, [r0, #0]
 800aadc:	4620      	mov	r0, r4
 800aade:	bd70      	pop	{r4, r5, r6, pc}

0800aae0 <xflow>:
 800aae0:	b513      	push	{r0, r1, r4, lr}
 800aae2:	4604      	mov	r4, r0
 800aae4:	4619      	mov	r1, r3
 800aae6:	4610      	mov	r0, r2
 800aae8:	b10c      	cbz	r4, 800aaee <xflow+0xe>
 800aaea:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800aaee:	e9cd 2300 	strd	r2, r3, [sp]
 800aaf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aaf6:	f7f5 fcef 	bl	80004d8 <__aeabi_dmul>
 800aafa:	2222      	movs	r2, #34	@ 0x22
 800aafc:	b002      	add	sp, #8
 800aafe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab02:	f7ff bfe3 	b.w	800aacc <with_errno>

0800ab06 <__math_uflow>:
 800ab06:	2200      	movs	r2, #0
 800ab08:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ab0c:	f7ff bfe8 	b.w	800aae0 <xflow>

0800ab10 <__math_oflow>:
 800ab10:	2200      	movs	r2, #0
 800ab12:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800ab16:	f7ff bfe3 	b.w	800aae0 <xflow>
	...

0800ab1c <__ieee754_sqrt>:
 800ab1c:	4a65      	ldr	r2, [pc, #404]	@ (800acb4 <__ieee754_sqrt+0x198>)
 800ab1e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab22:	438a      	bics	r2, r1
 800ab24:	4606      	mov	r6, r0
 800ab26:	460f      	mov	r7, r1
 800ab28:	460b      	mov	r3, r1
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	d10e      	bne.n	800ab4c <__ieee754_sqrt+0x30>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	f7f5 fcd2 	bl	80004d8 <__aeabi_dmul>
 800ab34:	4602      	mov	r2, r0
 800ab36:	460b      	mov	r3, r1
 800ab38:	4630      	mov	r0, r6
 800ab3a:	4639      	mov	r1, r7
 800ab3c:	f7f5 fb16 	bl	800016c <__adddf3>
 800ab40:	4606      	mov	r6, r0
 800ab42:	460f      	mov	r7, r1
 800ab44:	4630      	mov	r0, r6
 800ab46:	4639      	mov	r1, r7
 800ab48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4c:	2900      	cmp	r1, #0
 800ab4e:	dc0c      	bgt.n	800ab6a <__ieee754_sqrt+0x4e>
 800ab50:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800ab54:	4302      	orrs	r2, r0
 800ab56:	d0f5      	beq.n	800ab44 <__ieee754_sqrt+0x28>
 800ab58:	b189      	cbz	r1, 800ab7e <__ieee754_sqrt+0x62>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	f7f5 fb04 	bl	8000168 <__aeabi_dsub>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	f7f5 fde2 	bl	800072c <__aeabi_ddiv>
 800ab68:	e7ea      	b.n	800ab40 <__ieee754_sqrt+0x24>
 800ab6a:	150a      	asrs	r2, r1, #20
 800ab6c:	d115      	bne.n	800ab9a <__ieee754_sqrt+0x7e>
 800ab6e:	2100      	movs	r1, #0
 800ab70:	e009      	b.n	800ab86 <__ieee754_sqrt+0x6a>
 800ab72:	0ae3      	lsrs	r3, r4, #11
 800ab74:	3a15      	subs	r2, #21
 800ab76:	0564      	lsls	r4, r4, #21
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d0fa      	beq.n	800ab72 <__ieee754_sqrt+0x56>
 800ab7c:	e7f7      	b.n	800ab6e <__ieee754_sqrt+0x52>
 800ab7e:	460a      	mov	r2, r1
 800ab80:	e7fa      	b.n	800ab78 <__ieee754_sqrt+0x5c>
 800ab82:	005b      	lsls	r3, r3, #1
 800ab84:	3101      	adds	r1, #1
 800ab86:	02d8      	lsls	r0, r3, #11
 800ab88:	d5fb      	bpl.n	800ab82 <__ieee754_sqrt+0x66>
 800ab8a:	1e48      	subs	r0, r1, #1
 800ab8c:	1a12      	subs	r2, r2, r0
 800ab8e:	f1c1 0020 	rsb	r0, r1, #32
 800ab92:	fa24 f000 	lsr.w	r0, r4, r0
 800ab96:	4303      	orrs	r3, r0
 800ab98:	408c      	lsls	r4, r1
 800ab9a:	2700      	movs	r7, #0
 800ab9c:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800aba0:	2116      	movs	r1, #22
 800aba2:	07d2      	lsls	r2, r2, #31
 800aba4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800aba8:	463a      	mov	r2, r7
 800abaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abb2:	bf5c      	itt	pl
 800abb4:	005b      	lslpl	r3, r3, #1
 800abb6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800abba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800abbe:	bf58      	it	pl
 800abc0:	0064      	lslpl	r4, r4, #1
 800abc2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800abc6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800abca:	0064      	lsls	r4, r4, #1
 800abcc:	1815      	adds	r5, r2, r0
 800abce:	429d      	cmp	r5, r3
 800abd0:	bfde      	ittt	le
 800abd2:	182a      	addle	r2, r5, r0
 800abd4:	1b5b      	suble	r3, r3, r5
 800abd6:	183f      	addle	r7, r7, r0
 800abd8:	0fe5      	lsrs	r5, r4, #31
 800abda:	3901      	subs	r1, #1
 800abdc:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800abe0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800abe4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800abe8:	d1f0      	bne.n	800abcc <__ieee754_sqrt+0xb0>
 800abea:	460d      	mov	r5, r1
 800abec:	2620      	movs	r6, #32
 800abee:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800abf2:	4293      	cmp	r3, r2
 800abf4:	eb00 0c01 	add.w	ip, r0, r1
 800abf8:	dc02      	bgt.n	800ac00 <__ieee754_sqrt+0xe4>
 800abfa:	d113      	bne.n	800ac24 <__ieee754_sqrt+0x108>
 800abfc:	45a4      	cmp	ip, r4
 800abfe:	d811      	bhi.n	800ac24 <__ieee754_sqrt+0x108>
 800ac00:	f1bc 0f00 	cmp.w	ip, #0
 800ac04:	eb0c 0100 	add.w	r1, ip, r0
 800ac08:	da3e      	bge.n	800ac88 <__ieee754_sqrt+0x16c>
 800ac0a:	2900      	cmp	r1, #0
 800ac0c:	db3c      	blt.n	800ac88 <__ieee754_sqrt+0x16c>
 800ac0e:	f102 0e01 	add.w	lr, r2, #1
 800ac12:	1a9b      	subs	r3, r3, r2
 800ac14:	4672      	mov	r2, lr
 800ac16:	45a4      	cmp	ip, r4
 800ac18:	bf88      	it	hi
 800ac1a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ac1e:	eba4 040c 	sub.w	r4, r4, ip
 800ac22:	4405      	add	r5, r0
 800ac24:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800ac28:	3e01      	subs	r6, #1
 800ac2a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800ac2e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ac32:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ac36:	d1dc      	bne.n	800abf2 <__ieee754_sqrt+0xd6>
 800ac38:	431c      	orrs	r4, r3
 800ac3a:	d01a      	beq.n	800ac72 <__ieee754_sqrt+0x156>
 800ac3c:	4c1e      	ldr	r4, [pc, #120]	@ (800acb8 <__ieee754_sqrt+0x19c>)
 800ac3e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800acbc <__ieee754_sqrt+0x1a0>
 800ac42:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ac46:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac4a:	f7f5 fa8d 	bl	8000168 <__aeabi_dsub>
 800ac4e:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800ac52:	4602      	mov	r2, r0
 800ac54:	460b      	mov	r3, r1
 800ac56:	4650      	mov	r0, sl
 800ac58:	4659      	mov	r1, fp
 800ac5a:	f7f5 feb9 	bl	80009d0 <__aeabi_dcmple>
 800ac5e:	b140      	cbz	r0, 800ac72 <__ieee754_sqrt+0x156>
 800ac60:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ac64:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac68:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ac6c:	d10e      	bne.n	800ac8c <__ieee754_sqrt+0x170>
 800ac6e:	4635      	mov	r5, r6
 800ac70:	3701      	adds	r7, #1
 800ac72:	107b      	asrs	r3, r7, #1
 800ac74:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800ac78:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800ac7c:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800ac80:	086b      	lsrs	r3, r5, #1
 800ac82:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800ac86:	e75b      	b.n	800ab40 <__ieee754_sqrt+0x24>
 800ac88:	4696      	mov	lr, r2
 800ac8a:	e7c2      	b.n	800ac12 <__ieee754_sqrt+0xf6>
 800ac8c:	f7f5 fa6e 	bl	800016c <__adddf3>
 800ac90:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4650      	mov	r0, sl
 800ac9a:	4659      	mov	r1, fp
 800ac9c:	f7f5 fe8e 	bl	80009bc <__aeabi_dcmplt>
 800aca0:	b120      	cbz	r0, 800acac <__ieee754_sqrt+0x190>
 800aca2:	1cab      	adds	r3, r5, #2
 800aca4:	bf08      	it	eq
 800aca6:	3701      	addeq	r7, #1
 800aca8:	3502      	adds	r5, #2
 800acaa:	e7e2      	b.n	800ac72 <__ieee754_sqrt+0x156>
 800acac:	1c6b      	adds	r3, r5, #1
 800acae:	f023 0501 	bic.w	r5, r3, #1
 800acb2:	e7de      	b.n	800ac72 <__ieee754_sqrt+0x156>
 800acb4:	7ff00000 	.word	0x7ff00000
 800acb8:	0800b0e8 	.word	0x0800b0e8
 800acbc:	0800b0e0 	.word	0x0800b0e0

0800acc0 <_init>:
 800acc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc2:	bf00      	nop
 800acc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc6:	bc08      	pop	{r3}
 800acc8:	469e      	mov	lr, r3
 800acca:	4770      	bx	lr

0800accc <_fini>:
 800accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acce:	bf00      	nop
 800acd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd2:	bc08      	pop	{r3}
 800acd4:	469e      	mov	lr, r3
 800acd6:	4770      	bx	lr
