
SUT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080035e0  080035e0  000045e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003694  08003694  00005060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003694  08003694  00004694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800369c  0800369c  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800369c  0800369c  0000469c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036a0  080036a0  000046a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080036a4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000060  08003704  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08003704  0000539c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afae  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001926  00000000  00000000  00010037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00011960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c0  00000000  00000000  00012480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176cf  00000000  00000000  00012d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d63b  00000000  00000000  0002a40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f86  00000000  00000000  00037a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be9d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003568  00000000  00000000  000bea14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c1f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080035c8 	.word	0x080035c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080035c8 	.word	0x080035c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	@ 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_frsub>:
 80004d4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__addsf3>
 80004da:	bf00      	nop

080004dc <__aeabi_fsub>:
 80004dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080004e0 <__addsf3>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	bf1f      	itttt	ne
 80004e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004e8:	ea92 0f03 	teqne	r2, r3
 80004ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004f4:	d06a      	beq.n	80005cc <__addsf3+0xec>
 80004f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004fe:	bfc1      	itttt	gt
 8000500:	18d2      	addgt	r2, r2, r3
 8000502:	4041      	eorgt	r1, r0
 8000504:	4048      	eorgt	r0, r1
 8000506:	4041      	eorgt	r1, r0
 8000508:	bfb8      	it	lt
 800050a:	425b      	neglt	r3, r3
 800050c:	2b19      	cmp	r3, #25
 800050e:	bf88      	it	hi
 8000510:	4770      	bxhi	lr
 8000512:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000516:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800051a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4240      	negne	r0, r0
 8000522:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000526:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800052a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800052e:	bf18      	it	ne
 8000530:	4249      	negne	r1, r1
 8000532:	ea92 0f03 	teq	r2, r3
 8000536:	d03f      	beq.n	80005b8 <__addsf3+0xd8>
 8000538:	f1a2 0201 	sub.w	r2, r2, #1
 800053c:	fa41 fc03 	asr.w	ip, r1, r3
 8000540:	eb10 000c 	adds.w	r0, r0, ip
 8000544:	f1c3 0320 	rsb	r3, r3, #32
 8000548:	fa01 f103 	lsl.w	r1, r1, r3
 800054c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000550:	d502      	bpl.n	8000558 <__addsf3+0x78>
 8000552:	4249      	negs	r1, r1
 8000554:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000558:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800055c:	d313      	bcc.n	8000586 <__addsf3+0xa6>
 800055e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000562:	d306      	bcc.n	8000572 <__addsf3+0x92>
 8000564:	0840      	lsrs	r0, r0, #1
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	f102 0201 	add.w	r2, r2, #1
 800056e:	2afe      	cmp	r2, #254	@ 0xfe
 8000570:	d251      	bcs.n	8000616 <__addsf3+0x136>
 8000572:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000576:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800057a:	bf08      	it	eq
 800057c:	f020 0001 	biceq.w	r0, r0, #1
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	4770      	bx	lr
 8000586:	0049      	lsls	r1, r1, #1
 8000588:	eb40 0000 	adc.w	r0, r0, r0
 800058c:	3a01      	subs	r2, #1
 800058e:	bf28      	it	cs
 8000590:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000594:	d2ed      	bcs.n	8000572 <__addsf3+0x92>
 8000596:	fab0 fc80 	clz	ip, r0
 800059a:	f1ac 0c08 	sub.w	ip, ip, #8
 800059e:	ebb2 020c 	subs.w	r2, r2, ip
 80005a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005a6:	bfaa      	itet	ge
 80005a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005ac:	4252      	neglt	r2, r2
 80005ae:	4318      	orrge	r0, r3
 80005b0:	bfbc      	itt	lt
 80005b2:	40d0      	lsrlt	r0, r2
 80005b4:	4318      	orrlt	r0, r3
 80005b6:	4770      	bx	lr
 80005b8:	f092 0f00 	teq	r2, #0
 80005bc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005c0:	bf06      	itte	eq
 80005c2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005c6:	3201      	addeq	r2, #1
 80005c8:	3b01      	subne	r3, #1
 80005ca:	e7b5      	b.n	8000538 <__addsf3+0x58>
 80005cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005d4:	bf18      	it	ne
 80005d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005da:	d021      	beq.n	8000620 <__addsf3+0x140>
 80005dc:	ea92 0f03 	teq	r2, r3
 80005e0:	d004      	beq.n	80005ec <__addsf3+0x10c>
 80005e2:	f092 0f00 	teq	r2, #0
 80005e6:	bf08      	it	eq
 80005e8:	4608      	moveq	r0, r1
 80005ea:	4770      	bx	lr
 80005ec:	ea90 0f01 	teq	r0, r1
 80005f0:	bf1c      	itt	ne
 80005f2:	2000      	movne	r0, #0
 80005f4:	4770      	bxne	lr
 80005f6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80005fa:	d104      	bne.n	8000606 <__addsf3+0x126>
 80005fc:	0040      	lsls	r0, r0, #1
 80005fe:	bf28      	it	cs
 8000600:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000604:	4770      	bx	lr
 8000606:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800060a:	bf3c      	itt	cc
 800060c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000610:	4770      	bxcc	lr
 8000612:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000616:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061e:	4770      	bx	lr
 8000620:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000624:	bf16      	itet	ne
 8000626:	4608      	movne	r0, r1
 8000628:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800062c:	4601      	movne	r1, r0
 800062e:	0242      	lsls	r2, r0, #9
 8000630:	bf06      	itte	eq
 8000632:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000636:	ea90 0f01 	teqeq	r0, r1
 800063a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800063e:	4770      	bx	lr

08000640 <__aeabi_ui2f>:
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	e004      	b.n	8000650 <__aeabi_i2f+0x8>
 8000646:	bf00      	nop

08000648 <__aeabi_i2f>:
 8000648:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	ea5f 0c00 	movs.w	ip, r0
 8000654:	bf08      	it	eq
 8000656:	4770      	bxeq	lr
 8000658:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800065c:	4601      	mov	r1, r0
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	e01c      	b.n	800069e <__aeabi_l2f+0x2a>

08000664 <__aeabi_ul2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f04f 0300 	mov.w	r3, #0
 8000670:	e00a      	b.n	8000688 <__aeabi_l2f+0x14>
 8000672:	bf00      	nop

08000674 <__aeabi_l2f>:
 8000674:	ea50 0201 	orrs.w	r2, r0, r1
 8000678:	bf08      	it	eq
 800067a:	4770      	bxeq	lr
 800067c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000680:	d502      	bpl.n	8000688 <__aeabi_l2f+0x14>
 8000682:	4240      	negs	r0, r0
 8000684:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000688:	ea5f 0c01 	movs.w	ip, r1
 800068c:	bf02      	ittt	eq
 800068e:	4684      	moveq	ip, r0
 8000690:	4601      	moveq	r1, r0
 8000692:	2000      	moveq	r0, #0
 8000694:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000698:	bf08      	it	eq
 800069a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800069e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80006a2:	fabc f28c 	clz	r2, ip
 80006a6:	3a08      	subs	r2, #8
 80006a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006ac:	db10      	blt.n	80006d0 <__aeabi_l2f+0x5c>
 80006ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80006b2:	4463      	add	r3, ip
 80006b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006b8:	f1c2 0220 	rsb	r2, r2, #32
 80006bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006c0:	fa20 f202 	lsr.w	r2, r0, r2
 80006c4:	eb43 0002 	adc.w	r0, r3, r2
 80006c8:	bf08      	it	eq
 80006ca:	f020 0001 	biceq.w	r0, r0, #1
 80006ce:	4770      	bx	lr
 80006d0:	f102 0220 	add.w	r2, r2, #32
 80006d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006d8:	f1c2 0220 	rsb	r2, r2, #32
 80006dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006e0:	fa21 f202 	lsr.w	r2, r1, r2
 80006e4:	eb43 0002 	adc.w	r0, r3, r2
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006ee:	4770      	bx	lr

080006f0 <__gesf2>:
 80006f0:	f04f 3cff 	mov.w	ip, #4294967295
 80006f4:	e006      	b.n	8000704 <__cmpsf2+0x4>
 80006f6:	bf00      	nop

080006f8 <__lesf2>:
 80006f8:	f04f 0c01 	mov.w	ip, #1
 80006fc:	e002      	b.n	8000704 <__cmpsf2+0x4>
 80006fe:	bf00      	nop

08000700 <__cmpsf2>:
 8000700:	f04f 0c01 	mov.w	ip, #1
 8000704:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000710:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000714:	bf18      	it	ne
 8000716:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800071a:	d011      	beq.n	8000740 <__cmpsf2+0x40>
 800071c:	b001      	add	sp, #4
 800071e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000722:	bf18      	it	ne
 8000724:	ea90 0f01 	teqne	r0, r1
 8000728:	bf58      	it	pl
 800072a:	ebb2 0003 	subspl.w	r0, r2, r3
 800072e:	bf88      	it	hi
 8000730:	17c8      	asrhi	r0, r1, #31
 8000732:	bf38      	it	cc
 8000734:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000738:	bf18      	it	ne
 800073a:	f040 0001 	orrne.w	r0, r0, #1
 800073e:	4770      	bx	lr
 8000740:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000744:	d102      	bne.n	800074c <__cmpsf2+0x4c>
 8000746:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800074a:	d105      	bne.n	8000758 <__cmpsf2+0x58>
 800074c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000750:	d1e4      	bne.n	800071c <__cmpsf2+0x1c>
 8000752:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000756:	d0e1      	beq.n	800071c <__cmpsf2+0x1c>
 8000758:	f85d 0b04 	ldr.w	r0, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop

08000760 <__aeabi_cfrcmple>:
 8000760:	4684      	mov	ip, r0
 8000762:	4608      	mov	r0, r1
 8000764:	4661      	mov	r1, ip
 8000766:	e7ff      	b.n	8000768 <__aeabi_cfcmpeq>

08000768 <__aeabi_cfcmpeq>:
 8000768:	b50f      	push	{r0, r1, r2, r3, lr}
 800076a:	f7ff ffc9 	bl	8000700 <__cmpsf2>
 800076e:	2800      	cmp	r0, #0
 8000770:	bf48      	it	mi
 8000772:	f110 0f00 	cmnmi.w	r0, #0
 8000776:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000778 <__aeabi_fcmpeq>:
 8000778:	f84d ed08 	str.w	lr, [sp, #-8]!
 800077c:	f7ff fff4 	bl	8000768 <__aeabi_cfcmpeq>
 8000780:	bf0c      	ite	eq
 8000782:	2001      	moveq	r0, #1
 8000784:	2000      	movne	r0, #0
 8000786:	f85d fb08 	ldr.w	pc, [sp], #8
 800078a:	bf00      	nop

0800078c <__aeabi_fcmplt>:
 800078c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000790:	f7ff ffea 	bl	8000768 <__aeabi_cfcmpeq>
 8000794:	bf34      	ite	cc
 8000796:	2001      	movcc	r0, #1
 8000798:	2000      	movcs	r0, #0
 800079a:	f85d fb08 	ldr.w	pc, [sp], #8
 800079e:	bf00      	nop

080007a0 <__aeabi_fcmple>:
 80007a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a4:	f7ff ffe0 	bl	8000768 <__aeabi_cfcmpeq>
 80007a8:	bf94      	ite	ls
 80007aa:	2001      	movls	r0, #1
 80007ac:	2000      	movhi	r0, #0
 80007ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b2:	bf00      	nop

080007b4 <__aeabi_fcmpge>:
 80007b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007b8:	f7ff ffd2 	bl	8000760 <__aeabi_cfrcmple>
 80007bc:	bf94      	ite	ls
 80007be:	2001      	movls	r0, #1
 80007c0:	2000      	movhi	r0, #0
 80007c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007c6:	bf00      	nop

080007c8 <__aeabi_fcmpgt>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff ffc8 	bl	8000760 <__aeabi_cfrcmple>
 80007d0:	bf34      	ite	cc
 80007d2:	2001      	movcc	r0, #1
 80007d4:	2000      	movcs	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b5b0      	push	{r4, r5, r7, lr}
 80007de:	b0a8      	sub	sp, #160	@ 0xa0
 80007e0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 fecd 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f92f 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f000 fa55 	bl	8000c98 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ee:	f000 f971 	bl	8000ad4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80007f2:	f000 f99d 	bl	8000b30 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007f6:	f000 f9d1 	bl	8000b9c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007fa:	f000 f9f9 	bl	8000bf0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80007fe:	f000 fa21 	bl	8000c44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  InitializeGPIO();
 8000802:	f000 fa77 	bl	8000cf4 <InitializeGPIO>

  // Enable UART1 receive interrupt for commands (5 bytes)
  HAL_UART_Receive_IT(&huart1, command_buffer, COMMAND_BUFFER_SIZE);
 8000806:	2205      	movs	r2, #5
 8000808:	4981      	ldr	r1, [pc, #516]	@ (8000a10 <main+0x234>)
 800080a:	4882      	ldr	r0, [pc, #520]	@ (8000a14 <main+0x238>)
 800080c:	f002 f871 	bl	80028f2 <HAL_UART_Receive_IT>
  // Also enable interrupt for telemetry data (36 bytes)
  // Note: We'll need to handle both types of packets

  // For testing: Automatically start SUT mode
  // Remove this in production
  system_state = STATE_SYNTHETIC_FLIGHT;
 8000810:	4b81      	ldr	r3, [pc, #516]	@ (8000a18 <main+0x23c>)
 8000812:	2202      	movs	r2, #2
 8000814:	701a      	strb	r2, [r3, #0]
  
  // Send initial status to verify UART is working
  HAL_Delay(1000); // Wait 1 second
 8000816:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800081a:	f000 ff13 	bl	8001644 <HAL_Delay>
  TransmitStatus();
 800081e:	f000 fc0d 	bl	800103c <TransmitStatus>
  
  // Send a test message to verify UART transmission
  uint8_t test_msg[] = "ROCKET CONTROL SYSTEM READY\r\n";
 8000822:	4b7e      	ldr	r3, [pc, #504]	@ (8000a1c <main+0x240>)
 8000824:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8000828:	461d      	mov	r5, r3
 800082a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000832:	c407      	stmia	r4!, {r0, r1, r2}
 8000834:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, test_msg, sizeof(test_msg)-1, 100);
 8000836:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800083a:	2364      	movs	r3, #100	@ 0x64
 800083c:	221d      	movs	r2, #29
 800083e:	4875      	ldr	r0, [pc, #468]	@ (8000a14 <main+0x238>)
 8000840:	f001 ffcc 	bl	80027dc <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Get current time once for this loop iteration
    uint32_t current_time = HAL_GetTick();
 8000844:	f000 fef4 	bl	8001630 <HAL_GetTick>
 8000848:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    
    // Process incoming telemetry data
    if (system_state != STATE_IDLE) {
 800084c:	4b72      	ldr	r3, [pc, #456]	@ (8000a18 <main+0x23c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d011      	beq.n	8000878 <main+0x9c>
      // Check for telemetry data (this would typically come from sensors)
      // For now, we'll simulate telemetry data reception
      
      // Update flight status based on current telemetry
      UpdateFlightStatus();
 8000854:	f000 fab0 	bl	8000db8 <UpdateFlightStatus>
      
      // Transmit status periodically
      if (current_time - last_status_transmission >= status_transmission_interval) {
 8000858:	4b71      	ldr	r3, [pc, #452]	@ (8000a20 <main+0x244>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000860:	1ad2      	subs	r2, r2, r3
 8000862:	4b70      	ldr	r3, [pc, #448]	@ (8000a24 <main+0x248>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	429a      	cmp	r2, r3
 8000868:	d315      	bcc.n	8000896 <main+0xba>
        TransmitStatus();
 800086a:	f000 fbe7 	bl	800103c <TransmitStatus>
        last_status_transmission = current_time;
 800086e:	4a6c      	ldr	r2, [pc, #432]	@ (8000a20 <main+0x244>)
 8000870:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	e00e      	b.n	8000896 <main+0xba>
      }
    } else {
      // Even in IDLE state, transmit status to show system is alive
      if (current_time - last_status_transmission >= status_transmission_interval) {
 8000878:	4b69      	ldr	r3, [pc, #420]	@ (8000a20 <main+0x244>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000880:	1ad2      	subs	r2, r2, r3
 8000882:	4b68      	ldr	r3, [pc, #416]	@ (8000a24 <main+0x248>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	d305      	bcc.n	8000896 <main+0xba>
        TransmitStatus();
 800088a:	f000 fbd7 	bl	800103c <TransmitStatus>
        last_status_transmission = current_time;
 800088e:	4a64      	ldr	r2, [pc, #400]	@ (8000a20 <main+0x244>)
 8000890:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000894:	6013      	str	r3, [r2, #0]
      }
    }
    
    // Check if we have received telemetry data via UART1
    // This would typically be done in an interrupt, but for now we'll check here
    if (system_state != STATE_IDLE) {
 8000896:	4b60      	ldr	r3, [pc, #384]	@ (8000a18 <main+0x23c>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d034      	beq.n	8000908 <main+0x12c>
      // when telemetry data is received
      
      // For testing purposes, let's simulate some telemetry data
      // In a real implementation, this would come from sensors
      static uint32_t last_simulated_telemetry = 0;
      if (current_time - last_simulated_telemetry >= 2000) { // Every 2 seconds
 800089e:	4b62      	ldr	r3, [pc, #392]	@ (8000a28 <main+0x24c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80008ac:	d32c      	bcc.n	8000908 <main+0x12c>
        last_simulated_telemetry = current_time;
 80008ae:	4a5e      	ldr	r2, [pc, #376]	@ (8000a28 <main+0x24c>)
 80008b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80008b4:	6013      	str	r3, [r2, #0]
        
        // Simulate increasing altitude and acceleration
        if (current_telemetry.altitude < 2000.0f) {
 80008b6:	4b5d      	ldr	r3, [pc, #372]	@ (8000a2c <main+0x250>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	495d      	ldr	r1, [pc, #372]	@ (8000a30 <main+0x254>)
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff65 	bl	800078c <__aeabi_fcmplt>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d009      	beq.n	80008dc <main+0x100>
          current_telemetry.altitude += 50.0f;
 80008c8:	4b58      	ldr	r3, [pc, #352]	@ (8000a2c <main+0x250>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4959      	ldr	r1, [pc, #356]	@ (8000a34 <main+0x258>)
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fe06 	bl	80004e0 <__addsf3>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b54      	ldr	r3, [pc, #336]	@ (8000a2c <main+0x250>)
 80008da:	601a      	str	r2, [r3, #0]
        }
        if (current_telemetry.accel_z < 20.0f) {
 80008dc:	4b53      	ldr	r3, [pc, #332]	@ (8000a2c <main+0x250>)
 80008de:	691b      	ldr	r3, [r3, #16]
 80008e0:	4955      	ldr	r1, [pc, #340]	@ (8000a38 <main+0x25c>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff52 	bl	800078c <__aeabi_fcmplt>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d00a      	beq.n	8000904 <main+0x128>
          current_telemetry.accel_z += 2.0f;
 80008ee:	4b4f      	ldr	r3, [pc, #316]	@ (8000a2c <main+0x250>)
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fdf2 	bl	80004e0 <__addsf3>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	4b4a      	ldr	r3, [pc, #296]	@ (8000a2c <main+0x250>)
 8000902:	611a      	str	r2, [r3, #16]
        }
        
        // Update flight status with simulated data
        UpdateFlightStatus();
 8000904:	f000 fa58 	bl	8000db8 <UpdateFlightStatus>
      }
    }

    // Debug: Print current system state every 5 seconds
    static uint32_t last_debug_print = 0;
    if (current_time - last_debug_print >= 5000) {
 8000908:	4b4c      	ldr	r3, [pc, #304]	@ (8000a3c <main+0x260>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000916:	4293      	cmp	r3, r2
 8000918:	d975      	bls.n	8000a06 <main+0x22a>
        last_debug_print = current_time;
 800091a:	4a48      	ldr	r2, [pc, #288]	@ (8000a3c <main+0x260>)
 800091c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000920:	6013      	str	r3, [r2, #0]
        // Send a test status packet to verify UART transmission is working
        TransmitStatus();
 8000922:	f000 fb8b 	bl	800103c <TransmitStatus>

        // Also send a simple debug message with current status
        char debug_msg[100];
        snprintf(debug_msg, sizeof(debug_msg),
                "DEBUG: Alt=%.1fm, AccZ=%.1fm/s2, Status=0x%04X\r\n",
                current_telemetry.altitude,
 8000926:	4b41      	ldr	r3, [pc, #260]	@ (8000a2c <main+0x250>)
 8000928:	681b      	ldr	r3, [r3, #0]
        snprintf(debug_msg, sizeof(debug_msg),
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fd7a 	bl	8000424 <__aeabi_f2d>
 8000930:	4604      	mov	r4, r0
 8000932:	460d      	mov	r5, r1
                current_telemetry.accel_z,
 8000934:	4b3d      	ldr	r3, [pc, #244]	@ (8000a2c <main+0x250>)
 8000936:	691b      	ldr	r3, [r3, #16]
        snprintf(debug_msg, sizeof(debug_msg),
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fd73 	bl	8000424 <__aeabi_f2d>
 800093e:	4602      	mov	r2, r0
 8000940:	460b      	mov	r3, r1
                (uint16_t)(flight_status.launch_detected |
 8000942:	493f      	ldr	r1, [pc, #252]	@ (8000a40 <main+0x264>)
 8000944:	7809      	ldrb	r1, [r1, #0]
 8000946:	f3c1 0100 	ubfx	r1, r1, #0, #1
 800094a:	b2c9      	uxtb	r1, r1
 800094c:	b208      	sxth	r0, r1
                          (flight_status.motor_burnout_delay_completed << 1) |
 800094e:	493c      	ldr	r1, [pc, #240]	@ (8000a40 <main+0x264>)
 8000950:	7809      	ldrb	r1, [r1, #0]
 8000952:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8000956:	b2c9      	uxtb	r1, r1
                (uint16_t)(flight_status.launch_detected |
 8000958:	b209      	sxth	r1, r1
 800095a:	0049      	lsls	r1, r1, #1
 800095c:	b209      	sxth	r1, r1
 800095e:	4301      	orrs	r1, r0
 8000960:	b208      	sxth	r0, r1
                          (flight_status.min_altitude_reached << 2) |
 8000962:	4937      	ldr	r1, [pc, #220]	@ (8000a40 <main+0x264>)
 8000964:	7809      	ldrb	r1, [r1, #0]
 8000966:	f3c1 0180 	ubfx	r1, r1, #2, #1
 800096a:	b2c9      	uxtb	r1, r1
                          (flight_status.motor_burnout_delay_completed << 1) |
 800096c:	b209      	sxth	r1, r1
 800096e:	0089      	lsls	r1, r1, #2
 8000970:	b209      	sxth	r1, r1
 8000972:	4301      	orrs	r1, r0
 8000974:	b208      	sxth	r0, r1
                          (flight_status.excessive_tilt_detected << 3) |
 8000976:	4932      	ldr	r1, [pc, #200]	@ (8000a40 <main+0x264>)
 8000978:	7809      	ldrb	r1, [r1, #0]
 800097a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800097e:	b2c9      	uxtb	r1, r1
                          (flight_status.min_altitude_reached << 2) |
 8000980:	b209      	sxth	r1, r1
 8000982:	00c9      	lsls	r1, r1, #3
 8000984:	b209      	sxth	r1, r1
 8000986:	4301      	orrs	r1, r0
 8000988:	b208      	sxth	r0, r1
                          (flight_status.descent_detected << 4) |
 800098a:	492d      	ldr	r1, [pc, #180]	@ (8000a40 <main+0x264>)
 800098c:	7809      	ldrb	r1, [r1, #0]
 800098e:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8000992:	b2c9      	uxtb	r1, r1
                          (flight_status.excessive_tilt_detected << 3) |
 8000994:	b209      	sxth	r1, r1
 8000996:	0109      	lsls	r1, r1, #4
 8000998:	b209      	sxth	r1, r1
 800099a:	4301      	orrs	r1, r0
 800099c:	b208      	sxth	r0, r1
                          (flight_status.drogue_deployment_issued << 5) |
 800099e:	4928      	ldr	r1, [pc, #160]	@ (8000a40 <main+0x264>)
 80009a0:	7809      	ldrb	r1, [r1, #0]
 80009a2:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80009a6:	b2c9      	uxtb	r1, r1
                          (flight_status.descent_detected << 4) |
 80009a8:	b209      	sxth	r1, r1
 80009aa:	0149      	lsls	r1, r1, #5
 80009ac:	b209      	sxth	r1, r1
 80009ae:	4301      	orrs	r1, r0
 80009b0:	b208      	sxth	r0, r1
                          (flight_status.altitude_below_main_threshold << 6) |
 80009b2:	4923      	ldr	r1, [pc, #140]	@ (8000a40 <main+0x264>)
 80009b4:	7809      	ldrb	r1, [r1, #0]
 80009b6:	f3c1 1180 	ubfx	r1, r1, #6, #1
 80009ba:	b2c9      	uxtb	r1, r1
                          (flight_status.drogue_deployment_issued << 5) |
 80009bc:	b209      	sxth	r1, r1
 80009be:	0189      	lsls	r1, r1, #6
 80009c0:	b209      	sxth	r1, r1
 80009c2:	4301      	orrs	r1, r0
 80009c4:	b208      	sxth	r0, r1
                          (flight_status.main_parachute_deployment_issued << 7)));
 80009c6:	491e      	ldr	r1, [pc, #120]	@ (8000a40 <main+0x264>)
 80009c8:	7809      	ldrb	r1, [r1, #0]
 80009ca:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 80009ce:	b2c9      	uxtb	r1, r1
                          (flight_status.altitude_below_main_threshold << 6) |
 80009d0:	b209      	sxth	r1, r1
 80009d2:	01c9      	lsls	r1, r1, #7
 80009d4:	b209      	sxth	r1, r1
 80009d6:	4301      	orrs	r1, r0
 80009d8:	b209      	sxth	r1, r1
                (uint16_t)(flight_status.launch_detected |
 80009da:	b289      	uxth	r1, r1
        snprintf(debug_msg, sizeof(debug_msg),
 80009dc:	4638      	mov	r0, r7
 80009de:	9104      	str	r1, [sp, #16]
 80009e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80009e4:	e9cd 4500 	strd	r4, r5, [sp]
 80009e8:	4a16      	ldr	r2, [pc, #88]	@ (8000a44 <main+0x268>)
 80009ea:	2164      	movs	r1, #100	@ 0x64
 80009ec:	f002 f928 	bl	8002c40 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 80009f0:	463b      	mov	r3, r7
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fbaa 	bl	800014c <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4639      	mov	r1, r7
 80009fe:	2364      	movs	r3, #100	@ 0x64
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <main+0x238>)
 8000a02:	f001 feeb 	bl	80027dc <HAL_UART_Transmit>
    }
    
    // Small delay to prevent busy waiting
    HAL_Delay(10);
 8000a06:	200a      	movs	r0, #10
 8000a08:	f000 fe1c 	bl	8001644 <HAL_Delay>
  {
 8000a0c:	e71a      	b.n	8000844 <main+0x68>
 8000a0e:	bf00      	nop
 8000a10:	20000230 	.word	0x20000230
 8000a14:	20000128 	.word	0x20000128
 8000a18:	20000224 	.word	0x20000224
 8000a1c:	08003614 	.word	0x08003614
 8000a20:	2000022c 	.word	0x2000022c
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000244 	.word	0x20000244
 8000a2c:	20000204 	.word	0x20000204
 8000a30:	44fa0000 	.word	0x44fa0000
 8000a34:	42480000 	.word	0x42480000
 8000a38:	41a00000 	.word	0x41a00000
 8000a3c:	20000248 	.word	0x20000248
 8000a40:	20000200 	.word	0x20000200
 8000a44:	080035e0 	.word	0x080035e0

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b090      	sub	sp, #64	@ 0x40
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0318 	add.w	r3, r7, #24
 8000a52:	2228      	movs	r2, #40	@ 0x28
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 f928 	bl	8002cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a86:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0318 	add.w	r3, r7, #24
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 f9bf 	bl	8001e14 <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a9c:	f000 fb62 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 fc2c 	bl	8002318 <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ac6:	f000 fb4d 	bl	8001164 <Error_Handler>
  }
}
 8000aca:	bf00      	nop
 8000acc:	3740      	adds	r7, #64	@ 0x40
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000ada:	4a13      	ldr	r2, [pc, #76]	@ (8000b28 <MX_I2C1_Init+0x54>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000ae0:	4a12      	ldr	r2, [pc, #72]	@ (8000b2c <MX_I2C1_Init+0x58>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000af2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000af6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b04:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <MX_I2C1_Init+0x50>)
 8000b12:	f001 f83b 	bl	8001b8c <HAL_I2C_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b1c:	f000 fb22 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000007c 	.word	0x2000007c
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	000186a0 	.word	0x000186a0

08000b30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b34:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <MX_SPI1_Init+0x64>)
 8000b36:	4a18      	ldr	r2, [pc, #96]	@ (8000b98 <MX_SPI1_Init+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <MX_SPI1_Init+0x64>)
 8000b3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b42:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b48:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <MX_SPI1_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <MX_SPI1_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_SPI1_Init+0x64>)
 8000b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b62:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_SPI1_Init+0x64>)
 8000b64:	2210      	movs	r2, #16
 8000b66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <MX_SPI1_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_SPI1_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <MX_SPI1_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_SPI1_Init+0x64>)
 8000b7c:	220a      	movs	r2, #10
 8000b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <MX_SPI1_Init+0x64>)
 8000b82:	f001 fd57 	bl	8002634 <HAL_SPI_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b8c:	f000 faea 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200000d0 	.word	0x200000d0
 8000b98:	40013000 	.word	0x40013000

08000b9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	@ (8000bec <MX_USART1_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	f001 fdb2 	bl	800273c <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f000 fac1 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000128 	.word	0x20000128
 8000bec:	40013800 	.word	0x40013800

08000bf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <MX_USART2_UART_Init+0x50>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c28:	f001 fd88 	bl	800273c <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c32:	f000 fa97 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000170 	.word	0x20000170
 8000c40:	40004400 	.word	0x40004400

08000c44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_USART3_UART_Init+0x4c>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <MX_USART3_UART_Init+0x50>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <MX_USART3_UART_Init+0x4c>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_USART3_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_USART3_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <MX_USART3_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_USART3_UART_Init+0x4c>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <MX_USART3_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <MX_USART3_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_USART3_UART_Init+0x4c>)
 8000c7c:	f001 fd5e 	bl	800273c <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c86:	f000 fa6d 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200001b8 	.word	0x200001b8
 8000c94:	40004800 	.word	0x40004800

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <MX_GPIO_Init+0x58>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4a13      	ldr	r2, [pc, #76]	@ (8000cf0 <MX_GPIO_Init+0x58>)
 8000ca4:	f043 0320 	orr.w	r3, r3, #32
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <MX_GPIO_Init+0x58>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f003 0320 	and.w	r3, r3, #32
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <MX_GPIO_Init+0x58>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf0 <MX_GPIO_Init+0x58>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6193      	str	r3, [r2, #24]
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <MX_GPIO_Init+0x58>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <MX_GPIO_Init+0x58>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a07      	ldr	r2, [pc, #28]	@ (8000cf0 <MX_GPIO_Init+0x58>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <MX_GPIO_Init+0x58>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <InitializeGPIO>:
/* USER CODE BEGIN 4 */
/**
 * @brief Initialize GPIO pins for parachute deployment
 */
void InitializeGPIO(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
    
    // Enable GPIOB clock if not already enabled
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b19      	ldr	r3, [pc, #100]	@ (8000d70 <InitializeGPIO+0x7c>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a18      	ldr	r2, [pc, #96]	@ (8000d70 <InitializeGPIO+0x7c>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <InitializeGPIO+0x7c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
    
    // Configure drogue parachute pin (GPIO 14)
    GPIO_InitStruct.Pin = DROGUE_PARACHUTE_PIN;
 8000d20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d24:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DROGUE_PARACHUTE_PORT, &GPIO_InitStruct);
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	4619      	mov	r1, r3
 8000d38:	480e      	ldr	r0, [pc, #56]	@ (8000d74 <InitializeGPIO+0x80>)
 8000d3a:	f000 fd8b 	bl	8001854 <HAL_GPIO_Init>
    
    // Configure main parachute pin (GPIO 15)
    GPIO_InitStruct.Pin = MAIN_PARACHUTE_PIN;
 8000d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d42:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(MAIN_PARACHUTE_PORT, &GPIO_InitStruct);
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480a      	ldr	r0, [pc, #40]	@ (8000d74 <InitializeGPIO+0x80>)
 8000d4c:	f000 fd82 	bl	8001854 <HAL_GPIO_Init>
    
    // Set both pins to low initially
    HAL_GPIO_WritePin(DROGUE_PARACHUTE_PORT, DROGUE_PARACHUTE_PIN, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d56:	4807      	ldr	r0, [pc, #28]	@ (8000d74 <InitializeGPIO+0x80>)
 8000d58:	f000 ff00 	bl	8001b5c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAIN_PARACHUTE_PORT, MAIN_PARACHUTE_PIN, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d62:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <InitializeGPIO+0x80>)
 8000d64:	f000 fefa 	bl	8001b5c <HAL_GPIO_WritePin>
}
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010c00 	.word	0x40010c00

08000d78 <CalculateChecksum>:
 * @param data: Pointer to data array
 * @param length: Length of data array
 * @retval Calculated checksum
 */
uint8_t CalculateChecksum(uint8_t* data, uint8_t length)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73bb      	strb	r3, [r7, #14]
 8000d8c:	e009      	b.n	8000da2 <CalculateChecksum+0x2a>
        checksum += data[i];
 8000d8e:	7bbb      	ldrb	r3, [r7, #14]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	4413      	add	r3, r2
 8000d9a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8000d9c:	7bbb      	ldrb	r3, [r7, #14]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	73bb      	strb	r3, [r7, #14]
 8000da2:	7bba      	ldrb	r2, [r7, #14]
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d3f1      	bcc.n	8000d8e <CalculateChecksum+0x16>
    }
    return checksum;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
	...

08000db8 <UpdateFlightStatus>:

/**
 * @brief Update flight status based on current telemetry data
 */
void UpdateFlightStatus(void)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8000dbe:	f000 fc37 	bl	8001630 <HAL_GetTick>
 8000dc2:	6078      	str	r0, [r7, #4]
    
    // Launch detection
    if (!flight_status.launch_detected && 
 8000dc4:	4b79      	ldr	r3, [pc, #484]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d112      	bne.n	8000df8 <UpdateFlightStatus+0x40>
        fabsf(current_telemetry.accel_z) > LAUNCH_ACCELERATION_THRESHOLD) {
 8000dd2:	4b77      	ldr	r3, [pc, #476]	@ (8000fb0 <UpdateFlightStatus+0x1f8>)
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    if (!flight_status.launch_detected && 
 8000dda:	4976      	ldr	r1, [pc, #472]	@ (8000fb4 <UpdateFlightStatus+0x1fc>)
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fcf3 	bl	80007c8 <__aeabi_fcmpgt>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d007      	beq.n	8000df8 <UpdateFlightStatus+0x40>
        flight_status.launch_detected = 1;
 8000de8:	4a70      	ldr	r2, [pc, #448]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000dea:	7813      	ldrb	r3, [r2, #0]
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	7013      	strb	r3, [r2, #0]
        launch_timestamp = current_time;
 8000df2:	4a71      	ldr	r2, [pc, #452]	@ (8000fb8 <UpdateFlightStatus+0x200>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6013      	str	r3, [r2, #0]
    }
    
    // Motor burnout delay (5 seconds after launch)
    if (flight_status.launch_detected && !flight_status.motor_burnout_delay_completed &&
 8000df8:	4b6c      	ldr	r3, [pc, #432]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d013      	beq.n	8000e2e <UpdateFlightStatus+0x76>
 8000e06:	4b69      	ldr	r3, [pc, #420]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10c      	bne.n	8000e2e <UpdateFlightStatus+0x76>
        (current_time - launch_timestamp) >= MOTOR_BURNOUT_DELAY_MS) {
 8000e14:	4b68      	ldr	r3, [pc, #416]	@ (8000fb8 <UpdateFlightStatus+0x200>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	1ad3      	subs	r3, r2, r3
    if (flight_status.launch_detected && !flight_status.motor_burnout_delay_completed &&
 8000e1c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d904      	bls.n	8000e2e <UpdateFlightStatus+0x76>
        flight_status.motor_burnout_delay_completed = 1;
 8000e24:	4a61      	ldr	r2, [pc, #388]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000e26:	7813      	ldrb	r3, [r2, #0]
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	7013      	strb	r3, [r2, #0]
    }
    
    // Minimum altitude threshold
    if (!flight_status.min_altitude_reached && 
 8000e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10d      	bne.n	8000e58 <UpdateFlightStatus+0xa0>
        current_telemetry.altitude > MIN_ALTITUDE_THRESHOLD) {
 8000e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8000fb0 <UpdateFlightStatus+0x1f8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
    if (!flight_status.min_altitude_reached && 
 8000e40:	495e      	ldr	r1, [pc, #376]	@ (8000fbc <UpdateFlightStatus+0x204>)
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fcc0 	bl	80007c8 <__aeabi_fcmpgt>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d004      	beq.n	8000e58 <UpdateFlightStatus+0xa0>
        flight_status.min_altitude_reached = 1;
 8000e4e:	4a57      	ldr	r2, [pc, #348]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000e50:	7813      	ldrb	r3, [r2, #0]
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	7013      	strb	r3, [r2, #0]
    }
    
    // Excessive tilt detection
    if (!flight_status.excessive_tilt_detected &&
 8000e58:	4b54      	ldr	r3, [pc, #336]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d11a      	bne.n	8000e9c <UpdateFlightStatus+0xe4>
        (fabsf(current_telemetry.angle_x) > EXCESSIVE_TILT_THRESHOLD ||
 8000e66:	4b52      	ldr	r3, [pc, #328]	@ (8000fb0 <UpdateFlightStatus+0x1f8>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    if (!flight_status.excessive_tilt_detected &&
 8000e6e:	4954      	ldr	r1, [pc, #336]	@ (8000fc0 <UpdateFlightStatus+0x208>)
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fca9 	bl	80007c8 <__aeabi_fcmpgt>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d10a      	bne.n	8000e92 <UpdateFlightStatus+0xda>
         fabsf(current_telemetry.angle_y) > EXCESSIVE_TILT_THRESHOLD)) {
 8000e7c:	4b4c      	ldr	r3, [pc, #304]	@ (8000fb0 <UpdateFlightStatus+0x1f8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
        (fabsf(current_telemetry.angle_x) > EXCESSIVE_TILT_THRESHOLD ||
 8000e84:	494e      	ldr	r1, [pc, #312]	@ (8000fc0 <UpdateFlightStatus+0x208>)
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fc9e 	bl	80007c8 <__aeabi_fcmpgt>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d004      	beq.n	8000e9c <UpdateFlightStatus+0xe4>
        flight_status.excessive_tilt_detected = 1;
 8000e92:	4a46      	ldr	r2, [pc, #280]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000e94:	7813      	ldrb	r3, [r2, #0]
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	7013      	strb	r3, [r2, #0]
    }
    
    // Track peak altitude for apogee detection
    if (current_telemetry.altitude > peak_altitude) {
 8000e9c:	4b44      	ldr	r3, [pc, #272]	@ (8000fb0 <UpdateFlightStatus+0x1f8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a48      	ldr	r2, [pc, #288]	@ (8000fc4 <UpdateFlightStatus+0x20c>)
 8000ea2:	6812      	ldr	r2, [r2, #0]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fc8e 	bl	80007c8 <__aeabi_fcmpgt>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <UpdateFlightStatus+0x102>
        peak_altitude = current_telemetry.altitude;
 8000eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fb0 <UpdateFlightStatus+0x1f8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a43      	ldr	r2, [pc, #268]	@ (8000fc4 <UpdateFlightStatus+0x20c>)
 8000eb8:	6013      	str	r3, [r2, #0]
    }
    
    // Descent detection (apogee passed)
    if (!flight_status.descent_detected && 
 8000eba:	4b3c      	ldr	r3, [pc, #240]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d11b      	bne.n	8000f00 <UpdateFlightStatus+0x148>
 8000ec8:	4b38      	ldr	r3, [pc, #224]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d014      	beq.n	8000f00 <UpdateFlightStatus+0x148>
        flight_status.min_altitude_reached &&
        current_telemetry.altitude < (peak_altitude - 10.0f)) { // 10m tolerance
 8000ed6:	4b36      	ldr	r3, [pc, #216]	@ (8000fb0 <UpdateFlightStatus+0x1f8>)
 8000ed8:	681c      	ldr	r4, [r3, #0]
 8000eda:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc4 <UpdateFlightStatus+0x20c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4935      	ldr	r1, [pc, #212]	@ (8000fb4 <UpdateFlightStatus+0x1fc>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fafb 	bl	80004dc <__aeabi_fsub>
 8000ee6:	4603      	mov	r3, r0
        flight_status.min_altitude_reached &&
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff fc4e 	bl	800078c <__aeabi_fcmplt>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <UpdateFlightStatus+0x148>
        flight_status.descent_detected = 1;
 8000ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000ef8:	7813      	ldrb	r3, [r2, #0]
 8000efa:	f043 0310 	orr.w	r3, r3, #16
 8000efe:	7013      	strb	r3, [r2, #0]
    }
    
    // Drogue parachute deployment
    if (!flight_status.drogue_deployment_issued &&
 8000f00:	4b2a      	ldr	r3, [pc, #168]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	f003 0320 	and.w	r3, r3, #32
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d124      	bne.n	8000f58 <UpdateFlightStatus+0x1a0>
 8000f0e:	4b27      	ldr	r3, [pc, #156]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d01d      	beq.n	8000f58 <UpdateFlightStatus+0x1a0>
        flight_status.launch_detected &&
 8000f1c:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d016      	beq.n	8000f58 <UpdateFlightStatus+0x1a0>
        flight_status.motor_burnout_delay_completed &&
 8000f2a:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00f      	beq.n	8000f58 <UpdateFlightStatus+0x1a0>
        flight_status.min_altitude_reached &&
 8000f38:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d008      	beq.n	8000f58 <UpdateFlightStatus+0x1a0>
        flight_status.excessive_tilt_detected &&
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <UpdateFlightStatus+0x1a0>
        flight_status.descent_detected) {
        DeployDrogueParachute();
 8000f54:	f000 f83a 	bl	8000fcc <DeployDrogueParachute>
    }
    
    // Main parachute altitude threshold
    if (!flight_status.altitude_below_main_threshold &&
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10d      	bne.n	8000f82 <UpdateFlightStatus+0x1ca>
        current_telemetry.altitude < MAIN_PARACHUTE_ALTITUDE) {
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <UpdateFlightStatus+0x1f8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
    if (!flight_status.altitude_below_main_threshold &&
 8000f6a:	4917      	ldr	r1, [pc, #92]	@ (8000fc8 <UpdateFlightStatus+0x210>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fc0d 	bl	800078c <__aeabi_fcmplt>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d004      	beq.n	8000f82 <UpdateFlightStatus+0x1ca>
        flight_status.altitude_below_main_threshold = 1;
 8000f78:	4a0c      	ldr	r2, [pc, #48]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000f7a:	7813      	ldrb	r3, [r2, #0]
 8000f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f80:	7013      	strb	r3, [r2, #0]
    }
    
    // Main parachute deployment
    if (!flight_status.main_parachute_deployment_issued &&
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d108      	bne.n	8000fa2 <UpdateFlightStatus+0x1ea>
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <UpdateFlightStatus+0x1f4>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <UpdateFlightStatus+0x1ea>
        flight_status.altitude_below_main_threshold) {
        DeployMainParachute();
 8000f9e:	f000 f831 	bl	8001004 <DeployMainParachute>
    }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000200 	.word	0x20000200
 8000fb0:	20000204 	.word	0x20000204
 8000fb4:	41200000 	.word	0x41200000
 8000fb8:	20000228 	.word	0x20000228
 8000fbc:	44bb8000 	.word	0x44bb8000
 8000fc0:	42700000 	.word	0x42700000
 8000fc4:	20000240 	.word	0x20000240
 8000fc8:	44098000 	.word	0x44098000

08000fcc <DeployDrogueParachute>:

/**
 * @brief Deploy drogue parachute
 */
void DeployDrogueParachute(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DROGUE_PARACHUTE_PORT, DROGUE_PARACHUTE_PIN, GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fd6:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <DeployDrogueParachute+0x30>)
 8000fd8:	f000 fdc0 	bl	8001b5c <HAL_GPIO_WritePin>
    flight_status.drogue_deployment_issued = 1;
 8000fdc:	4a08      	ldr	r2, [pc, #32]	@ (8001000 <DeployDrogueParachute+0x34>)
 8000fde:	7813      	ldrb	r3, [r2, #0]
 8000fe0:	f043 0320 	orr.w	r3, r3, #32
 8000fe4:	7013      	strb	r3, [r2, #0]
    
    // Keep pin high for 100ms to ensure deployment
    HAL_Delay(100);
 8000fe6:	2064      	movs	r0, #100	@ 0x64
 8000fe8:	f000 fb2c 	bl	8001644 <HAL_Delay>
    HAL_GPIO_WritePin(DROGUE_PARACHUTE_PORT, DROGUE_PARACHUTE_PIN, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ff2:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <DeployDrogueParachute+0x30>)
 8000ff4:	f000 fdb2 	bl	8001b5c <HAL_GPIO_WritePin>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	20000200 	.word	0x20000200

08001004 <DeployMainParachute>:

/**
 * @brief Deploy main parachute
 */
void DeployMainParachute(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MAIN_PARACHUTE_PORT, MAIN_PARACHUTE_PIN, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800100e:	4809      	ldr	r0, [pc, #36]	@ (8001034 <DeployMainParachute+0x30>)
 8001010:	f000 fda4 	bl	8001b5c <HAL_GPIO_WritePin>
    flight_status.main_parachute_deployment_issued = 1;
 8001014:	4a08      	ldr	r2, [pc, #32]	@ (8001038 <DeployMainParachute+0x34>)
 8001016:	7813      	ldrb	r3, [r2, #0]
 8001018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800101c:	7013      	strb	r3, [r2, #0]
    
    // Keep pin high for 100ms to ensure deployment
    HAL_Delay(100);
 800101e:	2064      	movs	r0, #100	@ 0x64
 8001020:	f000 fb10 	bl	8001644 <HAL_Delay>
    HAL_GPIO_WritePin(MAIN_PARACHUTE_PORT, MAIN_PARACHUTE_PIN, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800102a:	4802      	ldr	r0, [pc, #8]	@ (8001034 <DeployMainParachute+0x30>)
 800102c:	f000 fd96 	bl	8001b5c <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40010c00 	.word	0x40010c00
 8001038:	20000200 	.word	0x20000200

0800103c <TransmitStatus>:

/**
 * @brief Transmit current flight status
 */
void TransmitStatus(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
    // Prepare status packet
    status_buffer[0] = COMMAND_HEADER;
 8001042:	4b45      	ldr	r3, [pc, #276]	@ (8001158 <TransmitStatus+0x11c>)
 8001044:	22aa      	movs	r2, #170	@ 0xaa
 8001046:	701a      	strb	r2, [r3, #0]
    
    // Convert flight status to 16-bit word
    uint16_t status_word = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	80fb      	strh	r3, [r7, #6]
    status_word |= flight_status.launch_detected << 7;
 800104c:	4b43      	ldr	r3, [pc, #268]	@ (800115c <TransmitStatus+0x120>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	b21b      	sxth	r3, r3
 8001058:	01db      	lsls	r3, r3, #7
 800105a:	b21a      	sxth	r2, r3
 800105c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001060:	4313      	orrs	r3, r2
 8001062:	b21b      	sxth	r3, r3
 8001064:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.motor_burnout_delay_completed << 6);
 8001066:	4b3d      	ldr	r3, [pc, #244]	@ (800115c <TransmitStatus+0x120>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	b21b      	sxth	r3, r3
 8001072:	019b      	lsls	r3, r3, #6
 8001074:	b21a      	sxth	r2, r3
 8001076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.min_altitude_reached << 5);
 8001080:	4b36      	ldr	r3, [pc, #216]	@ (800115c <TransmitStatus+0x120>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	b21b      	sxth	r3, r3
 800108c:	015b      	lsls	r3, r3, #5
 800108e:	b21a      	sxth	r2, r3
 8001090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001094:	4313      	orrs	r3, r2
 8001096:	b21b      	sxth	r3, r3
 8001098:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.excessive_tilt_detected << 4);
 800109a:	4b30      	ldr	r3, [pc, #192]	@ (800115c <TransmitStatus+0x120>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.descent_detected << 3);
 80010b4:	4b29      	ldr	r3, [pc, #164]	@ (800115c <TransmitStatus+0x120>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	b21b      	sxth	r3, r3
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.drogue_deployment_issued << 2);
 80010ce:	4b23      	ldr	r3, [pc, #140]	@ (800115c <TransmitStatus+0x120>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	b21b      	sxth	r3, r3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	b21a      	sxth	r2, r3
 80010de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.altitude_below_main_threshold << 1);
 80010e8:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <TransmitStatus+0x120>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b21b      	sxth	r3, r3
 8001100:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.main_parachute_deployment_issued);
 8001102:	4b16      	ldr	r3, [pc, #88]	@ (800115c <TransmitStatus+0x120>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	4313      	orrs	r3, r2
 8001112:	80fb      	strh	r3, [r7, #6]

    status_buffer[1] = (uint8_t)(status_word & 0xFF);        // Lower byte
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <TransmitStatus+0x11c>)
 800111a:	705a      	strb	r2, [r3, #1]
    status_buffer[2] = (uint8_t)((status_word >> 8) & 0xFF); // Upper byte
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	b29b      	uxth	r3, r3
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <TransmitStatus+0x11c>)
 8001126:	709a      	strb	r2, [r3, #2]
    
    // Calculate and add checksum
    status_buffer[3] = CalculateChecksum(status_buffer, 3);
 8001128:	2103      	movs	r1, #3
 800112a:	480b      	ldr	r0, [pc, #44]	@ (8001158 <TransmitStatus+0x11c>)
 800112c:	f7ff fe24 	bl	8000d78 <CalculateChecksum>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <TransmitStatus+0x11c>)
 8001136:	70da      	strb	r2, [r3, #3]
    
    // Add footer
    status_buffer[4] = FOOTER_1;
 8001138:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <TransmitStatus+0x11c>)
 800113a:	220d      	movs	r2, #13
 800113c:	711a      	strb	r2, [r3, #4]
    status_buffer[5] = FOOTER_2;
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <TransmitStatus+0x11c>)
 8001140:	220a      	movs	r2, #10
 8001142:	715a      	strb	r2, [r3, #5]
    
    // Transmit status packet via UART1
    HAL_UART_Transmit(&huart1, status_buffer, STATUS_BUFFER_SIZE, 100);
 8001144:	2364      	movs	r3, #100	@ 0x64
 8001146:	2206      	movs	r2, #6
 8001148:	4903      	ldr	r1, [pc, #12]	@ (8001158 <TransmitStatus+0x11c>)
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <TransmitStatus+0x124>)
 800114c:	f001 fb46 	bl	80027dc <HAL_UART_Transmit>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000238 	.word	0x20000238
 800115c:	20000200 	.word	0x20000200
 8001160:	20000128 	.word	0x20000128

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <Error_Handler+0x8>

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_MspInit+0x5c>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	4a14      	ldr	r2, [pc, #80]	@ (80011cc <HAL_MspInit+0x5c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6193      	str	r3, [r2, #24]
 8001182:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_MspInit+0x5c>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <HAL_MspInit+0x5c>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a0e      	ldr	r2, [pc, #56]	@ (80011cc <HAL_MspInit+0x5c>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <HAL_MspInit+0x5c>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <HAL_MspInit+0x60>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <HAL_MspInit+0x60>)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000

080011d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a15      	ldr	r2, [pc, #84]	@ (8001244 <HAL_I2C_MspInit+0x70>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d123      	bne.n	800123c <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <HAL_I2C_MspInit+0x74>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a13      	ldr	r2, [pc, #76]	@ (8001248 <HAL_I2C_MspInit+0x74>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <HAL_I2C_MspInit+0x74>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800120c:	23c0      	movs	r3, #192	@ 0xc0
 800120e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001210:	2312      	movs	r3, #18
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	480b      	ldr	r0, [pc, #44]	@ (800124c <HAL_I2C_MspInit+0x78>)
 8001220:	f000 fb18 	bl	8001854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <HAL_I2C_MspInit+0x74>)
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	4a07      	ldr	r2, [pc, #28]	@ (8001248 <HAL_I2C_MspInit+0x74>)
 800122a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800122e:	61d3      	str	r3, [r2, #28]
 8001230:	4b05      	ldr	r3, [pc, #20]	@ (8001248 <HAL_I2C_MspInit+0x74>)
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40005400 	.word	0x40005400
 8001248:	40021000 	.word	0x40021000
 800124c:	40010c00 	.word	0x40010c00

08001250 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a1b      	ldr	r2, [pc, #108]	@ (80012d8 <HAL_SPI_MspInit+0x88>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d12f      	bne.n	80012d0 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001270:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <HAL_SPI_MspInit+0x8c>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <HAL_SPI_MspInit+0x8c>)
 8001276:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <HAL_SPI_MspInit+0x8c>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <HAL_SPI_MspInit+0x8c>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a13      	ldr	r2, [pc, #76]	@ (80012dc <HAL_SPI_MspInit+0x8c>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <HAL_SPI_MspInit+0x8c>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012a0:	23a0      	movs	r3, #160	@ 0xa0
 80012a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4619      	mov	r1, r3
 80012b2:	480b      	ldr	r0, [pc, #44]	@ (80012e0 <HAL_SPI_MspInit+0x90>)
 80012b4:	f000 face 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b8:	2340      	movs	r3, #64	@ 0x40
 80012ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <HAL_SPI_MspInit+0x90>)
 80012cc:	f000 fac2 	bl	8001854 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40013000 	.word	0x40013000
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010800 	.word	0x40010800

080012e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	@ 0x30
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0320 	add.w	r3, r7, #32
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a53      	ldr	r2, [pc, #332]	@ (800144c <HAL_UART_MspInit+0x168>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d132      	bne.n	800136a <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001304:	4b52      	ldr	r3, [pc, #328]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a51      	ldr	r2, [pc, #324]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 800130a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b4f      	ldr	r3, [pc, #316]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b4c      	ldr	r3, [pc, #304]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a4b      	ldr	r2, [pc, #300]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b49      	ldr	r3, [pc, #292]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	4619      	mov	r1, r3
 8001348:	4842      	ldr	r0, [pc, #264]	@ (8001454 <HAL_UART_MspInit+0x170>)
 800134a:	f000 fa83 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800134e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0320 	add.w	r3, r7, #32
 8001360:	4619      	mov	r1, r3
 8001362:	483c      	ldr	r0, [pc, #240]	@ (8001454 <HAL_UART_MspInit+0x170>)
 8001364:	f000 fa76 	bl	8001854 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001368:	e06c      	b.n	8001444 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a3a      	ldr	r2, [pc, #232]	@ (8001458 <HAL_UART_MspInit+0x174>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d130      	bne.n	80013d6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001374:	4b36      	ldr	r3, [pc, #216]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	4a35      	ldr	r2, [pc, #212]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 800137a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137e:	61d3      	str	r3, [r2, #28]
 8001380:	4b33      	ldr	r3, [pc, #204]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b30      	ldr	r3, [pc, #192]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a2f      	ldr	r2, [pc, #188]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013a4:	2304      	movs	r3, #4
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	4619      	mov	r1, r3
 80013b6:	4827      	ldr	r0, [pc, #156]	@ (8001454 <HAL_UART_MspInit+0x170>)
 80013b8:	f000 fa4c 	bl	8001854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013bc:	2308      	movs	r3, #8
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	4619      	mov	r1, r3
 80013ce:	4821      	ldr	r0, [pc, #132]	@ (8001454 <HAL_UART_MspInit+0x170>)
 80013d0:	f000 fa40 	bl	8001854 <HAL_GPIO_Init>
}
 80013d4:	e036      	b.n	8001444 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a20      	ldr	r2, [pc, #128]	@ (800145c <HAL_UART_MspInit+0x178>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d131      	bne.n	8001444 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 80013e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ea:	61d3      	str	r3, [r2, #28]
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a14      	ldr	r2, [pc, #80]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 80013fe:	f043 0308 	orr.w	r3, r3, #8
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_UART_MspInit+0x16c>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	4619      	mov	r1, r3
 8001424:	480e      	ldr	r0, [pc, #56]	@ (8001460 <HAL_UART_MspInit+0x17c>)
 8001426:	f000 fa15 	bl	8001854 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800142a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 0320 	add.w	r3, r7, #32
 800143c:	4619      	mov	r1, r3
 800143e:	4808      	ldr	r0, [pc, #32]	@ (8001460 <HAL_UART_MspInit+0x17c>)
 8001440:	f000 fa08 	bl	8001854 <HAL_GPIO_Init>
}
 8001444:	bf00      	nop
 8001446:	3730      	adds	r7, #48	@ 0x30
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40013800 	.word	0x40013800
 8001450:	40021000 	.word	0x40021000
 8001454:	40010800 	.word	0x40010800
 8001458:	40004400 	.word	0x40004400
 800145c:	40004800 	.word	0x40004800
 8001460:	40010c00 	.word	0x40010c00

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <NMI_Handler+0x4>

0800146c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <MemManage_Handler+0x4>

0800147c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <UsageFault_Handler+0x4>

0800148c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b4:	f000 f8aa 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c4:	4a14      	ldr	r2, [pc, #80]	@ (8001518 <_sbrk+0x5c>)
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <_sbrk+0x60>)
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <_sbrk+0x64>)
 80014da:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <_sbrk+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d207      	bcs.n	80014fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ec:	f001 fbe6 	bl	8002cbc <__errno>
 80014f0:	4603      	mov	r3, r0
 80014f2:	220c      	movs	r2, #12
 80014f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	e009      	b.n	8001510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	4a05      	ldr	r2, [pc, #20]	@ (8001520 <_sbrk+0x64>)
 800150c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20005000 	.word	0x20005000
 800151c:	00000400 	.word	0x00000400
 8001520:	2000024c 	.word	0x2000024c
 8001524:	200003a0 	.word	0x200003a0

08001528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001534:	f7ff fff8 	bl	8001528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001538:	480b      	ldr	r0, [pc, #44]	@ (8001568 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800153a:	490c      	ldr	r1, [pc, #48]	@ (800156c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800153c:	4a0c      	ldr	r2, [pc, #48]	@ (8001570 <LoopFillZerobss+0x16>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a09      	ldr	r2, [pc, #36]	@ (8001574 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001550:	4c09      	ldr	r4, [pc, #36]	@ (8001578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155e:	f001 fbb3 	bl	8002cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001562:	f7ff f93b 	bl	80007dc <main>
  bx lr
 8001566:	4770      	bx	lr
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001570:	080036a4 	.word	0x080036a4
  ldr r2, =_sbss
 8001574:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001578:	2000039c 	.word	0x2000039c

0800157c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC1_2_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <HAL_Init+0x28>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a07      	ldr	r2, [pc, #28]	@ (80015a8 <HAL_Init+0x28>)
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 f92b 	bl	80017ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001596:	200f      	movs	r0, #15
 8001598:	f000 f808 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800159c:	f7ff fde8 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40022000 	.word	0x40022000

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b4:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_InitTick+0x54>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_InitTick+0x58>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f935 	bl	800183a <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f000 f90b 	bl	8001802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	@ (8001608 <HAL_InitTick+0x5c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000004 	.word	0x20000004
 8001604:	2000000c 	.word	0x2000000c
 8001608:	20000008 	.word	0x20000008

0800160c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <HAL_IncTick+0x1c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b05      	ldr	r3, [pc, #20]	@ (800162c <HAL_IncTick+0x20>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a03      	ldr	r2, [pc, #12]	@ (800162c <HAL_IncTick+0x20>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	2000000c 	.word	0x2000000c
 800162c:	20000250 	.word	0x20000250

08001630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b02      	ldr	r3, [pc, #8]	@ (8001640 <HAL_GetTick+0x10>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	20000250 	.word	0x20000250

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff fff0 	bl	8001630 <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_Delay+0x44>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffe0 	bl	8001630 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000000c 	.word	0x2000000c

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	@ (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	@ (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	@ (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	@ 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	@ 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017b8:	d301      	bcc.n	80017be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00f      	b.n	80017de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017be:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <SysTick_Config+0x40>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c6:	210f      	movs	r1, #15
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f7ff ff90 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <SysTick_Config+0x40>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d6:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <SysTick_Config+0x40>)
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000e010 	.word	0xe000e010

080017ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff49 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001814:	f7ff ff5e 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7ff ff90 	bl	8001744 <NVIC_EncodePriority>
 8001824:	4602      	mov	r2, r0
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff5f 	bl	80016f0 <__NVIC_SetPriority>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffb0 	bl	80017a8 <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b08b      	sub	sp, #44	@ 0x2c
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001866:	e169      	b.n	8001b3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001868:	2201      	movs	r2, #1
 800186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	429a      	cmp	r2, r3
 8001882:	f040 8158 	bne.w	8001b36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4a9a      	ldr	r2, [pc, #616]	@ (8001af4 <HAL_GPIO_Init+0x2a0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d05e      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 8001890:	4a98      	ldr	r2, [pc, #608]	@ (8001af4 <HAL_GPIO_Init+0x2a0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d875      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 8001896:	4a98      	ldr	r2, [pc, #608]	@ (8001af8 <HAL_GPIO_Init+0x2a4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d058      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 800189c:	4a96      	ldr	r2, [pc, #600]	@ (8001af8 <HAL_GPIO_Init+0x2a4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d86f      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018a2:	4a96      	ldr	r2, [pc, #600]	@ (8001afc <HAL_GPIO_Init+0x2a8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d052      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018a8:	4a94      	ldr	r2, [pc, #592]	@ (8001afc <HAL_GPIO_Init+0x2a8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d869      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ae:	4a94      	ldr	r2, [pc, #592]	@ (8001b00 <HAL_GPIO_Init+0x2ac>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d04c      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018b4:	4a92      	ldr	r2, [pc, #584]	@ (8001b00 <HAL_GPIO_Init+0x2ac>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d863      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ba:	4a92      	ldr	r2, [pc, #584]	@ (8001b04 <HAL_GPIO_Init+0x2b0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d046      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018c0:	4a90      	ldr	r2, [pc, #576]	@ (8001b04 <HAL_GPIO_Init+0x2b0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d85d      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018c6:	2b12      	cmp	r3, #18
 80018c8:	d82a      	bhi.n	8001920 <HAL_GPIO_Init+0xcc>
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d859      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ce:	a201      	add	r2, pc, #4	@ (adr r2, 80018d4 <HAL_GPIO_Init+0x80>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	0800194f 	.word	0x0800194f
 80018d8:	08001929 	.word	0x08001929
 80018dc:	0800193b 	.word	0x0800193b
 80018e0:	0800197d 	.word	0x0800197d
 80018e4:	08001983 	.word	0x08001983
 80018e8:	08001983 	.word	0x08001983
 80018ec:	08001983 	.word	0x08001983
 80018f0:	08001983 	.word	0x08001983
 80018f4:	08001983 	.word	0x08001983
 80018f8:	08001983 	.word	0x08001983
 80018fc:	08001983 	.word	0x08001983
 8001900:	08001983 	.word	0x08001983
 8001904:	08001983 	.word	0x08001983
 8001908:	08001983 	.word	0x08001983
 800190c:	08001983 	.word	0x08001983
 8001910:	08001983 	.word	0x08001983
 8001914:	08001983 	.word	0x08001983
 8001918:	08001931 	.word	0x08001931
 800191c:	08001945 	.word	0x08001945
 8001920:	4a79      	ldr	r2, [pc, #484]	@ (8001b08 <HAL_GPIO_Init+0x2b4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001926:	e02c      	b.n	8001982 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e029      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	3304      	adds	r3, #4
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e024      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	3308      	adds	r3, #8
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e01f      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	330c      	adds	r3, #12
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e01a      	b.n	8001984 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001956:	2304      	movs	r3, #4
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e013      	b.n	8001984 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001964:	2308      	movs	r3, #8
 8001966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	611a      	str	r2, [r3, #16]
          break;
 800196e:	e009      	b.n	8001984 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001970:	2308      	movs	r3, #8
 8001972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	615a      	str	r2, [r3, #20]
          break;
 800197a:	e003      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x130>
          break;
 8001982:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2bff      	cmp	r3, #255	@ 0xff
 8001988:	d801      	bhi.n	800198e <HAL_GPIO_Init+0x13a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	e001      	b.n	8001992 <HAL_GPIO_Init+0x13e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3304      	adds	r3, #4
 8001992:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2bff      	cmp	r3, #255	@ 0xff
 8001998:	d802      	bhi.n	80019a0 <HAL_GPIO_Init+0x14c>
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x152>
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	3b08      	subs	r3, #8
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	210f      	movs	r1, #15
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	401a      	ands	r2, r3
 80019b8:	6a39      	ldr	r1, [r7, #32]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	431a      	orrs	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80b1 	beq.w	8001b36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019d4:	4b4d      	ldr	r3, [pc, #308]	@ (8001b0c <HAL_GPIO_Init+0x2b8>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a4c      	ldr	r2, [pc, #304]	@ (8001b0c <HAL_GPIO_Init+0x2b8>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b4a      	ldr	r3, [pc, #296]	@ (8001b0c <HAL_GPIO_Init+0x2b8>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019ec:	4a48      	ldr	r2, [pc, #288]	@ (8001b10 <HAL_GPIO_Init+0x2bc>)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a40      	ldr	r2, [pc, #256]	@ (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d013      	beq.n	8001a40 <HAL_GPIO_Init+0x1ec>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b18 <HAL_GPIO_Init+0x2c4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00d      	beq.n	8001a3c <HAL_GPIO_Init+0x1e8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a3e      	ldr	r2, [pc, #248]	@ (8001b1c <HAL_GPIO_Init+0x2c8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d007      	beq.n	8001a38 <HAL_GPIO_Init+0x1e4>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b20 <HAL_GPIO_Init+0x2cc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_GPIO_Init+0x1e0>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e006      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a34:	2304      	movs	r3, #4
 8001a36:	e004      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_GPIO_Init+0x1ee>
 8001a40:	2300      	movs	r3, #0
 8001a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a44:	f002 0203 	and.w	r2, r2, #3
 8001a48:	0092      	lsls	r2, r2, #2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a52:	492f      	ldr	r1, [pc, #188]	@ (8001b10 <HAL_GPIO_Init+0x2bc>)
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	492c      	ldr	r1, [pc, #176]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4928      	ldr	r1, [pc, #160]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a94:	4b23      	ldr	r3, [pc, #140]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	4922      	ldr	r1, [pc, #136]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aa2:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	491e      	ldr	r1, [pc, #120]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001abc:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4918      	ldr	r1, [pc, #96]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aca:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4914      	ldr	r1, [pc, #80]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d021      	beq.n	8001b28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	490e      	ldr	r1, [pc, #56]	@ (8001b24 <HAL_GPIO_Init+0x2d0>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]
 8001af0:	e021      	b.n	8001b36 <HAL_GPIO_Init+0x2e2>
 8001af2:	bf00      	nop
 8001af4:	10320000 	.word	0x10320000
 8001af8:	10310000 	.word	0x10310000
 8001afc:	10220000 	.word	0x10220000
 8001b00:	10210000 	.word	0x10210000
 8001b04:	10120000 	.word	0x10120000
 8001b08:	10110000 	.word	0x10110000
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010000 	.word	0x40010000
 8001b14:	40010800 	.word	0x40010800
 8001b18:	40010c00 	.word	0x40010c00
 8001b1c:	40011000 	.word	0x40011000
 8001b20:	40011400 	.word	0x40011400
 8001b24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <HAL_GPIO_Init+0x304>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	4909      	ldr	r1, [pc, #36]	@ (8001b58 <HAL_GPIO_Init+0x304>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	3301      	adds	r3, #1
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	fa22 f303 	lsr.w	r3, r2, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f47f ae8e 	bne.w	8001868 <HAL_GPIO_Init+0x14>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	372c      	adds	r7, #44	@ 0x2c
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	40010400 	.word	0x40010400

08001b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b6c:	787b      	ldrb	r3, [r7, #1]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b78:	e003      	b.n	8001b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	041a      	lsls	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	611a      	str	r2, [r3, #16]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e12b      	b.n	8001df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fb0e 	bl	80011d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2224      	movs	r2, #36	@ 0x24
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bf0:	f000 fcda 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 8001bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4a81      	ldr	r2, [pc, #516]	@ (8001e00 <HAL_I2C_Init+0x274>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d807      	bhi.n	8001c10 <HAL_I2C_Init+0x84>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4a80      	ldr	r2, [pc, #512]	@ (8001e04 <HAL_I2C_Init+0x278>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	bf94      	ite	ls
 8001c08:	2301      	movls	r3, #1
 8001c0a:	2300      	movhi	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	e006      	b.n	8001c1e <HAL_I2C_Init+0x92>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4a7d      	ldr	r2, [pc, #500]	@ (8001e08 <HAL_I2C_Init+0x27c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	bf94      	ite	ls
 8001c18:	2301      	movls	r3, #1
 8001c1a:	2300      	movhi	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0e7      	b.n	8001df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a78      	ldr	r2, [pc, #480]	@ (8001e0c <HAL_I2C_Init+0x280>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0c9b      	lsrs	r3, r3, #18
 8001c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4a6a      	ldr	r2, [pc, #424]	@ (8001e00 <HAL_I2C_Init+0x274>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d802      	bhi.n	8001c60 <HAL_I2C_Init+0xd4>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	e009      	b.n	8001c74 <HAL_I2C_Init+0xe8>
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	4a69      	ldr	r2, [pc, #420]	@ (8001e10 <HAL_I2C_Init+0x284>)
 8001c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c70:	099b      	lsrs	r3, r3, #6
 8001c72:	3301      	adds	r3, #1
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	495c      	ldr	r1, [pc, #368]	@ (8001e00 <HAL_I2C_Init+0x274>)
 8001c90:	428b      	cmp	r3, r1
 8001c92:	d819      	bhi.n	8001cc8 <HAL_I2C_Init+0x13c>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1e59      	subs	r1, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ca2:	1c59      	adds	r1, r3, #1
 8001ca4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ca8:	400b      	ands	r3, r1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_I2C_Init+0x138>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1e59      	subs	r1, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc2:	e051      	b.n	8001d68 <HAL_I2C_Init+0x1dc>
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	e04f      	b.n	8001d68 <HAL_I2C_Init+0x1dc>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d111      	bne.n	8001cf4 <HAL_I2C_Init+0x168>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1e58      	subs	r0, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	440b      	add	r3, r1
 8001cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	e012      	b.n	8001d1a <HAL_I2C_Init+0x18e>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1e58      	subs	r0, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	0099      	lsls	r1, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Init+0x196>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e022      	b.n	8001d68 <HAL_I2C_Init+0x1dc>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10e      	bne.n	8001d48 <HAL_I2C_Init+0x1bc>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1e58      	subs	r0, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6859      	ldr	r1, [r3, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	440b      	add	r3, r1
 8001d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d46:	e00f      	b.n	8001d68 <HAL_I2C_Init+0x1dc>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1e58      	subs	r0, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6859      	ldr	r1, [r3, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	0099      	lsls	r1, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	6809      	ldr	r1, [r1, #0]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6911      	ldr	r1, [r2, #16]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68d2      	ldr	r2, [r2, #12]
 8001da2:	4311      	orrs	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	430b      	orrs	r3, r1
 8001daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2220      	movs	r2, #32
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	000186a0 	.word	0x000186a0
 8001e04:	001e847f 	.word	0x001e847f
 8001e08:	003d08ff 	.word	0x003d08ff
 8001e0c:	431bde83 	.word	0x431bde83
 8001e10:	10624dd3 	.word	0x10624dd3

08001e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e272      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 8087 	beq.w	8001f42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e34:	4b92      	ldr	r3, [pc, #584]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d00c      	beq.n	8001e5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e40:	4b8f      	ldr	r3, [pc, #572]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d112      	bne.n	8001e72 <HAL_RCC_OscConfig+0x5e>
 8001e4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e58:	d10b      	bne.n	8001e72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5a:	4b89      	ldr	r3, [pc, #548]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d06c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x12c>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d168      	bne.n	8001f40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e24c      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x76>
 8001e7c:	4b80      	ldr	r3, [pc, #512]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a7f      	ldr	r2, [pc, #508]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	e02e      	b.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10c      	bne.n	8001eac <HAL_RCC_OscConfig+0x98>
 8001e92:	4b7b      	ldr	r3, [pc, #492]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a7a      	ldr	r2, [pc, #488]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b78      	ldr	r3, [pc, #480]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a77      	ldr	r2, [pc, #476]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e01d      	b.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0xbc>
 8001eb6:	4b72      	ldr	r3, [pc, #456]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a71      	ldr	r2, [pc, #452]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b6f      	ldr	r3, [pc, #444]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a6e      	ldr	r2, [pc, #440]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0xd4>
 8001ed0:	4b6b      	ldr	r3, [pc, #428]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a6a      	ldr	r2, [pc, #424]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b68      	ldr	r3, [pc, #416]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a67      	ldr	r2, [pc, #412]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ee6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d013      	beq.n	8001f18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fb9e 	bl	8001630 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff fb9a 	bl	8001630 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	@ 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e200      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xe4>
 8001f16:	e014      	b.n	8001f42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fb8a 	bl	8001630 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff fb86 	bl	8001630 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	@ 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1ec      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	4b53      	ldr	r3, [pc, #332]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x10c>
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d063      	beq.n	8002016 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4e:	4b4c      	ldr	r3, [pc, #304]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00b      	beq.n	8001f72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f5a:	4b49      	ldr	r3, [pc, #292]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d11c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x18c>
 8001f66:	4b46      	ldr	r3, [pc, #280]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d116      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	4b43      	ldr	r3, [pc, #268]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_RCC_OscConfig+0x176>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e1c0      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4939      	ldr	r1, [pc, #228]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	e03a      	b.n	8002016 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa8:	4b36      	ldr	r3, [pc, #216]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff fb3f 	bl	8001630 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb6:	f7ff fb3b 	bl	8001630 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e1a1      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4927      	ldr	r1, [pc, #156]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
 8001fe8:	e015      	b.n	8002016 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fea:	4b26      	ldr	r3, [pc, #152]	@ (8002084 <HAL_RCC_OscConfig+0x270>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fb1e 	bl	8001630 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff8:	f7ff fb1a 	bl	8001630 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e180      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d03a      	beq.n	8002098 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d019      	beq.n	800205e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202a:	4b17      	ldr	r3, [pc, #92]	@ (8002088 <HAL_RCC_OscConfig+0x274>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7ff fafe 	bl	8001630 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7ff fafa 	bl	8001630 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e160      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204a:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <HAL_RCC_OscConfig+0x26c>)
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002056:	2001      	movs	r0, #1
 8002058:	f000 face 	bl	80025f8 <RCC_Delay>
 800205c:	e01c      	b.n	8002098 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_RCC_OscConfig+0x274>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002064:	f7ff fae4 	bl	8001630 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206a:	e00f      	b.n	800208c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206c:	f7ff fae0 	bl	8001630 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d908      	bls.n	800208c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e146      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	42420000 	.word	0x42420000
 8002088:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	4b92      	ldr	r3, [pc, #584]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1e9      	bne.n	800206c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a6 	beq.w	80021f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020aa:	4b8b      	ldr	r3, [pc, #556]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10d      	bne.n	80020d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	4b88      	ldr	r3, [pc, #544]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a87      	ldr	r2, [pc, #540]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	61d3      	str	r3, [r2, #28]
 80020c2:	4b85      	ldr	r3, [pc, #532]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b82      	ldr	r3, [pc, #520]	@ (80022dc <HAL_RCC_OscConfig+0x4c8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020de:	4b7f      	ldr	r3, [pc, #508]	@ (80022dc <HAL_RCC_OscConfig+0x4c8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7e      	ldr	r2, [pc, #504]	@ (80022dc <HAL_RCC_OscConfig+0x4c8>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ea:	f7ff faa1 	bl	8001630 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f2:	f7ff fa9d 	bl	8001630 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b64      	cmp	r3, #100	@ 0x64
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e103      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b75      	ldr	r3, [pc, #468]	@ (80022dc <HAL_RCC_OscConfig+0x4c8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x312>
 8002118:	4b6f      	ldr	r3, [pc, #444]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a6e      	ldr	r2, [pc, #440]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	e02d      	b.n	8002182 <HAL_RCC_OscConfig+0x36e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x334>
 800212e:	4b6a      	ldr	r3, [pc, #424]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a69      	ldr	r2, [pc, #420]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6213      	str	r3, [r2, #32]
 800213a:	4b67      	ldr	r3, [pc, #412]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a66      	ldr	r2, [pc, #408]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	f023 0304 	bic.w	r3, r3, #4
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	e01c      	b.n	8002182 <HAL_RCC_OscConfig+0x36e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d10c      	bne.n	800216a <HAL_RCC_OscConfig+0x356>
 8002150:	4b61      	ldr	r3, [pc, #388]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a60      	ldr	r2, [pc, #384]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	4b5e      	ldr	r3, [pc, #376]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a5d      	ldr	r2, [pc, #372]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	e00b      	b.n	8002182 <HAL_RCC_OscConfig+0x36e>
 800216a:	4b5b      	ldr	r3, [pc, #364]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a5a      	ldr	r2, [pc, #360]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	4b58      	ldr	r3, [pc, #352]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a57      	ldr	r2, [pc, #348]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d015      	beq.n	80021b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7ff fa51 	bl	8001630 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7ff fa4d 	bl	8001630 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0b1      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a8:	4b4b      	ldr	r3, [pc, #300]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ee      	beq.n	8002192 <HAL_RCC_OscConfig+0x37e>
 80021b4:	e014      	b.n	80021e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7ff fa3b 	bl	8001630 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7ff fa37 	bl	8001630 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e09b      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d4:	4b40      	ldr	r3, [pc, #256]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ee      	bne.n	80021be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d105      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e6:	4b3c      	ldr	r3, [pc, #240]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4a3b      	ldr	r2, [pc, #236]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8087 	beq.w	800230a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021fc:	4b36      	ldr	r3, [pc, #216]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b08      	cmp	r3, #8
 8002206:	d061      	beq.n	80022cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d146      	bne.n	800229e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002210:	4b33      	ldr	r3, [pc, #204]	@ (80022e0 <HAL_RCC_OscConfig+0x4cc>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7ff fa0b 	bl	8001630 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221e:	f7ff fa07 	bl	8001630 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e06d      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002230:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002244:	d108      	bne.n	8002258 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002246:	4b24      	ldr	r3, [pc, #144]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4921      	ldr	r1, [pc, #132]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a19      	ldr	r1, [r3, #32]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	430b      	orrs	r3, r1
 800226a:	491b      	ldr	r1, [pc, #108]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <HAL_RCC_OscConfig+0x4cc>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7ff f9db 	bl	8001630 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff f9d7 	bl	8001630 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e03d      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x46a>
 800229c:	e035      	b.n	800230a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <HAL_RCC_OscConfig+0x4cc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff f9c4 	bl	8001630 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ac:	f7ff f9c0 	bl	8001630 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e026      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022be:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x498>
 80022ca:	e01e      	b.n	800230a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e019      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
 80022e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_RCC_OscConfig+0x500>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0d0      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b6a      	ldr	r3, [pc, #424]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d910      	bls.n	800235c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b67      	ldr	r3, [pc, #412]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 0207 	bic.w	r2, r3, #7
 8002342:	4965      	ldr	r1, [pc, #404]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b63      	ldr	r3, [pc, #396]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0b8      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002374:	4b59      	ldr	r3, [pc, #356]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a58      	ldr	r2, [pc, #352]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800237e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800238c:	4b53      	ldr	r3, [pc, #332]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a52      	ldr	r2, [pc, #328]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002396:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b50      	ldr	r3, [pc, #320]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	494d      	ldr	r1, [pc, #308]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d040      	beq.n	8002438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b47      	ldr	r3, [pc, #284]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d115      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e07f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	4b41      	ldr	r3, [pc, #260]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e073      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b3d      	ldr	r3, [pc, #244]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e06b      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4b39      	ldr	r3, [pc, #228]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4936      	ldr	r1, [pc, #216]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002408:	f7ff f912 	bl	8001630 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7ff f90e 	bl	8001630 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e053      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	4b2d      	ldr	r3, [pc, #180]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d1eb      	bne.n	8002410 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002438:	4b27      	ldr	r3, [pc, #156]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d210      	bcs.n	8002468 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 0207 	bic.w	r2, r3, #7
 800244e:	4922      	ldr	r1, [pc, #136]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b20      	ldr	r3, [pc, #128]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e032      	b.n	80024ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002474:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4916      	ldr	r1, [pc, #88]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002492:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	490e      	ldr	r1, [pc, #56]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024a6:	f000 f821 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	490a      	ldr	r1, [pc, #40]	@ (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	5ccb      	ldrb	r3, [r1, r3]
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	4a09      	ldr	r2, [pc, #36]	@ (80024e4 <HAL_RCC_ClockConfig+0x1cc>)
 80024c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024c2:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <HAL_RCC_ClockConfig+0x1d0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f870 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40021000 	.word	0x40021000
 80024e0:	08003634 	.word	0x08003634
 80024e4:	20000004 	.word	0x20000004
 80024e8:	20000008 	.word	0x20000008

080024ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002506:	4b1e      	ldr	r3, [pc, #120]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x94>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b04      	cmp	r3, #4
 8002514:	d002      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x30>
 8002516:	2b08      	cmp	r3, #8
 8002518:	d003      	beq.n	8002522 <HAL_RCC_GetSysClockFreq+0x36>
 800251a:	e027      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800251c:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x98>)
 800251e:	613b      	str	r3, [r7, #16]
      break;
 8002520:	e027      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	0c9b      	lsrs	r3, r3, #18
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	4a17      	ldr	r2, [pc, #92]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x9c>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d010      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800253a:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x94>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	0c5b      	lsrs	r3, r3, #17
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	4a11      	ldr	r2, [pc, #68]	@ (800258c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a0d      	ldr	r2, [pc, #52]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x98>)
 800254e:	fb03 f202 	mul.w	r2, r3, r2
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e004      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a0c      	ldr	r2, [pc, #48]	@ (8002590 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	613b      	str	r3, [r7, #16]
      break;
 800256a:	e002      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x98>)
 800256e:	613b      	str	r3, [r7, #16]
      break;
 8002570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002572:	693b      	ldr	r3, [r7, #16]
}
 8002574:	4618      	mov	r0, r3
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	007a1200 	.word	0x007a1200
 8002588:	0800364c 	.word	0x0800364c
 800258c:	0800365c 	.word	0x0800365c
 8002590:	003d0900 	.word	0x003d0900

08002594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002598:	4b02      	ldr	r3, [pc, #8]	@ (80025a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000004 	.word	0x20000004

080025a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025ac:	f7ff fff2 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4903      	ldr	r1, [pc, #12]	@ (80025cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08003644 	.word	0x08003644

080025d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025d4:	f7ff ffde 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	0adb      	lsrs	r3, r3, #11
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	4903      	ldr	r1, [pc, #12]	@ (80025f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08003644 	.word	0x08003644

080025f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002600:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <RCC_Delay+0x34>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <RCC_Delay+0x38>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0a5b      	lsrs	r3, r3, #9
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002614:	bf00      	nop
  }
  while (Delay --);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1e5a      	subs	r2, r3, #1
 800261a:	60fa      	str	r2, [r7, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f9      	bne.n	8002614 <RCC_Delay+0x1c>
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	20000004 	.word	0x20000004
 8002630:	10624dd3 	.word	0x10624dd3

08002634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e076      	b.n	8002734 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	2b00      	cmp	r3, #0
 800264c:	d108      	bne.n	8002660 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002656:	d009      	beq.n	800266c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	61da      	str	r2, [r3, #28]
 800265e:	e005      	b.n	800266c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fde2 	bl	8001250 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f0:	ea42 0103 	orr.w	r1, r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	0c1a      	lsrs	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f002 0204 	and.w	r2, r2, #4
 8002712:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002722:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e042      	b.n	80027d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fdbe 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	@ 0x24
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800277e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f9cf 	bl	8002b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	@ 0x28
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d175      	bne.n	80028e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_UART_Transmit+0x2c>
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e06e      	b.n	80028ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2221      	movs	r2, #33	@ 0x21
 8002816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800281a:	f7fe ff09 	bl	8001630 <HAL_GetTick>
 800281e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002834:	d108      	bne.n	8002848 <HAL_UART_Transmit+0x6c>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	e003      	b.n	8002850 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002850:	e02e      	b.n	80028b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	2180      	movs	r1, #128	@ 0x80
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f86d 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e03a      	b.n	80028ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10b      	bne.n	8002892 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002888:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	3302      	adds	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	e007      	b.n	80028a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	3301      	adds	r3, #1
 80028a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1cb      	bne.n	8002852 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2200      	movs	r2, #0
 80028c2:	2140      	movs	r1, #64	@ 0x40
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f839 	bl	800293c <UART_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e006      	b.n	80028ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
  }
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3720      	adds	r7, #32
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	4613      	mov	r3, r2
 80028fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b20      	cmp	r3, #32
 800290a:	d112      	bne.n	8002932 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_UART_Receive_IT+0x26>
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e00b      	b.n	8002934 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	461a      	mov	r2, r3
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f860 	bl	80029ee <UART_Start_Receive_IT>
 800292e:	4603      	mov	r3, r0
 8002930:	e000      	b.n	8002934 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002932:	2302      	movs	r3, #2
  }
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294c:	e03b      	b.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d037      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002956:	f7fe fe6b 	bl	8001630 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	429a      	cmp	r2, r3
 8002964:	d302      	bcc.n	800296c <UART_WaitOnFlagUntilTimeout+0x30>
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e03a      	b.n	80029e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d023      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b80      	cmp	r3, #128	@ 0x80
 8002982:	d020      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b40      	cmp	r3, #64	@ 0x40
 8002988:	d01d      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b08      	cmp	r3, #8
 8002996:	d116      	bne.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f856 	bl	8002a60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2208      	movs	r2, #8
 80029b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00f      	b.n	80029e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4013      	ands	r3, r2
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	bf0c      	ite	eq
 80029d6:	2301      	moveq	r3, #1
 80029d8:	2300      	movne	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d0b4      	beq.n	800294e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b085      	sub	sp, #20
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	4613      	mov	r3, r2
 80029fa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	88fa      	ldrh	r2, [r7, #6]
 8002a06:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	88fa      	ldrh	r2, [r7, #6]
 8002a0c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2222      	movs	r2, #34	@ 0x22
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a32:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0220 	orr.w	r2, r2, #32
 8002a52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b095      	sub	sp, #84	@ 0x54
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	330c      	adds	r3, #12
 8002a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a72:	e853 3f00 	ldrex	r3, [r3]
 8002a76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	330c      	adds	r3, #12
 8002a86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a88:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a90:	e841 2300 	strex	r3, r2, [r1]
 8002a94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e5      	bne.n	8002a68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3314      	adds	r3, #20
 8002aa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	e853 3f00 	ldrex	r3, [r3]
 8002aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3314      	adds	r3, #20
 8002aba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002abc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ac4:	e841 2300 	strex	r3, r2, [r1]
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e5      	bne.n	8002a9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d119      	bne.n	8002b0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	330c      	adds	r3, #12
 8002ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	e853 3f00 	ldrex	r3, [r3]
 8002ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f023 0310 	bic.w	r3, r3, #16
 8002aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	330c      	adds	r3, #12
 8002af6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002af8:	61ba      	str	r2, [r7, #24]
 8002afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afc:	6979      	ldr	r1, [r7, #20]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	e841 2300 	strex	r3, r2, [r1]
 8002b04:	613b      	str	r3, [r7, #16]
   return(result);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e5      	bne.n	8002ad8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b1a:	bf00      	nop
 8002b1c:	3754      	adds	r7, #84	@ 0x54
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002b5e:	f023 030c 	bic.w	r3, r3, #12
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2c      	ldr	r2, [pc, #176]	@ (8002c38 <UART_SetConfig+0x114>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d103      	bne.n	8002b94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b8c:	f7ff fd20 	bl	80025d0 <HAL_RCC_GetPCLK2Freq>
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	e002      	b.n	8002b9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b94:	f7ff fd08 	bl	80025a8 <HAL_RCC_GetPCLK1Freq>
 8002b98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009a      	lsls	r2, r3, #2
 8002ba4:	441a      	add	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	4a22      	ldr	r2, [pc, #136]	@ (8002c3c <UART_SetConfig+0x118>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	0119      	lsls	r1, r3, #4
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <UART_SetConfig+0x118>)
 8002bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	2064      	movs	r0, #100	@ 0x64
 8002bda:	fb00 f303 	mul.w	r3, r0, r3
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	3332      	adds	r3, #50	@ 0x32
 8002be4:	4a15      	ldr	r2, [pc, #84]	@ (8002c3c <UART_SetConfig+0x118>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bf0:	4419      	add	r1, r3
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009a      	lsls	r2, r3, #2
 8002bfc:	441a      	add	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c08:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <UART_SetConfig+0x118>)
 8002c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	2064      	movs	r0, #100	@ 0x64
 8002c12:	fb00 f303 	mul.w	r3, r0, r3
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	3332      	adds	r3, #50	@ 0x32
 8002c1c:	4a07      	ldr	r2, [pc, #28]	@ (8002c3c <UART_SetConfig+0x118>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	f003 020f 	and.w	r2, r3, #15
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	440a      	add	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	51eb851f 	.word	0x51eb851f

08002c40 <sniprintf>:
 8002c40:	b40c      	push	{r2, r3}
 8002c42:	b530      	push	{r4, r5, lr}
 8002c44:	4b18      	ldr	r3, [pc, #96]	@ (8002ca8 <sniprintf+0x68>)
 8002c46:	1e0c      	subs	r4, r1, #0
 8002c48:	681d      	ldr	r5, [r3, #0]
 8002c4a:	b09d      	sub	sp, #116	@ 0x74
 8002c4c:	da08      	bge.n	8002c60 <sniprintf+0x20>
 8002c4e:	238b      	movs	r3, #139	@ 0x8b
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	602b      	str	r3, [r5, #0]
 8002c56:	b01d      	add	sp, #116	@ 0x74
 8002c58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c5c:	b002      	add	sp, #8
 8002c5e:	4770      	bx	lr
 8002c60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002c64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002c6e:	bf0c      	ite	eq
 8002c70:	4623      	moveq	r3, r4
 8002c72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002c76:	9304      	str	r3, [sp, #16]
 8002c78:	9307      	str	r3, [sp, #28]
 8002c7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c7e:	9002      	str	r0, [sp, #8]
 8002c80:	9006      	str	r0, [sp, #24]
 8002c82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002c86:	4628      	mov	r0, r5
 8002c88:	ab21      	add	r3, sp, #132	@ 0x84
 8002c8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002c8c:	a902      	add	r1, sp, #8
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	f000 f992 	bl	8002fb8 <_svfiprintf_r>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	bfbc      	itt	lt
 8002c98:	238b      	movlt	r3, #139	@ 0x8b
 8002c9a:	602b      	strlt	r3, [r5, #0]
 8002c9c:	2c00      	cmp	r4, #0
 8002c9e:	d0da      	beq.n	8002c56 <sniprintf+0x16>
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	9b02      	ldr	r3, [sp, #8]
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e7d6      	b.n	8002c56 <sniprintf+0x16>
 8002ca8:	20000010 	.word	0x20000010

08002cac <memset>:
 8002cac:	4603      	mov	r3, r0
 8002cae:	4402      	add	r2, r0
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d100      	bne.n	8002cb6 <memset+0xa>
 8002cb4:	4770      	bx	lr
 8002cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cba:	e7f9      	b.n	8002cb0 <memset+0x4>

08002cbc <__errno>:
 8002cbc:	4b01      	ldr	r3, [pc, #4]	@ (8002cc4 <__errno+0x8>)
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000010 	.word	0x20000010

08002cc8 <__libc_init_array>:
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	2600      	movs	r6, #0
 8002ccc:	4d0c      	ldr	r5, [pc, #48]	@ (8002d00 <__libc_init_array+0x38>)
 8002cce:	4c0d      	ldr	r4, [pc, #52]	@ (8002d04 <__libc_init_array+0x3c>)
 8002cd0:	1b64      	subs	r4, r4, r5
 8002cd2:	10a4      	asrs	r4, r4, #2
 8002cd4:	42a6      	cmp	r6, r4
 8002cd6:	d109      	bne.n	8002cec <__libc_init_array+0x24>
 8002cd8:	f000 fc76 	bl	80035c8 <_init>
 8002cdc:	2600      	movs	r6, #0
 8002cde:	4d0a      	ldr	r5, [pc, #40]	@ (8002d08 <__libc_init_array+0x40>)
 8002ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8002d0c <__libc_init_array+0x44>)
 8002ce2:	1b64      	subs	r4, r4, r5
 8002ce4:	10a4      	asrs	r4, r4, #2
 8002ce6:	42a6      	cmp	r6, r4
 8002ce8:	d105      	bne.n	8002cf6 <__libc_init_array+0x2e>
 8002cea:	bd70      	pop	{r4, r5, r6, pc}
 8002cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf0:	4798      	blx	r3
 8002cf2:	3601      	adds	r6, #1
 8002cf4:	e7ee      	b.n	8002cd4 <__libc_init_array+0xc>
 8002cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cfa:	4798      	blx	r3
 8002cfc:	3601      	adds	r6, #1
 8002cfe:	e7f2      	b.n	8002ce6 <__libc_init_array+0x1e>
 8002d00:	0800369c 	.word	0x0800369c
 8002d04:	0800369c 	.word	0x0800369c
 8002d08:	0800369c 	.word	0x0800369c
 8002d0c:	080036a0 	.word	0x080036a0

08002d10 <__retarget_lock_acquire_recursive>:
 8002d10:	4770      	bx	lr

08002d12 <__retarget_lock_release_recursive>:
 8002d12:	4770      	bx	lr

08002d14 <_free_r>:
 8002d14:	b538      	push	{r3, r4, r5, lr}
 8002d16:	4605      	mov	r5, r0
 8002d18:	2900      	cmp	r1, #0
 8002d1a:	d040      	beq.n	8002d9e <_free_r+0x8a>
 8002d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d20:	1f0c      	subs	r4, r1, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bfb8      	it	lt
 8002d26:	18e4      	addlt	r4, r4, r3
 8002d28:	f000 f8de 	bl	8002ee8 <__malloc_lock>
 8002d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8002da0 <_free_r+0x8c>)
 8002d2e:	6813      	ldr	r3, [r2, #0]
 8002d30:	b933      	cbnz	r3, 8002d40 <_free_r+0x2c>
 8002d32:	6063      	str	r3, [r4, #4]
 8002d34:	6014      	str	r4, [r2, #0]
 8002d36:	4628      	mov	r0, r5
 8002d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d3c:	f000 b8da 	b.w	8002ef4 <__malloc_unlock>
 8002d40:	42a3      	cmp	r3, r4
 8002d42:	d908      	bls.n	8002d56 <_free_r+0x42>
 8002d44:	6820      	ldr	r0, [r4, #0]
 8002d46:	1821      	adds	r1, r4, r0
 8002d48:	428b      	cmp	r3, r1
 8002d4a:	bf01      	itttt	eq
 8002d4c:	6819      	ldreq	r1, [r3, #0]
 8002d4e:	685b      	ldreq	r3, [r3, #4]
 8002d50:	1809      	addeq	r1, r1, r0
 8002d52:	6021      	streq	r1, [r4, #0]
 8002d54:	e7ed      	b.n	8002d32 <_free_r+0x1e>
 8002d56:	461a      	mov	r2, r3
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	b10b      	cbz	r3, 8002d60 <_free_r+0x4c>
 8002d5c:	42a3      	cmp	r3, r4
 8002d5e:	d9fa      	bls.n	8002d56 <_free_r+0x42>
 8002d60:	6811      	ldr	r1, [r2, #0]
 8002d62:	1850      	adds	r0, r2, r1
 8002d64:	42a0      	cmp	r0, r4
 8002d66:	d10b      	bne.n	8002d80 <_free_r+0x6c>
 8002d68:	6820      	ldr	r0, [r4, #0]
 8002d6a:	4401      	add	r1, r0
 8002d6c:	1850      	adds	r0, r2, r1
 8002d6e:	4283      	cmp	r3, r0
 8002d70:	6011      	str	r1, [r2, #0]
 8002d72:	d1e0      	bne.n	8002d36 <_free_r+0x22>
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4408      	add	r0, r1
 8002d7a:	6010      	str	r0, [r2, #0]
 8002d7c:	6053      	str	r3, [r2, #4]
 8002d7e:	e7da      	b.n	8002d36 <_free_r+0x22>
 8002d80:	d902      	bls.n	8002d88 <_free_r+0x74>
 8002d82:	230c      	movs	r3, #12
 8002d84:	602b      	str	r3, [r5, #0]
 8002d86:	e7d6      	b.n	8002d36 <_free_r+0x22>
 8002d88:	6820      	ldr	r0, [r4, #0]
 8002d8a:	1821      	adds	r1, r4, r0
 8002d8c:	428b      	cmp	r3, r1
 8002d8e:	bf01      	itttt	eq
 8002d90:	6819      	ldreq	r1, [r3, #0]
 8002d92:	685b      	ldreq	r3, [r3, #4]
 8002d94:	1809      	addeq	r1, r1, r0
 8002d96:	6021      	streq	r1, [r4, #0]
 8002d98:	6063      	str	r3, [r4, #4]
 8002d9a:	6054      	str	r4, [r2, #4]
 8002d9c:	e7cb      	b.n	8002d36 <_free_r+0x22>
 8002d9e:	bd38      	pop	{r3, r4, r5, pc}
 8002da0:	20000398 	.word	0x20000398

08002da4 <sbrk_aligned>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	4e0f      	ldr	r6, [pc, #60]	@ (8002de4 <sbrk_aligned+0x40>)
 8002da8:	460c      	mov	r4, r1
 8002daa:	6831      	ldr	r1, [r6, #0]
 8002dac:	4605      	mov	r5, r0
 8002dae:	b911      	cbnz	r1, 8002db6 <sbrk_aligned+0x12>
 8002db0:	f000 fba8 	bl	8003504 <_sbrk_r>
 8002db4:	6030      	str	r0, [r6, #0]
 8002db6:	4621      	mov	r1, r4
 8002db8:	4628      	mov	r0, r5
 8002dba:	f000 fba3 	bl	8003504 <_sbrk_r>
 8002dbe:	1c43      	adds	r3, r0, #1
 8002dc0:	d103      	bne.n	8002dca <sbrk_aligned+0x26>
 8002dc2:	f04f 34ff 	mov.w	r4, #4294967295
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	bd70      	pop	{r4, r5, r6, pc}
 8002dca:	1cc4      	adds	r4, r0, #3
 8002dcc:	f024 0403 	bic.w	r4, r4, #3
 8002dd0:	42a0      	cmp	r0, r4
 8002dd2:	d0f8      	beq.n	8002dc6 <sbrk_aligned+0x22>
 8002dd4:	1a21      	subs	r1, r4, r0
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	f000 fb94 	bl	8003504 <_sbrk_r>
 8002ddc:	3001      	adds	r0, #1
 8002dde:	d1f2      	bne.n	8002dc6 <sbrk_aligned+0x22>
 8002de0:	e7ef      	b.n	8002dc2 <sbrk_aligned+0x1e>
 8002de2:	bf00      	nop
 8002de4:	20000394 	.word	0x20000394

08002de8 <_malloc_r>:
 8002de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dec:	1ccd      	adds	r5, r1, #3
 8002dee:	f025 0503 	bic.w	r5, r5, #3
 8002df2:	3508      	adds	r5, #8
 8002df4:	2d0c      	cmp	r5, #12
 8002df6:	bf38      	it	cc
 8002df8:	250c      	movcc	r5, #12
 8002dfa:	2d00      	cmp	r5, #0
 8002dfc:	4606      	mov	r6, r0
 8002dfe:	db01      	blt.n	8002e04 <_malloc_r+0x1c>
 8002e00:	42a9      	cmp	r1, r5
 8002e02:	d904      	bls.n	8002e0e <_malloc_r+0x26>
 8002e04:	230c      	movs	r3, #12
 8002e06:	6033      	str	r3, [r6, #0]
 8002e08:	2000      	movs	r0, #0
 8002e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ee4 <_malloc_r+0xfc>
 8002e12:	f000 f869 	bl	8002ee8 <__malloc_lock>
 8002e16:	f8d8 3000 	ldr.w	r3, [r8]
 8002e1a:	461c      	mov	r4, r3
 8002e1c:	bb44      	cbnz	r4, 8002e70 <_malloc_r+0x88>
 8002e1e:	4629      	mov	r1, r5
 8002e20:	4630      	mov	r0, r6
 8002e22:	f7ff ffbf 	bl	8002da4 <sbrk_aligned>
 8002e26:	1c43      	adds	r3, r0, #1
 8002e28:	4604      	mov	r4, r0
 8002e2a:	d158      	bne.n	8002ede <_malloc_r+0xf6>
 8002e2c:	f8d8 4000 	ldr.w	r4, [r8]
 8002e30:	4627      	mov	r7, r4
 8002e32:	2f00      	cmp	r7, #0
 8002e34:	d143      	bne.n	8002ebe <_malloc_r+0xd6>
 8002e36:	2c00      	cmp	r4, #0
 8002e38:	d04b      	beq.n	8002ed2 <_malloc_r+0xea>
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	4639      	mov	r1, r7
 8002e3e:	4630      	mov	r0, r6
 8002e40:	eb04 0903 	add.w	r9, r4, r3
 8002e44:	f000 fb5e 	bl	8003504 <_sbrk_r>
 8002e48:	4581      	cmp	r9, r0
 8002e4a:	d142      	bne.n	8002ed2 <_malloc_r+0xea>
 8002e4c:	6821      	ldr	r1, [r4, #0]
 8002e4e:	4630      	mov	r0, r6
 8002e50:	1a6d      	subs	r5, r5, r1
 8002e52:	4629      	mov	r1, r5
 8002e54:	f7ff ffa6 	bl	8002da4 <sbrk_aligned>
 8002e58:	3001      	adds	r0, #1
 8002e5a:	d03a      	beq.n	8002ed2 <_malloc_r+0xea>
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	442b      	add	r3, r5
 8002e60:	6023      	str	r3, [r4, #0]
 8002e62:	f8d8 3000 	ldr.w	r3, [r8]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	bb62      	cbnz	r2, 8002ec4 <_malloc_r+0xdc>
 8002e6a:	f8c8 7000 	str.w	r7, [r8]
 8002e6e:	e00f      	b.n	8002e90 <_malloc_r+0xa8>
 8002e70:	6822      	ldr	r2, [r4, #0]
 8002e72:	1b52      	subs	r2, r2, r5
 8002e74:	d420      	bmi.n	8002eb8 <_malloc_r+0xd0>
 8002e76:	2a0b      	cmp	r2, #11
 8002e78:	d917      	bls.n	8002eaa <_malloc_r+0xc2>
 8002e7a:	1961      	adds	r1, r4, r5
 8002e7c:	42a3      	cmp	r3, r4
 8002e7e:	6025      	str	r5, [r4, #0]
 8002e80:	bf18      	it	ne
 8002e82:	6059      	strne	r1, [r3, #4]
 8002e84:	6863      	ldr	r3, [r4, #4]
 8002e86:	bf08      	it	eq
 8002e88:	f8c8 1000 	streq.w	r1, [r8]
 8002e8c:	5162      	str	r2, [r4, r5]
 8002e8e:	604b      	str	r3, [r1, #4]
 8002e90:	4630      	mov	r0, r6
 8002e92:	f000 f82f 	bl	8002ef4 <__malloc_unlock>
 8002e96:	f104 000b 	add.w	r0, r4, #11
 8002e9a:	1d23      	adds	r3, r4, #4
 8002e9c:	f020 0007 	bic.w	r0, r0, #7
 8002ea0:	1ac2      	subs	r2, r0, r3
 8002ea2:	bf1c      	itt	ne
 8002ea4:	1a1b      	subne	r3, r3, r0
 8002ea6:	50a3      	strne	r3, [r4, r2]
 8002ea8:	e7af      	b.n	8002e0a <_malloc_r+0x22>
 8002eaa:	6862      	ldr	r2, [r4, #4]
 8002eac:	42a3      	cmp	r3, r4
 8002eae:	bf0c      	ite	eq
 8002eb0:	f8c8 2000 	streq.w	r2, [r8]
 8002eb4:	605a      	strne	r2, [r3, #4]
 8002eb6:	e7eb      	b.n	8002e90 <_malloc_r+0xa8>
 8002eb8:	4623      	mov	r3, r4
 8002eba:	6864      	ldr	r4, [r4, #4]
 8002ebc:	e7ae      	b.n	8002e1c <_malloc_r+0x34>
 8002ebe:	463c      	mov	r4, r7
 8002ec0:	687f      	ldr	r7, [r7, #4]
 8002ec2:	e7b6      	b.n	8002e32 <_malloc_r+0x4a>
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	42a3      	cmp	r3, r4
 8002eca:	d1fb      	bne.n	8002ec4 <_malloc_r+0xdc>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	6053      	str	r3, [r2, #4]
 8002ed0:	e7de      	b.n	8002e90 <_malloc_r+0xa8>
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	6033      	str	r3, [r6, #0]
 8002ed8:	f000 f80c 	bl	8002ef4 <__malloc_unlock>
 8002edc:	e794      	b.n	8002e08 <_malloc_r+0x20>
 8002ede:	6005      	str	r5, [r0, #0]
 8002ee0:	e7d6      	b.n	8002e90 <_malloc_r+0xa8>
 8002ee2:	bf00      	nop
 8002ee4:	20000398 	.word	0x20000398

08002ee8 <__malloc_lock>:
 8002ee8:	4801      	ldr	r0, [pc, #4]	@ (8002ef0 <__malloc_lock+0x8>)
 8002eea:	f7ff bf11 	b.w	8002d10 <__retarget_lock_acquire_recursive>
 8002eee:	bf00      	nop
 8002ef0:	20000390 	.word	0x20000390

08002ef4 <__malloc_unlock>:
 8002ef4:	4801      	ldr	r0, [pc, #4]	@ (8002efc <__malloc_unlock+0x8>)
 8002ef6:	f7ff bf0c 	b.w	8002d12 <__retarget_lock_release_recursive>
 8002efa:	bf00      	nop
 8002efc:	20000390 	.word	0x20000390

08002f00 <__ssputs_r>:
 8002f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f04:	461f      	mov	r7, r3
 8002f06:	688e      	ldr	r6, [r1, #8]
 8002f08:	4682      	mov	sl, r0
 8002f0a:	42be      	cmp	r6, r7
 8002f0c:	460c      	mov	r4, r1
 8002f0e:	4690      	mov	r8, r2
 8002f10:	680b      	ldr	r3, [r1, #0]
 8002f12:	d82d      	bhi.n	8002f70 <__ssputs_r+0x70>
 8002f14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002f1c:	d026      	beq.n	8002f6c <__ssputs_r+0x6c>
 8002f1e:	6965      	ldr	r5, [r4, #20]
 8002f20:	6909      	ldr	r1, [r1, #16]
 8002f22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f26:	eba3 0901 	sub.w	r9, r3, r1
 8002f2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f2e:	1c7b      	adds	r3, r7, #1
 8002f30:	444b      	add	r3, r9
 8002f32:	106d      	asrs	r5, r5, #1
 8002f34:	429d      	cmp	r5, r3
 8002f36:	bf38      	it	cc
 8002f38:	461d      	movcc	r5, r3
 8002f3a:	0553      	lsls	r3, r2, #21
 8002f3c:	d527      	bpl.n	8002f8e <__ssputs_r+0x8e>
 8002f3e:	4629      	mov	r1, r5
 8002f40:	f7ff ff52 	bl	8002de8 <_malloc_r>
 8002f44:	4606      	mov	r6, r0
 8002f46:	b360      	cbz	r0, 8002fa2 <__ssputs_r+0xa2>
 8002f48:	464a      	mov	r2, r9
 8002f4a:	6921      	ldr	r1, [r4, #16]
 8002f4c:	f000 faf8 	bl	8003540 <memcpy>
 8002f50:	89a3      	ldrh	r3, [r4, #12]
 8002f52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f5a:	81a3      	strh	r3, [r4, #12]
 8002f5c:	6126      	str	r6, [r4, #16]
 8002f5e:	444e      	add	r6, r9
 8002f60:	6026      	str	r6, [r4, #0]
 8002f62:	463e      	mov	r6, r7
 8002f64:	6165      	str	r5, [r4, #20]
 8002f66:	eba5 0509 	sub.w	r5, r5, r9
 8002f6a:	60a5      	str	r5, [r4, #8]
 8002f6c:	42be      	cmp	r6, r7
 8002f6e:	d900      	bls.n	8002f72 <__ssputs_r+0x72>
 8002f70:	463e      	mov	r6, r7
 8002f72:	4632      	mov	r2, r6
 8002f74:	4641      	mov	r1, r8
 8002f76:	6820      	ldr	r0, [r4, #0]
 8002f78:	f000 faaa 	bl	80034d0 <memmove>
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	68a3      	ldr	r3, [r4, #8]
 8002f80:	1b9b      	subs	r3, r3, r6
 8002f82:	60a3      	str	r3, [r4, #8]
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	4433      	add	r3, r6
 8002f88:	6023      	str	r3, [r4, #0]
 8002f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f8e:	462a      	mov	r2, r5
 8002f90:	f000 fae4 	bl	800355c <_realloc_r>
 8002f94:	4606      	mov	r6, r0
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d1e0      	bne.n	8002f5c <__ssputs_r+0x5c>
 8002f9a:	4650      	mov	r0, sl
 8002f9c:	6921      	ldr	r1, [r4, #16]
 8002f9e:	f7ff feb9 	bl	8002d14 <_free_r>
 8002fa2:	230c      	movs	r3, #12
 8002fa4:	f8ca 3000 	str.w	r3, [sl]
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	f04f 30ff 	mov.w	r0, #4294967295
 8002fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fb2:	81a3      	strh	r3, [r4, #12]
 8002fb4:	e7e9      	b.n	8002f8a <__ssputs_r+0x8a>
	...

08002fb8 <_svfiprintf_r>:
 8002fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fbc:	4698      	mov	r8, r3
 8002fbe:	898b      	ldrh	r3, [r1, #12]
 8002fc0:	4607      	mov	r7, r0
 8002fc2:	061b      	lsls	r3, r3, #24
 8002fc4:	460d      	mov	r5, r1
 8002fc6:	4614      	mov	r4, r2
 8002fc8:	b09d      	sub	sp, #116	@ 0x74
 8002fca:	d510      	bpl.n	8002fee <_svfiprintf_r+0x36>
 8002fcc:	690b      	ldr	r3, [r1, #16]
 8002fce:	b973      	cbnz	r3, 8002fee <_svfiprintf_r+0x36>
 8002fd0:	2140      	movs	r1, #64	@ 0x40
 8002fd2:	f7ff ff09 	bl	8002de8 <_malloc_r>
 8002fd6:	6028      	str	r0, [r5, #0]
 8002fd8:	6128      	str	r0, [r5, #16]
 8002fda:	b930      	cbnz	r0, 8002fea <_svfiprintf_r+0x32>
 8002fdc:	230c      	movs	r3, #12
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	b01d      	add	sp, #116	@ 0x74
 8002fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fea:	2340      	movs	r3, #64	@ 0x40
 8002fec:	616b      	str	r3, [r5, #20]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ff8:	2330      	movs	r3, #48	@ 0x30
 8002ffa:	f04f 0901 	mov.w	r9, #1
 8002ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003002:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800319c <_svfiprintf_r+0x1e4>
 8003006:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800300a:	4623      	mov	r3, r4
 800300c:	469a      	mov	sl, r3
 800300e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003012:	b10a      	cbz	r2, 8003018 <_svfiprintf_r+0x60>
 8003014:	2a25      	cmp	r2, #37	@ 0x25
 8003016:	d1f9      	bne.n	800300c <_svfiprintf_r+0x54>
 8003018:	ebba 0b04 	subs.w	fp, sl, r4
 800301c:	d00b      	beq.n	8003036 <_svfiprintf_r+0x7e>
 800301e:	465b      	mov	r3, fp
 8003020:	4622      	mov	r2, r4
 8003022:	4629      	mov	r1, r5
 8003024:	4638      	mov	r0, r7
 8003026:	f7ff ff6b 	bl	8002f00 <__ssputs_r>
 800302a:	3001      	adds	r0, #1
 800302c:	f000 80a7 	beq.w	800317e <_svfiprintf_r+0x1c6>
 8003030:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003032:	445a      	add	r2, fp
 8003034:	9209      	str	r2, [sp, #36]	@ 0x24
 8003036:	f89a 3000 	ldrb.w	r3, [sl]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 809f 	beq.w	800317e <_svfiprintf_r+0x1c6>
 8003040:	2300      	movs	r3, #0
 8003042:	f04f 32ff 	mov.w	r2, #4294967295
 8003046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800304a:	f10a 0a01 	add.w	sl, sl, #1
 800304e:	9304      	str	r3, [sp, #16]
 8003050:	9307      	str	r3, [sp, #28]
 8003052:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003056:	931a      	str	r3, [sp, #104]	@ 0x68
 8003058:	4654      	mov	r4, sl
 800305a:	2205      	movs	r2, #5
 800305c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003060:	484e      	ldr	r0, [pc, #312]	@ (800319c <_svfiprintf_r+0x1e4>)
 8003062:	f000 fa5f 	bl	8003524 <memchr>
 8003066:	9a04      	ldr	r2, [sp, #16]
 8003068:	b9d8      	cbnz	r0, 80030a2 <_svfiprintf_r+0xea>
 800306a:	06d0      	lsls	r0, r2, #27
 800306c:	bf44      	itt	mi
 800306e:	2320      	movmi	r3, #32
 8003070:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003074:	0711      	lsls	r1, r2, #28
 8003076:	bf44      	itt	mi
 8003078:	232b      	movmi	r3, #43	@ 0x2b
 800307a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800307e:	f89a 3000 	ldrb.w	r3, [sl]
 8003082:	2b2a      	cmp	r3, #42	@ 0x2a
 8003084:	d015      	beq.n	80030b2 <_svfiprintf_r+0xfa>
 8003086:	4654      	mov	r4, sl
 8003088:	2000      	movs	r0, #0
 800308a:	f04f 0c0a 	mov.w	ip, #10
 800308e:	9a07      	ldr	r2, [sp, #28]
 8003090:	4621      	mov	r1, r4
 8003092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003096:	3b30      	subs	r3, #48	@ 0x30
 8003098:	2b09      	cmp	r3, #9
 800309a:	d94b      	bls.n	8003134 <_svfiprintf_r+0x17c>
 800309c:	b1b0      	cbz	r0, 80030cc <_svfiprintf_r+0x114>
 800309e:	9207      	str	r2, [sp, #28]
 80030a0:	e014      	b.n	80030cc <_svfiprintf_r+0x114>
 80030a2:	eba0 0308 	sub.w	r3, r0, r8
 80030a6:	fa09 f303 	lsl.w	r3, r9, r3
 80030aa:	4313      	orrs	r3, r2
 80030ac:	46a2      	mov	sl, r4
 80030ae:	9304      	str	r3, [sp, #16]
 80030b0:	e7d2      	b.n	8003058 <_svfiprintf_r+0xa0>
 80030b2:	9b03      	ldr	r3, [sp, #12]
 80030b4:	1d19      	adds	r1, r3, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	9103      	str	r1, [sp, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bfbb      	ittet	lt
 80030be:	425b      	neglt	r3, r3
 80030c0:	f042 0202 	orrlt.w	r2, r2, #2
 80030c4:	9307      	strge	r3, [sp, #28]
 80030c6:	9307      	strlt	r3, [sp, #28]
 80030c8:	bfb8      	it	lt
 80030ca:	9204      	strlt	r2, [sp, #16]
 80030cc:	7823      	ldrb	r3, [r4, #0]
 80030ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80030d0:	d10a      	bne.n	80030e8 <_svfiprintf_r+0x130>
 80030d2:	7863      	ldrb	r3, [r4, #1]
 80030d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80030d6:	d132      	bne.n	800313e <_svfiprintf_r+0x186>
 80030d8:	9b03      	ldr	r3, [sp, #12]
 80030da:	3402      	adds	r4, #2
 80030dc:	1d1a      	adds	r2, r3, #4
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	9203      	str	r2, [sp, #12]
 80030e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030e6:	9305      	str	r3, [sp, #20]
 80030e8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80031a0 <_svfiprintf_r+0x1e8>
 80030ec:	2203      	movs	r2, #3
 80030ee:	4650      	mov	r0, sl
 80030f0:	7821      	ldrb	r1, [r4, #0]
 80030f2:	f000 fa17 	bl	8003524 <memchr>
 80030f6:	b138      	cbz	r0, 8003108 <_svfiprintf_r+0x150>
 80030f8:	2240      	movs	r2, #64	@ 0x40
 80030fa:	9b04      	ldr	r3, [sp, #16]
 80030fc:	eba0 000a 	sub.w	r0, r0, sl
 8003100:	4082      	lsls	r2, r0
 8003102:	4313      	orrs	r3, r2
 8003104:	3401      	adds	r4, #1
 8003106:	9304      	str	r3, [sp, #16]
 8003108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800310c:	2206      	movs	r2, #6
 800310e:	4825      	ldr	r0, [pc, #148]	@ (80031a4 <_svfiprintf_r+0x1ec>)
 8003110:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003114:	f000 fa06 	bl	8003524 <memchr>
 8003118:	2800      	cmp	r0, #0
 800311a:	d036      	beq.n	800318a <_svfiprintf_r+0x1d2>
 800311c:	4b22      	ldr	r3, [pc, #136]	@ (80031a8 <_svfiprintf_r+0x1f0>)
 800311e:	bb1b      	cbnz	r3, 8003168 <_svfiprintf_r+0x1b0>
 8003120:	9b03      	ldr	r3, [sp, #12]
 8003122:	3307      	adds	r3, #7
 8003124:	f023 0307 	bic.w	r3, r3, #7
 8003128:	3308      	adds	r3, #8
 800312a:	9303      	str	r3, [sp, #12]
 800312c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800312e:	4433      	add	r3, r6
 8003130:	9309      	str	r3, [sp, #36]	@ 0x24
 8003132:	e76a      	b.n	800300a <_svfiprintf_r+0x52>
 8003134:	460c      	mov	r4, r1
 8003136:	2001      	movs	r0, #1
 8003138:	fb0c 3202 	mla	r2, ip, r2, r3
 800313c:	e7a8      	b.n	8003090 <_svfiprintf_r+0xd8>
 800313e:	2300      	movs	r3, #0
 8003140:	f04f 0c0a 	mov.w	ip, #10
 8003144:	4619      	mov	r1, r3
 8003146:	3401      	adds	r4, #1
 8003148:	9305      	str	r3, [sp, #20]
 800314a:	4620      	mov	r0, r4
 800314c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003150:	3a30      	subs	r2, #48	@ 0x30
 8003152:	2a09      	cmp	r2, #9
 8003154:	d903      	bls.n	800315e <_svfiprintf_r+0x1a6>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0c6      	beq.n	80030e8 <_svfiprintf_r+0x130>
 800315a:	9105      	str	r1, [sp, #20]
 800315c:	e7c4      	b.n	80030e8 <_svfiprintf_r+0x130>
 800315e:	4604      	mov	r4, r0
 8003160:	2301      	movs	r3, #1
 8003162:	fb0c 2101 	mla	r1, ip, r1, r2
 8003166:	e7f0      	b.n	800314a <_svfiprintf_r+0x192>
 8003168:	ab03      	add	r3, sp, #12
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	462a      	mov	r2, r5
 800316e:	4638      	mov	r0, r7
 8003170:	4b0e      	ldr	r3, [pc, #56]	@ (80031ac <_svfiprintf_r+0x1f4>)
 8003172:	a904      	add	r1, sp, #16
 8003174:	f3af 8000 	nop.w
 8003178:	1c42      	adds	r2, r0, #1
 800317a:	4606      	mov	r6, r0
 800317c:	d1d6      	bne.n	800312c <_svfiprintf_r+0x174>
 800317e:	89ab      	ldrh	r3, [r5, #12]
 8003180:	065b      	lsls	r3, r3, #25
 8003182:	f53f af2d 	bmi.w	8002fe0 <_svfiprintf_r+0x28>
 8003186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003188:	e72c      	b.n	8002fe4 <_svfiprintf_r+0x2c>
 800318a:	ab03      	add	r3, sp, #12
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	462a      	mov	r2, r5
 8003190:	4638      	mov	r0, r7
 8003192:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <_svfiprintf_r+0x1f4>)
 8003194:	a904      	add	r1, sp, #16
 8003196:	f000 f87d 	bl	8003294 <_printf_i>
 800319a:	e7ed      	b.n	8003178 <_svfiprintf_r+0x1c0>
 800319c:	0800365e 	.word	0x0800365e
 80031a0:	08003664 	.word	0x08003664
 80031a4:	08003668 	.word	0x08003668
 80031a8:	00000000 	.word	0x00000000
 80031ac:	08002f01 	.word	0x08002f01

080031b0 <_printf_common>:
 80031b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031b4:	4616      	mov	r6, r2
 80031b6:	4698      	mov	r8, r3
 80031b8:	688a      	ldr	r2, [r1, #8]
 80031ba:	690b      	ldr	r3, [r1, #16]
 80031bc:	4607      	mov	r7, r0
 80031be:	4293      	cmp	r3, r2
 80031c0:	bfb8      	it	lt
 80031c2:	4613      	movlt	r3, r2
 80031c4:	6033      	str	r3, [r6, #0]
 80031c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031ca:	460c      	mov	r4, r1
 80031cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031d0:	b10a      	cbz	r2, 80031d6 <_printf_common+0x26>
 80031d2:	3301      	adds	r3, #1
 80031d4:	6033      	str	r3, [r6, #0]
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	0699      	lsls	r1, r3, #26
 80031da:	bf42      	ittt	mi
 80031dc:	6833      	ldrmi	r3, [r6, #0]
 80031de:	3302      	addmi	r3, #2
 80031e0:	6033      	strmi	r3, [r6, #0]
 80031e2:	6825      	ldr	r5, [r4, #0]
 80031e4:	f015 0506 	ands.w	r5, r5, #6
 80031e8:	d106      	bne.n	80031f8 <_printf_common+0x48>
 80031ea:	f104 0a19 	add.w	sl, r4, #25
 80031ee:	68e3      	ldr	r3, [r4, #12]
 80031f0:	6832      	ldr	r2, [r6, #0]
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	42ab      	cmp	r3, r5
 80031f6:	dc2b      	bgt.n	8003250 <_printf_common+0xa0>
 80031f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031fc:	6822      	ldr	r2, [r4, #0]
 80031fe:	3b00      	subs	r3, #0
 8003200:	bf18      	it	ne
 8003202:	2301      	movne	r3, #1
 8003204:	0692      	lsls	r2, r2, #26
 8003206:	d430      	bmi.n	800326a <_printf_common+0xba>
 8003208:	4641      	mov	r1, r8
 800320a:	4638      	mov	r0, r7
 800320c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003210:	47c8      	blx	r9
 8003212:	3001      	adds	r0, #1
 8003214:	d023      	beq.n	800325e <_printf_common+0xae>
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	6922      	ldr	r2, [r4, #16]
 800321a:	f003 0306 	and.w	r3, r3, #6
 800321e:	2b04      	cmp	r3, #4
 8003220:	bf14      	ite	ne
 8003222:	2500      	movne	r5, #0
 8003224:	6833      	ldreq	r3, [r6, #0]
 8003226:	f04f 0600 	mov.w	r6, #0
 800322a:	bf08      	it	eq
 800322c:	68e5      	ldreq	r5, [r4, #12]
 800322e:	f104 041a 	add.w	r4, r4, #26
 8003232:	bf08      	it	eq
 8003234:	1aed      	subeq	r5, r5, r3
 8003236:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800323a:	bf08      	it	eq
 800323c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003240:	4293      	cmp	r3, r2
 8003242:	bfc4      	itt	gt
 8003244:	1a9b      	subgt	r3, r3, r2
 8003246:	18ed      	addgt	r5, r5, r3
 8003248:	42b5      	cmp	r5, r6
 800324a:	d11a      	bne.n	8003282 <_printf_common+0xd2>
 800324c:	2000      	movs	r0, #0
 800324e:	e008      	b.n	8003262 <_printf_common+0xb2>
 8003250:	2301      	movs	r3, #1
 8003252:	4652      	mov	r2, sl
 8003254:	4641      	mov	r1, r8
 8003256:	4638      	mov	r0, r7
 8003258:	47c8      	blx	r9
 800325a:	3001      	adds	r0, #1
 800325c:	d103      	bne.n	8003266 <_printf_common+0xb6>
 800325e:	f04f 30ff 	mov.w	r0, #4294967295
 8003262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003266:	3501      	adds	r5, #1
 8003268:	e7c1      	b.n	80031ee <_printf_common+0x3e>
 800326a:	2030      	movs	r0, #48	@ 0x30
 800326c:	18e1      	adds	r1, r4, r3
 800326e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003278:	4422      	add	r2, r4
 800327a:	3302      	adds	r3, #2
 800327c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003280:	e7c2      	b.n	8003208 <_printf_common+0x58>
 8003282:	2301      	movs	r3, #1
 8003284:	4622      	mov	r2, r4
 8003286:	4641      	mov	r1, r8
 8003288:	4638      	mov	r0, r7
 800328a:	47c8      	blx	r9
 800328c:	3001      	adds	r0, #1
 800328e:	d0e6      	beq.n	800325e <_printf_common+0xae>
 8003290:	3601      	adds	r6, #1
 8003292:	e7d9      	b.n	8003248 <_printf_common+0x98>

08003294 <_printf_i>:
 8003294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003298:	7e0f      	ldrb	r7, [r1, #24]
 800329a:	4691      	mov	r9, r2
 800329c:	2f78      	cmp	r7, #120	@ 0x78
 800329e:	4680      	mov	r8, r0
 80032a0:	460c      	mov	r4, r1
 80032a2:	469a      	mov	sl, r3
 80032a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80032a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80032aa:	d807      	bhi.n	80032bc <_printf_i+0x28>
 80032ac:	2f62      	cmp	r7, #98	@ 0x62
 80032ae:	d80a      	bhi.n	80032c6 <_printf_i+0x32>
 80032b0:	2f00      	cmp	r7, #0
 80032b2:	f000 80d1 	beq.w	8003458 <_printf_i+0x1c4>
 80032b6:	2f58      	cmp	r7, #88	@ 0x58
 80032b8:	f000 80b8 	beq.w	800342c <_printf_i+0x198>
 80032bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032c4:	e03a      	b.n	800333c <_printf_i+0xa8>
 80032c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032ca:	2b15      	cmp	r3, #21
 80032cc:	d8f6      	bhi.n	80032bc <_printf_i+0x28>
 80032ce:	a101      	add	r1, pc, #4	@ (adr r1, 80032d4 <_printf_i+0x40>)
 80032d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032d4:	0800332d 	.word	0x0800332d
 80032d8:	08003341 	.word	0x08003341
 80032dc:	080032bd 	.word	0x080032bd
 80032e0:	080032bd 	.word	0x080032bd
 80032e4:	080032bd 	.word	0x080032bd
 80032e8:	080032bd 	.word	0x080032bd
 80032ec:	08003341 	.word	0x08003341
 80032f0:	080032bd 	.word	0x080032bd
 80032f4:	080032bd 	.word	0x080032bd
 80032f8:	080032bd 	.word	0x080032bd
 80032fc:	080032bd 	.word	0x080032bd
 8003300:	0800343f 	.word	0x0800343f
 8003304:	0800336b 	.word	0x0800336b
 8003308:	080033f9 	.word	0x080033f9
 800330c:	080032bd 	.word	0x080032bd
 8003310:	080032bd 	.word	0x080032bd
 8003314:	08003461 	.word	0x08003461
 8003318:	080032bd 	.word	0x080032bd
 800331c:	0800336b 	.word	0x0800336b
 8003320:	080032bd 	.word	0x080032bd
 8003324:	080032bd 	.word	0x080032bd
 8003328:	08003401 	.word	0x08003401
 800332c:	6833      	ldr	r3, [r6, #0]
 800332e:	1d1a      	adds	r2, r3, #4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6032      	str	r2, [r6, #0]
 8003334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800333c:	2301      	movs	r3, #1
 800333e:	e09c      	b.n	800347a <_printf_i+0x1e6>
 8003340:	6833      	ldr	r3, [r6, #0]
 8003342:	6820      	ldr	r0, [r4, #0]
 8003344:	1d19      	adds	r1, r3, #4
 8003346:	6031      	str	r1, [r6, #0]
 8003348:	0606      	lsls	r6, r0, #24
 800334a:	d501      	bpl.n	8003350 <_printf_i+0xbc>
 800334c:	681d      	ldr	r5, [r3, #0]
 800334e:	e003      	b.n	8003358 <_printf_i+0xc4>
 8003350:	0645      	lsls	r5, r0, #25
 8003352:	d5fb      	bpl.n	800334c <_printf_i+0xb8>
 8003354:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003358:	2d00      	cmp	r5, #0
 800335a:	da03      	bge.n	8003364 <_printf_i+0xd0>
 800335c:	232d      	movs	r3, #45	@ 0x2d
 800335e:	426d      	negs	r5, r5
 8003360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003364:	230a      	movs	r3, #10
 8003366:	4858      	ldr	r0, [pc, #352]	@ (80034c8 <_printf_i+0x234>)
 8003368:	e011      	b.n	800338e <_printf_i+0xfa>
 800336a:	6821      	ldr	r1, [r4, #0]
 800336c:	6833      	ldr	r3, [r6, #0]
 800336e:	0608      	lsls	r0, r1, #24
 8003370:	f853 5b04 	ldr.w	r5, [r3], #4
 8003374:	d402      	bmi.n	800337c <_printf_i+0xe8>
 8003376:	0649      	lsls	r1, r1, #25
 8003378:	bf48      	it	mi
 800337a:	b2ad      	uxthmi	r5, r5
 800337c:	2f6f      	cmp	r7, #111	@ 0x6f
 800337e:	6033      	str	r3, [r6, #0]
 8003380:	bf14      	ite	ne
 8003382:	230a      	movne	r3, #10
 8003384:	2308      	moveq	r3, #8
 8003386:	4850      	ldr	r0, [pc, #320]	@ (80034c8 <_printf_i+0x234>)
 8003388:	2100      	movs	r1, #0
 800338a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800338e:	6866      	ldr	r6, [r4, #4]
 8003390:	2e00      	cmp	r6, #0
 8003392:	60a6      	str	r6, [r4, #8]
 8003394:	db05      	blt.n	80033a2 <_printf_i+0x10e>
 8003396:	6821      	ldr	r1, [r4, #0]
 8003398:	432e      	orrs	r6, r5
 800339a:	f021 0104 	bic.w	r1, r1, #4
 800339e:	6021      	str	r1, [r4, #0]
 80033a0:	d04b      	beq.n	800343a <_printf_i+0x1a6>
 80033a2:	4616      	mov	r6, r2
 80033a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80033a8:	fb03 5711 	mls	r7, r3, r1, r5
 80033ac:	5dc7      	ldrb	r7, [r0, r7]
 80033ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033b2:	462f      	mov	r7, r5
 80033b4:	42bb      	cmp	r3, r7
 80033b6:	460d      	mov	r5, r1
 80033b8:	d9f4      	bls.n	80033a4 <_printf_i+0x110>
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d10b      	bne.n	80033d6 <_printf_i+0x142>
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	07df      	lsls	r7, r3, #31
 80033c2:	d508      	bpl.n	80033d6 <_printf_i+0x142>
 80033c4:	6923      	ldr	r3, [r4, #16]
 80033c6:	6861      	ldr	r1, [r4, #4]
 80033c8:	4299      	cmp	r1, r3
 80033ca:	bfde      	ittt	le
 80033cc:	2330      	movle	r3, #48	@ 0x30
 80033ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033d6:	1b92      	subs	r2, r2, r6
 80033d8:	6122      	str	r2, [r4, #16]
 80033da:	464b      	mov	r3, r9
 80033dc:	4621      	mov	r1, r4
 80033de:	4640      	mov	r0, r8
 80033e0:	f8cd a000 	str.w	sl, [sp]
 80033e4:	aa03      	add	r2, sp, #12
 80033e6:	f7ff fee3 	bl	80031b0 <_printf_common>
 80033ea:	3001      	adds	r0, #1
 80033ec:	d14a      	bne.n	8003484 <_printf_i+0x1f0>
 80033ee:	f04f 30ff 	mov.w	r0, #4294967295
 80033f2:	b004      	add	sp, #16
 80033f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	f043 0320 	orr.w	r3, r3, #32
 80033fe:	6023      	str	r3, [r4, #0]
 8003400:	2778      	movs	r7, #120	@ 0x78
 8003402:	4832      	ldr	r0, [pc, #200]	@ (80034cc <_printf_i+0x238>)
 8003404:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	6831      	ldr	r1, [r6, #0]
 800340c:	061f      	lsls	r7, r3, #24
 800340e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003412:	d402      	bmi.n	800341a <_printf_i+0x186>
 8003414:	065f      	lsls	r7, r3, #25
 8003416:	bf48      	it	mi
 8003418:	b2ad      	uxthmi	r5, r5
 800341a:	6031      	str	r1, [r6, #0]
 800341c:	07d9      	lsls	r1, r3, #31
 800341e:	bf44      	itt	mi
 8003420:	f043 0320 	orrmi.w	r3, r3, #32
 8003424:	6023      	strmi	r3, [r4, #0]
 8003426:	b11d      	cbz	r5, 8003430 <_printf_i+0x19c>
 8003428:	2310      	movs	r3, #16
 800342a:	e7ad      	b.n	8003388 <_printf_i+0xf4>
 800342c:	4826      	ldr	r0, [pc, #152]	@ (80034c8 <_printf_i+0x234>)
 800342e:	e7e9      	b.n	8003404 <_printf_i+0x170>
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	f023 0320 	bic.w	r3, r3, #32
 8003436:	6023      	str	r3, [r4, #0]
 8003438:	e7f6      	b.n	8003428 <_printf_i+0x194>
 800343a:	4616      	mov	r6, r2
 800343c:	e7bd      	b.n	80033ba <_printf_i+0x126>
 800343e:	6833      	ldr	r3, [r6, #0]
 8003440:	6825      	ldr	r5, [r4, #0]
 8003442:	1d18      	adds	r0, r3, #4
 8003444:	6961      	ldr	r1, [r4, #20]
 8003446:	6030      	str	r0, [r6, #0]
 8003448:	062e      	lsls	r6, r5, #24
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	d501      	bpl.n	8003452 <_printf_i+0x1be>
 800344e:	6019      	str	r1, [r3, #0]
 8003450:	e002      	b.n	8003458 <_printf_i+0x1c4>
 8003452:	0668      	lsls	r0, r5, #25
 8003454:	d5fb      	bpl.n	800344e <_printf_i+0x1ba>
 8003456:	8019      	strh	r1, [r3, #0]
 8003458:	2300      	movs	r3, #0
 800345a:	4616      	mov	r6, r2
 800345c:	6123      	str	r3, [r4, #16]
 800345e:	e7bc      	b.n	80033da <_printf_i+0x146>
 8003460:	6833      	ldr	r3, [r6, #0]
 8003462:	2100      	movs	r1, #0
 8003464:	1d1a      	adds	r2, r3, #4
 8003466:	6032      	str	r2, [r6, #0]
 8003468:	681e      	ldr	r6, [r3, #0]
 800346a:	6862      	ldr	r2, [r4, #4]
 800346c:	4630      	mov	r0, r6
 800346e:	f000 f859 	bl	8003524 <memchr>
 8003472:	b108      	cbz	r0, 8003478 <_printf_i+0x1e4>
 8003474:	1b80      	subs	r0, r0, r6
 8003476:	6060      	str	r0, [r4, #4]
 8003478:	6863      	ldr	r3, [r4, #4]
 800347a:	6123      	str	r3, [r4, #16]
 800347c:	2300      	movs	r3, #0
 800347e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003482:	e7aa      	b.n	80033da <_printf_i+0x146>
 8003484:	4632      	mov	r2, r6
 8003486:	4649      	mov	r1, r9
 8003488:	4640      	mov	r0, r8
 800348a:	6923      	ldr	r3, [r4, #16]
 800348c:	47d0      	blx	sl
 800348e:	3001      	adds	r0, #1
 8003490:	d0ad      	beq.n	80033ee <_printf_i+0x15a>
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	079b      	lsls	r3, r3, #30
 8003496:	d413      	bmi.n	80034c0 <_printf_i+0x22c>
 8003498:	68e0      	ldr	r0, [r4, #12]
 800349a:	9b03      	ldr	r3, [sp, #12]
 800349c:	4298      	cmp	r0, r3
 800349e:	bfb8      	it	lt
 80034a0:	4618      	movlt	r0, r3
 80034a2:	e7a6      	b.n	80033f2 <_printf_i+0x15e>
 80034a4:	2301      	movs	r3, #1
 80034a6:	4632      	mov	r2, r6
 80034a8:	4649      	mov	r1, r9
 80034aa:	4640      	mov	r0, r8
 80034ac:	47d0      	blx	sl
 80034ae:	3001      	adds	r0, #1
 80034b0:	d09d      	beq.n	80033ee <_printf_i+0x15a>
 80034b2:	3501      	adds	r5, #1
 80034b4:	68e3      	ldr	r3, [r4, #12]
 80034b6:	9903      	ldr	r1, [sp, #12]
 80034b8:	1a5b      	subs	r3, r3, r1
 80034ba:	42ab      	cmp	r3, r5
 80034bc:	dcf2      	bgt.n	80034a4 <_printf_i+0x210>
 80034be:	e7eb      	b.n	8003498 <_printf_i+0x204>
 80034c0:	2500      	movs	r5, #0
 80034c2:	f104 0619 	add.w	r6, r4, #25
 80034c6:	e7f5      	b.n	80034b4 <_printf_i+0x220>
 80034c8:	0800366f 	.word	0x0800366f
 80034cc:	08003680 	.word	0x08003680

080034d0 <memmove>:
 80034d0:	4288      	cmp	r0, r1
 80034d2:	b510      	push	{r4, lr}
 80034d4:	eb01 0402 	add.w	r4, r1, r2
 80034d8:	d902      	bls.n	80034e0 <memmove+0x10>
 80034da:	4284      	cmp	r4, r0
 80034dc:	4623      	mov	r3, r4
 80034de:	d807      	bhi.n	80034f0 <memmove+0x20>
 80034e0:	1e43      	subs	r3, r0, #1
 80034e2:	42a1      	cmp	r1, r4
 80034e4:	d008      	beq.n	80034f8 <memmove+0x28>
 80034e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034ee:	e7f8      	b.n	80034e2 <memmove+0x12>
 80034f0:	4601      	mov	r1, r0
 80034f2:	4402      	add	r2, r0
 80034f4:	428a      	cmp	r2, r1
 80034f6:	d100      	bne.n	80034fa <memmove+0x2a>
 80034f8:	bd10      	pop	{r4, pc}
 80034fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003502:	e7f7      	b.n	80034f4 <memmove+0x24>

08003504 <_sbrk_r>:
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	2300      	movs	r3, #0
 8003508:	4d05      	ldr	r5, [pc, #20]	@ (8003520 <_sbrk_r+0x1c>)
 800350a:	4604      	mov	r4, r0
 800350c:	4608      	mov	r0, r1
 800350e:	602b      	str	r3, [r5, #0]
 8003510:	f7fd ffd4 	bl	80014bc <_sbrk>
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	d102      	bne.n	800351e <_sbrk_r+0x1a>
 8003518:	682b      	ldr	r3, [r5, #0]
 800351a:	b103      	cbz	r3, 800351e <_sbrk_r+0x1a>
 800351c:	6023      	str	r3, [r4, #0]
 800351e:	bd38      	pop	{r3, r4, r5, pc}
 8003520:	2000038c 	.word	0x2000038c

08003524 <memchr>:
 8003524:	4603      	mov	r3, r0
 8003526:	b510      	push	{r4, lr}
 8003528:	b2c9      	uxtb	r1, r1
 800352a:	4402      	add	r2, r0
 800352c:	4293      	cmp	r3, r2
 800352e:	4618      	mov	r0, r3
 8003530:	d101      	bne.n	8003536 <memchr+0x12>
 8003532:	2000      	movs	r0, #0
 8003534:	e003      	b.n	800353e <memchr+0x1a>
 8003536:	7804      	ldrb	r4, [r0, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	428c      	cmp	r4, r1
 800353c:	d1f6      	bne.n	800352c <memchr+0x8>
 800353e:	bd10      	pop	{r4, pc}

08003540 <memcpy>:
 8003540:	440a      	add	r2, r1
 8003542:	4291      	cmp	r1, r2
 8003544:	f100 33ff 	add.w	r3, r0, #4294967295
 8003548:	d100      	bne.n	800354c <memcpy+0xc>
 800354a:	4770      	bx	lr
 800354c:	b510      	push	{r4, lr}
 800354e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003552:	4291      	cmp	r1, r2
 8003554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003558:	d1f9      	bne.n	800354e <memcpy+0xe>
 800355a:	bd10      	pop	{r4, pc}

0800355c <_realloc_r>:
 800355c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003560:	4607      	mov	r7, r0
 8003562:	4614      	mov	r4, r2
 8003564:	460d      	mov	r5, r1
 8003566:	b921      	cbnz	r1, 8003572 <_realloc_r+0x16>
 8003568:	4611      	mov	r1, r2
 800356a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800356e:	f7ff bc3b 	b.w	8002de8 <_malloc_r>
 8003572:	b92a      	cbnz	r2, 8003580 <_realloc_r+0x24>
 8003574:	f7ff fbce 	bl	8002d14 <_free_r>
 8003578:	4625      	mov	r5, r4
 800357a:	4628      	mov	r0, r5
 800357c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003580:	f000 f81a 	bl	80035b8 <_malloc_usable_size_r>
 8003584:	4284      	cmp	r4, r0
 8003586:	4606      	mov	r6, r0
 8003588:	d802      	bhi.n	8003590 <_realloc_r+0x34>
 800358a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800358e:	d8f4      	bhi.n	800357a <_realloc_r+0x1e>
 8003590:	4621      	mov	r1, r4
 8003592:	4638      	mov	r0, r7
 8003594:	f7ff fc28 	bl	8002de8 <_malloc_r>
 8003598:	4680      	mov	r8, r0
 800359a:	b908      	cbnz	r0, 80035a0 <_realloc_r+0x44>
 800359c:	4645      	mov	r5, r8
 800359e:	e7ec      	b.n	800357a <_realloc_r+0x1e>
 80035a0:	42b4      	cmp	r4, r6
 80035a2:	4622      	mov	r2, r4
 80035a4:	4629      	mov	r1, r5
 80035a6:	bf28      	it	cs
 80035a8:	4632      	movcs	r2, r6
 80035aa:	f7ff ffc9 	bl	8003540 <memcpy>
 80035ae:	4629      	mov	r1, r5
 80035b0:	4638      	mov	r0, r7
 80035b2:	f7ff fbaf 	bl	8002d14 <_free_r>
 80035b6:	e7f1      	b.n	800359c <_realloc_r+0x40>

080035b8 <_malloc_usable_size_r>:
 80035b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035bc:	1f18      	subs	r0, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	bfbc      	itt	lt
 80035c2:	580b      	ldrlt	r3, [r1, r0]
 80035c4:	18c0      	addlt	r0, r0, r3
 80035c6:	4770      	bx	lr

080035c8 <_init>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	bf00      	nop
 80035cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ce:	bc08      	pop	{r3}
 80035d0:	469e      	mov	lr, r3
 80035d2:	4770      	bx	lr

080035d4 <_fini>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	bf00      	nop
 80035d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035da:	bc08      	pop	{r3}
 80035dc:	469e      	mov	lr, r3
 80035de:	4770      	bx	lr
