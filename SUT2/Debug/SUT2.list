
SUT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007218  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08007328  08007328  00008328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c4  080076c4  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080076c4  080076c4  000086c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076cc  080076cc  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076cc  080076cc  000086cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076d0  080076d0  000086d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080076d4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  200001d4  080078a8  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  080078a8  000096e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b49  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023af  00000000  00000000  00019d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0001c0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0c  00000000  00000000  0001d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190c0  00000000  00000000  0001e0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cec  00000000  00000000  00037184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090860  00000000  00000000  0004ae70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db6d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d4c  00000000  00000000  000db714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e1460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007310 	.word	0x08007310

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007310 	.word	0x08007310

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f001 f8aa 	bl	800218c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f84e 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f000 f9e4 	bl	8001408 <MX_GPIO_Init>
  MX_DMA_Init();
 8001040:	f000 f9c4 	bl	80013cc <MX_DMA_Init>
  MX_I2C1_Init();
 8001044:	f000 f88e 	bl	8001164 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001048:	f000 f8ba 	bl	80011c0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800104c:	f000 f940 	bl	80012d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001050:	f000 f968 	bl	8001324 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001054:	f000 f990 	bl	8001378 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001058:	f000 f8e8 	bl	800122c <MX_TIM1_Init>
  MX_TIM2_Init();
 800105c:	f000 fb94 	bl	8001788 <MX_TIM2_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001060:	b662      	cpsie	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN 2 */
  // Enable global interrupts
  __enable_irq();
  
  // Start interrupt-driven UART reception on UART1
  HAL_UART_Receive_IT(&huart1, &incoming_buffer[buffer_index], 1);
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <main+0x90>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <main+0x94>)
 800106c:	4413      	add	r3, r2
 800106e:	2201      	movs	r2, #1
 8001070:	4619      	mov	r1, r3
 8001072:	4815      	ldr	r0, [pc, #84]	@ (80010c8 <main+0x98>)
 8001074:	f002 ff8f 	bl	8003f96 <HAL_UART_Receive_IT>

  // Configure NVIC for TIM2 interrupt
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2101      	movs	r1, #1
 800107c:	201c      	movs	r0, #28
 800107e:	f001 f9be 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001082:	201c      	movs	r0, #28
 8001084:	f001 f9d7 	bl	8002436 <HAL_NVIC_EnableIRQ>
  
  // Configure NVIC for UART1 interrupt
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2025      	movs	r0, #37	@ 0x25
 800108e:	f001 f9b6 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001092:	2025      	movs	r0, #37	@ 0x25
 8001094:	f001 f9cf 	bl	8002436 <HAL_NVIC_EnableIRQ>
  
  // Start timer interrupt (every 5ms for better performance)
  HAL_TIM_Base_Start_IT(&htim2);
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <main+0x9c>)
 800109a:	f002 fba7 	bl	80037ec <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Check if we have received data
    if (packet_received) {
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <main+0xa0>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0fb      	beq.n	800109e <main+0x6e>
      packet_received = 0;
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <main+0xa0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]

      // Process the received packet
      ParseTelemetryPacket(rx_buffer);
 80010ac:	4809      	ldr	r0, [pc, #36]	@ (80010d4 <main+0xa4>)
 80010ae:	f000 f9d9 	bl	8001464 <ParseTelemetryPacket>
      // Apply filtering to telemetry values
      ApplyFiltering();
 80010b2:	f000 fcdd 	bl	8001a70 <ApplyFiltering>
      // Update status based on telemetry data
      UpdateStatusFromTelemetry();
 80010b6:	f000 fbb5 	bl	8001824 <UpdateStatusFromTelemetry>
      // Send status message instead of telemetry data
      SendStatusMessage();
 80010ba:	f000 fc93 	bl	80019e4 <SendStatusMessage>
    if (packet_received) {
 80010be:	e7ee      	b.n	800109e <main+0x6e>
 80010c0:	200004d8 	.word	0x200004d8
 80010c4:	20000448 	.word	0x20000448
 80010c8:	200002e4 	.word	0x200002e4
 80010cc:	200004dc 	.word	0x200004dc
 80010d0:	20000444 	.word	0x20000444
 80010d4:	20000420 	.word	0x20000420

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b090      	sub	sp, #64	@ 0x40
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2228      	movs	r2, #40	@ 0x28
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f004 f9e1 	bl	80054ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010fa:	2301      	movs	r3, #1
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001102:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110c:	2302      	movs	r3, #2
 800110e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001110:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001114:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001116:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800111a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0318 	add.w	r3, r7, #24
 8001120:	4618      	mov	r0, r3
 8001122:	f001 fe7f 	bl	8002e24 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800112c:	f000 fd1e 	bl	8001b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001134:	2302      	movs	r3, #2
 8001136:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001140:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2102      	movs	r1, #2
 800114a:	4618      	mov	r0, r3
 800114c:	f002 f8ec 	bl	8003328 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001156:	f000 fd09 	bl	8001b6c <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3740      	adds	r7, #64	@ 0x40
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_I2C1_Init+0x50>)
 800116a:	4a13      	ldr	r2, [pc, #76]	@ (80011b8 <MX_I2C1_Init+0x54>)
 800116c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001170:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <MX_I2C1_Init+0x58>)
 8001172:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001182:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001186:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001188:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001194:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <MX_I2C1_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_I2C1_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	@ (80011b4 <MX_I2C1_Init+0x50>)
 80011a2:	f001 fcfb 	bl	8002b9c <HAL_I2C_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011ac:	f000 fcde 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200001f0 	.word	0x200001f0
 80011b8:	40005400 	.word	0x40005400
 80011bc:	000186a0 	.word	0x000186a0

080011c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c4:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <MX_SPI1_Init+0x64>)
 80011c6:	4a18      	ldr	r2, [pc, #96]	@ (8001228 <MX_SPI1_Init+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <MX_SPI1_Init+0x64>)
 80011cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011d2:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <MX_SPI1_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <MX_SPI1_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <MX_SPI1_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <MX_SPI1_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MX_SPI1_Init+0x64>)
 80011ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <MX_SPI1_Init+0x64>)
 80011f4:	2210      	movs	r2, #16
 80011f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fe:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <MX_SPI1_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <MX_SPI1_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_SPI1_Init+0x64>)
 800120c:	220a      	movs	r2, #10
 800120e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <MX_SPI1_Init+0x64>)
 8001212:	f002 fa17 	bl	8003644 <HAL_SPI_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800121c:	f000 fca6 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000244 	.word	0x20000244
 8001228:	40013000 	.word	0x40013000

0800122c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800124a:	4b1f      	ldr	r3, [pc, #124]	@ (80012c8 <MX_TIM1_Init+0x9c>)
 800124c:	4a1f      	ldr	r2, [pc, #124]	@ (80012cc <MX_TIM1_Init+0xa0>)
 800124e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001250:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <MX_TIM1_Init+0x9c>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1c      	ldr	r3, [pc, #112]	@ (80012c8 <MX_TIM1_Init+0x9c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800125c:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <MX_TIM1_Init+0x9c>)
 800125e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001262:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <MX_TIM1_Init+0x9c>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126a:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <MX_TIM1_Init+0x9c>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <MX_TIM1_Init+0x9c>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001276:	4814      	ldr	r0, [pc, #80]	@ (80012c8 <MX_TIM1_Init+0x9c>)
 8001278:	f002 fa68 	bl	800374c <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001282:	f000 fc73 	bl	8001b6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001286:	2307      	movs	r3, #7
 8001288:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <MX_TIM1_Init+0x9c>)
 8001296:	f002 fbc2 	bl	8003a1e <HAL_TIM_SlaveConfigSynchro>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80012a0:	f000 fc64 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_TIM1_Init+0x9c>)
 80012b2:	f002 fd8d 	bl	8003dd0 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80012bc:	f000 fc56 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000029c 	.word	0x2000029c
 80012cc:	40012c00 	.word	0x40012c00

080012d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  // UART1 configured for both TX and RX (115200 baud, 8N1)
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <MX_USART1_UART_Init+0x4c>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <MX_USART1_UART_Init+0x50>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012da:	4b10      	ldr	r3, [pc, #64]	@ (800131c <MX_USART1_UART_Init+0x4c>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <MX_USART1_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <MX_USART1_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <MX_USART1_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_USART1_UART_Init+0x4c>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <MX_USART1_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <MX_USART1_UART_Init+0x4c>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_USART1_UART_Init+0x4c>)
 8001308:	f002 fdc0 	bl	8003e8c <HAL_UART_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001312:	f000 fc2b 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200002e4 	.word	0x200002e4
 8001320:	40013800 	.word	0x40013800

08001324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 800132a:	4a12      	ldr	r2, [pc, #72]	@ (8001374 <MX_USART2_UART_Init+0x50>)
 800132c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 800135c:	f002 fd96 	bl	8003e8c <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001366:	f000 fc01 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000032c 	.word	0x2000032c
 8001374:	40004400 	.word	0x40004400

08001378 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <MX_USART3_UART_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 80013b0:	f002 fd6c 	bl	8003e8c <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013ba:	f000 fbd7 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000374 	.word	0x20000374
 80013c8:	40004800 	.word	0x40004800

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_DMA_Init+0x38>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001404 <MX_DMA_Init+0x38>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_DMA_Init+0x38>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	200e      	movs	r0, #14
 80013f0:	f001 f805 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80013f4:	200e      	movs	r0, #14
 80013f6:	f001 f81e 	bl	8002436 <HAL_NVIC_EnableIRQ>

}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <MX_GPIO_Init+0x58>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4a13      	ldr	r2, [pc, #76]	@ (8001460 <MX_GPIO_Init+0x58>)
 8001414:	f043 0320 	orr.w	r3, r3, #32
 8001418:	6193      	str	r3, [r2, #24]
 800141a:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <MX_GPIO_Init+0x58>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <MX_GPIO_Init+0x58>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <MX_GPIO_Init+0x58>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <MX_GPIO_Init+0x58>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <MX_GPIO_Init+0x58>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a07      	ldr	r2, [pc, #28]	@ (8001460 <MX_GPIO_Init+0x58>)
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <MX_GPIO_Init+0x58>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000

08001464 <ParseTelemetryPacket>:
/**
 * @brief Parse telemetry packet from UART
 * @param packet: Pointer to 36-byte packet
 */
void ParseTelemetryPacket(uint8_t* packet)
{
 8001464:	b480      	push	{r7}
 8001466:	b08b      	sub	sp, #44	@ 0x2c
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    // Check header and footer
    if (packet[0] != TELEMETRY_HEADER || 
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2bab      	cmp	r3, #171	@ 0xab
 8001472:	f040 808e 	bne.w	8001592 <ParseTelemetryPacket+0x12e>
        packet[34] != FOOTER_1 || 
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3322      	adds	r3, #34	@ 0x22
 800147a:	781b      	ldrb	r3, [r3, #0]
    if (packet[0] != TELEMETRY_HEADER || 
 800147c:	2b0d      	cmp	r3, #13
 800147e:	f040 8088 	bne.w	8001592 <ParseTelemetryPacket+0x12e>
        packet[35] != FOOTER_2) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3323      	adds	r3, #35	@ 0x23
 8001486:	781b      	ldrb	r3, [r3, #0]
        packet[34] != FOOTER_1 || 
 8001488:	2b0a      	cmp	r3, #10
 800148a:	f040 8082 	bne.w	8001592 <ParseTelemetryPacket+0x12e>
        return;
    }
    
    // Parse big-endian float values - need to reverse byte order for ARM (little-endian)
    // Altitude (bytes 2-5) - reverse order: 4,3,2,1
    uint8_t alt_bytes[4] = {packet[4], packet[3], packet[2], packet[1]};
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	791b      	ldrb	r3, [r3, #4]
 8001492:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	78db      	ldrb	r3, [r3, #3]
 800149a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	789b      	ldrb	r3, [r3, #2]
 80014a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	785b      	ldrb	r3, [r3, #1]
 80014aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    memcpy(&telemetry_data.altitude, alt_bytes, 4);
 80014ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b0:	4a3a      	ldr	r2, [pc, #232]	@ (800159c <ParseTelemetryPacket+0x138>)
 80014b2:	6013      	str	r3, [r2, #0]
    
    // Pressure (bytes 6-9) - reverse order: 8,7,6,5
    uint8_t press_bytes[4] = {packet[8], packet[7], packet[6], packet[5]};
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7a1b      	ldrb	r3, [r3, #8]
 80014b8:	f887 3020 	strb.w	r3, [r7, #32]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	79db      	ldrb	r3, [r3, #7]
 80014c0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	799b      	ldrb	r3, [r3, #6]
 80014c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	795b      	ldrb	r3, [r3, #5]
 80014d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    memcpy(&telemetry_data.pressure, press_bytes, 4);
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	4a31      	ldr	r2, [pc, #196]	@ (800159c <ParseTelemetryPacket+0x138>)
 80014d8:	6053      	str	r3, [r2, #4]
    
    // Acceleration X (bytes 10-13) - reverse order: 12,11,10,9
    uint8_t accel_x_bytes[4] = {packet[12], packet[11], packet[10], packet[9]};
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7b1b      	ldrb	r3, [r3, #12]
 80014de:	773b      	strb	r3, [r7, #28]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7adb      	ldrb	r3, [r3, #11]
 80014e4:	777b      	strb	r3, [r7, #29]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	7a9b      	ldrb	r3, [r3, #10]
 80014ea:	77bb      	strb	r3, [r7, #30]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7a5b      	ldrb	r3, [r3, #9]
 80014f0:	77fb      	strb	r3, [r7, #31]
    memcpy(&telemetry_data.accel_x, accel_x_bytes, 4);
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	4a29      	ldr	r2, [pc, #164]	@ (800159c <ParseTelemetryPacket+0x138>)
 80014f6:	6093      	str	r3, [r2, #8]
    
    // Acceleration Y (bytes 14-17) - reverse order: 16,15,14,13
    uint8_t accel_y_bytes[4] = {packet[16], packet[15], packet[14], packet[13]};
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7c1b      	ldrb	r3, [r3, #16]
 80014fc:	763b      	strb	r3, [r7, #24]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7bdb      	ldrb	r3, [r3, #15]
 8001502:	767b      	strb	r3, [r7, #25]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7b9b      	ldrb	r3, [r3, #14]
 8001508:	76bb      	strb	r3, [r7, #26]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7b5b      	ldrb	r3, [r3, #13]
 800150e:	76fb      	strb	r3, [r7, #27]
    memcpy(&telemetry_data.accel_y, accel_y_bytes, 4);
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	4a22      	ldr	r2, [pc, #136]	@ (800159c <ParseTelemetryPacket+0x138>)
 8001514:	60d3      	str	r3, [r2, #12]
    
    // Acceleration Z (bytes 18-21) - reverse order: 20,19,18,17
    uint8_t accel_z_bytes[4] = {packet[20], packet[19], packet[18], packet[17]};
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7d1b      	ldrb	r3, [r3, #20]
 800151a:	753b      	strb	r3, [r7, #20]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7cdb      	ldrb	r3, [r3, #19]
 8001520:	757b      	strb	r3, [r7, #21]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7c9b      	ldrb	r3, [r3, #18]
 8001526:	75bb      	strb	r3, [r7, #22]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7c5b      	ldrb	r3, [r3, #17]
 800152c:	75fb      	strb	r3, [r7, #23]
    memcpy(&telemetry_data.accel_z, accel_z_bytes, 4);
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	4a1a      	ldr	r2, [pc, #104]	@ (800159c <ParseTelemetryPacket+0x138>)
 8001532:	6113      	str	r3, [r2, #16]
    
    // Angle X (bytes 22-25) - reverse order: 24,23,22,21
    uint8_t angle_x_bytes[4] = {packet[24], packet[23], packet[22], packet[21]};
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	7e1b      	ldrb	r3, [r3, #24]
 8001538:	743b      	strb	r3, [r7, #16]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7ddb      	ldrb	r3, [r3, #23]
 800153e:	747b      	strb	r3, [r7, #17]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7d9b      	ldrb	r3, [r3, #22]
 8001544:	74bb      	strb	r3, [r7, #18]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7d5b      	ldrb	r3, [r3, #21]
 800154a:	74fb      	strb	r3, [r7, #19]
    memcpy(&telemetry_data.angle_x, angle_x_bytes, 4);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4a13      	ldr	r2, [pc, #76]	@ (800159c <ParseTelemetryPacket+0x138>)
 8001550:	6153      	str	r3, [r2, #20]
    
    // Angle Y (bytes 26-29) - reverse order: 28,27,26,25
    uint8_t angle_y_bytes[4] = {packet[28], packet[27], packet[26], packet[25]};
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7f1b      	ldrb	r3, [r3, #28]
 8001556:	733b      	strb	r3, [r7, #12]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7edb      	ldrb	r3, [r3, #27]
 800155c:	737b      	strb	r3, [r7, #13]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7e9b      	ldrb	r3, [r3, #26]
 8001562:	73bb      	strb	r3, [r7, #14]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7e5b      	ldrb	r3, [r3, #25]
 8001568:	73fb      	strb	r3, [r7, #15]
    memcpy(&telemetry_data.angle_y, angle_y_bytes, 4);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <ParseTelemetryPacket+0x138>)
 800156e:	6193      	str	r3, [r2, #24]
    
    // Angle Z (bytes 30-33) - reverse order: 32,31,30,29
    uint8_t angle_z_bytes[4] = {packet[32], packet[31], packet[30], packet[29]};
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001576:	723b      	strb	r3, [r7, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7fdb      	ldrb	r3, [r3, #31]
 800157c:	727b      	strb	r3, [r7, #9]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7f9b      	ldrb	r3, [r3, #30]
 8001582:	72bb      	strb	r3, [r7, #10]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7f5b      	ldrb	r3, [r3, #29]
 8001588:	72fb      	strb	r3, [r7, #11]
    memcpy(&telemetry_data.angle_z, angle_z_bytes, 4);
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	4a03      	ldr	r2, [pc, #12]	@ (800159c <ParseTelemetryPacket+0x138>)
 800158e:	61d3      	str	r3, [r2, #28]
 8001590:	e000      	b.n	8001594 <ParseTelemetryPacket+0x130>
        return;
 8001592:	bf00      	nop
}
 8001594:	372c      	adds	r7, #44	@ 0x2c
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	20000400 	.word	0x20000400

080015a0 <ProcessIncomingData>:
/**
 * @brief Process incoming byte and look for complete packets
 * @param new_byte: New byte received
 */
void ProcessIncomingData(uint8_t new_byte)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
    // Store byte in buffer
    incoming_buffer[buffer_index] = new_byte;
 80015aa:	4b44      	ldr	r3, [pc, #272]	@ (80016bc <ProcessIncomingData+0x11c>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	4619      	mov	r1, r3
 80015b0:	4a43      	ldr	r2, [pc, #268]	@ (80016c0 <ProcessIncomingData+0x120>)
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	5453      	strb	r3, [r2, r1]

    // Simple and fast packet detection
    static uint8_t packet_state = 0;
    static uint8_t byte_count = 0;

    switch (packet_state) {
 80015b6:	4b43      	ldr	r3, [pc, #268]	@ (80016c4 <ProcessIncomingData+0x124>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <ProcessIncomingData+0x24>
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d00a      	beq.n	80015d8 <ProcessIncomingData+0x38>
                packet_state = 0;
                byte_count = 0;
            }
            break;
    }
}
 80015c2:	e076      	b.n	80016b2 <ProcessIncomingData+0x112>
            if (new_byte == TELEMETRY_HEADER) {
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2bab      	cmp	r3, #171	@ 0xab
 80015c8:	d170      	bne.n	80016ac <ProcessIncomingData+0x10c>
                packet_state = 1;
 80015ca:	4b3e      	ldr	r3, [pc, #248]	@ (80016c4 <ProcessIncomingData+0x124>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
                byte_count = 1;
 80015d0:	4b3d      	ldr	r3, [pc, #244]	@ (80016c8 <ProcessIncomingData+0x128>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
            break;
 80015d6:	e069      	b.n	80016ac <ProcessIncomingData+0x10c>
            byte_count++;
 80015d8:	4b3b      	ldr	r3, [pc, #236]	@ (80016c8 <ProcessIncomingData+0x128>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b39      	ldr	r3, [pc, #228]	@ (80016c8 <ProcessIncomingData+0x128>)
 80015e2:	701a      	strb	r2, [r3, #0]
            if (byte_count >= PACKET_SIZE) {
 80015e4:	4b38      	ldr	r3, [pc, #224]	@ (80016c8 <ProcessIncomingData+0x128>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b23      	cmp	r3, #35	@ 0x23
 80015ea:	d961      	bls.n	80016b0 <ProcessIncomingData+0x110>
                if (incoming_buffer[(buffer_index - PACKET_SIZE + 1 + PACKET_SIZE - 2) % (PACKET_SIZE * 4)] == FOOTER_1 &&
 80015ec:	4b33      	ldr	r3, [pc, #204]	@ (80016bc <ProcessIncomingData+0x11c>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	1e59      	subs	r1, r3, #1
 80015f2:	4b36      	ldr	r3, [pc, #216]	@ (80016cc <ProcessIncomingData+0x12c>)
 80015f4:	fb83 2301 	smull	r2, r3, r3, r1
 80015f8:	115a      	asrs	r2, r3, #5
 80015fa:	17cb      	asrs	r3, r1, #31
 80015fc:	1ad2      	subs	r2, r2, r3
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	1aca      	subs	r2, r1, r3
 8001608:	4b2d      	ldr	r3, [pc, #180]	@ (80016c0 <ProcessIncomingData+0x120>)
 800160a:	5c9b      	ldrb	r3, [r3, r2]
 800160c:	2b0d      	cmp	r3, #13
 800160e:	d146      	bne.n	800169e <ProcessIncomingData+0xfe>
                    incoming_buffer[(buffer_index - PACKET_SIZE + 1 + PACKET_SIZE - 1) % (PACKET_SIZE * 4)] == FOOTER_2) {
 8001610:	4b2a      	ldr	r3, [pc, #168]	@ (80016bc <ProcessIncomingData+0x11c>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <ProcessIncomingData+0x12c>)
 8001618:	fb83 2301 	smull	r2, r3, r3, r1
 800161c:	115a      	asrs	r2, r3, #5
 800161e:	17cb      	asrs	r3, r1, #31
 8001620:	1ad2      	subs	r2, r2, r3
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	1aca      	subs	r2, r1, r3
 800162c:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <ProcessIncomingData+0x120>)
 800162e:	5c9b      	ldrb	r3, [r3, r2]
                if (incoming_buffer[(buffer_index - PACKET_SIZE + 1 + PACKET_SIZE - 2) % (PACKET_SIZE * 4)] == FOOTER_1 &&
 8001630:	2b0a      	cmp	r3, #10
 8001632:	d134      	bne.n	800169e <ProcessIncomingData+0xfe>
                    uint16_t start_idx = (buffer_index - PACKET_SIZE + 1) % (PACKET_SIZE * 4);
 8001634:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <ProcessIncomingData+0x11c>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 800163c:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <ProcessIncomingData+0x12c>)
 800163e:	fb83 1302 	smull	r1, r3, r3, r2
 8001642:	1159      	asrs	r1, r3, #5
 8001644:	17d3      	asrs	r3, r2, #31
 8001646:	1ac9      	subs	r1, r1, r3
 8001648:	460b      	mov	r3, r1
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	440b      	add	r3, r1
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	1ad1      	subs	r1, r2, r3
 8001652:	460b      	mov	r3, r1
 8001654:	81bb      	strh	r3, [r7, #12]
                    for (uint8_t i = 0; i < PACKET_SIZE; i++) {
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	e015      	b.n	8001688 <ProcessIncomingData+0xe8>
                        rx_buffer[i] = incoming_buffer[(start_idx + i) % (PACKET_SIZE * 4)];
 800165c:	89ba      	ldrh	r2, [r7, #12]
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	18d1      	adds	r1, r2, r3
 8001662:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <ProcessIncomingData+0x12c>)
 8001664:	fb83 2301 	smull	r2, r3, r3, r1
 8001668:	115a      	asrs	r2, r3, #5
 800166a:	17cb      	asrs	r3, r1, #31
 800166c:	1ad2      	subs	r2, r2, r3
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	1aca      	subs	r2, r1, r3
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	4911      	ldr	r1, [pc, #68]	@ (80016c0 <ProcessIncomingData+0x120>)
 800167c:	5c89      	ldrb	r1, [r1, r2]
 800167e:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <ProcessIncomingData+0x130>)
 8001680:	54d1      	strb	r1, [r2, r3]
                    for (uint8_t i = 0; i < PACKET_SIZE; i++) {
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	3301      	adds	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	2b23      	cmp	r3, #35	@ 0x23
 800168c:	d9e6      	bls.n	800165c <ProcessIncomingData+0xbc>
                    packet_received = 1;
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <ProcessIncomingData+0x134>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
                    packets_received_count++; // Increment packet counter
 8001694:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <ProcessIncomingData+0x138>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a0f      	ldr	r2, [pc, #60]	@ (80016d8 <ProcessIncomingData+0x138>)
 800169c:	6013      	str	r3, [r2, #0]
                packet_state = 0;
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <ProcessIncomingData+0x124>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
                byte_count = 0;
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <ProcessIncomingData+0x128>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
            break;
 80016aa:	e001      	b.n	80016b0 <ProcessIncomingData+0x110>
            break;
 80016ac:	bf00      	nop
 80016ae:	e000      	b.n	80016b2 <ProcessIncomingData+0x112>
            break;
 80016b0:	bf00      	nop
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	200004d8 	.word	0x200004d8
 80016c0:	20000448 	.word	0x20000448
 80016c4:	2000058e 	.word	0x2000058e
 80016c8:	2000058f 	.word	0x2000058f
 80016cc:	38e38e39 	.word	0x38e38e39
 80016d0:	20000420 	.word	0x20000420
 80016d4:	20000444 	.word	0x20000444
 80016d8:	20000524 	.word	0x20000524

080016dc <HAL_UART_RxCpltCallback>:
/**
 * @brief UART receive complete callback
 * @param huart: UART handle
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a14      	ldr	r2, [pc, #80]	@ (800173c <HAL_UART_RxCpltCallback+0x60>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d122      	bne.n	8001734 <HAL_UART_RxCpltCallback+0x58>
    // Process the received byte immediately
    ProcessIncomingData(incoming_buffer[buffer_index]);
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <HAL_UART_RxCpltCallback+0x64>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <HAL_UART_RxCpltCallback+0x68>)
 80016f6:	5c9b      	ldrb	r3, [r3, r2]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff51 	bl	80015a0 <ProcessIncomingData>

    // Move to next buffer position
    buffer_index = (buffer_index + 1) % (PACKET_SIZE * 4);
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <HAL_UART_RxCpltCallback+0x64>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <HAL_UART_RxCpltCallback+0x6c>)
 8001706:	fb83 1302 	smull	r1, r3, r3, r2
 800170a:	1159      	asrs	r1, r3, #5
 800170c:	17d3      	asrs	r3, r2, #31
 800170e:	1ac9      	subs	r1, r1, r3
 8001710:	460b      	mov	r3, r1
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	1ad1      	subs	r1, r2, r3
 800171a:	b28a      	uxth	r2, r1
 800171c:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <HAL_UART_RxCpltCallback+0x64>)
 800171e:	801a      	strh	r2, [r3, #0]

    // Continue receiving next byte immediately - no delays
    HAL_UART_Receive_IT(&huart1, &incoming_buffer[buffer_index], 1);
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <HAL_UART_RxCpltCallback+0x64>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <HAL_UART_RxCpltCallback+0x68>)
 8001728:	4413      	add	r3, r2
 800172a:	2201      	movs	r2, #1
 800172c:	4619      	mov	r1, r3
 800172e:	4807      	ldr	r0, [pc, #28]	@ (800174c <HAL_UART_RxCpltCallback+0x70>)
 8001730:	f002 fc31 	bl	8003f96 <HAL_UART_Receive_IT>
  }
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40013800 	.word	0x40013800
 8001740:	200004d8 	.word	0x200004d8
 8001744:	20000448 	.word	0x20000448
 8001748:	38e38e39 	.word	0x38e38e39
 800174c:	200002e4 	.word	0x200002e4

08001750 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a07      	ldr	r2, [pc, #28]	@ (800177c <HAL_UART_TxCpltCallback+0x2c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d103      	bne.n	800176a <HAL_UART_TxCpltCallback+0x1a>
        // USART1 ile gönderim tamamlandı
        uart_busy = 0; // Örn: tekrar gönderime izin ver
 8001762:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <HAL_UART_TxCpltCallback+0x30>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
        // USART2 için yapılacak işlemler
    }
    else if (huart->Instance == USART3) {
        // USART3 için yapılacak işlemler
    }
}
 8001768:	e003      	b.n	8001772 <HAL_UART_TxCpltCallback+0x22>
    else if (huart->Instance == USART2) {
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <HAL_UART_TxCpltCallback+0x34>)
 8001770:	4293      	cmp	r3, r2
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	40013800 	.word	0x40013800
 8001780:	200004da 	.word	0x200004da
 8001784:	40004400 	.word	0x40004400

08001788 <MX_TIM2_Init>:
 * @brief Timer2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	463b      	mov	r3, r7
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80017a4:	4b1d      	ldr	r3, [pc, #116]	@ (800181c <MX_TIM2_Init+0x94>)
 80017a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71999; // 72MHz / 72000 = 1kHz
 80017ac:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <MX_TIM2_Init+0x94>)
 80017ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001820 <MX_TIM2_Init+0x98>)
 80017b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <MX_TIM2_Init+0x94>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4; // 1kHz / 5 = 200Hz (5ms period) - faster for better responsiveness
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <MX_TIM2_Init+0x94>)
 80017ba:	2204      	movs	r2, #4
 80017bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017be:	4b17      	ldr	r3, [pc, #92]	@ (800181c <MX_TIM2_Init+0x94>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	4b15      	ldr	r3, [pc, #84]	@ (800181c <MX_TIM2_Init+0x94>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ca:	4814      	ldr	r0, [pc, #80]	@ (800181c <MX_TIM2_Init+0x94>)
 80017cc:	f001 ffbe 	bl	800374c <HAL_TIM_Base_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80017d6:	f000 f9c9 	bl	8001b6c <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	4619      	mov	r1, r3
 80017e6:	480d      	ldr	r0, [pc, #52]	@ (800181c <MX_TIM2_Init+0x94>)
 80017e8:	f002 f852 	bl	8003890 <HAL_TIM_ConfigClockSource>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80017f2:	f000 f9bb 	bl	8001b6c <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017fe:	463b      	mov	r3, r7
 8001800:	4619      	mov	r1, r3
 8001802:	4806      	ldr	r0, [pc, #24]	@ (800181c <MX_TIM2_Init+0x94>)
 8001804:	f002 fae4 	bl	8003dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800180e:	f000 f9ad 	bl	8001b6c <Error_Handler>
  }
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200004dc 	.word	0x200004dc
 8001820:	0001193f 	.word	0x0001193f

08001824 <UpdateStatusFromTelemetry>:

/**
 * @brief Update status bits based on telemetry data
 */
void UpdateStatusFromTelemetry(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
    uint8_t new_status = current_status_byte; // Start with current status (preserve existing bits)
 800182a:	4b51      	ldr	r3, [pc, #324]	@ (8001970 <UpdateStatusFromTelemetry+0x14c>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	75fb      	strb	r3, [r7, #23]
    uint32_t current_time = HAL_GetTick();
 8001830:	f000 fd04 	bl	800223c <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

    // Get filtered values
    float filtered_altitude = GetFilteredValue(altitude_filter);
 8001836:	484f      	ldr	r0, [pc, #316]	@ (8001974 <UpdateStatusFromTelemetry+0x150>)
 8001838:	f000 f968 	bl	8001b0c <GetFilteredValue>
 800183c:	60f8      	str	r0, [r7, #12]
    float filtered_accel_z = GetFilteredValue(accel_z_filter);
 800183e:	484e      	ldr	r0, [pc, #312]	@ (8001978 <UpdateStatusFromTelemetry+0x154>)
 8001840:	f000 f964 	bl	8001b0c <GetFilteredValue>
 8001844:	60b8      	str	r0, [r7, #8]
    float filtered_angle_x = GetFilteredValue(angle_x_filter);
 8001846:	484d      	ldr	r0, [pc, #308]	@ (800197c <UpdateStatusFromTelemetry+0x158>)
 8001848:	f000 f960 	bl	8001b0c <GetFilteredValue>
 800184c:	6078      	str	r0, [r7, #4]
    float filtered_angle_y = GetFilteredValue(angle_y_filter);
 800184e:	484c      	ldr	r0, [pc, #304]	@ (8001980 <UpdateStatusFromTelemetry+0x15c>)
 8001850:	f000 f95c 	bl	8001b0c <GetFilteredValue>
 8001854:	6038      	str	r0, [r7, #0]

    // Check rocket fired (accel z > 30) - FIRST BIT (Bit 0)
    // Once activated, this bit stays on permanently
    if (filtered_accel_z > 25.0f) {
 8001856:	494b      	ldr	r1, [pc, #300]	@ (8001984 <UpdateStatusFromTelemetry+0x160>)
 8001858:	68b8      	ldr	r0, [r7, #8]
 800185a:	f7ff fbdf 	bl	800101c <__aeabi_fcmpgt>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00c      	beq.n	800187e <UpdateStatusFromTelemetry+0x5a>
        new_status |= STATUS_ROCKET_FIRED_BIT;
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	75fb      	strb	r3, [r7, #23]
        if (!(current_status_byte & STATUS_ROCKET_FIRED_BIT)) {
 800186c:	4b40      	ldr	r3, [pc, #256]	@ (8001970 <UpdateStatusFromTelemetry+0x14c>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <UpdateStatusFromTelemetry+0x5a>
            // Rocket just fired, record timestamp
            rocket_fired_timestamp = current_time;
 8001878:	4a43      	ldr	r2, [pc, #268]	@ (8001988 <UpdateStatusFromTelemetry+0x164>)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	6013      	str	r3, [r2, #0]
        }
    }

    // Check waited 5 seconds after rocket fired - SECOND BIT (Bit 1)
    // Only if rocket fired bit is active, and once activated stays on
    if ((new_status & STATUS_ROCKET_FIRED_BIT) &&
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00b      	beq.n	80018a0 <UpdateStatusFromTelemetry+0x7c>
        (current_time - rocket_fired_timestamp >= 5000)) {
 8001888:	4b3f      	ldr	r3, [pc, #252]	@ (8001988 <UpdateStatusFromTelemetry+0x164>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
    if ((new_status & STATUS_ROCKET_FIRED_BIT) &&
 8001890:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001894:	4293      	cmp	r3, r2
 8001896:	d903      	bls.n	80018a0 <UpdateStatusFromTelemetry+0x7c>
        new_status |= STATUS_WAITED_5SN_BIT;
 8001898:	7dfb      	ldrb	r3, [r7, #23]
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	75fb      	strb	r3, [r7, #23]
    }

    // Check minimum altitude (>= 1500) - THIRD BIT (Bit 2)
    // Only if waited 5s bit is active, and once activated stays on
    if ((new_status & STATUS_WAITED_5SN_BIT) &&
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00a      	beq.n	80018c0 <UpdateStatusFromTelemetry+0x9c>
 80018aa:	4938      	ldr	r1, [pc, #224]	@ (800198c <UpdateStatusFromTelemetry+0x168>)
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f7ff fbab 	bl	8001008 <__aeabi_fcmpge>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <UpdateStatusFromTelemetry+0x9c>
        filtered_altitude >= 1500.0f) {
        new_status |= STATUS_MIN_ALTITUDE_BIT;
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	75fb      	strb	r3, [r7, #23]
    }

    // Check angle exceeded (x or y > 60) - FOURTH BIT (Bit 3)
    // Only if minimum altitude bit is active, and once activated stays on
    if ((new_status & STATUS_MIN_ALTITUDE_BIT) &&
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d011      	beq.n	80018ee <UpdateStatusFromTelemetry+0xca>
 80018ca:	4931      	ldr	r1, [pc, #196]	@ (8001990 <UpdateStatusFromTelemetry+0x16c>)
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff fba5 	bl	800101c <__aeabi_fcmpgt>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d106      	bne.n	80018e6 <UpdateStatusFromTelemetry+0xc2>
        (filtered_angle_x > 50.0f || filtered_angle_y > 50.0f)) {
 80018d8:	492d      	ldr	r1, [pc, #180]	@ (8001990 <UpdateStatusFromTelemetry+0x16c>)
 80018da:	6838      	ldr	r0, [r7, #0]
 80018dc:	f7ff fb9e 	bl	800101c <__aeabi_fcmpgt>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <UpdateStatusFromTelemetry+0xca>
        new_status |= STATUS_ANGLE_EXCEEDED_BIT;
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
 80018e8:	f043 0308 	orr.w	r3, r3, #8
 80018ec:	75fb      	strb	r3, [r7, #23]
    }

    // Check altitude decreasing - FIFTH BIT (Bit 4)
    // Only if angle exceeded bit is active, and once activated stays on
    if ((new_status & STATUS_ANGLE_EXCEEDED_BIT) &&
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d010      	beq.n	800191a <UpdateStatusFromTelemetry+0xf6>
        filtered_altitude < previous_altitude) {
 80018f8:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <UpdateStatusFromTelemetry+0x170>)
 80018fa:	681b      	ldr	r3, [r3, #0]
    if ((new_status & STATUS_ANGLE_EXCEEDED_BIT) &&
 80018fc:	4619      	mov	r1, r3
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff fb6e 	bl	8000fe0 <__aeabi_fcmplt>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <UpdateStatusFromTelemetry+0xf6>
        new_status |= STATUS_ALTITUDE_DECREASING_BIT;
 800190a:	7dfb      	ldrb	r3, [r7, #23]
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	75fb      	strb	r3, [r7, #23]
        // First parachute deployed at the same time as altitude decreasing - SIXTH BIT (Bit 5)
        new_status |= STATUS_FIRST_PARACHUTE_BIT;
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	f043 0320 	orr.w	r3, r3, #32
 8001918:	75fb      	strb	r3, [r7, #23]
    }

    // Check altitude <= 550 - SEVENTH BIT (Bit 6)
    if ((new_status & STATUS_FIRST_PARACHUTE_BIT) &&
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00a      	beq.n	800193a <UpdateStatusFromTelemetry+0x116>
 8001924:	491c      	ldr	r1, [pc, #112]	@ (8001998 <UpdateStatusFromTelemetry+0x174>)
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f7ff fb64 	bl	8000ff4 <__aeabi_fcmple>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <UpdateStatusFromTelemetry+0x116>
        filtered_altitude <= 600.0f) {
        new_status |= STATUS_ALTITUDE_550_BIT;
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001938:	75fb      	strb	r3, [r7, #23]
    }

    // Check second parachute deployed - EIGHTH BIT (Bit 7)
    if ((new_status & STATUS_ALTITUDE_550_BIT) &&
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00a      	beq.n	800195a <UpdateStatusFromTelemetry+0x136>
 8001944:	4915      	ldr	r1, [pc, #84]	@ (800199c <UpdateStatusFromTelemetry+0x178>)
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f7ff fb54 	bl	8000ff4 <__aeabi_fcmple>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <UpdateStatusFromTelemetry+0x136>
        filtered_altitude <= 550.0f) {  // örnek eşik
        new_status |= STATUS_SECOND_PARACHUTE_BIT;
 8001952:	7dfb      	ldrb	r3, [r7, #23]
 8001954:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001958:	75fb      	strb	r3, [r7, #23]
    }

    
    // Update status byte (new bits are added, existing bits are preserved)
    current_status_byte = new_status;
 800195a:	4a05      	ldr	r2, [pc, #20]	@ (8001970 <UpdateStatusFromTelemetry+0x14c>)
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	7013      	strb	r3, [r2, #0]

    // Store current filtered altitude for next comparison
    previous_altitude = filtered_altitude;
 8001960:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <UpdateStatusFromTelemetry+0x170>)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6013      	str	r3, [r2, #0]
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000528 	.word	0x20000528
 8001974:	20000534 	.word	0x20000534
 8001978:	20000548 	.word	0x20000548
 800197c:	2000055c 	.word	0x2000055c
 8001980:	20000570 	.word	0x20000570
 8001984:	41c80000 	.word	0x41c80000
 8001988:	20000530 	.word	0x20000530
 800198c:	44bb8000 	.word	0x44bb8000
 8001990:	42480000 	.word	0x42480000
 8001994:	2000052c 	.word	0x2000052c
 8001998:	44160000 	.word	0x44160000
 800199c:	44098000 	.word	0x44098000

080019a0 <CalculateChecksum>:
 * @param data: Pointer to data array
 * @param length: Length of data (excluding checksum)
 * @retval Checksum value
 */
uint8_t CalculateChecksum(uint8_t* data, uint8_t length)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	70fb      	strb	r3, [r7, #3]
    uint16_t sum = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < length; i++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	737b      	strb	r3, [r7, #13]
 80019b4:	e00a      	b.n	80019cc <CalculateChecksum+0x2c>
        sum += data[i];
 80019b6:	7b7b      	ldrb	r3, [r7, #13]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	89fb      	ldrh	r3, [r7, #14]
 80019c2:	4413      	add	r3, r2
 80019c4:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < length; i++) {
 80019c6:	7b7b      	ldrb	r3, [r7, #13]
 80019c8:	3301      	adds	r3, #1
 80019ca:	737b      	strb	r3, [r7, #13]
 80019cc:	7b7a      	ldrb	r2, [r7, #13]
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d3f0      	bcc.n	80019b6 <CalculateChecksum+0x16>
    }
    return (uint8_t)(sum % 256);
 80019d4:	89fb      	ldrh	r3, [r7, #14]
 80019d6:	b2db      	uxtb	r3, r3
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
	...

080019e4 <SendStatusMessage>:

/**
 * @brief Send status message in the new 6-byte format
 */
void SendStatusMessage(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
    // Build status message
    status_message[0] = STATUS_HEADER;        // 0xAA
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <SendStatusMessage+0x7c>)
 80019ec:	22aa      	movs	r2, #170	@ 0xaa
 80019ee:	701a      	strb	r2, [r3, #0]
    status_message[1] = current_status_byte;  // Status byte
 80019f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <SendStatusMessage+0x80>)
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <SendStatusMessage+0x7c>)
 80019f6:	705a      	strb	r2, [r3, #1]
    status_message[2] = 0x00;                // Reserved
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <SendStatusMessage+0x7c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	709a      	strb	r2, [r3, #2]
    status_message[3] = 0x00;                // Checksum (calculated below)
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <SendStatusMessage+0x7c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	70da      	strb	r2, [r3, #3]
    status_message[4] = STATUS_FOOTER_1;      // 0x0D
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <SendStatusMessage+0x7c>)
 8001a06:	220d      	movs	r2, #13
 8001a08:	711a      	strb	r2, [r3, #4]
    status_message[5] = STATUS_FOOTER_2;      // 0x0A
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <SendStatusMessage+0x7c>)
 8001a0c:	220a      	movs	r2, #10
 8001a0e:	715a      	strb	r2, [r3, #5]

    // Calculate checksum (sum of bytes 0, 1, 2, 4, 5, then mod 256)
    uint8_t checksum_data[5] = {status_message[0], status_message[1], status_message[2], status_message[4], status_message[5]};
 8001a10:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <SendStatusMessage+0x7c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	703b      	strb	r3, [r7, #0]
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <SendStatusMessage+0x7c>)
 8001a18:	785b      	ldrb	r3, [r3, #1]
 8001a1a:	707b      	strb	r3, [r7, #1]
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <SendStatusMessage+0x7c>)
 8001a1e:	789b      	ldrb	r3, [r3, #2]
 8001a20:	70bb      	strb	r3, [r7, #2]
 8001a22:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <SendStatusMessage+0x7c>)
 8001a24:	791b      	ldrb	r3, [r3, #4]
 8001a26:	70fb      	strb	r3, [r7, #3]
 8001a28:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <SendStatusMessage+0x7c>)
 8001a2a:	795b      	ldrb	r3, [r3, #5]
 8001a2c:	713b      	strb	r3, [r7, #4]
    status_message[3] = CalculateChecksum(checksum_data, 5);
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2105      	movs	r1, #5
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ffb4 	bl	80019a0 <CalculateChecksum>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <SendStatusMessage+0x7c>)
 8001a3e:	70da      	strb	r2, [r3, #3]
    // Send status message
    if (!uart_busy) {
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <SendStatusMessage+0x84>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d107      	bne.n	8001a58 <SendStatusMessage+0x74>
        uart_busy = 1;
 8001a48:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <SendStatusMessage+0x84>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_IT(&huart1, status_message, STATUS_MESSAGE_SIZE);
 8001a4e:	2206      	movs	r2, #6
 8001a50:	4903      	ldr	r1, [pc, #12]	@ (8001a60 <SendStatusMessage+0x7c>)
 8001a52:	4806      	ldr	r0, [pc, #24]	@ (8001a6c <SendStatusMessage+0x88>)
 8001a54:	f002 fa6a 	bl	8003f2c <HAL_UART_Transmit_IT>
    }

}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000588 	.word	0x20000588
 8001a64:	20000528 	.word	0x20000528
 8001a68:	200004da 	.word	0x200004da
 8001a6c:	200002e4 	.word	0x200002e4

08001a70 <ApplyFiltering>:

/**
 * @brief Apply filtering to telemetry values
 */
void ApplyFiltering(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
    // Add new values to filter arrays
    altitude_filter[filter_index] = telemetry_data.altitude;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <ApplyFiltering+0x7c>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <ApplyFiltering+0x80>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001af4 <ApplyFiltering+0x84>)
 8001a80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    accel_z_filter[filter_index] = telemetry_data.accel_z;
 8001a84:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <ApplyFiltering+0x7c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <ApplyFiltering+0x80>)
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8001af8 <ApplyFiltering+0x88>)
 8001a90:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    angle_x_filter[filter_index] = telemetry_data.angle_x;
 8001a94:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <ApplyFiltering+0x7c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <ApplyFiltering+0x80>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <ApplyFiltering+0x8c>)
 8001aa0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    angle_y_filter[filter_index] = telemetry_data.angle_y;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <ApplyFiltering+0x7c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <ApplyFiltering+0x80>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	4a14      	ldr	r2, [pc, #80]	@ (8001b00 <ApplyFiltering+0x90>)
 8001ab0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    // Move to next filter position
    filter_index = (filter_index + 1) % FILTER_SIZE;
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <ApplyFiltering+0x7c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <ApplyFiltering+0x94>)
 8001abc:	fb83 1302 	smull	r1, r3, r3, r2
 8001ac0:	1059      	asrs	r1, r3, #1
 8001ac2:	17d3      	asrs	r3, r2, #31
 8001ac4:	1ac9      	subs	r1, r1, r3
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	1ad1      	subs	r1, r2, r3
 8001ace:	b2ca      	uxtb	r2, r1
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <ApplyFiltering+0x7c>)
 8001ad2:	701a      	strb	r2, [r3, #0]
    
    // Mark filter as filled after first complete cycle
    if (filter_index == 0) {
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <ApplyFiltering+0x7c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <ApplyFiltering+0x72>
        filter_filled = 1;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <ApplyFiltering+0x98>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
    }
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000584 	.word	0x20000584
 8001af0:	20000400 	.word	0x20000400
 8001af4:	20000534 	.word	0x20000534
 8001af8:	20000548 	.word	0x20000548
 8001afc:	2000055c 	.word	0x2000055c
 8001b00:	20000570 	.word	0x20000570
 8001b04:	66666667 	.word	0x66666667
 8001b08:	20000585 	.word	0x20000585

08001b0c <GetFilteredValue>:
 * @brief Get filtered value from filter array
 * @param filter_array: Pointer to filter array
 * @retval Filtered value (average)
 */
float GetFilteredValue(float* filter_array)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    if (!filter_filled) {
 8001b14:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <GetFilteredValue+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <GetFilteredValue+0x16>
        // If filter not filled yet, return current value
        return filter_array[0];
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	e01b      	b.n	8001b5a <GetFilteredValue+0x4e>
    }

    // Calculate moving average
    float sum = 0;
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < FILTER_SIZE; i++) {
 8001b28:	2300      	movs	r3, #0
 8001b2a:	72fb      	strb	r3, [r7, #11]
 8001b2c:	e00d      	b.n	8001b4a <GetFilteredValue+0x3e>
        sum += filter_array[i];
 8001b2e:	7afb      	ldrb	r3, [r7, #11]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7fe ffaa 	bl	8000a94 <__addsf3>
 8001b40:	4603      	mov	r3, r0
 8001b42:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < FILTER_SIZE; i++) {
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	3301      	adds	r3, #1
 8001b48:	72fb      	strb	r3, [r7, #11]
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d9ee      	bls.n	8001b2e <GetFilteredValue+0x22>
    }
    return sum / FILTER_SIZE;
 8001b50:	4905      	ldr	r1, [pc, #20]	@ (8001b68 <GetFilteredValue+0x5c>)
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff f95a 	bl	8000e0c <__aeabi_fdiv>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000585 	.word	0x20000585
 8001b68:	40a00000 	.word	0x40a00000

08001b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b70:	b672      	cpsid	i
}
 8001b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <Error_Handler+0x8>

08001b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <HAL_MspInit+0x5c>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	4a14      	ldr	r2, [pc, #80]	@ (8001bd4 <HAL_MspInit+0x5c>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6193      	str	r3, [r2, #24]
 8001b8a:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <HAL_MspInit+0x5c>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <HAL_MspInit+0x5c>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd4 <HAL_MspInit+0x5c>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba0:	61d3      	str	r3, [r2, #28]
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <HAL_MspInit+0x5c>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001bae:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <HAL_MspInit+0x60>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <HAL_MspInit+0x60>)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40010000 	.word	0x40010000

08001bdc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a15      	ldr	r2, [pc, #84]	@ (8001c4c <HAL_I2C_MspInit+0x70>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d123      	bne.n	8001c44 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfc:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <HAL_I2C_MspInit+0x74>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a13      	ldr	r2, [pc, #76]	@ (8001c50 <HAL_I2C_MspInit+0x74>)
 8001c02:	f043 0308 	orr.w	r3, r3, #8
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <HAL_I2C_MspInit+0x74>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c14:	23c0      	movs	r3, #192	@ 0xc0
 8001c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c18:	2312      	movs	r3, #18
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	480b      	ldr	r0, [pc, #44]	@ (8001c54 <HAL_I2C_MspInit+0x78>)
 8001c28:	f000 fe34 	bl	8002894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c2c:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <HAL_I2C_MspInit+0x74>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	4a07      	ldr	r2, [pc, #28]	@ (8001c50 <HAL_I2C_MspInit+0x74>)
 8001c32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c36:	61d3      	str	r3, [r2, #28]
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_I2C_MspInit+0x74>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c44:	bf00      	nop
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40005400 	.word	0x40005400
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010c00 	.word	0x40010c00

08001c58 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <HAL_SPI_MspInit+0x88>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d12f      	bne.n	8001cd8 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <HAL_SPI_MspInit+0x8c>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4a19      	ldr	r2, [pc, #100]	@ (8001ce4 <HAL_SPI_MspInit+0x8c>)
 8001c7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c82:	6193      	str	r3, [r2, #24]
 8001c84:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <HAL_SPI_MspInit+0x8c>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <HAL_SPI_MspInit+0x8c>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a13      	ldr	r2, [pc, #76]	@ (8001ce4 <HAL_SPI_MspInit+0x8c>)
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <HAL_SPI_MspInit+0x8c>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ca8:	23a0      	movs	r3, #160	@ 0xa0
 8001caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480b      	ldr	r0, [pc, #44]	@ (8001ce8 <HAL_SPI_MspInit+0x90>)
 8001cbc:	f000 fdea 	bl	8002894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cc0:	2340      	movs	r3, #64	@ 0x40
 8001cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <HAL_SPI_MspInit+0x90>)
 8001cd4:	f000 fdde 	bl	8002894 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cd8:	bf00      	nop
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40013000 	.word	0x40013000
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010800 	.word	0x40010800

08001cec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a09      	ldr	r2, [pc, #36]	@ (8001d20 <HAL_TIM_Base_MspInit+0x34>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d10b      	bne.n	8001d16 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <HAL_TIM_Base_MspInit+0x38>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4a08      	ldr	r2, [pc, #32]	@ (8001d24 <HAL_TIM_Base_MspInit+0x38>)
 8001d04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d08:	6193      	str	r3, [r2, #24]
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_TIM_Base_MspInit+0x38>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40012c00 	.word	0x40012c00
 8001d24:	40021000 	.word	0x40021000

08001d28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	@ 0x30
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0320 	add.w	r3, r7, #32
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a6e      	ldr	r2, [pc, #440]	@ (8001efc <HAL_UART_MspInit+0x1d4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d160      	bne.n	8001e0a <HAL_UART_MspInit+0xe2>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d48:	4b6d      	ldr	r3, [pc, #436]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a6c      	ldr	r2, [pc, #432]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001d4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b6a      	ldr	r3, [pc, #424]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	4b67      	ldr	r3, [pc, #412]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a66      	ldr	r2, [pc, #408]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b64      	ldr	r3, [pc, #400]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 0320 	add.w	r3, r7, #32
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	485d      	ldr	r0, [pc, #372]	@ (8001f04 <HAL_UART_MspInit+0x1dc>)
 8001d8e:	f000 fd81 	bl	8002894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 0320 	add.w	r3, r7, #32
 8001da4:	4619      	mov	r1, r3
 8001da6:	4857      	ldr	r0, [pc, #348]	@ (8001f04 <HAL_UART_MspInit+0x1dc>)
 8001da8:	f000 fd74 	bl	8002894 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001dac:	4b56      	ldr	r3, [pc, #344]	@ (8001f08 <HAL_UART_MspInit+0x1e0>)
 8001dae:	4a57      	ldr	r2, [pc, #348]	@ (8001f0c <HAL_UART_MspInit+0x1e4>)
 8001db0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001db2:	4b55      	ldr	r3, [pc, #340]	@ (8001f08 <HAL_UART_MspInit+0x1e0>)
 8001db4:	2210      	movs	r2, #16
 8001db6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db8:	4b53      	ldr	r3, [pc, #332]	@ (8001f08 <HAL_UART_MspInit+0x1e0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dbe:	4b52      	ldr	r3, [pc, #328]	@ (8001f08 <HAL_UART_MspInit+0x1e0>)
 8001dc0:	2280      	movs	r2, #128	@ 0x80
 8001dc2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc4:	4b50      	ldr	r3, [pc, #320]	@ (8001f08 <HAL_UART_MspInit+0x1e0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dca:	4b4f      	ldr	r3, [pc, #316]	@ (8001f08 <HAL_UART_MspInit+0x1e0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001dd0:	4b4d      	ldr	r3, [pc, #308]	@ (8001f08 <HAL_UART_MspInit+0x1e0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8001f08 <HAL_UART_MspInit+0x1e0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001ddc:	484a      	ldr	r0, [pc, #296]	@ (8001f08 <HAL_UART_MspInit+0x1e0>)
 8001dde:	f000 fb45 	bl	800246c <HAL_DMA_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001de8:	f7ff fec0 	bl	8001b6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a46      	ldr	r2, [pc, #280]	@ (8001f08 <HAL_UART_MspInit+0x1e0>)
 8001df0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001df2:	4a45      	ldr	r2, [pc, #276]	@ (8001f08 <HAL_UART_MspInit+0x1e0>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2025      	movs	r0, #37	@ 0x25
 8001dfe:	f000 fafe 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e02:	2025      	movs	r0, #37	@ 0x25
 8001e04:	f000 fb17 	bl	8002436 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e08:	e074      	b.n	8001ef4 <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART2)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a40      	ldr	r2, [pc, #256]	@ (8001f10 <HAL_UART_MspInit+0x1e8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d138      	bne.n	8001e86 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e14:	4b3a      	ldr	r3, [pc, #232]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	4a39      	ldr	r2, [pc, #228]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1e:	61d3      	str	r3, [r2, #28]
 8001e20:	4b37      	ldr	r3, [pc, #220]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	4b34      	ldr	r3, [pc, #208]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a33      	ldr	r2, [pc, #204]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001e32:	f043 0304 	orr.w	r3, r3, #4
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b31      	ldr	r3, [pc, #196]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e44:	2304      	movs	r3, #4
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 0320 	add.w	r3, r7, #32
 8001e54:	4619      	mov	r1, r3
 8001e56:	482b      	ldr	r0, [pc, #172]	@ (8001f04 <HAL_UART_MspInit+0x1dc>)
 8001e58:	f000 fd1c 	bl	8002894 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0320 	add.w	r3, r7, #32
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4825      	ldr	r0, [pc, #148]	@ (8001f04 <HAL_UART_MspInit+0x1dc>)
 8001e70:	f000 fd10 	bl	8002894 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2100      	movs	r1, #0
 8001e78:	2026      	movs	r0, #38	@ 0x26
 8001e7a:	f000 fac0 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e7e:	2026      	movs	r0, #38	@ 0x26
 8001e80:	f000 fad9 	bl	8002436 <HAL_NVIC_EnableIRQ>
}
 8001e84:	e036      	b.n	8001ef4 <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART3)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a22      	ldr	r2, [pc, #136]	@ (8001f14 <HAL_UART_MspInit+0x1ec>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d131      	bne.n	8001ef4 <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e90:	4b1b      	ldr	r3, [pc, #108]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	4a1a      	ldr	r2, [pc, #104]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001e96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e9a:	61d3      	str	r3, [r2, #28]
 8001e9c:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea8:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a14      	ldr	r2, [pc, #80]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001eae:	f043 0308 	orr.w	r3, r3, #8
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <HAL_UART_MspInit+0x1d8>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ec0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ece:	f107 0320 	add.w	r3, r7, #32
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4810      	ldr	r0, [pc, #64]	@ (8001f18 <HAL_UART_MspInit+0x1f0>)
 8001ed6:	f000 fcdd 	bl	8002894 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001eda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 0320 	add.w	r3, r7, #32
 8001eec:	4619      	mov	r1, r3
 8001eee:	480a      	ldr	r0, [pc, #40]	@ (8001f18 <HAL_UART_MspInit+0x1f0>)
 8001ef0:	f000 fcd0 	bl	8002894 <HAL_GPIO_Init>
}
 8001ef4:	bf00      	nop
 8001ef6:	3730      	adds	r7, #48	@ 0x30
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40013800 	.word	0x40013800
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010800 	.word	0x40010800
 8001f08:	200003bc 	.word	0x200003bc
 8001f0c:	40020044 	.word	0x40020044
 8001f10:	40004400 	.word	0x40004400
 8001f14:	40004800 	.word	0x40004800
 8001f18:	40010c00 	.word	0x40010c00

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <NMI_Handler+0x4>

08001f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <MemManage_Handler+0x4>

08001f34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6c:	f000 f954 	bl	8002218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f78:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <DMA1_Channel4_IRQHandler+0x10>)
 8001f7a:	f000 fb85 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200003bc 	.word	0x200003bc

08001f88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f8c:	4802      	ldr	r0, [pc, #8]	@ (8001f98 <USART1_IRQHandler+0x10>)
 8001f8e:	f002 f827 	bl	8003fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200002e4 	.word	0x200002e4

08001f9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <USART2_IRQHandler+0x10>)
 8001fa2:	f002 f81d 	bl	8003fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000032c 	.word	0x2000032c

08001fb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return 1;
 8001fb4:	2301      	movs	r3, #1
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <_kill>:

int _kill(int pid, int sig)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fc8:	f003 fac4 	bl	8005554 <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2216      	movs	r2, #22
 8001fd0:	601a      	str	r2, [r3, #0]
  return -1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_exit>:

void _exit (int status)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffe7 	bl	8001fbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <_exit+0x12>

08001ff4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	e00a      	b.n	800201c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002006:	f3af 8000 	nop.w
 800200a:	4601      	mov	r1, r0
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	60ba      	str	r2, [r7, #8]
 8002012:	b2ca      	uxtb	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	3301      	adds	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbf0      	blt.n	8002006 <_read+0x12>
  }

  return len;
 8002024:	687b      	ldr	r3, [r7, #4]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e009      	b.n	8002054 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	60ba      	str	r2, [r7, #8]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	dbf1      	blt.n	8002040 <_write+0x12>
  }
  return len;
 800205c:	687b      	ldr	r3, [r7, #4]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <_close>:

int _close(int file)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800208c:	605a      	str	r2, [r3, #4]
  return 0;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <_isatty>:

int _isatty(int file)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020a2:	2301      	movs	r3, #1
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
	...

080020c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d0:	4a14      	ldr	r2, [pc, #80]	@ (8002124 <_sbrk+0x5c>)
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <_sbrk+0x60>)
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020dc:	4b13      	ldr	r3, [pc, #76]	@ (800212c <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e4:	4b11      	ldr	r3, [pc, #68]	@ (800212c <_sbrk+0x64>)
 80020e6:	4a12      	ldr	r2, [pc, #72]	@ (8002130 <_sbrk+0x68>)
 80020e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ea:	4b10      	ldr	r3, [pc, #64]	@ (800212c <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d207      	bcs.n	8002108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f8:	f003 fa2c 	bl	8005554 <__errno>
 80020fc:	4603      	mov	r3, r0
 80020fe:	220c      	movs	r2, #12
 8002100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	e009      	b.n	800211c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002108:	4b08      	ldr	r3, [pc, #32]	@ (800212c <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800210e:	4b07      	ldr	r3, [pc, #28]	@ (800212c <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	4a05      	ldr	r2, [pc, #20]	@ (800212c <_sbrk+0x64>)
 8002118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800211a:	68fb      	ldr	r3, [r7, #12]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20005000 	.word	0x20005000
 8002128:	00000400 	.word	0x00000400
 800212c:	20000590 	.word	0x20000590
 8002130:	200006e8 	.word	0x200006e8

08002134 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002140:	f7ff fff8 	bl	8002134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002144:	480b      	ldr	r0, [pc, #44]	@ (8002174 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002146:	490c      	ldr	r1, [pc, #48]	@ (8002178 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002148:	4a0c      	ldr	r2, [pc, #48]	@ (800217c <LoopFillZerobss+0x16>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800214c:	e002      	b.n	8002154 <LoopCopyDataInit>

0800214e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002152:	3304      	adds	r3, #4

08002154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002158:	d3f9      	bcc.n	800214e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800215a:	4a09      	ldr	r2, [pc, #36]	@ (8002180 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800215c:	4c09      	ldr	r4, [pc, #36]	@ (8002184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002160:	e001      	b.n	8002166 <LoopFillZerobss>

08002162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002164:	3204      	adds	r2, #4

08002166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002168:	d3fb      	bcc.n	8002162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800216a:	f003 f9f9 	bl	8005560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800216e:	f7fe ff5f 	bl	8001030 <main>
  bx lr
 8002172:	4770      	bx	lr
  ldr r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002178:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800217c:	080076d4 	.word	0x080076d4
  ldr r2, =_sbss
 8002180:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002184:	200006e4 	.word	0x200006e4

08002188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC1_2_IRQHandler>
	...

0800218c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <HAL_Init+0x28>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	@ (80021b4 <HAL_Init+0x28>)
 8002196:	f043 0310 	orr.w	r3, r3, #16
 800219a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219c:	2003      	movs	r0, #3
 800219e:	f000 f923 	bl	80023e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a2:	200f      	movs	r0, #15
 80021a4:	f000 f808 	bl	80021b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a8:	f7ff fce6 	bl	8001b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000

080021b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c0:	4b12      	ldr	r3, [pc, #72]	@ (800220c <HAL_InitTick+0x54>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_InitTick+0x58>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f93b 	bl	8002452 <HAL_SYSTICK_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00e      	b.n	8002204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d80a      	bhi.n	8002202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f000 f903 	bl	80023fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f8:	4a06      	ldr	r2, [pc, #24]	@ (8002214 <HAL_InitTick+0x5c>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000000 	.word	0x20000000
 8002210:	20000008 	.word	0x20000008
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_IncTick+0x1c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <HAL_IncTick+0x20>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a03      	ldr	r2, [pc, #12]	@ (8002238 <HAL_IncTick+0x20>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	20000008 	.word	0x20000008
 8002238:	20000594 	.word	0x20000594

0800223c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b02      	ldr	r3, [pc, #8]	@ (800224c <HAL_GetTick+0x10>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	20000594 	.word	0x20000594

08002250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002260:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800226c:	4013      	ands	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002278:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800227c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002282:	4a04      	ldr	r2, [pc, #16]	@ (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	60d3      	str	r3, [r2, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800229c:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <__NVIC_GetPriorityGrouping+0x18>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	f003 0307 	and.w	r3, r3, #7
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	db0b      	blt.n	80022de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	4906      	ldr	r1, [pc, #24]	@ (80022e8 <__NVIC_EnableIRQ+0x34>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	2001      	movs	r0, #1
 80022d6:	fa00 f202 	lsl.w	r2, r0, r2
 80022da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db0a      	blt.n	8002316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	490c      	ldr	r1, [pc, #48]	@ (8002338 <__NVIC_SetPriority+0x4c>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002314:	e00a      	b.n	800232c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4908      	ldr	r1, [pc, #32]	@ (800233c <__NVIC_SetPriority+0x50>)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	3b04      	subs	r3, #4
 8002324:	0112      	lsls	r2, r2, #4
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	440b      	add	r3, r1
 800232a:	761a      	strb	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	@ 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f1c3 0307 	rsb	r3, r3, #7
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf28      	it	cs
 800235e:	2304      	movcs	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	2b06      	cmp	r3, #6
 8002368:	d902      	bls.n	8002370 <NVIC_EncodePriority+0x30>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3b03      	subs	r3, #3
 800236e:	e000      	b.n	8002372 <NVIC_EncodePriority+0x32>
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	401a      	ands	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43d9      	mvns	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	4313      	orrs	r3, r2
         );
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	@ 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023b4:	d301      	bcc.n	80023ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00f      	b.n	80023da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ba:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <SysTick_Config+0x40>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c2:	210f      	movs	r1, #15
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f7ff ff90 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <SysTick_Config+0x40>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d2:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <SysTick_Config+0x40>)
 80023d4:	2207      	movs	r2, #7
 80023d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	e000e010 	.word	0xe000e010

080023e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff2d 	bl	8002250 <__NVIC_SetPriorityGrouping>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002410:	f7ff ff42 	bl	8002298 <__NVIC_GetPriorityGrouping>
 8002414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f7ff ff90 	bl	8002340 <NVIC_EncodePriority>
 8002420:	4602      	mov	r2, r0
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff5f 	bl	80022ec <__NVIC_SetPriority>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff35 	bl	80022b4 <__NVIC_EnableIRQ>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffa2 	bl	80023a4 <SysTick_Config>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e043      	b.n	800250a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	4b22      	ldr	r3, [pc, #136]	@ (8002514 <HAL_DMA_Init+0xa8>)
 800248a:	4413      	add	r3, r2
 800248c:	4a22      	ldr	r2, [pc, #136]	@ (8002518 <HAL_DMA_Init+0xac>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	009a      	lsls	r2, r3, #2
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a1f      	ldr	r2, [pc, #124]	@ (800251c <HAL_DMA_Init+0xb0>)
 800249e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80024ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	bffdfff8 	.word	0xbffdfff8
 8002518:	cccccccd 	.word	0xcccccccd
 800251c:	40020000 	.word	0x40020000

08002520 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d008      	beq.n	800254a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2204      	movs	r2, #4
 800253c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e020      	b.n	800258c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 020e 	bic.w	r2, r2, #14
 8002558:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f202 	lsl.w	r2, r1, r2
 8002578:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800258a:	7bfb      	ldrb	r3, [r7, #15]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
	...

08002598 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d005      	beq.n	80025bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2204      	movs	r2, #4
 80025b4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	e051      	b.n	8002660 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 020e 	bic.w	r2, r2, #14
 80025ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a22      	ldr	r2, [pc, #136]	@ (800266c <HAL_DMA_Abort_IT+0xd4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d029      	beq.n	800263a <HAL_DMA_Abort_IT+0xa2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a21      	ldr	r2, [pc, #132]	@ (8002670 <HAL_DMA_Abort_IT+0xd8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d022      	beq.n	8002636 <HAL_DMA_Abort_IT+0x9e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002674 <HAL_DMA_Abort_IT+0xdc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01a      	beq.n	8002630 <HAL_DMA_Abort_IT+0x98>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002678 <HAL_DMA_Abort_IT+0xe0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d012      	beq.n	800262a <HAL_DMA_Abort_IT+0x92>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1c      	ldr	r2, [pc, #112]	@ (800267c <HAL_DMA_Abort_IT+0xe4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00a      	beq.n	8002624 <HAL_DMA_Abort_IT+0x8c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <HAL_DMA_Abort_IT+0xe8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d102      	bne.n	800261e <HAL_DMA_Abort_IT+0x86>
 8002618:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800261c:	e00e      	b.n	800263c <HAL_DMA_Abort_IT+0xa4>
 800261e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002622:	e00b      	b.n	800263c <HAL_DMA_Abort_IT+0xa4>
 8002624:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002628:	e008      	b.n	800263c <HAL_DMA_Abort_IT+0xa4>
 800262a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800262e:	e005      	b.n	800263c <HAL_DMA_Abort_IT+0xa4>
 8002630:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002634:	e002      	b.n	800263c <HAL_DMA_Abort_IT+0xa4>
 8002636:	2310      	movs	r3, #16
 8002638:	e000      	b.n	800263c <HAL_DMA_Abort_IT+0xa4>
 800263a:	2301      	movs	r3, #1
 800263c:	4a11      	ldr	r2, [pc, #68]	@ (8002684 <HAL_DMA_Abort_IT+0xec>)
 800263e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
    } 
  }
  return status;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40020008 	.word	0x40020008
 8002670:	4002001c 	.word	0x4002001c
 8002674:	40020030 	.word	0x40020030
 8002678:	40020044 	.word	0x40020044
 800267c:	40020058 	.word	0x40020058
 8002680:	4002006c 	.word	0x4002006c
 8002684:	40020000 	.word	0x40020000

08002688 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	2204      	movs	r2, #4
 80026a6:	409a      	lsls	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d04f      	beq.n	8002750 <HAL_DMA_IRQHandler+0xc8>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d04a      	beq.n	8002750 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d107      	bne.n	80026d8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0204 	bic.w	r2, r2, #4
 80026d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a66      	ldr	r2, [pc, #408]	@ (8002878 <HAL_DMA_IRQHandler+0x1f0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d029      	beq.n	8002736 <HAL_DMA_IRQHandler+0xae>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a65      	ldr	r2, [pc, #404]	@ (800287c <HAL_DMA_IRQHandler+0x1f4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d022      	beq.n	8002732 <HAL_DMA_IRQHandler+0xaa>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a63      	ldr	r2, [pc, #396]	@ (8002880 <HAL_DMA_IRQHandler+0x1f8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01a      	beq.n	800272c <HAL_DMA_IRQHandler+0xa4>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a62      	ldr	r2, [pc, #392]	@ (8002884 <HAL_DMA_IRQHandler+0x1fc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d012      	beq.n	8002726 <HAL_DMA_IRQHandler+0x9e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a60      	ldr	r2, [pc, #384]	@ (8002888 <HAL_DMA_IRQHandler+0x200>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00a      	beq.n	8002720 <HAL_DMA_IRQHandler+0x98>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a5f      	ldr	r2, [pc, #380]	@ (800288c <HAL_DMA_IRQHandler+0x204>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d102      	bne.n	800271a <HAL_DMA_IRQHandler+0x92>
 8002714:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002718:	e00e      	b.n	8002738 <HAL_DMA_IRQHandler+0xb0>
 800271a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800271e:	e00b      	b.n	8002738 <HAL_DMA_IRQHandler+0xb0>
 8002720:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002724:	e008      	b.n	8002738 <HAL_DMA_IRQHandler+0xb0>
 8002726:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800272a:	e005      	b.n	8002738 <HAL_DMA_IRQHandler+0xb0>
 800272c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002730:	e002      	b.n	8002738 <HAL_DMA_IRQHandler+0xb0>
 8002732:	2340      	movs	r3, #64	@ 0x40
 8002734:	e000      	b.n	8002738 <HAL_DMA_IRQHandler+0xb0>
 8002736:	2304      	movs	r3, #4
 8002738:	4a55      	ldr	r2, [pc, #340]	@ (8002890 <HAL_DMA_IRQHandler+0x208>)
 800273a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8094 	beq.w	800286e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800274e:	e08e      	b.n	800286e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	2202      	movs	r2, #2
 8002756:	409a      	lsls	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d056      	beq.n	800280e <HAL_DMA_IRQHandler+0x186>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d051      	beq.n	800280e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10b      	bne.n	8002790 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 020a 	bic.w	r2, r2, #10
 8002786:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a38      	ldr	r2, [pc, #224]	@ (8002878 <HAL_DMA_IRQHandler+0x1f0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d029      	beq.n	80027ee <HAL_DMA_IRQHandler+0x166>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a37      	ldr	r2, [pc, #220]	@ (800287c <HAL_DMA_IRQHandler+0x1f4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d022      	beq.n	80027ea <HAL_DMA_IRQHandler+0x162>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a35      	ldr	r2, [pc, #212]	@ (8002880 <HAL_DMA_IRQHandler+0x1f8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01a      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x15c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a34      	ldr	r2, [pc, #208]	@ (8002884 <HAL_DMA_IRQHandler+0x1fc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d012      	beq.n	80027de <HAL_DMA_IRQHandler+0x156>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a32      	ldr	r2, [pc, #200]	@ (8002888 <HAL_DMA_IRQHandler+0x200>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00a      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x150>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a31      	ldr	r2, [pc, #196]	@ (800288c <HAL_DMA_IRQHandler+0x204>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d102      	bne.n	80027d2 <HAL_DMA_IRQHandler+0x14a>
 80027cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80027d0:	e00e      	b.n	80027f0 <HAL_DMA_IRQHandler+0x168>
 80027d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027d6:	e00b      	b.n	80027f0 <HAL_DMA_IRQHandler+0x168>
 80027d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027dc:	e008      	b.n	80027f0 <HAL_DMA_IRQHandler+0x168>
 80027de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027e2:	e005      	b.n	80027f0 <HAL_DMA_IRQHandler+0x168>
 80027e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027e8:	e002      	b.n	80027f0 <HAL_DMA_IRQHandler+0x168>
 80027ea:	2320      	movs	r3, #32
 80027ec:	e000      	b.n	80027f0 <HAL_DMA_IRQHandler+0x168>
 80027ee:	2302      	movs	r3, #2
 80027f0:	4a27      	ldr	r2, [pc, #156]	@ (8002890 <HAL_DMA_IRQHandler+0x208>)
 80027f2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d034      	beq.n	800286e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800280c:	e02f      	b.n	800286e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	2208      	movs	r2, #8
 8002814:	409a      	lsls	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d028      	beq.n	8002870 <HAL_DMA_IRQHandler+0x1e8>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d023      	beq.n	8002870 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 020e 	bic.w	r2, r2, #14
 8002836:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
    }
  }
  return;
 800286e:	bf00      	nop
 8002870:	bf00      	nop
}
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40020008 	.word	0x40020008
 800287c:	4002001c 	.word	0x4002001c
 8002880:	40020030 	.word	0x40020030
 8002884:	40020044 	.word	0x40020044
 8002888:	40020058 	.word	0x40020058
 800288c:	4002006c 	.word	0x4002006c
 8002890:	40020000 	.word	0x40020000

08002894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002894:	b480      	push	{r7}
 8002896:	b08b      	sub	sp, #44	@ 0x2c
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a6:	e169      	b.n	8002b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028a8:	2201      	movs	r2, #1
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	f040 8158 	bne.w	8002b76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a9a      	ldr	r2, [pc, #616]	@ (8002b34 <HAL_GPIO_Init+0x2a0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d05e      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028d0:	4a98      	ldr	r2, [pc, #608]	@ (8002b34 <HAL_GPIO_Init+0x2a0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d875      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028d6:	4a98      	ldr	r2, [pc, #608]	@ (8002b38 <HAL_GPIO_Init+0x2a4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d058      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028dc:	4a96      	ldr	r2, [pc, #600]	@ (8002b38 <HAL_GPIO_Init+0x2a4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d86f      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028e2:	4a96      	ldr	r2, [pc, #600]	@ (8002b3c <HAL_GPIO_Init+0x2a8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d052      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028e8:	4a94      	ldr	r2, [pc, #592]	@ (8002b3c <HAL_GPIO_Init+0x2a8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d869      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028ee:	4a94      	ldr	r2, [pc, #592]	@ (8002b40 <HAL_GPIO_Init+0x2ac>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d04c      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028f4:	4a92      	ldr	r2, [pc, #584]	@ (8002b40 <HAL_GPIO_Init+0x2ac>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d863      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028fa:	4a92      	ldr	r2, [pc, #584]	@ (8002b44 <HAL_GPIO_Init+0x2b0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d046      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 8002900:	4a90      	ldr	r2, [pc, #576]	@ (8002b44 <HAL_GPIO_Init+0x2b0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d85d      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 8002906:	2b12      	cmp	r3, #18
 8002908:	d82a      	bhi.n	8002960 <HAL_GPIO_Init+0xcc>
 800290a:	2b12      	cmp	r3, #18
 800290c:	d859      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 800290e:	a201      	add	r2, pc, #4	@ (adr r2, 8002914 <HAL_GPIO_Init+0x80>)
 8002910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002914:	0800298f 	.word	0x0800298f
 8002918:	08002969 	.word	0x08002969
 800291c:	0800297b 	.word	0x0800297b
 8002920:	080029bd 	.word	0x080029bd
 8002924:	080029c3 	.word	0x080029c3
 8002928:	080029c3 	.word	0x080029c3
 800292c:	080029c3 	.word	0x080029c3
 8002930:	080029c3 	.word	0x080029c3
 8002934:	080029c3 	.word	0x080029c3
 8002938:	080029c3 	.word	0x080029c3
 800293c:	080029c3 	.word	0x080029c3
 8002940:	080029c3 	.word	0x080029c3
 8002944:	080029c3 	.word	0x080029c3
 8002948:	080029c3 	.word	0x080029c3
 800294c:	080029c3 	.word	0x080029c3
 8002950:	080029c3 	.word	0x080029c3
 8002954:	080029c3 	.word	0x080029c3
 8002958:	08002971 	.word	0x08002971
 800295c:	08002985 	.word	0x08002985
 8002960:	4a79      	ldr	r2, [pc, #484]	@ (8002b48 <HAL_GPIO_Init+0x2b4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002966:	e02c      	b.n	80029c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	623b      	str	r3, [r7, #32]
          break;
 800296e:	e029      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	3304      	adds	r3, #4
 8002976:	623b      	str	r3, [r7, #32]
          break;
 8002978:	e024      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	3308      	adds	r3, #8
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e01f      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	330c      	adds	r3, #12
 800298a:	623b      	str	r3, [r7, #32]
          break;
 800298c:	e01a      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002996:	2304      	movs	r3, #4
 8002998:	623b      	str	r3, [r7, #32]
          break;
 800299a:	e013      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029a4:	2308      	movs	r3, #8
 80029a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	611a      	str	r2, [r3, #16]
          break;
 80029ae:	e009      	b.n	80029c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b0:	2308      	movs	r3, #8
 80029b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	615a      	str	r2, [r3, #20]
          break;
 80029ba:	e003      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]
          break;
 80029c0:	e000      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          break;
 80029c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2bff      	cmp	r3, #255	@ 0xff
 80029c8:	d801      	bhi.n	80029ce <HAL_GPIO_Init+0x13a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	e001      	b.n	80029d2 <HAL_GPIO_Init+0x13e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2bff      	cmp	r3, #255	@ 0xff
 80029d8:	d802      	bhi.n	80029e0 <HAL_GPIO_Init+0x14c>
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	e002      	b.n	80029e6 <HAL_GPIO_Init+0x152>
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	3b08      	subs	r3, #8
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	210f      	movs	r1, #15
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	401a      	ands	r2, r3
 80029f8:	6a39      	ldr	r1, [r7, #32]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80b1 	beq.w	8002b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a14:	4b4d      	ldr	r3, [pc, #308]	@ (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	4a4c      	ldr	r2, [pc, #304]	@ (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6193      	str	r3, [r2, #24]
 8002a20:	4b4a      	ldr	r3, [pc, #296]	@ (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a2c:	4a48      	ldr	r2, [pc, #288]	@ (8002b50 <HAL_GPIO_Init+0x2bc>)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a40      	ldr	r2, [pc, #256]	@ (8002b54 <HAL_GPIO_Init+0x2c0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_GPIO_Init+0x1ec>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b58 <HAL_GPIO_Init+0x2c4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00d      	beq.n	8002a7c <HAL_GPIO_Init+0x1e8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a3e      	ldr	r2, [pc, #248]	@ (8002b5c <HAL_GPIO_Init+0x2c8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d007      	beq.n	8002a78 <HAL_GPIO_Init+0x1e4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b60 <HAL_GPIO_Init+0x2cc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_GPIO_Init+0x1e0>
 8002a70:	2303      	movs	r3, #3
 8002a72:	e006      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a74:	2304      	movs	r3, #4
 8002a76:	e004      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e002      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a80:	2300      	movs	r3, #0
 8002a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a84:	f002 0203 	and.w	r2, r2, #3
 8002a88:	0092      	lsls	r2, r2, #2
 8002a8a:	4093      	lsls	r3, r2
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a92:	492f      	ldr	r1, [pc, #188]	@ (8002b50 <HAL_GPIO_Init+0x2bc>)
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	3302      	adds	r3, #2
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aac:	4b2d      	ldr	r3, [pc, #180]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	492c      	ldr	r1, [pc, #176]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]
 8002ab8:	e006      	b.n	8002ac8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aba:	4b2a      	ldr	r3, [pc, #168]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	4928      	ldr	r1, [pc, #160]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ad4:	4b23      	ldr	r3, [pc, #140]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	4922      	ldr	r1, [pc, #136]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60cb      	str	r3, [r1, #12]
 8002ae0:	e006      	b.n	8002af0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ae2:	4b20      	ldr	r3, [pc, #128]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	491e      	ldr	r1, [pc, #120]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d006      	beq.n	8002b0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002afc:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4918      	ldr	r1, [pc, #96]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
 8002b08:	e006      	b.n	8002b18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b0a:	4b16      	ldr	r3, [pc, #88]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	4914      	ldr	r1, [pc, #80]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d021      	beq.n	8002b68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b24:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	490e      	ldr	r1, [pc, #56]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
 8002b30:	e021      	b.n	8002b76 <HAL_GPIO_Init+0x2e2>
 8002b32:	bf00      	nop
 8002b34:	10320000 	.word	0x10320000
 8002b38:	10310000 	.word	0x10310000
 8002b3c:	10220000 	.word	0x10220000
 8002b40:	10210000 	.word	0x10210000
 8002b44:	10120000 	.word	0x10120000
 8002b48:	10110000 	.word	0x10110000
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40010800 	.word	0x40010800
 8002b58:	40010c00 	.word	0x40010c00
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40011400 	.word	0x40011400
 8002b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	4909      	ldr	r1, [pc, #36]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	3301      	adds	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	fa22 f303 	lsr.w	r3, r2, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f47f ae8e 	bne.w	80028a8 <HAL_GPIO_Init+0x14>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	372c      	adds	r7, #44	@ 0x2c
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	40010400 	.word	0x40010400

08002b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e12b      	b.n	8002e06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff f80a 	bl	8001bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2224      	movs	r2, #36	@ 0x24
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c00:	f000 fcda 	bl	80035b8 <HAL_RCC_GetPCLK1Freq>
 8002c04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4a81      	ldr	r2, [pc, #516]	@ (8002e10 <HAL_I2C_Init+0x274>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d807      	bhi.n	8002c20 <HAL_I2C_Init+0x84>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a80      	ldr	r2, [pc, #512]	@ (8002e14 <HAL_I2C_Init+0x278>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	bf94      	ite	ls
 8002c18:	2301      	movls	r3, #1
 8002c1a:	2300      	movhi	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	e006      	b.n	8002c2e <HAL_I2C_Init+0x92>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a7d      	ldr	r2, [pc, #500]	@ (8002e18 <HAL_I2C_Init+0x27c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	bf94      	ite	ls
 8002c28:	2301      	movls	r3, #1
 8002c2a:	2300      	movhi	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0e7      	b.n	8002e06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a78      	ldr	r2, [pc, #480]	@ (8002e1c <HAL_I2C_Init+0x280>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	0c9b      	lsrs	r3, r3, #18
 8002c40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4a6a      	ldr	r2, [pc, #424]	@ (8002e10 <HAL_I2C_Init+0x274>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d802      	bhi.n	8002c70 <HAL_I2C_Init+0xd4>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	e009      	b.n	8002c84 <HAL_I2C_Init+0xe8>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	4a69      	ldr	r2, [pc, #420]	@ (8002e20 <HAL_I2C_Init+0x284>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	099b      	lsrs	r3, r3, #6
 8002c82:	3301      	adds	r3, #1
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	495c      	ldr	r1, [pc, #368]	@ (8002e10 <HAL_I2C_Init+0x274>)
 8002ca0:	428b      	cmp	r3, r1
 8002ca2:	d819      	bhi.n	8002cd8 <HAL_I2C_Init+0x13c>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1e59      	subs	r1, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb2:	1c59      	adds	r1, r3, #1
 8002cb4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002cb8:	400b      	ands	r3, r1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_I2C_Init+0x138>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1e59      	subs	r1, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd2:	e051      	b.n	8002d78 <HAL_I2C_Init+0x1dc>
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	e04f      	b.n	8002d78 <HAL_I2C_Init+0x1dc>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d111      	bne.n	8002d04 <HAL_I2C_Init+0x168>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1e58      	subs	r0, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	440b      	add	r3, r1
 8002cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e012      	b.n	8002d2a <HAL_I2C_Init+0x18e>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1e58      	subs	r0, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	0099      	lsls	r1, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Init+0x196>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e022      	b.n	8002d78 <HAL_I2C_Init+0x1dc>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10e      	bne.n	8002d58 <HAL_I2C_Init+0x1bc>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1e58      	subs	r0, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6859      	ldr	r1, [r3, #4]
 8002d42:	460b      	mov	r3, r1
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	440b      	add	r3, r1
 8002d48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d56:	e00f      	b.n	8002d78 <HAL_I2C_Init+0x1dc>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e58      	subs	r0, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	0099      	lsls	r1, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	6809      	ldr	r1, [r1, #0]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002da6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6911      	ldr	r1, [r2, #16]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68d2      	ldr	r2, [r2, #12]
 8002db2:	4311      	orrs	r1, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	000186a0 	.word	0x000186a0
 8002e14:	001e847f 	.word	0x001e847f
 8002e18:	003d08ff 	.word	0x003d08ff
 8002e1c:	431bde83 	.word	0x431bde83
 8002e20:	10624dd3 	.word	0x10624dd3

08002e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e272      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8087 	beq.w	8002f52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e44:	4b92      	ldr	r3, [pc, #584]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d00c      	beq.n	8002e6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e50:	4b8f      	ldr	r3, [pc, #572]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d112      	bne.n	8002e82 <HAL_RCC_OscConfig+0x5e>
 8002e5c:	4b8c      	ldr	r3, [pc, #560]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e68:	d10b      	bne.n	8002e82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6a:	4b89      	ldr	r3, [pc, #548]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d06c      	beq.n	8002f50 <HAL_RCC_OscConfig+0x12c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d168      	bne.n	8002f50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e24c      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x76>
 8002e8c:	4b80      	ldr	r3, [pc, #512]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a7f      	ldr	r2, [pc, #508]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	e02e      	b.n	8002ef8 <HAL_RCC_OscConfig+0xd4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x98>
 8002ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a7a      	ldr	r2, [pc, #488]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b78      	ldr	r3, [pc, #480]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a77      	ldr	r2, [pc, #476]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e01d      	b.n	8002ef8 <HAL_RCC_OscConfig+0xd4>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xbc>
 8002ec6:	4b72      	ldr	r3, [pc, #456]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a71      	ldr	r2, [pc, #452]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b6f      	ldr	r3, [pc, #444]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCC_OscConfig+0xd4>
 8002ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a6a      	ldr	r2, [pc, #424]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4b68      	ldr	r3, [pc, #416]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a67      	ldr	r2, [pc, #412]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ef6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7ff f99c 	bl	800223c <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f08:	f7ff f998 	bl	800223c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	@ 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e200      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0xe4>
 8002f26:	e014      	b.n	8002f52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7ff f988 	bl	800223c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f30:	f7ff f984 	bl	800223c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	@ 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e1ec      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	4b53      	ldr	r3, [pc, #332]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x10c>
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d063      	beq.n	8003026 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f6a:	4b49      	ldr	r3, [pc, #292]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d11c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x18c>
 8002f76:	4b46      	ldr	r3, [pc, #280]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d116      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	4b43      	ldr	r3, [pc, #268]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_RCC_OscConfig+0x176>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e1c0      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4939      	ldr	r1, [pc, #228]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fae:	e03a      	b.n	8003026 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d020      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb8:	4b36      	ldr	r3, [pc, #216]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbe:	f7ff f93d 	bl	800223c <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc6:	f7ff f939 	bl	800223c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e1a1      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4927      	ldr	r1, [pc, #156]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	600b      	str	r3, [r1, #0]
 8002ff8:	e015      	b.n	8003026 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffa:	4b26      	ldr	r3, [pc, #152]	@ (8003094 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7ff f91c 	bl	800223c <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003008:	f7ff f918 	bl	800223c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e180      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d03a      	beq.n	80030a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d019      	beq.n	800306e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303a:	4b17      	ldr	r3, [pc, #92]	@ (8003098 <HAL_RCC_OscConfig+0x274>)
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003040:	f7ff f8fc 	bl	800223c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003048:	f7ff f8f8 	bl	800223c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e160      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305a:	4b0d      	ldr	r3, [pc, #52]	@ (8003090 <HAL_RCC_OscConfig+0x26c>)
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003066:	2001      	movs	r0, #1
 8003068:	f000 face 	bl	8003608 <RCC_Delay>
 800306c:	e01c      	b.n	80030a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800306e:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <HAL_RCC_OscConfig+0x274>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003074:	f7ff f8e2 	bl	800223c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307a:	e00f      	b.n	800309c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7ff f8de 	bl	800223c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d908      	bls.n	800309c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e146      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	42420000 	.word	0x42420000
 8003098:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309c:	4b92      	ldr	r3, [pc, #584]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e9      	bne.n	800307c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80a6 	beq.w	8003202 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ba:	4b8b      	ldr	r3, [pc, #556]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10d      	bne.n	80030e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c6:	4b88      	ldr	r3, [pc, #544]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	4a87      	ldr	r2, [pc, #540]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d0:	61d3      	str	r3, [r2, #28]
 80030d2:	4b85      	ldr	r3, [pc, #532]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030de:	2301      	movs	r3, #1
 80030e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e2:	4b82      	ldr	r3, [pc, #520]	@ (80032ec <HAL_RCC_OscConfig+0x4c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d118      	bne.n	8003120 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ee:	4b7f      	ldr	r3, [pc, #508]	@ (80032ec <HAL_RCC_OscConfig+0x4c8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a7e      	ldr	r2, [pc, #504]	@ (80032ec <HAL_RCC_OscConfig+0x4c8>)
 80030f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fa:	f7ff f89f 	bl	800223c <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003102:	f7ff f89b 	bl	800223c <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b64      	cmp	r3, #100	@ 0x64
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e103      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	4b75      	ldr	r3, [pc, #468]	@ (80032ec <HAL_RCC_OscConfig+0x4c8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x312>
 8003128:	4b6f      	ldr	r3, [pc, #444]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4a6e      	ldr	r2, [pc, #440]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6213      	str	r3, [r2, #32]
 8003134:	e02d      	b.n	8003192 <HAL_RCC_OscConfig+0x36e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x334>
 800313e:	4b6a      	ldr	r3, [pc, #424]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4a69      	ldr	r2, [pc, #420]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6213      	str	r3, [r2, #32]
 800314a:	4b67      	ldr	r3, [pc, #412]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4a66      	ldr	r2, [pc, #408]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003150:	f023 0304 	bic.w	r3, r3, #4
 8003154:	6213      	str	r3, [r2, #32]
 8003156:	e01c      	b.n	8003192 <HAL_RCC_OscConfig+0x36e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b05      	cmp	r3, #5
 800315e:	d10c      	bne.n	800317a <HAL_RCC_OscConfig+0x356>
 8003160:	4b61      	ldr	r3, [pc, #388]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	4a60      	ldr	r2, [pc, #384]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	f043 0304 	orr.w	r3, r3, #4
 800316a:	6213      	str	r3, [r2, #32]
 800316c:	4b5e      	ldr	r3, [pc, #376]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	4a5d      	ldr	r2, [pc, #372]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6213      	str	r3, [r2, #32]
 8003178:	e00b      	b.n	8003192 <HAL_RCC_OscConfig+0x36e>
 800317a:	4b5b      	ldr	r3, [pc, #364]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4a5a      	ldr	r2, [pc, #360]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	6213      	str	r3, [r2, #32]
 8003186:	4b58      	ldr	r3, [pc, #352]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	4a57      	ldr	r2, [pc, #348]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d015      	beq.n	80031c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7ff f84f 	bl	800223c <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7ff f84b 	bl	800223c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e0b1      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b8:	4b4b      	ldr	r3, [pc, #300]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0ee      	beq.n	80031a2 <HAL_RCC_OscConfig+0x37e>
 80031c4:	e014      	b.n	80031f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c6:	f7ff f839 	bl	800223c <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7ff f835 	bl	800223c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e09b      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e4:	4b40      	ldr	r3, [pc, #256]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1ee      	bne.n	80031ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d105      	bne.n	8003202 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f6:	4b3c      	ldr	r3, [pc, #240]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4a3b      	ldr	r2, [pc, #236]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003200:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 8087 	beq.w	800331a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800320c:	4b36      	ldr	r3, [pc, #216]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b08      	cmp	r3, #8
 8003216:	d061      	beq.n	80032dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d146      	bne.n	80032ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003220:	4b33      	ldr	r3, [pc, #204]	@ (80032f0 <HAL_RCC_OscConfig+0x4cc>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7ff f809 	bl	800223c <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322e:	f7ff f805 	bl	800223c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e06d      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003240:	4b29      	ldr	r3, [pc, #164]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003254:	d108      	bne.n	8003268 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003256:	4b24      	ldr	r3, [pc, #144]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	4921      	ldr	r1, [pc, #132]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003268:	4b1f      	ldr	r3, [pc, #124]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a19      	ldr	r1, [r3, #32]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	430b      	orrs	r3, r1
 800327a:	491b      	ldr	r1, [pc, #108]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	4313      	orrs	r3, r2
 800327e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003280:	4b1b      	ldr	r3, [pc, #108]	@ (80032f0 <HAL_RCC_OscConfig+0x4cc>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003286:	f7fe ffd9 	bl	800223c <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328e:	f7fe ffd5 	bl	800223c <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e03d      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a0:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x46a>
 80032ac:	e035      	b.n	800331a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <HAL_RCC_OscConfig+0x4cc>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe ffc2 	bl	800223c <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fe ffbe 	bl	800223c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e026      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ce:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x498>
 80032da:	e01e      	b.n	800331a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d107      	bne.n	80032f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e019      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40007000 	.word	0x40007000
 80032f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <HAL_RCC_OscConfig+0x500>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	429a      	cmp	r2, r3
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d001      	beq.n	800331a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000

08003328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0d0      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b6a      	ldr	r3, [pc, #424]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d910      	bls.n	800336c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b67      	ldr	r3, [pc, #412]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 0207 	bic.w	r2, r3, #7
 8003352:	4965      	ldr	r1, [pc, #404]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b63      	ldr	r3, [pc, #396]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0b8      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d020      	beq.n	80033ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003384:	4b59      	ldr	r3, [pc, #356]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a58      	ldr	r2, [pc, #352]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800338e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800339c:	4b53      	ldr	r3, [pc, #332]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4a52      	ldr	r2, [pc, #328]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80033a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a8:	4b50      	ldr	r3, [pc, #320]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	494d      	ldr	r1, [pc, #308]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d040      	beq.n	8003448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b47      	ldr	r3, [pc, #284]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d115      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e07f      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	4b41      	ldr	r3, [pc, #260]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e073      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f6:	4b3d      	ldr	r3, [pc, #244]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e06b      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003406:	4b39      	ldr	r3, [pc, #228]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f023 0203 	bic.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4936      	ldr	r1, [pc, #216]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003418:	f7fe ff10 	bl	800223c <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	e00a      	b.n	8003436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003420:	f7fe ff0c 	bl	800223c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e053      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 020c 	and.w	r2, r3, #12
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	429a      	cmp	r2, r3
 8003446:	d1eb      	bne.n	8003420 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003448:	4b27      	ldr	r3, [pc, #156]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d210      	bcs.n	8003478 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b24      	ldr	r3, [pc, #144]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 0207 	bic.w	r2, r3, #7
 800345e:	4922      	ldr	r1, [pc, #136]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b20      	ldr	r3, [pc, #128]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e032      	b.n	80034de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003484:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4916      	ldr	r1, [pc, #88]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034a2:	4b12      	ldr	r3, [pc, #72]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	490e      	ldr	r1, [pc, #56]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034b6:	f000 f821 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 80034ba:	4602      	mov	r2, r0
 80034bc:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	490a      	ldr	r1, [pc, #40]	@ (80034f0 <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	5ccb      	ldrb	r3, [r1, r3]
 80034ca:	fa22 f303 	lsr.w	r3, r2, r3
 80034ce:	4a09      	ldr	r2, [pc, #36]	@ (80034f4 <HAL_RCC_ClockConfig+0x1cc>)
 80034d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034d2:	4b09      	ldr	r3, [pc, #36]	@ (80034f8 <HAL_RCC_ClockConfig+0x1d0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fe6e 	bl	80021b8 <HAL_InitTick>

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40022000 	.word	0x40022000
 80034ec:	40021000 	.word	0x40021000
 80034f0:	08007328 	.word	0x08007328
 80034f4:	20000000 	.word	0x20000000
 80034f8:	20000004 	.word	0x20000004

080034fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003516:	4b1e      	ldr	r3, [pc, #120]	@ (8003590 <HAL_RCC_GetSysClockFreq+0x94>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b04      	cmp	r3, #4
 8003524:	d002      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x30>
 8003526:	2b08      	cmp	r3, #8
 8003528:	d003      	beq.n	8003532 <HAL_RCC_GetSysClockFreq+0x36>
 800352a:	e027      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800352c:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x98>)
 800352e:	613b      	str	r3, [r7, #16]
      break;
 8003530:	e027      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	0c9b      	lsrs	r3, r3, #18
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	4a17      	ldr	r2, [pc, #92]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x9c>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d010      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800354a:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <HAL_RCC_GetSysClockFreq+0x94>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	0c5b      	lsrs	r3, r3, #17
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	4a11      	ldr	r2, [pc, #68]	@ (800359c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003556:	5cd3      	ldrb	r3, [r2, r3]
 8003558:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a0d      	ldr	r2, [pc, #52]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x98>)
 800355e:	fb03 f202 	mul.w	r2, r3, r2
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	e004      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a0c      	ldr	r2, [pc, #48]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	613b      	str	r3, [r7, #16]
      break;
 800357a:	e002      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800357c:	4b05      	ldr	r3, [pc, #20]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x98>)
 800357e:	613b      	str	r3, [r7, #16]
      break;
 8003580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003582:	693b      	ldr	r3, [r7, #16]
}
 8003584:	4618      	mov	r0, r3
 8003586:	371c      	adds	r7, #28
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	007a1200 	.word	0x007a1200
 8003598:	08007340 	.word	0x08007340
 800359c:	08007350 	.word	0x08007350
 80035a0:	003d0900 	.word	0x003d0900

080035a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035a8:	4b02      	ldr	r3, [pc, #8]	@ (80035b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80035aa:	681b      	ldr	r3, [r3, #0]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	20000000 	.word	0x20000000

080035b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035bc:	f7ff fff2 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035c0:	4602      	mov	r2, r0
 80035c2:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	0a1b      	lsrs	r3, r3, #8
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	4903      	ldr	r1, [pc, #12]	@ (80035dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ce:	5ccb      	ldrb	r3, [r1, r3]
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08007338 	.word	0x08007338

080035e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035e4:	f7ff ffde 	bl	80035a4 <HAL_RCC_GetHCLKFreq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	0adb      	lsrs	r3, r3, #11
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4903      	ldr	r1, [pc, #12]	@ (8003604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	08007338 	.word	0x08007338

08003608 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003610:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <RCC_Delay+0x34>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a0a      	ldr	r2, [pc, #40]	@ (8003640 <RCC_Delay+0x38>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0a5b      	lsrs	r3, r3, #9
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003624:	bf00      	nop
  }
  while (Delay --);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1e5a      	subs	r2, r3, #1
 800362a:	60fa      	str	r2, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f9      	bne.n	8003624 <RCC_Delay+0x1c>
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	20000000 	.word	0x20000000
 8003640:	10624dd3 	.word	0x10624dd3

08003644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e076      	b.n	8003744 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d108      	bne.n	8003670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003666:	d009      	beq.n	800367c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	61da      	str	r2, [r3, #28]
 800366e:	e005      	b.n	800367c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fe fade 	bl	8001c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003700:	ea42 0103 	orr.w	r1, r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003708:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	0c1a      	lsrs	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f002 0204 	and.w	r2, r2, #4
 8003722:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003732:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e041      	b.n	80037e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fe faba 	bl	8001cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f000 f98a 	bl	8003aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d001      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e03a      	b.n	800387a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a18      	ldr	r2, [pc, #96]	@ (8003884 <HAL_TIM_Base_Start_IT+0x98>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00e      	beq.n	8003844 <HAL_TIM_Base_Start_IT+0x58>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800382e:	d009      	beq.n	8003844 <HAL_TIM_Base_Start_IT+0x58>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a14      	ldr	r2, [pc, #80]	@ (8003888 <HAL_TIM_Base_Start_IT+0x9c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_TIM_Base_Start_IT+0x58>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a13      	ldr	r2, [pc, #76]	@ (800388c <HAL_TIM_Base_Start_IT+0xa0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d111      	bne.n	8003868 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b06      	cmp	r3, #6
 8003854:	d010      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0201 	orr.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003866:	e007      	b.n	8003878 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40012c00 	.word	0x40012c00
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800

08003890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_TIM_ConfigClockSource+0x1c>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e0b4      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x186>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038e4:	d03e      	beq.n	8003964 <HAL_TIM_ConfigClockSource+0xd4>
 80038e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ea:	f200 8087 	bhi.w	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 80038ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f2:	f000 8086 	beq.w	8003a02 <HAL_TIM_ConfigClockSource+0x172>
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038fa:	d87f      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 80038fc:	2b70      	cmp	r3, #112	@ 0x70
 80038fe:	d01a      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0xa6>
 8003900:	2b70      	cmp	r3, #112	@ 0x70
 8003902:	d87b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b60      	cmp	r3, #96	@ 0x60
 8003906:	d050      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x11a>
 8003908:	2b60      	cmp	r3, #96	@ 0x60
 800390a:	d877      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b50      	cmp	r3, #80	@ 0x50
 800390e:	d03c      	beq.n	800398a <HAL_TIM_ConfigClockSource+0xfa>
 8003910:	2b50      	cmp	r3, #80	@ 0x50
 8003912:	d873      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003914:	2b40      	cmp	r3, #64	@ 0x40
 8003916:	d058      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x13a>
 8003918:	2b40      	cmp	r3, #64	@ 0x40
 800391a:	d86f      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b30      	cmp	r3, #48	@ 0x30
 800391e:	d064      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003920:	2b30      	cmp	r3, #48	@ 0x30
 8003922:	d86b      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b20      	cmp	r3, #32
 8003926:	d060      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d867      	bhi.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d05c      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003930:	2b10      	cmp	r3, #16
 8003932:	d05a      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x15a>
 8003934:	e062      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003946:	f000 fa23 	bl	8003d90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	609a      	str	r2, [r3, #8]
      break;
 8003962:	e04f      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003974:	f000 fa0c 	bl	8003d90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003986:	609a      	str	r2, [r3, #8]
      break;
 8003988:	e03c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003996:	461a      	mov	r2, r3
 8003998:	f000 f983 	bl	8003ca2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2150      	movs	r1, #80	@ 0x50
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f9da 	bl	8003d5c <TIM_ITRx_SetConfig>
      break;
 80039a8:	e02c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b6:	461a      	mov	r2, r3
 80039b8:	f000 f9a1 	bl	8003cfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2160      	movs	r1, #96	@ 0x60
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f9ca 	bl	8003d5c <TIM_ITRx_SetConfig>
      break;
 80039c8:	e01c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d6:	461a      	mov	r2, r3
 80039d8:	f000 f963 	bl	8003ca2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2140      	movs	r1, #64	@ 0x40
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f9ba 	bl	8003d5c <TIM_ITRx_SetConfig>
      break;
 80039e8:	e00c      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f000 f9b1 	bl	8003d5c <TIM_ITRx_SetConfig>
      break;
 80039fa:	e003      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003a00:	e000      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e031      	b.n	8003a9a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003a46:	6839      	ldr	r1, [r7, #0]
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f899 	bl	8003b80 <TIM_SlaveTimer_SetConfig>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d009      	beq.n	8003a68 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e018      	b.n	8003a9a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a76:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a86:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8003b74 <TIM_Base_SetConfig+0xd0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00b      	beq.n	8003ad4 <TIM_Base_SetConfig+0x30>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac2:	d007      	beq.n	8003ad4 <TIM_Base_SetConfig+0x30>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a2c      	ldr	r2, [pc, #176]	@ (8003b78 <TIM_Base_SetConfig+0xd4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <TIM_Base_SetConfig+0x30>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a2b      	ldr	r2, [pc, #172]	@ (8003b7c <TIM_Base_SetConfig+0xd8>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d108      	bne.n	8003ae6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a22      	ldr	r2, [pc, #136]	@ (8003b74 <TIM_Base_SetConfig+0xd0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00b      	beq.n	8003b06 <TIM_Base_SetConfig+0x62>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af4:	d007      	beq.n	8003b06 <TIM_Base_SetConfig+0x62>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b78 <TIM_Base_SetConfig+0xd4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d003      	beq.n	8003b06 <TIM_Base_SetConfig+0x62>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1e      	ldr	r2, [pc, #120]	@ (8003b7c <TIM_Base_SetConfig+0xd8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d108      	bne.n	8003b18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8003b74 <TIM_Base_SetConfig+0xd0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d103      	bne.n	8003b4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f023 0201 	bic.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	611a      	str	r2, [r3, #16]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40000800 	.word	0x40000800

08003b80 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b9c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f023 0307 	bic.w	r3, r3, #7
 8003bae:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b70      	cmp	r3, #112	@ 0x70
 8003bc8:	d01a      	beq.n	8003c00 <TIM_SlaveTimer_SetConfig+0x80>
 8003bca:	2b70      	cmp	r3, #112	@ 0x70
 8003bcc:	d860      	bhi.n	8003c90 <TIM_SlaveTimer_SetConfig+0x110>
 8003bce:	2b60      	cmp	r3, #96	@ 0x60
 8003bd0:	d054      	beq.n	8003c7c <TIM_SlaveTimer_SetConfig+0xfc>
 8003bd2:	2b60      	cmp	r3, #96	@ 0x60
 8003bd4:	d85c      	bhi.n	8003c90 <TIM_SlaveTimer_SetConfig+0x110>
 8003bd6:	2b50      	cmp	r3, #80	@ 0x50
 8003bd8:	d046      	beq.n	8003c68 <TIM_SlaveTimer_SetConfig+0xe8>
 8003bda:	2b50      	cmp	r3, #80	@ 0x50
 8003bdc:	d858      	bhi.n	8003c90 <TIM_SlaveTimer_SetConfig+0x110>
 8003bde:	2b40      	cmp	r3, #64	@ 0x40
 8003be0:	d019      	beq.n	8003c16 <TIM_SlaveTimer_SetConfig+0x96>
 8003be2:	2b40      	cmp	r3, #64	@ 0x40
 8003be4:	d854      	bhi.n	8003c90 <TIM_SlaveTimer_SetConfig+0x110>
 8003be6:	2b30      	cmp	r3, #48	@ 0x30
 8003be8:	d055      	beq.n	8003c96 <TIM_SlaveTimer_SetConfig+0x116>
 8003bea:	2b30      	cmp	r3, #48	@ 0x30
 8003bec:	d850      	bhi.n	8003c90 <TIM_SlaveTimer_SetConfig+0x110>
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d051      	beq.n	8003c96 <TIM_SlaveTimer_SetConfig+0x116>
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d84c      	bhi.n	8003c90 <TIM_SlaveTimer_SetConfig+0x110>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d04d      	beq.n	8003c96 <TIM_SlaveTimer_SetConfig+0x116>
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d04b      	beq.n	8003c96 <TIM_SlaveTimer_SetConfig+0x116>
 8003bfe:	e047      	b.n	8003c90 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003c10:	f000 f8be 	bl	8003d90 <TIM_ETR_SetConfig>
      break;
 8003c14:	e040      	b.n	8003c98 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d101      	bne.n	8003c22 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e03b      	b.n	8003c9a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a1a      	ldr	r2, [r3, #32]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c48:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	621a      	str	r2, [r3, #32]
      break;
 8003c66:	e017      	b.n	8003c98 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c74:	461a      	mov	r2, r3
 8003c76:	f000 f814 	bl	8003ca2 <TIM_TI1_ConfigInputStage>
      break;
 8003c7a:	e00d      	b.n	8003c98 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f000 f838 	bl	8003cfe <TIM_TI2_ConfigInputStage>
      break;
 8003c8e:	e003      	b.n	8003c98 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	75fb      	strb	r3, [r7, #23]
      break;
 8003c94:	e000      	b.n	8003c98 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003c96:	bf00      	nop
  }

  return status;
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b087      	sub	sp, #28
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f023 0201 	bic.w	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ccc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f023 030a 	bic.w	r3, r3, #10
 8003cde:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	621a      	str	r2, [r3, #32]
}
 8003cf4:	bf00      	nop
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b087      	sub	sp, #28
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f023 0210 	bic.w	r2, r3, #16
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	031b      	lsls	r3, r3, #12
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	621a      	str	r2, [r3, #32]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f043 0307 	orr.w	r3, r3, #7
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	609a      	str	r2, [r3, #8]
}
 8003d86:	bf00      	nop
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003daa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	021a      	lsls	r2, r3, #8
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	609a      	str	r2, [r3, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e046      	b.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a16      	ldr	r2, [pc, #88]	@ (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00e      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e34:	d009      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a12      	ldr	r2, [pc, #72]	@ (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a10      	ldr	r2, [pc, #64]	@ (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d10c      	bne.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40000400 	.word	0x40000400
 8003e88:	40000800 	.word	0x40000800

08003e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e042      	b.n	8003f24 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd ff38 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	@ 0x24
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fcff 	bl	80048d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d121      	bne.n	8003f8a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_UART_Transmit_IT+0x26>
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e01a      	b.n	8003f8c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	88fa      	ldrh	r2, [r7, #6]
 8003f60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	88fa      	ldrh	r2, [r7, #6]
 8003f66:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2221      	movs	r2, #33	@ 0x21
 8003f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f84:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
  }
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d112      	bne.n	8003fd6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_UART_Receive_IT+0x26>
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e00b      	b.n	8003fd8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 faad 	bl	800452c <UART_Start_Receive_IT>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	e000      	b.n	8003fd8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b0ba      	sub	sp, #232	@ 0xe8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800401e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10f      	bne.n	8004046 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <HAL_UART_IRQHandler+0x66>
 8004032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fb8a 	bl	8004758 <UART_Receive_IT>
      return;
 8004044:	e25b      	b.n	80044fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80de 	beq.w	800420c <HAL_UART_IRQHandler+0x22c>
 8004050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800405c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004060:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80d1 	beq.w	800420c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_UART_IRQHandler+0xae>
 8004076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800407a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_UART_IRQHandler+0xd2>
 800409a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	f043 0202 	orr.w	r2, r3, #2
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <HAL_UART_IRQHandler+0xf6>
 80040be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ce:	f043 0204 	orr.w	r2, r3, #4
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d011      	beq.n	8004106 <HAL_UART_IRQHandler+0x126>
 80040e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d105      	bne.n	80040fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f043 0208 	orr.w	r2, r3, #8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 81f2 	beq.w	80044f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_UART_IRQHandler+0x14e>
 800411c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fb15 	bl	8004758 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d103      	bne.n	800415a <HAL_UART_IRQHandler+0x17a>
 8004152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d04f      	beq.n	80041fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fa1f 	bl	800459e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d041      	beq.n	80041f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800418c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3314      	adds	r3, #20
 8004196:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800419a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800419e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1d9      	bne.n	800416e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d013      	beq.n	80041ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c6:	4a7e      	ldr	r2, [pc, #504]	@ (80043c0 <HAL_UART_IRQHandler+0x3e0>)
 80041c8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe f9e2 	bl	8002598 <HAL_DMA_Abort_IT>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041e4:	4610      	mov	r0, r2
 80041e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e8:	e00e      	b.n	8004208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f98a 	bl	8004504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f0:	e00a      	b.n	8004208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f986 	bl	8004504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f8:	e006      	b.n	8004208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f982 	bl	8004504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004206:	e175      	b.n	80044f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004208:	bf00      	nop
    return;
 800420a:	e173      	b.n	80044f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004210:	2b01      	cmp	r3, #1
 8004212:	f040 814f 	bne.w	80044b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8148 	beq.w	80044b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8141 	beq.w	80044b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 80b6 	beq.w	80043c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004264:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8145 	beq.w	80044f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004276:	429a      	cmp	r2, r3
 8004278:	f080 813e 	bcs.w	80044f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004282:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b20      	cmp	r3, #32
 800428c:	f000 8088 	beq.w	80043a0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042bc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1d9      	bne.n	8004290 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3314      	adds	r3, #20
 80042e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3314      	adds	r3, #20
 80042fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004300:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004304:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004308:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004312:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e1      	bne.n	80042dc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3314      	adds	r3, #20
 800431e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004328:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800432a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800432e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3314      	adds	r3, #20
 8004338:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800433c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800433e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004342:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800434a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e3      	bne.n	8004318 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	330c      	adds	r3, #12
 8004364:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800436e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004370:	f023 0310 	bic.w	r3, r3, #16
 8004374:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004382:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004384:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004388:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e3      	bne.n	800435e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe f8c0 	bl	8002520 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f8ad 	bl	8004516 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043bc:	e09c      	b.n	80044f8 <HAL_UART_IRQHandler+0x518>
 80043be:	bf00      	nop
 80043c0:	08004663 	.word	0x08004663
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 808e 	beq.w	80044fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8089 	beq.w	80044fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	330c      	adds	r3, #12
 80043f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004400:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800440e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004410:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004414:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800441c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e3      	bne.n	80043ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3314      	adds	r3, #20
 8004428:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	623b      	str	r3, [r7, #32]
   return(result);
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3314      	adds	r3, #20
 8004442:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004446:	633a      	str	r2, [r7, #48]	@ 0x30
 8004448:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800444c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e3      	bne.n	8004422 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	330c      	adds	r3, #12
 800446e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	60fb      	str	r3, [r7, #12]
   return(result);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0310 	bic.w	r3, r3, #16
 800447e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800448c:	61fa      	str	r2, [r7, #28]
 800448e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	69b9      	ldr	r1, [r7, #24]
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	617b      	str	r3, [r7, #20]
   return(result);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e3      	bne.n	8004468 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f832 	bl	8004516 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044b2:	e023      	b.n	80044fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <HAL_UART_IRQHandler+0x4f4>
 80044c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f8dc 	bl	800468a <UART_Transmit_IT>
    return;
 80044d2:	e014      	b.n	80044fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00e      	beq.n	80044fe <HAL_UART_IRQHandler+0x51e>
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f91b 	bl	8004728 <UART_EndTransmit_IT>
    return;
 80044f2:	e004      	b.n	80044fe <HAL_UART_IRQHandler+0x51e>
    return;
 80044f4:	bf00      	nop
 80044f6:	e002      	b.n	80044fe <HAL_UART_IRQHandler+0x51e>
      return;
 80044f8:	bf00      	nop
 80044fa:	e000      	b.n	80044fe <HAL_UART_IRQHandler+0x51e>
      return;
 80044fc:	bf00      	nop
  }
}
 80044fe:	37e8      	adds	r7, #232	@ 0xe8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	460b      	mov	r3, r1
 8004520:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	88fa      	ldrh	r2, [r7, #6]
 800454a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2222      	movs	r2, #34	@ 0x22
 8004556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004570:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0220 	orr.w	r2, r2, #32
 8004590:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800459e:	b480      	push	{r7}
 80045a0:	b095      	sub	sp, #84	@ 0x54
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80045c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e5      	bne.n	80045a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3314      	adds	r3, #20
 80045e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3314      	adds	r3, #20
 80045f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004600:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e5      	bne.n	80045da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	2b01      	cmp	r3, #1
 8004614:	d119      	bne.n	800464a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	60bb      	str	r3, [r7, #8]
   return(result);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f023 0310 	bic.w	r3, r3, #16
 800462c:	647b      	str	r3, [r7, #68]	@ 0x44
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004636:	61ba      	str	r2, [r7, #24]
 8004638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	6979      	ldr	r1, [r7, #20]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	613b      	str	r3, [r7, #16]
   return(result);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e5      	bne.n	8004616 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004658:	bf00      	nop
 800465a:	3754      	adds	r7, #84	@ 0x54
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr

08004662 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7ff ff41 	bl	8004504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800468a:	b480      	push	{r7}
 800468c:	b085      	sub	sp, #20
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b21      	cmp	r3, #33	@ 0x21
 800469c:	d13e      	bne.n	800471c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046a6:	d114      	bne.n	80046d2 <UART_Transmit_IT+0x48>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d110      	bne.n	80046d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	1c9a      	adds	r2, r3, #2
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	621a      	str	r2, [r3, #32]
 80046d0:	e008      	b.n	80046e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	1c59      	adds	r1, r3, #1
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6211      	str	r1, [r2, #32]
 80046dc:	781a      	ldrb	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4619      	mov	r1, r3
 80046f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10f      	bne.n	8004718 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004706:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004716:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	e000      	b.n	800471e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800471c:	2302      	movs	r3, #2
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800473e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7fd f801 	bl	8001750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08c      	sub	sp, #48	@ 0x30
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b22      	cmp	r3, #34	@ 0x22
 800476a:	f040 80ae 	bne.w	80048ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004776:	d117      	bne.n	80047a8 <UART_Receive_IT+0x50>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d113      	bne.n	80047a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004780:	2300      	movs	r3, #0
 8004782:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004788:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	b29b      	uxth	r3, r3
 8004792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004796:	b29a      	uxth	r2, r3
 8004798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	1c9a      	adds	r2, r3, #2
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80047a6:	e026      	b.n	80047f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ba:	d007      	beq.n	80047cc <UART_Receive_IT+0x74>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <UART_Receive_IT+0x82>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d106      	bne.n	80047da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	e008      	b.n	80047ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29b      	uxth	r3, r3
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	4619      	mov	r1, r3
 8004804:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004806:	2b00      	cmp	r3, #0
 8004808:	d15d      	bne.n	80048c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0220 	bic.w	r2, r2, #32
 8004818:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004828:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695a      	ldr	r2, [r3, #20]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484c:	2b01      	cmp	r3, #1
 800484e:	d135      	bne.n	80048bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	330c      	adds	r3, #12
 800485c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	613b      	str	r3, [r7, #16]
   return(result);
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f023 0310 	bic.w	r3, r3, #16
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	330c      	adds	r3, #12
 8004874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004876:	623a      	str	r2, [r7, #32]
 8004878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	69f9      	ldr	r1, [r7, #28]
 800487c:	6a3a      	ldr	r2, [r7, #32]
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	61bb      	str	r3, [r7, #24]
   return(result);
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e5      	bne.n	8004856 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b10      	cmp	r3, #16
 8004896:	d10a      	bne.n	80048ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff fe2e 	bl	8004516 <HAL_UARTEx_RxEventCallback>
 80048ba:	e002      	b.n	80048c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7fc ff0d 	bl	80016dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e002      	b.n	80048cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e000      	b.n	80048cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048ca:	2302      	movs	r3, #2
  }
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3730      	adds	r7, #48	@ 0x30
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800490e:	f023 030c 	bic.w	r3, r3, #12
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	430b      	orrs	r3, r1
 800491a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a2c      	ldr	r2, [pc, #176]	@ (80049e8 <UART_SetConfig+0x114>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d103      	bne.n	8004944 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800493c:	f7fe fe50 	bl	80035e0 <HAL_RCC_GetPCLK2Freq>
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	e002      	b.n	800494a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004944:	f7fe fe38 	bl	80035b8 <HAL_RCC_GetPCLK1Freq>
 8004948:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009a      	lsls	r2, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	4a22      	ldr	r2, [pc, #136]	@ (80049ec <UART_SetConfig+0x118>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	0119      	lsls	r1, r3, #4
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009a      	lsls	r2, r3, #2
 8004974:	441a      	add	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004980:	4b1a      	ldr	r3, [pc, #104]	@ (80049ec <UART_SetConfig+0x118>)
 8004982:	fba3 0302 	umull	r0, r3, r3, r2
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	2064      	movs	r0, #100	@ 0x64
 800498a:	fb00 f303 	mul.w	r3, r0, r3
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	3332      	adds	r3, #50	@ 0x32
 8004994:	4a15      	ldr	r2, [pc, #84]	@ (80049ec <UART_SetConfig+0x118>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049a0:	4419      	add	r1, r3
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009a      	lsls	r2, r3, #2
 80049ac:	441a      	add	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049b8:	4b0c      	ldr	r3, [pc, #48]	@ (80049ec <UART_SetConfig+0x118>)
 80049ba:	fba3 0302 	umull	r0, r3, r3, r2
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2064      	movs	r0, #100	@ 0x64
 80049c2:	fb00 f303 	mul.w	r3, r0, r3
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	3332      	adds	r3, #50	@ 0x32
 80049cc:	4a07      	ldr	r2, [pc, #28]	@ (80049ec <UART_SetConfig+0x118>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	f003 020f 	and.w	r2, r3, #15
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	440a      	add	r2, r1
 80049de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049e0:	bf00      	nop
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40013800 	.word	0x40013800
 80049ec:	51eb851f 	.word	0x51eb851f

080049f0 <__cvt>:
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f6:	461d      	mov	r5, r3
 80049f8:	bfbb      	ittet	lt
 80049fa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80049fe:	461d      	movlt	r5, r3
 8004a00:	2300      	movge	r3, #0
 8004a02:	232d      	movlt	r3, #45	@ 0x2d
 8004a04:	b088      	sub	sp, #32
 8004a06:	4614      	mov	r4, r2
 8004a08:	bfb8      	it	lt
 8004a0a:	4614      	movlt	r4, r2
 8004a0c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004a0e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004a10:	7013      	strb	r3, [r2, #0]
 8004a12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a14:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004a18:	f023 0820 	bic.w	r8, r3, #32
 8004a1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a20:	d005      	beq.n	8004a2e <__cvt+0x3e>
 8004a22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a26:	d100      	bne.n	8004a2a <__cvt+0x3a>
 8004a28:	3601      	adds	r6, #1
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e000      	b.n	8004a30 <__cvt+0x40>
 8004a2e:	2303      	movs	r3, #3
 8004a30:	aa07      	add	r2, sp, #28
 8004a32:	9204      	str	r2, [sp, #16]
 8004a34:	aa06      	add	r2, sp, #24
 8004a36:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a3a:	e9cd 3600 	strd	r3, r6, [sp]
 8004a3e:	4622      	mov	r2, r4
 8004a40:	462b      	mov	r3, r5
 8004a42:	f000 fe4d 	bl	80056e0 <_dtoa_r>
 8004a46:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004a4a:	4607      	mov	r7, r0
 8004a4c:	d119      	bne.n	8004a82 <__cvt+0x92>
 8004a4e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004a50:	07db      	lsls	r3, r3, #31
 8004a52:	d50e      	bpl.n	8004a72 <__cvt+0x82>
 8004a54:	eb00 0906 	add.w	r9, r0, r6
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	4629      	mov	r1, r5
 8004a60:	f7fb ffa2 	bl	80009a8 <__aeabi_dcmpeq>
 8004a64:	b108      	cbz	r0, 8004a6a <__cvt+0x7a>
 8004a66:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a6a:	2230      	movs	r2, #48	@ 0x30
 8004a6c:	9b07      	ldr	r3, [sp, #28]
 8004a6e:	454b      	cmp	r3, r9
 8004a70:	d31e      	bcc.n	8004ab0 <__cvt+0xc0>
 8004a72:	4638      	mov	r0, r7
 8004a74:	9b07      	ldr	r3, [sp, #28]
 8004a76:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004a78:	1bdb      	subs	r3, r3, r7
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	b008      	add	sp, #32
 8004a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a82:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a86:	eb00 0906 	add.w	r9, r0, r6
 8004a8a:	d1e5      	bne.n	8004a58 <__cvt+0x68>
 8004a8c:	7803      	ldrb	r3, [r0, #0]
 8004a8e:	2b30      	cmp	r3, #48	@ 0x30
 8004a90:	d10a      	bne.n	8004aa8 <__cvt+0xb8>
 8004a92:	2200      	movs	r2, #0
 8004a94:	2300      	movs	r3, #0
 8004a96:	4620      	mov	r0, r4
 8004a98:	4629      	mov	r1, r5
 8004a9a:	f7fb ff85 	bl	80009a8 <__aeabi_dcmpeq>
 8004a9e:	b918      	cbnz	r0, 8004aa8 <__cvt+0xb8>
 8004aa0:	f1c6 0601 	rsb	r6, r6, #1
 8004aa4:	f8ca 6000 	str.w	r6, [sl]
 8004aa8:	f8da 3000 	ldr.w	r3, [sl]
 8004aac:	4499      	add	r9, r3
 8004aae:	e7d3      	b.n	8004a58 <__cvt+0x68>
 8004ab0:	1c59      	adds	r1, r3, #1
 8004ab2:	9107      	str	r1, [sp, #28]
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	e7d9      	b.n	8004a6c <__cvt+0x7c>

08004ab8 <__exponent>:
 8004ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aba:	2900      	cmp	r1, #0
 8004abc:	bfb6      	itet	lt
 8004abe:	232d      	movlt	r3, #45	@ 0x2d
 8004ac0:	232b      	movge	r3, #43	@ 0x2b
 8004ac2:	4249      	neglt	r1, r1
 8004ac4:	2909      	cmp	r1, #9
 8004ac6:	7002      	strb	r2, [r0, #0]
 8004ac8:	7043      	strb	r3, [r0, #1]
 8004aca:	dd29      	ble.n	8004b20 <__exponent+0x68>
 8004acc:	f10d 0307 	add.w	r3, sp, #7
 8004ad0:	461d      	mov	r5, r3
 8004ad2:	270a      	movs	r7, #10
 8004ad4:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ad8:	461a      	mov	r2, r3
 8004ada:	fb07 1416 	mls	r4, r7, r6, r1
 8004ade:	3430      	adds	r4, #48	@ 0x30
 8004ae0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	2c63      	cmp	r4, #99	@ 0x63
 8004ae8:	4631      	mov	r1, r6
 8004aea:	f103 33ff 	add.w	r3, r3, #4294967295
 8004aee:	dcf1      	bgt.n	8004ad4 <__exponent+0x1c>
 8004af0:	3130      	adds	r1, #48	@ 0x30
 8004af2:	1e94      	subs	r4, r2, #2
 8004af4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004af8:	4623      	mov	r3, r4
 8004afa:	1c41      	adds	r1, r0, #1
 8004afc:	42ab      	cmp	r3, r5
 8004afe:	d30a      	bcc.n	8004b16 <__exponent+0x5e>
 8004b00:	f10d 0309 	add.w	r3, sp, #9
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	42ac      	cmp	r4, r5
 8004b08:	bf88      	it	hi
 8004b0a:	2300      	movhi	r3, #0
 8004b0c:	3302      	adds	r3, #2
 8004b0e:	4403      	add	r3, r0
 8004b10:	1a18      	subs	r0, r3, r0
 8004b12:	b003      	add	sp, #12
 8004b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b16:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004b1a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b1e:	e7ed      	b.n	8004afc <__exponent+0x44>
 8004b20:	2330      	movs	r3, #48	@ 0x30
 8004b22:	3130      	adds	r1, #48	@ 0x30
 8004b24:	7083      	strb	r3, [r0, #2]
 8004b26:	70c1      	strb	r1, [r0, #3]
 8004b28:	1d03      	adds	r3, r0, #4
 8004b2a:	e7f1      	b.n	8004b10 <__exponent+0x58>

08004b2c <_printf_float>:
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	b091      	sub	sp, #68	@ 0x44
 8004b32:	460c      	mov	r4, r1
 8004b34:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004b38:	4616      	mov	r6, r2
 8004b3a:	461f      	mov	r7, r3
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	f000 fcbf 	bl	80054c0 <_localeconv_r>
 8004b42:	6803      	ldr	r3, [r0, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	9308      	str	r3, [sp, #32]
 8004b48:	f7fb fb02 	bl	8000150 <strlen>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	930e      	str	r3, [sp, #56]	@ 0x38
 8004b50:	f8d8 3000 	ldr.w	r3, [r8]
 8004b54:	9009      	str	r0, [sp, #36]	@ 0x24
 8004b56:	3307      	adds	r3, #7
 8004b58:	f023 0307 	bic.w	r3, r3, #7
 8004b5c:	f103 0208 	add.w	r2, r3, #8
 8004b60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b64:	f8d4 b000 	ldr.w	fp, [r4]
 8004b68:	f8c8 2000 	str.w	r2, [r8]
 8004b6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b76:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b86:	4b9c      	ldr	r3, [pc, #624]	@ (8004df8 <_printf_float+0x2cc>)
 8004b88:	f7fb ff40 	bl	8000a0c <__aeabi_dcmpun>
 8004b8c:	bb70      	cbnz	r0, 8004bec <_printf_float+0xc0>
 8004b8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b92:	f04f 32ff 	mov.w	r2, #4294967295
 8004b96:	4b98      	ldr	r3, [pc, #608]	@ (8004df8 <_printf_float+0x2cc>)
 8004b98:	f7fb ff1a 	bl	80009d0 <__aeabi_dcmple>
 8004b9c:	bb30      	cbnz	r0, 8004bec <_printf_float+0xc0>
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	f7fb ff09 	bl	80009bc <__aeabi_dcmplt>
 8004baa:	b110      	cbz	r0, 8004bb2 <_printf_float+0x86>
 8004bac:	232d      	movs	r3, #45	@ 0x2d
 8004bae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bb2:	4a92      	ldr	r2, [pc, #584]	@ (8004dfc <_printf_float+0x2d0>)
 8004bb4:	4b92      	ldr	r3, [pc, #584]	@ (8004e00 <_printf_float+0x2d4>)
 8004bb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004bba:	bf8c      	ite	hi
 8004bbc:	4690      	movhi	r8, r2
 8004bbe:	4698      	movls	r8, r3
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	f04f 0900 	mov.w	r9, #0
 8004bc6:	6123      	str	r3, [r4, #16]
 8004bc8:	f02b 0304 	bic.w	r3, fp, #4
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	4633      	mov	r3, r6
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	9700      	str	r7, [sp, #0]
 8004bd6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004bd8:	f000 f9d4 	bl	8004f84 <_printf_common>
 8004bdc:	3001      	adds	r0, #1
 8004bde:	f040 8090 	bne.w	8004d02 <_printf_float+0x1d6>
 8004be2:	f04f 30ff 	mov.w	r0, #4294967295
 8004be6:	b011      	add	sp, #68	@ 0x44
 8004be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bec:	4642      	mov	r2, r8
 8004bee:	464b      	mov	r3, r9
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	f7fb ff0a 	bl	8000a0c <__aeabi_dcmpun>
 8004bf8:	b148      	cbz	r0, 8004c0e <_printf_float+0xe2>
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bfb8      	it	lt
 8004c00:	232d      	movlt	r3, #45	@ 0x2d
 8004c02:	4a80      	ldr	r2, [pc, #512]	@ (8004e04 <_printf_float+0x2d8>)
 8004c04:	bfb8      	it	lt
 8004c06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e08 <_printf_float+0x2dc>)
 8004c0c:	e7d3      	b.n	8004bb6 <_printf_float+0x8a>
 8004c0e:	6863      	ldr	r3, [r4, #4]
 8004c10:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	d13f      	bne.n	8004c98 <_printf_float+0x16c>
 8004c18:	2306      	movs	r3, #6
 8004c1a:	6063      	str	r3, [r4, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004c22:	6023      	str	r3, [r4, #0]
 8004c24:	9206      	str	r2, [sp, #24]
 8004c26:	aa0e      	add	r2, sp, #56	@ 0x38
 8004c28:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004c2c:	aa0d      	add	r2, sp, #52	@ 0x34
 8004c2e:	9203      	str	r2, [sp, #12]
 8004c30:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004c34:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004c38:	6863      	ldr	r3, [r4, #4]
 8004c3a:	4642      	mov	r2, r8
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	4628      	mov	r0, r5
 8004c40:	464b      	mov	r3, r9
 8004c42:	910a      	str	r1, [sp, #40]	@ 0x28
 8004c44:	f7ff fed4 	bl	80049f0 <__cvt>
 8004c48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c4a:	4680      	mov	r8, r0
 8004c4c:	2947      	cmp	r1, #71	@ 0x47
 8004c4e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004c50:	d128      	bne.n	8004ca4 <_printf_float+0x178>
 8004c52:	1cc8      	adds	r0, r1, #3
 8004c54:	db02      	blt.n	8004c5c <_printf_float+0x130>
 8004c56:	6863      	ldr	r3, [r4, #4]
 8004c58:	4299      	cmp	r1, r3
 8004c5a:	dd40      	ble.n	8004cde <_printf_float+0x1b2>
 8004c5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c60:	fa5f fa8a 	uxtb.w	sl, sl
 8004c64:	4652      	mov	r2, sl
 8004c66:	3901      	subs	r1, #1
 8004c68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c6c:	910d      	str	r1, [sp, #52]	@ 0x34
 8004c6e:	f7ff ff23 	bl	8004ab8 <__exponent>
 8004c72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c74:	4681      	mov	r9, r0
 8004c76:	1813      	adds	r3, r2, r0
 8004c78:	2a01      	cmp	r2, #1
 8004c7a:	6123      	str	r3, [r4, #16]
 8004c7c:	dc02      	bgt.n	8004c84 <_printf_float+0x158>
 8004c7e:	6822      	ldr	r2, [r4, #0]
 8004c80:	07d2      	lsls	r2, r2, #31
 8004c82:	d501      	bpl.n	8004c88 <_printf_float+0x15c>
 8004c84:	3301      	adds	r3, #1
 8004c86:	6123      	str	r3, [r4, #16]
 8004c88:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d09e      	beq.n	8004bce <_printf_float+0xa2>
 8004c90:	232d      	movs	r3, #45	@ 0x2d
 8004c92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c96:	e79a      	b.n	8004bce <_printf_float+0xa2>
 8004c98:	2947      	cmp	r1, #71	@ 0x47
 8004c9a:	d1bf      	bne.n	8004c1c <_printf_float+0xf0>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1bd      	bne.n	8004c1c <_printf_float+0xf0>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e7ba      	b.n	8004c1a <_printf_float+0xee>
 8004ca4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ca8:	d9dc      	bls.n	8004c64 <_printf_float+0x138>
 8004caa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004cae:	d118      	bne.n	8004ce2 <_printf_float+0x1b6>
 8004cb0:	2900      	cmp	r1, #0
 8004cb2:	6863      	ldr	r3, [r4, #4]
 8004cb4:	dd0b      	ble.n	8004cce <_printf_float+0x1a2>
 8004cb6:	6121      	str	r1, [r4, #16]
 8004cb8:	b913      	cbnz	r3, 8004cc0 <_printf_float+0x194>
 8004cba:	6822      	ldr	r2, [r4, #0]
 8004cbc:	07d0      	lsls	r0, r2, #31
 8004cbe:	d502      	bpl.n	8004cc6 <_printf_float+0x19a>
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	440b      	add	r3, r1
 8004cc4:	6123      	str	r3, [r4, #16]
 8004cc6:	f04f 0900 	mov.w	r9, #0
 8004cca:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ccc:	e7dc      	b.n	8004c88 <_printf_float+0x15c>
 8004cce:	b913      	cbnz	r3, 8004cd6 <_printf_float+0x1aa>
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	07d2      	lsls	r2, r2, #31
 8004cd4:	d501      	bpl.n	8004cda <_printf_float+0x1ae>
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	e7f4      	b.n	8004cc4 <_printf_float+0x198>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e7f2      	b.n	8004cc4 <_printf_float+0x198>
 8004cde:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ce4:	4299      	cmp	r1, r3
 8004ce6:	db05      	blt.n	8004cf4 <_printf_float+0x1c8>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	6121      	str	r1, [r4, #16]
 8004cec:	07d8      	lsls	r0, r3, #31
 8004cee:	d5ea      	bpl.n	8004cc6 <_printf_float+0x19a>
 8004cf0:	1c4b      	adds	r3, r1, #1
 8004cf2:	e7e7      	b.n	8004cc4 <_printf_float+0x198>
 8004cf4:	2900      	cmp	r1, #0
 8004cf6:	bfcc      	ite	gt
 8004cf8:	2201      	movgt	r2, #1
 8004cfa:	f1c1 0202 	rsble	r2, r1, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	e7e0      	b.n	8004cc4 <_printf_float+0x198>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	055a      	lsls	r2, r3, #21
 8004d06:	d407      	bmi.n	8004d18 <_printf_float+0x1ec>
 8004d08:	6923      	ldr	r3, [r4, #16]
 8004d0a:	4642      	mov	r2, r8
 8004d0c:	4631      	mov	r1, r6
 8004d0e:	4628      	mov	r0, r5
 8004d10:	47b8      	blx	r7
 8004d12:	3001      	adds	r0, #1
 8004d14:	d12b      	bne.n	8004d6e <_printf_float+0x242>
 8004d16:	e764      	b.n	8004be2 <_printf_float+0xb6>
 8004d18:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d1c:	f240 80dc 	bls.w	8004ed8 <_printf_float+0x3ac>
 8004d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d24:	2200      	movs	r2, #0
 8004d26:	2300      	movs	r3, #0
 8004d28:	f7fb fe3e 	bl	80009a8 <__aeabi_dcmpeq>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d033      	beq.n	8004d98 <_printf_float+0x26c>
 8004d30:	2301      	movs	r3, #1
 8004d32:	4631      	mov	r1, r6
 8004d34:	4628      	mov	r0, r5
 8004d36:	4a35      	ldr	r2, [pc, #212]	@ (8004e0c <_printf_float+0x2e0>)
 8004d38:	47b8      	blx	r7
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	f43f af51 	beq.w	8004be2 <_printf_float+0xb6>
 8004d40:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004d44:	4543      	cmp	r3, r8
 8004d46:	db02      	blt.n	8004d4e <_printf_float+0x222>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	07d8      	lsls	r0, r3, #31
 8004d4c:	d50f      	bpl.n	8004d6e <_printf_float+0x242>
 8004d4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d52:	4631      	mov	r1, r6
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b8      	blx	r7
 8004d58:	3001      	adds	r0, #1
 8004d5a:	f43f af42 	beq.w	8004be2 <_printf_float+0xb6>
 8004d5e:	f04f 0900 	mov.w	r9, #0
 8004d62:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d66:	f104 0a1a 	add.w	sl, r4, #26
 8004d6a:	45c8      	cmp	r8, r9
 8004d6c:	dc09      	bgt.n	8004d82 <_printf_float+0x256>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	079b      	lsls	r3, r3, #30
 8004d72:	f100 8102 	bmi.w	8004f7a <_printf_float+0x44e>
 8004d76:	68e0      	ldr	r0, [r4, #12]
 8004d78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d7a:	4298      	cmp	r0, r3
 8004d7c:	bfb8      	it	lt
 8004d7e:	4618      	movlt	r0, r3
 8004d80:	e731      	b.n	8004be6 <_printf_float+0xba>
 8004d82:	2301      	movs	r3, #1
 8004d84:	4652      	mov	r2, sl
 8004d86:	4631      	mov	r1, r6
 8004d88:	4628      	mov	r0, r5
 8004d8a:	47b8      	blx	r7
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	f43f af28 	beq.w	8004be2 <_printf_float+0xb6>
 8004d92:	f109 0901 	add.w	r9, r9, #1
 8004d96:	e7e8      	b.n	8004d6a <_printf_float+0x23e>
 8004d98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	dc38      	bgt.n	8004e10 <_printf_float+0x2e4>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4631      	mov	r1, r6
 8004da2:	4628      	mov	r0, r5
 8004da4:	4a19      	ldr	r2, [pc, #100]	@ (8004e0c <_printf_float+0x2e0>)
 8004da6:	47b8      	blx	r7
 8004da8:	3001      	adds	r0, #1
 8004daa:	f43f af1a 	beq.w	8004be2 <_printf_float+0xb6>
 8004dae:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004db2:	ea59 0303 	orrs.w	r3, r9, r3
 8004db6:	d102      	bne.n	8004dbe <_printf_float+0x292>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	07d9      	lsls	r1, r3, #31
 8004dbc:	d5d7      	bpl.n	8004d6e <_printf_float+0x242>
 8004dbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	47b8      	blx	r7
 8004dc8:	3001      	adds	r0, #1
 8004dca:	f43f af0a 	beq.w	8004be2 <_printf_float+0xb6>
 8004dce:	f04f 0a00 	mov.w	sl, #0
 8004dd2:	f104 0b1a 	add.w	fp, r4, #26
 8004dd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004dd8:	425b      	negs	r3, r3
 8004dda:	4553      	cmp	r3, sl
 8004ddc:	dc01      	bgt.n	8004de2 <_printf_float+0x2b6>
 8004dde:	464b      	mov	r3, r9
 8004de0:	e793      	b.n	8004d0a <_printf_float+0x1de>
 8004de2:	2301      	movs	r3, #1
 8004de4:	465a      	mov	r2, fp
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	f43f aef8 	beq.w	8004be2 <_printf_float+0xb6>
 8004df2:	f10a 0a01 	add.w	sl, sl, #1
 8004df6:	e7ee      	b.n	8004dd6 <_printf_float+0x2aa>
 8004df8:	7fefffff 	.word	0x7fefffff
 8004dfc:	08007356 	.word	0x08007356
 8004e00:	08007352 	.word	0x08007352
 8004e04:	0800735e 	.word	0x0800735e
 8004e08:	0800735a 	.word	0x0800735a
 8004e0c:	08007362 	.word	0x08007362
 8004e10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e12:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004e16:	4553      	cmp	r3, sl
 8004e18:	bfa8      	it	ge
 8004e1a:	4653      	movge	r3, sl
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	4699      	mov	r9, r3
 8004e20:	dc36      	bgt.n	8004e90 <_printf_float+0x364>
 8004e22:	f04f 0b00 	mov.w	fp, #0
 8004e26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e2a:	f104 021a 	add.w	r2, r4, #26
 8004e2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e30:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e32:	eba3 0309 	sub.w	r3, r3, r9
 8004e36:	455b      	cmp	r3, fp
 8004e38:	dc31      	bgt.n	8004e9e <_printf_float+0x372>
 8004e3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e3c:	459a      	cmp	sl, r3
 8004e3e:	dc3a      	bgt.n	8004eb6 <_printf_float+0x38a>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	07da      	lsls	r2, r3, #31
 8004e44:	d437      	bmi.n	8004eb6 <_printf_float+0x38a>
 8004e46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e48:	ebaa 0903 	sub.w	r9, sl, r3
 8004e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e4e:	ebaa 0303 	sub.w	r3, sl, r3
 8004e52:	4599      	cmp	r9, r3
 8004e54:	bfa8      	it	ge
 8004e56:	4699      	movge	r9, r3
 8004e58:	f1b9 0f00 	cmp.w	r9, #0
 8004e5c:	dc33      	bgt.n	8004ec6 <_printf_float+0x39a>
 8004e5e:	f04f 0800 	mov.w	r8, #0
 8004e62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e66:	f104 0b1a 	add.w	fp, r4, #26
 8004e6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e6c:	ebaa 0303 	sub.w	r3, sl, r3
 8004e70:	eba3 0309 	sub.w	r3, r3, r9
 8004e74:	4543      	cmp	r3, r8
 8004e76:	f77f af7a 	ble.w	8004d6e <_printf_float+0x242>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	465a      	mov	r2, fp
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b8      	blx	r7
 8004e84:	3001      	adds	r0, #1
 8004e86:	f43f aeac 	beq.w	8004be2 <_printf_float+0xb6>
 8004e8a:	f108 0801 	add.w	r8, r8, #1
 8004e8e:	e7ec      	b.n	8004e6a <_printf_float+0x33e>
 8004e90:	4642      	mov	r2, r8
 8004e92:	4631      	mov	r1, r6
 8004e94:	4628      	mov	r0, r5
 8004e96:	47b8      	blx	r7
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d1c2      	bne.n	8004e22 <_printf_float+0x2f6>
 8004e9c:	e6a1      	b.n	8004be2 <_printf_float+0xb6>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	920a      	str	r2, [sp, #40]	@ 0x28
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f43f ae9a 	beq.w	8004be2 <_printf_float+0xb6>
 8004eae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004eb0:	f10b 0b01 	add.w	fp, fp, #1
 8004eb4:	e7bb      	b.n	8004e2e <_printf_float+0x302>
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b8      	blx	r7
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d1c0      	bne.n	8004e46 <_printf_float+0x31a>
 8004ec4:	e68d      	b.n	8004be2 <_printf_float+0xb6>
 8004ec6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ec8:	464b      	mov	r3, r9
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4628      	mov	r0, r5
 8004ece:	4442      	add	r2, r8
 8004ed0:	47b8      	blx	r7
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d1c3      	bne.n	8004e5e <_printf_float+0x332>
 8004ed6:	e684      	b.n	8004be2 <_printf_float+0xb6>
 8004ed8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004edc:	f1ba 0f01 	cmp.w	sl, #1
 8004ee0:	dc01      	bgt.n	8004ee6 <_printf_float+0x3ba>
 8004ee2:	07db      	lsls	r3, r3, #31
 8004ee4:	d536      	bpl.n	8004f54 <_printf_float+0x428>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4642      	mov	r2, r8
 8004eea:	4631      	mov	r1, r6
 8004eec:	4628      	mov	r0, r5
 8004eee:	47b8      	blx	r7
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	f43f ae76 	beq.w	8004be2 <_printf_float+0xb6>
 8004ef6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004efa:	4631      	mov	r1, r6
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b8      	blx	r7
 8004f00:	3001      	adds	r0, #1
 8004f02:	f43f ae6e 	beq.w	8004be2 <_printf_float+0xb6>
 8004f06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f12:	f7fb fd49 	bl	80009a8 <__aeabi_dcmpeq>
 8004f16:	b9c0      	cbnz	r0, 8004f4a <_printf_float+0x41e>
 8004f18:	4653      	mov	r3, sl
 8004f1a:	f108 0201 	add.w	r2, r8, #1
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4628      	mov	r0, r5
 8004f22:	47b8      	blx	r7
 8004f24:	3001      	adds	r0, #1
 8004f26:	d10c      	bne.n	8004f42 <_printf_float+0x416>
 8004f28:	e65b      	b.n	8004be2 <_printf_float+0xb6>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	465a      	mov	r2, fp
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4628      	mov	r0, r5
 8004f32:	47b8      	blx	r7
 8004f34:	3001      	adds	r0, #1
 8004f36:	f43f ae54 	beq.w	8004be2 <_printf_float+0xb6>
 8004f3a:	f108 0801 	add.w	r8, r8, #1
 8004f3e:	45d0      	cmp	r8, sl
 8004f40:	dbf3      	blt.n	8004f2a <_printf_float+0x3fe>
 8004f42:	464b      	mov	r3, r9
 8004f44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004f48:	e6e0      	b.n	8004d0c <_printf_float+0x1e0>
 8004f4a:	f04f 0800 	mov.w	r8, #0
 8004f4e:	f104 0b1a 	add.w	fp, r4, #26
 8004f52:	e7f4      	b.n	8004f3e <_printf_float+0x412>
 8004f54:	2301      	movs	r3, #1
 8004f56:	4642      	mov	r2, r8
 8004f58:	e7e1      	b.n	8004f1e <_printf_float+0x3f2>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	464a      	mov	r2, r9
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4628      	mov	r0, r5
 8004f62:	47b8      	blx	r7
 8004f64:	3001      	adds	r0, #1
 8004f66:	f43f ae3c 	beq.w	8004be2 <_printf_float+0xb6>
 8004f6a:	f108 0801 	add.w	r8, r8, #1
 8004f6e:	68e3      	ldr	r3, [r4, #12]
 8004f70:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004f72:	1a5b      	subs	r3, r3, r1
 8004f74:	4543      	cmp	r3, r8
 8004f76:	dcf0      	bgt.n	8004f5a <_printf_float+0x42e>
 8004f78:	e6fd      	b.n	8004d76 <_printf_float+0x24a>
 8004f7a:	f04f 0800 	mov.w	r8, #0
 8004f7e:	f104 0919 	add.w	r9, r4, #25
 8004f82:	e7f4      	b.n	8004f6e <_printf_float+0x442>

08004f84 <_printf_common>:
 8004f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f88:	4616      	mov	r6, r2
 8004f8a:	4698      	mov	r8, r3
 8004f8c:	688a      	ldr	r2, [r1, #8]
 8004f8e:	690b      	ldr	r3, [r1, #16]
 8004f90:	4607      	mov	r7, r0
 8004f92:	4293      	cmp	r3, r2
 8004f94:	bfb8      	it	lt
 8004f96:	4613      	movlt	r3, r2
 8004f98:	6033      	str	r3, [r6, #0]
 8004f9a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fa4:	b10a      	cbz	r2, 8004faa <_printf_common+0x26>
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	6033      	str	r3, [r6, #0]
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	0699      	lsls	r1, r3, #26
 8004fae:	bf42      	ittt	mi
 8004fb0:	6833      	ldrmi	r3, [r6, #0]
 8004fb2:	3302      	addmi	r3, #2
 8004fb4:	6033      	strmi	r3, [r6, #0]
 8004fb6:	6825      	ldr	r5, [r4, #0]
 8004fb8:	f015 0506 	ands.w	r5, r5, #6
 8004fbc:	d106      	bne.n	8004fcc <_printf_common+0x48>
 8004fbe:	f104 0a19 	add.w	sl, r4, #25
 8004fc2:	68e3      	ldr	r3, [r4, #12]
 8004fc4:	6832      	ldr	r2, [r6, #0]
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	42ab      	cmp	r3, r5
 8004fca:	dc2b      	bgt.n	8005024 <_printf_common+0xa0>
 8004fcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fd0:	6822      	ldr	r2, [r4, #0]
 8004fd2:	3b00      	subs	r3, #0
 8004fd4:	bf18      	it	ne
 8004fd6:	2301      	movne	r3, #1
 8004fd8:	0692      	lsls	r2, r2, #26
 8004fda:	d430      	bmi.n	800503e <_printf_common+0xba>
 8004fdc:	4641      	mov	r1, r8
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fe4:	47c8      	blx	r9
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d023      	beq.n	8005032 <_printf_common+0xae>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	6922      	ldr	r2, [r4, #16]
 8004fee:	f003 0306 	and.w	r3, r3, #6
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	bf14      	ite	ne
 8004ff6:	2500      	movne	r5, #0
 8004ff8:	6833      	ldreq	r3, [r6, #0]
 8004ffa:	f04f 0600 	mov.w	r6, #0
 8004ffe:	bf08      	it	eq
 8005000:	68e5      	ldreq	r5, [r4, #12]
 8005002:	f104 041a 	add.w	r4, r4, #26
 8005006:	bf08      	it	eq
 8005008:	1aed      	subeq	r5, r5, r3
 800500a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800500e:	bf08      	it	eq
 8005010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005014:	4293      	cmp	r3, r2
 8005016:	bfc4      	itt	gt
 8005018:	1a9b      	subgt	r3, r3, r2
 800501a:	18ed      	addgt	r5, r5, r3
 800501c:	42b5      	cmp	r5, r6
 800501e:	d11a      	bne.n	8005056 <_printf_common+0xd2>
 8005020:	2000      	movs	r0, #0
 8005022:	e008      	b.n	8005036 <_printf_common+0xb2>
 8005024:	2301      	movs	r3, #1
 8005026:	4652      	mov	r2, sl
 8005028:	4641      	mov	r1, r8
 800502a:	4638      	mov	r0, r7
 800502c:	47c8      	blx	r9
 800502e:	3001      	adds	r0, #1
 8005030:	d103      	bne.n	800503a <_printf_common+0xb6>
 8005032:	f04f 30ff 	mov.w	r0, #4294967295
 8005036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503a:	3501      	adds	r5, #1
 800503c:	e7c1      	b.n	8004fc2 <_printf_common+0x3e>
 800503e:	2030      	movs	r0, #48	@ 0x30
 8005040:	18e1      	adds	r1, r4, r3
 8005042:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800504c:	4422      	add	r2, r4
 800504e:	3302      	adds	r3, #2
 8005050:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005054:	e7c2      	b.n	8004fdc <_printf_common+0x58>
 8005056:	2301      	movs	r3, #1
 8005058:	4622      	mov	r2, r4
 800505a:	4641      	mov	r1, r8
 800505c:	4638      	mov	r0, r7
 800505e:	47c8      	blx	r9
 8005060:	3001      	adds	r0, #1
 8005062:	d0e6      	beq.n	8005032 <_printf_common+0xae>
 8005064:	3601      	adds	r6, #1
 8005066:	e7d9      	b.n	800501c <_printf_common+0x98>

08005068 <_printf_i>:
 8005068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	7e0f      	ldrb	r7, [r1, #24]
 800506e:	4691      	mov	r9, r2
 8005070:	2f78      	cmp	r7, #120	@ 0x78
 8005072:	4680      	mov	r8, r0
 8005074:	460c      	mov	r4, r1
 8005076:	469a      	mov	sl, r3
 8005078:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800507a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800507e:	d807      	bhi.n	8005090 <_printf_i+0x28>
 8005080:	2f62      	cmp	r7, #98	@ 0x62
 8005082:	d80a      	bhi.n	800509a <_printf_i+0x32>
 8005084:	2f00      	cmp	r7, #0
 8005086:	f000 80d1 	beq.w	800522c <_printf_i+0x1c4>
 800508a:	2f58      	cmp	r7, #88	@ 0x58
 800508c:	f000 80b8 	beq.w	8005200 <_printf_i+0x198>
 8005090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005094:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005098:	e03a      	b.n	8005110 <_printf_i+0xa8>
 800509a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800509e:	2b15      	cmp	r3, #21
 80050a0:	d8f6      	bhi.n	8005090 <_printf_i+0x28>
 80050a2:	a101      	add	r1, pc, #4	@ (adr r1, 80050a8 <_printf_i+0x40>)
 80050a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050a8:	08005101 	.word	0x08005101
 80050ac:	08005115 	.word	0x08005115
 80050b0:	08005091 	.word	0x08005091
 80050b4:	08005091 	.word	0x08005091
 80050b8:	08005091 	.word	0x08005091
 80050bc:	08005091 	.word	0x08005091
 80050c0:	08005115 	.word	0x08005115
 80050c4:	08005091 	.word	0x08005091
 80050c8:	08005091 	.word	0x08005091
 80050cc:	08005091 	.word	0x08005091
 80050d0:	08005091 	.word	0x08005091
 80050d4:	08005213 	.word	0x08005213
 80050d8:	0800513f 	.word	0x0800513f
 80050dc:	080051cd 	.word	0x080051cd
 80050e0:	08005091 	.word	0x08005091
 80050e4:	08005091 	.word	0x08005091
 80050e8:	08005235 	.word	0x08005235
 80050ec:	08005091 	.word	0x08005091
 80050f0:	0800513f 	.word	0x0800513f
 80050f4:	08005091 	.word	0x08005091
 80050f8:	08005091 	.word	0x08005091
 80050fc:	080051d5 	.word	0x080051d5
 8005100:	6833      	ldr	r3, [r6, #0]
 8005102:	1d1a      	adds	r2, r3, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6032      	str	r2, [r6, #0]
 8005108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800510c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005110:	2301      	movs	r3, #1
 8005112:	e09c      	b.n	800524e <_printf_i+0x1e6>
 8005114:	6833      	ldr	r3, [r6, #0]
 8005116:	6820      	ldr	r0, [r4, #0]
 8005118:	1d19      	adds	r1, r3, #4
 800511a:	6031      	str	r1, [r6, #0]
 800511c:	0606      	lsls	r6, r0, #24
 800511e:	d501      	bpl.n	8005124 <_printf_i+0xbc>
 8005120:	681d      	ldr	r5, [r3, #0]
 8005122:	e003      	b.n	800512c <_printf_i+0xc4>
 8005124:	0645      	lsls	r5, r0, #25
 8005126:	d5fb      	bpl.n	8005120 <_printf_i+0xb8>
 8005128:	f9b3 5000 	ldrsh.w	r5, [r3]
 800512c:	2d00      	cmp	r5, #0
 800512e:	da03      	bge.n	8005138 <_printf_i+0xd0>
 8005130:	232d      	movs	r3, #45	@ 0x2d
 8005132:	426d      	negs	r5, r5
 8005134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005138:	230a      	movs	r3, #10
 800513a:	4858      	ldr	r0, [pc, #352]	@ (800529c <_printf_i+0x234>)
 800513c:	e011      	b.n	8005162 <_printf_i+0xfa>
 800513e:	6821      	ldr	r1, [r4, #0]
 8005140:	6833      	ldr	r3, [r6, #0]
 8005142:	0608      	lsls	r0, r1, #24
 8005144:	f853 5b04 	ldr.w	r5, [r3], #4
 8005148:	d402      	bmi.n	8005150 <_printf_i+0xe8>
 800514a:	0649      	lsls	r1, r1, #25
 800514c:	bf48      	it	mi
 800514e:	b2ad      	uxthmi	r5, r5
 8005150:	2f6f      	cmp	r7, #111	@ 0x6f
 8005152:	6033      	str	r3, [r6, #0]
 8005154:	bf14      	ite	ne
 8005156:	230a      	movne	r3, #10
 8005158:	2308      	moveq	r3, #8
 800515a:	4850      	ldr	r0, [pc, #320]	@ (800529c <_printf_i+0x234>)
 800515c:	2100      	movs	r1, #0
 800515e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005162:	6866      	ldr	r6, [r4, #4]
 8005164:	2e00      	cmp	r6, #0
 8005166:	60a6      	str	r6, [r4, #8]
 8005168:	db05      	blt.n	8005176 <_printf_i+0x10e>
 800516a:	6821      	ldr	r1, [r4, #0]
 800516c:	432e      	orrs	r6, r5
 800516e:	f021 0104 	bic.w	r1, r1, #4
 8005172:	6021      	str	r1, [r4, #0]
 8005174:	d04b      	beq.n	800520e <_printf_i+0x1a6>
 8005176:	4616      	mov	r6, r2
 8005178:	fbb5 f1f3 	udiv	r1, r5, r3
 800517c:	fb03 5711 	mls	r7, r3, r1, r5
 8005180:	5dc7      	ldrb	r7, [r0, r7]
 8005182:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005186:	462f      	mov	r7, r5
 8005188:	42bb      	cmp	r3, r7
 800518a:	460d      	mov	r5, r1
 800518c:	d9f4      	bls.n	8005178 <_printf_i+0x110>
 800518e:	2b08      	cmp	r3, #8
 8005190:	d10b      	bne.n	80051aa <_printf_i+0x142>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	07df      	lsls	r7, r3, #31
 8005196:	d508      	bpl.n	80051aa <_printf_i+0x142>
 8005198:	6923      	ldr	r3, [r4, #16]
 800519a:	6861      	ldr	r1, [r4, #4]
 800519c:	4299      	cmp	r1, r3
 800519e:	bfde      	ittt	le
 80051a0:	2330      	movle	r3, #48	@ 0x30
 80051a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051aa:	1b92      	subs	r2, r2, r6
 80051ac:	6122      	str	r2, [r4, #16]
 80051ae:	464b      	mov	r3, r9
 80051b0:	4621      	mov	r1, r4
 80051b2:	4640      	mov	r0, r8
 80051b4:	f8cd a000 	str.w	sl, [sp]
 80051b8:	aa03      	add	r2, sp, #12
 80051ba:	f7ff fee3 	bl	8004f84 <_printf_common>
 80051be:	3001      	adds	r0, #1
 80051c0:	d14a      	bne.n	8005258 <_printf_i+0x1f0>
 80051c2:	f04f 30ff 	mov.w	r0, #4294967295
 80051c6:	b004      	add	sp, #16
 80051c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	f043 0320 	orr.w	r3, r3, #32
 80051d2:	6023      	str	r3, [r4, #0]
 80051d4:	2778      	movs	r7, #120	@ 0x78
 80051d6:	4832      	ldr	r0, [pc, #200]	@ (80052a0 <_printf_i+0x238>)
 80051d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	6831      	ldr	r1, [r6, #0]
 80051e0:	061f      	lsls	r7, r3, #24
 80051e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80051e6:	d402      	bmi.n	80051ee <_printf_i+0x186>
 80051e8:	065f      	lsls	r7, r3, #25
 80051ea:	bf48      	it	mi
 80051ec:	b2ad      	uxthmi	r5, r5
 80051ee:	6031      	str	r1, [r6, #0]
 80051f0:	07d9      	lsls	r1, r3, #31
 80051f2:	bf44      	itt	mi
 80051f4:	f043 0320 	orrmi.w	r3, r3, #32
 80051f8:	6023      	strmi	r3, [r4, #0]
 80051fa:	b11d      	cbz	r5, 8005204 <_printf_i+0x19c>
 80051fc:	2310      	movs	r3, #16
 80051fe:	e7ad      	b.n	800515c <_printf_i+0xf4>
 8005200:	4826      	ldr	r0, [pc, #152]	@ (800529c <_printf_i+0x234>)
 8005202:	e7e9      	b.n	80051d8 <_printf_i+0x170>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	f023 0320 	bic.w	r3, r3, #32
 800520a:	6023      	str	r3, [r4, #0]
 800520c:	e7f6      	b.n	80051fc <_printf_i+0x194>
 800520e:	4616      	mov	r6, r2
 8005210:	e7bd      	b.n	800518e <_printf_i+0x126>
 8005212:	6833      	ldr	r3, [r6, #0]
 8005214:	6825      	ldr	r5, [r4, #0]
 8005216:	1d18      	adds	r0, r3, #4
 8005218:	6961      	ldr	r1, [r4, #20]
 800521a:	6030      	str	r0, [r6, #0]
 800521c:	062e      	lsls	r6, r5, #24
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	d501      	bpl.n	8005226 <_printf_i+0x1be>
 8005222:	6019      	str	r1, [r3, #0]
 8005224:	e002      	b.n	800522c <_printf_i+0x1c4>
 8005226:	0668      	lsls	r0, r5, #25
 8005228:	d5fb      	bpl.n	8005222 <_printf_i+0x1ba>
 800522a:	8019      	strh	r1, [r3, #0]
 800522c:	2300      	movs	r3, #0
 800522e:	4616      	mov	r6, r2
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	e7bc      	b.n	80051ae <_printf_i+0x146>
 8005234:	6833      	ldr	r3, [r6, #0]
 8005236:	2100      	movs	r1, #0
 8005238:	1d1a      	adds	r2, r3, #4
 800523a:	6032      	str	r2, [r6, #0]
 800523c:	681e      	ldr	r6, [r3, #0]
 800523e:	6862      	ldr	r2, [r4, #4]
 8005240:	4630      	mov	r0, r6
 8005242:	f000 f9b4 	bl	80055ae <memchr>
 8005246:	b108      	cbz	r0, 800524c <_printf_i+0x1e4>
 8005248:	1b80      	subs	r0, r0, r6
 800524a:	6060      	str	r0, [r4, #4]
 800524c:	6863      	ldr	r3, [r4, #4]
 800524e:	6123      	str	r3, [r4, #16]
 8005250:	2300      	movs	r3, #0
 8005252:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005256:	e7aa      	b.n	80051ae <_printf_i+0x146>
 8005258:	4632      	mov	r2, r6
 800525a:	4649      	mov	r1, r9
 800525c:	4640      	mov	r0, r8
 800525e:	6923      	ldr	r3, [r4, #16]
 8005260:	47d0      	blx	sl
 8005262:	3001      	adds	r0, #1
 8005264:	d0ad      	beq.n	80051c2 <_printf_i+0x15a>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	079b      	lsls	r3, r3, #30
 800526a:	d413      	bmi.n	8005294 <_printf_i+0x22c>
 800526c:	68e0      	ldr	r0, [r4, #12]
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	4298      	cmp	r0, r3
 8005272:	bfb8      	it	lt
 8005274:	4618      	movlt	r0, r3
 8005276:	e7a6      	b.n	80051c6 <_printf_i+0x15e>
 8005278:	2301      	movs	r3, #1
 800527a:	4632      	mov	r2, r6
 800527c:	4649      	mov	r1, r9
 800527e:	4640      	mov	r0, r8
 8005280:	47d0      	blx	sl
 8005282:	3001      	adds	r0, #1
 8005284:	d09d      	beq.n	80051c2 <_printf_i+0x15a>
 8005286:	3501      	adds	r5, #1
 8005288:	68e3      	ldr	r3, [r4, #12]
 800528a:	9903      	ldr	r1, [sp, #12]
 800528c:	1a5b      	subs	r3, r3, r1
 800528e:	42ab      	cmp	r3, r5
 8005290:	dcf2      	bgt.n	8005278 <_printf_i+0x210>
 8005292:	e7eb      	b.n	800526c <_printf_i+0x204>
 8005294:	2500      	movs	r5, #0
 8005296:	f104 0619 	add.w	r6, r4, #25
 800529a:	e7f5      	b.n	8005288 <_printf_i+0x220>
 800529c:	08007364 	.word	0x08007364
 80052a0:	08007375 	.word	0x08007375

080052a4 <std>:
 80052a4:	2300      	movs	r3, #0
 80052a6:	b510      	push	{r4, lr}
 80052a8:	4604      	mov	r4, r0
 80052aa:	e9c0 3300 	strd	r3, r3, [r0]
 80052ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052b2:	6083      	str	r3, [r0, #8]
 80052b4:	8181      	strh	r1, [r0, #12]
 80052b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80052b8:	81c2      	strh	r2, [r0, #14]
 80052ba:	6183      	str	r3, [r0, #24]
 80052bc:	4619      	mov	r1, r3
 80052be:	2208      	movs	r2, #8
 80052c0:	305c      	adds	r0, #92	@ 0x5c
 80052c2:	f000 f8f4 	bl	80054ae <memset>
 80052c6:	4b0d      	ldr	r3, [pc, #52]	@ (80052fc <std+0x58>)
 80052c8:	6224      	str	r4, [r4, #32]
 80052ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80052cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005300 <std+0x5c>)
 80052ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005304 <std+0x60>)
 80052d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <std+0x64>)
 80052d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80052d8:	4b0c      	ldr	r3, [pc, #48]	@ (800530c <std+0x68>)
 80052da:	429c      	cmp	r4, r3
 80052dc:	d006      	beq.n	80052ec <std+0x48>
 80052de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052e2:	4294      	cmp	r4, r2
 80052e4:	d002      	beq.n	80052ec <std+0x48>
 80052e6:	33d0      	adds	r3, #208	@ 0xd0
 80052e8:	429c      	cmp	r4, r3
 80052ea:	d105      	bne.n	80052f8 <std+0x54>
 80052ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f4:	f000 b958 	b.w	80055a8 <__retarget_lock_init_recursive>
 80052f8:	bd10      	pop	{r4, pc}
 80052fa:	bf00      	nop
 80052fc:	08005429 	.word	0x08005429
 8005300:	0800544b 	.word	0x0800544b
 8005304:	08005483 	.word	0x08005483
 8005308:	080054a7 	.word	0x080054a7
 800530c:	20000598 	.word	0x20000598

08005310 <stdio_exit_handler>:
 8005310:	4a02      	ldr	r2, [pc, #8]	@ (800531c <stdio_exit_handler+0xc>)
 8005312:	4903      	ldr	r1, [pc, #12]	@ (8005320 <stdio_exit_handler+0x10>)
 8005314:	4803      	ldr	r0, [pc, #12]	@ (8005324 <stdio_exit_handler+0x14>)
 8005316:	f000 b869 	b.w	80053ec <_fwalk_sglue>
 800531a:	bf00      	nop
 800531c:	2000000c 	.word	0x2000000c
 8005320:	08006c79 	.word	0x08006c79
 8005324:	2000001c 	.word	0x2000001c

08005328 <cleanup_stdio>:
 8005328:	6841      	ldr	r1, [r0, #4]
 800532a:	4b0c      	ldr	r3, [pc, #48]	@ (800535c <cleanup_stdio+0x34>)
 800532c:	b510      	push	{r4, lr}
 800532e:	4299      	cmp	r1, r3
 8005330:	4604      	mov	r4, r0
 8005332:	d001      	beq.n	8005338 <cleanup_stdio+0x10>
 8005334:	f001 fca0 	bl	8006c78 <_fflush_r>
 8005338:	68a1      	ldr	r1, [r4, #8]
 800533a:	4b09      	ldr	r3, [pc, #36]	@ (8005360 <cleanup_stdio+0x38>)
 800533c:	4299      	cmp	r1, r3
 800533e:	d002      	beq.n	8005346 <cleanup_stdio+0x1e>
 8005340:	4620      	mov	r0, r4
 8005342:	f001 fc99 	bl	8006c78 <_fflush_r>
 8005346:	68e1      	ldr	r1, [r4, #12]
 8005348:	4b06      	ldr	r3, [pc, #24]	@ (8005364 <cleanup_stdio+0x3c>)
 800534a:	4299      	cmp	r1, r3
 800534c:	d004      	beq.n	8005358 <cleanup_stdio+0x30>
 800534e:	4620      	mov	r0, r4
 8005350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005354:	f001 bc90 	b.w	8006c78 <_fflush_r>
 8005358:	bd10      	pop	{r4, pc}
 800535a:	bf00      	nop
 800535c:	20000598 	.word	0x20000598
 8005360:	20000600 	.word	0x20000600
 8005364:	20000668 	.word	0x20000668

08005368 <global_stdio_init.part.0>:
 8005368:	b510      	push	{r4, lr}
 800536a:	4b0b      	ldr	r3, [pc, #44]	@ (8005398 <global_stdio_init.part.0+0x30>)
 800536c:	4c0b      	ldr	r4, [pc, #44]	@ (800539c <global_stdio_init.part.0+0x34>)
 800536e:	4a0c      	ldr	r2, [pc, #48]	@ (80053a0 <global_stdio_init.part.0+0x38>)
 8005370:	4620      	mov	r0, r4
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	2104      	movs	r1, #4
 8005376:	2200      	movs	r2, #0
 8005378:	f7ff ff94 	bl	80052a4 <std>
 800537c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005380:	2201      	movs	r2, #1
 8005382:	2109      	movs	r1, #9
 8005384:	f7ff ff8e 	bl	80052a4 <std>
 8005388:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800538c:	2202      	movs	r2, #2
 800538e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005392:	2112      	movs	r1, #18
 8005394:	f7ff bf86 	b.w	80052a4 <std>
 8005398:	200006d0 	.word	0x200006d0
 800539c:	20000598 	.word	0x20000598
 80053a0:	08005311 	.word	0x08005311

080053a4 <__sfp_lock_acquire>:
 80053a4:	4801      	ldr	r0, [pc, #4]	@ (80053ac <__sfp_lock_acquire+0x8>)
 80053a6:	f000 b900 	b.w	80055aa <__retarget_lock_acquire_recursive>
 80053aa:	bf00      	nop
 80053ac:	200006d9 	.word	0x200006d9

080053b0 <__sfp_lock_release>:
 80053b0:	4801      	ldr	r0, [pc, #4]	@ (80053b8 <__sfp_lock_release+0x8>)
 80053b2:	f000 b8fb 	b.w	80055ac <__retarget_lock_release_recursive>
 80053b6:	bf00      	nop
 80053b8:	200006d9 	.word	0x200006d9

080053bc <__sinit>:
 80053bc:	b510      	push	{r4, lr}
 80053be:	4604      	mov	r4, r0
 80053c0:	f7ff fff0 	bl	80053a4 <__sfp_lock_acquire>
 80053c4:	6a23      	ldr	r3, [r4, #32]
 80053c6:	b11b      	cbz	r3, 80053d0 <__sinit+0x14>
 80053c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053cc:	f7ff bff0 	b.w	80053b0 <__sfp_lock_release>
 80053d0:	4b04      	ldr	r3, [pc, #16]	@ (80053e4 <__sinit+0x28>)
 80053d2:	6223      	str	r3, [r4, #32]
 80053d4:	4b04      	ldr	r3, [pc, #16]	@ (80053e8 <__sinit+0x2c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f5      	bne.n	80053c8 <__sinit+0xc>
 80053dc:	f7ff ffc4 	bl	8005368 <global_stdio_init.part.0>
 80053e0:	e7f2      	b.n	80053c8 <__sinit+0xc>
 80053e2:	bf00      	nop
 80053e4:	08005329 	.word	0x08005329
 80053e8:	200006d0 	.word	0x200006d0

080053ec <_fwalk_sglue>:
 80053ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053f0:	4607      	mov	r7, r0
 80053f2:	4688      	mov	r8, r1
 80053f4:	4614      	mov	r4, r2
 80053f6:	2600      	movs	r6, #0
 80053f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053fc:	f1b9 0901 	subs.w	r9, r9, #1
 8005400:	d505      	bpl.n	800540e <_fwalk_sglue+0x22>
 8005402:	6824      	ldr	r4, [r4, #0]
 8005404:	2c00      	cmp	r4, #0
 8005406:	d1f7      	bne.n	80053f8 <_fwalk_sglue+0xc>
 8005408:	4630      	mov	r0, r6
 800540a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800540e:	89ab      	ldrh	r3, [r5, #12]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d907      	bls.n	8005424 <_fwalk_sglue+0x38>
 8005414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005418:	3301      	adds	r3, #1
 800541a:	d003      	beq.n	8005424 <_fwalk_sglue+0x38>
 800541c:	4629      	mov	r1, r5
 800541e:	4638      	mov	r0, r7
 8005420:	47c0      	blx	r8
 8005422:	4306      	orrs	r6, r0
 8005424:	3568      	adds	r5, #104	@ 0x68
 8005426:	e7e9      	b.n	80053fc <_fwalk_sglue+0x10>

08005428 <__sread>:
 8005428:	b510      	push	{r4, lr}
 800542a:	460c      	mov	r4, r1
 800542c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005430:	f000 f86c 	bl	800550c <_read_r>
 8005434:	2800      	cmp	r0, #0
 8005436:	bfab      	itete	ge
 8005438:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800543a:	89a3      	ldrhlt	r3, [r4, #12]
 800543c:	181b      	addge	r3, r3, r0
 800543e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005442:	bfac      	ite	ge
 8005444:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005446:	81a3      	strhlt	r3, [r4, #12]
 8005448:	bd10      	pop	{r4, pc}

0800544a <__swrite>:
 800544a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800544e:	461f      	mov	r7, r3
 8005450:	898b      	ldrh	r3, [r1, #12]
 8005452:	4605      	mov	r5, r0
 8005454:	05db      	lsls	r3, r3, #23
 8005456:	460c      	mov	r4, r1
 8005458:	4616      	mov	r6, r2
 800545a:	d505      	bpl.n	8005468 <__swrite+0x1e>
 800545c:	2302      	movs	r3, #2
 800545e:	2200      	movs	r2, #0
 8005460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005464:	f000 f840 	bl	80054e8 <_lseek_r>
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	4632      	mov	r2, r6
 800546c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	4628      	mov	r0, r5
 8005474:	463b      	mov	r3, r7
 8005476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800547a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800547e:	f000 b857 	b.w	8005530 <_write_r>

08005482 <__sseek>:
 8005482:	b510      	push	{r4, lr}
 8005484:	460c      	mov	r4, r1
 8005486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548a:	f000 f82d 	bl	80054e8 <_lseek_r>
 800548e:	1c43      	adds	r3, r0, #1
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	bf15      	itete	ne
 8005494:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005496:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800549a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800549e:	81a3      	strheq	r3, [r4, #12]
 80054a0:	bf18      	it	ne
 80054a2:	81a3      	strhne	r3, [r4, #12]
 80054a4:	bd10      	pop	{r4, pc}

080054a6 <__sclose>:
 80054a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054aa:	f000 b80d 	b.w	80054c8 <_close_r>

080054ae <memset>:
 80054ae:	4603      	mov	r3, r0
 80054b0:	4402      	add	r2, r0
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d100      	bne.n	80054b8 <memset+0xa>
 80054b6:	4770      	bx	lr
 80054b8:	f803 1b01 	strb.w	r1, [r3], #1
 80054bc:	e7f9      	b.n	80054b2 <memset+0x4>
	...

080054c0 <_localeconv_r>:
 80054c0:	4800      	ldr	r0, [pc, #0]	@ (80054c4 <_localeconv_r+0x4>)
 80054c2:	4770      	bx	lr
 80054c4:	20000158 	.word	0x20000158

080054c8 <_close_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	2300      	movs	r3, #0
 80054cc:	4d05      	ldr	r5, [pc, #20]	@ (80054e4 <_close_r+0x1c>)
 80054ce:	4604      	mov	r4, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	f7fc fdc7 	bl	8002066 <_close>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d102      	bne.n	80054e2 <_close_r+0x1a>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	b103      	cbz	r3, 80054e2 <_close_r+0x1a>
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	200006d4 	.word	0x200006d4

080054e8 <_lseek_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4604      	mov	r4, r0
 80054ec:	4608      	mov	r0, r1
 80054ee:	4611      	mov	r1, r2
 80054f0:	2200      	movs	r2, #0
 80054f2:	4d05      	ldr	r5, [pc, #20]	@ (8005508 <_lseek_r+0x20>)
 80054f4:	602a      	str	r2, [r5, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f7fc fdd9 	bl	80020ae <_lseek>
 80054fc:	1c43      	adds	r3, r0, #1
 80054fe:	d102      	bne.n	8005506 <_lseek_r+0x1e>
 8005500:	682b      	ldr	r3, [r5, #0]
 8005502:	b103      	cbz	r3, 8005506 <_lseek_r+0x1e>
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	bd38      	pop	{r3, r4, r5, pc}
 8005508:	200006d4 	.word	0x200006d4

0800550c <_read_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4604      	mov	r4, r0
 8005510:	4608      	mov	r0, r1
 8005512:	4611      	mov	r1, r2
 8005514:	2200      	movs	r2, #0
 8005516:	4d05      	ldr	r5, [pc, #20]	@ (800552c <_read_r+0x20>)
 8005518:	602a      	str	r2, [r5, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	f7fc fd6a 	bl	8001ff4 <_read>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_read_r+0x1e>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_read_r+0x1e>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	200006d4 	.word	0x200006d4

08005530 <_write_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	4604      	mov	r4, r0
 8005534:	4608      	mov	r0, r1
 8005536:	4611      	mov	r1, r2
 8005538:	2200      	movs	r2, #0
 800553a:	4d05      	ldr	r5, [pc, #20]	@ (8005550 <_write_r+0x20>)
 800553c:	602a      	str	r2, [r5, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	f7fc fd75 	bl	800202e <_write>
 8005544:	1c43      	adds	r3, r0, #1
 8005546:	d102      	bne.n	800554e <_write_r+0x1e>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	b103      	cbz	r3, 800554e <_write_r+0x1e>
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	200006d4 	.word	0x200006d4

08005554 <__errno>:
 8005554:	4b01      	ldr	r3, [pc, #4]	@ (800555c <__errno+0x8>)
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20000018 	.word	0x20000018

08005560 <__libc_init_array>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	2600      	movs	r6, #0
 8005564:	4d0c      	ldr	r5, [pc, #48]	@ (8005598 <__libc_init_array+0x38>)
 8005566:	4c0d      	ldr	r4, [pc, #52]	@ (800559c <__libc_init_array+0x3c>)
 8005568:	1b64      	subs	r4, r4, r5
 800556a:	10a4      	asrs	r4, r4, #2
 800556c:	42a6      	cmp	r6, r4
 800556e:	d109      	bne.n	8005584 <__libc_init_array+0x24>
 8005570:	f001 fece 	bl	8007310 <_init>
 8005574:	2600      	movs	r6, #0
 8005576:	4d0a      	ldr	r5, [pc, #40]	@ (80055a0 <__libc_init_array+0x40>)
 8005578:	4c0a      	ldr	r4, [pc, #40]	@ (80055a4 <__libc_init_array+0x44>)
 800557a:	1b64      	subs	r4, r4, r5
 800557c:	10a4      	asrs	r4, r4, #2
 800557e:	42a6      	cmp	r6, r4
 8005580:	d105      	bne.n	800558e <__libc_init_array+0x2e>
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	f855 3b04 	ldr.w	r3, [r5], #4
 8005588:	4798      	blx	r3
 800558a:	3601      	adds	r6, #1
 800558c:	e7ee      	b.n	800556c <__libc_init_array+0xc>
 800558e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005592:	4798      	blx	r3
 8005594:	3601      	adds	r6, #1
 8005596:	e7f2      	b.n	800557e <__libc_init_array+0x1e>
 8005598:	080076cc 	.word	0x080076cc
 800559c:	080076cc 	.word	0x080076cc
 80055a0:	080076cc 	.word	0x080076cc
 80055a4:	080076d0 	.word	0x080076d0

080055a8 <__retarget_lock_init_recursive>:
 80055a8:	4770      	bx	lr

080055aa <__retarget_lock_acquire_recursive>:
 80055aa:	4770      	bx	lr

080055ac <__retarget_lock_release_recursive>:
 80055ac:	4770      	bx	lr

080055ae <memchr>:
 80055ae:	4603      	mov	r3, r0
 80055b0:	b510      	push	{r4, lr}
 80055b2:	b2c9      	uxtb	r1, r1
 80055b4:	4402      	add	r2, r0
 80055b6:	4293      	cmp	r3, r2
 80055b8:	4618      	mov	r0, r3
 80055ba:	d101      	bne.n	80055c0 <memchr+0x12>
 80055bc:	2000      	movs	r0, #0
 80055be:	e003      	b.n	80055c8 <memchr+0x1a>
 80055c0:	7804      	ldrb	r4, [r0, #0]
 80055c2:	3301      	adds	r3, #1
 80055c4:	428c      	cmp	r4, r1
 80055c6:	d1f6      	bne.n	80055b6 <memchr+0x8>
 80055c8:	bd10      	pop	{r4, pc}

080055ca <quorem>:
 80055ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ce:	6903      	ldr	r3, [r0, #16]
 80055d0:	690c      	ldr	r4, [r1, #16]
 80055d2:	4607      	mov	r7, r0
 80055d4:	42a3      	cmp	r3, r4
 80055d6:	db7e      	blt.n	80056d6 <quorem+0x10c>
 80055d8:	3c01      	subs	r4, #1
 80055da:	00a3      	lsls	r3, r4, #2
 80055dc:	f100 0514 	add.w	r5, r0, #20
 80055e0:	f101 0814 	add.w	r8, r1, #20
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055f4:	3301      	adds	r3, #1
 80055f6:	429a      	cmp	r2, r3
 80055f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80055fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005600:	d32e      	bcc.n	8005660 <quorem+0x96>
 8005602:	f04f 0a00 	mov.w	sl, #0
 8005606:	46c4      	mov	ip, r8
 8005608:	46ae      	mov	lr, r5
 800560a:	46d3      	mov	fp, sl
 800560c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005610:	b298      	uxth	r0, r3
 8005612:	fb06 a000 	mla	r0, r6, r0, sl
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	0c02      	lsrs	r2, r0, #16
 800561a:	fb06 2303 	mla	r3, r6, r3, r2
 800561e:	f8de 2000 	ldr.w	r2, [lr]
 8005622:	b280      	uxth	r0, r0
 8005624:	b292      	uxth	r2, r2
 8005626:	1a12      	subs	r2, r2, r0
 8005628:	445a      	add	r2, fp
 800562a:	f8de 0000 	ldr.w	r0, [lr]
 800562e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005632:	b29b      	uxth	r3, r3
 8005634:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005638:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800563c:	b292      	uxth	r2, r2
 800563e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005642:	45e1      	cmp	r9, ip
 8005644:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005648:	f84e 2b04 	str.w	r2, [lr], #4
 800564c:	d2de      	bcs.n	800560c <quorem+0x42>
 800564e:	9b00      	ldr	r3, [sp, #0]
 8005650:	58eb      	ldr	r3, [r5, r3]
 8005652:	b92b      	cbnz	r3, 8005660 <quorem+0x96>
 8005654:	9b01      	ldr	r3, [sp, #4]
 8005656:	3b04      	subs	r3, #4
 8005658:	429d      	cmp	r5, r3
 800565a:	461a      	mov	r2, r3
 800565c:	d32f      	bcc.n	80056be <quorem+0xf4>
 800565e:	613c      	str	r4, [r7, #16]
 8005660:	4638      	mov	r0, r7
 8005662:	f001 f981 	bl	8006968 <__mcmp>
 8005666:	2800      	cmp	r0, #0
 8005668:	db25      	blt.n	80056b6 <quorem+0xec>
 800566a:	4629      	mov	r1, r5
 800566c:	2000      	movs	r0, #0
 800566e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005672:	f8d1 c000 	ldr.w	ip, [r1]
 8005676:	fa1f fe82 	uxth.w	lr, r2
 800567a:	fa1f f38c 	uxth.w	r3, ip
 800567e:	eba3 030e 	sub.w	r3, r3, lr
 8005682:	4403      	add	r3, r0
 8005684:	0c12      	lsrs	r2, r2, #16
 8005686:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800568a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800568e:	b29b      	uxth	r3, r3
 8005690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005694:	45c1      	cmp	r9, r8
 8005696:	ea4f 4022 	mov.w	r0, r2, asr #16
 800569a:	f841 3b04 	str.w	r3, [r1], #4
 800569e:	d2e6      	bcs.n	800566e <quorem+0xa4>
 80056a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056a8:	b922      	cbnz	r2, 80056b4 <quorem+0xea>
 80056aa:	3b04      	subs	r3, #4
 80056ac:	429d      	cmp	r5, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	d30b      	bcc.n	80056ca <quorem+0x100>
 80056b2:	613c      	str	r4, [r7, #16]
 80056b4:	3601      	adds	r6, #1
 80056b6:	4630      	mov	r0, r6
 80056b8:	b003      	add	sp, #12
 80056ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	3b04      	subs	r3, #4
 80056c2:	2a00      	cmp	r2, #0
 80056c4:	d1cb      	bne.n	800565e <quorem+0x94>
 80056c6:	3c01      	subs	r4, #1
 80056c8:	e7c6      	b.n	8005658 <quorem+0x8e>
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	3b04      	subs	r3, #4
 80056ce:	2a00      	cmp	r2, #0
 80056d0:	d1ef      	bne.n	80056b2 <quorem+0xe8>
 80056d2:	3c01      	subs	r4, #1
 80056d4:	e7ea      	b.n	80056ac <quorem+0xe2>
 80056d6:	2000      	movs	r0, #0
 80056d8:	e7ee      	b.n	80056b8 <quorem+0xee>
 80056da:	0000      	movs	r0, r0
 80056dc:	0000      	movs	r0, r0
	...

080056e0 <_dtoa_r>:
 80056e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	4614      	mov	r4, r2
 80056e6:	461d      	mov	r5, r3
 80056e8:	69c7      	ldr	r7, [r0, #28]
 80056ea:	b097      	sub	sp, #92	@ 0x5c
 80056ec:	4681      	mov	r9, r0
 80056ee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80056f2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80056f4:	b97f      	cbnz	r7, 8005716 <_dtoa_r+0x36>
 80056f6:	2010      	movs	r0, #16
 80056f8:	f000 fe0e 	bl	8006318 <malloc>
 80056fc:	4602      	mov	r2, r0
 80056fe:	f8c9 001c 	str.w	r0, [r9, #28]
 8005702:	b920      	cbnz	r0, 800570e <_dtoa_r+0x2e>
 8005704:	21ef      	movs	r1, #239	@ 0xef
 8005706:	4bac      	ldr	r3, [pc, #688]	@ (80059b8 <_dtoa_r+0x2d8>)
 8005708:	48ac      	ldr	r0, [pc, #688]	@ (80059bc <_dtoa_r+0x2dc>)
 800570a:	f001 fafb 	bl	8006d04 <__assert_func>
 800570e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005712:	6007      	str	r7, [r0, #0]
 8005714:	60c7      	str	r7, [r0, #12]
 8005716:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800571a:	6819      	ldr	r1, [r3, #0]
 800571c:	b159      	cbz	r1, 8005736 <_dtoa_r+0x56>
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	2301      	movs	r3, #1
 8005722:	4093      	lsls	r3, r2
 8005724:	604a      	str	r2, [r1, #4]
 8005726:	608b      	str	r3, [r1, #8]
 8005728:	4648      	mov	r0, r9
 800572a:	f000 feeb 	bl	8006504 <_Bfree>
 800572e:	2200      	movs	r2, #0
 8005730:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	1e2b      	subs	r3, r5, #0
 8005738:	bfaf      	iteee	ge
 800573a:	2300      	movge	r3, #0
 800573c:	2201      	movlt	r2, #1
 800573e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005742:	9307      	strlt	r3, [sp, #28]
 8005744:	bfa8      	it	ge
 8005746:	6033      	strge	r3, [r6, #0]
 8005748:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800574c:	4b9c      	ldr	r3, [pc, #624]	@ (80059c0 <_dtoa_r+0x2e0>)
 800574e:	bfb8      	it	lt
 8005750:	6032      	strlt	r2, [r6, #0]
 8005752:	ea33 0308 	bics.w	r3, r3, r8
 8005756:	d112      	bne.n	800577e <_dtoa_r+0x9e>
 8005758:	f242 730f 	movw	r3, #9999	@ 0x270f
 800575c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005764:	4323      	orrs	r3, r4
 8005766:	f000 855e 	beq.w	8006226 <_dtoa_r+0xb46>
 800576a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800576c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80059c4 <_dtoa_r+0x2e4>
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8560 	beq.w	8006236 <_dtoa_r+0xb56>
 8005776:	f10a 0303 	add.w	r3, sl, #3
 800577a:	f000 bd5a 	b.w	8006232 <_dtoa_r+0xb52>
 800577e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005782:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800578a:	2200      	movs	r2, #0
 800578c:	2300      	movs	r3, #0
 800578e:	f7fb f90b 	bl	80009a8 <__aeabi_dcmpeq>
 8005792:	4607      	mov	r7, r0
 8005794:	b158      	cbz	r0, 80057ae <_dtoa_r+0xce>
 8005796:	2301      	movs	r3, #1
 8005798:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800579e:	b113      	cbz	r3, 80057a6 <_dtoa_r+0xc6>
 80057a0:	4b89      	ldr	r3, [pc, #548]	@ (80059c8 <_dtoa_r+0x2e8>)
 80057a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80059cc <_dtoa_r+0x2ec>
 80057aa:	f000 bd44 	b.w	8006236 <_dtoa_r+0xb56>
 80057ae:	ab14      	add	r3, sp, #80	@ 0x50
 80057b0:	9301      	str	r3, [sp, #4]
 80057b2:	ab15      	add	r3, sp, #84	@ 0x54
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	4648      	mov	r0, r9
 80057b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80057bc:	f001 f984 	bl	8006ac8 <__d2b>
 80057c0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80057c4:	9003      	str	r0, [sp, #12]
 80057c6:	2e00      	cmp	r6, #0
 80057c8:	d078      	beq.n	80058bc <_dtoa_r+0x1dc>
 80057ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057d0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80057d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80057dc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80057e0:	9712      	str	r7, [sp, #72]	@ 0x48
 80057e2:	4619      	mov	r1, r3
 80057e4:	2200      	movs	r2, #0
 80057e6:	4b7a      	ldr	r3, [pc, #488]	@ (80059d0 <_dtoa_r+0x2f0>)
 80057e8:	f7fa fcbe 	bl	8000168 <__aeabi_dsub>
 80057ec:	a36c      	add	r3, pc, #432	@ (adr r3, 80059a0 <_dtoa_r+0x2c0>)
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	f7fa fe71 	bl	80004d8 <__aeabi_dmul>
 80057f6:	a36c      	add	r3, pc, #432	@ (adr r3, 80059a8 <_dtoa_r+0x2c8>)
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	f7fa fcb6 	bl	800016c <__adddf3>
 8005800:	4604      	mov	r4, r0
 8005802:	4630      	mov	r0, r6
 8005804:	460d      	mov	r5, r1
 8005806:	f7fa fdfd 	bl	8000404 <__aeabi_i2d>
 800580a:	a369      	add	r3, pc, #420	@ (adr r3, 80059b0 <_dtoa_r+0x2d0>)
 800580c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005810:	f7fa fe62 	bl	80004d8 <__aeabi_dmul>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4620      	mov	r0, r4
 800581a:	4629      	mov	r1, r5
 800581c:	f7fa fca6 	bl	800016c <__adddf3>
 8005820:	4604      	mov	r4, r0
 8005822:	460d      	mov	r5, r1
 8005824:	f7fb f908 	bl	8000a38 <__aeabi_d2iz>
 8005828:	2200      	movs	r2, #0
 800582a:	4607      	mov	r7, r0
 800582c:	2300      	movs	r3, #0
 800582e:	4620      	mov	r0, r4
 8005830:	4629      	mov	r1, r5
 8005832:	f7fb f8c3 	bl	80009bc <__aeabi_dcmplt>
 8005836:	b140      	cbz	r0, 800584a <_dtoa_r+0x16a>
 8005838:	4638      	mov	r0, r7
 800583a:	f7fa fde3 	bl	8000404 <__aeabi_i2d>
 800583e:	4622      	mov	r2, r4
 8005840:	462b      	mov	r3, r5
 8005842:	f7fb f8b1 	bl	80009a8 <__aeabi_dcmpeq>
 8005846:	b900      	cbnz	r0, 800584a <_dtoa_r+0x16a>
 8005848:	3f01      	subs	r7, #1
 800584a:	2f16      	cmp	r7, #22
 800584c:	d854      	bhi.n	80058f8 <_dtoa_r+0x218>
 800584e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005852:	4b60      	ldr	r3, [pc, #384]	@ (80059d4 <_dtoa_r+0x2f4>)
 8005854:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	f7fb f8ae 	bl	80009bc <__aeabi_dcmplt>
 8005860:	2800      	cmp	r0, #0
 8005862:	d04b      	beq.n	80058fc <_dtoa_r+0x21c>
 8005864:	2300      	movs	r3, #0
 8005866:	3f01      	subs	r7, #1
 8005868:	930f      	str	r3, [sp, #60]	@ 0x3c
 800586a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800586c:	1b9b      	subs	r3, r3, r6
 800586e:	1e5a      	subs	r2, r3, #1
 8005870:	bf49      	itett	mi
 8005872:	f1c3 0301 	rsbmi	r3, r3, #1
 8005876:	2300      	movpl	r3, #0
 8005878:	9304      	strmi	r3, [sp, #16]
 800587a:	2300      	movmi	r3, #0
 800587c:	9209      	str	r2, [sp, #36]	@ 0x24
 800587e:	bf54      	ite	pl
 8005880:	9304      	strpl	r3, [sp, #16]
 8005882:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005884:	2f00      	cmp	r7, #0
 8005886:	db3b      	blt.n	8005900 <_dtoa_r+0x220>
 8005888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800588a:	970e      	str	r7, [sp, #56]	@ 0x38
 800588c:	443b      	add	r3, r7
 800588e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005890:	2300      	movs	r3, #0
 8005892:	930a      	str	r3, [sp, #40]	@ 0x28
 8005894:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005896:	2b09      	cmp	r3, #9
 8005898:	d865      	bhi.n	8005966 <_dtoa_r+0x286>
 800589a:	2b05      	cmp	r3, #5
 800589c:	bfc4      	itt	gt
 800589e:	3b04      	subgt	r3, #4
 80058a0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80058a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058a4:	bfc8      	it	gt
 80058a6:	2400      	movgt	r4, #0
 80058a8:	f1a3 0302 	sub.w	r3, r3, #2
 80058ac:	bfd8      	it	le
 80058ae:	2401      	movle	r4, #1
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d864      	bhi.n	800597e <_dtoa_r+0x29e>
 80058b4:	e8df f003 	tbb	[pc, r3]
 80058b8:	2c385553 	.word	0x2c385553
 80058bc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80058c0:	441e      	add	r6, r3
 80058c2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	bfc1      	itttt	gt
 80058ca:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80058ce:	fa08 f803 	lslgt.w	r8, r8, r3
 80058d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80058d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80058da:	bfd6      	itet	le
 80058dc:	f1c3 0320 	rsble	r3, r3, #32
 80058e0:	ea48 0003 	orrgt.w	r0, r8, r3
 80058e4:	fa04 f003 	lslle.w	r0, r4, r3
 80058e8:	f7fa fd7c 	bl	80003e4 <__aeabi_ui2d>
 80058ec:	2201      	movs	r2, #1
 80058ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80058f2:	3e01      	subs	r6, #1
 80058f4:	9212      	str	r2, [sp, #72]	@ 0x48
 80058f6:	e774      	b.n	80057e2 <_dtoa_r+0x102>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e7b5      	b.n	8005868 <_dtoa_r+0x188>
 80058fc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80058fe:	e7b4      	b.n	800586a <_dtoa_r+0x18a>
 8005900:	9b04      	ldr	r3, [sp, #16]
 8005902:	1bdb      	subs	r3, r3, r7
 8005904:	9304      	str	r3, [sp, #16]
 8005906:	427b      	negs	r3, r7
 8005908:	930a      	str	r3, [sp, #40]	@ 0x28
 800590a:	2300      	movs	r3, #0
 800590c:	930e      	str	r3, [sp, #56]	@ 0x38
 800590e:	e7c1      	b.n	8005894 <_dtoa_r+0x1b4>
 8005910:	2301      	movs	r3, #1
 8005912:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005914:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005916:	eb07 0b03 	add.w	fp, r7, r3
 800591a:	f10b 0301 	add.w	r3, fp, #1
 800591e:	2b01      	cmp	r3, #1
 8005920:	9308      	str	r3, [sp, #32]
 8005922:	bfb8      	it	lt
 8005924:	2301      	movlt	r3, #1
 8005926:	e006      	b.n	8005936 <_dtoa_r+0x256>
 8005928:	2301      	movs	r3, #1
 800592a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800592c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800592e:	2b00      	cmp	r3, #0
 8005930:	dd28      	ble.n	8005984 <_dtoa_r+0x2a4>
 8005932:	469b      	mov	fp, r3
 8005934:	9308      	str	r3, [sp, #32]
 8005936:	2100      	movs	r1, #0
 8005938:	2204      	movs	r2, #4
 800593a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800593e:	f102 0514 	add.w	r5, r2, #20
 8005942:	429d      	cmp	r5, r3
 8005944:	d926      	bls.n	8005994 <_dtoa_r+0x2b4>
 8005946:	6041      	str	r1, [r0, #4]
 8005948:	4648      	mov	r0, r9
 800594a:	f000 fd9b 	bl	8006484 <_Balloc>
 800594e:	4682      	mov	sl, r0
 8005950:	2800      	cmp	r0, #0
 8005952:	d143      	bne.n	80059dc <_dtoa_r+0x2fc>
 8005954:	4602      	mov	r2, r0
 8005956:	f240 11af 	movw	r1, #431	@ 0x1af
 800595a:	4b1f      	ldr	r3, [pc, #124]	@ (80059d8 <_dtoa_r+0x2f8>)
 800595c:	e6d4      	b.n	8005708 <_dtoa_r+0x28>
 800595e:	2300      	movs	r3, #0
 8005960:	e7e3      	b.n	800592a <_dtoa_r+0x24a>
 8005962:	2300      	movs	r3, #0
 8005964:	e7d5      	b.n	8005912 <_dtoa_r+0x232>
 8005966:	2401      	movs	r4, #1
 8005968:	2300      	movs	r3, #0
 800596a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800596c:	9320      	str	r3, [sp, #128]	@ 0x80
 800596e:	f04f 3bff 	mov.w	fp, #4294967295
 8005972:	2200      	movs	r2, #0
 8005974:	2312      	movs	r3, #18
 8005976:	f8cd b020 	str.w	fp, [sp, #32]
 800597a:	9221      	str	r2, [sp, #132]	@ 0x84
 800597c:	e7db      	b.n	8005936 <_dtoa_r+0x256>
 800597e:	2301      	movs	r3, #1
 8005980:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005982:	e7f4      	b.n	800596e <_dtoa_r+0x28e>
 8005984:	f04f 0b01 	mov.w	fp, #1
 8005988:	465b      	mov	r3, fp
 800598a:	f8cd b020 	str.w	fp, [sp, #32]
 800598e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005992:	e7d0      	b.n	8005936 <_dtoa_r+0x256>
 8005994:	3101      	adds	r1, #1
 8005996:	0052      	lsls	r2, r2, #1
 8005998:	e7d1      	b.n	800593e <_dtoa_r+0x25e>
 800599a:	bf00      	nop
 800599c:	f3af 8000 	nop.w
 80059a0:	636f4361 	.word	0x636f4361
 80059a4:	3fd287a7 	.word	0x3fd287a7
 80059a8:	8b60c8b3 	.word	0x8b60c8b3
 80059ac:	3fc68a28 	.word	0x3fc68a28
 80059b0:	509f79fb 	.word	0x509f79fb
 80059b4:	3fd34413 	.word	0x3fd34413
 80059b8:	08007393 	.word	0x08007393
 80059bc:	080073aa 	.word	0x080073aa
 80059c0:	7ff00000 	.word	0x7ff00000
 80059c4:	0800738f 	.word	0x0800738f
 80059c8:	08007363 	.word	0x08007363
 80059cc:	08007362 	.word	0x08007362
 80059d0:	3ff80000 	.word	0x3ff80000
 80059d4:	080074f8 	.word	0x080074f8
 80059d8:	08007402 	.word	0x08007402
 80059dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80059e0:	6018      	str	r0, [r3, #0]
 80059e2:	9b08      	ldr	r3, [sp, #32]
 80059e4:	2b0e      	cmp	r3, #14
 80059e6:	f200 80a1 	bhi.w	8005b2c <_dtoa_r+0x44c>
 80059ea:	2c00      	cmp	r4, #0
 80059ec:	f000 809e 	beq.w	8005b2c <_dtoa_r+0x44c>
 80059f0:	2f00      	cmp	r7, #0
 80059f2:	dd33      	ble.n	8005a5c <_dtoa_r+0x37c>
 80059f4:	4b9c      	ldr	r3, [pc, #624]	@ (8005c68 <_dtoa_r+0x588>)
 80059f6:	f007 020f 	and.w	r2, r7, #15
 80059fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059fe:	05f8      	lsls	r0, r7, #23
 8005a00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a04:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005a08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a0c:	d516      	bpl.n	8005a3c <_dtoa_r+0x35c>
 8005a0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a12:	4b96      	ldr	r3, [pc, #600]	@ (8005c6c <_dtoa_r+0x58c>)
 8005a14:	2603      	movs	r6, #3
 8005a16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a1a:	f7fa fe87 	bl	800072c <__aeabi_ddiv>
 8005a1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a22:	f004 040f 	and.w	r4, r4, #15
 8005a26:	4d91      	ldr	r5, [pc, #580]	@ (8005c6c <_dtoa_r+0x58c>)
 8005a28:	b954      	cbnz	r4, 8005a40 <_dtoa_r+0x360>
 8005a2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a32:	f7fa fe7b 	bl	800072c <__aeabi_ddiv>
 8005a36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a3a:	e028      	b.n	8005a8e <_dtoa_r+0x3ae>
 8005a3c:	2602      	movs	r6, #2
 8005a3e:	e7f2      	b.n	8005a26 <_dtoa_r+0x346>
 8005a40:	07e1      	lsls	r1, r4, #31
 8005a42:	d508      	bpl.n	8005a56 <_dtoa_r+0x376>
 8005a44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005a48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a4c:	f7fa fd44 	bl	80004d8 <__aeabi_dmul>
 8005a50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a54:	3601      	adds	r6, #1
 8005a56:	1064      	asrs	r4, r4, #1
 8005a58:	3508      	adds	r5, #8
 8005a5a:	e7e5      	b.n	8005a28 <_dtoa_r+0x348>
 8005a5c:	f000 80af 	beq.w	8005bbe <_dtoa_r+0x4de>
 8005a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a64:	427c      	negs	r4, r7
 8005a66:	4b80      	ldr	r3, [pc, #512]	@ (8005c68 <_dtoa_r+0x588>)
 8005a68:	f004 020f 	and.w	r2, r4, #15
 8005a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f7fa fd30 	bl	80004d8 <__aeabi_dmul>
 8005a78:	2602      	movs	r6, #2
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a80:	4d7a      	ldr	r5, [pc, #488]	@ (8005c6c <_dtoa_r+0x58c>)
 8005a82:	1124      	asrs	r4, r4, #4
 8005a84:	2c00      	cmp	r4, #0
 8005a86:	f040 808f 	bne.w	8005ba8 <_dtoa_r+0x4c8>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1d3      	bne.n	8005a36 <_dtoa_r+0x356>
 8005a8e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005a92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8094 	beq.w	8005bc2 <_dtoa_r+0x4e2>
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4b73      	ldr	r3, [pc, #460]	@ (8005c70 <_dtoa_r+0x590>)
 8005aa2:	f7fa ff8b 	bl	80009bc <__aeabi_dcmplt>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	f000 808b 	beq.w	8005bc2 <_dtoa_r+0x4e2>
 8005aac:	9b08      	ldr	r3, [sp, #32]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 8087 	beq.w	8005bc2 <_dtoa_r+0x4e2>
 8005ab4:	f1bb 0f00 	cmp.w	fp, #0
 8005ab8:	dd34      	ble.n	8005b24 <_dtoa_r+0x444>
 8005aba:	4620      	mov	r0, r4
 8005abc:	2200      	movs	r2, #0
 8005abe:	4629      	mov	r1, r5
 8005ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8005c74 <_dtoa_r+0x594>)
 8005ac2:	f7fa fd09 	bl	80004d8 <__aeabi_dmul>
 8005ac6:	465c      	mov	r4, fp
 8005ac8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005acc:	f107 38ff 	add.w	r8, r7, #4294967295
 8005ad0:	3601      	adds	r6, #1
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f7fa fc96 	bl	8000404 <__aeabi_i2d>
 8005ad8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005adc:	f7fa fcfc 	bl	80004d8 <__aeabi_dmul>
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4b65      	ldr	r3, [pc, #404]	@ (8005c78 <_dtoa_r+0x598>)
 8005ae4:	f7fa fb42 	bl	800016c <__adddf3>
 8005ae8:	4605      	mov	r5, r0
 8005aea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005aee:	2c00      	cmp	r4, #0
 8005af0:	d16a      	bne.n	8005bc8 <_dtoa_r+0x4e8>
 8005af2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005af6:	2200      	movs	r2, #0
 8005af8:	4b60      	ldr	r3, [pc, #384]	@ (8005c7c <_dtoa_r+0x59c>)
 8005afa:	f7fa fb35 	bl	8000168 <__aeabi_dsub>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b06:	462a      	mov	r2, r5
 8005b08:	4633      	mov	r3, r6
 8005b0a:	f7fa ff75 	bl	80009f8 <__aeabi_dcmpgt>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	f040 8298 	bne.w	8006044 <_dtoa_r+0x964>
 8005b14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b18:	462a      	mov	r2, r5
 8005b1a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b1e:	f7fa ff4d 	bl	80009bc <__aeabi_dcmplt>
 8005b22:	bb38      	cbnz	r0, 8005b74 <_dtoa_r+0x494>
 8005b24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b28:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005b2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f2c0 8157 	blt.w	8005de2 <_dtoa_r+0x702>
 8005b34:	2f0e      	cmp	r7, #14
 8005b36:	f300 8154 	bgt.w	8005de2 <_dtoa_r+0x702>
 8005b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005c68 <_dtoa_r+0x588>)
 8005b3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f280 80e5 	bge.w	8005d1a <_dtoa_r+0x63a>
 8005b50:	9b08      	ldr	r3, [sp, #32]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f300 80e1 	bgt.w	8005d1a <_dtoa_r+0x63a>
 8005b58:	d10c      	bne.n	8005b74 <_dtoa_r+0x494>
 8005b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	4b46      	ldr	r3, [pc, #280]	@ (8005c7c <_dtoa_r+0x59c>)
 8005b62:	f7fa fcb9 	bl	80004d8 <__aeabi_dmul>
 8005b66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b6a:	f7fa ff3b 	bl	80009e4 <__aeabi_dcmpge>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	f000 8266 	beq.w	8006040 <_dtoa_r+0x960>
 8005b74:	2400      	movs	r4, #0
 8005b76:	4625      	mov	r5, r4
 8005b78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b7a:	4656      	mov	r6, sl
 8005b7c:	ea6f 0803 	mvn.w	r8, r3
 8005b80:	2700      	movs	r7, #0
 8005b82:	4621      	mov	r1, r4
 8005b84:	4648      	mov	r0, r9
 8005b86:	f000 fcbd 	bl	8006504 <_Bfree>
 8005b8a:	2d00      	cmp	r5, #0
 8005b8c:	f000 80bd 	beq.w	8005d0a <_dtoa_r+0x62a>
 8005b90:	b12f      	cbz	r7, 8005b9e <_dtoa_r+0x4be>
 8005b92:	42af      	cmp	r7, r5
 8005b94:	d003      	beq.n	8005b9e <_dtoa_r+0x4be>
 8005b96:	4639      	mov	r1, r7
 8005b98:	4648      	mov	r0, r9
 8005b9a:	f000 fcb3 	bl	8006504 <_Bfree>
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	4648      	mov	r0, r9
 8005ba2:	f000 fcaf 	bl	8006504 <_Bfree>
 8005ba6:	e0b0      	b.n	8005d0a <_dtoa_r+0x62a>
 8005ba8:	07e2      	lsls	r2, r4, #31
 8005baa:	d505      	bpl.n	8005bb8 <_dtoa_r+0x4d8>
 8005bac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bb0:	f7fa fc92 	bl	80004d8 <__aeabi_dmul>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	3601      	adds	r6, #1
 8005bb8:	1064      	asrs	r4, r4, #1
 8005bba:	3508      	adds	r5, #8
 8005bbc:	e762      	b.n	8005a84 <_dtoa_r+0x3a4>
 8005bbe:	2602      	movs	r6, #2
 8005bc0:	e765      	b.n	8005a8e <_dtoa_r+0x3ae>
 8005bc2:	46b8      	mov	r8, r7
 8005bc4:	9c08      	ldr	r4, [sp, #32]
 8005bc6:	e784      	b.n	8005ad2 <_dtoa_r+0x3f2>
 8005bc8:	4b27      	ldr	r3, [pc, #156]	@ (8005c68 <_dtoa_r+0x588>)
 8005bca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005bcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bd4:	4454      	add	r4, sl
 8005bd6:	2900      	cmp	r1, #0
 8005bd8:	d054      	beq.n	8005c84 <_dtoa_r+0x5a4>
 8005bda:	2000      	movs	r0, #0
 8005bdc:	4928      	ldr	r1, [pc, #160]	@ (8005c80 <_dtoa_r+0x5a0>)
 8005bde:	f7fa fda5 	bl	800072c <__aeabi_ddiv>
 8005be2:	4633      	mov	r3, r6
 8005be4:	462a      	mov	r2, r5
 8005be6:	f7fa fabf 	bl	8000168 <__aeabi_dsub>
 8005bea:	4656      	mov	r6, sl
 8005bec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bf4:	f7fa ff20 	bl	8000a38 <__aeabi_d2iz>
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	f7fa fc03 	bl	8000404 <__aeabi_i2d>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c06:	f7fa faaf 	bl	8000168 <__aeabi_dsub>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	3530      	adds	r5, #48	@ 0x30
 8005c10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c18:	f806 5b01 	strb.w	r5, [r6], #1
 8005c1c:	f7fa fece 	bl	80009bc <__aeabi_dcmplt>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d172      	bne.n	8005d0a <_dtoa_r+0x62a>
 8005c24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c28:	2000      	movs	r0, #0
 8005c2a:	4911      	ldr	r1, [pc, #68]	@ (8005c70 <_dtoa_r+0x590>)
 8005c2c:	f7fa fa9c 	bl	8000168 <__aeabi_dsub>
 8005c30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c34:	f7fa fec2 	bl	80009bc <__aeabi_dcmplt>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	f040 80b4 	bne.w	8005da6 <_dtoa_r+0x6c6>
 8005c3e:	42a6      	cmp	r6, r4
 8005c40:	f43f af70 	beq.w	8005b24 <_dtoa_r+0x444>
 8005c44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c48:	2200      	movs	r2, #0
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c74 <_dtoa_r+0x594>)
 8005c4c:	f7fa fc44 	bl	80004d8 <__aeabi_dmul>
 8005c50:	2200      	movs	r2, #0
 8005c52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c5a:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <_dtoa_r+0x594>)
 8005c5c:	f7fa fc3c 	bl	80004d8 <__aeabi_dmul>
 8005c60:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c64:	e7c4      	b.n	8005bf0 <_dtoa_r+0x510>
 8005c66:	bf00      	nop
 8005c68:	080074f8 	.word	0x080074f8
 8005c6c:	080074d0 	.word	0x080074d0
 8005c70:	3ff00000 	.word	0x3ff00000
 8005c74:	40240000 	.word	0x40240000
 8005c78:	401c0000 	.word	0x401c0000
 8005c7c:	40140000 	.word	0x40140000
 8005c80:	3fe00000 	.word	0x3fe00000
 8005c84:	4631      	mov	r1, r6
 8005c86:	4628      	mov	r0, r5
 8005c88:	f7fa fc26 	bl	80004d8 <__aeabi_dmul>
 8005c8c:	4656      	mov	r6, sl
 8005c8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c92:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005c94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c98:	f7fa fece 	bl	8000a38 <__aeabi_d2iz>
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	f7fa fbb1 	bl	8000404 <__aeabi_i2d>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005caa:	f7fa fa5d 	bl	8000168 <__aeabi_dsub>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	3530      	adds	r5, #48	@ 0x30
 8005cb4:	f806 5b01 	strb.w	r5, [r6], #1
 8005cb8:	42a6      	cmp	r6, r4
 8005cba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	d124      	bne.n	8005d0e <_dtoa_r+0x62e>
 8005cc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cc8:	4bae      	ldr	r3, [pc, #696]	@ (8005f84 <_dtoa_r+0x8a4>)
 8005cca:	f7fa fa4f 	bl	800016c <__adddf3>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cd6:	f7fa fe8f 	bl	80009f8 <__aeabi_dcmpgt>
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	d163      	bne.n	8005da6 <_dtoa_r+0x6c6>
 8005cde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	49a7      	ldr	r1, [pc, #668]	@ (8005f84 <_dtoa_r+0x8a4>)
 8005ce6:	f7fa fa3f 	bl	8000168 <__aeabi_dsub>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cf2:	f7fa fe63 	bl	80009bc <__aeabi_dcmplt>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	f43f af14 	beq.w	8005b24 <_dtoa_r+0x444>
 8005cfc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005cfe:	1e73      	subs	r3, r6, #1
 8005d00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d06:	2b30      	cmp	r3, #48	@ 0x30
 8005d08:	d0f8      	beq.n	8005cfc <_dtoa_r+0x61c>
 8005d0a:	4647      	mov	r7, r8
 8005d0c:	e03b      	b.n	8005d86 <_dtoa_r+0x6a6>
 8005d0e:	4b9e      	ldr	r3, [pc, #632]	@ (8005f88 <_dtoa_r+0x8a8>)
 8005d10:	f7fa fbe2 	bl	80004d8 <__aeabi_dmul>
 8005d14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d18:	e7bc      	b.n	8005c94 <_dtoa_r+0x5b4>
 8005d1a:	4656      	mov	r6, sl
 8005d1c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d24:	4620      	mov	r0, r4
 8005d26:	4629      	mov	r1, r5
 8005d28:	f7fa fd00 	bl	800072c <__aeabi_ddiv>
 8005d2c:	f7fa fe84 	bl	8000a38 <__aeabi_d2iz>
 8005d30:	4680      	mov	r8, r0
 8005d32:	f7fa fb67 	bl	8000404 <__aeabi_i2d>
 8005d36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d3a:	f7fa fbcd 	bl	80004d8 <__aeabi_dmul>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4620      	mov	r0, r4
 8005d44:	4629      	mov	r1, r5
 8005d46:	f7fa fa0f 	bl	8000168 <__aeabi_dsub>
 8005d4a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005d4e:	9d08      	ldr	r5, [sp, #32]
 8005d50:	f806 4b01 	strb.w	r4, [r6], #1
 8005d54:	eba6 040a 	sub.w	r4, r6, sl
 8005d58:	42a5      	cmp	r5, r4
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	d133      	bne.n	8005dc8 <_dtoa_r+0x6e8>
 8005d60:	f7fa fa04 	bl	800016c <__adddf3>
 8005d64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d68:	4604      	mov	r4, r0
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	f7fa fe44 	bl	80009f8 <__aeabi_dcmpgt>
 8005d70:	b9c0      	cbnz	r0, 8005da4 <_dtoa_r+0x6c4>
 8005d72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa fe15 	bl	80009a8 <__aeabi_dcmpeq>
 8005d7e:	b110      	cbz	r0, 8005d86 <_dtoa_r+0x6a6>
 8005d80:	f018 0f01 	tst.w	r8, #1
 8005d84:	d10e      	bne.n	8005da4 <_dtoa_r+0x6c4>
 8005d86:	4648      	mov	r0, r9
 8005d88:	9903      	ldr	r1, [sp, #12]
 8005d8a:	f000 fbbb 	bl	8006504 <_Bfree>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	7033      	strb	r3, [r6, #0]
 8005d92:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005d94:	3701      	adds	r7, #1
 8005d96:	601f      	str	r7, [r3, #0]
 8005d98:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 824b 	beq.w	8006236 <_dtoa_r+0xb56>
 8005da0:	601e      	str	r6, [r3, #0]
 8005da2:	e248      	b.n	8006236 <_dtoa_r+0xb56>
 8005da4:	46b8      	mov	r8, r7
 8005da6:	4633      	mov	r3, r6
 8005da8:	461e      	mov	r6, r3
 8005daa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dae:	2a39      	cmp	r2, #57	@ 0x39
 8005db0:	d106      	bne.n	8005dc0 <_dtoa_r+0x6e0>
 8005db2:	459a      	cmp	sl, r3
 8005db4:	d1f8      	bne.n	8005da8 <_dtoa_r+0x6c8>
 8005db6:	2230      	movs	r2, #48	@ 0x30
 8005db8:	f108 0801 	add.w	r8, r8, #1
 8005dbc:	f88a 2000 	strb.w	r2, [sl]
 8005dc0:	781a      	ldrb	r2, [r3, #0]
 8005dc2:	3201      	adds	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	e7a0      	b.n	8005d0a <_dtoa_r+0x62a>
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4b6f      	ldr	r3, [pc, #444]	@ (8005f88 <_dtoa_r+0x8a8>)
 8005dcc:	f7fa fb84 	bl	80004d8 <__aeabi_dmul>
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	460d      	mov	r5, r1
 8005dd8:	f7fa fde6 	bl	80009a8 <__aeabi_dcmpeq>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d09f      	beq.n	8005d20 <_dtoa_r+0x640>
 8005de0:	e7d1      	b.n	8005d86 <_dtoa_r+0x6a6>
 8005de2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	f000 80ea 	beq.w	8005fbe <_dtoa_r+0x8de>
 8005dea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005dec:	2a01      	cmp	r2, #1
 8005dee:	f300 80cd 	bgt.w	8005f8c <_dtoa_r+0x8ac>
 8005df2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005df4:	2a00      	cmp	r2, #0
 8005df6:	f000 80c1 	beq.w	8005f7c <_dtoa_r+0x89c>
 8005dfa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005dfe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005e00:	9e04      	ldr	r6, [sp, #16]
 8005e02:	9a04      	ldr	r2, [sp, #16]
 8005e04:	2101      	movs	r1, #1
 8005e06:	441a      	add	r2, r3
 8005e08:	9204      	str	r2, [sp, #16]
 8005e0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e0c:	4648      	mov	r0, r9
 8005e0e:	441a      	add	r2, r3
 8005e10:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e12:	f000 fc2b 	bl	800666c <__i2b>
 8005e16:	4605      	mov	r5, r0
 8005e18:	b166      	cbz	r6, 8005e34 <_dtoa_r+0x754>
 8005e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	dd09      	ble.n	8005e34 <_dtoa_r+0x754>
 8005e20:	42b3      	cmp	r3, r6
 8005e22:	bfa8      	it	ge
 8005e24:	4633      	movge	r3, r6
 8005e26:	9a04      	ldr	r2, [sp, #16]
 8005e28:	1af6      	subs	r6, r6, r3
 8005e2a:	1ad2      	subs	r2, r2, r3
 8005e2c:	9204      	str	r2, [sp, #16]
 8005e2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e36:	b30b      	cbz	r3, 8005e7c <_dtoa_r+0x79c>
 8005e38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 80c6 	beq.w	8005fcc <_dtoa_r+0x8ec>
 8005e40:	2c00      	cmp	r4, #0
 8005e42:	f000 80c0 	beq.w	8005fc6 <_dtoa_r+0x8e6>
 8005e46:	4629      	mov	r1, r5
 8005e48:	4622      	mov	r2, r4
 8005e4a:	4648      	mov	r0, r9
 8005e4c:	f000 fcc6 	bl	80067dc <__pow5mult>
 8005e50:	9a03      	ldr	r2, [sp, #12]
 8005e52:	4601      	mov	r1, r0
 8005e54:	4605      	mov	r5, r0
 8005e56:	4648      	mov	r0, r9
 8005e58:	f000 fc1e 	bl	8006698 <__multiply>
 8005e5c:	9903      	ldr	r1, [sp, #12]
 8005e5e:	4680      	mov	r8, r0
 8005e60:	4648      	mov	r0, r9
 8005e62:	f000 fb4f 	bl	8006504 <_Bfree>
 8005e66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e68:	1b1b      	subs	r3, r3, r4
 8005e6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e6c:	f000 80b1 	beq.w	8005fd2 <_dtoa_r+0x8f2>
 8005e70:	4641      	mov	r1, r8
 8005e72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e74:	4648      	mov	r0, r9
 8005e76:	f000 fcb1 	bl	80067dc <__pow5mult>
 8005e7a:	9003      	str	r0, [sp, #12]
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	4648      	mov	r0, r9
 8005e80:	f000 fbf4 	bl	800666c <__i2b>
 8005e84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e86:	4604      	mov	r4, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 81d8 	beq.w	800623e <_dtoa_r+0xb5e>
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4601      	mov	r1, r0
 8005e92:	4648      	mov	r0, r9
 8005e94:	f000 fca2 	bl	80067dc <__pow5mult>
 8005e98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	f300 809f 	bgt.w	8005fe0 <_dtoa_r+0x900>
 8005ea2:	9b06      	ldr	r3, [sp, #24]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f040 8097 	bne.w	8005fd8 <_dtoa_r+0x8f8>
 8005eaa:	9b07      	ldr	r3, [sp, #28]
 8005eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f040 8093 	bne.w	8005fdc <_dtoa_r+0x8fc>
 8005eb6:	9b07      	ldr	r3, [sp, #28]
 8005eb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ebc:	0d1b      	lsrs	r3, r3, #20
 8005ebe:	051b      	lsls	r3, r3, #20
 8005ec0:	b133      	cbz	r3, 8005ed0 <_dtoa_r+0x7f0>
 8005ec2:	9b04      	ldr	r3, [sp, #16]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	9304      	str	r3, [sp, #16]
 8005ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eca:	3301      	adds	r3, #1
 8005ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ece:	2301      	movs	r3, #1
 8005ed0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 81b8 	beq.w	800624a <_dtoa_r+0xb6a>
 8005eda:	6923      	ldr	r3, [r4, #16]
 8005edc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ee0:	6918      	ldr	r0, [r3, #16]
 8005ee2:	f000 fb77 	bl	80065d4 <__hi0bits>
 8005ee6:	f1c0 0020 	rsb	r0, r0, #32
 8005eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eec:	4418      	add	r0, r3
 8005eee:	f010 001f 	ands.w	r0, r0, #31
 8005ef2:	f000 8082 	beq.w	8005ffa <_dtoa_r+0x91a>
 8005ef6:	f1c0 0320 	rsb	r3, r0, #32
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	dd73      	ble.n	8005fe6 <_dtoa_r+0x906>
 8005efe:	9b04      	ldr	r3, [sp, #16]
 8005f00:	f1c0 001c 	rsb	r0, r0, #28
 8005f04:	4403      	add	r3, r0
 8005f06:	9304      	str	r3, [sp, #16]
 8005f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f0a:	4406      	add	r6, r0
 8005f0c:	4403      	add	r3, r0
 8005f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f10:	9b04      	ldr	r3, [sp, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	dd05      	ble.n	8005f22 <_dtoa_r+0x842>
 8005f16:	461a      	mov	r2, r3
 8005f18:	4648      	mov	r0, r9
 8005f1a:	9903      	ldr	r1, [sp, #12]
 8005f1c:	f000 fcb8 	bl	8006890 <__lshift>
 8005f20:	9003      	str	r0, [sp, #12]
 8005f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	dd05      	ble.n	8005f34 <_dtoa_r+0x854>
 8005f28:	4621      	mov	r1, r4
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4648      	mov	r0, r9
 8005f2e:	f000 fcaf 	bl	8006890 <__lshift>
 8005f32:	4604      	mov	r4, r0
 8005f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d061      	beq.n	8005ffe <_dtoa_r+0x91e>
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	9803      	ldr	r0, [sp, #12]
 8005f3e:	f000 fd13 	bl	8006968 <__mcmp>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	da5b      	bge.n	8005ffe <_dtoa_r+0x91e>
 8005f46:	2300      	movs	r3, #0
 8005f48:	220a      	movs	r2, #10
 8005f4a:	4648      	mov	r0, r9
 8005f4c:	9903      	ldr	r1, [sp, #12]
 8005f4e:	f000 fafb 	bl	8006548 <__multadd>
 8005f52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f54:	f107 38ff 	add.w	r8, r7, #4294967295
 8005f58:	9003      	str	r0, [sp, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 8177 	beq.w	800624e <_dtoa_r+0xb6e>
 8005f60:	4629      	mov	r1, r5
 8005f62:	2300      	movs	r3, #0
 8005f64:	220a      	movs	r2, #10
 8005f66:	4648      	mov	r0, r9
 8005f68:	f000 faee 	bl	8006548 <__multadd>
 8005f6c:	f1bb 0f00 	cmp.w	fp, #0
 8005f70:	4605      	mov	r5, r0
 8005f72:	dc6f      	bgt.n	8006054 <_dtoa_r+0x974>
 8005f74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	dc49      	bgt.n	800600e <_dtoa_r+0x92e>
 8005f7a:	e06b      	b.n	8006054 <_dtoa_r+0x974>
 8005f7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f82:	e73c      	b.n	8005dfe <_dtoa_r+0x71e>
 8005f84:	3fe00000 	.word	0x3fe00000
 8005f88:	40240000 	.word	0x40240000
 8005f8c:	9b08      	ldr	r3, [sp, #32]
 8005f8e:	1e5c      	subs	r4, r3, #1
 8005f90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f92:	42a3      	cmp	r3, r4
 8005f94:	db09      	blt.n	8005faa <_dtoa_r+0x8ca>
 8005f96:	1b1c      	subs	r4, r3, r4
 8005f98:	9b08      	ldr	r3, [sp, #32]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f6bf af30 	bge.w	8005e00 <_dtoa_r+0x720>
 8005fa0:	9b04      	ldr	r3, [sp, #16]
 8005fa2:	9a08      	ldr	r2, [sp, #32]
 8005fa4:	1a9e      	subs	r6, r3, r2
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e72b      	b.n	8005e02 <_dtoa_r+0x722>
 8005faa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fae:	1ae3      	subs	r3, r4, r3
 8005fb0:	441a      	add	r2, r3
 8005fb2:	940a      	str	r4, [sp, #40]	@ 0x28
 8005fb4:	9e04      	ldr	r6, [sp, #16]
 8005fb6:	2400      	movs	r4, #0
 8005fb8:	9b08      	ldr	r3, [sp, #32]
 8005fba:	920e      	str	r2, [sp, #56]	@ 0x38
 8005fbc:	e721      	b.n	8005e02 <_dtoa_r+0x722>
 8005fbe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005fc0:	9e04      	ldr	r6, [sp, #16]
 8005fc2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005fc4:	e728      	b.n	8005e18 <_dtoa_r+0x738>
 8005fc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005fca:	e751      	b.n	8005e70 <_dtoa_r+0x790>
 8005fcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fce:	9903      	ldr	r1, [sp, #12]
 8005fd0:	e750      	b.n	8005e74 <_dtoa_r+0x794>
 8005fd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fd6:	e751      	b.n	8005e7c <_dtoa_r+0x79c>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e779      	b.n	8005ed0 <_dtoa_r+0x7f0>
 8005fdc:	9b06      	ldr	r3, [sp, #24]
 8005fde:	e777      	b.n	8005ed0 <_dtoa_r+0x7f0>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fe4:	e779      	b.n	8005eda <_dtoa_r+0x7fa>
 8005fe6:	d093      	beq.n	8005f10 <_dtoa_r+0x830>
 8005fe8:	9a04      	ldr	r2, [sp, #16]
 8005fea:	331c      	adds	r3, #28
 8005fec:	441a      	add	r2, r3
 8005fee:	9204      	str	r2, [sp, #16]
 8005ff0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ff2:	441e      	add	r6, r3
 8005ff4:	441a      	add	r2, r3
 8005ff6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ff8:	e78a      	b.n	8005f10 <_dtoa_r+0x830>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	e7f4      	b.n	8005fe8 <_dtoa_r+0x908>
 8005ffe:	9b08      	ldr	r3, [sp, #32]
 8006000:	46b8      	mov	r8, r7
 8006002:	2b00      	cmp	r3, #0
 8006004:	dc20      	bgt.n	8006048 <_dtoa_r+0x968>
 8006006:	469b      	mov	fp, r3
 8006008:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800600a:	2b02      	cmp	r3, #2
 800600c:	dd1e      	ble.n	800604c <_dtoa_r+0x96c>
 800600e:	f1bb 0f00 	cmp.w	fp, #0
 8006012:	f47f adb1 	bne.w	8005b78 <_dtoa_r+0x498>
 8006016:	4621      	mov	r1, r4
 8006018:	465b      	mov	r3, fp
 800601a:	2205      	movs	r2, #5
 800601c:	4648      	mov	r0, r9
 800601e:	f000 fa93 	bl	8006548 <__multadd>
 8006022:	4601      	mov	r1, r0
 8006024:	4604      	mov	r4, r0
 8006026:	9803      	ldr	r0, [sp, #12]
 8006028:	f000 fc9e 	bl	8006968 <__mcmp>
 800602c:	2800      	cmp	r0, #0
 800602e:	f77f ada3 	ble.w	8005b78 <_dtoa_r+0x498>
 8006032:	4656      	mov	r6, sl
 8006034:	2331      	movs	r3, #49	@ 0x31
 8006036:	f108 0801 	add.w	r8, r8, #1
 800603a:	f806 3b01 	strb.w	r3, [r6], #1
 800603e:	e59f      	b.n	8005b80 <_dtoa_r+0x4a0>
 8006040:	46b8      	mov	r8, r7
 8006042:	9c08      	ldr	r4, [sp, #32]
 8006044:	4625      	mov	r5, r4
 8006046:	e7f4      	b.n	8006032 <_dtoa_r+0x952>
 8006048:	f8dd b020 	ldr.w	fp, [sp, #32]
 800604c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 8101 	beq.w	8006256 <_dtoa_r+0xb76>
 8006054:	2e00      	cmp	r6, #0
 8006056:	dd05      	ble.n	8006064 <_dtoa_r+0x984>
 8006058:	4629      	mov	r1, r5
 800605a:	4632      	mov	r2, r6
 800605c:	4648      	mov	r0, r9
 800605e:	f000 fc17 	bl	8006890 <__lshift>
 8006062:	4605      	mov	r5, r0
 8006064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006066:	2b00      	cmp	r3, #0
 8006068:	d05c      	beq.n	8006124 <_dtoa_r+0xa44>
 800606a:	4648      	mov	r0, r9
 800606c:	6869      	ldr	r1, [r5, #4]
 800606e:	f000 fa09 	bl	8006484 <_Balloc>
 8006072:	4606      	mov	r6, r0
 8006074:	b928      	cbnz	r0, 8006082 <_dtoa_r+0x9a2>
 8006076:	4602      	mov	r2, r0
 8006078:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800607c:	4b80      	ldr	r3, [pc, #512]	@ (8006280 <_dtoa_r+0xba0>)
 800607e:	f7ff bb43 	b.w	8005708 <_dtoa_r+0x28>
 8006082:	692a      	ldr	r2, [r5, #16]
 8006084:	f105 010c 	add.w	r1, r5, #12
 8006088:	3202      	adds	r2, #2
 800608a:	0092      	lsls	r2, r2, #2
 800608c:	300c      	adds	r0, #12
 800608e:	f000 fe2b 	bl	8006ce8 <memcpy>
 8006092:	2201      	movs	r2, #1
 8006094:	4631      	mov	r1, r6
 8006096:	4648      	mov	r0, r9
 8006098:	f000 fbfa 	bl	8006890 <__lshift>
 800609c:	462f      	mov	r7, r5
 800609e:	4605      	mov	r5, r0
 80060a0:	f10a 0301 	add.w	r3, sl, #1
 80060a4:	9304      	str	r3, [sp, #16]
 80060a6:	eb0a 030b 	add.w	r3, sl, fp
 80060aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80060ac:	9b06      	ldr	r3, [sp, #24]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80060b4:	9b04      	ldr	r3, [sp, #16]
 80060b6:	4621      	mov	r1, r4
 80060b8:	9803      	ldr	r0, [sp, #12]
 80060ba:	f103 3bff 	add.w	fp, r3, #4294967295
 80060be:	f7ff fa84 	bl	80055ca <quorem>
 80060c2:	4603      	mov	r3, r0
 80060c4:	4639      	mov	r1, r7
 80060c6:	3330      	adds	r3, #48	@ 0x30
 80060c8:	9006      	str	r0, [sp, #24]
 80060ca:	9803      	ldr	r0, [sp, #12]
 80060cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060ce:	f000 fc4b 	bl	8006968 <__mcmp>
 80060d2:	462a      	mov	r2, r5
 80060d4:	9008      	str	r0, [sp, #32]
 80060d6:	4621      	mov	r1, r4
 80060d8:	4648      	mov	r0, r9
 80060da:	f000 fc61 	bl	80069a0 <__mdiff>
 80060de:	68c2      	ldr	r2, [r0, #12]
 80060e0:	4606      	mov	r6, r0
 80060e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060e4:	bb02      	cbnz	r2, 8006128 <_dtoa_r+0xa48>
 80060e6:	4601      	mov	r1, r0
 80060e8:	9803      	ldr	r0, [sp, #12]
 80060ea:	f000 fc3d 	bl	8006968 <__mcmp>
 80060ee:	4602      	mov	r2, r0
 80060f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060f2:	4631      	mov	r1, r6
 80060f4:	4648      	mov	r0, r9
 80060f6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80060fa:	f000 fa03 	bl	8006504 <_Bfree>
 80060fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006100:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006102:	9e04      	ldr	r6, [sp, #16]
 8006104:	ea42 0103 	orr.w	r1, r2, r3
 8006108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800610a:	4319      	orrs	r1, r3
 800610c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800610e:	d10d      	bne.n	800612c <_dtoa_r+0xa4c>
 8006110:	2b39      	cmp	r3, #57	@ 0x39
 8006112:	d027      	beq.n	8006164 <_dtoa_r+0xa84>
 8006114:	9a08      	ldr	r2, [sp, #32]
 8006116:	2a00      	cmp	r2, #0
 8006118:	dd01      	ble.n	800611e <_dtoa_r+0xa3e>
 800611a:	9b06      	ldr	r3, [sp, #24]
 800611c:	3331      	adds	r3, #49	@ 0x31
 800611e:	f88b 3000 	strb.w	r3, [fp]
 8006122:	e52e      	b.n	8005b82 <_dtoa_r+0x4a2>
 8006124:	4628      	mov	r0, r5
 8006126:	e7b9      	b.n	800609c <_dtoa_r+0x9bc>
 8006128:	2201      	movs	r2, #1
 800612a:	e7e2      	b.n	80060f2 <_dtoa_r+0xa12>
 800612c:	9908      	ldr	r1, [sp, #32]
 800612e:	2900      	cmp	r1, #0
 8006130:	db04      	blt.n	800613c <_dtoa_r+0xa5c>
 8006132:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006134:	4301      	orrs	r1, r0
 8006136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006138:	4301      	orrs	r1, r0
 800613a:	d120      	bne.n	800617e <_dtoa_r+0xa9e>
 800613c:	2a00      	cmp	r2, #0
 800613e:	ddee      	ble.n	800611e <_dtoa_r+0xa3e>
 8006140:	2201      	movs	r2, #1
 8006142:	9903      	ldr	r1, [sp, #12]
 8006144:	4648      	mov	r0, r9
 8006146:	9304      	str	r3, [sp, #16]
 8006148:	f000 fba2 	bl	8006890 <__lshift>
 800614c:	4621      	mov	r1, r4
 800614e:	9003      	str	r0, [sp, #12]
 8006150:	f000 fc0a 	bl	8006968 <__mcmp>
 8006154:	2800      	cmp	r0, #0
 8006156:	9b04      	ldr	r3, [sp, #16]
 8006158:	dc02      	bgt.n	8006160 <_dtoa_r+0xa80>
 800615a:	d1e0      	bne.n	800611e <_dtoa_r+0xa3e>
 800615c:	07da      	lsls	r2, r3, #31
 800615e:	d5de      	bpl.n	800611e <_dtoa_r+0xa3e>
 8006160:	2b39      	cmp	r3, #57	@ 0x39
 8006162:	d1da      	bne.n	800611a <_dtoa_r+0xa3a>
 8006164:	2339      	movs	r3, #57	@ 0x39
 8006166:	f88b 3000 	strb.w	r3, [fp]
 800616a:	4633      	mov	r3, r6
 800616c:	461e      	mov	r6, r3
 800616e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006172:	3b01      	subs	r3, #1
 8006174:	2a39      	cmp	r2, #57	@ 0x39
 8006176:	d04e      	beq.n	8006216 <_dtoa_r+0xb36>
 8006178:	3201      	adds	r2, #1
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	e501      	b.n	8005b82 <_dtoa_r+0x4a2>
 800617e:	2a00      	cmp	r2, #0
 8006180:	dd03      	ble.n	800618a <_dtoa_r+0xaaa>
 8006182:	2b39      	cmp	r3, #57	@ 0x39
 8006184:	d0ee      	beq.n	8006164 <_dtoa_r+0xa84>
 8006186:	3301      	adds	r3, #1
 8006188:	e7c9      	b.n	800611e <_dtoa_r+0xa3e>
 800618a:	9a04      	ldr	r2, [sp, #16]
 800618c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800618e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006192:	428a      	cmp	r2, r1
 8006194:	d028      	beq.n	80061e8 <_dtoa_r+0xb08>
 8006196:	2300      	movs	r3, #0
 8006198:	220a      	movs	r2, #10
 800619a:	9903      	ldr	r1, [sp, #12]
 800619c:	4648      	mov	r0, r9
 800619e:	f000 f9d3 	bl	8006548 <__multadd>
 80061a2:	42af      	cmp	r7, r5
 80061a4:	9003      	str	r0, [sp, #12]
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	f04f 020a 	mov.w	r2, #10
 80061ae:	4639      	mov	r1, r7
 80061b0:	4648      	mov	r0, r9
 80061b2:	d107      	bne.n	80061c4 <_dtoa_r+0xae4>
 80061b4:	f000 f9c8 	bl	8006548 <__multadd>
 80061b8:	4607      	mov	r7, r0
 80061ba:	4605      	mov	r5, r0
 80061bc:	9b04      	ldr	r3, [sp, #16]
 80061be:	3301      	adds	r3, #1
 80061c0:	9304      	str	r3, [sp, #16]
 80061c2:	e777      	b.n	80060b4 <_dtoa_r+0x9d4>
 80061c4:	f000 f9c0 	bl	8006548 <__multadd>
 80061c8:	4629      	mov	r1, r5
 80061ca:	4607      	mov	r7, r0
 80061cc:	2300      	movs	r3, #0
 80061ce:	220a      	movs	r2, #10
 80061d0:	4648      	mov	r0, r9
 80061d2:	f000 f9b9 	bl	8006548 <__multadd>
 80061d6:	4605      	mov	r5, r0
 80061d8:	e7f0      	b.n	80061bc <_dtoa_r+0xadc>
 80061da:	f1bb 0f00 	cmp.w	fp, #0
 80061de:	bfcc      	ite	gt
 80061e0:	465e      	movgt	r6, fp
 80061e2:	2601      	movle	r6, #1
 80061e4:	2700      	movs	r7, #0
 80061e6:	4456      	add	r6, sl
 80061e8:	2201      	movs	r2, #1
 80061ea:	9903      	ldr	r1, [sp, #12]
 80061ec:	4648      	mov	r0, r9
 80061ee:	9304      	str	r3, [sp, #16]
 80061f0:	f000 fb4e 	bl	8006890 <__lshift>
 80061f4:	4621      	mov	r1, r4
 80061f6:	9003      	str	r0, [sp, #12]
 80061f8:	f000 fbb6 	bl	8006968 <__mcmp>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	dcb4      	bgt.n	800616a <_dtoa_r+0xa8a>
 8006200:	d102      	bne.n	8006208 <_dtoa_r+0xb28>
 8006202:	9b04      	ldr	r3, [sp, #16]
 8006204:	07db      	lsls	r3, r3, #31
 8006206:	d4b0      	bmi.n	800616a <_dtoa_r+0xa8a>
 8006208:	4633      	mov	r3, r6
 800620a:	461e      	mov	r6, r3
 800620c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006210:	2a30      	cmp	r2, #48	@ 0x30
 8006212:	d0fa      	beq.n	800620a <_dtoa_r+0xb2a>
 8006214:	e4b5      	b.n	8005b82 <_dtoa_r+0x4a2>
 8006216:	459a      	cmp	sl, r3
 8006218:	d1a8      	bne.n	800616c <_dtoa_r+0xa8c>
 800621a:	2331      	movs	r3, #49	@ 0x31
 800621c:	f108 0801 	add.w	r8, r8, #1
 8006220:	f88a 3000 	strb.w	r3, [sl]
 8006224:	e4ad      	b.n	8005b82 <_dtoa_r+0x4a2>
 8006226:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006228:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006284 <_dtoa_r+0xba4>
 800622c:	b11b      	cbz	r3, 8006236 <_dtoa_r+0xb56>
 800622e:	f10a 0308 	add.w	r3, sl, #8
 8006232:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	4650      	mov	r0, sl
 8006238:	b017      	add	sp, #92	@ 0x5c
 800623a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006240:	2b01      	cmp	r3, #1
 8006242:	f77f ae2e 	ble.w	8005ea2 <_dtoa_r+0x7c2>
 8006246:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006248:	930a      	str	r3, [sp, #40]	@ 0x28
 800624a:	2001      	movs	r0, #1
 800624c:	e64d      	b.n	8005eea <_dtoa_r+0x80a>
 800624e:	f1bb 0f00 	cmp.w	fp, #0
 8006252:	f77f aed9 	ble.w	8006008 <_dtoa_r+0x928>
 8006256:	4656      	mov	r6, sl
 8006258:	4621      	mov	r1, r4
 800625a:	9803      	ldr	r0, [sp, #12]
 800625c:	f7ff f9b5 	bl	80055ca <quorem>
 8006260:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006264:	f806 3b01 	strb.w	r3, [r6], #1
 8006268:	eba6 020a 	sub.w	r2, r6, sl
 800626c:	4593      	cmp	fp, r2
 800626e:	ddb4      	ble.n	80061da <_dtoa_r+0xafa>
 8006270:	2300      	movs	r3, #0
 8006272:	220a      	movs	r2, #10
 8006274:	4648      	mov	r0, r9
 8006276:	9903      	ldr	r1, [sp, #12]
 8006278:	f000 f966 	bl	8006548 <__multadd>
 800627c:	9003      	str	r0, [sp, #12]
 800627e:	e7eb      	b.n	8006258 <_dtoa_r+0xb78>
 8006280:	08007402 	.word	0x08007402
 8006284:	08007386 	.word	0x08007386

08006288 <_free_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	4605      	mov	r5, r0
 800628c:	2900      	cmp	r1, #0
 800628e:	d040      	beq.n	8006312 <_free_r+0x8a>
 8006290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006294:	1f0c      	subs	r4, r1, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	bfb8      	it	lt
 800629a:	18e4      	addlt	r4, r4, r3
 800629c:	f000 f8e6 	bl	800646c <__malloc_lock>
 80062a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006314 <_free_r+0x8c>)
 80062a2:	6813      	ldr	r3, [r2, #0]
 80062a4:	b933      	cbnz	r3, 80062b4 <_free_r+0x2c>
 80062a6:	6063      	str	r3, [r4, #4]
 80062a8:	6014      	str	r4, [r2, #0]
 80062aa:	4628      	mov	r0, r5
 80062ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062b0:	f000 b8e2 	b.w	8006478 <__malloc_unlock>
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	d908      	bls.n	80062ca <_free_r+0x42>
 80062b8:	6820      	ldr	r0, [r4, #0]
 80062ba:	1821      	adds	r1, r4, r0
 80062bc:	428b      	cmp	r3, r1
 80062be:	bf01      	itttt	eq
 80062c0:	6819      	ldreq	r1, [r3, #0]
 80062c2:	685b      	ldreq	r3, [r3, #4]
 80062c4:	1809      	addeq	r1, r1, r0
 80062c6:	6021      	streq	r1, [r4, #0]
 80062c8:	e7ed      	b.n	80062a6 <_free_r+0x1e>
 80062ca:	461a      	mov	r2, r3
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	b10b      	cbz	r3, 80062d4 <_free_r+0x4c>
 80062d0:	42a3      	cmp	r3, r4
 80062d2:	d9fa      	bls.n	80062ca <_free_r+0x42>
 80062d4:	6811      	ldr	r1, [r2, #0]
 80062d6:	1850      	adds	r0, r2, r1
 80062d8:	42a0      	cmp	r0, r4
 80062da:	d10b      	bne.n	80062f4 <_free_r+0x6c>
 80062dc:	6820      	ldr	r0, [r4, #0]
 80062de:	4401      	add	r1, r0
 80062e0:	1850      	adds	r0, r2, r1
 80062e2:	4283      	cmp	r3, r0
 80062e4:	6011      	str	r1, [r2, #0]
 80062e6:	d1e0      	bne.n	80062aa <_free_r+0x22>
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	4408      	add	r0, r1
 80062ee:	6010      	str	r0, [r2, #0]
 80062f0:	6053      	str	r3, [r2, #4]
 80062f2:	e7da      	b.n	80062aa <_free_r+0x22>
 80062f4:	d902      	bls.n	80062fc <_free_r+0x74>
 80062f6:	230c      	movs	r3, #12
 80062f8:	602b      	str	r3, [r5, #0]
 80062fa:	e7d6      	b.n	80062aa <_free_r+0x22>
 80062fc:	6820      	ldr	r0, [r4, #0]
 80062fe:	1821      	adds	r1, r4, r0
 8006300:	428b      	cmp	r3, r1
 8006302:	bf01      	itttt	eq
 8006304:	6819      	ldreq	r1, [r3, #0]
 8006306:	685b      	ldreq	r3, [r3, #4]
 8006308:	1809      	addeq	r1, r1, r0
 800630a:	6021      	streq	r1, [r4, #0]
 800630c:	6063      	str	r3, [r4, #4]
 800630e:	6054      	str	r4, [r2, #4]
 8006310:	e7cb      	b.n	80062aa <_free_r+0x22>
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	200006e0 	.word	0x200006e0

08006318 <malloc>:
 8006318:	4b02      	ldr	r3, [pc, #8]	@ (8006324 <malloc+0xc>)
 800631a:	4601      	mov	r1, r0
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	f000 b825 	b.w	800636c <_malloc_r>
 8006322:	bf00      	nop
 8006324:	20000018 	.word	0x20000018

08006328 <sbrk_aligned>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	4e0f      	ldr	r6, [pc, #60]	@ (8006368 <sbrk_aligned+0x40>)
 800632c:	460c      	mov	r4, r1
 800632e:	6831      	ldr	r1, [r6, #0]
 8006330:	4605      	mov	r5, r0
 8006332:	b911      	cbnz	r1, 800633a <sbrk_aligned+0x12>
 8006334:	f000 fcc8 	bl	8006cc8 <_sbrk_r>
 8006338:	6030      	str	r0, [r6, #0]
 800633a:	4621      	mov	r1, r4
 800633c:	4628      	mov	r0, r5
 800633e:	f000 fcc3 	bl	8006cc8 <_sbrk_r>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d103      	bne.n	800634e <sbrk_aligned+0x26>
 8006346:	f04f 34ff 	mov.w	r4, #4294967295
 800634a:	4620      	mov	r0, r4
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	1cc4      	adds	r4, r0, #3
 8006350:	f024 0403 	bic.w	r4, r4, #3
 8006354:	42a0      	cmp	r0, r4
 8006356:	d0f8      	beq.n	800634a <sbrk_aligned+0x22>
 8006358:	1a21      	subs	r1, r4, r0
 800635a:	4628      	mov	r0, r5
 800635c:	f000 fcb4 	bl	8006cc8 <_sbrk_r>
 8006360:	3001      	adds	r0, #1
 8006362:	d1f2      	bne.n	800634a <sbrk_aligned+0x22>
 8006364:	e7ef      	b.n	8006346 <sbrk_aligned+0x1e>
 8006366:	bf00      	nop
 8006368:	200006dc 	.word	0x200006dc

0800636c <_malloc_r>:
 800636c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006370:	1ccd      	adds	r5, r1, #3
 8006372:	f025 0503 	bic.w	r5, r5, #3
 8006376:	3508      	adds	r5, #8
 8006378:	2d0c      	cmp	r5, #12
 800637a:	bf38      	it	cc
 800637c:	250c      	movcc	r5, #12
 800637e:	2d00      	cmp	r5, #0
 8006380:	4606      	mov	r6, r0
 8006382:	db01      	blt.n	8006388 <_malloc_r+0x1c>
 8006384:	42a9      	cmp	r1, r5
 8006386:	d904      	bls.n	8006392 <_malloc_r+0x26>
 8006388:	230c      	movs	r3, #12
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	2000      	movs	r0, #0
 800638e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006392:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006468 <_malloc_r+0xfc>
 8006396:	f000 f869 	bl	800646c <__malloc_lock>
 800639a:	f8d8 3000 	ldr.w	r3, [r8]
 800639e:	461c      	mov	r4, r3
 80063a0:	bb44      	cbnz	r4, 80063f4 <_malloc_r+0x88>
 80063a2:	4629      	mov	r1, r5
 80063a4:	4630      	mov	r0, r6
 80063a6:	f7ff ffbf 	bl	8006328 <sbrk_aligned>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	4604      	mov	r4, r0
 80063ae:	d158      	bne.n	8006462 <_malloc_r+0xf6>
 80063b0:	f8d8 4000 	ldr.w	r4, [r8]
 80063b4:	4627      	mov	r7, r4
 80063b6:	2f00      	cmp	r7, #0
 80063b8:	d143      	bne.n	8006442 <_malloc_r+0xd6>
 80063ba:	2c00      	cmp	r4, #0
 80063bc:	d04b      	beq.n	8006456 <_malloc_r+0xea>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	4639      	mov	r1, r7
 80063c2:	4630      	mov	r0, r6
 80063c4:	eb04 0903 	add.w	r9, r4, r3
 80063c8:	f000 fc7e 	bl	8006cc8 <_sbrk_r>
 80063cc:	4581      	cmp	r9, r0
 80063ce:	d142      	bne.n	8006456 <_malloc_r+0xea>
 80063d0:	6821      	ldr	r1, [r4, #0]
 80063d2:	4630      	mov	r0, r6
 80063d4:	1a6d      	subs	r5, r5, r1
 80063d6:	4629      	mov	r1, r5
 80063d8:	f7ff ffa6 	bl	8006328 <sbrk_aligned>
 80063dc:	3001      	adds	r0, #1
 80063de:	d03a      	beq.n	8006456 <_malloc_r+0xea>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	442b      	add	r3, r5
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	f8d8 3000 	ldr.w	r3, [r8]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	bb62      	cbnz	r2, 8006448 <_malloc_r+0xdc>
 80063ee:	f8c8 7000 	str.w	r7, [r8]
 80063f2:	e00f      	b.n	8006414 <_malloc_r+0xa8>
 80063f4:	6822      	ldr	r2, [r4, #0]
 80063f6:	1b52      	subs	r2, r2, r5
 80063f8:	d420      	bmi.n	800643c <_malloc_r+0xd0>
 80063fa:	2a0b      	cmp	r2, #11
 80063fc:	d917      	bls.n	800642e <_malloc_r+0xc2>
 80063fe:	1961      	adds	r1, r4, r5
 8006400:	42a3      	cmp	r3, r4
 8006402:	6025      	str	r5, [r4, #0]
 8006404:	bf18      	it	ne
 8006406:	6059      	strne	r1, [r3, #4]
 8006408:	6863      	ldr	r3, [r4, #4]
 800640a:	bf08      	it	eq
 800640c:	f8c8 1000 	streq.w	r1, [r8]
 8006410:	5162      	str	r2, [r4, r5]
 8006412:	604b      	str	r3, [r1, #4]
 8006414:	4630      	mov	r0, r6
 8006416:	f000 f82f 	bl	8006478 <__malloc_unlock>
 800641a:	f104 000b 	add.w	r0, r4, #11
 800641e:	1d23      	adds	r3, r4, #4
 8006420:	f020 0007 	bic.w	r0, r0, #7
 8006424:	1ac2      	subs	r2, r0, r3
 8006426:	bf1c      	itt	ne
 8006428:	1a1b      	subne	r3, r3, r0
 800642a:	50a3      	strne	r3, [r4, r2]
 800642c:	e7af      	b.n	800638e <_malloc_r+0x22>
 800642e:	6862      	ldr	r2, [r4, #4]
 8006430:	42a3      	cmp	r3, r4
 8006432:	bf0c      	ite	eq
 8006434:	f8c8 2000 	streq.w	r2, [r8]
 8006438:	605a      	strne	r2, [r3, #4]
 800643a:	e7eb      	b.n	8006414 <_malloc_r+0xa8>
 800643c:	4623      	mov	r3, r4
 800643e:	6864      	ldr	r4, [r4, #4]
 8006440:	e7ae      	b.n	80063a0 <_malloc_r+0x34>
 8006442:	463c      	mov	r4, r7
 8006444:	687f      	ldr	r7, [r7, #4]
 8006446:	e7b6      	b.n	80063b6 <_malloc_r+0x4a>
 8006448:	461a      	mov	r2, r3
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	42a3      	cmp	r3, r4
 800644e:	d1fb      	bne.n	8006448 <_malloc_r+0xdc>
 8006450:	2300      	movs	r3, #0
 8006452:	6053      	str	r3, [r2, #4]
 8006454:	e7de      	b.n	8006414 <_malloc_r+0xa8>
 8006456:	230c      	movs	r3, #12
 8006458:	4630      	mov	r0, r6
 800645a:	6033      	str	r3, [r6, #0]
 800645c:	f000 f80c 	bl	8006478 <__malloc_unlock>
 8006460:	e794      	b.n	800638c <_malloc_r+0x20>
 8006462:	6005      	str	r5, [r0, #0]
 8006464:	e7d6      	b.n	8006414 <_malloc_r+0xa8>
 8006466:	bf00      	nop
 8006468:	200006e0 	.word	0x200006e0

0800646c <__malloc_lock>:
 800646c:	4801      	ldr	r0, [pc, #4]	@ (8006474 <__malloc_lock+0x8>)
 800646e:	f7ff b89c 	b.w	80055aa <__retarget_lock_acquire_recursive>
 8006472:	bf00      	nop
 8006474:	200006d8 	.word	0x200006d8

08006478 <__malloc_unlock>:
 8006478:	4801      	ldr	r0, [pc, #4]	@ (8006480 <__malloc_unlock+0x8>)
 800647a:	f7ff b897 	b.w	80055ac <__retarget_lock_release_recursive>
 800647e:	bf00      	nop
 8006480:	200006d8 	.word	0x200006d8

08006484 <_Balloc>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	69c6      	ldr	r6, [r0, #28]
 8006488:	4604      	mov	r4, r0
 800648a:	460d      	mov	r5, r1
 800648c:	b976      	cbnz	r6, 80064ac <_Balloc+0x28>
 800648e:	2010      	movs	r0, #16
 8006490:	f7ff ff42 	bl	8006318 <malloc>
 8006494:	4602      	mov	r2, r0
 8006496:	61e0      	str	r0, [r4, #28]
 8006498:	b920      	cbnz	r0, 80064a4 <_Balloc+0x20>
 800649a:	216b      	movs	r1, #107	@ 0x6b
 800649c:	4b17      	ldr	r3, [pc, #92]	@ (80064fc <_Balloc+0x78>)
 800649e:	4818      	ldr	r0, [pc, #96]	@ (8006500 <_Balloc+0x7c>)
 80064a0:	f000 fc30 	bl	8006d04 <__assert_func>
 80064a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064a8:	6006      	str	r6, [r0, #0]
 80064aa:	60c6      	str	r6, [r0, #12]
 80064ac:	69e6      	ldr	r6, [r4, #28]
 80064ae:	68f3      	ldr	r3, [r6, #12]
 80064b0:	b183      	cbz	r3, 80064d4 <_Balloc+0x50>
 80064b2:	69e3      	ldr	r3, [r4, #28]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064ba:	b9b8      	cbnz	r0, 80064ec <_Balloc+0x68>
 80064bc:	2101      	movs	r1, #1
 80064be:	fa01 f605 	lsl.w	r6, r1, r5
 80064c2:	1d72      	adds	r2, r6, #5
 80064c4:	4620      	mov	r0, r4
 80064c6:	0092      	lsls	r2, r2, #2
 80064c8:	f000 fc3a 	bl	8006d40 <_calloc_r>
 80064cc:	b160      	cbz	r0, 80064e8 <_Balloc+0x64>
 80064ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064d2:	e00e      	b.n	80064f2 <_Balloc+0x6e>
 80064d4:	2221      	movs	r2, #33	@ 0x21
 80064d6:	2104      	movs	r1, #4
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 fc31 	bl	8006d40 <_calloc_r>
 80064de:	69e3      	ldr	r3, [r4, #28]
 80064e0:	60f0      	str	r0, [r6, #12]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e4      	bne.n	80064b2 <_Balloc+0x2e>
 80064e8:	2000      	movs	r0, #0
 80064ea:	bd70      	pop	{r4, r5, r6, pc}
 80064ec:	6802      	ldr	r2, [r0, #0]
 80064ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064f2:	2300      	movs	r3, #0
 80064f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064f8:	e7f7      	b.n	80064ea <_Balloc+0x66>
 80064fa:	bf00      	nop
 80064fc:	08007393 	.word	0x08007393
 8006500:	08007413 	.word	0x08007413

08006504 <_Bfree>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	69c6      	ldr	r6, [r0, #28]
 8006508:	4605      	mov	r5, r0
 800650a:	460c      	mov	r4, r1
 800650c:	b976      	cbnz	r6, 800652c <_Bfree+0x28>
 800650e:	2010      	movs	r0, #16
 8006510:	f7ff ff02 	bl	8006318 <malloc>
 8006514:	4602      	mov	r2, r0
 8006516:	61e8      	str	r0, [r5, #28]
 8006518:	b920      	cbnz	r0, 8006524 <_Bfree+0x20>
 800651a:	218f      	movs	r1, #143	@ 0x8f
 800651c:	4b08      	ldr	r3, [pc, #32]	@ (8006540 <_Bfree+0x3c>)
 800651e:	4809      	ldr	r0, [pc, #36]	@ (8006544 <_Bfree+0x40>)
 8006520:	f000 fbf0 	bl	8006d04 <__assert_func>
 8006524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006528:	6006      	str	r6, [r0, #0]
 800652a:	60c6      	str	r6, [r0, #12]
 800652c:	b13c      	cbz	r4, 800653e <_Bfree+0x3a>
 800652e:	69eb      	ldr	r3, [r5, #28]
 8006530:	6862      	ldr	r2, [r4, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006538:	6021      	str	r1, [r4, #0]
 800653a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800653e:	bd70      	pop	{r4, r5, r6, pc}
 8006540:	08007393 	.word	0x08007393
 8006544:	08007413 	.word	0x08007413

08006548 <__multadd>:
 8006548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800654c:	4607      	mov	r7, r0
 800654e:	460c      	mov	r4, r1
 8006550:	461e      	mov	r6, r3
 8006552:	2000      	movs	r0, #0
 8006554:	690d      	ldr	r5, [r1, #16]
 8006556:	f101 0c14 	add.w	ip, r1, #20
 800655a:	f8dc 3000 	ldr.w	r3, [ip]
 800655e:	3001      	adds	r0, #1
 8006560:	b299      	uxth	r1, r3
 8006562:	fb02 6101 	mla	r1, r2, r1, r6
 8006566:	0c1e      	lsrs	r6, r3, #16
 8006568:	0c0b      	lsrs	r3, r1, #16
 800656a:	fb02 3306 	mla	r3, r2, r6, r3
 800656e:	b289      	uxth	r1, r1
 8006570:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006574:	4285      	cmp	r5, r0
 8006576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800657a:	f84c 1b04 	str.w	r1, [ip], #4
 800657e:	dcec      	bgt.n	800655a <__multadd+0x12>
 8006580:	b30e      	cbz	r6, 80065c6 <__multadd+0x7e>
 8006582:	68a3      	ldr	r3, [r4, #8]
 8006584:	42ab      	cmp	r3, r5
 8006586:	dc19      	bgt.n	80065bc <__multadd+0x74>
 8006588:	6861      	ldr	r1, [r4, #4]
 800658a:	4638      	mov	r0, r7
 800658c:	3101      	adds	r1, #1
 800658e:	f7ff ff79 	bl	8006484 <_Balloc>
 8006592:	4680      	mov	r8, r0
 8006594:	b928      	cbnz	r0, 80065a2 <__multadd+0x5a>
 8006596:	4602      	mov	r2, r0
 8006598:	21ba      	movs	r1, #186	@ 0xba
 800659a:	4b0c      	ldr	r3, [pc, #48]	@ (80065cc <__multadd+0x84>)
 800659c:	480c      	ldr	r0, [pc, #48]	@ (80065d0 <__multadd+0x88>)
 800659e:	f000 fbb1 	bl	8006d04 <__assert_func>
 80065a2:	6922      	ldr	r2, [r4, #16]
 80065a4:	f104 010c 	add.w	r1, r4, #12
 80065a8:	3202      	adds	r2, #2
 80065aa:	0092      	lsls	r2, r2, #2
 80065ac:	300c      	adds	r0, #12
 80065ae:	f000 fb9b 	bl	8006ce8 <memcpy>
 80065b2:	4621      	mov	r1, r4
 80065b4:	4638      	mov	r0, r7
 80065b6:	f7ff ffa5 	bl	8006504 <_Bfree>
 80065ba:	4644      	mov	r4, r8
 80065bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065c0:	3501      	adds	r5, #1
 80065c2:	615e      	str	r6, [r3, #20]
 80065c4:	6125      	str	r5, [r4, #16]
 80065c6:	4620      	mov	r0, r4
 80065c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065cc:	08007402 	.word	0x08007402
 80065d0:	08007413 	.word	0x08007413

080065d4 <__hi0bits>:
 80065d4:	4603      	mov	r3, r0
 80065d6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80065da:	bf3a      	itte	cc
 80065dc:	0403      	lslcc	r3, r0, #16
 80065de:	2010      	movcc	r0, #16
 80065e0:	2000      	movcs	r0, #0
 80065e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065e6:	bf3c      	itt	cc
 80065e8:	021b      	lslcc	r3, r3, #8
 80065ea:	3008      	addcc	r0, #8
 80065ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065f0:	bf3c      	itt	cc
 80065f2:	011b      	lslcc	r3, r3, #4
 80065f4:	3004      	addcc	r0, #4
 80065f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065fa:	bf3c      	itt	cc
 80065fc:	009b      	lslcc	r3, r3, #2
 80065fe:	3002      	addcc	r0, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	db05      	blt.n	8006610 <__hi0bits+0x3c>
 8006604:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006608:	f100 0001 	add.w	r0, r0, #1
 800660c:	bf08      	it	eq
 800660e:	2020      	moveq	r0, #32
 8006610:	4770      	bx	lr

08006612 <__lo0bits>:
 8006612:	6803      	ldr	r3, [r0, #0]
 8006614:	4602      	mov	r2, r0
 8006616:	f013 0007 	ands.w	r0, r3, #7
 800661a:	d00b      	beq.n	8006634 <__lo0bits+0x22>
 800661c:	07d9      	lsls	r1, r3, #31
 800661e:	d421      	bmi.n	8006664 <__lo0bits+0x52>
 8006620:	0798      	lsls	r0, r3, #30
 8006622:	bf49      	itett	mi
 8006624:	085b      	lsrmi	r3, r3, #1
 8006626:	089b      	lsrpl	r3, r3, #2
 8006628:	2001      	movmi	r0, #1
 800662a:	6013      	strmi	r3, [r2, #0]
 800662c:	bf5c      	itt	pl
 800662e:	2002      	movpl	r0, #2
 8006630:	6013      	strpl	r3, [r2, #0]
 8006632:	4770      	bx	lr
 8006634:	b299      	uxth	r1, r3
 8006636:	b909      	cbnz	r1, 800663c <__lo0bits+0x2a>
 8006638:	2010      	movs	r0, #16
 800663a:	0c1b      	lsrs	r3, r3, #16
 800663c:	b2d9      	uxtb	r1, r3
 800663e:	b909      	cbnz	r1, 8006644 <__lo0bits+0x32>
 8006640:	3008      	adds	r0, #8
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	0719      	lsls	r1, r3, #28
 8006646:	bf04      	itt	eq
 8006648:	091b      	lsreq	r3, r3, #4
 800664a:	3004      	addeq	r0, #4
 800664c:	0799      	lsls	r1, r3, #30
 800664e:	bf04      	itt	eq
 8006650:	089b      	lsreq	r3, r3, #2
 8006652:	3002      	addeq	r0, #2
 8006654:	07d9      	lsls	r1, r3, #31
 8006656:	d403      	bmi.n	8006660 <__lo0bits+0x4e>
 8006658:	085b      	lsrs	r3, r3, #1
 800665a:	f100 0001 	add.w	r0, r0, #1
 800665e:	d003      	beq.n	8006668 <__lo0bits+0x56>
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	4770      	bx	lr
 8006664:	2000      	movs	r0, #0
 8006666:	4770      	bx	lr
 8006668:	2020      	movs	r0, #32
 800666a:	4770      	bx	lr

0800666c <__i2b>:
 800666c:	b510      	push	{r4, lr}
 800666e:	460c      	mov	r4, r1
 8006670:	2101      	movs	r1, #1
 8006672:	f7ff ff07 	bl	8006484 <_Balloc>
 8006676:	4602      	mov	r2, r0
 8006678:	b928      	cbnz	r0, 8006686 <__i2b+0x1a>
 800667a:	f240 1145 	movw	r1, #325	@ 0x145
 800667e:	4b04      	ldr	r3, [pc, #16]	@ (8006690 <__i2b+0x24>)
 8006680:	4804      	ldr	r0, [pc, #16]	@ (8006694 <__i2b+0x28>)
 8006682:	f000 fb3f 	bl	8006d04 <__assert_func>
 8006686:	2301      	movs	r3, #1
 8006688:	6144      	str	r4, [r0, #20]
 800668a:	6103      	str	r3, [r0, #16]
 800668c:	bd10      	pop	{r4, pc}
 800668e:	bf00      	nop
 8006690:	08007402 	.word	0x08007402
 8006694:	08007413 	.word	0x08007413

08006698 <__multiply>:
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	4617      	mov	r7, r2
 800669e:	690a      	ldr	r2, [r1, #16]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4689      	mov	r9, r1
 80066a4:	429a      	cmp	r2, r3
 80066a6:	bfa2      	ittt	ge
 80066a8:	463b      	movge	r3, r7
 80066aa:	460f      	movge	r7, r1
 80066ac:	4699      	movge	r9, r3
 80066ae:	693d      	ldr	r5, [r7, #16]
 80066b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	eb05 060a 	add.w	r6, r5, sl
 80066bc:	42b3      	cmp	r3, r6
 80066be:	b085      	sub	sp, #20
 80066c0:	bfb8      	it	lt
 80066c2:	3101      	addlt	r1, #1
 80066c4:	f7ff fede 	bl	8006484 <_Balloc>
 80066c8:	b930      	cbnz	r0, 80066d8 <__multiply+0x40>
 80066ca:	4602      	mov	r2, r0
 80066cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80066d0:	4b40      	ldr	r3, [pc, #256]	@ (80067d4 <__multiply+0x13c>)
 80066d2:	4841      	ldr	r0, [pc, #260]	@ (80067d8 <__multiply+0x140>)
 80066d4:	f000 fb16 	bl	8006d04 <__assert_func>
 80066d8:	f100 0414 	add.w	r4, r0, #20
 80066dc:	4623      	mov	r3, r4
 80066de:	2200      	movs	r2, #0
 80066e0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80066e4:	4573      	cmp	r3, lr
 80066e6:	d320      	bcc.n	800672a <__multiply+0x92>
 80066e8:	f107 0814 	add.w	r8, r7, #20
 80066ec:	f109 0114 	add.w	r1, r9, #20
 80066f0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80066f4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80066f8:	9302      	str	r3, [sp, #8]
 80066fa:	1beb      	subs	r3, r5, r7
 80066fc:	3b15      	subs	r3, #21
 80066fe:	f023 0303 	bic.w	r3, r3, #3
 8006702:	3304      	adds	r3, #4
 8006704:	3715      	adds	r7, #21
 8006706:	42bd      	cmp	r5, r7
 8006708:	bf38      	it	cc
 800670a:	2304      	movcc	r3, #4
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	9b02      	ldr	r3, [sp, #8]
 8006710:	9103      	str	r1, [sp, #12]
 8006712:	428b      	cmp	r3, r1
 8006714:	d80c      	bhi.n	8006730 <__multiply+0x98>
 8006716:	2e00      	cmp	r6, #0
 8006718:	dd03      	ble.n	8006722 <__multiply+0x8a>
 800671a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800671e:	2b00      	cmp	r3, #0
 8006720:	d055      	beq.n	80067ce <__multiply+0x136>
 8006722:	6106      	str	r6, [r0, #16]
 8006724:	b005      	add	sp, #20
 8006726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672a:	f843 2b04 	str.w	r2, [r3], #4
 800672e:	e7d9      	b.n	80066e4 <__multiply+0x4c>
 8006730:	f8b1 a000 	ldrh.w	sl, [r1]
 8006734:	f1ba 0f00 	cmp.w	sl, #0
 8006738:	d01f      	beq.n	800677a <__multiply+0xe2>
 800673a:	46c4      	mov	ip, r8
 800673c:	46a1      	mov	r9, r4
 800673e:	2700      	movs	r7, #0
 8006740:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006744:	f8d9 3000 	ldr.w	r3, [r9]
 8006748:	fa1f fb82 	uxth.w	fp, r2
 800674c:	b29b      	uxth	r3, r3
 800674e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006752:	443b      	add	r3, r7
 8006754:	f8d9 7000 	ldr.w	r7, [r9]
 8006758:	0c12      	lsrs	r2, r2, #16
 800675a:	0c3f      	lsrs	r7, r7, #16
 800675c:	fb0a 7202 	mla	r2, sl, r2, r7
 8006760:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006764:	b29b      	uxth	r3, r3
 8006766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800676a:	4565      	cmp	r5, ip
 800676c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006770:	f849 3b04 	str.w	r3, [r9], #4
 8006774:	d8e4      	bhi.n	8006740 <__multiply+0xa8>
 8006776:	9b01      	ldr	r3, [sp, #4]
 8006778:	50e7      	str	r7, [r4, r3]
 800677a:	9b03      	ldr	r3, [sp, #12]
 800677c:	3104      	adds	r1, #4
 800677e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006782:	f1b9 0f00 	cmp.w	r9, #0
 8006786:	d020      	beq.n	80067ca <__multiply+0x132>
 8006788:	4647      	mov	r7, r8
 800678a:	46a4      	mov	ip, r4
 800678c:	f04f 0a00 	mov.w	sl, #0
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	f8b7 b000 	ldrh.w	fp, [r7]
 8006796:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800679a:	b29b      	uxth	r3, r3
 800679c:	fb09 220b 	mla	r2, r9, fp, r2
 80067a0:	4452      	add	r2, sl
 80067a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067a6:	f84c 3b04 	str.w	r3, [ip], #4
 80067aa:	f857 3b04 	ldr.w	r3, [r7], #4
 80067ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067b2:	f8bc 3000 	ldrh.w	r3, [ip]
 80067b6:	42bd      	cmp	r5, r7
 80067b8:	fb09 330a 	mla	r3, r9, sl, r3
 80067bc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80067c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067c4:	d8e5      	bhi.n	8006792 <__multiply+0xfa>
 80067c6:	9a01      	ldr	r2, [sp, #4]
 80067c8:	50a3      	str	r3, [r4, r2]
 80067ca:	3404      	adds	r4, #4
 80067cc:	e79f      	b.n	800670e <__multiply+0x76>
 80067ce:	3e01      	subs	r6, #1
 80067d0:	e7a1      	b.n	8006716 <__multiply+0x7e>
 80067d2:	bf00      	nop
 80067d4:	08007402 	.word	0x08007402
 80067d8:	08007413 	.word	0x08007413

080067dc <__pow5mult>:
 80067dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e0:	4615      	mov	r5, r2
 80067e2:	f012 0203 	ands.w	r2, r2, #3
 80067e6:	4607      	mov	r7, r0
 80067e8:	460e      	mov	r6, r1
 80067ea:	d007      	beq.n	80067fc <__pow5mult+0x20>
 80067ec:	4c25      	ldr	r4, [pc, #148]	@ (8006884 <__pow5mult+0xa8>)
 80067ee:	3a01      	subs	r2, #1
 80067f0:	2300      	movs	r3, #0
 80067f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067f6:	f7ff fea7 	bl	8006548 <__multadd>
 80067fa:	4606      	mov	r6, r0
 80067fc:	10ad      	asrs	r5, r5, #2
 80067fe:	d03d      	beq.n	800687c <__pow5mult+0xa0>
 8006800:	69fc      	ldr	r4, [r7, #28]
 8006802:	b97c      	cbnz	r4, 8006824 <__pow5mult+0x48>
 8006804:	2010      	movs	r0, #16
 8006806:	f7ff fd87 	bl	8006318 <malloc>
 800680a:	4602      	mov	r2, r0
 800680c:	61f8      	str	r0, [r7, #28]
 800680e:	b928      	cbnz	r0, 800681c <__pow5mult+0x40>
 8006810:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006814:	4b1c      	ldr	r3, [pc, #112]	@ (8006888 <__pow5mult+0xac>)
 8006816:	481d      	ldr	r0, [pc, #116]	@ (800688c <__pow5mult+0xb0>)
 8006818:	f000 fa74 	bl	8006d04 <__assert_func>
 800681c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006820:	6004      	str	r4, [r0, #0]
 8006822:	60c4      	str	r4, [r0, #12]
 8006824:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006828:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800682c:	b94c      	cbnz	r4, 8006842 <__pow5mult+0x66>
 800682e:	f240 2171 	movw	r1, #625	@ 0x271
 8006832:	4638      	mov	r0, r7
 8006834:	f7ff ff1a 	bl	800666c <__i2b>
 8006838:	2300      	movs	r3, #0
 800683a:	4604      	mov	r4, r0
 800683c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006840:	6003      	str	r3, [r0, #0]
 8006842:	f04f 0900 	mov.w	r9, #0
 8006846:	07eb      	lsls	r3, r5, #31
 8006848:	d50a      	bpl.n	8006860 <__pow5mult+0x84>
 800684a:	4631      	mov	r1, r6
 800684c:	4622      	mov	r2, r4
 800684e:	4638      	mov	r0, r7
 8006850:	f7ff ff22 	bl	8006698 <__multiply>
 8006854:	4680      	mov	r8, r0
 8006856:	4631      	mov	r1, r6
 8006858:	4638      	mov	r0, r7
 800685a:	f7ff fe53 	bl	8006504 <_Bfree>
 800685e:	4646      	mov	r6, r8
 8006860:	106d      	asrs	r5, r5, #1
 8006862:	d00b      	beq.n	800687c <__pow5mult+0xa0>
 8006864:	6820      	ldr	r0, [r4, #0]
 8006866:	b938      	cbnz	r0, 8006878 <__pow5mult+0x9c>
 8006868:	4622      	mov	r2, r4
 800686a:	4621      	mov	r1, r4
 800686c:	4638      	mov	r0, r7
 800686e:	f7ff ff13 	bl	8006698 <__multiply>
 8006872:	6020      	str	r0, [r4, #0]
 8006874:	f8c0 9000 	str.w	r9, [r0]
 8006878:	4604      	mov	r4, r0
 800687a:	e7e4      	b.n	8006846 <__pow5mult+0x6a>
 800687c:	4630      	mov	r0, r6
 800687e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006882:	bf00      	nop
 8006884:	080074c4 	.word	0x080074c4
 8006888:	08007393 	.word	0x08007393
 800688c:	08007413 	.word	0x08007413

08006890 <__lshift>:
 8006890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006894:	460c      	mov	r4, r1
 8006896:	4607      	mov	r7, r0
 8006898:	4691      	mov	r9, r2
 800689a:	6923      	ldr	r3, [r4, #16]
 800689c:	6849      	ldr	r1, [r1, #4]
 800689e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068a2:	68a3      	ldr	r3, [r4, #8]
 80068a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068a8:	f108 0601 	add.w	r6, r8, #1
 80068ac:	42b3      	cmp	r3, r6
 80068ae:	db0b      	blt.n	80068c8 <__lshift+0x38>
 80068b0:	4638      	mov	r0, r7
 80068b2:	f7ff fde7 	bl	8006484 <_Balloc>
 80068b6:	4605      	mov	r5, r0
 80068b8:	b948      	cbnz	r0, 80068ce <__lshift+0x3e>
 80068ba:	4602      	mov	r2, r0
 80068bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80068c0:	4b27      	ldr	r3, [pc, #156]	@ (8006960 <__lshift+0xd0>)
 80068c2:	4828      	ldr	r0, [pc, #160]	@ (8006964 <__lshift+0xd4>)
 80068c4:	f000 fa1e 	bl	8006d04 <__assert_func>
 80068c8:	3101      	adds	r1, #1
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	e7ee      	b.n	80068ac <__lshift+0x1c>
 80068ce:	2300      	movs	r3, #0
 80068d0:	f100 0114 	add.w	r1, r0, #20
 80068d4:	f100 0210 	add.w	r2, r0, #16
 80068d8:	4618      	mov	r0, r3
 80068da:	4553      	cmp	r3, sl
 80068dc:	db33      	blt.n	8006946 <__lshift+0xb6>
 80068de:	6920      	ldr	r0, [r4, #16]
 80068e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068e4:	f104 0314 	add.w	r3, r4, #20
 80068e8:	f019 091f 	ands.w	r9, r9, #31
 80068ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068f4:	d02b      	beq.n	800694e <__lshift+0xbe>
 80068f6:	468a      	mov	sl, r1
 80068f8:	2200      	movs	r2, #0
 80068fa:	f1c9 0e20 	rsb	lr, r9, #32
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	fa00 f009 	lsl.w	r0, r0, r9
 8006904:	4310      	orrs	r0, r2
 8006906:	f84a 0b04 	str.w	r0, [sl], #4
 800690a:	f853 2b04 	ldr.w	r2, [r3], #4
 800690e:	459c      	cmp	ip, r3
 8006910:	fa22 f20e 	lsr.w	r2, r2, lr
 8006914:	d8f3      	bhi.n	80068fe <__lshift+0x6e>
 8006916:	ebac 0304 	sub.w	r3, ip, r4
 800691a:	3b15      	subs	r3, #21
 800691c:	f023 0303 	bic.w	r3, r3, #3
 8006920:	3304      	adds	r3, #4
 8006922:	f104 0015 	add.w	r0, r4, #21
 8006926:	4560      	cmp	r0, ip
 8006928:	bf88      	it	hi
 800692a:	2304      	movhi	r3, #4
 800692c:	50ca      	str	r2, [r1, r3]
 800692e:	b10a      	cbz	r2, 8006934 <__lshift+0xa4>
 8006930:	f108 0602 	add.w	r6, r8, #2
 8006934:	3e01      	subs	r6, #1
 8006936:	4638      	mov	r0, r7
 8006938:	4621      	mov	r1, r4
 800693a:	612e      	str	r6, [r5, #16]
 800693c:	f7ff fde2 	bl	8006504 <_Bfree>
 8006940:	4628      	mov	r0, r5
 8006942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006946:	f842 0f04 	str.w	r0, [r2, #4]!
 800694a:	3301      	adds	r3, #1
 800694c:	e7c5      	b.n	80068da <__lshift+0x4a>
 800694e:	3904      	subs	r1, #4
 8006950:	f853 2b04 	ldr.w	r2, [r3], #4
 8006954:	459c      	cmp	ip, r3
 8006956:	f841 2f04 	str.w	r2, [r1, #4]!
 800695a:	d8f9      	bhi.n	8006950 <__lshift+0xc0>
 800695c:	e7ea      	b.n	8006934 <__lshift+0xa4>
 800695e:	bf00      	nop
 8006960:	08007402 	.word	0x08007402
 8006964:	08007413 	.word	0x08007413

08006968 <__mcmp>:
 8006968:	4603      	mov	r3, r0
 800696a:	690a      	ldr	r2, [r1, #16]
 800696c:	6900      	ldr	r0, [r0, #16]
 800696e:	b530      	push	{r4, r5, lr}
 8006970:	1a80      	subs	r0, r0, r2
 8006972:	d10e      	bne.n	8006992 <__mcmp+0x2a>
 8006974:	3314      	adds	r3, #20
 8006976:	3114      	adds	r1, #20
 8006978:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800697c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006980:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006984:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006988:	4295      	cmp	r5, r2
 800698a:	d003      	beq.n	8006994 <__mcmp+0x2c>
 800698c:	d205      	bcs.n	800699a <__mcmp+0x32>
 800698e:	f04f 30ff 	mov.w	r0, #4294967295
 8006992:	bd30      	pop	{r4, r5, pc}
 8006994:	42a3      	cmp	r3, r4
 8006996:	d3f3      	bcc.n	8006980 <__mcmp+0x18>
 8006998:	e7fb      	b.n	8006992 <__mcmp+0x2a>
 800699a:	2001      	movs	r0, #1
 800699c:	e7f9      	b.n	8006992 <__mcmp+0x2a>
	...

080069a0 <__mdiff>:
 80069a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a4:	4689      	mov	r9, r1
 80069a6:	4606      	mov	r6, r0
 80069a8:	4611      	mov	r1, r2
 80069aa:	4648      	mov	r0, r9
 80069ac:	4614      	mov	r4, r2
 80069ae:	f7ff ffdb 	bl	8006968 <__mcmp>
 80069b2:	1e05      	subs	r5, r0, #0
 80069b4:	d112      	bne.n	80069dc <__mdiff+0x3c>
 80069b6:	4629      	mov	r1, r5
 80069b8:	4630      	mov	r0, r6
 80069ba:	f7ff fd63 	bl	8006484 <_Balloc>
 80069be:	4602      	mov	r2, r0
 80069c0:	b928      	cbnz	r0, 80069ce <__mdiff+0x2e>
 80069c2:	f240 2137 	movw	r1, #567	@ 0x237
 80069c6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ac0 <__mdiff+0x120>)
 80069c8:	483e      	ldr	r0, [pc, #248]	@ (8006ac4 <__mdiff+0x124>)
 80069ca:	f000 f99b 	bl	8006d04 <__assert_func>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069d4:	4610      	mov	r0, r2
 80069d6:	b003      	add	sp, #12
 80069d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069dc:	bfbc      	itt	lt
 80069de:	464b      	movlt	r3, r9
 80069e0:	46a1      	movlt	r9, r4
 80069e2:	4630      	mov	r0, r6
 80069e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80069e8:	bfba      	itte	lt
 80069ea:	461c      	movlt	r4, r3
 80069ec:	2501      	movlt	r5, #1
 80069ee:	2500      	movge	r5, #0
 80069f0:	f7ff fd48 	bl	8006484 <_Balloc>
 80069f4:	4602      	mov	r2, r0
 80069f6:	b918      	cbnz	r0, 8006a00 <__mdiff+0x60>
 80069f8:	f240 2145 	movw	r1, #581	@ 0x245
 80069fc:	4b30      	ldr	r3, [pc, #192]	@ (8006ac0 <__mdiff+0x120>)
 80069fe:	e7e3      	b.n	80069c8 <__mdiff+0x28>
 8006a00:	f100 0b14 	add.w	fp, r0, #20
 8006a04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a08:	f109 0310 	add.w	r3, r9, #16
 8006a0c:	60c5      	str	r5, [r0, #12]
 8006a0e:	f04f 0c00 	mov.w	ip, #0
 8006a12:	f109 0514 	add.w	r5, r9, #20
 8006a16:	46d9      	mov	r9, fp
 8006a18:	6926      	ldr	r6, [r4, #16]
 8006a1a:	f104 0e14 	add.w	lr, r4, #20
 8006a1e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a22:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	9b01      	ldr	r3, [sp, #4]
 8006a2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a32:	b281      	uxth	r1, r0
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	fa1f f38a 	uxth.w	r3, sl
 8006a3a:	1a5b      	subs	r3, r3, r1
 8006a3c:	0c00      	lsrs	r0, r0, #16
 8006a3e:	4463      	add	r3, ip
 8006a40:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a44:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a4e:	4576      	cmp	r6, lr
 8006a50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a54:	f849 3b04 	str.w	r3, [r9], #4
 8006a58:	d8e6      	bhi.n	8006a28 <__mdiff+0x88>
 8006a5a:	1b33      	subs	r3, r6, r4
 8006a5c:	3b15      	subs	r3, #21
 8006a5e:	f023 0303 	bic.w	r3, r3, #3
 8006a62:	3415      	adds	r4, #21
 8006a64:	3304      	adds	r3, #4
 8006a66:	42a6      	cmp	r6, r4
 8006a68:	bf38      	it	cc
 8006a6a:	2304      	movcc	r3, #4
 8006a6c:	441d      	add	r5, r3
 8006a6e:	445b      	add	r3, fp
 8006a70:	461e      	mov	r6, r3
 8006a72:	462c      	mov	r4, r5
 8006a74:	4544      	cmp	r4, r8
 8006a76:	d30e      	bcc.n	8006a96 <__mdiff+0xf6>
 8006a78:	f108 0103 	add.w	r1, r8, #3
 8006a7c:	1b49      	subs	r1, r1, r5
 8006a7e:	f021 0103 	bic.w	r1, r1, #3
 8006a82:	3d03      	subs	r5, #3
 8006a84:	45a8      	cmp	r8, r5
 8006a86:	bf38      	it	cc
 8006a88:	2100      	movcc	r1, #0
 8006a8a:	440b      	add	r3, r1
 8006a8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a90:	b199      	cbz	r1, 8006aba <__mdiff+0x11a>
 8006a92:	6117      	str	r7, [r2, #16]
 8006a94:	e79e      	b.n	80069d4 <__mdiff+0x34>
 8006a96:	46e6      	mov	lr, ip
 8006a98:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a9c:	fa1f fc81 	uxth.w	ip, r1
 8006aa0:	44f4      	add	ip, lr
 8006aa2:	0c08      	lsrs	r0, r1, #16
 8006aa4:	4471      	add	r1, lr
 8006aa6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006aaa:	b289      	uxth	r1, r1
 8006aac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ab0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ab4:	f846 1b04 	str.w	r1, [r6], #4
 8006ab8:	e7dc      	b.n	8006a74 <__mdiff+0xd4>
 8006aba:	3f01      	subs	r7, #1
 8006abc:	e7e6      	b.n	8006a8c <__mdiff+0xec>
 8006abe:	bf00      	nop
 8006ac0:	08007402 	.word	0x08007402
 8006ac4:	08007413 	.word	0x08007413

08006ac8 <__d2b>:
 8006ac8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006acc:	2101      	movs	r1, #1
 8006ace:	4690      	mov	r8, r2
 8006ad0:	4699      	mov	r9, r3
 8006ad2:	9e08      	ldr	r6, [sp, #32]
 8006ad4:	f7ff fcd6 	bl	8006484 <_Balloc>
 8006ad8:	4604      	mov	r4, r0
 8006ada:	b930      	cbnz	r0, 8006aea <__d2b+0x22>
 8006adc:	4602      	mov	r2, r0
 8006ade:	f240 310f 	movw	r1, #783	@ 0x30f
 8006ae2:	4b23      	ldr	r3, [pc, #140]	@ (8006b70 <__d2b+0xa8>)
 8006ae4:	4823      	ldr	r0, [pc, #140]	@ (8006b74 <__d2b+0xac>)
 8006ae6:	f000 f90d 	bl	8006d04 <__assert_func>
 8006aea:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006aee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006af2:	b10d      	cbz	r5, 8006af8 <__d2b+0x30>
 8006af4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	f1b8 0300 	subs.w	r3, r8, #0
 8006afe:	d024      	beq.n	8006b4a <__d2b+0x82>
 8006b00:	4668      	mov	r0, sp
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	f7ff fd85 	bl	8006612 <__lo0bits>
 8006b08:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b0c:	b1d8      	cbz	r0, 8006b46 <__d2b+0x7e>
 8006b0e:	f1c0 0320 	rsb	r3, r0, #32
 8006b12:	fa02 f303 	lsl.w	r3, r2, r3
 8006b16:	430b      	orrs	r3, r1
 8006b18:	40c2      	lsrs	r2, r0
 8006b1a:	6163      	str	r3, [r4, #20]
 8006b1c:	9201      	str	r2, [sp, #4]
 8006b1e:	9b01      	ldr	r3, [sp, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	bf0c      	ite	eq
 8006b24:	2201      	moveq	r2, #1
 8006b26:	2202      	movne	r2, #2
 8006b28:	61a3      	str	r3, [r4, #24]
 8006b2a:	6122      	str	r2, [r4, #16]
 8006b2c:	b1ad      	cbz	r5, 8006b5a <__d2b+0x92>
 8006b2e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b32:	4405      	add	r5, r0
 8006b34:	6035      	str	r5, [r6, #0]
 8006b36:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b3c:	6018      	str	r0, [r3, #0]
 8006b3e:	4620      	mov	r0, r4
 8006b40:	b002      	add	sp, #8
 8006b42:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006b46:	6161      	str	r1, [r4, #20]
 8006b48:	e7e9      	b.n	8006b1e <__d2b+0x56>
 8006b4a:	a801      	add	r0, sp, #4
 8006b4c:	f7ff fd61 	bl	8006612 <__lo0bits>
 8006b50:	9b01      	ldr	r3, [sp, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	6163      	str	r3, [r4, #20]
 8006b56:	3020      	adds	r0, #32
 8006b58:	e7e7      	b.n	8006b2a <__d2b+0x62>
 8006b5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b62:	6030      	str	r0, [r6, #0]
 8006b64:	6918      	ldr	r0, [r3, #16]
 8006b66:	f7ff fd35 	bl	80065d4 <__hi0bits>
 8006b6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b6e:	e7e4      	b.n	8006b3a <__d2b+0x72>
 8006b70:	08007402 	.word	0x08007402
 8006b74:	08007413 	.word	0x08007413

08006b78 <__sflush_r>:
 8006b78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	0716      	lsls	r6, r2, #28
 8006b80:	4605      	mov	r5, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	d454      	bmi.n	8006c30 <__sflush_r+0xb8>
 8006b86:	684b      	ldr	r3, [r1, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dc02      	bgt.n	8006b92 <__sflush_r+0x1a>
 8006b8c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	dd48      	ble.n	8006c24 <__sflush_r+0xac>
 8006b92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b94:	2e00      	cmp	r6, #0
 8006b96:	d045      	beq.n	8006c24 <__sflush_r+0xac>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b9e:	682f      	ldr	r7, [r5, #0]
 8006ba0:	6a21      	ldr	r1, [r4, #32]
 8006ba2:	602b      	str	r3, [r5, #0]
 8006ba4:	d030      	beq.n	8006c08 <__sflush_r+0x90>
 8006ba6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	0759      	lsls	r1, r3, #29
 8006bac:	d505      	bpl.n	8006bba <__sflush_r+0x42>
 8006bae:	6863      	ldr	r3, [r4, #4]
 8006bb0:	1ad2      	subs	r2, r2, r3
 8006bb2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006bb4:	b10b      	cbz	r3, 8006bba <__sflush_r+0x42>
 8006bb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006bb8:	1ad2      	subs	r2, r2, r3
 8006bba:	2300      	movs	r3, #0
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bc0:	6a21      	ldr	r1, [r4, #32]
 8006bc2:	47b0      	blx	r6
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	d106      	bne.n	8006bd8 <__sflush_r+0x60>
 8006bca:	6829      	ldr	r1, [r5, #0]
 8006bcc:	291d      	cmp	r1, #29
 8006bce:	d82b      	bhi.n	8006c28 <__sflush_r+0xb0>
 8006bd0:	4a28      	ldr	r2, [pc, #160]	@ (8006c74 <__sflush_r+0xfc>)
 8006bd2:	40ca      	lsrs	r2, r1
 8006bd4:	07d6      	lsls	r6, r2, #31
 8006bd6:	d527      	bpl.n	8006c28 <__sflush_r+0xb0>
 8006bd8:	2200      	movs	r2, #0
 8006bda:	6062      	str	r2, [r4, #4]
 8006bdc:	6922      	ldr	r2, [r4, #16]
 8006bde:	04d9      	lsls	r1, r3, #19
 8006be0:	6022      	str	r2, [r4, #0]
 8006be2:	d504      	bpl.n	8006bee <__sflush_r+0x76>
 8006be4:	1c42      	adds	r2, r0, #1
 8006be6:	d101      	bne.n	8006bec <__sflush_r+0x74>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	b903      	cbnz	r3, 8006bee <__sflush_r+0x76>
 8006bec:	6560      	str	r0, [r4, #84]	@ 0x54
 8006bee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bf0:	602f      	str	r7, [r5, #0]
 8006bf2:	b1b9      	cbz	r1, 8006c24 <__sflush_r+0xac>
 8006bf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bf8:	4299      	cmp	r1, r3
 8006bfa:	d002      	beq.n	8006c02 <__sflush_r+0x8a>
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f7ff fb43 	bl	8006288 <_free_r>
 8006c02:	2300      	movs	r3, #0
 8006c04:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c06:	e00d      	b.n	8006c24 <__sflush_r+0xac>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	47b0      	blx	r6
 8006c0e:	4602      	mov	r2, r0
 8006c10:	1c50      	adds	r0, r2, #1
 8006c12:	d1c9      	bne.n	8006ba8 <__sflush_r+0x30>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0c6      	beq.n	8006ba8 <__sflush_r+0x30>
 8006c1a:	2b1d      	cmp	r3, #29
 8006c1c:	d001      	beq.n	8006c22 <__sflush_r+0xaa>
 8006c1e:	2b16      	cmp	r3, #22
 8006c20:	d11d      	bne.n	8006c5e <__sflush_r+0xe6>
 8006c22:	602f      	str	r7, [r5, #0]
 8006c24:	2000      	movs	r0, #0
 8006c26:	e021      	b.n	8006c6c <__sflush_r+0xf4>
 8006c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c2c:	b21b      	sxth	r3, r3
 8006c2e:	e01a      	b.n	8006c66 <__sflush_r+0xee>
 8006c30:	690f      	ldr	r7, [r1, #16]
 8006c32:	2f00      	cmp	r7, #0
 8006c34:	d0f6      	beq.n	8006c24 <__sflush_r+0xac>
 8006c36:	0793      	lsls	r3, r2, #30
 8006c38:	bf18      	it	ne
 8006c3a:	2300      	movne	r3, #0
 8006c3c:	680e      	ldr	r6, [r1, #0]
 8006c3e:	bf08      	it	eq
 8006c40:	694b      	ldreq	r3, [r1, #20]
 8006c42:	1bf6      	subs	r6, r6, r7
 8006c44:	600f      	str	r7, [r1, #0]
 8006c46:	608b      	str	r3, [r1, #8]
 8006c48:	2e00      	cmp	r6, #0
 8006c4a:	ddeb      	ble.n	8006c24 <__sflush_r+0xac>
 8006c4c:	4633      	mov	r3, r6
 8006c4e:	463a      	mov	r2, r7
 8006c50:	4628      	mov	r0, r5
 8006c52:	6a21      	ldr	r1, [r4, #32]
 8006c54:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006c58:	47e0      	blx	ip
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	dc07      	bgt.n	8006c6e <__sflush_r+0xf6>
 8006c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c66:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6a:	81a3      	strh	r3, [r4, #12]
 8006c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c6e:	4407      	add	r7, r0
 8006c70:	1a36      	subs	r6, r6, r0
 8006c72:	e7e9      	b.n	8006c48 <__sflush_r+0xd0>
 8006c74:	20400001 	.word	0x20400001

08006c78 <_fflush_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	690b      	ldr	r3, [r1, #16]
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	b913      	cbnz	r3, 8006c88 <_fflush_r+0x10>
 8006c82:	2500      	movs	r5, #0
 8006c84:	4628      	mov	r0, r5
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	b118      	cbz	r0, 8006c92 <_fflush_r+0x1a>
 8006c8a:	6a03      	ldr	r3, [r0, #32]
 8006c8c:	b90b      	cbnz	r3, 8006c92 <_fflush_r+0x1a>
 8006c8e:	f7fe fb95 	bl	80053bc <__sinit>
 8006c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0f3      	beq.n	8006c82 <_fflush_r+0xa>
 8006c9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c9c:	07d0      	lsls	r0, r2, #31
 8006c9e:	d404      	bmi.n	8006caa <_fflush_r+0x32>
 8006ca0:	0599      	lsls	r1, r3, #22
 8006ca2:	d402      	bmi.n	8006caa <_fflush_r+0x32>
 8006ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ca6:	f7fe fc80 	bl	80055aa <__retarget_lock_acquire_recursive>
 8006caa:	4628      	mov	r0, r5
 8006cac:	4621      	mov	r1, r4
 8006cae:	f7ff ff63 	bl	8006b78 <__sflush_r>
 8006cb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	07da      	lsls	r2, r3, #31
 8006cb8:	d4e4      	bmi.n	8006c84 <_fflush_r+0xc>
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	059b      	lsls	r3, r3, #22
 8006cbe:	d4e1      	bmi.n	8006c84 <_fflush_r+0xc>
 8006cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cc2:	f7fe fc73 	bl	80055ac <__retarget_lock_release_recursive>
 8006cc6:	e7dd      	b.n	8006c84 <_fflush_r+0xc>

08006cc8 <_sbrk_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	2300      	movs	r3, #0
 8006ccc:	4d05      	ldr	r5, [pc, #20]	@ (8006ce4 <_sbrk_r+0x1c>)
 8006cce:	4604      	mov	r4, r0
 8006cd0:	4608      	mov	r0, r1
 8006cd2:	602b      	str	r3, [r5, #0]
 8006cd4:	f7fb f9f8 	bl	80020c8 <_sbrk>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_sbrk_r+0x1a>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_sbrk_r+0x1a>
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	200006d4 	.word	0x200006d4

08006ce8 <memcpy>:
 8006ce8:	440a      	add	r2, r1
 8006cea:	4291      	cmp	r1, r2
 8006cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cf0:	d100      	bne.n	8006cf4 <memcpy+0xc>
 8006cf2:	4770      	bx	lr
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cfa:	4291      	cmp	r1, r2
 8006cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d00:	d1f9      	bne.n	8006cf6 <memcpy+0xe>
 8006d02:	bd10      	pop	{r4, pc}

08006d04 <__assert_func>:
 8006d04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d06:	4614      	mov	r4, r2
 8006d08:	461a      	mov	r2, r3
 8006d0a:	4b09      	ldr	r3, [pc, #36]	@ (8006d30 <__assert_func+0x2c>)
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68d8      	ldr	r0, [r3, #12]
 8006d12:	b14c      	cbz	r4, 8006d28 <__assert_func+0x24>
 8006d14:	4b07      	ldr	r3, [pc, #28]	@ (8006d34 <__assert_func+0x30>)
 8006d16:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d1a:	9100      	str	r1, [sp, #0]
 8006d1c:	462b      	mov	r3, r5
 8006d1e:	4906      	ldr	r1, [pc, #24]	@ (8006d38 <__assert_func+0x34>)
 8006d20:	f000 f842 	bl	8006da8 <fiprintf>
 8006d24:	f000 f852 	bl	8006dcc <abort>
 8006d28:	4b04      	ldr	r3, [pc, #16]	@ (8006d3c <__assert_func+0x38>)
 8006d2a:	461c      	mov	r4, r3
 8006d2c:	e7f3      	b.n	8006d16 <__assert_func+0x12>
 8006d2e:	bf00      	nop
 8006d30:	20000018 	.word	0x20000018
 8006d34:	08007476 	.word	0x08007476
 8006d38:	08007483 	.word	0x08007483
 8006d3c:	080074b1 	.word	0x080074b1

08006d40 <_calloc_r>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	fba1 5402 	umull	r5, r4, r1, r2
 8006d46:	b934      	cbnz	r4, 8006d56 <_calloc_r+0x16>
 8006d48:	4629      	mov	r1, r5
 8006d4a:	f7ff fb0f 	bl	800636c <_malloc_r>
 8006d4e:	4606      	mov	r6, r0
 8006d50:	b928      	cbnz	r0, 8006d5e <_calloc_r+0x1e>
 8006d52:	4630      	mov	r0, r6
 8006d54:	bd70      	pop	{r4, r5, r6, pc}
 8006d56:	220c      	movs	r2, #12
 8006d58:	2600      	movs	r6, #0
 8006d5a:	6002      	str	r2, [r0, #0]
 8006d5c:	e7f9      	b.n	8006d52 <_calloc_r+0x12>
 8006d5e:	462a      	mov	r2, r5
 8006d60:	4621      	mov	r1, r4
 8006d62:	f7fe fba4 	bl	80054ae <memset>
 8006d66:	e7f4      	b.n	8006d52 <_calloc_r+0x12>

08006d68 <__ascii_mbtowc>:
 8006d68:	b082      	sub	sp, #8
 8006d6a:	b901      	cbnz	r1, 8006d6e <__ascii_mbtowc+0x6>
 8006d6c:	a901      	add	r1, sp, #4
 8006d6e:	b142      	cbz	r2, 8006d82 <__ascii_mbtowc+0x1a>
 8006d70:	b14b      	cbz	r3, 8006d86 <__ascii_mbtowc+0x1e>
 8006d72:	7813      	ldrb	r3, [r2, #0]
 8006d74:	600b      	str	r3, [r1, #0]
 8006d76:	7812      	ldrb	r2, [r2, #0]
 8006d78:	1e10      	subs	r0, r2, #0
 8006d7a:	bf18      	it	ne
 8006d7c:	2001      	movne	r0, #1
 8006d7e:	b002      	add	sp, #8
 8006d80:	4770      	bx	lr
 8006d82:	4610      	mov	r0, r2
 8006d84:	e7fb      	b.n	8006d7e <__ascii_mbtowc+0x16>
 8006d86:	f06f 0001 	mvn.w	r0, #1
 8006d8a:	e7f8      	b.n	8006d7e <__ascii_mbtowc+0x16>

08006d8c <__ascii_wctomb>:
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	4608      	mov	r0, r1
 8006d90:	b141      	cbz	r1, 8006da4 <__ascii_wctomb+0x18>
 8006d92:	2aff      	cmp	r2, #255	@ 0xff
 8006d94:	d904      	bls.n	8006da0 <__ascii_wctomb+0x14>
 8006d96:	228a      	movs	r2, #138	@ 0x8a
 8006d98:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	4770      	bx	lr
 8006da0:	2001      	movs	r0, #1
 8006da2:	700a      	strb	r2, [r1, #0]
 8006da4:	4770      	bx	lr
	...

08006da8 <fiprintf>:
 8006da8:	b40e      	push	{r1, r2, r3}
 8006daa:	b503      	push	{r0, r1, lr}
 8006dac:	4601      	mov	r1, r0
 8006dae:	ab03      	add	r3, sp, #12
 8006db0:	4805      	ldr	r0, [pc, #20]	@ (8006dc8 <fiprintf+0x20>)
 8006db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006db6:	6800      	ldr	r0, [r0, #0]
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	f000 f835 	bl	8006e28 <_vfiprintf_r>
 8006dbe:	b002      	add	sp, #8
 8006dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dc4:	b003      	add	sp, #12
 8006dc6:	4770      	bx	lr
 8006dc8:	20000018 	.word	0x20000018

08006dcc <abort>:
 8006dcc:	2006      	movs	r0, #6
 8006dce:	b508      	push	{r3, lr}
 8006dd0:	f000 f9fe 	bl	80071d0 <raise>
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	f7fb f902 	bl	8001fde <_exit>

08006dda <__sfputc_r>:
 8006dda:	6893      	ldr	r3, [r2, #8]
 8006ddc:	b410      	push	{r4}
 8006dde:	3b01      	subs	r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	6093      	str	r3, [r2, #8]
 8006de4:	da07      	bge.n	8006df6 <__sfputc_r+0x1c>
 8006de6:	6994      	ldr	r4, [r2, #24]
 8006de8:	42a3      	cmp	r3, r4
 8006dea:	db01      	blt.n	8006df0 <__sfputc_r+0x16>
 8006dec:	290a      	cmp	r1, #10
 8006dee:	d102      	bne.n	8006df6 <__sfputc_r+0x1c>
 8006df0:	bc10      	pop	{r4}
 8006df2:	f000 b931 	b.w	8007058 <__swbuf_r>
 8006df6:	6813      	ldr	r3, [r2, #0]
 8006df8:	1c58      	adds	r0, r3, #1
 8006dfa:	6010      	str	r0, [r2, #0]
 8006dfc:	7019      	strb	r1, [r3, #0]
 8006dfe:	4608      	mov	r0, r1
 8006e00:	bc10      	pop	{r4}
 8006e02:	4770      	bx	lr

08006e04 <__sfputs_r>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	4606      	mov	r6, r0
 8006e08:	460f      	mov	r7, r1
 8006e0a:	4614      	mov	r4, r2
 8006e0c:	18d5      	adds	r5, r2, r3
 8006e0e:	42ac      	cmp	r4, r5
 8006e10:	d101      	bne.n	8006e16 <__sfputs_r+0x12>
 8006e12:	2000      	movs	r0, #0
 8006e14:	e007      	b.n	8006e26 <__sfputs_r+0x22>
 8006e16:	463a      	mov	r2, r7
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e1e:	f7ff ffdc 	bl	8006dda <__sfputc_r>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d1f3      	bne.n	8006e0e <__sfputs_r+0xa>
 8006e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e28 <_vfiprintf_r>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	460d      	mov	r5, r1
 8006e2e:	4614      	mov	r4, r2
 8006e30:	4698      	mov	r8, r3
 8006e32:	4606      	mov	r6, r0
 8006e34:	b09d      	sub	sp, #116	@ 0x74
 8006e36:	b118      	cbz	r0, 8006e40 <_vfiprintf_r+0x18>
 8006e38:	6a03      	ldr	r3, [r0, #32]
 8006e3a:	b90b      	cbnz	r3, 8006e40 <_vfiprintf_r+0x18>
 8006e3c:	f7fe fabe 	bl	80053bc <__sinit>
 8006e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e42:	07d9      	lsls	r1, r3, #31
 8006e44:	d405      	bmi.n	8006e52 <_vfiprintf_r+0x2a>
 8006e46:	89ab      	ldrh	r3, [r5, #12]
 8006e48:	059a      	lsls	r2, r3, #22
 8006e4a:	d402      	bmi.n	8006e52 <_vfiprintf_r+0x2a>
 8006e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e4e:	f7fe fbac 	bl	80055aa <__retarget_lock_acquire_recursive>
 8006e52:	89ab      	ldrh	r3, [r5, #12]
 8006e54:	071b      	lsls	r3, r3, #28
 8006e56:	d501      	bpl.n	8006e5c <_vfiprintf_r+0x34>
 8006e58:	692b      	ldr	r3, [r5, #16]
 8006e5a:	b99b      	cbnz	r3, 8006e84 <_vfiprintf_r+0x5c>
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	4630      	mov	r0, r6
 8006e60:	f000 f938 	bl	80070d4 <__swsetup_r>
 8006e64:	b170      	cbz	r0, 8006e84 <_vfiprintf_r+0x5c>
 8006e66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e68:	07dc      	lsls	r4, r3, #31
 8006e6a:	d504      	bpl.n	8006e76 <_vfiprintf_r+0x4e>
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e70:	b01d      	add	sp, #116	@ 0x74
 8006e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e76:	89ab      	ldrh	r3, [r5, #12]
 8006e78:	0598      	lsls	r0, r3, #22
 8006e7a:	d4f7      	bmi.n	8006e6c <_vfiprintf_r+0x44>
 8006e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e7e:	f7fe fb95 	bl	80055ac <__retarget_lock_release_recursive>
 8006e82:	e7f3      	b.n	8006e6c <_vfiprintf_r+0x44>
 8006e84:	2300      	movs	r3, #0
 8006e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e88:	2320      	movs	r3, #32
 8006e8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e8e:	2330      	movs	r3, #48	@ 0x30
 8006e90:	f04f 0901 	mov.w	r9, #1
 8006e94:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e98:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007044 <_vfiprintf_r+0x21c>
 8006e9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ea0:	4623      	mov	r3, r4
 8006ea2:	469a      	mov	sl, r3
 8006ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ea8:	b10a      	cbz	r2, 8006eae <_vfiprintf_r+0x86>
 8006eaa:	2a25      	cmp	r2, #37	@ 0x25
 8006eac:	d1f9      	bne.n	8006ea2 <_vfiprintf_r+0x7a>
 8006eae:	ebba 0b04 	subs.w	fp, sl, r4
 8006eb2:	d00b      	beq.n	8006ecc <_vfiprintf_r+0xa4>
 8006eb4:	465b      	mov	r3, fp
 8006eb6:	4622      	mov	r2, r4
 8006eb8:	4629      	mov	r1, r5
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f7ff ffa2 	bl	8006e04 <__sfputs_r>
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	f000 80a7 	beq.w	8007014 <_vfiprintf_r+0x1ec>
 8006ec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ec8:	445a      	add	r2, fp
 8006eca:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 809f 	beq.w	8007014 <_vfiprintf_r+0x1ec>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8006edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ee0:	f10a 0a01 	add.w	sl, sl, #1
 8006ee4:	9304      	str	r3, [sp, #16]
 8006ee6:	9307      	str	r3, [sp, #28]
 8006ee8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006eec:	931a      	str	r3, [sp, #104]	@ 0x68
 8006eee:	4654      	mov	r4, sl
 8006ef0:	2205      	movs	r2, #5
 8006ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef6:	4853      	ldr	r0, [pc, #332]	@ (8007044 <_vfiprintf_r+0x21c>)
 8006ef8:	f7fe fb59 	bl	80055ae <memchr>
 8006efc:	9a04      	ldr	r2, [sp, #16]
 8006efe:	b9d8      	cbnz	r0, 8006f38 <_vfiprintf_r+0x110>
 8006f00:	06d1      	lsls	r1, r2, #27
 8006f02:	bf44      	itt	mi
 8006f04:	2320      	movmi	r3, #32
 8006f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f0a:	0713      	lsls	r3, r2, #28
 8006f0c:	bf44      	itt	mi
 8006f0e:	232b      	movmi	r3, #43	@ 0x2b
 8006f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f14:	f89a 3000 	ldrb.w	r3, [sl]
 8006f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f1a:	d015      	beq.n	8006f48 <_vfiprintf_r+0x120>
 8006f1c:	4654      	mov	r4, sl
 8006f1e:	2000      	movs	r0, #0
 8006f20:	f04f 0c0a 	mov.w	ip, #10
 8006f24:	9a07      	ldr	r2, [sp, #28]
 8006f26:	4621      	mov	r1, r4
 8006f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f2c:	3b30      	subs	r3, #48	@ 0x30
 8006f2e:	2b09      	cmp	r3, #9
 8006f30:	d94b      	bls.n	8006fca <_vfiprintf_r+0x1a2>
 8006f32:	b1b0      	cbz	r0, 8006f62 <_vfiprintf_r+0x13a>
 8006f34:	9207      	str	r2, [sp, #28]
 8006f36:	e014      	b.n	8006f62 <_vfiprintf_r+0x13a>
 8006f38:	eba0 0308 	sub.w	r3, r0, r8
 8006f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8006f40:	4313      	orrs	r3, r2
 8006f42:	46a2      	mov	sl, r4
 8006f44:	9304      	str	r3, [sp, #16]
 8006f46:	e7d2      	b.n	8006eee <_vfiprintf_r+0xc6>
 8006f48:	9b03      	ldr	r3, [sp, #12]
 8006f4a:	1d19      	adds	r1, r3, #4
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	9103      	str	r1, [sp, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bfbb      	ittet	lt
 8006f54:	425b      	neglt	r3, r3
 8006f56:	f042 0202 	orrlt.w	r2, r2, #2
 8006f5a:	9307      	strge	r3, [sp, #28]
 8006f5c:	9307      	strlt	r3, [sp, #28]
 8006f5e:	bfb8      	it	lt
 8006f60:	9204      	strlt	r2, [sp, #16]
 8006f62:	7823      	ldrb	r3, [r4, #0]
 8006f64:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f66:	d10a      	bne.n	8006f7e <_vfiprintf_r+0x156>
 8006f68:	7863      	ldrb	r3, [r4, #1]
 8006f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f6c:	d132      	bne.n	8006fd4 <_vfiprintf_r+0x1ac>
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	3402      	adds	r4, #2
 8006f72:	1d1a      	adds	r2, r3, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	9203      	str	r2, [sp, #12]
 8006f78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f7c:	9305      	str	r3, [sp, #20]
 8006f7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007048 <_vfiprintf_r+0x220>
 8006f82:	2203      	movs	r2, #3
 8006f84:	4650      	mov	r0, sl
 8006f86:	7821      	ldrb	r1, [r4, #0]
 8006f88:	f7fe fb11 	bl	80055ae <memchr>
 8006f8c:	b138      	cbz	r0, 8006f9e <_vfiprintf_r+0x176>
 8006f8e:	2240      	movs	r2, #64	@ 0x40
 8006f90:	9b04      	ldr	r3, [sp, #16]
 8006f92:	eba0 000a 	sub.w	r0, r0, sl
 8006f96:	4082      	lsls	r2, r0
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	3401      	adds	r4, #1
 8006f9c:	9304      	str	r3, [sp, #16]
 8006f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa2:	2206      	movs	r2, #6
 8006fa4:	4829      	ldr	r0, [pc, #164]	@ (800704c <_vfiprintf_r+0x224>)
 8006fa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006faa:	f7fe fb00 	bl	80055ae <memchr>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d03f      	beq.n	8007032 <_vfiprintf_r+0x20a>
 8006fb2:	4b27      	ldr	r3, [pc, #156]	@ (8007050 <_vfiprintf_r+0x228>)
 8006fb4:	bb1b      	cbnz	r3, 8006ffe <_vfiprintf_r+0x1d6>
 8006fb6:	9b03      	ldr	r3, [sp, #12]
 8006fb8:	3307      	adds	r3, #7
 8006fba:	f023 0307 	bic.w	r3, r3, #7
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	9303      	str	r3, [sp, #12]
 8006fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fc4:	443b      	add	r3, r7
 8006fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fc8:	e76a      	b.n	8006ea0 <_vfiprintf_r+0x78>
 8006fca:	460c      	mov	r4, r1
 8006fcc:	2001      	movs	r0, #1
 8006fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fd2:	e7a8      	b.n	8006f26 <_vfiprintf_r+0xfe>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f04f 0c0a 	mov.w	ip, #10
 8006fda:	4619      	mov	r1, r3
 8006fdc:	3401      	adds	r4, #1
 8006fde:	9305      	str	r3, [sp, #20]
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fe6:	3a30      	subs	r2, #48	@ 0x30
 8006fe8:	2a09      	cmp	r2, #9
 8006fea:	d903      	bls.n	8006ff4 <_vfiprintf_r+0x1cc>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0c6      	beq.n	8006f7e <_vfiprintf_r+0x156>
 8006ff0:	9105      	str	r1, [sp, #20]
 8006ff2:	e7c4      	b.n	8006f7e <_vfiprintf_r+0x156>
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ffc:	e7f0      	b.n	8006fe0 <_vfiprintf_r+0x1b8>
 8006ffe:	ab03      	add	r3, sp, #12
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	462a      	mov	r2, r5
 8007004:	4630      	mov	r0, r6
 8007006:	4b13      	ldr	r3, [pc, #76]	@ (8007054 <_vfiprintf_r+0x22c>)
 8007008:	a904      	add	r1, sp, #16
 800700a:	f7fd fd8f 	bl	8004b2c <_printf_float>
 800700e:	4607      	mov	r7, r0
 8007010:	1c78      	adds	r0, r7, #1
 8007012:	d1d6      	bne.n	8006fc2 <_vfiprintf_r+0x19a>
 8007014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007016:	07d9      	lsls	r1, r3, #31
 8007018:	d405      	bmi.n	8007026 <_vfiprintf_r+0x1fe>
 800701a:	89ab      	ldrh	r3, [r5, #12]
 800701c:	059a      	lsls	r2, r3, #22
 800701e:	d402      	bmi.n	8007026 <_vfiprintf_r+0x1fe>
 8007020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007022:	f7fe fac3 	bl	80055ac <__retarget_lock_release_recursive>
 8007026:	89ab      	ldrh	r3, [r5, #12]
 8007028:	065b      	lsls	r3, r3, #25
 800702a:	f53f af1f 	bmi.w	8006e6c <_vfiprintf_r+0x44>
 800702e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007030:	e71e      	b.n	8006e70 <_vfiprintf_r+0x48>
 8007032:	ab03      	add	r3, sp, #12
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	462a      	mov	r2, r5
 8007038:	4630      	mov	r0, r6
 800703a:	4b06      	ldr	r3, [pc, #24]	@ (8007054 <_vfiprintf_r+0x22c>)
 800703c:	a904      	add	r1, sp, #16
 800703e:	f7fe f813 	bl	8005068 <_printf_i>
 8007042:	e7e4      	b.n	800700e <_vfiprintf_r+0x1e6>
 8007044:	080074b2 	.word	0x080074b2
 8007048:	080074b8 	.word	0x080074b8
 800704c:	080074bc 	.word	0x080074bc
 8007050:	08004b2d 	.word	0x08004b2d
 8007054:	08006e05 	.word	0x08006e05

08007058 <__swbuf_r>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	460e      	mov	r6, r1
 800705c:	4614      	mov	r4, r2
 800705e:	4605      	mov	r5, r0
 8007060:	b118      	cbz	r0, 800706a <__swbuf_r+0x12>
 8007062:	6a03      	ldr	r3, [r0, #32]
 8007064:	b90b      	cbnz	r3, 800706a <__swbuf_r+0x12>
 8007066:	f7fe f9a9 	bl	80053bc <__sinit>
 800706a:	69a3      	ldr	r3, [r4, #24]
 800706c:	60a3      	str	r3, [r4, #8]
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	071a      	lsls	r2, r3, #28
 8007072:	d501      	bpl.n	8007078 <__swbuf_r+0x20>
 8007074:	6923      	ldr	r3, [r4, #16]
 8007076:	b943      	cbnz	r3, 800708a <__swbuf_r+0x32>
 8007078:	4621      	mov	r1, r4
 800707a:	4628      	mov	r0, r5
 800707c:	f000 f82a 	bl	80070d4 <__swsetup_r>
 8007080:	b118      	cbz	r0, 800708a <__swbuf_r+0x32>
 8007082:	f04f 37ff 	mov.w	r7, #4294967295
 8007086:	4638      	mov	r0, r7
 8007088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	6922      	ldr	r2, [r4, #16]
 800708e:	b2f6      	uxtb	r6, r6
 8007090:	1a98      	subs	r0, r3, r2
 8007092:	6963      	ldr	r3, [r4, #20]
 8007094:	4637      	mov	r7, r6
 8007096:	4283      	cmp	r3, r0
 8007098:	dc05      	bgt.n	80070a6 <__swbuf_r+0x4e>
 800709a:	4621      	mov	r1, r4
 800709c:	4628      	mov	r0, r5
 800709e:	f7ff fdeb 	bl	8006c78 <_fflush_r>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d1ed      	bne.n	8007082 <__swbuf_r+0x2a>
 80070a6:	68a3      	ldr	r3, [r4, #8]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	60a3      	str	r3, [r4, #8]
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	6022      	str	r2, [r4, #0]
 80070b2:	701e      	strb	r6, [r3, #0]
 80070b4:	6962      	ldr	r2, [r4, #20]
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d004      	beq.n	80070c6 <__swbuf_r+0x6e>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	07db      	lsls	r3, r3, #31
 80070c0:	d5e1      	bpl.n	8007086 <__swbuf_r+0x2e>
 80070c2:	2e0a      	cmp	r6, #10
 80070c4:	d1df      	bne.n	8007086 <__swbuf_r+0x2e>
 80070c6:	4621      	mov	r1, r4
 80070c8:	4628      	mov	r0, r5
 80070ca:	f7ff fdd5 	bl	8006c78 <_fflush_r>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d0d9      	beq.n	8007086 <__swbuf_r+0x2e>
 80070d2:	e7d6      	b.n	8007082 <__swbuf_r+0x2a>

080070d4 <__swsetup_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4b29      	ldr	r3, [pc, #164]	@ (800717c <__swsetup_r+0xa8>)
 80070d8:	4605      	mov	r5, r0
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	460c      	mov	r4, r1
 80070de:	b118      	cbz	r0, 80070e8 <__swsetup_r+0x14>
 80070e0:	6a03      	ldr	r3, [r0, #32]
 80070e2:	b90b      	cbnz	r3, 80070e8 <__swsetup_r+0x14>
 80070e4:	f7fe f96a 	bl	80053bc <__sinit>
 80070e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ec:	0719      	lsls	r1, r3, #28
 80070ee:	d422      	bmi.n	8007136 <__swsetup_r+0x62>
 80070f0:	06da      	lsls	r2, r3, #27
 80070f2:	d407      	bmi.n	8007104 <__swsetup_r+0x30>
 80070f4:	2209      	movs	r2, #9
 80070f6:	602a      	str	r2, [r5, #0]
 80070f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007100:	81a3      	strh	r3, [r4, #12]
 8007102:	e033      	b.n	800716c <__swsetup_r+0x98>
 8007104:	0758      	lsls	r0, r3, #29
 8007106:	d512      	bpl.n	800712e <__swsetup_r+0x5a>
 8007108:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800710a:	b141      	cbz	r1, 800711e <__swsetup_r+0x4a>
 800710c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007110:	4299      	cmp	r1, r3
 8007112:	d002      	beq.n	800711a <__swsetup_r+0x46>
 8007114:	4628      	mov	r0, r5
 8007116:	f7ff f8b7 	bl	8006288 <_free_r>
 800711a:	2300      	movs	r3, #0
 800711c:	6363      	str	r3, [r4, #52]	@ 0x34
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	2300      	movs	r3, #0
 8007128:	6063      	str	r3, [r4, #4]
 800712a:	6923      	ldr	r3, [r4, #16]
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	f043 0308 	orr.w	r3, r3, #8
 8007134:	81a3      	strh	r3, [r4, #12]
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	b94b      	cbnz	r3, 800714e <__swsetup_r+0x7a>
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007140:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007144:	d003      	beq.n	800714e <__swsetup_r+0x7a>
 8007146:	4621      	mov	r1, r4
 8007148:	4628      	mov	r0, r5
 800714a:	f000 f882 	bl	8007252 <__smakebuf_r>
 800714e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007152:	f013 0201 	ands.w	r2, r3, #1
 8007156:	d00a      	beq.n	800716e <__swsetup_r+0x9a>
 8007158:	2200      	movs	r2, #0
 800715a:	60a2      	str	r2, [r4, #8]
 800715c:	6962      	ldr	r2, [r4, #20]
 800715e:	4252      	negs	r2, r2
 8007160:	61a2      	str	r2, [r4, #24]
 8007162:	6922      	ldr	r2, [r4, #16]
 8007164:	b942      	cbnz	r2, 8007178 <__swsetup_r+0xa4>
 8007166:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800716a:	d1c5      	bne.n	80070f8 <__swsetup_r+0x24>
 800716c:	bd38      	pop	{r3, r4, r5, pc}
 800716e:	0799      	lsls	r1, r3, #30
 8007170:	bf58      	it	pl
 8007172:	6962      	ldrpl	r2, [r4, #20]
 8007174:	60a2      	str	r2, [r4, #8]
 8007176:	e7f4      	b.n	8007162 <__swsetup_r+0x8e>
 8007178:	2000      	movs	r0, #0
 800717a:	e7f7      	b.n	800716c <__swsetup_r+0x98>
 800717c:	20000018 	.word	0x20000018

08007180 <_raise_r>:
 8007180:	291f      	cmp	r1, #31
 8007182:	b538      	push	{r3, r4, r5, lr}
 8007184:	4605      	mov	r5, r0
 8007186:	460c      	mov	r4, r1
 8007188:	d904      	bls.n	8007194 <_raise_r+0x14>
 800718a:	2316      	movs	r3, #22
 800718c:	6003      	str	r3, [r0, #0]
 800718e:	f04f 30ff 	mov.w	r0, #4294967295
 8007192:	bd38      	pop	{r3, r4, r5, pc}
 8007194:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007196:	b112      	cbz	r2, 800719e <_raise_r+0x1e>
 8007198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800719c:	b94b      	cbnz	r3, 80071b2 <_raise_r+0x32>
 800719e:	4628      	mov	r0, r5
 80071a0:	f000 f830 	bl	8007204 <_getpid_r>
 80071a4:	4622      	mov	r2, r4
 80071a6:	4601      	mov	r1, r0
 80071a8:	4628      	mov	r0, r5
 80071aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ae:	f000 b817 	b.w	80071e0 <_kill_r>
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d00a      	beq.n	80071cc <_raise_r+0x4c>
 80071b6:	1c59      	adds	r1, r3, #1
 80071b8:	d103      	bne.n	80071c2 <_raise_r+0x42>
 80071ba:	2316      	movs	r3, #22
 80071bc:	6003      	str	r3, [r0, #0]
 80071be:	2001      	movs	r0, #1
 80071c0:	e7e7      	b.n	8007192 <_raise_r+0x12>
 80071c2:	2100      	movs	r1, #0
 80071c4:	4620      	mov	r0, r4
 80071c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071ca:	4798      	blx	r3
 80071cc:	2000      	movs	r0, #0
 80071ce:	e7e0      	b.n	8007192 <_raise_r+0x12>

080071d0 <raise>:
 80071d0:	4b02      	ldr	r3, [pc, #8]	@ (80071dc <raise+0xc>)
 80071d2:	4601      	mov	r1, r0
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	f7ff bfd3 	b.w	8007180 <_raise_r>
 80071da:	bf00      	nop
 80071dc:	20000018 	.word	0x20000018

080071e0 <_kill_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	2300      	movs	r3, #0
 80071e4:	4d06      	ldr	r5, [pc, #24]	@ (8007200 <_kill_r+0x20>)
 80071e6:	4604      	mov	r4, r0
 80071e8:	4608      	mov	r0, r1
 80071ea:	4611      	mov	r1, r2
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	f7fa fee6 	bl	8001fbe <_kill>
 80071f2:	1c43      	adds	r3, r0, #1
 80071f4:	d102      	bne.n	80071fc <_kill_r+0x1c>
 80071f6:	682b      	ldr	r3, [r5, #0]
 80071f8:	b103      	cbz	r3, 80071fc <_kill_r+0x1c>
 80071fa:	6023      	str	r3, [r4, #0]
 80071fc:	bd38      	pop	{r3, r4, r5, pc}
 80071fe:	bf00      	nop
 8007200:	200006d4 	.word	0x200006d4

08007204 <_getpid_r>:
 8007204:	f7fa bed4 	b.w	8001fb0 <_getpid>

08007208 <__swhatbuf_r>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	460c      	mov	r4, r1
 800720c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007210:	4615      	mov	r5, r2
 8007212:	2900      	cmp	r1, #0
 8007214:	461e      	mov	r6, r3
 8007216:	b096      	sub	sp, #88	@ 0x58
 8007218:	da0c      	bge.n	8007234 <__swhatbuf_r+0x2c>
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	2100      	movs	r1, #0
 800721e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007222:	bf14      	ite	ne
 8007224:	2340      	movne	r3, #64	@ 0x40
 8007226:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800722a:	2000      	movs	r0, #0
 800722c:	6031      	str	r1, [r6, #0]
 800722e:	602b      	str	r3, [r5, #0]
 8007230:	b016      	add	sp, #88	@ 0x58
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	466a      	mov	r2, sp
 8007236:	f000 f849 	bl	80072cc <_fstat_r>
 800723a:	2800      	cmp	r0, #0
 800723c:	dbed      	blt.n	800721a <__swhatbuf_r+0x12>
 800723e:	9901      	ldr	r1, [sp, #4]
 8007240:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007244:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007248:	4259      	negs	r1, r3
 800724a:	4159      	adcs	r1, r3
 800724c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007250:	e7eb      	b.n	800722a <__swhatbuf_r+0x22>

08007252 <__smakebuf_r>:
 8007252:	898b      	ldrh	r3, [r1, #12]
 8007254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007256:	079d      	lsls	r5, r3, #30
 8007258:	4606      	mov	r6, r0
 800725a:	460c      	mov	r4, r1
 800725c:	d507      	bpl.n	800726e <__smakebuf_r+0x1c>
 800725e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	6123      	str	r3, [r4, #16]
 8007266:	2301      	movs	r3, #1
 8007268:	6163      	str	r3, [r4, #20]
 800726a:	b003      	add	sp, #12
 800726c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800726e:	466a      	mov	r2, sp
 8007270:	ab01      	add	r3, sp, #4
 8007272:	f7ff ffc9 	bl	8007208 <__swhatbuf_r>
 8007276:	9f00      	ldr	r7, [sp, #0]
 8007278:	4605      	mov	r5, r0
 800727a:	4639      	mov	r1, r7
 800727c:	4630      	mov	r0, r6
 800727e:	f7ff f875 	bl	800636c <_malloc_r>
 8007282:	b948      	cbnz	r0, 8007298 <__smakebuf_r+0x46>
 8007284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007288:	059a      	lsls	r2, r3, #22
 800728a:	d4ee      	bmi.n	800726a <__smakebuf_r+0x18>
 800728c:	f023 0303 	bic.w	r3, r3, #3
 8007290:	f043 0302 	orr.w	r3, r3, #2
 8007294:	81a3      	strh	r3, [r4, #12]
 8007296:	e7e2      	b.n	800725e <__smakebuf_r+0xc>
 8007298:	89a3      	ldrh	r3, [r4, #12]
 800729a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800729e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a2:	81a3      	strh	r3, [r4, #12]
 80072a4:	9b01      	ldr	r3, [sp, #4]
 80072a6:	6020      	str	r0, [r4, #0]
 80072a8:	b15b      	cbz	r3, 80072c2 <__smakebuf_r+0x70>
 80072aa:	4630      	mov	r0, r6
 80072ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072b0:	f000 f81e 	bl	80072f0 <_isatty_r>
 80072b4:	b128      	cbz	r0, 80072c2 <__smakebuf_r+0x70>
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	f023 0303 	bic.w	r3, r3, #3
 80072bc:	f043 0301 	orr.w	r3, r3, #1
 80072c0:	81a3      	strh	r3, [r4, #12]
 80072c2:	89a3      	ldrh	r3, [r4, #12]
 80072c4:	431d      	orrs	r5, r3
 80072c6:	81a5      	strh	r5, [r4, #12]
 80072c8:	e7cf      	b.n	800726a <__smakebuf_r+0x18>
	...

080072cc <_fstat_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	2300      	movs	r3, #0
 80072d0:	4d06      	ldr	r5, [pc, #24]	@ (80072ec <_fstat_r+0x20>)
 80072d2:	4604      	mov	r4, r0
 80072d4:	4608      	mov	r0, r1
 80072d6:	4611      	mov	r1, r2
 80072d8:	602b      	str	r3, [r5, #0]
 80072da:	f7fa fecf 	bl	800207c <_fstat>
 80072de:	1c43      	adds	r3, r0, #1
 80072e0:	d102      	bne.n	80072e8 <_fstat_r+0x1c>
 80072e2:	682b      	ldr	r3, [r5, #0]
 80072e4:	b103      	cbz	r3, 80072e8 <_fstat_r+0x1c>
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	bd38      	pop	{r3, r4, r5, pc}
 80072ea:	bf00      	nop
 80072ec:	200006d4 	.word	0x200006d4

080072f0 <_isatty_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	2300      	movs	r3, #0
 80072f4:	4d05      	ldr	r5, [pc, #20]	@ (800730c <_isatty_r+0x1c>)
 80072f6:	4604      	mov	r4, r0
 80072f8:	4608      	mov	r0, r1
 80072fa:	602b      	str	r3, [r5, #0]
 80072fc:	f7fa fecd 	bl	800209a <_isatty>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_isatty_r+0x1a>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	b103      	cbz	r3, 800730a <_isatty_r+0x1a>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	200006d4 	.word	0x200006d4

08007310 <_init>:
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	bf00      	nop
 8007314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007316:	bc08      	pop	{r3}
 8007318:	469e      	mov	lr, r3
 800731a:	4770      	bx	lr

0800731c <_fini>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	bf00      	nop
 8007320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007322:	bc08      	pop	{r3}
 8007324:	469e      	mov	lr, r3
 8007326:	4770      	bx	lr
