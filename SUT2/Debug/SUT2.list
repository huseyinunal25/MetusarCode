
SUT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f90  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  080070a0  080070a0  000080a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800743c  0800743c  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800743c  0800743c  0000843c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007444  08007444  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007444  08007444  00008444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007448  08007448  00008448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800744c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  200001d4  08007620  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  08007620  000096e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b49  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023af  00000000  00000000  00019d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0001c0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0c  00000000  00000000  0001d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190c0  00000000  00000000  0001e0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cd9  00000000  00000000  00037184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090860  00000000  00000000  0004ae5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db6bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d4c  00000000  00000000  000db700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e144c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007088 	.word	0x08007088

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007088 	.word	0x08007088

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f001 f848 	bl	80020c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f84c 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f000 f9e2 	bl	8001404 <MX_GPIO_Init>
  MX_DMA_Init();
 8001040:	f000 f9c2 	bl	80013c8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001044:	f000 f88c 	bl	8001160 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001048:	f000 f8b8 	bl	80011bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800104c:	f000 f93e 	bl	80012cc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001050:	f000 f966 	bl	8001320 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001054:	f000 f98e 	bl	8001374 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001058:	f000 f8e6 	bl	8001228 <MX_TIM1_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800105c:	b662      	cpsie	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN 2 */
  // Enable global interrupts
  __enable_irq();
  
  // Start interrupt-driven UART reception on UART1
  HAL_UART_Receive_IT(&huart1, &incoming_buffer[buffer_index], 1);
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <main+0x8c>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <main+0x90>)
 8001068:	4413      	add	r3, r2
 800106a:	2201      	movs	r2, #1
 800106c:	4619      	mov	r1, r3
 800106e:	4815      	ldr	r0, [pc, #84]	@ (80010c4 <main+0x94>)
 8001070:	f002 fe4d 	bl	8003d0e <HAL_UART_Receive_IT>

  // Configure NVIC for TIM2 interrupt
  HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2101      	movs	r1, #1
 8001078:	201c      	movs	r0, #28
 800107a:	f001 f95e 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800107e:	201c      	movs	r0, #28
 8001080:	f001 f977 	bl	8002372 <HAL_NVIC_EnableIRQ>
  
  // Configure NVIC for UART1 interrupt
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	2025      	movs	r0, #37	@ 0x25
 800108a:	f001 f956 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800108e:	2025      	movs	r0, #37	@ 0x25
 8001090:	f001 f96f 	bl	8002372 <HAL_NVIC_EnableIRQ>
  
  // Start timer interrupt (every 5ms for better performance)
  HAL_TIM_Base_Start_IT(&htim2);
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <main+0x98>)
 8001096:	f002 fb47 	bl	8003728 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Check if we have received data
    if (packet_received) {
 800109a:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <main+0x9c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0fb      	beq.n	800109a <main+0x6a>
      packet_received = 0;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <main+0x9c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]

      // Process the received packet
      ParseTelemetryPacket(rx_buffer);
 80010a8:	4809      	ldr	r0, [pc, #36]	@ (80010d0 <main+0xa0>)
 80010aa:	f000 f9d9 	bl	8001460 <ParseTelemetryPacket>
      // Apply filtering to telemetry values
      ApplyFiltering();
 80010ae:	f000 fc7d 	bl	80019ac <ApplyFiltering>
      // Update status based on telemetry data
      UpdateStatusFromTelemetry();
 80010b2:	f000 fb67 	bl	8001784 <UpdateStatusFromTelemetry>
      // Send status message instead of telemetry data
      SendStatusMessage();
 80010b6:	f000 fc33 	bl	8001920 <SendStatusMessage>
    if (packet_received) {
 80010ba:	e7ee      	b.n	800109a <main+0x6a>
 80010bc:	200004d8 	.word	0x200004d8
 80010c0:	20000448 	.word	0x20000448
 80010c4:	200002e4 	.word	0x200002e4
 80010c8:	200004dc 	.word	0x200004dc
 80010cc:	20000444 	.word	0x20000444
 80010d0:	20000420 	.word	0x20000420

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b090      	sub	sp, #64	@ 0x40
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	2228      	movs	r2, #40	@ 0x28
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 f89f 	bl	8005226 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001108:	2302      	movs	r3, #2
 800110a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001110:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001112:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	4618      	mov	r0, r3
 800111e:	f001 fe1f 	bl	8002d60 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001128:	f000 fcbe 	bl	8001aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001138:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800113c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2102      	movs	r1, #2
 8001146:	4618      	mov	r0, r3
 8001148:	f002 f88c 	bl	8003264 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001152:	f000 fca9 	bl	8001aa8 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3740      	adds	r7, #64	@ 0x40
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <MX_I2C1_Init+0x50>)
 8001166:	4a13      	ldr	r2, [pc, #76]	@ (80011b4 <MX_I2C1_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_I2C1_Init+0x50>)
 800116c:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <MX_I2C1_Init+0x58>)
 800116e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001176:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_I2C1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <MX_I2C1_Init+0x50>)
 800117e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001182:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <MX_I2C1_Init+0x50>)
 800119e:	f001 fc9b 	bl	8002ad8 <HAL_I2C_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a8:	f000 fc7e 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200001f0 	.word	0x200001f0
 80011b4:	40005400 	.word	0x40005400
 80011b8:	000186a0 	.word	0x000186a0

080011bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c0:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011c2:	4a18      	ldr	r2, [pc, #96]	@ (8001224 <MX_SPI1_Init+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011f0:	2210      	movs	r2, #16
 80011f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_SPI1_Init+0x64>)
 8001208:	220a      	movs	r2, #10
 800120a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_SPI1_Init+0x64>)
 800120e:	f002 f9b7 	bl	8003580 <HAL_SPI_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001218:	f000 fc46 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000244 	.word	0x20000244
 8001224:	40013000 	.word	0x40013000

08001228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001246:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <MX_TIM1_Init+0x9c>)
 8001248:	4a1f      	ldr	r2, [pc, #124]	@ (80012c8 <MX_TIM1_Init+0xa0>)
 800124a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800124c:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <MX_TIM1_Init+0x9c>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <MX_TIM1_Init+0x9c>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001258:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_TIM1_Init+0x9c>)
 800125a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800125e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <MX_TIM1_Init+0x9c>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <MX_TIM1_Init+0x9c>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <MX_TIM1_Init+0x9c>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001272:	4814      	ldr	r0, [pc, #80]	@ (80012c4 <MX_TIM1_Init+0x9c>)
 8001274:	f002 fa08 	bl	8003688 <HAL_TIM_Base_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800127e:	f000 fc13 	bl	8001aa8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001282:	2307      	movs	r3, #7
 8001284:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	4619      	mov	r1, r3
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <MX_TIM1_Init+0x9c>)
 8001292:	f002 fa9b 	bl	80037cc <HAL_TIM_SlaveConfigSynchro>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800129c:	f000 fc04 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_TIM1_Init+0x9c>)
 80012ae:	f002 fc4b 	bl	8003b48 <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80012b8:	f000 fbf6 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	3720      	adds	r7, #32
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000029c 	.word	0x2000029c
 80012c8:	40012c00 	.word	0x40012c00

080012cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  // UART1 configured for both TX and RX (115200 baud, 8N1)
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	@ (800131c <MX_USART1_UART_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 8001304:	f002 fc7e 	bl	8003c04 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800130e:	f000 fbcb 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200002e4 	.word	0x200002e4
 800131c:	40013800 	.word	0x40013800

08001320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <MX_USART2_UART_Init+0x50>)
 8001328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b08      	ldr	r3, [pc, #32]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001358:	f002 fc54 	bl	8003c04 <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001362:	f000 fba1 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000032c 	.word	0x2000032c
 8001370:	40004400 	.word	0x40004400

08001374 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <MX_USART3_UART_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 80013ac:	f002 fc2a 	bl	8003c04 <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013b6:	f000 fb77 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000374 	.word	0x20000374
 80013c4:	40004800 	.word	0x40004800

080013c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <MX_DMA_Init+0x38>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001400 <MX_DMA_Init+0x38>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6153      	str	r3, [r2, #20]
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_DMA_Init+0x38>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	200e      	movs	r0, #14
 80013ec:	f000 ffa5 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80013f0:	200e      	movs	r0, #14
 80013f2:	f000 ffbe 	bl	8002372 <HAL_NVIC_EnableIRQ>

}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140a:	4b14      	ldr	r3, [pc, #80]	@ (800145c <MX_GPIO_Init+0x58>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a13      	ldr	r2, [pc, #76]	@ (800145c <MX_GPIO_Init+0x58>)
 8001410:	f043 0320 	orr.w	r3, r3, #32
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <MX_GPIO_Init+0x58>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 0320 	and.w	r3, r3, #32
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <MX_GPIO_Init+0x58>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <MX_GPIO_Init+0x58>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <MX_GPIO_Init+0x58>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	4b08      	ldr	r3, [pc, #32]	@ (800145c <MX_GPIO_Init+0x58>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	4a07      	ldr	r2, [pc, #28]	@ (800145c <MX_GPIO_Init+0x58>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6193      	str	r3, [r2, #24]
 8001446:	4b05      	ldr	r3, [pc, #20]	@ (800145c <MX_GPIO_Init+0x58>)
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	40021000 	.word	0x40021000

08001460 <ParseTelemetryPacket>:
/**
 * @brief Parse telemetry packet from UART
 * @param packet: Pointer to 36-byte packet
 */
void ParseTelemetryPacket(uint8_t* packet)
{
 8001460:	b480      	push	{r7}
 8001462:	b08b      	sub	sp, #44	@ 0x2c
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    // Check header and footer
    if (packet[0] != TELEMETRY_HEADER || 
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2bab      	cmp	r3, #171	@ 0xab
 800146e:	f040 808e 	bne.w	800158e <ParseTelemetryPacket+0x12e>
        packet[34] != FOOTER_1 || 
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3322      	adds	r3, #34	@ 0x22
 8001476:	781b      	ldrb	r3, [r3, #0]
    if (packet[0] != TELEMETRY_HEADER || 
 8001478:	2b0d      	cmp	r3, #13
 800147a:	f040 8088 	bne.w	800158e <ParseTelemetryPacket+0x12e>
        packet[35] != FOOTER_2) {
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3323      	adds	r3, #35	@ 0x23
 8001482:	781b      	ldrb	r3, [r3, #0]
        packet[34] != FOOTER_1 || 
 8001484:	2b0a      	cmp	r3, #10
 8001486:	f040 8082 	bne.w	800158e <ParseTelemetryPacket+0x12e>
        return;
    }
    
    // Parse big-endian float values - need to reverse byte order for ARM (little-endian)
    // Altitude (bytes 2-5) - reverse order: 4,3,2,1
    uint8_t alt_bytes[4] = {packet[4], packet[3], packet[2], packet[1]};
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	791b      	ldrb	r3, [r3, #4]
 800148e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	78db      	ldrb	r3, [r3, #3]
 8001496:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	789b      	ldrb	r3, [r3, #2]
 800149e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	785b      	ldrb	r3, [r3, #1]
 80014a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    memcpy(&telemetry_data.altitude, alt_bytes, 4);
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	4a3a      	ldr	r2, [pc, #232]	@ (8001598 <ParseTelemetryPacket+0x138>)
 80014ae:	6013      	str	r3, [r2, #0]
    
    // Pressure (bytes 6-9) - reverse order: 8,7,6,5
    uint8_t press_bytes[4] = {packet[8], packet[7], packet[6], packet[5]};
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7a1b      	ldrb	r3, [r3, #8]
 80014b4:	f887 3020 	strb.w	r3, [r7, #32]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	79db      	ldrb	r3, [r3, #7]
 80014bc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	799b      	ldrb	r3, [r3, #6]
 80014c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	795b      	ldrb	r3, [r3, #5]
 80014cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    memcpy(&telemetry_data.pressure, press_bytes, 4);
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	4a31      	ldr	r2, [pc, #196]	@ (8001598 <ParseTelemetryPacket+0x138>)
 80014d4:	6053      	str	r3, [r2, #4]
    
    // Acceleration X (bytes 10-13) - reverse order: 12,11,10,9
    uint8_t accel_x_bytes[4] = {packet[12], packet[11], packet[10], packet[9]};
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7b1b      	ldrb	r3, [r3, #12]
 80014da:	773b      	strb	r3, [r7, #28]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7adb      	ldrb	r3, [r3, #11]
 80014e0:	777b      	strb	r3, [r7, #29]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	7a9b      	ldrb	r3, [r3, #10]
 80014e6:	77bb      	strb	r3, [r7, #30]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7a5b      	ldrb	r3, [r3, #9]
 80014ec:	77fb      	strb	r3, [r7, #31]
    memcpy(&telemetry_data.accel_x, accel_x_bytes, 4);
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4a29      	ldr	r2, [pc, #164]	@ (8001598 <ParseTelemetryPacket+0x138>)
 80014f2:	6093      	str	r3, [r2, #8]
    
    // Acceleration Y (bytes 14-17) - reverse order: 16,15,14,13
    uint8_t accel_y_bytes[4] = {packet[16], packet[15], packet[14], packet[13]};
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7c1b      	ldrb	r3, [r3, #16]
 80014f8:	763b      	strb	r3, [r7, #24]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7bdb      	ldrb	r3, [r3, #15]
 80014fe:	767b      	strb	r3, [r7, #25]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7b9b      	ldrb	r3, [r3, #14]
 8001504:	76bb      	strb	r3, [r7, #26]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7b5b      	ldrb	r3, [r3, #13]
 800150a:	76fb      	strb	r3, [r7, #27]
    memcpy(&telemetry_data.accel_y, accel_y_bytes, 4);
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	4a22      	ldr	r2, [pc, #136]	@ (8001598 <ParseTelemetryPacket+0x138>)
 8001510:	60d3      	str	r3, [r2, #12]
    
    // Acceleration Z (bytes 18-21) - reverse order: 20,19,18,17
    uint8_t accel_z_bytes[4] = {packet[20], packet[19], packet[18], packet[17]};
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7d1b      	ldrb	r3, [r3, #20]
 8001516:	753b      	strb	r3, [r7, #20]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7cdb      	ldrb	r3, [r3, #19]
 800151c:	757b      	strb	r3, [r7, #21]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7c9b      	ldrb	r3, [r3, #18]
 8001522:	75bb      	strb	r3, [r7, #22]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7c5b      	ldrb	r3, [r3, #17]
 8001528:	75fb      	strb	r3, [r7, #23]
    memcpy(&telemetry_data.accel_z, accel_z_bytes, 4);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	4a1a      	ldr	r2, [pc, #104]	@ (8001598 <ParseTelemetryPacket+0x138>)
 800152e:	6113      	str	r3, [r2, #16]
    
    // Angle X (bytes 22-25) - reverse order: 24,23,22,21
    uint8_t angle_x_bytes[4] = {packet[24], packet[23], packet[22], packet[21]};
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7e1b      	ldrb	r3, [r3, #24]
 8001534:	743b      	strb	r3, [r7, #16]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7ddb      	ldrb	r3, [r3, #23]
 800153a:	747b      	strb	r3, [r7, #17]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7d9b      	ldrb	r3, [r3, #22]
 8001540:	74bb      	strb	r3, [r7, #18]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7d5b      	ldrb	r3, [r3, #21]
 8001546:	74fb      	strb	r3, [r7, #19]
    memcpy(&telemetry_data.angle_x, angle_x_bytes, 4);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4a13      	ldr	r2, [pc, #76]	@ (8001598 <ParseTelemetryPacket+0x138>)
 800154c:	6153      	str	r3, [r2, #20]
    
    // Angle Y (bytes 26-29) - reverse order: 28,27,26,25
    uint8_t angle_y_bytes[4] = {packet[28], packet[27], packet[26], packet[25]};
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7f1b      	ldrb	r3, [r3, #28]
 8001552:	733b      	strb	r3, [r7, #12]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7edb      	ldrb	r3, [r3, #27]
 8001558:	737b      	strb	r3, [r7, #13]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7e9b      	ldrb	r3, [r3, #26]
 800155e:	73bb      	strb	r3, [r7, #14]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7e5b      	ldrb	r3, [r3, #25]
 8001564:	73fb      	strb	r3, [r7, #15]
    memcpy(&telemetry_data.angle_y, angle_y_bytes, 4);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4a0b      	ldr	r2, [pc, #44]	@ (8001598 <ParseTelemetryPacket+0x138>)
 800156a:	6193      	str	r3, [r2, #24]
    
    // Angle Z (bytes 30-33) - reverse order: 32,31,30,29
    uint8_t angle_z_bytes[4] = {packet[32], packet[31], packet[30], packet[29]};
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001572:	723b      	strb	r3, [r7, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7fdb      	ldrb	r3, [r3, #31]
 8001578:	727b      	strb	r3, [r7, #9]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7f9b      	ldrb	r3, [r3, #30]
 800157e:	72bb      	strb	r3, [r7, #10]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7f5b      	ldrb	r3, [r3, #29]
 8001584:	72fb      	strb	r3, [r7, #11]
    memcpy(&telemetry_data.angle_z, angle_z_bytes, 4);
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	4a03      	ldr	r2, [pc, #12]	@ (8001598 <ParseTelemetryPacket+0x138>)
 800158a:	61d3      	str	r3, [r2, #28]
 800158c:	e000      	b.n	8001590 <ParseTelemetryPacket+0x130>
        return;
 800158e:	bf00      	nop
}
 8001590:	372c      	adds	r7, #44	@ 0x2c
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000400 	.word	0x20000400

0800159c <ProcessIncomingData>:
/**
 * @brief Process incoming byte and look for complete packets
 * @param new_byte: New byte received
 */
void ProcessIncomingData(uint8_t new_byte)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
    // Store byte in buffer
    incoming_buffer[buffer_index] = new_byte;
 80015a6:	4b44      	ldr	r3, [pc, #272]	@ (80016b8 <ProcessIncomingData+0x11c>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	4619      	mov	r1, r3
 80015ac:	4a43      	ldr	r2, [pc, #268]	@ (80016bc <ProcessIncomingData+0x120>)
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	5453      	strb	r3, [r2, r1]

    // Simple and fast packet detection
    static uint8_t packet_state = 0;
    static uint8_t byte_count = 0;

    switch (packet_state) {
 80015b2:	4b43      	ldr	r3, [pc, #268]	@ (80016c0 <ProcessIncomingData+0x124>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <ProcessIncomingData+0x24>
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d00a      	beq.n	80015d4 <ProcessIncomingData+0x38>
                packet_state = 0;
                byte_count = 0;
            }
            break;
    }
}
 80015be:	e076      	b.n	80016ae <ProcessIncomingData+0x112>
            if (new_byte == TELEMETRY_HEADER) {
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2bab      	cmp	r3, #171	@ 0xab
 80015c4:	d170      	bne.n	80016a8 <ProcessIncomingData+0x10c>
                packet_state = 1;
 80015c6:	4b3e      	ldr	r3, [pc, #248]	@ (80016c0 <ProcessIncomingData+0x124>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
                byte_count = 1;
 80015cc:	4b3d      	ldr	r3, [pc, #244]	@ (80016c4 <ProcessIncomingData+0x128>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
            break;
 80015d2:	e069      	b.n	80016a8 <ProcessIncomingData+0x10c>
            byte_count++;
 80015d4:	4b3b      	ldr	r3, [pc, #236]	@ (80016c4 <ProcessIncomingData+0x128>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b39      	ldr	r3, [pc, #228]	@ (80016c4 <ProcessIncomingData+0x128>)
 80015de:	701a      	strb	r2, [r3, #0]
            if (byte_count >= PACKET_SIZE) {
 80015e0:	4b38      	ldr	r3, [pc, #224]	@ (80016c4 <ProcessIncomingData+0x128>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b23      	cmp	r3, #35	@ 0x23
 80015e6:	d961      	bls.n	80016ac <ProcessIncomingData+0x110>
                if (incoming_buffer[(buffer_index - PACKET_SIZE + 1 + PACKET_SIZE - 2) % (PACKET_SIZE * 4)] == FOOTER_1 &&
 80015e8:	4b33      	ldr	r3, [pc, #204]	@ (80016b8 <ProcessIncomingData+0x11c>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	1e59      	subs	r1, r3, #1
 80015ee:	4b36      	ldr	r3, [pc, #216]	@ (80016c8 <ProcessIncomingData+0x12c>)
 80015f0:	fb83 2301 	smull	r2, r3, r3, r1
 80015f4:	115a      	asrs	r2, r3, #5
 80015f6:	17cb      	asrs	r3, r1, #31
 80015f8:	1ad2      	subs	r2, r2, r3
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4413      	add	r3, r2
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	1aca      	subs	r2, r1, r3
 8001604:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <ProcessIncomingData+0x120>)
 8001606:	5c9b      	ldrb	r3, [r3, r2]
 8001608:	2b0d      	cmp	r3, #13
 800160a:	d146      	bne.n	800169a <ProcessIncomingData+0xfe>
                    incoming_buffer[(buffer_index - PACKET_SIZE + 1 + PACKET_SIZE - 1) % (PACKET_SIZE * 4)] == FOOTER_2) {
 800160c:	4b2a      	ldr	r3, [pc, #168]	@ (80016b8 <ProcessIncomingData+0x11c>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	4b2d      	ldr	r3, [pc, #180]	@ (80016c8 <ProcessIncomingData+0x12c>)
 8001614:	fb83 2301 	smull	r2, r3, r3, r1
 8001618:	115a      	asrs	r2, r3, #5
 800161a:	17cb      	asrs	r3, r1, #31
 800161c:	1ad2      	subs	r2, r2, r3
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	1aca      	subs	r2, r1, r3
 8001628:	4b24      	ldr	r3, [pc, #144]	@ (80016bc <ProcessIncomingData+0x120>)
 800162a:	5c9b      	ldrb	r3, [r3, r2]
                if (incoming_buffer[(buffer_index - PACKET_SIZE + 1 + PACKET_SIZE - 2) % (PACKET_SIZE * 4)] == FOOTER_1 &&
 800162c:	2b0a      	cmp	r3, #10
 800162e:	d134      	bne.n	800169a <ProcessIncomingData+0xfe>
                    uint16_t start_idx = (buffer_index - PACKET_SIZE + 1) % (PACKET_SIZE * 4);
 8001630:	4b21      	ldr	r3, [pc, #132]	@ (80016b8 <ProcessIncomingData+0x11c>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 8001638:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <ProcessIncomingData+0x12c>)
 800163a:	fb83 1302 	smull	r1, r3, r3, r2
 800163e:	1159      	asrs	r1, r3, #5
 8001640:	17d3      	asrs	r3, r2, #31
 8001642:	1ac9      	subs	r1, r1, r3
 8001644:	460b      	mov	r3, r1
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	1ad1      	subs	r1, r2, r3
 800164e:	460b      	mov	r3, r1
 8001650:	81bb      	strh	r3, [r7, #12]
                    for (uint8_t i = 0; i < PACKET_SIZE; i++) {
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	e015      	b.n	8001684 <ProcessIncomingData+0xe8>
                        rx_buffer[i] = incoming_buffer[(start_idx + i) % (PACKET_SIZE * 4)];
 8001658:	89ba      	ldrh	r2, [r7, #12]
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	18d1      	adds	r1, r2, r3
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <ProcessIncomingData+0x12c>)
 8001660:	fb83 2301 	smull	r2, r3, r3, r1
 8001664:	115a      	asrs	r2, r3, #5
 8001666:	17cb      	asrs	r3, r1, #31
 8001668:	1ad2      	subs	r2, r2, r3
 800166a:	4613      	mov	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	4413      	add	r3, r2
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	1aca      	subs	r2, r1, r3
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	4911      	ldr	r1, [pc, #68]	@ (80016bc <ProcessIncomingData+0x120>)
 8001678:	5c89      	ldrb	r1, [r1, r2]
 800167a:	4a14      	ldr	r2, [pc, #80]	@ (80016cc <ProcessIncomingData+0x130>)
 800167c:	54d1      	strb	r1, [r2, r3]
                    for (uint8_t i = 0; i < PACKET_SIZE; i++) {
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	3301      	adds	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	2b23      	cmp	r3, #35	@ 0x23
 8001688:	d9e6      	bls.n	8001658 <ProcessIncomingData+0xbc>
                    packet_received = 1;
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <ProcessIncomingData+0x134>)
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
                    packets_received_count++; // Increment packet counter
 8001690:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <ProcessIncomingData+0x138>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	4a0f      	ldr	r2, [pc, #60]	@ (80016d4 <ProcessIncomingData+0x138>)
 8001698:	6013      	str	r3, [r2, #0]
                packet_state = 0;
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <ProcessIncomingData+0x124>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
                byte_count = 0;
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <ProcessIncomingData+0x128>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
            break;
 80016a6:	e001      	b.n	80016ac <ProcessIncomingData+0x110>
            break;
 80016a8:	bf00      	nop
 80016aa:	e000      	b.n	80016ae <ProcessIncomingData+0x112>
            break;
 80016ac:	bf00      	nop
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	200004d8 	.word	0x200004d8
 80016bc:	20000448 	.word	0x20000448
 80016c0:	2000058e 	.word	0x2000058e
 80016c4:	2000058f 	.word	0x2000058f
 80016c8:	38e38e39 	.word	0x38e38e39
 80016cc:	20000420 	.word	0x20000420
 80016d0:	20000444 	.word	0x20000444
 80016d4:	20000524 	.word	0x20000524

080016d8 <HAL_UART_RxCpltCallback>:
/**
 * @brief UART receive complete callback
 * @param huart: UART handle
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a14      	ldr	r2, [pc, #80]	@ (8001738 <HAL_UART_RxCpltCallback+0x60>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d122      	bne.n	8001730 <HAL_UART_RxCpltCallback+0x58>
    // Process the received byte immediately
    ProcessIncomingData(incoming_buffer[buffer_index]);
 80016ea:	4b14      	ldr	r3, [pc, #80]	@ (800173c <HAL_UART_RxCpltCallback+0x64>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <HAL_UART_RxCpltCallback+0x68>)
 80016f2:	5c9b      	ldrb	r3, [r3, r2]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff51 	bl	800159c <ProcessIncomingData>

    // Move to next buffer position
    buffer_index = (buffer_index + 1) % (PACKET_SIZE * 4);
 80016fa:	4b10      	ldr	r3, [pc, #64]	@ (800173c <HAL_UART_RxCpltCallback+0x64>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <HAL_UART_RxCpltCallback+0x6c>)
 8001702:	fb83 1302 	smull	r1, r3, r3, r2
 8001706:	1159      	asrs	r1, r3, #5
 8001708:	17d3      	asrs	r3, r2, #31
 800170a:	1ac9      	subs	r1, r1, r3
 800170c:	460b      	mov	r3, r1
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	1ad1      	subs	r1, r2, r3
 8001716:	b28a      	uxth	r2, r1
 8001718:	4b08      	ldr	r3, [pc, #32]	@ (800173c <HAL_UART_RxCpltCallback+0x64>)
 800171a:	801a      	strh	r2, [r3, #0]

    // Continue receiving next byte immediately - no delays
    HAL_UART_Receive_IT(&huart1, &incoming_buffer[buffer_index], 1);
 800171c:	4b07      	ldr	r3, [pc, #28]	@ (800173c <HAL_UART_RxCpltCallback+0x64>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <HAL_UART_RxCpltCallback+0x68>)
 8001724:	4413      	add	r3, r2
 8001726:	2201      	movs	r2, #1
 8001728:	4619      	mov	r1, r3
 800172a:	4807      	ldr	r0, [pc, #28]	@ (8001748 <HAL_UART_RxCpltCallback+0x70>)
 800172c:	f002 faef 	bl	8003d0e <HAL_UART_Receive_IT>
  }
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40013800 	.word	0x40013800
 800173c:	200004d8 	.word	0x200004d8
 8001740:	20000448 	.word	0x20000448
 8001744:	38e38e39 	.word	0x38e38e39
 8001748:	200002e4 	.word	0x200002e4

0800174c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	@ (8001778 <HAL_UART_TxCpltCallback+0x2c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d103      	bne.n	8001766 <HAL_UART_TxCpltCallback+0x1a>
        // USART1 ile gönderim tamamlandı
        uart_busy = 0; // Örn: tekrar gönderime izin ver
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <HAL_UART_TxCpltCallback+0x30>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
        // USART2 için yapılacak işlemler
    }
    else if (huart->Instance == USART3) {
        // USART3 için yapılacak işlemler
    }
}
 8001764:	e003      	b.n	800176e <HAL_UART_TxCpltCallback+0x22>
    else if (huart->Instance == USART2) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <HAL_UART_TxCpltCallback+0x34>)
 800176c:	4293      	cmp	r3, r2
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40013800 	.word	0x40013800
 800177c:	200004da 	.word	0x200004da
 8001780:	40004400 	.word	0x40004400

08001784 <UpdateStatusFromTelemetry>:

/**
 * @brief Update status bits based on telemetry data
 */
void UpdateStatusFromTelemetry(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
    uint8_t new_status = current_status_byte; // Start with current status (preserve existing bits)
 800178a:	4b4a      	ldr	r3, [pc, #296]	@ (80018b4 <UpdateStatusFromTelemetry+0x130>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	75fb      	strb	r3, [r7, #23]
    uint32_t current_time = HAL_GetTick();
 8001790:	f000 fcf2 	bl	8002178 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

    // Get filtered values
    float filtered_altitude = GetFilteredValue(altitude_filter);
 8001796:	4848      	ldr	r0, [pc, #288]	@ (80018b8 <UpdateStatusFromTelemetry+0x134>)
 8001798:	f000 f956 	bl	8001a48 <GetFilteredValue>
 800179c:	60f8      	str	r0, [r7, #12]
    float filtered_accel_z = GetFilteredValue(accel_z_filter);
 800179e:	4847      	ldr	r0, [pc, #284]	@ (80018bc <UpdateStatusFromTelemetry+0x138>)
 80017a0:	f000 f952 	bl	8001a48 <GetFilteredValue>
 80017a4:	60b8      	str	r0, [r7, #8]
    float filtered_angle_x = GetFilteredValue(angle_x_filter);
 80017a6:	4846      	ldr	r0, [pc, #280]	@ (80018c0 <UpdateStatusFromTelemetry+0x13c>)
 80017a8:	f000 f94e 	bl	8001a48 <GetFilteredValue>
 80017ac:	6078      	str	r0, [r7, #4]
    float filtered_angle_y = GetFilteredValue(angle_y_filter);
 80017ae:	4845      	ldr	r0, [pc, #276]	@ (80018c4 <UpdateStatusFromTelemetry+0x140>)
 80017b0:	f000 f94a 	bl	8001a48 <GetFilteredValue>
 80017b4:	6038      	str	r0, [r7, #0]

    // Check rocket fired (accel z > 30) - FIRST BIT (Bit 0)
    // Once activated, this bit stays on permanently
    if (filtered_accel_z > 30.0f) {
 80017b6:	4944      	ldr	r1, [pc, #272]	@ (80018c8 <UpdateStatusFromTelemetry+0x144>)
 80017b8:	68b8      	ldr	r0, [r7, #8]
 80017ba:	f7ff fc2f 	bl	800101c <__aeabi_fcmpgt>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00c      	beq.n	80017de <UpdateStatusFromTelemetry+0x5a>
        new_status |= STATUS_ROCKET_FIRED_BIT;
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	75fb      	strb	r3, [r7, #23]
        if (!(current_status_byte & STATUS_ROCKET_FIRED_BIT)) {
 80017cc:	4b39      	ldr	r3, [pc, #228]	@ (80018b4 <UpdateStatusFromTelemetry+0x130>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <UpdateStatusFromTelemetry+0x5a>
            // Rocket just fired, record timestamp
            rocket_fired_timestamp = current_time;
 80017d8:	4a3c      	ldr	r2, [pc, #240]	@ (80018cc <UpdateStatusFromTelemetry+0x148>)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	6013      	str	r3, [r2, #0]
        }
    }

    // Check waited 5 seconds after rocket fired - SECOND BIT (Bit 1)
    // Only if rocket fired bit is active, and once activated stays on
    if ((new_status & STATUS_ROCKET_FIRED_BIT) &&
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00b      	beq.n	8001800 <UpdateStatusFromTelemetry+0x7c>
        (current_time - rocket_fired_timestamp >= 5000)) {
 80017e8:	4b38      	ldr	r3, [pc, #224]	@ (80018cc <UpdateStatusFromTelemetry+0x148>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
    if ((new_status & STATUS_ROCKET_FIRED_BIT) &&
 80017f0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d903      	bls.n	8001800 <UpdateStatusFromTelemetry+0x7c>
        new_status |= STATUS_WAITED_5SN_BIT;
 80017f8:	7dfb      	ldrb	r3, [r7, #23]
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	75fb      	strb	r3, [r7, #23]
    }

    // Check minimum altitude (>= 1500) - THIRD BIT (Bit 2)
    // Only if waited 5s bit is active, and once activated stays on
    if ((new_status & STATUS_WAITED_5SN_BIT) &&
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00a      	beq.n	8001820 <UpdateStatusFromTelemetry+0x9c>
 800180a:	4931      	ldr	r1, [pc, #196]	@ (80018d0 <UpdateStatusFromTelemetry+0x14c>)
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f7ff fbfb 	bl	8001008 <__aeabi_fcmpge>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <UpdateStatusFromTelemetry+0x9c>
        filtered_altitude >= 1500.0f) {
        new_status |= STATUS_MIN_ALTITUDE_BIT;
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	75fb      	strb	r3, [r7, #23]
    }

    // Check angle exceeded (x or y > 60) - FOURTH BIT (Bit 3)
    // Only if minimum altitude bit is active, and once activated stays on
    if ((new_status & STATUS_MIN_ALTITUDE_BIT) &&
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	d011      	beq.n	800184e <UpdateStatusFromTelemetry+0xca>
 800182a:	492a      	ldr	r1, [pc, #168]	@ (80018d4 <UpdateStatusFromTelemetry+0x150>)
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fbf5 	bl	800101c <__aeabi_fcmpgt>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d106      	bne.n	8001846 <UpdateStatusFromTelemetry+0xc2>
        (filtered_angle_x > 60.0f || filtered_angle_y > 60.0f)) {
 8001838:	4926      	ldr	r1, [pc, #152]	@ (80018d4 <UpdateStatusFromTelemetry+0x150>)
 800183a:	6838      	ldr	r0, [r7, #0]
 800183c:	f7ff fbee 	bl	800101c <__aeabi_fcmpgt>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <UpdateStatusFromTelemetry+0xca>
        new_status |= STATUS_ANGLE_EXCEEDED_BIT;
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	75fb      	strb	r3, [r7, #23]
    }

    // Check altitude decreasing - FIFTH BIT (Bit 4)
    // Only if angle exceeded bit is active, and once activated stays on
    if ((new_status & STATUS_ANGLE_EXCEEDED_BIT) &&
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d010      	beq.n	800187a <UpdateStatusFromTelemetry+0xf6>
        filtered_altitude < previous_altitude) {
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <UpdateStatusFromTelemetry+0x154>)
 800185a:	681b      	ldr	r3, [r3, #0]
    if ((new_status & STATUS_ANGLE_EXCEEDED_BIT) &&
 800185c:	4619      	mov	r1, r3
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f7ff fbbe 	bl	8000fe0 <__aeabi_fcmplt>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <UpdateStatusFromTelemetry+0xf6>
        new_status |= STATUS_ALTITUDE_DECREASING_BIT;
 800186a:	7dfb      	ldrb	r3, [r7, #23]
 800186c:	f043 0310 	orr.w	r3, r3, #16
 8001870:	75fb      	strb	r3, [r7, #23]
        // First parachute deployed at the same time as altitude decreasing - SIXTH BIT (Bit 5)
        new_status |= STATUS_FIRST_PARACHUTE_BIT;
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	f043 0320 	orr.w	r3, r3, #32
 8001878:	75fb      	strb	r3, [r7, #23]
    }

    // Check altitude <= 550 - SEVENTH BIT (Bit 6)
    // Only if first parachute bit is active, and once activated stays on
    if (new_status & STATUS_FIRST_PARACHUTE_BIT) {
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <UpdateStatusFromTelemetry+0x108>
        new_status |= STATUS_ALTITUDE_550_BIT;
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800188a:	75fb      	strb	r3, [r7, #23]
    }

    // Check second parachute deployed - EIGHTH BIT (Bit 7) - LAST BIT
    // Only if first parachute bit is active, and once activated stays on
    if (new_status & STATUS_FIRST_PARACHUTE_BIT) {
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <UpdateStatusFromTelemetry+0x11a>
        new_status |= STATUS_SECOND_PARACHUTE_BIT;
 8001896:	7dfb      	ldrb	r3, [r7, #23]
 8001898:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800189c:	75fb      	strb	r3, [r7, #23]
    }
    
    // Update status byte (new bits are added, existing bits are preserved)
    current_status_byte = new_status;
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <UpdateStatusFromTelemetry+0x130>)
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	7013      	strb	r3, [r2, #0]

    // Store current filtered altitude for next comparison
    previous_altitude = filtered_altitude;
 80018a4:	4a0c      	ldr	r2, [pc, #48]	@ (80018d8 <UpdateStatusFromTelemetry+0x154>)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6013      	str	r3, [r2, #0]
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000528 	.word	0x20000528
 80018b8:	20000534 	.word	0x20000534
 80018bc:	20000548 	.word	0x20000548
 80018c0:	2000055c 	.word	0x2000055c
 80018c4:	20000570 	.word	0x20000570
 80018c8:	41f00000 	.word	0x41f00000
 80018cc:	20000530 	.word	0x20000530
 80018d0:	44bb8000 	.word	0x44bb8000
 80018d4:	42700000 	.word	0x42700000
 80018d8:	2000052c 	.word	0x2000052c

080018dc <CalculateChecksum>:
 * @param data: Pointer to data array
 * @param length: Length of data (excluding checksum)
 * @retval Checksum value
 */
uint8_t CalculateChecksum(uint8_t* data, uint8_t length)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	70fb      	strb	r3, [r7, #3]
    uint16_t sum = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < length; i++) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	737b      	strb	r3, [r7, #13]
 80018f0:	e00a      	b.n	8001908 <CalculateChecksum+0x2c>
        sum += data[i];
 80018f2:	7b7b      	ldrb	r3, [r7, #13]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	89fb      	ldrh	r3, [r7, #14]
 80018fe:	4413      	add	r3, r2
 8001900:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < length; i++) {
 8001902:	7b7b      	ldrb	r3, [r7, #13]
 8001904:	3301      	adds	r3, #1
 8001906:	737b      	strb	r3, [r7, #13]
 8001908:	7b7a      	ldrb	r2, [r7, #13]
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	429a      	cmp	r2, r3
 800190e:	d3f0      	bcc.n	80018f2 <CalculateChecksum+0x16>
    }
    return (uint8_t)(sum % 256);
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	b2db      	uxtb	r3, r3
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
	...

08001920 <SendStatusMessage>:

/**
 * @brief Send status message in the new 6-byte format
 */
void SendStatusMessage(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0


    // Build status message
    status_message[0] = STATUS_HEADER;        // 0xAA
 8001926:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <SendStatusMessage+0x7c>)
 8001928:	22aa      	movs	r2, #170	@ 0xaa
 800192a:	701a      	strb	r2, [r3, #0]
    status_message[1] = current_status_byte;  // Status byte
 800192c:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <SendStatusMessage+0x80>)
 800192e:	781a      	ldrb	r2, [r3, #0]
 8001930:	4b1a      	ldr	r3, [pc, #104]	@ (800199c <SendStatusMessage+0x7c>)
 8001932:	705a      	strb	r2, [r3, #1]
    status_message[2] = 0x00;                // Reserved
 8001934:	4b19      	ldr	r3, [pc, #100]	@ (800199c <SendStatusMessage+0x7c>)
 8001936:	2200      	movs	r2, #0
 8001938:	709a      	strb	r2, [r3, #2]
    status_message[3] = 0x00;                // Checksum (calculated below)
 800193a:	4b18      	ldr	r3, [pc, #96]	@ (800199c <SendStatusMessage+0x7c>)
 800193c:	2200      	movs	r2, #0
 800193e:	70da      	strb	r2, [r3, #3]
    status_message[4] = STATUS_FOOTER_1;      // 0x0D
 8001940:	4b16      	ldr	r3, [pc, #88]	@ (800199c <SendStatusMessage+0x7c>)
 8001942:	220d      	movs	r2, #13
 8001944:	711a      	strb	r2, [r3, #4]
    status_message[5] = STATUS_FOOTER_2;      // 0x0A
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <SendStatusMessage+0x7c>)
 8001948:	220a      	movs	r2, #10
 800194a:	715a      	strb	r2, [r3, #5]

    // Calculate checksum (sum of bytes 0, 1, 2, 4, 5, then mod 256)
    uint8_t checksum_data[5] = {status_message[0], status_message[1], status_message[2], status_message[4], status_message[5]};
 800194c:	4b13      	ldr	r3, [pc, #76]	@ (800199c <SendStatusMessage+0x7c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	703b      	strb	r3, [r7, #0]
 8001952:	4b12      	ldr	r3, [pc, #72]	@ (800199c <SendStatusMessage+0x7c>)
 8001954:	785b      	ldrb	r3, [r3, #1]
 8001956:	707b      	strb	r3, [r7, #1]
 8001958:	4b10      	ldr	r3, [pc, #64]	@ (800199c <SendStatusMessage+0x7c>)
 800195a:	789b      	ldrb	r3, [r3, #2]
 800195c:	70bb      	strb	r3, [r7, #2]
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <SendStatusMessage+0x7c>)
 8001960:	791b      	ldrb	r3, [r3, #4]
 8001962:	70fb      	strb	r3, [r7, #3]
 8001964:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <SendStatusMessage+0x7c>)
 8001966:	795b      	ldrb	r3, [r3, #5]
 8001968:	713b      	strb	r3, [r7, #4]
    status_message[3] = CalculateChecksum(checksum_data, 5);
 800196a:	463b      	mov	r3, r7
 800196c:	2105      	movs	r1, #5
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ffb4 	bl	80018dc <CalculateChecksum>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <SendStatusMessage+0x7c>)
 800197a:	70da      	strb	r2, [r3, #3]
    // Send status message
    if (!uart_busy) {
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <SendStatusMessage+0x84>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d107      	bne.n	8001994 <SendStatusMessage+0x74>
        uart_busy = 1;
 8001984:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <SendStatusMessage+0x84>)
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_IT(&huart1, status_message, STATUS_MESSAGE_SIZE);
 800198a:	2206      	movs	r2, #6
 800198c:	4903      	ldr	r1, [pc, #12]	@ (800199c <SendStatusMessage+0x7c>)
 800198e:	4806      	ldr	r0, [pc, #24]	@ (80019a8 <SendStatusMessage+0x88>)
 8001990:	f002 f988 	bl	8003ca4 <HAL_UART_Transmit_IT>
    }

}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000588 	.word	0x20000588
 80019a0:	20000528 	.word	0x20000528
 80019a4:	200004da 	.word	0x200004da
 80019a8:	200002e4 	.word	0x200002e4

080019ac <ApplyFiltering>:

/**
 * @brief Apply filtering to telemetry values
 */
void ApplyFiltering(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
    // Add new values to filter arrays
    altitude_filter[filter_index] = telemetry_data.altitude;
 80019b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <ApplyFiltering+0x7c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <ApplyFiltering+0x80>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001a30 <ApplyFiltering+0x84>)
 80019bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    accel_z_filter[filter_index] = telemetry_data.accel_z;
 80019c0:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <ApplyFiltering+0x7c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4619      	mov	r1, r3
 80019c6:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <ApplyFiltering+0x80>)
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001a34 <ApplyFiltering+0x88>)
 80019cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    angle_x_filter[filter_index] = telemetry_data.angle_x;
 80019d0:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <ApplyFiltering+0x7c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <ApplyFiltering+0x80>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	4a17      	ldr	r2, [pc, #92]	@ (8001a38 <ApplyFiltering+0x8c>)
 80019dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    angle_y_filter[filter_index] = telemetry_data.angle_y;
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <ApplyFiltering+0x7c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <ApplyFiltering+0x80>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	4a14      	ldr	r2, [pc, #80]	@ (8001a3c <ApplyFiltering+0x90>)
 80019ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    // Move to next filter position
    filter_index = (filter_index + 1) % FILTER_SIZE;
 80019f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <ApplyFiltering+0x7c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <ApplyFiltering+0x94>)
 80019f8:	fb83 1302 	smull	r1, r3, r3, r2
 80019fc:	1059      	asrs	r1, r3, #1
 80019fe:	17d3      	asrs	r3, r2, #31
 8001a00:	1ac9      	subs	r1, r1, r3
 8001a02:	460b      	mov	r3, r1
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	1ad1      	subs	r1, r2, r3
 8001a0a:	b2ca      	uxtb	r2, r1
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <ApplyFiltering+0x7c>)
 8001a0e:	701a      	strb	r2, [r3, #0]
    
    // Mark filter as filled after first complete cycle
    if (filter_index == 0) {
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <ApplyFiltering+0x7c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <ApplyFiltering+0x72>
        filter_filled = 1;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <ApplyFiltering+0x98>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
    }
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000584 	.word	0x20000584
 8001a2c:	20000400 	.word	0x20000400
 8001a30:	20000534 	.word	0x20000534
 8001a34:	20000548 	.word	0x20000548
 8001a38:	2000055c 	.word	0x2000055c
 8001a3c:	20000570 	.word	0x20000570
 8001a40:	66666667 	.word	0x66666667
 8001a44:	20000585 	.word	0x20000585

08001a48 <GetFilteredValue>:
 * @brief Get filtered value from filter array
 * @param filter_array: Pointer to filter array
 * @retval Filtered value (average)
 */
float GetFilteredValue(float* filter_array)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    if (!filter_filled) {
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <GetFilteredValue+0x58>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <GetFilteredValue+0x16>
        // If filter not filled yet, return current value
        return filter_array[0];
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	e01b      	b.n	8001a96 <GetFilteredValue+0x4e>
    }

    // Calculate moving average
    float sum = 0;
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < FILTER_SIZE; i++) {
 8001a64:	2300      	movs	r3, #0
 8001a66:	72fb      	strb	r3, [r7, #11]
 8001a68:	e00d      	b.n	8001a86 <GetFilteredValue+0x3e>
        sum += filter_array[i];
 8001a6a:	7afb      	ldrb	r3, [r7, #11]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f7ff f80c 	bl	8000a94 <__addsf3>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < FILTER_SIZE; i++) {
 8001a80:	7afb      	ldrb	r3, [r7, #11]
 8001a82:	3301      	adds	r3, #1
 8001a84:	72fb      	strb	r3, [r7, #11]
 8001a86:	7afb      	ldrb	r3, [r7, #11]
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d9ee      	bls.n	8001a6a <GetFilteredValue+0x22>
    }
    return sum / FILTER_SIZE;
 8001a8c:	4905      	ldr	r1, [pc, #20]	@ (8001aa4 <GetFilteredValue+0x5c>)
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f7ff f9bc 	bl	8000e0c <__aeabi_fdiv>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000585 	.word	0x20000585
 8001aa4:	40a00000 	.word	0x40a00000

08001aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i
}
 8001aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <Error_Handler+0x8>

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	4a14      	ldr	r2, [pc, #80]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6193      	str	r3, [r2, #24]
 8001ac6:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	61d3      	str	r3, [r2, #28]
 8001ade:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <HAL_MspInit+0x5c>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <HAL_MspInit+0x60>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	4a04      	ldr	r2, [pc, #16]	@ (8001b14 <HAL_MspInit+0x60>)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010000 	.word	0x40010000

08001b18 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a15      	ldr	r2, [pc, #84]	@ (8001b88 <HAL_I2C_MspInit+0x70>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d123      	bne.n	8001b80 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b38:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <HAL_I2C_MspInit+0x74>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a13      	ldr	r2, [pc, #76]	@ (8001b8c <HAL_I2C_MspInit+0x74>)
 8001b3e:	f043 0308 	orr.w	r3, r3, #8
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_I2C_MspInit+0x74>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b50:	23c0      	movs	r3, #192	@ 0xc0
 8001b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b54:	2312      	movs	r3, #18
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	480b      	ldr	r0, [pc, #44]	@ (8001b90 <HAL_I2C_MspInit+0x78>)
 8001b64:	f000 fe34 	bl	80027d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b68:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <HAL_I2C_MspInit+0x74>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	@ (8001b8c <HAL_I2C_MspInit+0x74>)
 8001b6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b72:	61d3      	str	r3, [r2, #28]
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_I2C_MspInit+0x74>)
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010c00 	.word	0x40010c00

08001b94 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1b      	ldr	r2, [pc, #108]	@ (8001c1c <HAL_SPI_MspInit+0x88>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d12f      	bne.n	8001c14 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <HAL_SPI_MspInit+0x8c>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a19      	ldr	r2, [pc, #100]	@ (8001c20 <HAL_SPI_MspInit+0x8c>)
 8001bba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <HAL_SPI_MspInit+0x8c>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <HAL_SPI_MspInit+0x8c>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a13      	ldr	r2, [pc, #76]	@ (8001c20 <HAL_SPI_MspInit+0x8c>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <HAL_SPI_MspInit+0x8c>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001be4:	23a0      	movs	r3, #160	@ 0xa0
 8001be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	480b      	ldr	r0, [pc, #44]	@ (8001c24 <HAL_SPI_MspInit+0x90>)
 8001bf8:	f000 fdea 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bfc:	2340      	movs	r3, #64	@ 0x40
 8001bfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <HAL_SPI_MspInit+0x90>)
 8001c10:	f000 fdde 	bl	80027d0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c14:	bf00      	nop
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40013000 	.word	0x40013000
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40010800 	.word	0x40010800

08001c28 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a09      	ldr	r2, [pc, #36]	@ (8001c5c <HAL_TIM_Base_MspInit+0x34>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10b      	bne.n	8001c52 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <HAL_TIM_Base_MspInit+0x38>)
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	4a08      	ldr	r2, [pc, #32]	@ (8001c60 <HAL_TIM_Base_MspInit+0x38>)
 8001c40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c44:	6193      	str	r3, [r2, #24]
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_TIM_Base_MspInit+0x38>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08c      	sub	sp, #48	@ 0x30
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6e      	ldr	r2, [pc, #440]	@ (8001e38 <HAL_UART_MspInit+0x1d4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d160      	bne.n	8001d46 <HAL_UART_MspInit+0xe2>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c84:	4b6d      	ldr	r3, [pc, #436]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a6c      	ldr	r2, [pc, #432]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001c8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b6a      	ldr	r3, [pc, #424]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9c:	4b67      	ldr	r3, [pc, #412]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a66      	ldr	r2, [pc, #408]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b64      	ldr	r3, [pc, #400]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 0320 	add.w	r3, r7, #32
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	485d      	ldr	r0, [pc, #372]	@ (8001e40 <HAL_UART_MspInit+0x1dc>)
 8001cca:	f000 fd81 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f107 0320 	add.w	r3, r7, #32
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4857      	ldr	r0, [pc, #348]	@ (8001e40 <HAL_UART_MspInit+0x1dc>)
 8001ce4:	f000 fd74 	bl	80027d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001ce8:	4b56      	ldr	r3, [pc, #344]	@ (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001cea:	4a57      	ldr	r2, [pc, #348]	@ (8001e48 <HAL_UART_MspInit+0x1e4>)
 8001cec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cee:	4b55      	ldr	r3, [pc, #340]	@ (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf4:	4b53      	ldr	r3, [pc, #332]	@ (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cfa:	4b52      	ldr	r3, [pc, #328]	@ (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001cfc:	2280      	movs	r2, #128	@ 0x80
 8001cfe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d00:	4b50      	ldr	r3, [pc, #320]	@ (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d06:	4b4f      	ldr	r3, [pc, #316]	@ (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d12:	4b4c      	ldr	r3, [pc, #304]	@ (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001d18:	484a      	ldr	r0, [pc, #296]	@ (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001d1a:	f000 fb45 	bl	80023a8 <HAL_DMA_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001d24:	f7ff fec0 	bl	8001aa8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a46      	ldr	r2, [pc, #280]	@ (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001d2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d2e:	4a45      	ldr	r2, [pc, #276]	@ (8001e44 <HAL_UART_MspInit+0x1e0>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	2025      	movs	r0, #37	@ 0x25
 8001d3a:	f000 fafe 	bl	800233a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d3e:	2025      	movs	r0, #37	@ 0x25
 8001d40:	f000 fb17 	bl	8002372 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d44:	e074      	b.n	8001e30 <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART2)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a40      	ldr	r2, [pc, #256]	@ (8001e4c <HAL_UART_MspInit+0x1e8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d138      	bne.n	8001dc2 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d50:	4b3a      	ldr	r3, [pc, #232]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	4a39      	ldr	r2, [pc, #228]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d5a:	61d3      	str	r3, [r2, #28]
 8001d5c:	4b37      	ldr	r3, [pc, #220]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d68:	4b34      	ldr	r3, [pc, #208]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a33      	ldr	r2, [pc, #204]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d80:	2304      	movs	r3, #4
 8001d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 0320 	add.w	r3, r7, #32
 8001d90:	4619      	mov	r1, r3
 8001d92:	482b      	ldr	r0, [pc, #172]	@ (8001e40 <HAL_UART_MspInit+0x1dc>)
 8001d94:	f000 fd1c 	bl	80027d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d98:	2308      	movs	r3, #8
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	4619      	mov	r1, r3
 8001daa:	4825      	ldr	r0, [pc, #148]	@ (8001e40 <HAL_UART_MspInit+0x1dc>)
 8001dac:	f000 fd10 	bl	80027d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2100      	movs	r1, #0
 8001db4:	2026      	movs	r0, #38	@ 0x26
 8001db6:	f000 fac0 	bl	800233a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dba:	2026      	movs	r0, #38	@ 0x26
 8001dbc:	f000 fad9 	bl	8002372 <HAL_NVIC_EnableIRQ>
}
 8001dc0:	e036      	b.n	8001e30 <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART3)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a22      	ldr	r2, [pc, #136]	@ (8001e50 <HAL_UART_MspInit+0x1ec>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d131      	bne.n	8001e30 <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001dd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dd6:	61d3      	str	r3, [r2, #28]
 8001dd8:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de4:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4a14      	ldr	r2, [pc, #80]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001dea:	f043 0308 	orr.w	r3, r3, #8
 8001dee:	6193      	str	r3, [r2, #24]
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <HAL_UART_MspInit+0x1d8>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f107 0320 	add.w	r3, r7, #32
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4810      	ldr	r0, [pc, #64]	@ (8001e54 <HAL_UART_MspInit+0x1f0>)
 8001e12:	f000 fcdd 	bl	80027d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	f107 0320 	add.w	r3, r7, #32
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480a      	ldr	r0, [pc, #40]	@ (8001e54 <HAL_UART_MspInit+0x1f0>)
 8001e2c:	f000 fcd0 	bl	80027d0 <HAL_GPIO_Init>
}
 8001e30:	bf00      	nop
 8001e32:	3730      	adds	r7, #48	@ 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40013800 	.word	0x40013800
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010800 	.word	0x40010800
 8001e44:	200003bc 	.word	0x200003bc
 8001e48:	40020044 	.word	0x40020044
 8001e4c:	40004400 	.word	0x40004400
 8001e50:	40004800 	.word	0x40004800
 8001e54:	40010c00 	.word	0x40010c00

08001e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <NMI_Handler+0x4>

08001e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <HardFault_Handler+0x4>

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <MemManage_Handler+0x4>

08001e70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea8:	f000 f954 	bl	8002154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <DMA1_Channel4_IRQHandler+0x10>)
 8001eb6:	f000 fb85 	bl	80025c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200003bc 	.word	0x200003bc

08001ec4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <USART1_IRQHandler+0x10>)
 8001eca:	f001 ff45 	bl	8003d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200002e4 	.word	0x200002e4

08001ed8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001edc:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <USART2_IRQHandler+0x10>)
 8001ede:	f001 ff3b 	bl	8003d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000032c 	.word	0x2000032c

08001eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return 1;
 8001ef0:	2301      	movs	r3, #1
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <_kill>:

int _kill(int pid, int sig)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f04:	f003 f9e2 	bl	80052cc <__errno>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2216      	movs	r2, #22
 8001f0c:	601a      	str	r2, [r3, #0]
  return -1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_exit>:

void _exit (int status)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f22:	f04f 31ff 	mov.w	r1, #4294967295
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffe7 	bl	8001efa <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <_exit+0x12>

08001f30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	e00a      	b.n	8001f58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f42:	f3af 8000 	nop.w
 8001f46:	4601      	mov	r1, r0
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	60ba      	str	r2, [r7, #8]
 8001f4e:	b2ca      	uxtb	r2, r1
 8001f50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3301      	adds	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	dbf0      	blt.n	8001f42 <_read+0x12>
  }

  return len;
 8001f60:	687b      	ldr	r3, [r7, #4]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b086      	sub	sp, #24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	e009      	b.n	8001f90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	60ba      	str	r2, [r7, #8]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	dbf1      	blt.n	8001f7c <_write+0x12>
  }
  return len;
 8001f98:	687b      	ldr	r3, [r7, #4]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <_close>:

int _close(int file)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fc8:	605a      	str	r2, [r3, #4]
  return 0;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <_isatty>:

int _isatty(int file)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b085      	sub	sp, #20
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
	...

08002004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800200c:	4a14      	ldr	r2, [pc, #80]	@ (8002060 <_sbrk+0x5c>)
 800200e:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <_sbrk+0x60>)
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002018:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <_sbrk+0x64>)
 8002022:	4a12      	ldr	r2, [pc, #72]	@ (800206c <_sbrk+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d207      	bcs.n	8002044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002034:	f003 f94a 	bl	80052cc <__errno>
 8002038:	4603      	mov	r3, r0
 800203a:	220c      	movs	r2, #12
 800203c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	e009      	b.n	8002058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002044:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204a:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	4a05      	ldr	r2, [pc, #20]	@ (8002068 <_sbrk+0x64>)
 8002054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20005000 	.word	0x20005000
 8002064:	00000400 	.word	0x00000400
 8002068:	20000590 	.word	0x20000590
 800206c:	200006e8 	.word	0x200006e8

08002070 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800207c:	f7ff fff8 	bl	8002070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002080:	480b      	ldr	r0, [pc, #44]	@ (80020b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002082:	490c      	ldr	r1, [pc, #48]	@ (80020b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002084:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800208c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002096:	4a09      	ldr	r2, [pc, #36]	@ (80020bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002098:	4c09      	ldr	r4, [pc, #36]	@ (80020c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020a6:	f003 f917 	bl	80052d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020aa:	f7fe ffc1 	bl	8001030 <main>
  bx lr
 80020ae:	4770      	bx	lr
  ldr r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80020b8:	0800744c 	.word	0x0800744c
  ldr r2, =_sbss
 80020bc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80020c0:	200006e4 	.word	0x200006e4

080020c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <ADC1_2_IRQHandler>
	...

080020c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <HAL_Init+0x28>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a07      	ldr	r2, [pc, #28]	@ (80020f0 <HAL_Init+0x28>)
 80020d2:	f043 0310 	orr.w	r3, r3, #16
 80020d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d8:	2003      	movs	r0, #3
 80020da:	f000 f923 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020de:	200f      	movs	r0, #15
 80020e0:	f000 f808 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e4:	f7ff fce6 	bl	8001ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40022000 	.word	0x40022000

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_InitTick+0x54>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_InitTick+0x58>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f93b 	bl	800238e <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e00e      	b.n	8002140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d80a      	bhi.n	800213e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f000 f903 	bl	800233a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002134:	4a06      	ldr	r2, [pc, #24]	@ (8002150 <HAL_InitTick+0x5c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000000 	.word	0x20000000
 800214c:	20000008 	.word	0x20000008
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <HAL_IncTick+0x1c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_IncTick+0x20>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4413      	add	r3, r2
 8002164:	4a03      	ldr	r2, [pc, #12]	@ (8002174 <HAL_IncTick+0x20>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000008 	.word	0x20000008
 8002174:	20000594 	.word	0x20000594

08002178 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return uwTick;
 800217c:	4b02      	ldr	r3, [pc, #8]	@ (8002188 <HAL_GetTick+0x10>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	20000594 	.word	0x20000594

0800218c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021be:	4a04      	ldr	r2, [pc, #16]	@ (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60d3      	str	r3, [r2, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <__NVIC_GetPriorityGrouping+0x18>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 0307 	and.w	r3, r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	db0b      	blt.n	800221a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4906      	ldr	r1, [pc, #24]	@ (8002224 <__NVIC_EnableIRQ+0x34>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2001      	movs	r0, #1
 8002212:	fa00 f202 	lsl.w	r2, r0, r2
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	e000e100 	.word	0xe000e100

08002228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	db0a      	blt.n	8002252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	490c      	ldr	r1, [pc, #48]	@ (8002274 <__NVIC_SetPriority+0x4c>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	0112      	lsls	r2, r2, #4
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	440b      	add	r3, r1
 800224c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002250:	e00a      	b.n	8002268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4908      	ldr	r1, [pc, #32]	@ (8002278 <__NVIC_SetPriority+0x50>)
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	3b04      	subs	r3, #4
 8002260:	0112      	lsls	r2, r2, #4
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	440b      	add	r3, r1
 8002266:	761a      	strb	r2, [r3, #24]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000e100 	.word	0xe000e100
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	@ 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f1c3 0307 	rsb	r3, r3, #7
 8002296:	2b04      	cmp	r3, #4
 8002298:	bf28      	it	cs
 800229a:	2304      	movcs	r3, #4
 800229c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d902      	bls.n	80022ac <NVIC_EncodePriority+0x30>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3b03      	subs	r3, #3
 80022aa:	e000      	b.n	80022ae <NVIC_EncodePriority+0x32>
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	401a      	ands	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	4313      	orrs	r3, r2
         );
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	@ 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022f0:	d301      	bcc.n	80022f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00f      	b.n	8002316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <SysTick_Config+0x40>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fe:	210f      	movs	r1, #15
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f7ff ff90 	bl	8002228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002308:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <SysTick_Config+0x40>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <SysTick_Config+0x40>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff2d 	bl	800218c <__NVIC_SetPriorityGrouping>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800234c:	f7ff ff42 	bl	80021d4 <__NVIC_GetPriorityGrouping>
 8002350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ff90 	bl	800227c <NVIC_EncodePriority>
 800235c:	4602      	mov	r2, r0
 800235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff5f 	bl	8002228 <__NVIC_SetPriority>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff35 	bl	80021f0 <__NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffa2 	bl	80022e0 <SysTick_Config>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e043      	b.n	8002446 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <HAL_DMA_Init+0xa8>)
 80023c6:	4413      	add	r3, r2
 80023c8:	4a22      	ldr	r2, [pc, #136]	@ (8002454 <HAL_DMA_Init+0xac>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	009a      	lsls	r2, r3, #2
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002458 <HAL_DMA_Init+0xb0>)
 80023da:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023f2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80023f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002400:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	bffdfff8 	.word	0xbffdfff8
 8002454:	cccccccd 	.word	0xcccccccd
 8002458:	40020000 	.word	0x40020000

0800245c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d008      	beq.n	8002486 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2204      	movs	r2, #4
 8002478:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e020      	b.n	80024c8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 020e 	bic.w	r2, r2, #14
 8002494:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0201 	bic.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr
	...

080024d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d005      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2204      	movs	r2, #4
 80024f0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	e051      	b.n	800259c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 020e 	bic.w	r2, r2, #14
 8002506:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a22      	ldr	r2, [pc, #136]	@ (80025a8 <HAL_DMA_Abort_IT+0xd4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d029      	beq.n	8002576 <HAL_DMA_Abort_IT+0xa2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a21      	ldr	r2, [pc, #132]	@ (80025ac <HAL_DMA_Abort_IT+0xd8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d022      	beq.n	8002572 <HAL_DMA_Abort_IT+0x9e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1f      	ldr	r2, [pc, #124]	@ (80025b0 <HAL_DMA_Abort_IT+0xdc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01a      	beq.n	800256c <HAL_DMA_Abort_IT+0x98>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1e      	ldr	r2, [pc, #120]	@ (80025b4 <HAL_DMA_Abort_IT+0xe0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d012      	beq.n	8002566 <HAL_DMA_Abort_IT+0x92>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1c      	ldr	r2, [pc, #112]	@ (80025b8 <HAL_DMA_Abort_IT+0xe4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00a      	beq.n	8002560 <HAL_DMA_Abort_IT+0x8c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <HAL_DMA_Abort_IT+0xe8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d102      	bne.n	800255a <HAL_DMA_Abort_IT+0x86>
 8002554:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002558:	e00e      	b.n	8002578 <HAL_DMA_Abort_IT+0xa4>
 800255a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800255e:	e00b      	b.n	8002578 <HAL_DMA_Abort_IT+0xa4>
 8002560:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002564:	e008      	b.n	8002578 <HAL_DMA_Abort_IT+0xa4>
 8002566:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800256a:	e005      	b.n	8002578 <HAL_DMA_Abort_IT+0xa4>
 800256c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002570:	e002      	b.n	8002578 <HAL_DMA_Abort_IT+0xa4>
 8002572:	2310      	movs	r3, #16
 8002574:	e000      	b.n	8002578 <HAL_DMA_Abort_IT+0xa4>
 8002576:	2301      	movs	r3, #1
 8002578:	4a11      	ldr	r2, [pc, #68]	@ (80025c0 <HAL_DMA_Abort_IT+0xec>)
 800257a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
    } 
  }
  return status;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40020008 	.word	0x40020008
 80025ac:	4002001c 	.word	0x4002001c
 80025b0:	40020030 	.word	0x40020030
 80025b4:	40020044 	.word	0x40020044
 80025b8:	40020058 	.word	0x40020058
 80025bc:	4002006c 	.word	0x4002006c
 80025c0:	40020000 	.word	0x40020000

080025c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e0:	2204      	movs	r2, #4
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d04f      	beq.n	800268c <HAL_DMA_IRQHandler+0xc8>
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d04a      	beq.n	800268c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d107      	bne.n	8002614 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0204 	bic.w	r2, r2, #4
 8002612:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a66      	ldr	r2, [pc, #408]	@ (80027b4 <HAL_DMA_IRQHandler+0x1f0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d029      	beq.n	8002672 <HAL_DMA_IRQHandler+0xae>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a65      	ldr	r2, [pc, #404]	@ (80027b8 <HAL_DMA_IRQHandler+0x1f4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d022      	beq.n	800266e <HAL_DMA_IRQHandler+0xaa>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a63      	ldr	r2, [pc, #396]	@ (80027bc <HAL_DMA_IRQHandler+0x1f8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d01a      	beq.n	8002668 <HAL_DMA_IRQHandler+0xa4>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a62      	ldr	r2, [pc, #392]	@ (80027c0 <HAL_DMA_IRQHandler+0x1fc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d012      	beq.n	8002662 <HAL_DMA_IRQHandler+0x9e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a60      	ldr	r2, [pc, #384]	@ (80027c4 <HAL_DMA_IRQHandler+0x200>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00a      	beq.n	800265c <HAL_DMA_IRQHandler+0x98>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a5f      	ldr	r2, [pc, #380]	@ (80027c8 <HAL_DMA_IRQHandler+0x204>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d102      	bne.n	8002656 <HAL_DMA_IRQHandler+0x92>
 8002650:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002654:	e00e      	b.n	8002674 <HAL_DMA_IRQHandler+0xb0>
 8002656:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800265a:	e00b      	b.n	8002674 <HAL_DMA_IRQHandler+0xb0>
 800265c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002660:	e008      	b.n	8002674 <HAL_DMA_IRQHandler+0xb0>
 8002662:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002666:	e005      	b.n	8002674 <HAL_DMA_IRQHandler+0xb0>
 8002668:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800266c:	e002      	b.n	8002674 <HAL_DMA_IRQHandler+0xb0>
 800266e:	2340      	movs	r3, #64	@ 0x40
 8002670:	e000      	b.n	8002674 <HAL_DMA_IRQHandler+0xb0>
 8002672:	2304      	movs	r3, #4
 8002674:	4a55      	ldr	r2, [pc, #340]	@ (80027cc <HAL_DMA_IRQHandler+0x208>)
 8002676:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8094 	beq.w	80027aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800268a:	e08e      	b.n	80027aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	2202      	movs	r2, #2
 8002692:	409a      	lsls	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d056      	beq.n	800274a <HAL_DMA_IRQHandler+0x186>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d051      	beq.n	800274a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10b      	bne.n	80026cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 020a 	bic.w	r2, r2, #10
 80026c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a38      	ldr	r2, [pc, #224]	@ (80027b4 <HAL_DMA_IRQHandler+0x1f0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d029      	beq.n	800272a <HAL_DMA_IRQHandler+0x166>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a37      	ldr	r2, [pc, #220]	@ (80027b8 <HAL_DMA_IRQHandler+0x1f4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d022      	beq.n	8002726 <HAL_DMA_IRQHandler+0x162>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a35      	ldr	r2, [pc, #212]	@ (80027bc <HAL_DMA_IRQHandler+0x1f8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01a      	beq.n	8002720 <HAL_DMA_IRQHandler+0x15c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a34      	ldr	r2, [pc, #208]	@ (80027c0 <HAL_DMA_IRQHandler+0x1fc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d012      	beq.n	800271a <HAL_DMA_IRQHandler+0x156>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a32      	ldr	r2, [pc, #200]	@ (80027c4 <HAL_DMA_IRQHandler+0x200>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00a      	beq.n	8002714 <HAL_DMA_IRQHandler+0x150>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a31      	ldr	r2, [pc, #196]	@ (80027c8 <HAL_DMA_IRQHandler+0x204>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d102      	bne.n	800270e <HAL_DMA_IRQHandler+0x14a>
 8002708:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800270c:	e00e      	b.n	800272c <HAL_DMA_IRQHandler+0x168>
 800270e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002712:	e00b      	b.n	800272c <HAL_DMA_IRQHandler+0x168>
 8002714:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002718:	e008      	b.n	800272c <HAL_DMA_IRQHandler+0x168>
 800271a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800271e:	e005      	b.n	800272c <HAL_DMA_IRQHandler+0x168>
 8002720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002724:	e002      	b.n	800272c <HAL_DMA_IRQHandler+0x168>
 8002726:	2320      	movs	r3, #32
 8002728:	e000      	b.n	800272c <HAL_DMA_IRQHandler+0x168>
 800272a:	2302      	movs	r3, #2
 800272c:	4a27      	ldr	r2, [pc, #156]	@ (80027cc <HAL_DMA_IRQHandler+0x208>)
 800272e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	d034      	beq.n	80027aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002748:	e02f      	b.n	80027aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	2208      	movs	r2, #8
 8002750:	409a      	lsls	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d028      	beq.n	80027ac <HAL_DMA_IRQHandler+0x1e8>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d023      	beq.n	80027ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 020e 	bic.w	r2, r2, #14
 8002772:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f202 	lsl.w	r2, r1, r2
 8002782:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d004      	beq.n	80027ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
    }
  }
  return;
 80027aa:	bf00      	nop
 80027ac:	bf00      	nop
}
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40020008 	.word	0x40020008
 80027b8:	4002001c 	.word	0x4002001c
 80027bc:	40020030 	.word	0x40020030
 80027c0:	40020044 	.word	0x40020044
 80027c4:	40020058 	.word	0x40020058
 80027c8:	4002006c 	.word	0x4002006c
 80027cc:	40020000 	.word	0x40020000

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b08b      	sub	sp, #44	@ 0x2c
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e2:	e169      	b.n	8002ab8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027e4:	2201      	movs	r2, #1
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 8158 	bne.w	8002ab2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a9a      	ldr	r2, [pc, #616]	@ (8002a70 <HAL_GPIO_Init+0x2a0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d05e      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 800280c:	4a98      	ldr	r2, [pc, #608]	@ (8002a70 <HAL_GPIO_Init+0x2a0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d875      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 8002812:	4a98      	ldr	r2, [pc, #608]	@ (8002a74 <HAL_GPIO_Init+0x2a4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d058      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 8002818:	4a96      	ldr	r2, [pc, #600]	@ (8002a74 <HAL_GPIO_Init+0x2a4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d86f      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 800281e:	4a96      	ldr	r2, [pc, #600]	@ (8002a78 <HAL_GPIO_Init+0x2a8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d052      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 8002824:	4a94      	ldr	r2, [pc, #592]	@ (8002a78 <HAL_GPIO_Init+0x2a8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d869      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 800282a:	4a94      	ldr	r2, [pc, #592]	@ (8002a7c <HAL_GPIO_Init+0x2ac>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d04c      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 8002830:	4a92      	ldr	r2, [pc, #584]	@ (8002a7c <HAL_GPIO_Init+0x2ac>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d863      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 8002836:	4a92      	ldr	r2, [pc, #584]	@ (8002a80 <HAL_GPIO_Init+0x2b0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d046      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
 800283c:	4a90      	ldr	r2, [pc, #576]	@ (8002a80 <HAL_GPIO_Init+0x2b0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d85d      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 8002842:	2b12      	cmp	r3, #18
 8002844:	d82a      	bhi.n	800289c <HAL_GPIO_Init+0xcc>
 8002846:	2b12      	cmp	r3, #18
 8002848:	d859      	bhi.n	80028fe <HAL_GPIO_Init+0x12e>
 800284a:	a201      	add	r2, pc, #4	@ (adr r2, 8002850 <HAL_GPIO_Init+0x80>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	080028cb 	.word	0x080028cb
 8002854:	080028a5 	.word	0x080028a5
 8002858:	080028b7 	.word	0x080028b7
 800285c:	080028f9 	.word	0x080028f9
 8002860:	080028ff 	.word	0x080028ff
 8002864:	080028ff 	.word	0x080028ff
 8002868:	080028ff 	.word	0x080028ff
 800286c:	080028ff 	.word	0x080028ff
 8002870:	080028ff 	.word	0x080028ff
 8002874:	080028ff 	.word	0x080028ff
 8002878:	080028ff 	.word	0x080028ff
 800287c:	080028ff 	.word	0x080028ff
 8002880:	080028ff 	.word	0x080028ff
 8002884:	080028ff 	.word	0x080028ff
 8002888:	080028ff 	.word	0x080028ff
 800288c:	080028ff 	.word	0x080028ff
 8002890:	080028ff 	.word	0x080028ff
 8002894:	080028ad 	.word	0x080028ad
 8002898:	080028c1 	.word	0x080028c1
 800289c:	4a79      	ldr	r2, [pc, #484]	@ (8002a84 <HAL_GPIO_Init+0x2b4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028a2:	e02c      	b.n	80028fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	623b      	str	r3, [r7, #32]
          break;
 80028aa:	e029      	b.n	8002900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	3304      	adds	r3, #4
 80028b2:	623b      	str	r3, [r7, #32]
          break;
 80028b4:	e024      	b.n	8002900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	3308      	adds	r3, #8
 80028bc:	623b      	str	r3, [r7, #32]
          break;
 80028be:	e01f      	b.n	8002900 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	330c      	adds	r3, #12
 80028c6:	623b      	str	r3, [r7, #32]
          break;
 80028c8:	e01a      	b.n	8002900 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028d2:	2304      	movs	r3, #4
 80028d4:	623b      	str	r3, [r7, #32]
          break;
 80028d6:	e013      	b.n	8002900 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028e0:	2308      	movs	r3, #8
 80028e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69fa      	ldr	r2, [r7, #28]
 80028e8:	611a      	str	r2, [r3, #16]
          break;
 80028ea:	e009      	b.n	8002900 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028ec:	2308      	movs	r3, #8
 80028ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	615a      	str	r2, [r3, #20]
          break;
 80028f6:	e003      	b.n	8002900 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028f8:	2300      	movs	r3, #0
 80028fa:	623b      	str	r3, [r7, #32]
          break;
 80028fc:	e000      	b.n	8002900 <HAL_GPIO_Init+0x130>
          break;
 80028fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2bff      	cmp	r3, #255	@ 0xff
 8002904:	d801      	bhi.n	800290a <HAL_GPIO_Init+0x13a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	e001      	b.n	800290e <HAL_GPIO_Init+0x13e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2bff      	cmp	r3, #255	@ 0xff
 8002914:	d802      	bhi.n	800291c <HAL_GPIO_Init+0x14c>
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	e002      	b.n	8002922 <HAL_GPIO_Init+0x152>
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	3b08      	subs	r3, #8
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	210f      	movs	r1, #15
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	401a      	ands	r2, r3
 8002934:	6a39      	ldr	r1, [r7, #32]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	431a      	orrs	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80b1 	beq.w	8002ab2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002950:	4b4d      	ldr	r3, [pc, #308]	@ (8002a88 <HAL_GPIO_Init+0x2b8>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4a4c      	ldr	r2, [pc, #304]	@ (8002a88 <HAL_GPIO_Init+0x2b8>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6193      	str	r3, [r2, #24]
 800295c:	4b4a      	ldr	r3, [pc, #296]	@ (8002a88 <HAL_GPIO_Init+0x2b8>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002968:	4a48      	ldr	r2, [pc, #288]	@ (8002a8c <HAL_GPIO_Init+0x2bc>)
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	220f      	movs	r2, #15
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a40      	ldr	r2, [pc, #256]	@ (8002a90 <HAL_GPIO_Init+0x2c0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d013      	beq.n	80029bc <HAL_GPIO_Init+0x1ec>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a3f      	ldr	r2, [pc, #252]	@ (8002a94 <HAL_GPIO_Init+0x2c4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00d      	beq.n	80029b8 <HAL_GPIO_Init+0x1e8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a3e      	ldr	r2, [pc, #248]	@ (8002a98 <HAL_GPIO_Init+0x2c8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d007      	beq.n	80029b4 <HAL_GPIO_Init+0x1e4>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a3d      	ldr	r2, [pc, #244]	@ (8002a9c <HAL_GPIO_Init+0x2cc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d101      	bne.n	80029b0 <HAL_GPIO_Init+0x1e0>
 80029ac:	2303      	movs	r3, #3
 80029ae:	e006      	b.n	80029be <HAL_GPIO_Init+0x1ee>
 80029b0:	2304      	movs	r3, #4
 80029b2:	e004      	b.n	80029be <HAL_GPIO_Init+0x1ee>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e002      	b.n	80029be <HAL_GPIO_Init+0x1ee>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_GPIO_Init+0x1ee>
 80029bc:	2300      	movs	r3, #0
 80029be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c0:	f002 0203 	and.w	r2, r2, #3
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	4093      	lsls	r3, r2
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029ce:	492f      	ldr	r1, [pc, #188]	@ (8002a8c <HAL_GPIO_Init+0x2bc>)
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d006      	beq.n	80029f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029e8:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	492c      	ldr	r1, [pc, #176]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	608b      	str	r3, [r1, #8]
 80029f4:	e006      	b.n	8002a04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029f6:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	4928      	ldr	r1, [pc, #160]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d006      	beq.n	8002a1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a10:	4b23      	ldr	r3, [pc, #140]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	4922      	ldr	r1, [pc, #136]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60cb      	str	r3, [r1, #12]
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	491e      	ldr	r1, [pc, #120]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a38:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4918      	ldr	r1, [pc, #96]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a46:	4b16      	ldr	r3, [pc, #88]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	4914      	ldr	r1, [pc, #80]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d021      	beq.n	8002aa4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a60:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	490e      	ldr	r1, [pc, #56]	@ (8002aa0 <HAL_GPIO_Init+0x2d0>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]
 8002a6c:	e021      	b.n	8002ab2 <HAL_GPIO_Init+0x2e2>
 8002a6e:	bf00      	nop
 8002a70:	10320000 	.word	0x10320000
 8002a74:	10310000 	.word	0x10310000
 8002a78:	10220000 	.word	0x10220000
 8002a7c:	10210000 	.word	0x10210000
 8002a80:	10120000 	.word	0x10120000
 8002a84:	10110000 	.word	0x10110000
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	40010800 	.word	0x40010800
 8002a94:	40010c00 	.word	0x40010c00
 8002a98:	40011000 	.word	0x40011000
 8002a9c:	40011400 	.word	0x40011400
 8002aa0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_GPIO_Init+0x304>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	4909      	ldr	r1, [pc, #36]	@ (8002ad4 <HAL_GPIO_Init+0x304>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f47f ae8e 	bne.w	80027e4 <HAL_GPIO_Init+0x14>
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	372c      	adds	r7, #44	@ 0x2c
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40010400 	.word	0x40010400

08002ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e12b      	b.n	8002d42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff f80a 	bl	8001b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2224      	movs	r2, #36	@ 0x24
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b3c:	f000 fcda 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8002b40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4a81      	ldr	r2, [pc, #516]	@ (8002d4c <HAL_I2C_Init+0x274>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d807      	bhi.n	8002b5c <HAL_I2C_Init+0x84>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4a80      	ldr	r2, [pc, #512]	@ (8002d50 <HAL_I2C_Init+0x278>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	bf94      	ite	ls
 8002b54:	2301      	movls	r3, #1
 8002b56:	2300      	movhi	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	e006      	b.n	8002b6a <HAL_I2C_Init+0x92>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4a7d      	ldr	r2, [pc, #500]	@ (8002d54 <HAL_I2C_Init+0x27c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	bf94      	ite	ls
 8002b64:	2301      	movls	r3, #1
 8002b66:	2300      	movhi	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e0e7      	b.n	8002d42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4a78      	ldr	r2, [pc, #480]	@ (8002d58 <HAL_I2C_Init+0x280>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	0c9b      	lsrs	r3, r3, #18
 8002b7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4a6a      	ldr	r2, [pc, #424]	@ (8002d4c <HAL_I2C_Init+0x274>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d802      	bhi.n	8002bac <HAL_I2C_Init+0xd4>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	e009      	b.n	8002bc0 <HAL_I2C_Init+0xe8>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	4a69      	ldr	r2, [pc, #420]	@ (8002d5c <HAL_I2C_Init+0x284>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	099b      	lsrs	r3, r3, #6
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bd2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	495c      	ldr	r1, [pc, #368]	@ (8002d4c <HAL_I2C_Init+0x274>)
 8002bdc:	428b      	cmp	r3, r1
 8002bde:	d819      	bhi.n	8002c14 <HAL_I2C_Init+0x13c>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1e59      	subs	r1, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bee:	1c59      	adds	r1, r3, #1
 8002bf0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bf4:	400b      	ands	r3, r1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_I2C_Init+0x138>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1e59      	subs	r1, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c08:	3301      	adds	r3, #1
 8002c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c0e:	e051      	b.n	8002cb4 <HAL_I2C_Init+0x1dc>
 8002c10:	2304      	movs	r3, #4
 8002c12:	e04f      	b.n	8002cb4 <HAL_I2C_Init+0x1dc>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d111      	bne.n	8002c40 <HAL_I2C_Init+0x168>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e58      	subs	r0, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	440b      	add	r3, r1
 8002c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e012      	b.n	8002c66 <HAL_I2C_Init+0x18e>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1e58      	subs	r0, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	0099      	lsls	r1, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c56:	3301      	adds	r3, #1
 8002c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Init+0x196>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e022      	b.n	8002cb4 <HAL_I2C_Init+0x1dc>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10e      	bne.n	8002c94 <HAL_I2C_Init+0x1bc>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1e58      	subs	r0, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	440b      	add	r3, r1
 8002c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c92:	e00f      	b.n	8002cb4 <HAL_I2C_Init+0x1dc>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1e58      	subs	r0, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6859      	ldr	r1, [r3, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	0099      	lsls	r1, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002caa:	3301      	adds	r3, #1
 8002cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	6809      	ldr	r1, [r1, #0]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ce2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6911      	ldr	r1, [r2, #16]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68d2      	ldr	r2, [r2, #12]
 8002cee:	4311      	orrs	r1, r2
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	000186a0 	.word	0x000186a0
 8002d50:	001e847f 	.word	0x001e847f
 8002d54:	003d08ff 	.word	0x003d08ff
 8002d58:	431bde83 	.word	0x431bde83
 8002d5c:	10624dd3 	.word	0x10624dd3

08002d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e272      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8087 	beq.w	8002e8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d80:	4b92      	ldr	r3, [pc, #584]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d00c      	beq.n	8002da6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d8c:	4b8f      	ldr	r3, [pc, #572]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d112      	bne.n	8002dbe <HAL_RCC_OscConfig+0x5e>
 8002d98:	4b8c      	ldr	r3, [pc, #560]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da4:	d10b      	bne.n	8002dbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da6:	4b89      	ldr	r3, [pc, #548]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d06c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x12c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d168      	bne.n	8002e8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e24c      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x76>
 8002dc8:	4b80      	ldr	r3, [pc, #512]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a7f      	ldr	r2, [pc, #508]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	e02e      	b.n	8002e34 <HAL_RCC_OscConfig+0xd4>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x98>
 8002dde:	4b7b      	ldr	r3, [pc, #492]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a7a      	ldr	r2, [pc, #488]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	4b78      	ldr	r3, [pc, #480]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a77      	ldr	r2, [pc, #476]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002df0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e01d      	b.n	8002e34 <HAL_RCC_OscConfig+0xd4>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0xbc>
 8002e02:	4b72      	ldr	r3, [pc, #456]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a71      	ldr	r2, [pc, #452]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6e      	ldr	r2, [pc, #440]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCC_OscConfig+0xd4>
 8002e1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a6a      	ldr	r2, [pc, #424]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b68      	ldr	r3, [pc, #416]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a67      	ldr	r2, [pc, #412]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7ff f99c 	bl	8002178 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e44:	f7ff f998 	bl	8002178 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	@ 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e200      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b5d      	ldr	r3, [pc, #372]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0xe4>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7ff f988 	bl	8002178 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7ff f984 	bl	8002178 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	@ 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e1ec      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	4b53      	ldr	r3, [pc, #332]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x10c>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d063      	beq.n	8002f62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ea6:	4b49      	ldr	r3, [pc, #292]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d11c      	bne.n	8002eec <HAL_RCC_OscConfig+0x18c>
 8002eb2:	4b46      	ldr	r3, [pc, #280]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d116      	bne.n	8002eec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	4b43      	ldr	r3, [pc, #268]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x176>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e1c0      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4939      	ldr	r1, [pc, #228]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eea:	e03a      	b.n	8002f62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef4:	4b36      	ldr	r3, [pc, #216]	@ (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7ff f93d 	bl	8002178 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f02:	f7ff f939 	bl	8002178 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e1a1      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f14:	4b2d      	ldr	r3, [pc, #180]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f20:	4b2a      	ldr	r3, [pc, #168]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4927      	ldr	r1, [pc, #156]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]
 8002f34:	e015      	b.n	8002f62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f36:	4b26      	ldr	r3, [pc, #152]	@ (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7ff f91c 	bl	8002178 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f44:	f7ff f918 	bl	8002178 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e180      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f56:	4b1d      	ldr	r3, [pc, #116]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d03a      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d019      	beq.n	8002faa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f76:	4b17      	ldr	r3, [pc, #92]	@ (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7c:	f7ff f8fc 	bl	8002178 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f84:	f7ff f8f8 	bl	8002178 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e160      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f96:	4b0d      	ldr	r3, [pc, #52]	@ (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f000 face 	bl	8003544 <RCC_Delay>
 8002fa8:	e01c      	b.n	8002fe4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb0:	f7ff f8e2 	bl	8002178 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb6:	e00f      	b.n	8002fd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb8:	f7ff f8de 	bl	8002178 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d908      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e146      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	42420000 	.word	0x42420000
 8002fd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd8:	4b92      	ldr	r3, [pc, #584]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e9      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80a6 	beq.w	800313e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff6:	4b8b      	ldr	r3, [pc, #556]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10d      	bne.n	800301e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	4b88      	ldr	r3, [pc, #544]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	4a87      	ldr	r2, [pc, #540]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800300c:	61d3      	str	r3, [r2, #28]
 800300e:	4b85      	ldr	r3, [pc, #532]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301a:	2301      	movs	r3, #1
 800301c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301e:	4b82      	ldr	r3, [pc, #520]	@ (8003228 <HAL_RCC_OscConfig+0x4c8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d118      	bne.n	800305c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302a:	4b7f      	ldr	r3, [pc, #508]	@ (8003228 <HAL_RCC_OscConfig+0x4c8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a7e      	ldr	r2, [pc, #504]	@ (8003228 <HAL_RCC_OscConfig+0x4c8>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003036:	f7ff f89f 	bl	8002178 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303e:	f7ff f89b 	bl	8002178 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b64      	cmp	r3, #100	@ 0x64
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e103      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	4b75      	ldr	r3, [pc, #468]	@ (8003228 <HAL_RCC_OscConfig+0x4c8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x312>
 8003064:	4b6f      	ldr	r3, [pc, #444]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4a6e      	ldr	r2, [pc, #440]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6213      	str	r3, [r2, #32]
 8003070:	e02d      	b.n	80030ce <HAL_RCC_OscConfig+0x36e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x334>
 800307a:	4b6a      	ldr	r3, [pc, #424]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4a69      	ldr	r2, [pc, #420]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	6213      	str	r3, [r2, #32]
 8003086:	4b67      	ldr	r3, [pc, #412]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	4a66      	ldr	r2, [pc, #408]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 800308c:	f023 0304 	bic.w	r3, r3, #4
 8003090:	6213      	str	r3, [r2, #32]
 8003092:	e01c      	b.n	80030ce <HAL_RCC_OscConfig+0x36e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b05      	cmp	r3, #5
 800309a:	d10c      	bne.n	80030b6 <HAL_RCC_OscConfig+0x356>
 800309c:	4b61      	ldr	r3, [pc, #388]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	4a60      	ldr	r2, [pc, #384]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 80030a2:	f043 0304 	orr.w	r3, r3, #4
 80030a6:	6213      	str	r3, [r2, #32]
 80030a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	6213      	str	r3, [r2, #32]
 80030b4:	e00b      	b.n	80030ce <HAL_RCC_OscConfig+0x36e>
 80030b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	4a5a      	ldr	r2, [pc, #360]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	6213      	str	r3, [r2, #32]
 80030c2:	4b58      	ldr	r3, [pc, #352]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	4a57      	ldr	r2, [pc, #348]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	f023 0304 	bic.w	r3, r3, #4
 80030cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d015      	beq.n	8003102 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d6:	f7ff f84f 	bl	8002178 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7ff f84b 	bl	8002178 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0b1      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ee      	beq.n	80030de <HAL_RCC_OscConfig+0x37e>
 8003100:	e014      	b.n	800312c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003102:	f7ff f839 	bl	8002178 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003108:	e00a      	b.n	8003120 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310a:	f7ff f835 	bl	8002178 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003118:	4293      	cmp	r3, r2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e09b      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003120:	4b40      	ldr	r3, [pc, #256]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1ee      	bne.n	800310a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d105      	bne.n	800313e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003132:	4b3c      	ldr	r3, [pc, #240]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	4a3b      	ldr	r2, [pc, #236]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800313c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 8087 	beq.w	8003256 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003148:	4b36      	ldr	r3, [pc, #216]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b08      	cmp	r3, #8
 8003152:	d061      	beq.n	8003218 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d146      	bne.n	80031ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315c:	4b33      	ldr	r3, [pc, #204]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003162:	f7ff f809 	bl	8002178 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316a:	f7ff f805 	bl	8002178 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e06d      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317c:	4b29      	ldr	r3, [pc, #164]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f0      	bne.n	800316a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003190:	d108      	bne.n	80031a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003192:	4b24      	ldr	r3, [pc, #144]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	4921      	ldr	r1, [pc, #132]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a19      	ldr	r1, [r3, #32]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	430b      	orrs	r3, r1
 80031b6:	491b      	ldr	r1, [pc, #108]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031bc:	4b1b      	ldr	r3, [pc, #108]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c2:	f7fe ffd9 	bl	8002178 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ca:	f7fe ffd5 	bl	8002178 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e03d      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031dc:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x46a>
 80031e8:	e035      	b.n	8003256 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <HAL_RCC_OscConfig+0x4cc>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fe ffc2 	bl	8002178 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f8:	f7fe ffbe 	bl	8002178 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e026      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320a:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x498>
 8003216:	e01e      	b.n	8003256 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d107      	bne.n	8003230 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e019      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
 8003224:	40021000 	.word	0x40021000
 8003228:	40007000 	.word	0x40007000
 800322c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <HAL_RCC_OscConfig+0x500>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	429a      	cmp	r2, r3
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d001      	beq.n	8003256 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000

08003264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0d0      	b.n	800341a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003278:	4b6a      	ldr	r3, [pc, #424]	@ (8003424 <HAL_RCC_ClockConfig+0x1c0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d910      	bls.n	80032a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b67      	ldr	r3, [pc, #412]	@ (8003424 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 0207 	bic.w	r2, r3, #7
 800328e:	4965      	ldr	r1, [pc, #404]	@ (8003424 <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	4b63      	ldr	r3, [pc, #396]	@ (8003424 <HAL_RCC_ClockConfig+0x1c0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0b8      	b.n	800341a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032c0:	4b59      	ldr	r3, [pc, #356]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4a58      	ldr	r2, [pc, #352]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d8:	4b53      	ldr	r3, [pc, #332]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4a52      	ldr	r2, [pc, #328]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80032e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e4:	4b50      	ldr	r3, [pc, #320]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	494d      	ldr	r1, [pc, #308]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d040      	beq.n	8003384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	4b47      	ldr	r3, [pc, #284]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d115      	bne.n	8003342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e07f      	b.n	800341a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003322:	4b41      	ldr	r3, [pc, #260]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e073      	b.n	800341a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003332:	4b3d      	ldr	r3, [pc, #244]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e06b      	b.n	800341a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003342:	4b39      	ldr	r3, [pc, #228]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f023 0203 	bic.w	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4936      	ldr	r1, [pc, #216]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003354:	f7fe ff10 	bl	8002178 <HAL_GetTick>
 8003358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	e00a      	b.n	8003372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335c:	f7fe ff0c 	bl	8002178 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e053      	b.n	800341a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	4b2d      	ldr	r3, [pc, #180]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 020c 	and.w	r2, r3, #12
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	429a      	cmp	r2, r3
 8003382:	d1eb      	bne.n	800335c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003384:	4b27      	ldr	r3, [pc, #156]	@ (8003424 <HAL_RCC_ClockConfig+0x1c0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d210      	bcs.n	80033b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b24      	ldr	r3, [pc, #144]	@ (8003424 <HAL_RCC_ClockConfig+0x1c0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 0207 	bic.w	r2, r3, #7
 800339a:	4922      	ldr	r1, [pc, #136]	@ (8003424 <HAL_RCC_ClockConfig+0x1c0>)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	4313      	orrs	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a2:	4b20      	ldr	r3, [pc, #128]	@ (8003424 <HAL_RCC_ClockConfig+0x1c0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e032      	b.n	800341a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c0:	4b19      	ldr	r3, [pc, #100]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4916      	ldr	r1, [pc, #88]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033de:	4b12      	ldr	r3, [pc, #72]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	490e      	ldr	r1, [pc, #56]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033f2:	f000 f821 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 80033f6:	4602      	mov	r2, r0
 80033f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	490a      	ldr	r1, [pc, #40]	@ (800342c <HAL_RCC_ClockConfig+0x1c8>)
 8003404:	5ccb      	ldrb	r3, [r1, r3]
 8003406:	fa22 f303 	lsr.w	r3, r2, r3
 800340a:	4a09      	ldr	r2, [pc, #36]	@ (8003430 <HAL_RCC_ClockConfig+0x1cc>)
 800340c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800340e:	4b09      	ldr	r3, [pc, #36]	@ (8003434 <HAL_RCC_ClockConfig+0x1d0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fe6e 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40022000 	.word	0x40022000
 8003428:	40021000 	.word	0x40021000
 800342c:	080070a0 	.word	0x080070a0
 8003430:	20000000 	.word	0x20000000
 8003434:	20000004 	.word	0x20000004

08003438 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	2300      	movs	r3, #0
 800344c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003452:	4b1e      	ldr	r3, [pc, #120]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b04      	cmp	r3, #4
 8003460:	d002      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x30>
 8003462:	2b08      	cmp	r3, #8
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x36>
 8003466:	e027      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003468:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800346a:	613b      	str	r3, [r7, #16]
      break;
 800346c:	e027      	b.n	80034be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	0c9b      	lsrs	r3, r3, #18
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	4a17      	ldr	r2, [pc, #92]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003478:	5cd3      	ldrb	r3, [r2, r3]
 800347a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d010      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003486:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	0c5b      	lsrs	r3, r3, #17
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	4a11      	ldr	r2, [pc, #68]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003492:	5cd3      	ldrb	r3, [r2, r3]
 8003494:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a0d      	ldr	r2, [pc, #52]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800349a:	fb03 f202 	mul.w	r2, r3, r2
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e004      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a0c      	ldr	r2, [pc, #48]	@ (80034dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	613b      	str	r3, [r7, #16]
      break;
 80034b6:	e002      	b.n	80034be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ba:	613b      	str	r3, [r7, #16]
      break;
 80034bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034be:	693b      	ldr	r3, [r7, #16]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
 80034d0:	007a1200 	.word	0x007a1200
 80034d4:	080070b8 	.word	0x080070b8
 80034d8:	080070c8 	.word	0x080070c8
 80034dc:	003d0900 	.word	0x003d0900

080034e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e4:	4b02      	ldr	r3, [pc, #8]	@ (80034f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr
 80034f0:	20000000 	.word	0x20000000

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034f8:	f7ff fff2 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	@ (8003514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	0a1b      	lsrs	r3, r3, #8
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	@ (8003518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40021000 	.word	0x40021000
 8003518:	080070b0 	.word	0x080070b0

0800351c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003520:	f7ff ffde 	bl	80034e0 <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	@ (800353c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	0adb      	lsrs	r3, r3, #11
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	@ (8003540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	080070b0 	.word	0x080070b0

08003544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800354c:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <RCC_Delay+0x34>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <RCC_Delay+0x38>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0a5b      	lsrs	r3, r3, #9
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003560:	bf00      	nop
  }
  while (Delay --);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1e5a      	subs	r2, r3, #1
 8003566:	60fa      	str	r2, [r7, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f9      	bne.n	8003560 <RCC_Delay+0x1c>
}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20000000 	.word	0x20000000
 800357c:	10624dd3 	.word	0x10624dd3

08003580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e076      	b.n	8003680 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	2b00      	cmp	r3, #0
 8003598:	d108      	bne.n	80035ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035a2:	d009      	beq.n	80035b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	61da      	str	r2, [r3, #28]
 80035aa:	e005      	b.n	80035b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe fade 	bl	8001b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363c:	ea42 0103 	orr.w	r1, r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003644:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	0c1a      	lsrs	r2, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f002 0204 	and.w	r2, r2, #4
 800365e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800366e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e041      	b.n	800371e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fe faba 	bl	8001c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3304      	adds	r3, #4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f000 f8c2 	bl	8003850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d001      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e03a      	b.n	80037b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a18      	ldr	r2, [pc, #96]	@ (80037c0 <HAL_TIM_Base_Start_IT+0x98>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00e      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x58>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376a:	d009      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x58>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a14      	ldr	r2, [pc, #80]	@ (80037c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x58>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a13      	ldr	r2, [pc, #76]	@ (80037c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d111      	bne.n	80037a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b06      	cmp	r3, #6
 8003790:	d010      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a2:	e007      	b.n	80037b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	40012c00 	.word	0x40012c00
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800

080037cc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e031      	b.n	8003848 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80037f4:	6839      	ldr	r1, [r7, #0]
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f898 	bl	800392c <TIM_SlaveTimer_SetConfig>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e018      	b.n	8003848 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003824:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003834:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a2f      	ldr	r2, [pc, #188]	@ (8003920 <TIM_Base_SetConfig+0xd0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d00b      	beq.n	8003880 <TIM_Base_SetConfig+0x30>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800386e:	d007      	beq.n	8003880 <TIM_Base_SetConfig+0x30>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a2c      	ldr	r2, [pc, #176]	@ (8003924 <TIM_Base_SetConfig+0xd4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d003      	beq.n	8003880 <TIM_Base_SetConfig+0x30>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a2b      	ldr	r2, [pc, #172]	@ (8003928 <TIM_Base_SetConfig+0xd8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d108      	bne.n	8003892 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a22      	ldr	r2, [pc, #136]	@ (8003920 <TIM_Base_SetConfig+0xd0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00b      	beq.n	80038b2 <TIM_Base_SetConfig+0x62>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a0:	d007      	beq.n	80038b2 <TIM_Base_SetConfig+0x62>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003924 <TIM_Base_SetConfig+0xd4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d003      	beq.n	80038b2 <TIM_Base_SetConfig+0x62>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003928 <TIM_Base_SetConfig+0xd8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d108      	bne.n	80038c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003920 <TIM_Base_SetConfig+0xd0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d103      	bne.n	80038f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f023 0201 	bic.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	611a      	str	r2, [r3, #16]
  }
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	40012c00 	.word	0x40012c00
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800

0800392c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003948:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f023 0307 	bic.w	r3, r3, #7
 800395a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b70      	cmp	r3, #112	@ 0x70
 8003974:	d01a      	beq.n	80039ac <TIM_SlaveTimer_SetConfig+0x80>
 8003976:	2b70      	cmp	r3, #112	@ 0x70
 8003978:	d860      	bhi.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
 800397a:	2b60      	cmp	r3, #96	@ 0x60
 800397c:	d054      	beq.n	8003a28 <TIM_SlaveTimer_SetConfig+0xfc>
 800397e:	2b60      	cmp	r3, #96	@ 0x60
 8003980:	d85c      	bhi.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
 8003982:	2b50      	cmp	r3, #80	@ 0x50
 8003984:	d046      	beq.n	8003a14 <TIM_SlaveTimer_SetConfig+0xe8>
 8003986:	2b50      	cmp	r3, #80	@ 0x50
 8003988:	d858      	bhi.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
 800398a:	2b40      	cmp	r3, #64	@ 0x40
 800398c:	d019      	beq.n	80039c2 <TIM_SlaveTimer_SetConfig+0x96>
 800398e:	2b40      	cmp	r3, #64	@ 0x40
 8003990:	d854      	bhi.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
 8003992:	2b30      	cmp	r3, #48	@ 0x30
 8003994:	d055      	beq.n	8003a42 <TIM_SlaveTimer_SetConfig+0x116>
 8003996:	2b30      	cmp	r3, #48	@ 0x30
 8003998:	d850      	bhi.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
 800399a:	2b20      	cmp	r3, #32
 800399c:	d051      	beq.n	8003a42 <TIM_SlaveTimer_SetConfig+0x116>
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d84c      	bhi.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d04d      	beq.n	8003a42 <TIM_SlaveTimer_SetConfig+0x116>
 80039a6:	2b10      	cmp	r3, #16
 80039a8:	d04b      	beq.n	8003a42 <TIM_SlaveTimer_SetConfig+0x116>
 80039aa:	e047      	b.n	8003a3c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80039bc:	f000 f8a4 	bl	8003b08 <TIM_ETR_SetConfig>
      break;
 80039c0:	e040      	b.n	8003a44 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b05      	cmp	r3, #5
 80039c8:	d101      	bne.n	80039ce <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e03b      	b.n	8003a46 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6a1a      	ldr	r2, [r3, #32]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039f4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	621a      	str	r2, [r3, #32]
      break;
 8003a12:	e017      	b.n	8003a44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a20:	461a      	mov	r2, r3
 8003a22:	f000 f814 	bl	8003a4e <TIM_TI1_ConfigInputStage>
      break;
 8003a26:	e00d      	b.n	8003a44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a34:	461a      	mov	r2, r3
 8003a36:	f000 f838 	bl	8003aaa <TIM_TI2_ConfigInputStage>
      break;
 8003a3a:	e003      	b.n	8003a44 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a40:	e000      	b.n	8003a44 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003a42:	bf00      	nop
  }

  return status;
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b087      	sub	sp, #28
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f023 0201 	bic.w	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f023 030a 	bic.w	r3, r3, #10
 8003a8a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	621a      	str	r2, [r3, #32]
}
 8003aa0:	bf00      	nop
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b087      	sub	sp, #28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f023 0210 	bic.w	r2, r3, #16
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ad4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	031b      	lsls	r3, r3, #12
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ae6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	021a      	lsls	r2, r3, #8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	609a      	str	r2, [r3, #8]
}
 8003b3c:	bf00      	nop
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e046      	b.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a16      	ldr	r2, [pc, #88]	@ (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bac:	d009      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a12      	ldr	r2, [pc, #72]	@ (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a10      	ldr	r2, [pc, #64]	@ (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d10c      	bne.n	8003bdc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	40012c00 	.word	0x40012c00
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40000800 	.word	0x40000800

08003c04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e042      	b.n	8003c9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fe f81a 	bl	8001c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2224      	movs	r2, #36	@ 0x24
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fcff 	bl	800464c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695a      	ldr	r2, [r3, #20]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d121      	bne.n	8003d02 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_UART_Transmit_IT+0x26>
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e01a      	b.n	8003d04 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	88fa      	ldrh	r2, [r7, #6]
 8003cd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	88fa      	ldrh	r2, [r7, #6]
 8003cde:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2221      	movs	r2, #33	@ 0x21
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cfc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
  }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d112      	bne.n	8003d4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_UART_Receive_IT+0x26>
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e00b      	b.n	8003d50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	461a      	mov	r2, r3
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 faad 	bl	80042a4 <UART_Start_Receive_IT>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	e000      	b.n	8003d50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
  }
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b0ba      	sub	sp, #232	@ 0xe8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_UART_IRQHandler+0x66>
 8003daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fb8a 	bl	80044d0 <UART_Receive_IT>
      return;
 8003dbc:	e25b      	b.n	8004276 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80de 	beq.w	8003f84 <HAL_UART_IRQHandler+0x22c>
 8003dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80d1 	beq.w	8003f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <HAL_UART_IRQHandler+0xae>
 8003dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfe:	f043 0201 	orr.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_UART_IRQHandler+0xd2>
 8003e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	f043 0202 	orr.w	r2, r3, #2
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_UART_IRQHandler+0xf6>
 8003e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	f043 0204 	orr.w	r2, r3, #4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d011      	beq.n	8003e7e <HAL_UART_IRQHandler+0x126>
 8003e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e76:	f043 0208 	orr.w	r2, r3, #8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 81f2 	beq.w	800426c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x14e>
 8003e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fb15 	bl	80044d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf14      	ite	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	2300      	moveq	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x17a>
 8003eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d04f      	beq.n	8003f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa1f 	bl	8004316 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d041      	beq.n	8003f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1d9      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d013      	beq.n	8003f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8004138 <HAL_UART_IRQHandler+0x3e0>)
 8003f40:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe fac4 	bl	80024d4 <HAL_DMA_Abort_IT>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d016      	beq.n	8003f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e00e      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f98a 	bl	800427c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	e00a      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f986 	bl	800427c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	e006      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f982 	bl	800427c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f7e:	e175      	b.n	800426c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f80:	bf00      	nop
    return;
 8003f82:	e173      	b.n	800426c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	f040 814f 	bne.w	800422c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8148 	beq.w	800422c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8141 	beq.w	800422c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80b6 	beq.w	800413c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8145 	beq.w	8004270 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	f080 813e 	bcs.w	8004270 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ffa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b20      	cmp	r3, #32
 8004004:	f000 8088 	beq.w	8004118 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	330c      	adds	r3, #12
 800400e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800401e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004022:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004026:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004034:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004038:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004040:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800404c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1d9      	bne.n	8004008 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3314      	adds	r3, #20
 800405a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004064:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3314      	adds	r3, #20
 8004074:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004078:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800407c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004080:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800408a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e1      	bne.n	8004054 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3314      	adds	r3, #20
 8004096:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3314      	adds	r3, #20
 80040b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e3      	bne.n	8004090 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040e8:	f023 0310 	bic.w	r3, r3, #16
 80040ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80040fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040fc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004100:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e3      	bne.n	80040d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004112:	4618      	mov	r0, r3
 8004114:	f7fe f9a2 	bl	800245c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004126:	b29b      	uxth	r3, r3
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	b29b      	uxth	r3, r3
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f8ad 	bl	800428e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004134:	e09c      	b.n	8004270 <HAL_UART_IRQHandler+0x518>
 8004136:	bf00      	nop
 8004138:	080043db 	.word	0x080043db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004144:	b29b      	uxth	r3, r3
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 808e 	beq.w	8004274 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8089 	beq.w	8004274 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004178:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004186:	647a      	str	r2, [r7, #68]	@ 0x44
 8004188:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800418c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e3      	bne.n	8004162 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3314      	adds	r3, #20
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	623b      	str	r3, [r7, #32]
   return(result);
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3314      	adds	r3, #20
 80041ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041be:	633a      	str	r2, [r7, #48]	@ 0x30
 80041c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e3      	bne.n	800419a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0310 	bic.w	r3, r3, #16
 80041f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	330c      	adds	r3, #12
 8004200:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004204:	61fa      	str	r2, [r7, #28]
 8004206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	69b9      	ldr	r1, [r7, #24]
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	617b      	str	r3, [r7, #20]
   return(result);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e3      	bne.n	80041e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800421e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f832 	bl	800428e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800422a:	e023      	b.n	8004274 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800422c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004234:	2b00      	cmp	r3, #0
 8004236:	d009      	beq.n	800424c <HAL_UART_IRQHandler+0x4f4>
 8004238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800423c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f8dc 	bl	8004402 <UART_Transmit_IT>
    return;
 800424a:	e014      	b.n	8004276 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00e      	beq.n	8004276 <HAL_UART_IRQHandler+0x51e>
 8004258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800425c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f91b 	bl	80044a0 <UART_EndTransmit_IT>
    return;
 800426a:	e004      	b.n	8004276 <HAL_UART_IRQHandler+0x51e>
    return;
 800426c:	bf00      	nop
 800426e:	e002      	b.n	8004276 <HAL_UART_IRQHandler+0x51e>
      return;
 8004270:	bf00      	nop
 8004272:	e000      	b.n	8004276 <HAL_UART_IRQHandler+0x51e>
      return;
 8004274:	bf00      	nop
  }
}
 8004276:	37e8      	adds	r7, #232	@ 0xe8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr

0800428e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	460b      	mov	r3, r1
 8004298:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	88fa      	ldrh	r2, [r7, #6]
 80042c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2222      	movs	r2, #34	@ 0x22
 80042ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d007      	beq.n	80042ea <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0220 	orr.w	r2, r2, #32
 8004308:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr

08004316 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004316:	b480      	push	{r7}
 8004318:	b095      	sub	sp, #84	@ 0x54
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	330c      	adds	r3, #12
 8004324:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004334:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	330c      	adds	r3, #12
 800433c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800433e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004344:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800434c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e5      	bne.n	800431e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3314      	adds	r3, #20
 8004358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	61fb      	str	r3, [r7, #28]
   return(result);
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	64bb      	str	r3, [r7, #72]	@ 0x48
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3314      	adds	r3, #20
 8004370:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004372:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004374:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e5      	bne.n	8004352 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438a:	2b01      	cmp	r3, #1
 800438c:	d119      	bne.n	80043c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	330c      	adds	r3, #12
 8004394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	60bb      	str	r3, [r7, #8]
   return(result);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f023 0310 	bic.w	r3, r3, #16
 80043a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	330c      	adds	r3, #12
 80043ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ae:	61ba      	str	r2, [r7, #24]
 80043b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6979      	ldr	r1, [r7, #20]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	613b      	str	r3, [r7, #16]
   return(result);
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e5      	bne.n	800438e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043d0:	bf00      	nop
 80043d2:	3754      	adds	r7, #84	@ 0x54
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff ff41 	bl	800427c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b21      	cmp	r3, #33	@ 0x21
 8004414:	d13e      	bne.n	8004494 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800441e:	d114      	bne.n	800444a <UART_Transmit_IT+0x48>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d110      	bne.n	800444a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800443c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	1c9a      	adds	r2, r3, #2
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	621a      	str	r2, [r3, #32]
 8004448:	e008      	b.n	800445c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	1c59      	adds	r1, r3, #1
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6211      	str	r1, [r2, #32]
 8004454:	781a      	ldrb	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29b      	uxth	r3, r3
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4619      	mov	r1, r3
 800446a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10f      	bne.n	8004490 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800447e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800448e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e000      	b.n	8004496 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004494:	2302      	movs	r3, #2
  }
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fd f943 	bl	800174c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08c      	sub	sp, #48	@ 0x30
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b22      	cmp	r3, #34	@ 0x22
 80044e2:	f040 80ae 	bne.w	8004642 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ee:	d117      	bne.n	8004520 <UART_Receive_IT+0x50>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d113      	bne.n	8004520 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450e:	b29a      	uxth	r2, r3
 8004510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004512:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004518:	1c9a      	adds	r2, r3, #2
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	629a      	str	r2, [r3, #40]	@ 0x28
 800451e:	e026      	b.n	800456e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004532:	d007      	beq.n	8004544 <UART_Receive_IT+0x74>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <UART_Receive_IT+0x82>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	e008      	b.n	8004564 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800455e:	b2da      	uxtb	r2, r3
 8004560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004562:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29b      	uxth	r3, r3
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	4619      	mov	r1, r3
 800457c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800457e:	2b00      	cmp	r3, #0
 8004580:	d15d      	bne.n	800463e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0220 	bic.w	r2, r2, #32
 8004590:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695a      	ldr	r2, [r3, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d135      	bne.n	8004634 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	330c      	adds	r3, #12
 80045d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	613b      	str	r3, [r7, #16]
   return(result);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f023 0310 	bic.w	r3, r3, #16
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	330c      	adds	r3, #12
 80045ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ee:	623a      	str	r2, [r7, #32]
 80045f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	69f9      	ldr	r1, [r7, #28]
 80045f4:	6a3a      	ldr	r2, [r7, #32]
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e5      	bne.n	80045ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b10      	cmp	r3, #16
 800460e:	d10a      	bne.n	8004626 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff fe2e 	bl	800428e <HAL_UARTEx_RxEventCallback>
 8004632:	e002      	b.n	800463a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7fd f84f 	bl	80016d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e002      	b.n	8004644 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004642:	2302      	movs	r3, #2
  }
}
 8004644:	4618      	mov	r0, r3
 8004646:	3730      	adds	r7, #48	@ 0x30
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004686:	f023 030c 	bic.w	r3, r3, #12
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6812      	ldr	r2, [r2, #0]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	430b      	orrs	r3, r1
 8004692:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004760 <UART_SetConfig+0x114>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d103      	bne.n	80046bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046b4:	f7fe ff32 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	e002      	b.n	80046c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046bc:	f7fe ff1a 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 80046c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	009a      	lsls	r2, r3, #2
 80046cc:	441a      	add	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	4a22      	ldr	r2, [pc, #136]	@ (8004764 <UART_SetConfig+0x118>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	0119      	lsls	r1, r3, #4
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	009a      	lsls	r2, r3, #2
 80046ec:	441a      	add	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004764 <UART_SetConfig+0x118>)
 80046fa:	fba3 0302 	umull	r0, r3, r3, r2
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	2064      	movs	r0, #100	@ 0x64
 8004702:	fb00 f303 	mul.w	r3, r0, r3
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	3332      	adds	r3, #50	@ 0x32
 800470c:	4a15      	ldr	r2, [pc, #84]	@ (8004764 <UART_SetConfig+0x118>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004718:	4419      	add	r1, r3
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	009a      	lsls	r2, r3, #2
 8004724:	441a      	add	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004730:	4b0c      	ldr	r3, [pc, #48]	@ (8004764 <UART_SetConfig+0x118>)
 8004732:	fba3 0302 	umull	r0, r3, r3, r2
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	2064      	movs	r0, #100	@ 0x64
 800473a:	fb00 f303 	mul.w	r3, r0, r3
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	3332      	adds	r3, #50	@ 0x32
 8004744:	4a07      	ldr	r2, [pc, #28]	@ (8004764 <UART_SetConfig+0x118>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	f003 020f 	and.w	r2, r3, #15
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	440a      	add	r2, r1
 8004756:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004758:	bf00      	nop
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40013800 	.word	0x40013800
 8004764:	51eb851f 	.word	0x51eb851f

08004768 <__cvt>:
 8004768:	2b00      	cmp	r3, #0
 800476a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800476e:	461d      	mov	r5, r3
 8004770:	bfbb      	ittet	lt
 8004772:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004776:	461d      	movlt	r5, r3
 8004778:	2300      	movge	r3, #0
 800477a:	232d      	movlt	r3, #45	@ 0x2d
 800477c:	b088      	sub	sp, #32
 800477e:	4614      	mov	r4, r2
 8004780:	bfb8      	it	lt
 8004782:	4614      	movlt	r4, r2
 8004784:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004786:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004788:	7013      	strb	r3, [r2, #0]
 800478a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800478c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004790:	f023 0820 	bic.w	r8, r3, #32
 8004794:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004798:	d005      	beq.n	80047a6 <__cvt+0x3e>
 800479a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800479e:	d100      	bne.n	80047a2 <__cvt+0x3a>
 80047a0:	3601      	adds	r6, #1
 80047a2:	2302      	movs	r3, #2
 80047a4:	e000      	b.n	80047a8 <__cvt+0x40>
 80047a6:	2303      	movs	r3, #3
 80047a8:	aa07      	add	r2, sp, #28
 80047aa:	9204      	str	r2, [sp, #16]
 80047ac:	aa06      	add	r2, sp, #24
 80047ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80047b2:	e9cd 3600 	strd	r3, r6, [sp]
 80047b6:	4622      	mov	r2, r4
 80047b8:	462b      	mov	r3, r5
 80047ba:	f000 fe4d 	bl	8005458 <_dtoa_r>
 80047be:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80047c2:	4607      	mov	r7, r0
 80047c4:	d119      	bne.n	80047fa <__cvt+0x92>
 80047c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80047c8:	07db      	lsls	r3, r3, #31
 80047ca:	d50e      	bpl.n	80047ea <__cvt+0x82>
 80047cc:	eb00 0906 	add.w	r9, r0, r6
 80047d0:	2200      	movs	r2, #0
 80047d2:	2300      	movs	r3, #0
 80047d4:	4620      	mov	r0, r4
 80047d6:	4629      	mov	r1, r5
 80047d8:	f7fc f8e6 	bl	80009a8 <__aeabi_dcmpeq>
 80047dc:	b108      	cbz	r0, 80047e2 <__cvt+0x7a>
 80047de:	f8cd 901c 	str.w	r9, [sp, #28]
 80047e2:	2230      	movs	r2, #48	@ 0x30
 80047e4:	9b07      	ldr	r3, [sp, #28]
 80047e6:	454b      	cmp	r3, r9
 80047e8:	d31e      	bcc.n	8004828 <__cvt+0xc0>
 80047ea:	4638      	mov	r0, r7
 80047ec:	9b07      	ldr	r3, [sp, #28]
 80047ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80047f0:	1bdb      	subs	r3, r3, r7
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	b008      	add	sp, #32
 80047f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047fa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047fe:	eb00 0906 	add.w	r9, r0, r6
 8004802:	d1e5      	bne.n	80047d0 <__cvt+0x68>
 8004804:	7803      	ldrb	r3, [r0, #0]
 8004806:	2b30      	cmp	r3, #48	@ 0x30
 8004808:	d10a      	bne.n	8004820 <__cvt+0xb8>
 800480a:	2200      	movs	r2, #0
 800480c:	2300      	movs	r3, #0
 800480e:	4620      	mov	r0, r4
 8004810:	4629      	mov	r1, r5
 8004812:	f7fc f8c9 	bl	80009a8 <__aeabi_dcmpeq>
 8004816:	b918      	cbnz	r0, 8004820 <__cvt+0xb8>
 8004818:	f1c6 0601 	rsb	r6, r6, #1
 800481c:	f8ca 6000 	str.w	r6, [sl]
 8004820:	f8da 3000 	ldr.w	r3, [sl]
 8004824:	4499      	add	r9, r3
 8004826:	e7d3      	b.n	80047d0 <__cvt+0x68>
 8004828:	1c59      	adds	r1, r3, #1
 800482a:	9107      	str	r1, [sp, #28]
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	e7d9      	b.n	80047e4 <__cvt+0x7c>

08004830 <__exponent>:
 8004830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004832:	2900      	cmp	r1, #0
 8004834:	bfb6      	itet	lt
 8004836:	232d      	movlt	r3, #45	@ 0x2d
 8004838:	232b      	movge	r3, #43	@ 0x2b
 800483a:	4249      	neglt	r1, r1
 800483c:	2909      	cmp	r1, #9
 800483e:	7002      	strb	r2, [r0, #0]
 8004840:	7043      	strb	r3, [r0, #1]
 8004842:	dd29      	ble.n	8004898 <__exponent+0x68>
 8004844:	f10d 0307 	add.w	r3, sp, #7
 8004848:	461d      	mov	r5, r3
 800484a:	270a      	movs	r7, #10
 800484c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004850:	461a      	mov	r2, r3
 8004852:	fb07 1416 	mls	r4, r7, r6, r1
 8004856:	3430      	adds	r4, #48	@ 0x30
 8004858:	f802 4c01 	strb.w	r4, [r2, #-1]
 800485c:	460c      	mov	r4, r1
 800485e:	2c63      	cmp	r4, #99	@ 0x63
 8004860:	4631      	mov	r1, r6
 8004862:	f103 33ff 	add.w	r3, r3, #4294967295
 8004866:	dcf1      	bgt.n	800484c <__exponent+0x1c>
 8004868:	3130      	adds	r1, #48	@ 0x30
 800486a:	1e94      	subs	r4, r2, #2
 800486c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004870:	4623      	mov	r3, r4
 8004872:	1c41      	adds	r1, r0, #1
 8004874:	42ab      	cmp	r3, r5
 8004876:	d30a      	bcc.n	800488e <__exponent+0x5e>
 8004878:	f10d 0309 	add.w	r3, sp, #9
 800487c:	1a9b      	subs	r3, r3, r2
 800487e:	42ac      	cmp	r4, r5
 8004880:	bf88      	it	hi
 8004882:	2300      	movhi	r3, #0
 8004884:	3302      	adds	r3, #2
 8004886:	4403      	add	r3, r0
 8004888:	1a18      	subs	r0, r3, r0
 800488a:	b003      	add	sp, #12
 800488c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800488e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004892:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004896:	e7ed      	b.n	8004874 <__exponent+0x44>
 8004898:	2330      	movs	r3, #48	@ 0x30
 800489a:	3130      	adds	r1, #48	@ 0x30
 800489c:	7083      	strb	r3, [r0, #2]
 800489e:	70c1      	strb	r1, [r0, #3]
 80048a0:	1d03      	adds	r3, r0, #4
 80048a2:	e7f1      	b.n	8004888 <__exponent+0x58>

080048a4 <_printf_float>:
 80048a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a8:	b091      	sub	sp, #68	@ 0x44
 80048aa:	460c      	mov	r4, r1
 80048ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80048b0:	4616      	mov	r6, r2
 80048b2:	461f      	mov	r7, r3
 80048b4:	4605      	mov	r5, r0
 80048b6:	f000 fcbf 	bl	8005238 <_localeconv_r>
 80048ba:	6803      	ldr	r3, [r0, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	9308      	str	r3, [sp, #32]
 80048c0:	f7fb fc46 	bl	8000150 <strlen>
 80048c4:	2300      	movs	r3, #0
 80048c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80048c8:	f8d8 3000 	ldr.w	r3, [r8]
 80048cc:	9009      	str	r0, [sp, #36]	@ 0x24
 80048ce:	3307      	adds	r3, #7
 80048d0:	f023 0307 	bic.w	r3, r3, #7
 80048d4:	f103 0208 	add.w	r2, r3, #8
 80048d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80048dc:	f8d4 b000 	ldr.w	fp, [r4]
 80048e0:	f8c8 2000 	str.w	r2, [r8]
 80048e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80048ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048ee:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80048f2:	f04f 32ff 	mov.w	r2, #4294967295
 80048f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80048fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80048fe:	4b9c      	ldr	r3, [pc, #624]	@ (8004b70 <_printf_float+0x2cc>)
 8004900:	f7fc f884 	bl	8000a0c <__aeabi_dcmpun>
 8004904:	bb70      	cbnz	r0, 8004964 <_printf_float+0xc0>
 8004906:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800490a:	f04f 32ff 	mov.w	r2, #4294967295
 800490e:	4b98      	ldr	r3, [pc, #608]	@ (8004b70 <_printf_float+0x2cc>)
 8004910:	f7fc f85e 	bl	80009d0 <__aeabi_dcmple>
 8004914:	bb30      	cbnz	r0, 8004964 <_printf_float+0xc0>
 8004916:	2200      	movs	r2, #0
 8004918:	2300      	movs	r3, #0
 800491a:	4640      	mov	r0, r8
 800491c:	4649      	mov	r1, r9
 800491e:	f7fc f84d 	bl	80009bc <__aeabi_dcmplt>
 8004922:	b110      	cbz	r0, 800492a <_printf_float+0x86>
 8004924:	232d      	movs	r3, #45	@ 0x2d
 8004926:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800492a:	4a92      	ldr	r2, [pc, #584]	@ (8004b74 <_printf_float+0x2d0>)
 800492c:	4b92      	ldr	r3, [pc, #584]	@ (8004b78 <_printf_float+0x2d4>)
 800492e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004932:	bf8c      	ite	hi
 8004934:	4690      	movhi	r8, r2
 8004936:	4698      	movls	r8, r3
 8004938:	2303      	movs	r3, #3
 800493a:	f04f 0900 	mov.w	r9, #0
 800493e:	6123      	str	r3, [r4, #16]
 8004940:	f02b 0304 	bic.w	r3, fp, #4
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	4633      	mov	r3, r6
 8004948:	4621      	mov	r1, r4
 800494a:	4628      	mov	r0, r5
 800494c:	9700      	str	r7, [sp, #0]
 800494e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004950:	f000 f9d4 	bl	8004cfc <_printf_common>
 8004954:	3001      	adds	r0, #1
 8004956:	f040 8090 	bne.w	8004a7a <_printf_float+0x1d6>
 800495a:	f04f 30ff 	mov.w	r0, #4294967295
 800495e:	b011      	add	sp, #68	@ 0x44
 8004960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	4640      	mov	r0, r8
 800496a:	4649      	mov	r1, r9
 800496c:	f7fc f84e 	bl	8000a0c <__aeabi_dcmpun>
 8004970:	b148      	cbz	r0, 8004986 <_printf_float+0xe2>
 8004972:	464b      	mov	r3, r9
 8004974:	2b00      	cmp	r3, #0
 8004976:	bfb8      	it	lt
 8004978:	232d      	movlt	r3, #45	@ 0x2d
 800497a:	4a80      	ldr	r2, [pc, #512]	@ (8004b7c <_printf_float+0x2d8>)
 800497c:	bfb8      	it	lt
 800497e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004982:	4b7f      	ldr	r3, [pc, #508]	@ (8004b80 <_printf_float+0x2dc>)
 8004984:	e7d3      	b.n	800492e <_printf_float+0x8a>
 8004986:	6863      	ldr	r3, [r4, #4]
 8004988:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	d13f      	bne.n	8004a10 <_printf_float+0x16c>
 8004990:	2306      	movs	r3, #6
 8004992:	6063      	str	r3, [r4, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800499a:	6023      	str	r3, [r4, #0]
 800499c:	9206      	str	r2, [sp, #24]
 800499e:	aa0e      	add	r2, sp, #56	@ 0x38
 80049a0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80049a4:	aa0d      	add	r2, sp, #52	@ 0x34
 80049a6:	9203      	str	r2, [sp, #12]
 80049a8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80049ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80049b0:	6863      	ldr	r3, [r4, #4]
 80049b2:	4642      	mov	r2, r8
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	4628      	mov	r0, r5
 80049b8:	464b      	mov	r3, r9
 80049ba:	910a      	str	r1, [sp, #40]	@ 0x28
 80049bc:	f7ff fed4 	bl	8004768 <__cvt>
 80049c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80049c2:	4680      	mov	r8, r0
 80049c4:	2947      	cmp	r1, #71	@ 0x47
 80049c6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80049c8:	d128      	bne.n	8004a1c <_printf_float+0x178>
 80049ca:	1cc8      	adds	r0, r1, #3
 80049cc:	db02      	blt.n	80049d4 <_printf_float+0x130>
 80049ce:	6863      	ldr	r3, [r4, #4]
 80049d0:	4299      	cmp	r1, r3
 80049d2:	dd40      	ble.n	8004a56 <_printf_float+0x1b2>
 80049d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80049d8:	fa5f fa8a 	uxtb.w	sl, sl
 80049dc:	4652      	mov	r2, sl
 80049de:	3901      	subs	r1, #1
 80049e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80049e4:	910d      	str	r1, [sp, #52]	@ 0x34
 80049e6:	f7ff ff23 	bl	8004830 <__exponent>
 80049ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80049ec:	4681      	mov	r9, r0
 80049ee:	1813      	adds	r3, r2, r0
 80049f0:	2a01      	cmp	r2, #1
 80049f2:	6123      	str	r3, [r4, #16]
 80049f4:	dc02      	bgt.n	80049fc <_printf_float+0x158>
 80049f6:	6822      	ldr	r2, [r4, #0]
 80049f8:	07d2      	lsls	r2, r2, #31
 80049fa:	d501      	bpl.n	8004a00 <_printf_float+0x15c>
 80049fc:	3301      	adds	r3, #1
 80049fe:	6123      	str	r3, [r4, #16]
 8004a00:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d09e      	beq.n	8004946 <_printf_float+0xa2>
 8004a08:	232d      	movs	r3, #45	@ 0x2d
 8004a0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a0e:	e79a      	b.n	8004946 <_printf_float+0xa2>
 8004a10:	2947      	cmp	r1, #71	@ 0x47
 8004a12:	d1bf      	bne.n	8004994 <_printf_float+0xf0>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1bd      	bne.n	8004994 <_printf_float+0xf0>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e7ba      	b.n	8004992 <_printf_float+0xee>
 8004a1c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a20:	d9dc      	bls.n	80049dc <_printf_float+0x138>
 8004a22:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a26:	d118      	bne.n	8004a5a <_printf_float+0x1b6>
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	6863      	ldr	r3, [r4, #4]
 8004a2c:	dd0b      	ble.n	8004a46 <_printf_float+0x1a2>
 8004a2e:	6121      	str	r1, [r4, #16]
 8004a30:	b913      	cbnz	r3, 8004a38 <_printf_float+0x194>
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	07d0      	lsls	r0, r2, #31
 8004a36:	d502      	bpl.n	8004a3e <_printf_float+0x19a>
 8004a38:	3301      	adds	r3, #1
 8004a3a:	440b      	add	r3, r1
 8004a3c:	6123      	str	r3, [r4, #16]
 8004a3e:	f04f 0900 	mov.w	r9, #0
 8004a42:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a44:	e7dc      	b.n	8004a00 <_printf_float+0x15c>
 8004a46:	b913      	cbnz	r3, 8004a4e <_printf_float+0x1aa>
 8004a48:	6822      	ldr	r2, [r4, #0]
 8004a4a:	07d2      	lsls	r2, r2, #31
 8004a4c:	d501      	bpl.n	8004a52 <_printf_float+0x1ae>
 8004a4e:	3302      	adds	r3, #2
 8004a50:	e7f4      	b.n	8004a3c <_printf_float+0x198>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e7f2      	b.n	8004a3c <_printf_float+0x198>
 8004a56:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a5c:	4299      	cmp	r1, r3
 8004a5e:	db05      	blt.n	8004a6c <_printf_float+0x1c8>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	6121      	str	r1, [r4, #16]
 8004a64:	07d8      	lsls	r0, r3, #31
 8004a66:	d5ea      	bpl.n	8004a3e <_printf_float+0x19a>
 8004a68:	1c4b      	adds	r3, r1, #1
 8004a6a:	e7e7      	b.n	8004a3c <_printf_float+0x198>
 8004a6c:	2900      	cmp	r1, #0
 8004a6e:	bfcc      	ite	gt
 8004a70:	2201      	movgt	r2, #1
 8004a72:	f1c1 0202 	rsble	r2, r1, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	e7e0      	b.n	8004a3c <_printf_float+0x198>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	055a      	lsls	r2, r3, #21
 8004a7e:	d407      	bmi.n	8004a90 <_printf_float+0x1ec>
 8004a80:	6923      	ldr	r3, [r4, #16]
 8004a82:	4642      	mov	r2, r8
 8004a84:	4631      	mov	r1, r6
 8004a86:	4628      	mov	r0, r5
 8004a88:	47b8      	blx	r7
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d12b      	bne.n	8004ae6 <_printf_float+0x242>
 8004a8e:	e764      	b.n	800495a <_printf_float+0xb6>
 8004a90:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a94:	f240 80dc 	bls.w	8004c50 <_printf_float+0x3ac>
 8004a98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f7fb ff82 	bl	80009a8 <__aeabi_dcmpeq>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d033      	beq.n	8004b10 <_printf_float+0x26c>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	4631      	mov	r1, r6
 8004aac:	4628      	mov	r0, r5
 8004aae:	4a35      	ldr	r2, [pc, #212]	@ (8004b84 <_printf_float+0x2e0>)
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f43f af51 	beq.w	800495a <_printf_float+0xb6>
 8004ab8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004abc:	4543      	cmp	r3, r8
 8004abe:	db02      	blt.n	8004ac6 <_printf_float+0x222>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	07d8      	lsls	r0, r3, #31
 8004ac4:	d50f      	bpl.n	8004ae6 <_printf_float+0x242>
 8004ac6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004aca:	4631      	mov	r1, r6
 8004acc:	4628      	mov	r0, r5
 8004ace:	47b8      	blx	r7
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	f43f af42 	beq.w	800495a <_printf_float+0xb6>
 8004ad6:	f04f 0900 	mov.w	r9, #0
 8004ada:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ade:	f104 0a1a 	add.w	sl, r4, #26
 8004ae2:	45c8      	cmp	r8, r9
 8004ae4:	dc09      	bgt.n	8004afa <_printf_float+0x256>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	079b      	lsls	r3, r3, #30
 8004aea:	f100 8102 	bmi.w	8004cf2 <_printf_float+0x44e>
 8004aee:	68e0      	ldr	r0, [r4, #12]
 8004af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004af2:	4298      	cmp	r0, r3
 8004af4:	bfb8      	it	lt
 8004af6:	4618      	movlt	r0, r3
 8004af8:	e731      	b.n	800495e <_printf_float+0xba>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4652      	mov	r2, sl
 8004afe:	4631      	mov	r1, r6
 8004b00:	4628      	mov	r0, r5
 8004b02:	47b8      	blx	r7
 8004b04:	3001      	adds	r0, #1
 8004b06:	f43f af28 	beq.w	800495a <_printf_float+0xb6>
 8004b0a:	f109 0901 	add.w	r9, r9, #1
 8004b0e:	e7e8      	b.n	8004ae2 <_printf_float+0x23e>
 8004b10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	dc38      	bgt.n	8004b88 <_printf_float+0x2e4>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4631      	mov	r1, r6
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	4a19      	ldr	r2, [pc, #100]	@ (8004b84 <_printf_float+0x2e0>)
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	f43f af1a 	beq.w	800495a <_printf_float+0xb6>
 8004b26:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004b2a:	ea59 0303 	orrs.w	r3, r9, r3
 8004b2e:	d102      	bne.n	8004b36 <_printf_float+0x292>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	07d9      	lsls	r1, r3, #31
 8004b34:	d5d7      	bpl.n	8004ae6 <_printf_float+0x242>
 8004b36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	47b8      	blx	r7
 8004b40:	3001      	adds	r0, #1
 8004b42:	f43f af0a 	beq.w	800495a <_printf_float+0xb6>
 8004b46:	f04f 0a00 	mov.w	sl, #0
 8004b4a:	f104 0b1a 	add.w	fp, r4, #26
 8004b4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b50:	425b      	negs	r3, r3
 8004b52:	4553      	cmp	r3, sl
 8004b54:	dc01      	bgt.n	8004b5a <_printf_float+0x2b6>
 8004b56:	464b      	mov	r3, r9
 8004b58:	e793      	b.n	8004a82 <_printf_float+0x1de>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	465a      	mov	r2, fp
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4628      	mov	r0, r5
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	f43f aef8 	beq.w	800495a <_printf_float+0xb6>
 8004b6a:	f10a 0a01 	add.w	sl, sl, #1
 8004b6e:	e7ee      	b.n	8004b4e <_printf_float+0x2aa>
 8004b70:	7fefffff 	.word	0x7fefffff
 8004b74:	080070ce 	.word	0x080070ce
 8004b78:	080070ca 	.word	0x080070ca
 8004b7c:	080070d6 	.word	0x080070d6
 8004b80:	080070d2 	.word	0x080070d2
 8004b84:	080070da 	.word	0x080070da
 8004b88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b8a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004b8e:	4553      	cmp	r3, sl
 8004b90:	bfa8      	it	ge
 8004b92:	4653      	movge	r3, sl
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	4699      	mov	r9, r3
 8004b98:	dc36      	bgt.n	8004c08 <_printf_float+0x364>
 8004b9a:	f04f 0b00 	mov.w	fp, #0
 8004b9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ba2:	f104 021a 	add.w	r2, r4, #26
 8004ba6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ba8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004baa:	eba3 0309 	sub.w	r3, r3, r9
 8004bae:	455b      	cmp	r3, fp
 8004bb0:	dc31      	bgt.n	8004c16 <_printf_float+0x372>
 8004bb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bb4:	459a      	cmp	sl, r3
 8004bb6:	dc3a      	bgt.n	8004c2e <_printf_float+0x38a>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	07da      	lsls	r2, r3, #31
 8004bbc:	d437      	bmi.n	8004c2e <_printf_float+0x38a>
 8004bbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bc0:	ebaa 0903 	sub.w	r9, sl, r3
 8004bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bc6:	ebaa 0303 	sub.w	r3, sl, r3
 8004bca:	4599      	cmp	r9, r3
 8004bcc:	bfa8      	it	ge
 8004bce:	4699      	movge	r9, r3
 8004bd0:	f1b9 0f00 	cmp.w	r9, #0
 8004bd4:	dc33      	bgt.n	8004c3e <_printf_float+0x39a>
 8004bd6:	f04f 0800 	mov.w	r8, #0
 8004bda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bde:	f104 0b1a 	add.w	fp, r4, #26
 8004be2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004be4:	ebaa 0303 	sub.w	r3, sl, r3
 8004be8:	eba3 0309 	sub.w	r3, r3, r9
 8004bec:	4543      	cmp	r3, r8
 8004bee:	f77f af7a 	ble.w	8004ae6 <_printf_float+0x242>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	465a      	mov	r2, fp
 8004bf6:	4631      	mov	r1, r6
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	47b8      	blx	r7
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	f43f aeac 	beq.w	800495a <_printf_float+0xb6>
 8004c02:	f108 0801 	add.w	r8, r8, #1
 8004c06:	e7ec      	b.n	8004be2 <_printf_float+0x33e>
 8004c08:	4642      	mov	r2, r8
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	47b8      	blx	r7
 8004c10:	3001      	adds	r0, #1
 8004c12:	d1c2      	bne.n	8004b9a <_printf_float+0x2f6>
 8004c14:	e6a1      	b.n	800495a <_printf_float+0xb6>
 8004c16:	2301      	movs	r3, #1
 8004c18:	4631      	mov	r1, r6
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	920a      	str	r2, [sp, #40]	@ 0x28
 8004c1e:	47b8      	blx	r7
 8004c20:	3001      	adds	r0, #1
 8004c22:	f43f ae9a 	beq.w	800495a <_printf_float+0xb6>
 8004c26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c28:	f10b 0b01 	add.w	fp, fp, #1
 8004c2c:	e7bb      	b.n	8004ba6 <_printf_float+0x302>
 8004c2e:	4631      	mov	r1, r6
 8004c30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c34:	4628      	mov	r0, r5
 8004c36:	47b8      	blx	r7
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d1c0      	bne.n	8004bbe <_printf_float+0x31a>
 8004c3c:	e68d      	b.n	800495a <_printf_float+0xb6>
 8004c3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c40:	464b      	mov	r3, r9
 8004c42:	4631      	mov	r1, r6
 8004c44:	4628      	mov	r0, r5
 8004c46:	4442      	add	r2, r8
 8004c48:	47b8      	blx	r7
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d1c3      	bne.n	8004bd6 <_printf_float+0x332>
 8004c4e:	e684      	b.n	800495a <_printf_float+0xb6>
 8004c50:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004c54:	f1ba 0f01 	cmp.w	sl, #1
 8004c58:	dc01      	bgt.n	8004c5e <_printf_float+0x3ba>
 8004c5a:	07db      	lsls	r3, r3, #31
 8004c5c:	d536      	bpl.n	8004ccc <_printf_float+0x428>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	4642      	mov	r2, r8
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b8      	blx	r7
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f43f ae76 	beq.w	800495a <_printf_float+0xb6>
 8004c6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c72:	4631      	mov	r1, r6
 8004c74:	4628      	mov	r0, r5
 8004c76:	47b8      	blx	r7
 8004c78:	3001      	adds	r0, #1
 8004c7a:	f43f ae6e 	beq.w	800495a <_printf_float+0xb6>
 8004c7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c82:	2200      	movs	r2, #0
 8004c84:	2300      	movs	r3, #0
 8004c86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c8a:	f7fb fe8d 	bl	80009a8 <__aeabi_dcmpeq>
 8004c8e:	b9c0      	cbnz	r0, 8004cc2 <_printf_float+0x41e>
 8004c90:	4653      	mov	r3, sl
 8004c92:	f108 0201 	add.w	r2, r8, #1
 8004c96:	4631      	mov	r1, r6
 8004c98:	4628      	mov	r0, r5
 8004c9a:	47b8      	blx	r7
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d10c      	bne.n	8004cba <_printf_float+0x416>
 8004ca0:	e65b      	b.n	800495a <_printf_float+0xb6>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	465a      	mov	r2, fp
 8004ca6:	4631      	mov	r1, r6
 8004ca8:	4628      	mov	r0, r5
 8004caa:	47b8      	blx	r7
 8004cac:	3001      	adds	r0, #1
 8004cae:	f43f ae54 	beq.w	800495a <_printf_float+0xb6>
 8004cb2:	f108 0801 	add.w	r8, r8, #1
 8004cb6:	45d0      	cmp	r8, sl
 8004cb8:	dbf3      	blt.n	8004ca2 <_printf_float+0x3fe>
 8004cba:	464b      	mov	r3, r9
 8004cbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004cc0:	e6e0      	b.n	8004a84 <_printf_float+0x1e0>
 8004cc2:	f04f 0800 	mov.w	r8, #0
 8004cc6:	f104 0b1a 	add.w	fp, r4, #26
 8004cca:	e7f4      	b.n	8004cb6 <_printf_float+0x412>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	4642      	mov	r2, r8
 8004cd0:	e7e1      	b.n	8004c96 <_printf_float+0x3f2>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	464a      	mov	r2, r9
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	4628      	mov	r0, r5
 8004cda:	47b8      	blx	r7
 8004cdc:	3001      	adds	r0, #1
 8004cde:	f43f ae3c 	beq.w	800495a <_printf_float+0xb6>
 8004ce2:	f108 0801 	add.w	r8, r8, #1
 8004ce6:	68e3      	ldr	r3, [r4, #12]
 8004ce8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004cea:	1a5b      	subs	r3, r3, r1
 8004cec:	4543      	cmp	r3, r8
 8004cee:	dcf0      	bgt.n	8004cd2 <_printf_float+0x42e>
 8004cf0:	e6fd      	b.n	8004aee <_printf_float+0x24a>
 8004cf2:	f04f 0800 	mov.w	r8, #0
 8004cf6:	f104 0919 	add.w	r9, r4, #25
 8004cfa:	e7f4      	b.n	8004ce6 <_printf_float+0x442>

08004cfc <_printf_common>:
 8004cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d00:	4616      	mov	r6, r2
 8004d02:	4698      	mov	r8, r3
 8004d04:	688a      	ldr	r2, [r1, #8]
 8004d06:	690b      	ldr	r3, [r1, #16]
 8004d08:	4607      	mov	r7, r0
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	bfb8      	it	lt
 8004d0e:	4613      	movlt	r3, r2
 8004d10:	6033      	str	r3, [r6, #0]
 8004d12:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d16:	460c      	mov	r4, r1
 8004d18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d1c:	b10a      	cbz	r2, 8004d22 <_printf_common+0x26>
 8004d1e:	3301      	adds	r3, #1
 8004d20:	6033      	str	r3, [r6, #0]
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	0699      	lsls	r1, r3, #26
 8004d26:	bf42      	ittt	mi
 8004d28:	6833      	ldrmi	r3, [r6, #0]
 8004d2a:	3302      	addmi	r3, #2
 8004d2c:	6033      	strmi	r3, [r6, #0]
 8004d2e:	6825      	ldr	r5, [r4, #0]
 8004d30:	f015 0506 	ands.w	r5, r5, #6
 8004d34:	d106      	bne.n	8004d44 <_printf_common+0x48>
 8004d36:	f104 0a19 	add.w	sl, r4, #25
 8004d3a:	68e3      	ldr	r3, [r4, #12]
 8004d3c:	6832      	ldr	r2, [r6, #0]
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	42ab      	cmp	r3, r5
 8004d42:	dc2b      	bgt.n	8004d9c <_printf_common+0xa0>
 8004d44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d48:	6822      	ldr	r2, [r4, #0]
 8004d4a:	3b00      	subs	r3, #0
 8004d4c:	bf18      	it	ne
 8004d4e:	2301      	movne	r3, #1
 8004d50:	0692      	lsls	r2, r2, #26
 8004d52:	d430      	bmi.n	8004db6 <_printf_common+0xba>
 8004d54:	4641      	mov	r1, r8
 8004d56:	4638      	mov	r0, r7
 8004d58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d5c:	47c8      	blx	r9
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d023      	beq.n	8004daa <_printf_common+0xae>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	6922      	ldr	r2, [r4, #16]
 8004d66:	f003 0306 	and.w	r3, r3, #6
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	bf14      	ite	ne
 8004d6e:	2500      	movne	r5, #0
 8004d70:	6833      	ldreq	r3, [r6, #0]
 8004d72:	f04f 0600 	mov.w	r6, #0
 8004d76:	bf08      	it	eq
 8004d78:	68e5      	ldreq	r5, [r4, #12]
 8004d7a:	f104 041a 	add.w	r4, r4, #26
 8004d7e:	bf08      	it	eq
 8004d80:	1aed      	subeq	r5, r5, r3
 8004d82:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004d86:	bf08      	it	eq
 8004d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	bfc4      	itt	gt
 8004d90:	1a9b      	subgt	r3, r3, r2
 8004d92:	18ed      	addgt	r5, r5, r3
 8004d94:	42b5      	cmp	r5, r6
 8004d96:	d11a      	bne.n	8004dce <_printf_common+0xd2>
 8004d98:	2000      	movs	r0, #0
 8004d9a:	e008      	b.n	8004dae <_printf_common+0xb2>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4652      	mov	r2, sl
 8004da0:	4641      	mov	r1, r8
 8004da2:	4638      	mov	r0, r7
 8004da4:	47c8      	blx	r9
 8004da6:	3001      	adds	r0, #1
 8004da8:	d103      	bne.n	8004db2 <_printf_common+0xb6>
 8004daa:	f04f 30ff 	mov.w	r0, #4294967295
 8004dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db2:	3501      	adds	r5, #1
 8004db4:	e7c1      	b.n	8004d3a <_printf_common+0x3e>
 8004db6:	2030      	movs	r0, #48	@ 0x30
 8004db8:	18e1      	adds	r1, r4, r3
 8004dba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dc4:	4422      	add	r2, r4
 8004dc6:	3302      	adds	r3, #2
 8004dc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004dcc:	e7c2      	b.n	8004d54 <_printf_common+0x58>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	47c8      	blx	r9
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d0e6      	beq.n	8004daa <_printf_common+0xae>
 8004ddc:	3601      	adds	r6, #1
 8004dde:	e7d9      	b.n	8004d94 <_printf_common+0x98>

08004de0 <_printf_i>:
 8004de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	7e0f      	ldrb	r7, [r1, #24]
 8004de6:	4691      	mov	r9, r2
 8004de8:	2f78      	cmp	r7, #120	@ 0x78
 8004dea:	4680      	mov	r8, r0
 8004dec:	460c      	mov	r4, r1
 8004dee:	469a      	mov	sl, r3
 8004df0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004df2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004df6:	d807      	bhi.n	8004e08 <_printf_i+0x28>
 8004df8:	2f62      	cmp	r7, #98	@ 0x62
 8004dfa:	d80a      	bhi.n	8004e12 <_printf_i+0x32>
 8004dfc:	2f00      	cmp	r7, #0
 8004dfe:	f000 80d1 	beq.w	8004fa4 <_printf_i+0x1c4>
 8004e02:	2f58      	cmp	r7, #88	@ 0x58
 8004e04:	f000 80b8 	beq.w	8004f78 <_printf_i+0x198>
 8004e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e10:	e03a      	b.n	8004e88 <_printf_i+0xa8>
 8004e12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e16:	2b15      	cmp	r3, #21
 8004e18:	d8f6      	bhi.n	8004e08 <_printf_i+0x28>
 8004e1a:	a101      	add	r1, pc, #4	@ (adr r1, 8004e20 <_printf_i+0x40>)
 8004e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e20:	08004e79 	.word	0x08004e79
 8004e24:	08004e8d 	.word	0x08004e8d
 8004e28:	08004e09 	.word	0x08004e09
 8004e2c:	08004e09 	.word	0x08004e09
 8004e30:	08004e09 	.word	0x08004e09
 8004e34:	08004e09 	.word	0x08004e09
 8004e38:	08004e8d 	.word	0x08004e8d
 8004e3c:	08004e09 	.word	0x08004e09
 8004e40:	08004e09 	.word	0x08004e09
 8004e44:	08004e09 	.word	0x08004e09
 8004e48:	08004e09 	.word	0x08004e09
 8004e4c:	08004f8b 	.word	0x08004f8b
 8004e50:	08004eb7 	.word	0x08004eb7
 8004e54:	08004f45 	.word	0x08004f45
 8004e58:	08004e09 	.word	0x08004e09
 8004e5c:	08004e09 	.word	0x08004e09
 8004e60:	08004fad 	.word	0x08004fad
 8004e64:	08004e09 	.word	0x08004e09
 8004e68:	08004eb7 	.word	0x08004eb7
 8004e6c:	08004e09 	.word	0x08004e09
 8004e70:	08004e09 	.word	0x08004e09
 8004e74:	08004f4d 	.word	0x08004f4d
 8004e78:	6833      	ldr	r3, [r6, #0]
 8004e7a:	1d1a      	adds	r2, r3, #4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6032      	str	r2, [r6, #0]
 8004e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e09c      	b.n	8004fc6 <_printf_i+0x1e6>
 8004e8c:	6833      	ldr	r3, [r6, #0]
 8004e8e:	6820      	ldr	r0, [r4, #0]
 8004e90:	1d19      	adds	r1, r3, #4
 8004e92:	6031      	str	r1, [r6, #0]
 8004e94:	0606      	lsls	r6, r0, #24
 8004e96:	d501      	bpl.n	8004e9c <_printf_i+0xbc>
 8004e98:	681d      	ldr	r5, [r3, #0]
 8004e9a:	e003      	b.n	8004ea4 <_printf_i+0xc4>
 8004e9c:	0645      	lsls	r5, r0, #25
 8004e9e:	d5fb      	bpl.n	8004e98 <_printf_i+0xb8>
 8004ea0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ea4:	2d00      	cmp	r5, #0
 8004ea6:	da03      	bge.n	8004eb0 <_printf_i+0xd0>
 8004ea8:	232d      	movs	r3, #45	@ 0x2d
 8004eaa:	426d      	negs	r5, r5
 8004eac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eb0:	230a      	movs	r3, #10
 8004eb2:	4858      	ldr	r0, [pc, #352]	@ (8005014 <_printf_i+0x234>)
 8004eb4:	e011      	b.n	8004eda <_printf_i+0xfa>
 8004eb6:	6821      	ldr	r1, [r4, #0]
 8004eb8:	6833      	ldr	r3, [r6, #0]
 8004eba:	0608      	lsls	r0, r1, #24
 8004ebc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ec0:	d402      	bmi.n	8004ec8 <_printf_i+0xe8>
 8004ec2:	0649      	lsls	r1, r1, #25
 8004ec4:	bf48      	it	mi
 8004ec6:	b2ad      	uxthmi	r5, r5
 8004ec8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004eca:	6033      	str	r3, [r6, #0]
 8004ecc:	bf14      	ite	ne
 8004ece:	230a      	movne	r3, #10
 8004ed0:	2308      	moveq	r3, #8
 8004ed2:	4850      	ldr	r0, [pc, #320]	@ (8005014 <_printf_i+0x234>)
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004eda:	6866      	ldr	r6, [r4, #4]
 8004edc:	2e00      	cmp	r6, #0
 8004ede:	60a6      	str	r6, [r4, #8]
 8004ee0:	db05      	blt.n	8004eee <_printf_i+0x10e>
 8004ee2:	6821      	ldr	r1, [r4, #0]
 8004ee4:	432e      	orrs	r6, r5
 8004ee6:	f021 0104 	bic.w	r1, r1, #4
 8004eea:	6021      	str	r1, [r4, #0]
 8004eec:	d04b      	beq.n	8004f86 <_printf_i+0x1a6>
 8004eee:	4616      	mov	r6, r2
 8004ef0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ef4:	fb03 5711 	mls	r7, r3, r1, r5
 8004ef8:	5dc7      	ldrb	r7, [r0, r7]
 8004efa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004efe:	462f      	mov	r7, r5
 8004f00:	42bb      	cmp	r3, r7
 8004f02:	460d      	mov	r5, r1
 8004f04:	d9f4      	bls.n	8004ef0 <_printf_i+0x110>
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d10b      	bne.n	8004f22 <_printf_i+0x142>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	07df      	lsls	r7, r3, #31
 8004f0e:	d508      	bpl.n	8004f22 <_printf_i+0x142>
 8004f10:	6923      	ldr	r3, [r4, #16]
 8004f12:	6861      	ldr	r1, [r4, #4]
 8004f14:	4299      	cmp	r1, r3
 8004f16:	bfde      	ittt	le
 8004f18:	2330      	movle	r3, #48	@ 0x30
 8004f1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f22:	1b92      	subs	r2, r2, r6
 8004f24:	6122      	str	r2, [r4, #16]
 8004f26:	464b      	mov	r3, r9
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	f8cd a000 	str.w	sl, [sp]
 8004f30:	aa03      	add	r2, sp, #12
 8004f32:	f7ff fee3 	bl	8004cfc <_printf_common>
 8004f36:	3001      	adds	r0, #1
 8004f38:	d14a      	bne.n	8004fd0 <_printf_i+0x1f0>
 8004f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3e:	b004      	add	sp, #16
 8004f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	f043 0320 	orr.w	r3, r3, #32
 8004f4a:	6023      	str	r3, [r4, #0]
 8004f4c:	2778      	movs	r7, #120	@ 0x78
 8004f4e:	4832      	ldr	r0, [pc, #200]	@ (8005018 <_printf_i+0x238>)
 8004f50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	6831      	ldr	r1, [r6, #0]
 8004f58:	061f      	lsls	r7, r3, #24
 8004f5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f5e:	d402      	bmi.n	8004f66 <_printf_i+0x186>
 8004f60:	065f      	lsls	r7, r3, #25
 8004f62:	bf48      	it	mi
 8004f64:	b2ad      	uxthmi	r5, r5
 8004f66:	6031      	str	r1, [r6, #0]
 8004f68:	07d9      	lsls	r1, r3, #31
 8004f6a:	bf44      	itt	mi
 8004f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8004f70:	6023      	strmi	r3, [r4, #0]
 8004f72:	b11d      	cbz	r5, 8004f7c <_printf_i+0x19c>
 8004f74:	2310      	movs	r3, #16
 8004f76:	e7ad      	b.n	8004ed4 <_printf_i+0xf4>
 8004f78:	4826      	ldr	r0, [pc, #152]	@ (8005014 <_printf_i+0x234>)
 8004f7a:	e7e9      	b.n	8004f50 <_printf_i+0x170>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	f023 0320 	bic.w	r3, r3, #32
 8004f82:	6023      	str	r3, [r4, #0]
 8004f84:	e7f6      	b.n	8004f74 <_printf_i+0x194>
 8004f86:	4616      	mov	r6, r2
 8004f88:	e7bd      	b.n	8004f06 <_printf_i+0x126>
 8004f8a:	6833      	ldr	r3, [r6, #0]
 8004f8c:	6825      	ldr	r5, [r4, #0]
 8004f8e:	1d18      	adds	r0, r3, #4
 8004f90:	6961      	ldr	r1, [r4, #20]
 8004f92:	6030      	str	r0, [r6, #0]
 8004f94:	062e      	lsls	r6, r5, #24
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	d501      	bpl.n	8004f9e <_printf_i+0x1be>
 8004f9a:	6019      	str	r1, [r3, #0]
 8004f9c:	e002      	b.n	8004fa4 <_printf_i+0x1c4>
 8004f9e:	0668      	lsls	r0, r5, #25
 8004fa0:	d5fb      	bpl.n	8004f9a <_printf_i+0x1ba>
 8004fa2:	8019      	strh	r1, [r3, #0]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4616      	mov	r6, r2
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	e7bc      	b.n	8004f26 <_printf_i+0x146>
 8004fac:	6833      	ldr	r3, [r6, #0]
 8004fae:	2100      	movs	r1, #0
 8004fb0:	1d1a      	adds	r2, r3, #4
 8004fb2:	6032      	str	r2, [r6, #0]
 8004fb4:	681e      	ldr	r6, [r3, #0]
 8004fb6:	6862      	ldr	r2, [r4, #4]
 8004fb8:	4630      	mov	r0, r6
 8004fba:	f000 f9b4 	bl	8005326 <memchr>
 8004fbe:	b108      	cbz	r0, 8004fc4 <_printf_i+0x1e4>
 8004fc0:	1b80      	subs	r0, r0, r6
 8004fc2:	6060      	str	r0, [r4, #4]
 8004fc4:	6863      	ldr	r3, [r4, #4]
 8004fc6:	6123      	str	r3, [r4, #16]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fce:	e7aa      	b.n	8004f26 <_printf_i+0x146>
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	6923      	ldr	r3, [r4, #16]
 8004fd8:	47d0      	blx	sl
 8004fda:	3001      	adds	r0, #1
 8004fdc:	d0ad      	beq.n	8004f3a <_printf_i+0x15a>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	079b      	lsls	r3, r3, #30
 8004fe2:	d413      	bmi.n	800500c <_printf_i+0x22c>
 8004fe4:	68e0      	ldr	r0, [r4, #12]
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	4298      	cmp	r0, r3
 8004fea:	bfb8      	it	lt
 8004fec:	4618      	movlt	r0, r3
 8004fee:	e7a6      	b.n	8004f3e <_printf_i+0x15e>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	4632      	mov	r2, r6
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	47d0      	blx	sl
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	d09d      	beq.n	8004f3a <_printf_i+0x15a>
 8004ffe:	3501      	adds	r5, #1
 8005000:	68e3      	ldr	r3, [r4, #12]
 8005002:	9903      	ldr	r1, [sp, #12]
 8005004:	1a5b      	subs	r3, r3, r1
 8005006:	42ab      	cmp	r3, r5
 8005008:	dcf2      	bgt.n	8004ff0 <_printf_i+0x210>
 800500a:	e7eb      	b.n	8004fe4 <_printf_i+0x204>
 800500c:	2500      	movs	r5, #0
 800500e:	f104 0619 	add.w	r6, r4, #25
 8005012:	e7f5      	b.n	8005000 <_printf_i+0x220>
 8005014:	080070dc 	.word	0x080070dc
 8005018:	080070ed 	.word	0x080070ed

0800501c <std>:
 800501c:	2300      	movs	r3, #0
 800501e:	b510      	push	{r4, lr}
 8005020:	4604      	mov	r4, r0
 8005022:	e9c0 3300 	strd	r3, r3, [r0]
 8005026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800502a:	6083      	str	r3, [r0, #8]
 800502c:	8181      	strh	r1, [r0, #12]
 800502e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005030:	81c2      	strh	r2, [r0, #14]
 8005032:	6183      	str	r3, [r0, #24]
 8005034:	4619      	mov	r1, r3
 8005036:	2208      	movs	r2, #8
 8005038:	305c      	adds	r0, #92	@ 0x5c
 800503a:	f000 f8f4 	bl	8005226 <memset>
 800503e:	4b0d      	ldr	r3, [pc, #52]	@ (8005074 <std+0x58>)
 8005040:	6224      	str	r4, [r4, #32]
 8005042:	6263      	str	r3, [r4, #36]	@ 0x24
 8005044:	4b0c      	ldr	r3, [pc, #48]	@ (8005078 <std+0x5c>)
 8005046:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005048:	4b0c      	ldr	r3, [pc, #48]	@ (800507c <std+0x60>)
 800504a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800504c:	4b0c      	ldr	r3, [pc, #48]	@ (8005080 <std+0x64>)
 800504e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005050:	4b0c      	ldr	r3, [pc, #48]	@ (8005084 <std+0x68>)
 8005052:	429c      	cmp	r4, r3
 8005054:	d006      	beq.n	8005064 <std+0x48>
 8005056:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800505a:	4294      	cmp	r4, r2
 800505c:	d002      	beq.n	8005064 <std+0x48>
 800505e:	33d0      	adds	r3, #208	@ 0xd0
 8005060:	429c      	cmp	r4, r3
 8005062:	d105      	bne.n	8005070 <std+0x54>
 8005064:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800506c:	f000 b958 	b.w	8005320 <__retarget_lock_init_recursive>
 8005070:	bd10      	pop	{r4, pc}
 8005072:	bf00      	nop
 8005074:	080051a1 	.word	0x080051a1
 8005078:	080051c3 	.word	0x080051c3
 800507c:	080051fb 	.word	0x080051fb
 8005080:	0800521f 	.word	0x0800521f
 8005084:	20000598 	.word	0x20000598

08005088 <stdio_exit_handler>:
 8005088:	4a02      	ldr	r2, [pc, #8]	@ (8005094 <stdio_exit_handler+0xc>)
 800508a:	4903      	ldr	r1, [pc, #12]	@ (8005098 <stdio_exit_handler+0x10>)
 800508c:	4803      	ldr	r0, [pc, #12]	@ (800509c <stdio_exit_handler+0x14>)
 800508e:	f000 b869 	b.w	8005164 <_fwalk_sglue>
 8005092:	bf00      	nop
 8005094:	2000000c 	.word	0x2000000c
 8005098:	080069f1 	.word	0x080069f1
 800509c:	2000001c 	.word	0x2000001c

080050a0 <cleanup_stdio>:
 80050a0:	6841      	ldr	r1, [r0, #4]
 80050a2:	4b0c      	ldr	r3, [pc, #48]	@ (80050d4 <cleanup_stdio+0x34>)
 80050a4:	b510      	push	{r4, lr}
 80050a6:	4299      	cmp	r1, r3
 80050a8:	4604      	mov	r4, r0
 80050aa:	d001      	beq.n	80050b0 <cleanup_stdio+0x10>
 80050ac:	f001 fca0 	bl	80069f0 <_fflush_r>
 80050b0:	68a1      	ldr	r1, [r4, #8]
 80050b2:	4b09      	ldr	r3, [pc, #36]	@ (80050d8 <cleanup_stdio+0x38>)
 80050b4:	4299      	cmp	r1, r3
 80050b6:	d002      	beq.n	80050be <cleanup_stdio+0x1e>
 80050b8:	4620      	mov	r0, r4
 80050ba:	f001 fc99 	bl	80069f0 <_fflush_r>
 80050be:	68e1      	ldr	r1, [r4, #12]
 80050c0:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <cleanup_stdio+0x3c>)
 80050c2:	4299      	cmp	r1, r3
 80050c4:	d004      	beq.n	80050d0 <cleanup_stdio+0x30>
 80050c6:	4620      	mov	r0, r4
 80050c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050cc:	f001 bc90 	b.w	80069f0 <_fflush_r>
 80050d0:	bd10      	pop	{r4, pc}
 80050d2:	bf00      	nop
 80050d4:	20000598 	.word	0x20000598
 80050d8:	20000600 	.word	0x20000600
 80050dc:	20000668 	.word	0x20000668

080050e0 <global_stdio_init.part.0>:
 80050e0:	b510      	push	{r4, lr}
 80050e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <global_stdio_init.part.0+0x30>)
 80050e4:	4c0b      	ldr	r4, [pc, #44]	@ (8005114 <global_stdio_init.part.0+0x34>)
 80050e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005118 <global_stdio_init.part.0+0x38>)
 80050e8:	4620      	mov	r0, r4
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	2104      	movs	r1, #4
 80050ee:	2200      	movs	r2, #0
 80050f0:	f7ff ff94 	bl	800501c <std>
 80050f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050f8:	2201      	movs	r2, #1
 80050fa:	2109      	movs	r1, #9
 80050fc:	f7ff ff8e 	bl	800501c <std>
 8005100:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005104:	2202      	movs	r2, #2
 8005106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800510a:	2112      	movs	r1, #18
 800510c:	f7ff bf86 	b.w	800501c <std>
 8005110:	200006d0 	.word	0x200006d0
 8005114:	20000598 	.word	0x20000598
 8005118:	08005089 	.word	0x08005089

0800511c <__sfp_lock_acquire>:
 800511c:	4801      	ldr	r0, [pc, #4]	@ (8005124 <__sfp_lock_acquire+0x8>)
 800511e:	f000 b900 	b.w	8005322 <__retarget_lock_acquire_recursive>
 8005122:	bf00      	nop
 8005124:	200006d9 	.word	0x200006d9

08005128 <__sfp_lock_release>:
 8005128:	4801      	ldr	r0, [pc, #4]	@ (8005130 <__sfp_lock_release+0x8>)
 800512a:	f000 b8fb 	b.w	8005324 <__retarget_lock_release_recursive>
 800512e:	bf00      	nop
 8005130:	200006d9 	.word	0x200006d9

08005134 <__sinit>:
 8005134:	b510      	push	{r4, lr}
 8005136:	4604      	mov	r4, r0
 8005138:	f7ff fff0 	bl	800511c <__sfp_lock_acquire>
 800513c:	6a23      	ldr	r3, [r4, #32]
 800513e:	b11b      	cbz	r3, 8005148 <__sinit+0x14>
 8005140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005144:	f7ff bff0 	b.w	8005128 <__sfp_lock_release>
 8005148:	4b04      	ldr	r3, [pc, #16]	@ (800515c <__sinit+0x28>)
 800514a:	6223      	str	r3, [r4, #32]
 800514c:	4b04      	ldr	r3, [pc, #16]	@ (8005160 <__sinit+0x2c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f5      	bne.n	8005140 <__sinit+0xc>
 8005154:	f7ff ffc4 	bl	80050e0 <global_stdio_init.part.0>
 8005158:	e7f2      	b.n	8005140 <__sinit+0xc>
 800515a:	bf00      	nop
 800515c:	080050a1 	.word	0x080050a1
 8005160:	200006d0 	.word	0x200006d0

08005164 <_fwalk_sglue>:
 8005164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005168:	4607      	mov	r7, r0
 800516a:	4688      	mov	r8, r1
 800516c:	4614      	mov	r4, r2
 800516e:	2600      	movs	r6, #0
 8005170:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005174:	f1b9 0901 	subs.w	r9, r9, #1
 8005178:	d505      	bpl.n	8005186 <_fwalk_sglue+0x22>
 800517a:	6824      	ldr	r4, [r4, #0]
 800517c:	2c00      	cmp	r4, #0
 800517e:	d1f7      	bne.n	8005170 <_fwalk_sglue+0xc>
 8005180:	4630      	mov	r0, r6
 8005182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005186:	89ab      	ldrh	r3, [r5, #12]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d907      	bls.n	800519c <_fwalk_sglue+0x38>
 800518c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005190:	3301      	adds	r3, #1
 8005192:	d003      	beq.n	800519c <_fwalk_sglue+0x38>
 8005194:	4629      	mov	r1, r5
 8005196:	4638      	mov	r0, r7
 8005198:	47c0      	blx	r8
 800519a:	4306      	orrs	r6, r0
 800519c:	3568      	adds	r5, #104	@ 0x68
 800519e:	e7e9      	b.n	8005174 <_fwalk_sglue+0x10>

080051a0 <__sread>:
 80051a0:	b510      	push	{r4, lr}
 80051a2:	460c      	mov	r4, r1
 80051a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a8:	f000 f86c 	bl	8005284 <_read_r>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	bfab      	itete	ge
 80051b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80051b2:	89a3      	ldrhlt	r3, [r4, #12]
 80051b4:	181b      	addge	r3, r3, r0
 80051b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051ba:	bfac      	ite	ge
 80051bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80051be:	81a3      	strhlt	r3, [r4, #12]
 80051c0:	bd10      	pop	{r4, pc}

080051c2 <__swrite>:
 80051c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c6:	461f      	mov	r7, r3
 80051c8:	898b      	ldrh	r3, [r1, #12]
 80051ca:	4605      	mov	r5, r0
 80051cc:	05db      	lsls	r3, r3, #23
 80051ce:	460c      	mov	r4, r1
 80051d0:	4616      	mov	r6, r2
 80051d2:	d505      	bpl.n	80051e0 <__swrite+0x1e>
 80051d4:	2302      	movs	r3, #2
 80051d6:	2200      	movs	r2, #0
 80051d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051dc:	f000 f840 	bl	8005260 <_lseek_r>
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	4632      	mov	r2, r6
 80051e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	4628      	mov	r0, r5
 80051ec:	463b      	mov	r3, r7
 80051ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051f6:	f000 b857 	b.w	80052a8 <_write_r>

080051fa <__sseek>:
 80051fa:	b510      	push	{r4, lr}
 80051fc:	460c      	mov	r4, r1
 80051fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005202:	f000 f82d 	bl	8005260 <_lseek_r>
 8005206:	1c43      	adds	r3, r0, #1
 8005208:	89a3      	ldrh	r3, [r4, #12]
 800520a:	bf15      	itete	ne
 800520c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800520e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005212:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005216:	81a3      	strheq	r3, [r4, #12]
 8005218:	bf18      	it	ne
 800521a:	81a3      	strhne	r3, [r4, #12]
 800521c:	bd10      	pop	{r4, pc}

0800521e <__sclose>:
 800521e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005222:	f000 b80d 	b.w	8005240 <_close_r>

08005226 <memset>:
 8005226:	4603      	mov	r3, r0
 8005228:	4402      	add	r2, r0
 800522a:	4293      	cmp	r3, r2
 800522c:	d100      	bne.n	8005230 <memset+0xa>
 800522e:	4770      	bx	lr
 8005230:	f803 1b01 	strb.w	r1, [r3], #1
 8005234:	e7f9      	b.n	800522a <memset+0x4>
	...

08005238 <_localeconv_r>:
 8005238:	4800      	ldr	r0, [pc, #0]	@ (800523c <_localeconv_r+0x4>)
 800523a:	4770      	bx	lr
 800523c:	20000158 	.word	0x20000158

08005240 <_close_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	2300      	movs	r3, #0
 8005244:	4d05      	ldr	r5, [pc, #20]	@ (800525c <_close_r+0x1c>)
 8005246:	4604      	mov	r4, r0
 8005248:	4608      	mov	r0, r1
 800524a:	602b      	str	r3, [r5, #0]
 800524c:	f7fc fea9 	bl	8001fa2 <_close>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d102      	bne.n	800525a <_close_r+0x1a>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	b103      	cbz	r3, 800525a <_close_r+0x1a>
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	200006d4 	.word	0x200006d4

08005260 <_lseek_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4604      	mov	r4, r0
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	2200      	movs	r2, #0
 800526a:	4d05      	ldr	r5, [pc, #20]	@ (8005280 <_lseek_r+0x20>)
 800526c:	602a      	str	r2, [r5, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	f7fc febb 	bl	8001fea <_lseek>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d102      	bne.n	800527e <_lseek_r+0x1e>
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	b103      	cbz	r3, 800527e <_lseek_r+0x1e>
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	bd38      	pop	{r3, r4, r5, pc}
 8005280:	200006d4 	.word	0x200006d4

08005284 <_read_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4604      	mov	r4, r0
 8005288:	4608      	mov	r0, r1
 800528a:	4611      	mov	r1, r2
 800528c:	2200      	movs	r2, #0
 800528e:	4d05      	ldr	r5, [pc, #20]	@ (80052a4 <_read_r+0x20>)
 8005290:	602a      	str	r2, [r5, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	f7fc fe4c 	bl	8001f30 <_read>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d102      	bne.n	80052a2 <_read_r+0x1e>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	b103      	cbz	r3, 80052a2 <_read_r+0x1e>
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	200006d4 	.word	0x200006d4

080052a8 <_write_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4604      	mov	r4, r0
 80052ac:	4608      	mov	r0, r1
 80052ae:	4611      	mov	r1, r2
 80052b0:	2200      	movs	r2, #0
 80052b2:	4d05      	ldr	r5, [pc, #20]	@ (80052c8 <_write_r+0x20>)
 80052b4:	602a      	str	r2, [r5, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f7fc fe57 	bl	8001f6a <_write>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_write_r+0x1e>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_write_r+0x1e>
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	200006d4 	.word	0x200006d4

080052cc <__errno>:
 80052cc:	4b01      	ldr	r3, [pc, #4]	@ (80052d4 <__errno+0x8>)
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000018 	.word	0x20000018

080052d8 <__libc_init_array>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	2600      	movs	r6, #0
 80052dc:	4d0c      	ldr	r5, [pc, #48]	@ (8005310 <__libc_init_array+0x38>)
 80052de:	4c0d      	ldr	r4, [pc, #52]	@ (8005314 <__libc_init_array+0x3c>)
 80052e0:	1b64      	subs	r4, r4, r5
 80052e2:	10a4      	asrs	r4, r4, #2
 80052e4:	42a6      	cmp	r6, r4
 80052e6:	d109      	bne.n	80052fc <__libc_init_array+0x24>
 80052e8:	f001 fece 	bl	8007088 <_init>
 80052ec:	2600      	movs	r6, #0
 80052ee:	4d0a      	ldr	r5, [pc, #40]	@ (8005318 <__libc_init_array+0x40>)
 80052f0:	4c0a      	ldr	r4, [pc, #40]	@ (800531c <__libc_init_array+0x44>)
 80052f2:	1b64      	subs	r4, r4, r5
 80052f4:	10a4      	asrs	r4, r4, #2
 80052f6:	42a6      	cmp	r6, r4
 80052f8:	d105      	bne.n	8005306 <__libc_init_array+0x2e>
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005300:	4798      	blx	r3
 8005302:	3601      	adds	r6, #1
 8005304:	e7ee      	b.n	80052e4 <__libc_init_array+0xc>
 8005306:	f855 3b04 	ldr.w	r3, [r5], #4
 800530a:	4798      	blx	r3
 800530c:	3601      	adds	r6, #1
 800530e:	e7f2      	b.n	80052f6 <__libc_init_array+0x1e>
 8005310:	08007444 	.word	0x08007444
 8005314:	08007444 	.word	0x08007444
 8005318:	08007444 	.word	0x08007444
 800531c:	08007448 	.word	0x08007448

08005320 <__retarget_lock_init_recursive>:
 8005320:	4770      	bx	lr

08005322 <__retarget_lock_acquire_recursive>:
 8005322:	4770      	bx	lr

08005324 <__retarget_lock_release_recursive>:
 8005324:	4770      	bx	lr

08005326 <memchr>:
 8005326:	4603      	mov	r3, r0
 8005328:	b510      	push	{r4, lr}
 800532a:	b2c9      	uxtb	r1, r1
 800532c:	4402      	add	r2, r0
 800532e:	4293      	cmp	r3, r2
 8005330:	4618      	mov	r0, r3
 8005332:	d101      	bne.n	8005338 <memchr+0x12>
 8005334:	2000      	movs	r0, #0
 8005336:	e003      	b.n	8005340 <memchr+0x1a>
 8005338:	7804      	ldrb	r4, [r0, #0]
 800533a:	3301      	adds	r3, #1
 800533c:	428c      	cmp	r4, r1
 800533e:	d1f6      	bne.n	800532e <memchr+0x8>
 8005340:	bd10      	pop	{r4, pc}

08005342 <quorem>:
 8005342:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005346:	6903      	ldr	r3, [r0, #16]
 8005348:	690c      	ldr	r4, [r1, #16]
 800534a:	4607      	mov	r7, r0
 800534c:	42a3      	cmp	r3, r4
 800534e:	db7e      	blt.n	800544e <quorem+0x10c>
 8005350:	3c01      	subs	r4, #1
 8005352:	00a3      	lsls	r3, r4, #2
 8005354:	f100 0514 	add.w	r5, r0, #20
 8005358:	f101 0814 	add.w	r8, r1, #20
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005368:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800536c:	3301      	adds	r3, #1
 800536e:	429a      	cmp	r2, r3
 8005370:	fbb2 f6f3 	udiv	r6, r2, r3
 8005374:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005378:	d32e      	bcc.n	80053d8 <quorem+0x96>
 800537a:	f04f 0a00 	mov.w	sl, #0
 800537e:	46c4      	mov	ip, r8
 8005380:	46ae      	mov	lr, r5
 8005382:	46d3      	mov	fp, sl
 8005384:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005388:	b298      	uxth	r0, r3
 800538a:	fb06 a000 	mla	r0, r6, r0, sl
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	0c02      	lsrs	r2, r0, #16
 8005392:	fb06 2303 	mla	r3, r6, r3, r2
 8005396:	f8de 2000 	ldr.w	r2, [lr]
 800539a:	b280      	uxth	r0, r0
 800539c:	b292      	uxth	r2, r2
 800539e:	1a12      	subs	r2, r2, r0
 80053a0:	445a      	add	r2, fp
 80053a2:	f8de 0000 	ldr.w	r0, [lr]
 80053a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80053b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80053b4:	b292      	uxth	r2, r2
 80053b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80053ba:	45e1      	cmp	r9, ip
 80053bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80053c0:	f84e 2b04 	str.w	r2, [lr], #4
 80053c4:	d2de      	bcs.n	8005384 <quorem+0x42>
 80053c6:	9b00      	ldr	r3, [sp, #0]
 80053c8:	58eb      	ldr	r3, [r5, r3]
 80053ca:	b92b      	cbnz	r3, 80053d8 <quorem+0x96>
 80053cc:	9b01      	ldr	r3, [sp, #4]
 80053ce:	3b04      	subs	r3, #4
 80053d0:	429d      	cmp	r5, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	d32f      	bcc.n	8005436 <quorem+0xf4>
 80053d6:	613c      	str	r4, [r7, #16]
 80053d8:	4638      	mov	r0, r7
 80053da:	f001 f981 	bl	80066e0 <__mcmp>
 80053de:	2800      	cmp	r0, #0
 80053e0:	db25      	blt.n	800542e <quorem+0xec>
 80053e2:	4629      	mov	r1, r5
 80053e4:	2000      	movs	r0, #0
 80053e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80053ea:	f8d1 c000 	ldr.w	ip, [r1]
 80053ee:	fa1f fe82 	uxth.w	lr, r2
 80053f2:	fa1f f38c 	uxth.w	r3, ip
 80053f6:	eba3 030e 	sub.w	r3, r3, lr
 80053fa:	4403      	add	r3, r0
 80053fc:	0c12      	lsrs	r2, r2, #16
 80053fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005402:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005406:	b29b      	uxth	r3, r3
 8005408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800540c:	45c1      	cmp	r9, r8
 800540e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005412:	f841 3b04 	str.w	r3, [r1], #4
 8005416:	d2e6      	bcs.n	80053e6 <quorem+0xa4>
 8005418:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800541c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005420:	b922      	cbnz	r2, 800542c <quorem+0xea>
 8005422:	3b04      	subs	r3, #4
 8005424:	429d      	cmp	r5, r3
 8005426:	461a      	mov	r2, r3
 8005428:	d30b      	bcc.n	8005442 <quorem+0x100>
 800542a:	613c      	str	r4, [r7, #16]
 800542c:	3601      	adds	r6, #1
 800542e:	4630      	mov	r0, r6
 8005430:	b003      	add	sp, #12
 8005432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	3b04      	subs	r3, #4
 800543a:	2a00      	cmp	r2, #0
 800543c:	d1cb      	bne.n	80053d6 <quorem+0x94>
 800543e:	3c01      	subs	r4, #1
 8005440:	e7c6      	b.n	80053d0 <quorem+0x8e>
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	3b04      	subs	r3, #4
 8005446:	2a00      	cmp	r2, #0
 8005448:	d1ef      	bne.n	800542a <quorem+0xe8>
 800544a:	3c01      	subs	r4, #1
 800544c:	e7ea      	b.n	8005424 <quorem+0xe2>
 800544e:	2000      	movs	r0, #0
 8005450:	e7ee      	b.n	8005430 <quorem+0xee>
 8005452:	0000      	movs	r0, r0
 8005454:	0000      	movs	r0, r0
	...

08005458 <_dtoa_r>:
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545c:	4614      	mov	r4, r2
 800545e:	461d      	mov	r5, r3
 8005460:	69c7      	ldr	r7, [r0, #28]
 8005462:	b097      	sub	sp, #92	@ 0x5c
 8005464:	4681      	mov	r9, r0
 8005466:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800546a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800546c:	b97f      	cbnz	r7, 800548e <_dtoa_r+0x36>
 800546e:	2010      	movs	r0, #16
 8005470:	f000 fe0e 	bl	8006090 <malloc>
 8005474:	4602      	mov	r2, r0
 8005476:	f8c9 001c 	str.w	r0, [r9, #28]
 800547a:	b920      	cbnz	r0, 8005486 <_dtoa_r+0x2e>
 800547c:	21ef      	movs	r1, #239	@ 0xef
 800547e:	4bac      	ldr	r3, [pc, #688]	@ (8005730 <_dtoa_r+0x2d8>)
 8005480:	48ac      	ldr	r0, [pc, #688]	@ (8005734 <_dtoa_r+0x2dc>)
 8005482:	f001 fafb 	bl	8006a7c <__assert_func>
 8005486:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800548a:	6007      	str	r7, [r0, #0]
 800548c:	60c7      	str	r7, [r0, #12]
 800548e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005492:	6819      	ldr	r1, [r3, #0]
 8005494:	b159      	cbz	r1, 80054ae <_dtoa_r+0x56>
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	2301      	movs	r3, #1
 800549a:	4093      	lsls	r3, r2
 800549c:	604a      	str	r2, [r1, #4]
 800549e:	608b      	str	r3, [r1, #8]
 80054a0:	4648      	mov	r0, r9
 80054a2:	f000 feeb 	bl	800627c <_Bfree>
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	1e2b      	subs	r3, r5, #0
 80054b0:	bfaf      	iteee	ge
 80054b2:	2300      	movge	r3, #0
 80054b4:	2201      	movlt	r2, #1
 80054b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80054ba:	9307      	strlt	r3, [sp, #28]
 80054bc:	bfa8      	it	ge
 80054be:	6033      	strge	r3, [r6, #0]
 80054c0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80054c4:	4b9c      	ldr	r3, [pc, #624]	@ (8005738 <_dtoa_r+0x2e0>)
 80054c6:	bfb8      	it	lt
 80054c8:	6032      	strlt	r2, [r6, #0]
 80054ca:	ea33 0308 	bics.w	r3, r3, r8
 80054ce:	d112      	bne.n	80054f6 <_dtoa_r+0x9e>
 80054d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80054d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80054dc:	4323      	orrs	r3, r4
 80054de:	f000 855e 	beq.w	8005f9e <_dtoa_r+0xb46>
 80054e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80054e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800573c <_dtoa_r+0x2e4>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8560 	beq.w	8005fae <_dtoa_r+0xb56>
 80054ee:	f10a 0303 	add.w	r3, sl, #3
 80054f2:	f000 bd5a 	b.w	8005faa <_dtoa_r+0xb52>
 80054f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80054fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005502:	2200      	movs	r2, #0
 8005504:	2300      	movs	r3, #0
 8005506:	f7fb fa4f 	bl	80009a8 <__aeabi_dcmpeq>
 800550a:	4607      	mov	r7, r0
 800550c:	b158      	cbz	r0, 8005526 <_dtoa_r+0xce>
 800550e:	2301      	movs	r3, #1
 8005510:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005516:	b113      	cbz	r3, 800551e <_dtoa_r+0xc6>
 8005518:	4b89      	ldr	r3, [pc, #548]	@ (8005740 <_dtoa_r+0x2e8>)
 800551a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005744 <_dtoa_r+0x2ec>
 8005522:	f000 bd44 	b.w	8005fae <_dtoa_r+0xb56>
 8005526:	ab14      	add	r3, sp, #80	@ 0x50
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	ab15      	add	r3, sp, #84	@ 0x54
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	4648      	mov	r0, r9
 8005530:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005534:	f001 f984 	bl	8006840 <__d2b>
 8005538:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800553c:	9003      	str	r0, [sp, #12]
 800553e:	2e00      	cmp	r6, #0
 8005540:	d078      	beq.n	8005634 <_dtoa_r+0x1dc>
 8005542:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005546:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005548:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800554c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005550:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005554:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005558:	9712      	str	r7, [sp, #72]	@ 0x48
 800555a:	4619      	mov	r1, r3
 800555c:	2200      	movs	r2, #0
 800555e:	4b7a      	ldr	r3, [pc, #488]	@ (8005748 <_dtoa_r+0x2f0>)
 8005560:	f7fa fe02 	bl	8000168 <__aeabi_dsub>
 8005564:	a36c      	add	r3, pc, #432	@ (adr r3, 8005718 <_dtoa_r+0x2c0>)
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	f7fa ffb5 	bl	80004d8 <__aeabi_dmul>
 800556e:	a36c      	add	r3, pc, #432	@ (adr r3, 8005720 <_dtoa_r+0x2c8>)
 8005570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005574:	f7fa fdfa 	bl	800016c <__adddf3>
 8005578:	4604      	mov	r4, r0
 800557a:	4630      	mov	r0, r6
 800557c:	460d      	mov	r5, r1
 800557e:	f7fa ff41 	bl	8000404 <__aeabi_i2d>
 8005582:	a369      	add	r3, pc, #420	@ (adr r3, 8005728 <_dtoa_r+0x2d0>)
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f7fa ffa6 	bl	80004d8 <__aeabi_dmul>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4620      	mov	r0, r4
 8005592:	4629      	mov	r1, r5
 8005594:	f7fa fdea 	bl	800016c <__adddf3>
 8005598:	4604      	mov	r4, r0
 800559a:	460d      	mov	r5, r1
 800559c:	f7fb fa4c 	bl	8000a38 <__aeabi_d2iz>
 80055a0:	2200      	movs	r2, #0
 80055a2:	4607      	mov	r7, r0
 80055a4:	2300      	movs	r3, #0
 80055a6:	4620      	mov	r0, r4
 80055a8:	4629      	mov	r1, r5
 80055aa:	f7fb fa07 	bl	80009bc <__aeabi_dcmplt>
 80055ae:	b140      	cbz	r0, 80055c2 <_dtoa_r+0x16a>
 80055b0:	4638      	mov	r0, r7
 80055b2:	f7fa ff27 	bl	8000404 <__aeabi_i2d>
 80055b6:	4622      	mov	r2, r4
 80055b8:	462b      	mov	r3, r5
 80055ba:	f7fb f9f5 	bl	80009a8 <__aeabi_dcmpeq>
 80055be:	b900      	cbnz	r0, 80055c2 <_dtoa_r+0x16a>
 80055c0:	3f01      	subs	r7, #1
 80055c2:	2f16      	cmp	r7, #22
 80055c4:	d854      	bhi.n	8005670 <_dtoa_r+0x218>
 80055c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80055ca:	4b60      	ldr	r3, [pc, #384]	@ (800574c <_dtoa_r+0x2f4>)
 80055cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f7fb f9f2 	bl	80009bc <__aeabi_dcmplt>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d04b      	beq.n	8005674 <_dtoa_r+0x21c>
 80055dc:	2300      	movs	r3, #0
 80055de:	3f01      	subs	r7, #1
 80055e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80055e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80055e4:	1b9b      	subs	r3, r3, r6
 80055e6:	1e5a      	subs	r2, r3, #1
 80055e8:	bf49      	itett	mi
 80055ea:	f1c3 0301 	rsbmi	r3, r3, #1
 80055ee:	2300      	movpl	r3, #0
 80055f0:	9304      	strmi	r3, [sp, #16]
 80055f2:	2300      	movmi	r3, #0
 80055f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80055f6:	bf54      	ite	pl
 80055f8:	9304      	strpl	r3, [sp, #16]
 80055fa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80055fc:	2f00      	cmp	r7, #0
 80055fe:	db3b      	blt.n	8005678 <_dtoa_r+0x220>
 8005600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005602:	970e      	str	r7, [sp, #56]	@ 0x38
 8005604:	443b      	add	r3, r7
 8005606:	9309      	str	r3, [sp, #36]	@ 0x24
 8005608:	2300      	movs	r3, #0
 800560a:	930a      	str	r3, [sp, #40]	@ 0x28
 800560c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800560e:	2b09      	cmp	r3, #9
 8005610:	d865      	bhi.n	80056de <_dtoa_r+0x286>
 8005612:	2b05      	cmp	r3, #5
 8005614:	bfc4      	itt	gt
 8005616:	3b04      	subgt	r3, #4
 8005618:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800561a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800561c:	bfc8      	it	gt
 800561e:	2400      	movgt	r4, #0
 8005620:	f1a3 0302 	sub.w	r3, r3, #2
 8005624:	bfd8      	it	le
 8005626:	2401      	movle	r4, #1
 8005628:	2b03      	cmp	r3, #3
 800562a:	d864      	bhi.n	80056f6 <_dtoa_r+0x29e>
 800562c:	e8df f003 	tbb	[pc, r3]
 8005630:	2c385553 	.word	0x2c385553
 8005634:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005638:	441e      	add	r6, r3
 800563a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800563e:	2b20      	cmp	r3, #32
 8005640:	bfc1      	itttt	gt
 8005642:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005646:	fa08 f803 	lslgt.w	r8, r8, r3
 800564a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800564e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005652:	bfd6      	itet	le
 8005654:	f1c3 0320 	rsble	r3, r3, #32
 8005658:	ea48 0003 	orrgt.w	r0, r8, r3
 800565c:	fa04 f003 	lslle.w	r0, r4, r3
 8005660:	f7fa fec0 	bl	80003e4 <__aeabi_ui2d>
 8005664:	2201      	movs	r2, #1
 8005666:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800566a:	3e01      	subs	r6, #1
 800566c:	9212      	str	r2, [sp, #72]	@ 0x48
 800566e:	e774      	b.n	800555a <_dtoa_r+0x102>
 8005670:	2301      	movs	r3, #1
 8005672:	e7b5      	b.n	80055e0 <_dtoa_r+0x188>
 8005674:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005676:	e7b4      	b.n	80055e2 <_dtoa_r+0x18a>
 8005678:	9b04      	ldr	r3, [sp, #16]
 800567a:	1bdb      	subs	r3, r3, r7
 800567c:	9304      	str	r3, [sp, #16]
 800567e:	427b      	negs	r3, r7
 8005680:	930a      	str	r3, [sp, #40]	@ 0x28
 8005682:	2300      	movs	r3, #0
 8005684:	930e      	str	r3, [sp, #56]	@ 0x38
 8005686:	e7c1      	b.n	800560c <_dtoa_r+0x1b4>
 8005688:	2301      	movs	r3, #1
 800568a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800568c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800568e:	eb07 0b03 	add.w	fp, r7, r3
 8005692:	f10b 0301 	add.w	r3, fp, #1
 8005696:	2b01      	cmp	r3, #1
 8005698:	9308      	str	r3, [sp, #32]
 800569a:	bfb8      	it	lt
 800569c:	2301      	movlt	r3, #1
 800569e:	e006      	b.n	80056ae <_dtoa_r+0x256>
 80056a0:	2301      	movs	r3, #1
 80056a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	dd28      	ble.n	80056fc <_dtoa_r+0x2a4>
 80056aa:	469b      	mov	fp, r3
 80056ac:	9308      	str	r3, [sp, #32]
 80056ae:	2100      	movs	r1, #0
 80056b0:	2204      	movs	r2, #4
 80056b2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80056b6:	f102 0514 	add.w	r5, r2, #20
 80056ba:	429d      	cmp	r5, r3
 80056bc:	d926      	bls.n	800570c <_dtoa_r+0x2b4>
 80056be:	6041      	str	r1, [r0, #4]
 80056c0:	4648      	mov	r0, r9
 80056c2:	f000 fd9b 	bl	80061fc <_Balloc>
 80056c6:	4682      	mov	sl, r0
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d143      	bne.n	8005754 <_dtoa_r+0x2fc>
 80056cc:	4602      	mov	r2, r0
 80056ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80056d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005750 <_dtoa_r+0x2f8>)
 80056d4:	e6d4      	b.n	8005480 <_dtoa_r+0x28>
 80056d6:	2300      	movs	r3, #0
 80056d8:	e7e3      	b.n	80056a2 <_dtoa_r+0x24a>
 80056da:	2300      	movs	r3, #0
 80056dc:	e7d5      	b.n	800568a <_dtoa_r+0x232>
 80056de:	2401      	movs	r4, #1
 80056e0:	2300      	movs	r3, #0
 80056e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80056e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80056e6:	f04f 3bff 	mov.w	fp, #4294967295
 80056ea:	2200      	movs	r2, #0
 80056ec:	2312      	movs	r3, #18
 80056ee:	f8cd b020 	str.w	fp, [sp, #32]
 80056f2:	9221      	str	r2, [sp, #132]	@ 0x84
 80056f4:	e7db      	b.n	80056ae <_dtoa_r+0x256>
 80056f6:	2301      	movs	r3, #1
 80056f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056fa:	e7f4      	b.n	80056e6 <_dtoa_r+0x28e>
 80056fc:	f04f 0b01 	mov.w	fp, #1
 8005700:	465b      	mov	r3, fp
 8005702:	f8cd b020 	str.w	fp, [sp, #32]
 8005706:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800570a:	e7d0      	b.n	80056ae <_dtoa_r+0x256>
 800570c:	3101      	adds	r1, #1
 800570e:	0052      	lsls	r2, r2, #1
 8005710:	e7d1      	b.n	80056b6 <_dtoa_r+0x25e>
 8005712:	bf00      	nop
 8005714:	f3af 8000 	nop.w
 8005718:	636f4361 	.word	0x636f4361
 800571c:	3fd287a7 	.word	0x3fd287a7
 8005720:	8b60c8b3 	.word	0x8b60c8b3
 8005724:	3fc68a28 	.word	0x3fc68a28
 8005728:	509f79fb 	.word	0x509f79fb
 800572c:	3fd34413 	.word	0x3fd34413
 8005730:	0800710b 	.word	0x0800710b
 8005734:	08007122 	.word	0x08007122
 8005738:	7ff00000 	.word	0x7ff00000
 800573c:	08007107 	.word	0x08007107
 8005740:	080070db 	.word	0x080070db
 8005744:	080070da 	.word	0x080070da
 8005748:	3ff80000 	.word	0x3ff80000
 800574c:	08007270 	.word	0x08007270
 8005750:	0800717a 	.word	0x0800717a
 8005754:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005758:	6018      	str	r0, [r3, #0]
 800575a:	9b08      	ldr	r3, [sp, #32]
 800575c:	2b0e      	cmp	r3, #14
 800575e:	f200 80a1 	bhi.w	80058a4 <_dtoa_r+0x44c>
 8005762:	2c00      	cmp	r4, #0
 8005764:	f000 809e 	beq.w	80058a4 <_dtoa_r+0x44c>
 8005768:	2f00      	cmp	r7, #0
 800576a:	dd33      	ble.n	80057d4 <_dtoa_r+0x37c>
 800576c:	4b9c      	ldr	r3, [pc, #624]	@ (80059e0 <_dtoa_r+0x588>)
 800576e:	f007 020f 	and.w	r2, r7, #15
 8005772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005776:	05f8      	lsls	r0, r7, #23
 8005778:	e9d3 3400 	ldrd	r3, r4, [r3]
 800577c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005780:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005784:	d516      	bpl.n	80057b4 <_dtoa_r+0x35c>
 8005786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800578a:	4b96      	ldr	r3, [pc, #600]	@ (80059e4 <_dtoa_r+0x58c>)
 800578c:	2603      	movs	r6, #3
 800578e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005792:	f7fa ffcb 	bl	800072c <__aeabi_ddiv>
 8005796:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800579a:	f004 040f 	and.w	r4, r4, #15
 800579e:	4d91      	ldr	r5, [pc, #580]	@ (80059e4 <_dtoa_r+0x58c>)
 80057a0:	b954      	cbnz	r4, 80057b8 <_dtoa_r+0x360>
 80057a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80057a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057aa:	f7fa ffbf 	bl	800072c <__aeabi_ddiv>
 80057ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057b2:	e028      	b.n	8005806 <_dtoa_r+0x3ae>
 80057b4:	2602      	movs	r6, #2
 80057b6:	e7f2      	b.n	800579e <_dtoa_r+0x346>
 80057b8:	07e1      	lsls	r1, r4, #31
 80057ba:	d508      	bpl.n	80057ce <_dtoa_r+0x376>
 80057bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80057c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80057c4:	f7fa fe88 	bl	80004d8 <__aeabi_dmul>
 80057c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80057cc:	3601      	adds	r6, #1
 80057ce:	1064      	asrs	r4, r4, #1
 80057d0:	3508      	adds	r5, #8
 80057d2:	e7e5      	b.n	80057a0 <_dtoa_r+0x348>
 80057d4:	f000 80af 	beq.w	8005936 <_dtoa_r+0x4de>
 80057d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057dc:	427c      	negs	r4, r7
 80057de:	4b80      	ldr	r3, [pc, #512]	@ (80059e0 <_dtoa_r+0x588>)
 80057e0:	f004 020f 	and.w	r2, r4, #15
 80057e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	f7fa fe74 	bl	80004d8 <__aeabi_dmul>
 80057f0:	2602      	movs	r6, #2
 80057f2:	2300      	movs	r3, #0
 80057f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057f8:	4d7a      	ldr	r5, [pc, #488]	@ (80059e4 <_dtoa_r+0x58c>)
 80057fa:	1124      	asrs	r4, r4, #4
 80057fc:	2c00      	cmp	r4, #0
 80057fe:	f040 808f 	bne.w	8005920 <_dtoa_r+0x4c8>
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1d3      	bne.n	80057ae <_dtoa_r+0x356>
 8005806:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800580a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 8094 	beq.w	800593a <_dtoa_r+0x4e2>
 8005812:	2200      	movs	r2, #0
 8005814:	4620      	mov	r0, r4
 8005816:	4629      	mov	r1, r5
 8005818:	4b73      	ldr	r3, [pc, #460]	@ (80059e8 <_dtoa_r+0x590>)
 800581a:	f7fb f8cf 	bl	80009bc <__aeabi_dcmplt>
 800581e:	2800      	cmp	r0, #0
 8005820:	f000 808b 	beq.w	800593a <_dtoa_r+0x4e2>
 8005824:	9b08      	ldr	r3, [sp, #32]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 8087 	beq.w	800593a <_dtoa_r+0x4e2>
 800582c:	f1bb 0f00 	cmp.w	fp, #0
 8005830:	dd34      	ble.n	800589c <_dtoa_r+0x444>
 8005832:	4620      	mov	r0, r4
 8005834:	2200      	movs	r2, #0
 8005836:	4629      	mov	r1, r5
 8005838:	4b6c      	ldr	r3, [pc, #432]	@ (80059ec <_dtoa_r+0x594>)
 800583a:	f7fa fe4d 	bl	80004d8 <__aeabi_dmul>
 800583e:	465c      	mov	r4, fp
 8005840:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005844:	f107 38ff 	add.w	r8, r7, #4294967295
 8005848:	3601      	adds	r6, #1
 800584a:	4630      	mov	r0, r6
 800584c:	f7fa fdda 	bl	8000404 <__aeabi_i2d>
 8005850:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005854:	f7fa fe40 	bl	80004d8 <__aeabi_dmul>
 8005858:	2200      	movs	r2, #0
 800585a:	4b65      	ldr	r3, [pc, #404]	@ (80059f0 <_dtoa_r+0x598>)
 800585c:	f7fa fc86 	bl	800016c <__adddf3>
 8005860:	4605      	mov	r5, r0
 8005862:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005866:	2c00      	cmp	r4, #0
 8005868:	d16a      	bne.n	8005940 <_dtoa_r+0x4e8>
 800586a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800586e:	2200      	movs	r2, #0
 8005870:	4b60      	ldr	r3, [pc, #384]	@ (80059f4 <_dtoa_r+0x59c>)
 8005872:	f7fa fc79 	bl	8000168 <__aeabi_dsub>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800587e:	462a      	mov	r2, r5
 8005880:	4633      	mov	r3, r6
 8005882:	f7fb f8b9 	bl	80009f8 <__aeabi_dcmpgt>
 8005886:	2800      	cmp	r0, #0
 8005888:	f040 8298 	bne.w	8005dbc <_dtoa_r+0x964>
 800588c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005890:	462a      	mov	r2, r5
 8005892:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005896:	f7fb f891 	bl	80009bc <__aeabi_dcmplt>
 800589a:	bb38      	cbnz	r0, 80058ec <_dtoa_r+0x494>
 800589c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80058a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80058a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f2c0 8157 	blt.w	8005b5a <_dtoa_r+0x702>
 80058ac:	2f0e      	cmp	r7, #14
 80058ae:	f300 8154 	bgt.w	8005b5a <_dtoa_r+0x702>
 80058b2:	4b4b      	ldr	r3, [pc, #300]	@ (80059e0 <_dtoa_r+0x588>)
 80058b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80058c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f280 80e5 	bge.w	8005a92 <_dtoa_r+0x63a>
 80058c8:	9b08      	ldr	r3, [sp, #32]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f300 80e1 	bgt.w	8005a92 <_dtoa_r+0x63a>
 80058d0:	d10c      	bne.n	80058ec <_dtoa_r+0x494>
 80058d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d6:	2200      	movs	r2, #0
 80058d8:	4b46      	ldr	r3, [pc, #280]	@ (80059f4 <_dtoa_r+0x59c>)
 80058da:	f7fa fdfd 	bl	80004d8 <__aeabi_dmul>
 80058de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058e2:	f7fb f87f 	bl	80009e4 <__aeabi_dcmpge>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	f000 8266 	beq.w	8005db8 <_dtoa_r+0x960>
 80058ec:	2400      	movs	r4, #0
 80058ee:	4625      	mov	r5, r4
 80058f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058f2:	4656      	mov	r6, sl
 80058f4:	ea6f 0803 	mvn.w	r8, r3
 80058f8:	2700      	movs	r7, #0
 80058fa:	4621      	mov	r1, r4
 80058fc:	4648      	mov	r0, r9
 80058fe:	f000 fcbd 	bl	800627c <_Bfree>
 8005902:	2d00      	cmp	r5, #0
 8005904:	f000 80bd 	beq.w	8005a82 <_dtoa_r+0x62a>
 8005908:	b12f      	cbz	r7, 8005916 <_dtoa_r+0x4be>
 800590a:	42af      	cmp	r7, r5
 800590c:	d003      	beq.n	8005916 <_dtoa_r+0x4be>
 800590e:	4639      	mov	r1, r7
 8005910:	4648      	mov	r0, r9
 8005912:	f000 fcb3 	bl	800627c <_Bfree>
 8005916:	4629      	mov	r1, r5
 8005918:	4648      	mov	r0, r9
 800591a:	f000 fcaf 	bl	800627c <_Bfree>
 800591e:	e0b0      	b.n	8005a82 <_dtoa_r+0x62a>
 8005920:	07e2      	lsls	r2, r4, #31
 8005922:	d505      	bpl.n	8005930 <_dtoa_r+0x4d8>
 8005924:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005928:	f7fa fdd6 	bl	80004d8 <__aeabi_dmul>
 800592c:	2301      	movs	r3, #1
 800592e:	3601      	adds	r6, #1
 8005930:	1064      	asrs	r4, r4, #1
 8005932:	3508      	adds	r5, #8
 8005934:	e762      	b.n	80057fc <_dtoa_r+0x3a4>
 8005936:	2602      	movs	r6, #2
 8005938:	e765      	b.n	8005806 <_dtoa_r+0x3ae>
 800593a:	46b8      	mov	r8, r7
 800593c:	9c08      	ldr	r4, [sp, #32]
 800593e:	e784      	b.n	800584a <_dtoa_r+0x3f2>
 8005940:	4b27      	ldr	r3, [pc, #156]	@ (80059e0 <_dtoa_r+0x588>)
 8005942:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005944:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005948:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800594c:	4454      	add	r4, sl
 800594e:	2900      	cmp	r1, #0
 8005950:	d054      	beq.n	80059fc <_dtoa_r+0x5a4>
 8005952:	2000      	movs	r0, #0
 8005954:	4928      	ldr	r1, [pc, #160]	@ (80059f8 <_dtoa_r+0x5a0>)
 8005956:	f7fa fee9 	bl	800072c <__aeabi_ddiv>
 800595a:	4633      	mov	r3, r6
 800595c:	462a      	mov	r2, r5
 800595e:	f7fa fc03 	bl	8000168 <__aeabi_dsub>
 8005962:	4656      	mov	r6, sl
 8005964:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005968:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800596c:	f7fb f864 	bl	8000a38 <__aeabi_d2iz>
 8005970:	4605      	mov	r5, r0
 8005972:	f7fa fd47 	bl	8000404 <__aeabi_i2d>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800597e:	f7fa fbf3 	bl	8000168 <__aeabi_dsub>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	3530      	adds	r5, #48	@ 0x30
 8005988:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800598c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005990:	f806 5b01 	strb.w	r5, [r6], #1
 8005994:	f7fb f812 	bl	80009bc <__aeabi_dcmplt>
 8005998:	2800      	cmp	r0, #0
 800599a:	d172      	bne.n	8005a82 <_dtoa_r+0x62a>
 800599c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059a0:	2000      	movs	r0, #0
 80059a2:	4911      	ldr	r1, [pc, #68]	@ (80059e8 <_dtoa_r+0x590>)
 80059a4:	f7fa fbe0 	bl	8000168 <__aeabi_dsub>
 80059a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059ac:	f7fb f806 	bl	80009bc <__aeabi_dcmplt>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	f040 80b4 	bne.w	8005b1e <_dtoa_r+0x6c6>
 80059b6:	42a6      	cmp	r6, r4
 80059b8:	f43f af70 	beq.w	800589c <_dtoa_r+0x444>
 80059bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80059c0:	2200      	movs	r2, #0
 80059c2:	4b0a      	ldr	r3, [pc, #40]	@ (80059ec <_dtoa_r+0x594>)
 80059c4:	f7fa fd88 	bl	80004d8 <__aeabi_dmul>
 80059c8:	2200      	movs	r2, #0
 80059ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059d2:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <_dtoa_r+0x594>)
 80059d4:	f7fa fd80 	bl	80004d8 <__aeabi_dmul>
 80059d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059dc:	e7c4      	b.n	8005968 <_dtoa_r+0x510>
 80059de:	bf00      	nop
 80059e0:	08007270 	.word	0x08007270
 80059e4:	08007248 	.word	0x08007248
 80059e8:	3ff00000 	.word	0x3ff00000
 80059ec:	40240000 	.word	0x40240000
 80059f0:	401c0000 	.word	0x401c0000
 80059f4:	40140000 	.word	0x40140000
 80059f8:	3fe00000 	.word	0x3fe00000
 80059fc:	4631      	mov	r1, r6
 80059fe:	4628      	mov	r0, r5
 8005a00:	f7fa fd6a 	bl	80004d8 <__aeabi_dmul>
 8005a04:	4656      	mov	r6, sl
 8005a06:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005a0a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005a0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a10:	f7fb f812 	bl	8000a38 <__aeabi_d2iz>
 8005a14:	4605      	mov	r5, r0
 8005a16:	f7fa fcf5 	bl	8000404 <__aeabi_i2d>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a22:	f7fa fba1 	bl	8000168 <__aeabi_dsub>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	3530      	adds	r5, #48	@ 0x30
 8005a2c:	f806 5b01 	strb.w	r5, [r6], #1
 8005a30:	42a6      	cmp	r6, r4
 8005a32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	d124      	bne.n	8005a86 <_dtoa_r+0x62e>
 8005a3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005a40:	4bae      	ldr	r3, [pc, #696]	@ (8005cfc <_dtoa_r+0x8a4>)
 8005a42:	f7fa fb93 	bl	800016c <__adddf3>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a4e:	f7fa ffd3 	bl	80009f8 <__aeabi_dcmpgt>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d163      	bne.n	8005b1e <_dtoa_r+0x6c6>
 8005a56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	49a7      	ldr	r1, [pc, #668]	@ (8005cfc <_dtoa_r+0x8a4>)
 8005a5e:	f7fa fb83 	bl	8000168 <__aeabi_dsub>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a6a:	f7fa ffa7 	bl	80009bc <__aeabi_dcmplt>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	f43f af14 	beq.w	800589c <_dtoa_r+0x444>
 8005a74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005a76:	1e73      	subs	r3, r6, #1
 8005a78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a7e:	2b30      	cmp	r3, #48	@ 0x30
 8005a80:	d0f8      	beq.n	8005a74 <_dtoa_r+0x61c>
 8005a82:	4647      	mov	r7, r8
 8005a84:	e03b      	b.n	8005afe <_dtoa_r+0x6a6>
 8005a86:	4b9e      	ldr	r3, [pc, #632]	@ (8005d00 <_dtoa_r+0x8a8>)
 8005a88:	f7fa fd26 	bl	80004d8 <__aeabi_dmul>
 8005a8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a90:	e7bc      	b.n	8005a0c <_dtoa_r+0x5b4>
 8005a92:	4656      	mov	r6, sl
 8005a94:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	f7fa fe44 	bl	800072c <__aeabi_ddiv>
 8005aa4:	f7fa ffc8 	bl	8000a38 <__aeabi_d2iz>
 8005aa8:	4680      	mov	r8, r0
 8005aaa:	f7fa fcab 	bl	8000404 <__aeabi_i2d>
 8005aae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ab2:	f7fa fd11 	bl	80004d8 <__aeabi_dmul>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4620      	mov	r0, r4
 8005abc:	4629      	mov	r1, r5
 8005abe:	f7fa fb53 	bl	8000168 <__aeabi_dsub>
 8005ac2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005ac6:	9d08      	ldr	r5, [sp, #32]
 8005ac8:	f806 4b01 	strb.w	r4, [r6], #1
 8005acc:	eba6 040a 	sub.w	r4, r6, sl
 8005ad0:	42a5      	cmp	r5, r4
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	d133      	bne.n	8005b40 <_dtoa_r+0x6e8>
 8005ad8:	f7fa fb48 	bl	800016c <__adddf3>
 8005adc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	460d      	mov	r5, r1
 8005ae4:	f7fa ff88 	bl	80009f8 <__aeabi_dcmpgt>
 8005ae8:	b9c0      	cbnz	r0, 8005b1c <_dtoa_r+0x6c4>
 8005aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aee:	4620      	mov	r0, r4
 8005af0:	4629      	mov	r1, r5
 8005af2:	f7fa ff59 	bl	80009a8 <__aeabi_dcmpeq>
 8005af6:	b110      	cbz	r0, 8005afe <_dtoa_r+0x6a6>
 8005af8:	f018 0f01 	tst.w	r8, #1
 8005afc:	d10e      	bne.n	8005b1c <_dtoa_r+0x6c4>
 8005afe:	4648      	mov	r0, r9
 8005b00:	9903      	ldr	r1, [sp, #12]
 8005b02:	f000 fbbb 	bl	800627c <_Bfree>
 8005b06:	2300      	movs	r3, #0
 8005b08:	7033      	strb	r3, [r6, #0]
 8005b0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005b0c:	3701      	adds	r7, #1
 8005b0e:	601f      	str	r7, [r3, #0]
 8005b10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 824b 	beq.w	8005fae <_dtoa_r+0xb56>
 8005b18:	601e      	str	r6, [r3, #0]
 8005b1a:	e248      	b.n	8005fae <_dtoa_r+0xb56>
 8005b1c:	46b8      	mov	r8, r7
 8005b1e:	4633      	mov	r3, r6
 8005b20:	461e      	mov	r6, r3
 8005b22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b26:	2a39      	cmp	r2, #57	@ 0x39
 8005b28:	d106      	bne.n	8005b38 <_dtoa_r+0x6e0>
 8005b2a:	459a      	cmp	sl, r3
 8005b2c:	d1f8      	bne.n	8005b20 <_dtoa_r+0x6c8>
 8005b2e:	2230      	movs	r2, #48	@ 0x30
 8005b30:	f108 0801 	add.w	r8, r8, #1
 8005b34:	f88a 2000 	strb.w	r2, [sl]
 8005b38:	781a      	ldrb	r2, [r3, #0]
 8005b3a:	3201      	adds	r2, #1
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e7a0      	b.n	8005a82 <_dtoa_r+0x62a>
 8005b40:	2200      	movs	r2, #0
 8005b42:	4b6f      	ldr	r3, [pc, #444]	@ (8005d00 <_dtoa_r+0x8a8>)
 8005b44:	f7fa fcc8 	bl	80004d8 <__aeabi_dmul>
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	460d      	mov	r5, r1
 8005b50:	f7fa ff2a 	bl	80009a8 <__aeabi_dcmpeq>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d09f      	beq.n	8005a98 <_dtoa_r+0x640>
 8005b58:	e7d1      	b.n	8005afe <_dtoa_r+0x6a6>
 8005b5a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005b5c:	2a00      	cmp	r2, #0
 8005b5e:	f000 80ea 	beq.w	8005d36 <_dtoa_r+0x8de>
 8005b62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b64:	2a01      	cmp	r2, #1
 8005b66:	f300 80cd 	bgt.w	8005d04 <_dtoa_r+0x8ac>
 8005b6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005b6c:	2a00      	cmp	r2, #0
 8005b6e:	f000 80c1 	beq.w	8005cf4 <_dtoa_r+0x89c>
 8005b72:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005b76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b78:	9e04      	ldr	r6, [sp, #16]
 8005b7a:	9a04      	ldr	r2, [sp, #16]
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	441a      	add	r2, r3
 8005b80:	9204      	str	r2, [sp, #16]
 8005b82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b84:	4648      	mov	r0, r9
 8005b86:	441a      	add	r2, r3
 8005b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b8a:	f000 fc2b 	bl	80063e4 <__i2b>
 8005b8e:	4605      	mov	r5, r0
 8005b90:	b166      	cbz	r6, 8005bac <_dtoa_r+0x754>
 8005b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	dd09      	ble.n	8005bac <_dtoa_r+0x754>
 8005b98:	42b3      	cmp	r3, r6
 8005b9a:	bfa8      	it	ge
 8005b9c:	4633      	movge	r3, r6
 8005b9e:	9a04      	ldr	r2, [sp, #16]
 8005ba0:	1af6      	subs	r6, r6, r3
 8005ba2:	1ad2      	subs	r2, r2, r3
 8005ba4:	9204      	str	r2, [sp, #16]
 8005ba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bae:	b30b      	cbz	r3, 8005bf4 <_dtoa_r+0x79c>
 8005bb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 80c6 	beq.w	8005d44 <_dtoa_r+0x8ec>
 8005bb8:	2c00      	cmp	r4, #0
 8005bba:	f000 80c0 	beq.w	8005d3e <_dtoa_r+0x8e6>
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	4648      	mov	r0, r9
 8005bc4:	f000 fcc6 	bl	8006554 <__pow5mult>
 8005bc8:	9a03      	ldr	r2, [sp, #12]
 8005bca:	4601      	mov	r1, r0
 8005bcc:	4605      	mov	r5, r0
 8005bce:	4648      	mov	r0, r9
 8005bd0:	f000 fc1e 	bl	8006410 <__multiply>
 8005bd4:	9903      	ldr	r1, [sp, #12]
 8005bd6:	4680      	mov	r8, r0
 8005bd8:	4648      	mov	r0, r9
 8005bda:	f000 fb4f 	bl	800627c <_Bfree>
 8005bde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005be0:	1b1b      	subs	r3, r3, r4
 8005be2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005be4:	f000 80b1 	beq.w	8005d4a <_dtoa_r+0x8f2>
 8005be8:	4641      	mov	r1, r8
 8005bea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bec:	4648      	mov	r0, r9
 8005bee:	f000 fcb1 	bl	8006554 <__pow5mult>
 8005bf2:	9003      	str	r0, [sp, #12]
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	4648      	mov	r0, r9
 8005bf8:	f000 fbf4 	bl	80063e4 <__i2b>
 8005bfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bfe:	4604      	mov	r4, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 81d8 	beq.w	8005fb6 <_dtoa_r+0xb5e>
 8005c06:	461a      	mov	r2, r3
 8005c08:	4601      	mov	r1, r0
 8005c0a:	4648      	mov	r0, r9
 8005c0c:	f000 fca2 	bl	8006554 <__pow5mult>
 8005c10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c12:	4604      	mov	r4, r0
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	f300 809f 	bgt.w	8005d58 <_dtoa_r+0x900>
 8005c1a:	9b06      	ldr	r3, [sp, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f040 8097 	bne.w	8005d50 <_dtoa_r+0x8f8>
 8005c22:	9b07      	ldr	r3, [sp, #28]
 8005c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f040 8093 	bne.w	8005d54 <_dtoa_r+0x8fc>
 8005c2e:	9b07      	ldr	r3, [sp, #28]
 8005c30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c34:	0d1b      	lsrs	r3, r3, #20
 8005c36:	051b      	lsls	r3, r3, #20
 8005c38:	b133      	cbz	r3, 8005c48 <_dtoa_r+0x7f0>
 8005c3a:	9b04      	ldr	r3, [sp, #16]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	9304      	str	r3, [sp, #16]
 8005c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c42:	3301      	adds	r3, #1
 8005c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c46:	2301      	movs	r3, #1
 8005c48:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 81b8 	beq.w	8005fc2 <_dtoa_r+0xb6a>
 8005c52:	6923      	ldr	r3, [r4, #16]
 8005c54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c58:	6918      	ldr	r0, [r3, #16]
 8005c5a:	f000 fb77 	bl	800634c <__hi0bits>
 8005c5e:	f1c0 0020 	rsb	r0, r0, #32
 8005c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c64:	4418      	add	r0, r3
 8005c66:	f010 001f 	ands.w	r0, r0, #31
 8005c6a:	f000 8082 	beq.w	8005d72 <_dtoa_r+0x91a>
 8005c6e:	f1c0 0320 	rsb	r3, r0, #32
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	dd73      	ble.n	8005d5e <_dtoa_r+0x906>
 8005c76:	9b04      	ldr	r3, [sp, #16]
 8005c78:	f1c0 001c 	rsb	r0, r0, #28
 8005c7c:	4403      	add	r3, r0
 8005c7e:	9304      	str	r3, [sp, #16]
 8005c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c82:	4406      	add	r6, r0
 8005c84:	4403      	add	r3, r0
 8005c86:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c88:	9b04      	ldr	r3, [sp, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	dd05      	ble.n	8005c9a <_dtoa_r+0x842>
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4648      	mov	r0, r9
 8005c92:	9903      	ldr	r1, [sp, #12]
 8005c94:	f000 fcb8 	bl	8006608 <__lshift>
 8005c98:	9003      	str	r0, [sp, #12]
 8005c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	dd05      	ble.n	8005cac <_dtoa_r+0x854>
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	4648      	mov	r0, r9
 8005ca6:	f000 fcaf 	bl	8006608 <__lshift>
 8005caa:	4604      	mov	r4, r0
 8005cac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d061      	beq.n	8005d76 <_dtoa_r+0x91e>
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	9803      	ldr	r0, [sp, #12]
 8005cb6:	f000 fd13 	bl	80066e0 <__mcmp>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	da5b      	bge.n	8005d76 <_dtoa_r+0x91e>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	220a      	movs	r2, #10
 8005cc2:	4648      	mov	r0, r9
 8005cc4:	9903      	ldr	r1, [sp, #12]
 8005cc6:	f000 fafb 	bl	80062c0 <__multadd>
 8005cca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ccc:	f107 38ff 	add.w	r8, r7, #4294967295
 8005cd0:	9003      	str	r0, [sp, #12]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8177 	beq.w	8005fc6 <_dtoa_r+0xb6e>
 8005cd8:	4629      	mov	r1, r5
 8005cda:	2300      	movs	r3, #0
 8005cdc:	220a      	movs	r2, #10
 8005cde:	4648      	mov	r0, r9
 8005ce0:	f000 faee 	bl	80062c0 <__multadd>
 8005ce4:	f1bb 0f00 	cmp.w	fp, #0
 8005ce8:	4605      	mov	r5, r0
 8005cea:	dc6f      	bgt.n	8005dcc <_dtoa_r+0x974>
 8005cec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	dc49      	bgt.n	8005d86 <_dtoa_r+0x92e>
 8005cf2:	e06b      	b.n	8005dcc <_dtoa_r+0x974>
 8005cf4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005cf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005cfa:	e73c      	b.n	8005b76 <_dtoa_r+0x71e>
 8005cfc:	3fe00000 	.word	0x3fe00000
 8005d00:	40240000 	.word	0x40240000
 8005d04:	9b08      	ldr	r3, [sp, #32]
 8005d06:	1e5c      	subs	r4, r3, #1
 8005d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d0a:	42a3      	cmp	r3, r4
 8005d0c:	db09      	blt.n	8005d22 <_dtoa_r+0x8ca>
 8005d0e:	1b1c      	subs	r4, r3, r4
 8005d10:	9b08      	ldr	r3, [sp, #32]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f6bf af30 	bge.w	8005b78 <_dtoa_r+0x720>
 8005d18:	9b04      	ldr	r3, [sp, #16]
 8005d1a:	9a08      	ldr	r2, [sp, #32]
 8005d1c:	1a9e      	subs	r6, r3, r2
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e72b      	b.n	8005b7a <_dtoa_r+0x722>
 8005d22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d26:	1ae3      	subs	r3, r4, r3
 8005d28:	441a      	add	r2, r3
 8005d2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8005d2c:	9e04      	ldr	r6, [sp, #16]
 8005d2e:	2400      	movs	r4, #0
 8005d30:	9b08      	ldr	r3, [sp, #32]
 8005d32:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d34:	e721      	b.n	8005b7a <_dtoa_r+0x722>
 8005d36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d38:	9e04      	ldr	r6, [sp, #16]
 8005d3a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005d3c:	e728      	b.n	8005b90 <_dtoa_r+0x738>
 8005d3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d42:	e751      	b.n	8005be8 <_dtoa_r+0x790>
 8005d44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d46:	9903      	ldr	r1, [sp, #12]
 8005d48:	e750      	b.n	8005bec <_dtoa_r+0x794>
 8005d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d4e:	e751      	b.n	8005bf4 <_dtoa_r+0x79c>
 8005d50:	2300      	movs	r3, #0
 8005d52:	e779      	b.n	8005c48 <_dtoa_r+0x7f0>
 8005d54:	9b06      	ldr	r3, [sp, #24]
 8005d56:	e777      	b.n	8005c48 <_dtoa_r+0x7f0>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d5c:	e779      	b.n	8005c52 <_dtoa_r+0x7fa>
 8005d5e:	d093      	beq.n	8005c88 <_dtoa_r+0x830>
 8005d60:	9a04      	ldr	r2, [sp, #16]
 8005d62:	331c      	adds	r3, #28
 8005d64:	441a      	add	r2, r3
 8005d66:	9204      	str	r2, [sp, #16]
 8005d68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d6a:	441e      	add	r6, r3
 8005d6c:	441a      	add	r2, r3
 8005d6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d70:	e78a      	b.n	8005c88 <_dtoa_r+0x830>
 8005d72:	4603      	mov	r3, r0
 8005d74:	e7f4      	b.n	8005d60 <_dtoa_r+0x908>
 8005d76:	9b08      	ldr	r3, [sp, #32]
 8005d78:	46b8      	mov	r8, r7
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	dc20      	bgt.n	8005dc0 <_dtoa_r+0x968>
 8005d7e:	469b      	mov	fp, r3
 8005d80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	dd1e      	ble.n	8005dc4 <_dtoa_r+0x96c>
 8005d86:	f1bb 0f00 	cmp.w	fp, #0
 8005d8a:	f47f adb1 	bne.w	80058f0 <_dtoa_r+0x498>
 8005d8e:	4621      	mov	r1, r4
 8005d90:	465b      	mov	r3, fp
 8005d92:	2205      	movs	r2, #5
 8005d94:	4648      	mov	r0, r9
 8005d96:	f000 fa93 	bl	80062c0 <__multadd>
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	9803      	ldr	r0, [sp, #12]
 8005da0:	f000 fc9e 	bl	80066e0 <__mcmp>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	f77f ada3 	ble.w	80058f0 <_dtoa_r+0x498>
 8005daa:	4656      	mov	r6, sl
 8005dac:	2331      	movs	r3, #49	@ 0x31
 8005dae:	f108 0801 	add.w	r8, r8, #1
 8005db2:	f806 3b01 	strb.w	r3, [r6], #1
 8005db6:	e59f      	b.n	80058f8 <_dtoa_r+0x4a0>
 8005db8:	46b8      	mov	r8, r7
 8005dba:	9c08      	ldr	r4, [sp, #32]
 8005dbc:	4625      	mov	r5, r4
 8005dbe:	e7f4      	b.n	8005daa <_dtoa_r+0x952>
 8005dc0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005dc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 8101 	beq.w	8005fce <_dtoa_r+0xb76>
 8005dcc:	2e00      	cmp	r6, #0
 8005dce:	dd05      	ble.n	8005ddc <_dtoa_r+0x984>
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	4632      	mov	r2, r6
 8005dd4:	4648      	mov	r0, r9
 8005dd6:	f000 fc17 	bl	8006608 <__lshift>
 8005dda:	4605      	mov	r5, r0
 8005ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d05c      	beq.n	8005e9c <_dtoa_r+0xa44>
 8005de2:	4648      	mov	r0, r9
 8005de4:	6869      	ldr	r1, [r5, #4]
 8005de6:	f000 fa09 	bl	80061fc <_Balloc>
 8005dea:	4606      	mov	r6, r0
 8005dec:	b928      	cbnz	r0, 8005dfa <_dtoa_r+0x9a2>
 8005dee:	4602      	mov	r2, r0
 8005df0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005df4:	4b80      	ldr	r3, [pc, #512]	@ (8005ff8 <_dtoa_r+0xba0>)
 8005df6:	f7ff bb43 	b.w	8005480 <_dtoa_r+0x28>
 8005dfa:	692a      	ldr	r2, [r5, #16]
 8005dfc:	f105 010c 	add.w	r1, r5, #12
 8005e00:	3202      	adds	r2, #2
 8005e02:	0092      	lsls	r2, r2, #2
 8005e04:	300c      	adds	r0, #12
 8005e06:	f000 fe2b 	bl	8006a60 <memcpy>
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4648      	mov	r0, r9
 8005e10:	f000 fbfa 	bl	8006608 <__lshift>
 8005e14:	462f      	mov	r7, r5
 8005e16:	4605      	mov	r5, r0
 8005e18:	f10a 0301 	add.w	r3, sl, #1
 8005e1c:	9304      	str	r3, [sp, #16]
 8005e1e:	eb0a 030b 	add.w	r3, sl, fp
 8005e22:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e24:	9b06      	ldr	r3, [sp, #24]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e2c:	9b04      	ldr	r3, [sp, #16]
 8005e2e:	4621      	mov	r1, r4
 8005e30:	9803      	ldr	r0, [sp, #12]
 8005e32:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e36:	f7ff fa84 	bl	8005342 <quorem>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	3330      	adds	r3, #48	@ 0x30
 8005e40:	9006      	str	r0, [sp, #24]
 8005e42:	9803      	ldr	r0, [sp, #12]
 8005e44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e46:	f000 fc4b 	bl	80066e0 <__mcmp>
 8005e4a:	462a      	mov	r2, r5
 8005e4c:	9008      	str	r0, [sp, #32]
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4648      	mov	r0, r9
 8005e52:	f000 fc61 	bl	8006718 <__mdiff>
 8005e56:	68c2      	ldr	r2, [r0, #12]
 8005e58:	4606      	mov	r6, r0
 8005e5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e5c:	bb02      	cbnz	r2, 8005ea0 <_dtoa_r+0xa48>
 8005e5e:	4601      	mov	r1, r0
 8005e60:	9803      	ldr	r0, [sp, #12]
 8005e62:	f000 fc3d 	bl	80066e0 <__mcmp>
 8005e66:	4602      	mov	r2, r0
 8005e68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4648      	mov	r0, r9
 8005e6e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005e72:	f000 fa03 	bl	800627c <_Bfree>
 8005e76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005e7a:	9e04      	ldr	r6, [sp, #16]
 8005e7c:	ea42 0103 	orr.w	r1, r2, r3
 8005e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e82:	4319      	orrs	r1, r3
 8005e84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e86:	d10d      	bne.n	8005ea4 <_dtoa_r+0xa4c>
 8005e88:	2b39      	cmp	r3, #57	@ 0x39
 8005e8a:	d027      	beq.n	8005edc <_dtoa_r+0xa84>
 8005e8c:	9a08      	ldr	r2, [sp, #32]
 8005e8e:	2a00      	cmp	r2, #0
 8005e90:	dd01      	ble.n	8005e96 <_dtoa_r+0xa3e>
 8005e92:	9b06      	ldr	r3, [sp, #24]
 8005e94:	3331      	adds	r3, #49	@ 0x31
 8005e96:	f88b 3000 	strb.w	r3, [fp]
 8005e9a:	e52e      	b.n	80058fa <_dtoa_r+0x4a2>
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	e7b9      	b.n	8005e14 <_dtoa_r+0x9bc>
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	e7e2      	b.n	8005e6a <_dtoa_r+0xa12>
 8005ea4:	9908      	ldr	r1, [sp, #32]
 8005ea6:	2900      	cmp	r1, #0
 8005ea8:	db04      	blt.n	8005eb4 <_dtoa_r+0xa5c>
 8005eaa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005eac:	4301      	orrs	r1, r0
 8005eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005eb0:	4301      	orrs	r1, r0
 8005eb2:	d120      	bne.n	8005ef6 <_dtoa_r+0xa9e>
 8005eb4:	2a00      	cmp	r2, #0
 8005eb6:	ddee      	ble.n	8005e96 <_dtoa_r+0xa3e>
 8005eb8:	2201      	movs	r2, #1
 8005eba:	9903      	ldr	r1, [sp, #12]
 8005ebc:	4648      	mov	r0, r9
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	f000 fba2 	bl	8006608 <__lshift>
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	9003      	str	r0, [sp, #12]
 8005ec8:	f000 fc0a 	bl	80066e0 <__mcmp>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	dc02      	bgt.n	8005ed8 <_dtoa_r+0xa80>
 8005ed2:	d1e0      	bne.n	8005e96 <_dtoa_r+0xa3e>
 8005ed4:	07da      	lsls	r2, r3, #31
 8005ed6:	d5de      	bpl.n	8005e96 <_dtoa_r+0xa3e>
 8005ed8:	2b39      	cmp	r3, #57	@ 0x39
 8005eda:	d1da      	bne.n	8005e92 <_dtoa_r+0xa3a>
 8005edc:	2339      	movs	r3, #57	@ 0x39
 8005ede:	f88b 3000 	strb.w	r3, [fp]
 8005ee2:	4633      	mov	r3, r6
 8005ee4:	461e      	mov	r6, r3
 8005ee6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	2a39      	cmp	r2, #57	@ 0x39
 8005eee:	d04e      	beq.n	8005f8e <_dtoa_r+0xb36>
 8005ef0:	3201      	adds	r2, #1
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	e501      	b.n	80058fa <_dtoa_r+0x4a2>
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	dd03      	ble.n	8005f02 <_dtoa_r+0xaaa>
 8005efa:	2b39      	cmp	r3, #57	@ 0x39
 8005efc:	d0ee      	beq.n	8005edc <_dtoa_r+0xa84>
 8005efe:	3301      	adds	r3, #1
 8005f00:	e7c9      	b.n	8005e96 <_dtoa_r+0xa3e>
 8005f02:	9a04      	ldr	r2, [sp, #16]
 8005f04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f0a:	428a      	cmp	r2, r1
 8005f0c:	d028      	beq.n	8005f60 <_dtoa_r+0xb08>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	220a      	movs	r2, #10
 8005f12:	9903      	ldr	r1, [sp, #12]
 8005f14:	4648      	mov	r0, r9
 8005f16:	f000 f9d3 	bl	80062c0 <__multadd>
 8005f1a:	42af      	cmp	r7, r5
 8005f1c:	9003      	str	r0, [sp, #12]
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	f04f 020a 	mov.w	r2, #10
 8005f26:	4639      	mov	r1, r7
 8005f28:	4648      	mov	r0, r9
 8005f2a:	d107      	bne.n	8005f3c <_dtoa_r+0xae4>
 8005f2c:	f000 f9c8 	bl	80062c0 <__multadd>
 8005f30:	4607      	mov	r7, r0
 8005f32:	4605      	mov	r5, r0
 8005f34:	9b04      	ldr	r3, [sp, #16]
 8005f36:	3301      	adds	r3, #1
 8005f38:	9304      	str	r3, [sp, #16]
 8005f3a:	e777      	b.n	8005e2c <_dtoa_r+0x9d4>
 8005f3c:	f000 f9c0 	bl	80062c0 <__multadd>
 8005f40:	4629      	mov	r1, r5
 8005f42:	4607      	mov	r7, r0
 8005f44:	2300      	movs	r3, #0
 8005f46:	220a      	movs	r2, #10
 8005f48:	4648      	mov	r0, r9
 8005f4a:	f000 f9b9 	bl	80062c0 <__multadd>
 8005f4e:	4605      	mov	r5, r0
 8005f50:	e7f0      	b.n	8005f34 <_dtoa_r+0xadc>
 8005f52:	f1bb 0f00 	cmp.w	fp, #0
 8005f56:	bfcc      	ite	gt
 8005f58:	465e      	movgt	r6, fp
 8005f5a:	2601      	movle	r6, #1
 8005f5c:	2700      	movs	r7, #0
 8005f5e:	4456      	add	r6, sl
 8005f60:	2201      	movs	r2, #1
 8005f62:	9903      	ldr	r1, [sp, #12]
 8005f64:	4648      	mov	r0, r9
 8005f66:	9304      	str	r3, [sp, #16]
 8005f68:	f000 fb4e 	bl	8006608 <__lshift>
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	9003      	str	r0, [sp, #12]
 8005f70:	f000 fbb6 	bl	80066e0 <__mcmp>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	dcb4      	bgt.n	8005ee2 <_dtoa_r+0xa8a>
 8005f78:	d102      	bne.n	8005f80 <_dtoa_r+0xb28>
 8005f7a:	9b04      	ldr	r3, [sp, #16]
 8005f7c:	07db      	lsls	r3, r3, #31
 8005f7e:	d4b0      	bmi.n	8005ee2 <_dtoa_r+0xa8a>
 8005f80:	4633      	mov	r3, r6
 8005f82:	461e      	mov	r6, r3
 8005f84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f88:	2a30      	cmp	r2, #48	@ 0x30
 8005f8a:	d0fa      	beq.n	8005f82 <_dtoa_r+0xb2a>
 8005f8c:	e4b5      	b.n	80058fa <_dtoa_r+0x4a2>
 8005f8e:	459a      	cmp	sl, r3
 8005f90:	d1a8      	bne.n	8005ee4 <_dtoa_r+0xa8c>
 8005f92:	2331      	movs	r3, #49	@ 0x31
 8005f94:	f108 0801 	add.w	r8, r8, #1
 8005f98:	f88a 3000 	strb.w	r3, [sl]
 8005f9c:	e4ad      	b.n	80058fa <_dtoa_r+0x4a2>
 8005f9e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005fa0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005ffc <_dtoa_r+0xba4>
 8005fa4:	b11b      	cbz	r3, 8005fae <_dtoa_r+0xb56>
 8005fa6:	f10a 0308 	add.w	r3, sl, #8
 8005faa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4650      	mov	r0, sl
 8005fb0:	b017      	add	sp, #92	@ 0x5c
 8005fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	f77f ae2e 	ble.w	8005c1a <_dtoa_r+0x7c2>
 8005fbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	e64d      	b.n	8005c62 <_dtoa_r+0x80a>
 8005fc6:	f1bb 0f00 	cmp.w	fp, #0
 8005fca:	f77f aed9 	ble.w	8005d80 <_dtoa_r+0x928>
 8005fce:	4656      	mov	r6, sl
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	9803      	ldr	r0, [sp, #12]
 8005fd4:	f7ff f9b5 	bl	8005342 <quorem>
 8005fd8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005fdc:	f806 3b01 	strb.w	r3, [r6], #1
 8005fe0:	eba6 020a 	sub.w	r2, r6, sl
 8005fe4:	4593      	cmp	fp, r2
 8005fe6:	ddb4      	ble.n	8005f52 <_dtoa_r+0xafa>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	220a      	movs	r2, #10
 8005fec:	4648      	mov	r0, r9
 8005fee:	9903      	ldr	r1, [sp, #12]
 8005ff0:	f000 f966 	bl	80062c0 <__multadd>
 8005ff4:	9003      	str	r0, [sp, #12]
 8005ff6:	e7eb      	b.n	8005fd0 <_dtoa_r+0xb78>
 8005ff8:	0800717a 	.word	0x0800717a
 8005ffc:	080070fe 	.word	0x080070fe

08006000 <_free_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	4605      	mov	r5, r0
 8006004:	2900      	cmp	r1, #0
 8006006:	d040      	beq.n	800608a <_free_r+0x8a>
 8006008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800600c:	1f0c      	subs	r4, r1, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	bfb8      	it	lt
 8006012:	18e4      	addlt	r4, r4, r3
 8006014:	f000 f8e6 	bl	80061e4 <__malloc_lock>
 8006018:	4a1c      	ldr	r2, [pc, #112]	@ (800608c <_free_r+0x8c>)
 800601a:	6813      	ldr	r3, [r2, #0]
 800601c:	b933      	cbnz	r3, 800602c <_free_r+0x2c>
 800601e:	6063      	str	r3, [r4, #4]
 8006020:	6014      	str	r4, [r2, #0]
 8006022:	4628      	mov	r0, r5
 8006024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006028:	f000 b8e2 	b.w	80061f0 <__malloc_unlock>
 800602c:	42a3      	cmp	r3, r4
 800602e:	d908      	bls.n	8006042 <_free_r+0x42>
 8006030:	6820      	ldr	r0, [r4, #0]
 8006032:	1821      	adds	r1, r4, r0
 8006034:	428b      	cmp	r3, r1
 8006036:	bf01      	itttt	eq
 8006038:	6819      	ldreq	r1, [r3, #0]
 800603a:	685b      	ldreq	r3, [r3, #4]
 800603c:	1809      	addeq	r1, r1, r0
 800603e:	6021      	streq	r1, [r4, #0]
 8006040:	e7ed      	b.n	800601e <_free_r+0x1e>
 8006042:	461a      	mov	r2, r3
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	b10b      	cbz	r3, 800604c <_free_r+0x4c>
 8006048:	42a3      	cmp	r3, r4
 800604a:	d9fa      	bls.n	8006042 <_free_r+0x42>
 800604c:	6811      	ldr	r1, [r2, #0]
 800604e:	1850      	adds	r0, r2, r1
 8006050:	42a0      	cmp	r0, r4
 8006052:	d10b      	bne.n	800606c <_free_r+0x6c>
 8006054:	6820      	ldr	r0, [r4, #0]
 8006056:	4401      	add	r1, r0
 8006058:	1850      	adds	r0, r2, r1
 800605a:	4283      	cmp	r3, r0
 800605c:	6011      	str	r1, [r2, #0]
 800605e:	d1e0      	bne.n	8006022 <_free_r+0x22>
 8006060:	6818      	ldr	r0, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	4408      	add	r0, r1
 8006066:	6010      	str	r0, [r2, #0]
 8006068:	6053      	str	r3, [r2, #4]
 800606a:	e7da      	b.n	8006022 <_free_r+0x22>
 800606c:	d902      	bls.n	8006074 <_free_r+0x74>
 800606e:	230c      	movs	r3, #12
 8006070:	602b      	str	r3, [r5, #0]
 8006072:	e7d6      	b.n	8006022 <_free_r+0x22>
 8006074:	6820      	ldr	r0, [r4, #0]
 8006076:	1821      	adds	r1, r4, r0
 8006078:	428b      	cmp	r3, r1
 800607a:	bf01      	itttt	eq
 800607c:	6819      	ldreq	r1, [r3, #0]
 800607e:	685b      	ldreq	r3, [r3, #4]
 8006080:	1809      	addeq	r1, r1, r0
 8006082:	6021      	streq	r1, [r4, #0]
 8006084:	6063      	str	r3, [r4, #4]
 8006086:	6054      	str	r4, [r2, #4]
 8006088:	e7cb      	b.n	8006022 <_free_r+0x22>
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	200006e0 	.word	0x200006e0

08006090 <malloc>:
 8006090:	4b02      	ldr	r3, [pc, #8]	@ (800609c <malloc+0xc>)
 8006092:	4601      	mov	r1, r0
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	f000 b825 	b.w	80060e4 <_malloc_r>
 800609a:	bf00      	nop
 800609c:	20000018 	.word	0x20000018

080060a0 <sbrk_aligned>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	4e0f      	ldr	r6, [pc, #60]	@ (80060e0 <sbrk_aligned+0x40>)
 80060a4:	460c      	mov	r4, r1
 80060a6:	6831      	ldr	r1, [r6, #0]
 80060a8:	4605      	mov	r5, r0
 80060aa:	b911      	cbnz	r1, 80060b2 <sbrk_aligned+0x12>
 80060ac:	f000 fcc8 	bl	8006a40 <_sbrk_r>
 80060b0:	6030      	str	r0, [r6, #0]
 80060b2:	4621      	mov	r1, r4
 80060b4:	4628      	mov	r0, r5
 80060b6:	f000 fcc3 	bl	8006a40 <_sbrk_r>
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	d103      	bne.n	80060c6 <sbrk_aligned+0x26>
 80060be:	f04f 34ff 	mov.w	r4, #4294967295
 80060c2:	4620      	mov	r0, r4
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
 80060c6:	1cc4      	adds	r4, r0, #3
 80060c8:	f024 0403 	bic.w	r4, r4, #3
 80060cc:	42a0      	cmp	r0, r4
 80060ce:	d0f8      	beq.n	80060c2 <sbrk_aligned+0x22>
 80060d0:	1a21      	subs	r1, r4, r0
 80060d2:	4628      	mov	r0, r5
 80060d4:	f000 fcb4 	bl	8006a40 <_sbrk_r>
 80060d8:	3001      	adds	r0, #1
 80060da:	d1f2      	bne.n	80060c2 <sbrk_aligned+0x22>
 80060dc:	e7ef      	b.n	80060be <sbrk_aligned+0x1e>
 80060de:	bf00      	nop
 80060e0:	200006dc 	.word	0x200006dc

080060e4 <_malloc_r>:
 80060e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e8:	1ccd      	adds	r5, r1, #3
 80060ea:	f025 0503 	bic.w	r5, r5, #3
 80060ee:	3508      	adds	r5, #8
 80060f0:	2d0c      	cmp	r5, #12
 80060f2:	bf38      	it	cc
 80060f4:	250c      	movcc	r5, #12
 80060f6:	2d00      	cmp	r5, #0
 80060f8:	4606      	mov	r6, r0
 80060fa:	db01      	blt.n	8006100 <_malloc_r+0x1c>
 80060fc:	42a9      	cmp	r1, r5
 80060fe:	d904      	bls.n	800610a <_malloc_r+0x26>
 8006100:	230c      	movs	r3, #12
 8006102:	6033      	str	r3, [r6, #0]
 8006104:	2000      	movs	r0, #0
 8006106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800610a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061e0 <_malloc_r+0xfc>
 800610e:	f000 f869 	bl	80061e4 <__malloc_lock>
 8006112:	f8d8 3000 	ldr.w	r3, [r8]
 8006116:	461c      	mov	r4, r3
 8006118:	bb44      	cbnz	r4, 800616c <_malloc_r+0x88>
 800611a:	4629      	mov	r1, r5
 800611c:	4630      	mov	r0, r6
 800611e:	f7ff ffbf 	bl	80060a0 <sbrk_aligned>
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	4604      	mov	r4, r0
 8006126:	d158      	bne.n	80061da <_malloc_r+0xf6>
 8006128:	f8d8 4000 	ldr.w	r4, [r8]
 800612c:	4627      	mov	r7, r4
 800612e:	2f00      	cmp	r7, #0
 8006130:	d143      	bne.n	80061ba <_malloc_r+0xd6>
 8006132:	2c00      	cmp	r4, #0
 8006134:	d04b      	beq.n	80061ce <_malloc_r+0xea>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	4639      	mov	r1, r7
 800613a:	4630      	mov	r0, r6
 800613c:	eb04 0903 	add.w	r9, r4, r3
 8006140:	f000 fc7e 	bl	8006a40 <_sbrk_r>
 8006144:	4581      	cmp	r9, r0
 8006146:	d142      	bne.n	80061ce <_malloc_r+0xea>
 8006148:	6821      	ldr	r1, [r4, #0]
 800614a:	4630      	mov	r0, r6
 800614c:	1a6d      	subs	r5, r5, r1
 800614e:	4629      	mov	r1, r5
 8006150:	f7ff ffa6 	bl	80060a0 <sbrk_aligned>
 8006154:	3001      	adds	r0, #1
 8006156:	d03a      	beq.n	80061ce <_malloc_r+0xea>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	442b      	add	r3, r5
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	f8d8 3000 	ldr.w	r3, [r8]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	bb62      	cbnz	r2, 80061c0 <_malloc_r+0xdc>
 8006166:	f8c8 7000 	str.w	r7, [r8]
 800616a:	e00f      	b.n	800618c <_malloc_r+0xa8>
 800616c:	6822      	ldr	r2, [r4, #0]
 800616e:	1b52      	subs	r2, r2, r5
 8006170:	d420      	bmi.n	80061b4 <_malloc_r+0xd0>
 8006172:	2a0b      	cmp	r2, #11
 8006174:	d917      	bls.n	80061a6 <_malloc_r+0xc2>
 8006176:	1961      	adds	r1, r4, r5
 8006178:	42a3      	cmp	r3, r4
 800617a:	6025      	str	r5, [r4, #0]
 800617c:	bf18      	it	ne
 800617e:	6059      	strne	r1, [r3, #4]
 8006180:	6863      	ldr	r3, [r4, #4]
 8006182:	bf08      	it	eq
 8006184:	f8c8 1000 	streq.w	r1, [r8]
 8006188:	5162      	str	r2, [r4, r5]
 800618a:	604b      	str	r3, [r1, #4]
 800618c:	4630      	mov	r0, r6
 800618e:	f000 f82f 	bl	80061f0 <__malloc_unlock>
 8006192:	f104 000b 	add.w	r0, r4, #11
 8006196:	1d23      	adds	r3, r4, #4
 8006198:	f020 0007 	bic.w	r0, r0, #7
 800619c:	1ac2      	subs	r2, r0, r3
 800619e:	bf1c      	itt	ne
 80061a0:	1a1b      	subne	r3, r3, r0
 80061a2:	50a3      	strne	r3, [r4, r2]
 80061a4:	e7af      	b.n	8006106 <_malloc_r+0x22>
 80061a6:	6862      	ldr	r2, [r4, #4]
 80061a8:	42a3      	cmp	r3, r4
 80061aa:	bf0c      	ite	eq
 80061ac:	f8c8 2000 	streq.w	r2, [r8]
 80061b0:	605a      	strne	r2, [r3, #4]
 80061b2:	e7eb      	b.n	800618c <_malloc_r+0xa8>
 80061b4:	4623      	mov	r3, r4
 80061b6:	6864      	ldr	r4, [r4, #4]
 80061b8:	e7ae      	b.n	8006118 <_malloc_r+0x34>
 80061ba:	463c      	mov	r4, r7
 80061bc:	687f      	ldr	r7, [r7, #4]
 80061be:	e7b6      	b.n	800612e <_malloc_r+0x4a>
 80061c0:	461a      	mov	r2, r3
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	42a3      	cmp	r3, r4
 80061c6:	d1fb      	bne.n	80061c0 <_malloc_r+0xdc>
 80061c8:	2300      	movs	r3, #0
 80061ca:	6053      	str	r3, [r2, #4]
 80061cc:	e7de      	b.n	800618c <_malloc_r+0xa8>
 80061ce:	230c      	movs	r3, #12
 80061d0:	4630      	mov	r0, r6
 80061d2:	6033      	str	r3, [r6, #0]
 80061d4:	f000 f80c 	bl	80061f0 <__malloc_unlock>
 80061d8:	e794      	b.n	8006104 <_malloc_r+0x20>
 80061da:	6005      	str	r5, [r0, #0]
 80061dc:	e7d6      	b.n	800618c <_malloc_r+0xa8>
 80061de:	bf00      	nop
 80061e0:	200006e0 	.word	0x200006e0

080061e4 <__malloc_lock>:
 80061e4:	4801      	ldr	r0, [pc, #4]	@ (80061ec <__malloc_lock+0x8>)
 80061e6:	f7ff b89c 	b.w	8005322 <__retarget_lock_acquire_recursive>
 80061ea:	bf00      	nop
 80061ec:	200006d8 	.word	0x200006d8

080061f0 <__malloc_unlock>:
 80061f0:	4801      	ldr	r0, [pc, #4]	@ (80061f8 <__malloc_unlock+0x8>)
 80061f2:	f7ff b897 	b.w	8005324 <__retarget_lock_release_recursive>
 80061f6:	bf00      	nop
 80061f8:	200006d8 	.word	0x200006d8

080061fc <_Balloc>:
 80061fc:	b570      	push	{r4, r5, r6, lr}
 80061fe:	69c6      	ldr	r6, [r0, #28]
 8006200:	4604      	mov	r4, r0
 8006202:	460d      	mov	r5, r1
 8006204:	b976      	cbnz	r6, 8006224 <_Balloc+0x28>
 8006206:	2010      	movs	r0, #16
 8006208:	f7ff ff42 	bl	8006090 <malloc>
 800620c:	4602      	mov	r2, r0
 800620e:	61e0      	str	r0, [r4, #28]
 8006210:	b920      	cbnz	r0, 800621c <_Balloc+0x20>
 8006212:	216b      	movs	r1, #107	@ 0x6b
 8006214:	4b17      	ldr	r3, [pc, #92]	@ (8006274 <_Balloc+0x78>)
 8006216:	4818      	ldr	r0, [pc, #96]	@ (8006278 <_Balloc+0x7c>)
 8006218:	f000 fc30 	bl	8006a7c <__assert_func>
 800621c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006220:	6006      	str	r6, [r0, #0]
 8006222:	60c6      	str	r6, [r0, #12]
 8006224:	69e6      	ldr	r6, [r4, #28]
 8006226:	68f3      	ldr	r3, [r6, #12]
 8006228:	b183      	cbz	r3, 800624c <_Balloc+0x50>
 800622a:	69e3      	ldr	r3, [r4, #28]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006232:	b9b8      	cbnz	r0, 8006264 <_Balloc+0x68>
 8006234:	2101      	movs	r1, #1
 8006236:	fa01 f605 	lsl.w	r6, r1, r5
 800623a:	1d72      	adds	r2, r6, #5
 800623c:	4620      	mov	r0, r4
 800623e:	0092      	lsls	r2, r2, #2
 8006240:	f000 fc3a 	bl	8006ab8 <_calloc_r>
 8006244:	b160      	cbz	r0, 8006260 <_Balloc+0x64>
 8006246:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800624a:	e00e      	b.n	800626a <_Balloc+0x6e>
 800624c:	2221      	movs	r2, #33	@ 0x21
 800624e:	2104      	movs	r1, #4
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fc31 	bl	8006ab8 <_calloc_r>
 8006256:	69e3      	ldr	r3, [r4, #28]
 8006258:	60f0      	str	r0, [r6, #12]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e4      	bne.n	800622a <_Balloc+0x2e>
 8006260:	2000      	movs	r0, #0
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	6802      	ldr	r2, [r0, #0]
 8006266:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800626a:	2300      	movs	r3, #0
 800626c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006270:	e7f7      	b.n	8006262 <_Balloc+0x66>
 8006272:	bf00      	nop
 8006274:	0800710b 	.word	0x0800710b
 8006278:	0800718b 	.word	0x0800718b

0800627c <_Bfree>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	69c6      	ldr	r6, [r0, #28]
 8006280:	4605      	mov	r5, r0
 8006282:	460c      	mov	r4, r1
 8006284:	b976      	cbnz	r6, 80062a4 <_Bfree+0x28>
 8006286:	2010      	movs	r0, #16
 8006288:	f7ff ff02 	bl	8006090 <malloc>
 800628c:	4602      	mov	r2, r0
 800628e:	61e8      	str	r0, [r5, #28]
 8006290:	b920      	cbnz	r0, 800629c <_Bfree+0x20>
 8006292:	218f      	movs	r1, #143	@ 0x8f
 8006294:	4b08      	ldr	r3, [pc, #32]	@ (80062b8 <_Bfree+0x3c>)
 8006296:	4809      	ldr	r0, [pc, #36]	@ (80062bc <_Bfree+0x40>)
 8006298:	f000 fbf0 	bl	8006a7c <__assert_func>
 800629c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062a0:	6006      	str	r6, [r0, #0]
 80062a2:	60c6      	str	r6, [r0, #12]
 80062a4:	b13c      	cbz	r4, 80062b6 <_Bfree+0x3a>
 80062a6:	69eb      	ldr	r3, [r5, #28]
 80062a8:	6862      	ldr	r2, [r4, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062b0:	6021      	str	r1, [r4, #0]
 80062b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	0800710b 	.word	0x0800710b
 80062bc:	0800718b 	.word	0x0800718b

080062c0 <__multadd>:
 80062c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c4:	4607      	mov	r7, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	461e      	mov	r6, r3
 80062ca:	2000      	movs	r0, #0
 80062cc:	690d      	ldr	r5, [r1, #16]
 80062ce:	f101 0c14 	add.w	ip, r1, #20
 80062d2:	f8dc 3000 	ldr.w	r3, [ip]
 80062d6:	3001      	adds	r0, #1
 80062d8:	b299      	uxth	r1, r3
 80062da:	fb02 6101 	mla	r1, r2, r1, r6
 80062de:	0c1e      	lsrs	r6, r3, #16
 80062e0:	0c0b      	lsrs	r3, r1, #16
 80062e2:	fb02 3306 	mla	r3, r2, r6, r3
 80062e6:	b289      	uxth	r1, r1
 80062e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062ec:	4285      	cmp	r5, r0
 80062ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80062f2:	f84c 1b04 	str.w	r1, [ip], #4
 80062f6:	dcec      	bgt.n	80062d2 <__multadd+0x12>
 80062f8:	b30e      	cbz	r6, 800633e <__multadd+0x7e>
 80062fa:	68a3      	ldr	r3, [r4, #8]
 80062fc:	42ab      	cmp	r3, r5
 80062fe:	dc19      	bgt.n	8006334 <__multadd+0x74>
 8006300:	6861      	ldr	r1, [r4, #4]
 8006302:	4638      	mov	r0, r7
 8006304:	3101      	adds	r1, #1
 8006306:	f7ff ff79 	bl	80061fc <_Balloc>
 800630a:	4680      	mov	r8, r0
 800630c:	b928      	cbnz	r0, 800631a <__multadd+0x5a>
 800630e:	4602      	mov	r2, r0
 8006310:	21ba      	movs	r1, #186	@ 0xba
 8006312:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <__multadd+0x84>)
 8006314:	480c      	ldr	r0, [pc, #48]	@ (8006348 <__multadd+0x88>)
 8006316:	f000 fbb1 	bl	8006a7c <__assert_func>
 800631a:	6922      	ldr	r2, [r4, #16]
 800631c:	f104 010c 	add.w	r1, r4, #12
 8006320:	3202      	adds	r2, #2
 8006322:	0092      	lsls	r2, r2, #2
 8006324:	300c      	adds	r0, #12
 8006326:	f000 fb9b 	bl	8006a60 <memcpy>
 800632a:	4621      	mov	r1, r4
 800632c:	4638      	mov	r0, r7
 800632e:	f7ff ffa5 	bl	800627c <_Bfree>
 8006332:	4644      	mov	r4, r8
 8006334:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006338:	3501      	adds	r5, #1
 800633a:	615e      	str	r6, [r3, #20]
 800633c:	6125      	str	r5, [r4, #16]
 800633e:	4620      	mov	r0, r4
 8006340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006344:	0800717a 	.word	0x0800717a
 8006348:	0800718b 	.word	0x0800718b

0800634c <__hi0bits>:
 800634c:	4603      	mov	r3, r0
 800634e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006352:	bf3a      	itte	cc
 8006354:	0403      	lslcc	r3, r0, #16
 8006356:	2010      	movcc	r0, #16
 8006358:	2000      	movcs	r0, #0
 800635a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800635e:	bf3c      	itt	cc
 8006360:	021b      	lslcc	r3, r3, #8
 8006362:	3008      	addcc	r0, #8
 8006364:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006368:	bf3c      	itt	cc
 800636a:	011b      	lslcc	r3, r3, #4
 800636c:	3004      	addcc	r0, #4
 800636e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006372:	bf3c      	itt	cc
 8006374:	009b      	lslcc	r3, r3, #2
 8006376:	3002      	addcc	r0, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	db05      	blt.n	8006388 <__hi0bits+0x3c>
 800637c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006380:	f100 0001 	add.w	r0, r0, #1
 8006384:	bf08      	it	eq
 8006386:	2020      	moveq	r0, #32
 8006388:	4770      	bx	lr

0800638a <__lo0bits>:
 800638a:	6803      	ldr	r3, [r0, #0]
 800638c:	4602      	mov	r2, r0
 800638e:	f013 0007 	ands.w	r0, r3, #7
 8006392:	d00b      	beq.n	80063ac <__lo0bits+0x22>
 8006394:	07d9      	lsls	r1, r3, #31
 8006396:	d421      	bmi.n	80063dc <__lo0bits+0x52>
 8006398:	0798      	lsls	r0, r3, #30
 800639a:	bf49      	itett	mi
 800639c:	085b      	lsrmi	r3, r3, #1
 800639e:	089b      	lsrpl	r3, r3, #2
 80063a0:	2001      	movmi	r0, #1
 80063a2:	6013      	strmi	r3, [r2, #0]
 80063a4:	bf5c      	itt	pl
 80063a6:	2002      	movpl	r0, #2
 80063a8:	6013      	strpl	r3, [r2, #0]
 80063aa:	4770      	bx	lr
 80063ac:	b299      	uxth	r1, r3
 80063ae:	b909      	cbnz	r1, 80063b4 <__lo0bits+0x2a>
 80063b0:	2010      	movs	r0, #16
 80063b2:	0c1b      	lsrs	r3, r3, #16
 80063b4:	b2d9      	uxtb	r1, r3
 80063b6:	b909      	cbnz	r1, 80063bc <__lo0bits+0x32>
 80063b8:	3008      	adds	r0, #8
 80063ba:	0a1b      	lsrs	r3, r3, #8
 80063bc:	0719      	lsls	r1, r3, #28
 80063be:	bf04      	itt	eq
 80063c0:	091b      	lsreq	r3, r3, #4
 80063c2:	3004      	addeq	r0, #4
 80063c4:	0799      	lsls	r1, r3, #30
 80063c6:	bf04      	itt	eq
 80063c8:	089b      	lsreq	r3, r3, #2
 80063ca:	3002      	addeq	r0, #2
 80063cc:	07d9      	lsls	r1, r3, #31
 80063ce:	d403      	bmi.n	80063d8 <__lo0bits+0x4e>
 80063d0:	085b      	lsrs	r3, r3, #1
 80063d2:	f100 0001 	add.w	r0, r0, #1
 80063d6:	d003      	beq.n	80063e0 <__lo0bits+0x56>
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4770      	bx	lr
 80063dc:	2000      	movs	r0, #0
 80063de:	4770      	bx	lr
 80063e0:	2020      	movs	r0, #32
 80063e2:	4770      	bx	lr

080063e4 <__i2b>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	460c      	mov	r4, r1
 80063e8:	2101      	movs	r1, #1
 80063ea:	f7ff ff07 	bl	80061fc <_Balloc>
 80063ee:	4602      	mov	r2, r0
 80063f0:	b928      	cbnz	r0, 80063fe <__i2b+0x1a>
 80063f2:	f240 1145 	movw	r1, #325	@ 0x145
 80063f6:	4b04      	ldr	r3, [pc, #16]	@ (8006408 <__i2b+0x24>)
 80063f8:	4804      	ldr	r0, [pc, #16]	@ (800640c <__i2b+0x28>)
 80063fa:	f000 fb3f 	bl	8006a7c <__assert_func>
 80063fe:	2301      	movs	r3, #1
 8006400:	6144      	str	r4, [r0, #20]
 8006402:	6103      	str	r3, [r0, #16]
 8006404:	bd10      	pop	{r4, pc}
 8006406:	bf00      	nop
 8006408:	0800717a 	.word	0x0800717a
 800640c:	0800718b 	.word	0x0800718b

08006410 <__multiply>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	4617      	mov	r7, r2
 8006416:	690a      	ldr	r2, [r1, #16]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4689      	mov	r9, r1
 800641c:	429a      	cmp	r2, r3
 800641e:	bfa2      	ittt	ge
 8006420:	463b      	movge	r3, r7
 8006422:	460f      	movge	r7, r1
 8006424:	4699      	movge	r9, r3
 8006426:	693d      	ldr	r5, [r7, #16]
 8006428:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	eb05 060a 	add.w	r6, r5, sl
 8006434:	42b3      	cmp	r3, r6
 8006436:	b085      	sub	sp, #20
 8006438:	bfb8      	it	lt
 800643a:	3101      	addlt	r1, #1
 800643c:	f7ff fede 	bl	80061fc <_Balloc>
 8006440:	b930      	cbnz	r0, 8006450 <__multiply+0x40>
 8006442:	4602      	mov	r2, r0
 8006444:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006448:	4b40      	ldr	r3, [pc, #256]	@ (800654c <__multiply+0x13c>)
 800644a:	4841      	ldr	r0, [pc, #260]	@ (8006550 <__multiply+0x140>)
 800644c:	f000 fb16 	bl	8006a7c <__assert_func>
 8006450:	f100 0414 	add.w	r4, r0, #20
 8006454:	4623      	mov	r3, r4
 8006456:	2200      	movs	r2, #0
 8006458:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800645c:	4573      	cmp	r3, lr
 800645e:	d320      	bcc.n	80064a2 <__multiply+0x92>
 8006460:	f107 0814 	add.w	r8, r7, #20
 8006464:	f109 0114 	add.w	r1, r9, #20
 8006468:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800646c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006470:	9302      	str	r3, [sp, #8]
 8006472:	1beb      	subs	r3, r5, r7
 8006474:	3b15      	subs	r3, #21
 8006476:	f023 0303 	bic.w	r3, r3, #3
 800647a:	3304      	adds	r3, #4
 800647c:	3715      	adds	r7, #21
 800647e:	42bd      	cmp	r5, r7
 8006480:	bf38      	it	cc
 8006482:	2304      	movcc	r3, #4
 8006484:	9301      	str	r3, [sp, #4]
 8006486:	9b02      	ldr	r3, [sp, #8]
 8006488:	9103      	str	r1, [sp, #12]
 800648a:	428b      	cmp	r3, r1
 800648c:	d80c      	bhi.n	80064a8 <__multiply+0x98>
 800648e:	2e00      	cmp	r6, #0
 8006490:	dd03      	ble.n	800649a <__multiply+0x8a>
 8006492:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006496:	2b00      	cmp	r3, #0
 8006498:	d055      	beq.n	8006546 <__multiply+0x136>
 800649a:	6106      	str	r6, [r0, #16]
 800649c:	b005      	add	sp, #20
 800649e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a2:	f843 2b04 	str.w	r2, [r3], #4
 80064a6:	e7d9      	b.n	800645c <__multiply+0x4c>
 80064a8:	f8b1 a000 	ldrh.w	sl, [r1]
 80064ac:	f1ba 0f00 	cmp.w	sl, #0
 80064b0:	d01f      	beq.n	80064f2 <__multiply+0xe2>
 80064b2:	46c4      	mov	ip, r8
 80064b4:	46a1      	mov	r9, r4
 80064b6:	2700      	movs	r7, #0
 80064b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80064bc:	f8d9 3000 	ldr.w	r3, [r9]
 80064c0:	fa1f fb82 	uxth.w	fp, r2
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	fb0a 330b 	mla	r3, sl, fp, r3
 80064ca:	443b      	add	r3, r7
 80064cc:	f8d9 7000 	ldr.w	r7, [r9]
 80064d0:	0c12      	lsrs	r2, r2, #16
 80064d2:	0c3f      	lsrs	r7, r7, #16
 80064d4:	fb0a 7202 	mla	r2, sl, r2, r7
 80064d8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064e2:	4565      	cmp	r5, ip
 80064e4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80064e8:	f849 3b04 	str.w	r3, [r9], #4
 80064ec:	d8e4      	bhi.n	80064b8 <__multiply+0xa8>
 80064ee:	9b01      	ldr	r3, [sp, #4]
 80064f0:	50e7      	str	r7, [r4, r3]
 80064f2:	9b03      	ldr	r3, [sp, #12]
 80064f4:	3104      	adds	r1, #4
 80064f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80064fa:	f1b9 0f00 	cmp.w	r9, #0
 80064fe:	d020      	beq.n	8006542 <__multiply+0x132>
 8006500:	4647      	mov	r7, r8
 8006502:	46a4      	mov	ip, r4
 8006504:	f04f 0a00 	mov.w	sl, #0
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	f8b7 b000 	ldrh.w	fp, [r7]
 800650e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006512:	b29b      	uxth	r3, r3
 8006514:	fb09 220b 	mla	r2, r9, fp, r2
 8006518:	4452      	add	r2, sl
 800651a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800651e:	f84c 3b04 	str.w	r3, [ip], #4
 8006522:	f857 3b04 	ldr.w	r3, [r7], #4
 8006526:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800652a:	f8bc 3000 	ldrh.w	r3, [ip]
 800652e:	42bd      	cmp	r5, r7
 8006530:	fb09 330a 	mla	r3, r9, sl, r3
 8006534:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006538:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800653c:	d8e5      	bhi.n	800650a <__multiply+0xfa>
 800653e:	9a01      	ldr	r2, [sp, #4]
 8006540:	50a3      	str	r3, [r4, r2]
 8006542:	3404      	adds	r4, #4
 8006544:	e79f      	b.n	8006486 <__multiply+0x76>
 8006546:	3e01      	subs	r6, #1
 8006548:	e7a1      	b.n	800648e <__multiply+0x7e>
 800654a:	bf00      	nop
 800654c:	0800717a 	.word	0x0800717a
 8006550:	0800718b 	.word	0x0800718b

08006554 <__pow5mult>:
 8006554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006558:	4615      	mov	r5, r2
 800655a:	f012 0203 	ands.w	r2, r2, #3
 800655e:	4607      	mov	r7, r0
 8006560:	460e      	mov	r6, r1
 8006562:	d007      	beq.n	8006574 <__pow5mult+0x20>
 8006564:	4c25      	ldr	r4, [pc, #148]	@ (80065fc <__pow5mult+0xa8>)
 8006566:	3a01      	subs	r2, #1
 8006568:	2300      	movs	r3, #0
 800656a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800656e:	f7ff fea7 	bl	80062c0 <__multadd>
 8006572:	4606      	mov	r6, r0
 8006574:	10ad      	asrs	r5, r5, #2
 8006576:	d03d      	beq.n	80065f4 <__pow5mult+0xa0>
 8006578:	69fc      	ldr	r4, [r7, #28]
 800657a:	b97c      	cbnz	r4, 800659c <__pow5mult+0x48>
 800657c:	2010      	movs	r0, #16
 800657e:	f7ff fd87 	bl	8006090 <malloc>
 8006582:	4602      	mov	r2, r0
 8006584:	61f8      	str	r0, [r7, #28]
 8006586:	b928      	cbnz	r0, 8006594 <__pow5mult+0x40>
 8006588:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800658c:	4b1c      	ldr	r3, [pc, #112]	@ (8006600 <__pow5mult+0xac>)
 800658e:	481d      	ldr	r0, [pc, #116]	@ (8006604 <__pow5mult+0xb0>)
 8006590:	f000 fa74 	bl	8006a7c <__assert_func>
 8006594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006598:	6004      	str	r4, [r0, #0]
 800659a:	60c4      	str	r4, [r0, #12]
 800659c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80065a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065a4:	b94c      	cbnz	r4, 80065ba <__pow5mult+0x66>
 80065a6:	f240 2171 	movw	r1, #625	@ 0x271
 80065aa:	4638      	mov	r0, r7
 80065ac:	f7ff ff1a 	bl	80063e4 <__i2b>
 80065b0:	2300      	movs	r3, #0
 80065b2:	4604      	mov	r4, r0
 80065b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80065b8:	6003      	str	r3, [r0, #0]
 80065ba:	f04f 0900 	mov.w	r9, #0
 80065be:	07eb      	lsls	r3, r5, #31
 80065c0:	d50a      	bpl.n	80065d8 <__pow5mult+0x84>
 80065c2:	4631      	mov	r1, r6
 80065c4:	4622      	mov	r2, r4
 80065c6:	4638      	mov	r0, r7
 80065c8:	f7ff ff22 	bl	8006410 <__multiply>
 80065cc:	4680      	mov	r8, r0
 80065ce:	4631      	mov	r1, r6
 80065d0:	4638      	mov	r0, r7
 80065d2:	f7ff fe53 	bl	800627c <_Bfree>
 80065d6:	4646      	mov	r6, r8
 80065d8:	106d      	asrs	r5, r5, #1
 80065da:	d00b      	beq.n	80065f4 <__pow5mult+0xa0>
 80065dc:	6820      	ldr	r0, [r4, #0]
 80065de:	b938      	cbnz	r0, 80065f0 <__pow5mult+0x9c>
 80065e0:	4622      	mov	r2, r4
 80065e2:	4621      	mov	r1, r4
 80065e4:	4638      	mov	r0, r7
 80065e6:	f7ff ff13 	bl	8006410 <__multiply>
 80065ea:	6020      	str	r0, [r4, #0]
 80065ec:	f8c0 9000 	str.w	r9, [r0]
 80065f0:	4604      	mov	r4, r0
 80065f2:	e7e4      	b.n	80065be <__pow5mult+0x6a>
 80065f4:	4630      	mov	r0, r6
 80065f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065fa:	bf00      	nop
 80065fc:	0800723c 	.word	0x0800723c
 8006600:	0800710b 	.word	0x0800710b
 8006604:	0800718b 	.word	0x0800718b

08006608 <__lshift>:
 8006608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800660c:	460c      	mov	r4, r1
 800660e:	4607      	mov	r7, r0
 8006610:	4691      	mov	r9, r2
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	6849      	ldr	r1, [r1, #4]
 8006616:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800661a:	68a3      	ldr	r3, [r4, #8]
 800661c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006620:	f108 0601 	add.w	r6, r8, #1
 8006624:	42b3      	cmp	r3, r6
 8006626:	db0b      	blt.n	8006640 <__lshift+0x38>
 8006628:	4638      	mov	r0, r7
 800662a:	f7ff fde7 	bl	80061fc <_Balloc>
 800662e:	4605      	mov	r5, r0
 8006630:	b948      	cbnz	r0, 8006646 <__lshift+0x3e>
 8006632:	4602      	mov	r2, r0
 8006634:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006638:	4b27      	ldr	r3, [pc, #156]	@ (80066d8 <__lshift+0xd0>)
 800663a:	4828      	ldr	r0, [pc, #160]	@ (80066dc <__lshift+0xd4>)
 800663c:	f000 fa1e 	bl	8006a7c <__assert_func>
 8006640:	3101      	adds	r1, #1
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	e7ee      	b.n	8006624 <__lshift+0x1c>
 8006646:	2300      	movs	r3, #0
 8006648:	f100 0114 	add.w	r1, r0, #20
 800664c:	f100 0210 	add.w	r2, r0, #16
 8006650:	4618      	mov	r0, r3
 8006652:	4553      	cmp	r3, sl
 8006654:	db33      	blt.n	80066be <__lshift+0xb6>
 8006656:	6920      	ldr	r0, [r4, #16]
 8006658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800665c:	f104 0314 	add.w	r3, r4, #20
 8006660:	f019 091f 	ands.w	r9, r9, #31
 8006664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006668:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800666c:	d02b      	beq.n	80066c6 <__lshift+0xbe>
 800666e:	468a      	mov	sl, r1
 8006670:	2200      	movs	r2, #0
 8006672:	f1c9 0e20 	rsb	lr, r9, #32
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	fa00 f009 	lsl.w	r0, r0, r9
 800667c:	4310      	orrs	r0, r2
 800667e:	f84a 0b04 	str.w	r0, [sl], #4
 8006682:	f853 2b04 	ldr.w	r2, [r3], #4
 8006686:	459c      	cmp	ip, r3
 8006688:	fa22 f20e 	lsr.w	r2, r2, lr
 800668c:	d8f3      	bhi.n	8006676 <__lshift+0x6e>
 800668e:	ebac 0304 	sub.w	r3, ip, r4
 8006692:	3b15      	subs	r3, #21
 8006694:	f023 0303 	bic.w	r3, r3, #3
 8006698:	3304      	adds	r3, #4
 800669a:	f104 0015 	add.w	r0, r4, #21
 800669e:	4560      	cmp	r0, ip
 80066a0:	bf88      	it	hi
 80066a2:	2304      	movhi	r3, #4
 80066a4:	50ca      	str	r2, [r1, r3]
 80066a6:	b10a      	cbz	r2, 80066ac <__lshift+0xa4>
 80066a8:	f108 0602 	add.w	r6, r8, #2
 80066ac:	3e01      	subs	r6, #1
 80066ae:	4638      	mov	r0, r7
 80066b0:	4621      	mov	r1, r4
 80066b2:	612e      	str	r6, [r5, #16]
 80066b4:	f7ff fde2 	bl	800627c <_Bfree>
 80066b8:	4628      	mov	r0, r5
 80066ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066be:	f842 0f04 	str.w	r0, [r2, #4]!
 80066c2:	3301      	adds	r3, #1
 80066c4:	e7c5      	b.n	8006652 <__lshift+0x4a>
 80066c6:	3904      	subs	r1, #4
 80066c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066cc:	459c      	cmp	ip, r3
 80066ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80066d2:	d8f9      	bhi.n	80066c8 <__lshift+0xc0>
 80066d4:	e7ea      	b.n	80066ac <__lshift+0xa4>
 80066d6:	bf00      	nop
 80066d8:	0800717a 	.word	0x0800717a
 80066dc:	0800718b 	.word	0x0800718b

080066e0 <__mcmp>:
 80066e0:	4603      	mov	r3, r0
 80066e2:	690a      	ldr	r2, [r1, #16]
 80066e4:	6900      	ldr	r0, [r0, #16]
 80066e6:	b530      	push	{r4, r5, lr}
 80066e8:	1a80      	subs	r0, r0, r2
 80066ea:	d10e      	bne.n	800670a <__mcmp+0x2a>
 80066ec:	3314      	adds	r3, #20
 80066ee:	3114      	adds	r1, #20
 80066f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80066f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80066f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006700:	4295      	cmp	r5, r2
 8006702:	d003      	beq.n	800670c <__mcmp+0x2c>
 8006704:	d205      	bcs.n	8006712 <__mcmp+0x32>
 8006706:	f04f 30ff 	mov.w	r0, #4294967295
 800670a:	bd30      	pop	{r4, r5, pc}
 800670c:	42a3      	cmp	r3, r4
 800670e:	d3f3      	bcc.n	80066f8 <__mcmp+0x18>
 8006710:	e7fb      	b.n	800670a <__mcmp+0x2a>
 8006712:	2001      	movs	r0, #1
 8006714:	e7f9      	b.n	800670a <__mcmp+0x2a>
	...

08006718 <__mdiff>:
 8006718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	4689      	mov	r9, r1
 800671e:	4606      	mov	r6, r0
 8006720:	4611      	mov	r1, r2
 8006722:	4648      	mov	r0, r9
 8006724:	4614      	mov	r4, r2
 8006726:	f7ff ffdb 	bl	80066e0 <__mcmp>
 800672a:	1e05      	subs	r5, r0, #0
 800672c:	d112      	bne.n	8006754 <__mdiff+0x3c>
 800672e:	4629      	mov	r1, r5
 8006730:	4630      	mov	r0, r6
 8006732:	f7ff fd63 	bl	80061fc <_Balloc>
 8006736:	4602      	mov	r2, r0
 8006738:	b928      	cbnz	r0, 8006746 <__mdiff+0x2e>
 800673a:	f240 2137 	movw	r1, #567	@ 0x237
 800673e:	4b3e      	ldr	r3, [pc, #248]	@ (8006838 <__mdiff+0x120>)
 8006740:	483e      	ldr	r0, [pc, #248]	@ (800683c <__mdiff+0x124>)
 8006742:	f000 f99b 	bl	8006a7c <__assert_func>
 8006746:	2301      	movs	r3, #1
 8006748:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800674c:	4610      	mov	r0, r2
 800674e:	b003      	add	sp, #12
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	bfbc      	itt	lt
 8006756:	464b      	movlt	r3, r9
 8006758:	46a1      	movlt	r9, r4
 800675a:	4630      	mov	r0, r6
 800675c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006760:	bfba      	itte	lt
 8006762:	461c      	movlt	r4, r3
 8006764:	2501      	movlt	r5, #1
 8006766:	2500      	movge	r5, #0
 8006768:	f7ff fd48 	bl	80061fc <_Balloc>
 800676c:	4602      	mov	r2, r0
 800676e:	b918      	cbnz	r0, 8006778 <__mdiff+0x60>
 8006770:	f240 2145 	movw	r1, #581	@ 0x245
 8006774:	4b30      	ldr	r3, [pc, #192]	@ (8006838 <__mdiff+0x120>)
 8006776:	e7e3      	b.n	8006740 <__mdiff+0x28>
 8006778:	f100 0b14 	add.w	fp, r0, #20
 800677c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006780:	f109 0310 	add.w	r3, r9, #16
 8006784:	60c5      	str	r5, [r0, #12]
 8006786:	f04f 0c00 	mov.w	ip, #0
 800678a:	f109 0514 	add.w	r5, r9, #20
 800678e:	46d9      	mov	r9, fp
 8006790:	6926      	ldr	r6, [r4, #16]
 8006792:	f104 0e14 	add.w	lr, r4, #20
 8006796:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800679a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	9b01      	ldr	r3, [sp, #4]
 80067a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80067a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80067aa:	b281      	uxth	r1, r0
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	fa1f f38a 	uxth.w	r3, sl
 80067b2:	1a5b      	subs	r3, r3, r1
 80067b4:	0c00      	lsrs	r0, r0, #16
 80067b6:	4463      	add	r3, ip
 80067b8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80067bc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80067c6:	4576      	cmp	r6, lr
 80067c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067cc:	f849 3b04 	str.w	r3, [r9], #4
 80067d0:	d8e6      	bhi.n	80067a0 <__mdiff+0x88>
 80067d2:	1b33      	subs	r3, r6, r4
 80067d4:	3b15      	subs	r3, #21
 80067d6:	f023 0303 	bic.w	r3, r3, #3
 80067da:	3415      	adds	r4, #21
 80067dc:	3304      	adds	r3, #4
 80067de:	42a6      	cmp	r6, r4
 80067e0:	bf38      	it	cc
 80067e2:	2304      	movcc	r3, #4
 80067e4:	441d      	add	r5, r3
 80067e6:	445b      	add	r3, fp
 80067e8:	461e      	mov	r6, r3
 80067ea:	462c      	mov	r4, r5
 80067ec:	4544      	cmp	r4, r8
 80067ee:	d30e      	bcc.n	800680e <__mdiff+0xf6>
 80067f0:	f108 0103 	add.w	r1, r8, #3
 80067f4:	1b49      	subs	r1, r1, r5
 80067f6:	f021 0103 	bic.w	r1, r1, #3
 80067fa:	3d03      	subs	r5, #3
 80067fc:	45a8      	cmp	r8, r5
 80067fe:	bf38      	it	cc
 8006800:	2100      	movcc	r1, #0
 8006802:	440b      	add	r3, r1
 8006804:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006808:	b199      	cbz	r1, 8006832 <__mdiff+0x11a>
 800680a:	6117      	str	r7, [r2, #16]
 800680c:	e79e      	b.n	800674c <__mdiff+0x34>
 800680e:	46e6      	mov	lr, ip
 8006810:	f854 1b04 	ldr.w	r1, [r4], #4
 8006814:	fa1f fc81 	uxth.w	ip, r1
 8006818:	44f4      	add	ip, lr
 800681a:	0c08      	lsrs	r0, r1, #16
 800681c:	4471      	add	r1, lr
 800681e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006822:	b289      	uxth	r1, r1
 8006824:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006828:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800682c:	f846 1b04 	str.w	r1, [r6], #4
 8006830:	e7dc      	b.n	80067ec <__mdiff+0xd4>
 8006832:	3f01      	subs	r7, #1
 8006834:	e7e6      	b.n	8006804 <__mdiff+0xec>
 8006836:	bf00      	nop
 8006838:	0800717a 	.word	0x0800717a
 800683c:	0800718b 	.word	0x0800718b

08006840 <__d2b>:
 8006840:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006844:	2101      	movs	r1, #1
 8006846:	4690      	mov	r8, r2
 8006848:	4699      	mov	r9, r3
 800684a:	9e08      	ldr	r6, [sp, #32]
 800684c:	f7ff fcd6 	bl	80061fc <_Balloc>
 8006850:	4604      	mov	r4, r0
 8006852:	b930      	cbnz	r0, 8006862 <__d2b+0x22>
 8006854:	4602      	mov	r2, r0
 8006856:	f240 310f 	movw	r1, #783	@ 0x30f
 800685a:	4b23      	ldr	r3, [pc, #140]	@ (80068e8 <__d2b+0xa8>)
 800685c:	4823      	ldr	r0, [pc, #140]	@ (80068ec <__d2b+0xac>)
 800685e:	f000 f90d 	bl	8006a7c <__assert_func>
 8006862:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006866:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800686a:	b10d      	cbz	r5, 8006870 <__d2b+0x30>
 800686c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	f1b8 0300 	subs.w	r3, r8, #0
 8006876:	d024      	beq.n	80068c2 <__d2b+0x82>
 8006878:	4668      	mov	r0, sp
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	f7ff fd85 	bl	800638a <__lo0bits>
 8006880:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006884:	b1d8      	cbz	r0, 80068be <__d2b+0x7e>
 8006886:	f1c0 0320 	rsb	r3, r0, #32
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	430b      	orrs	r3, r1
 8006890:	40c2      	lsrs	r2, r0
 8006892:	6163      	str	r3, [r4, #20]
 8006894:	9201      	str	r2, [sp, #4]
 8006896:	9b01      	ldr	r3, [sp, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	bf0c      	ite	eq
 800689c:	2201      	moveq	r2, #1
 800689e:	2202      	movne	r2, #2
 80068a0:	61a3      	str	r3, [r4, #24]
 80068a2:	6122      	str	r2, [r4, #16]
 80068a4:	b1ad      	cbz	r5, 80068d2 <__d2b+0x92>
 80068a6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80068aa:	4405      	add	r5, r0
 80068ac:	6035      	str	r5, [r6, #0]
 80068ae:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80068b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b4:	6018      	str	r0, [r3, #0]
 80068b6:	4620      	mov	r0, r4
 80068b8:	b002      	add	sp, #8
 80068ba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80068be:	6161      	str	r1, [r4, #20]
 80068c0:	e7e9      	b.n	8006896 <__d2b+0x56>
 80068c2:	a801      	add	r0, sp, #4
 80068c4:	f7ff fd61 	bl	800638a <__lo0bits>
 80068c8:	9b01      	ldr	r3, [sp, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	6163      	str	r3, [r4, #20]
 80068ce:	3020      	adds	r0, #32
 80068d0:	e7e7      	b.n	80068a2 <__d2b+0x62>
 80068d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80068d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068da:	6030      	str	r0, [r6, #0]
 80068dc:	6918      	ldr	r0, [r3, #16]
 80068de:	f7ff fd35 	bl	800634c <__hi0bits>
 80068e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80068e6:	e7e4      	b.n	80068b2 <__d2b+0x72>
 80068e8:	0800717a 	.word	0x0800717a
 80068ec:	0800718b 	.word	0x0800718b

080068f0 <__sflush_r>:
 80068f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f6:	0716      	lsls	r6, r2, #28
 80068f8:	4605      	mov	r5, r0
 80068fa:	460c      	mov	r4, r1
 80068fc:	d454      	bmi.n	80069a8 <__sflush_r+0xb8>
 80068fe:	684b      	ldr	r3, [r1, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	dc02      	bgt.n	800690a <__sflush_r+0x1a>
 8006904:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006906:	2b00      	cmp	r3, #0
 8006908:	dd48      	ble.n	800699c <__sflush_r+0xac>
 800690a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800690c:	2e00      	cmp	r6, #0
 800690e:	d045      	beq.n	800699c <__sflush_r+0xac>
 8006910:	2300      	movs	r3, #0
 8006912:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006916:	682f      	ldr	r7, [r5, #0]
 8006918:	6a21      	ldr	r1, [r4, #32]
 800691a:	602b      	str	r3, [r5, #0]
 800691c:	d030      	beq.n	8006980 <__sflush_r+0x90>
 800691e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	0759      	lsls	r1, r3, #29
 8006924:	d505      	bpl.n	8006932 <__sflush_r+0x42>
 8006926:	6863      	ldr	r3, [r4, #4]
 8006928:	1ad2      	subs	r2, r2, r3
 800692a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800692c:	b10b      	cbz	r3, 8006932 <__sflush_r+0x42>
 800692e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006930:	1ad2      	subs	r2, r2, r3
 8006932:	2300      	movs	r3, #0
 8006934:	4628      	mov	r0, r5
 8006936:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006938:	6a21      	ldr	r1, [r4, #32]
 800693a:	47b0      	blx	r6
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	d106      	bne.n	8006950 <__sflush_r+0x60>
 8006942:	6829      	ldr	r1, [r5, #0]
 8006944:	291d      	cmp	r1, #29
 8006946:	d82b      	bhi.n	80069a0 <__sflush_r+0xb0>
 8006948:	4a28      	ldr	r2, [pc, #160]	@ (80069ec <__sflush_r+0xfc>)
 800694a:	40ca      	lsrs	r2, r1
 800694c:	07d6      	lsls	r6, r2, #31
 800694e:	d527      	bpl.n	80069a0 <__sflush_r+0xb0>
 8006950:	2200      	movs	r2, #0
 8006952:	6062      	str	r2, [r4, #4]
 8006954:	6922      	ldr	r2, [r4, #16]
 8006956:	04d9      	lsls	r1, r3, #19
 8006958:	6022      	str	r2, [r4, #0]
 800695a:	d504      	bpl.n	8006966 <__sflush_r+0x76>
 800695c:	1c42      	adds	r2, r0, #1
 800695e:	d101      	bne.n	8006964 <__sflush_r+0x74>
 8006960:	682b      	ldr	r3, [r5, #0]
 8006962:	b903      	cbnz	r3, 8006966 <__sflush_r+0x76>
 8006964:	6560      	str	r0, [r4, #84]	@ 0x54
 8006966:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006968:	602f      	str	r7, [r5, #0]
 800696a:	b1b9      	cbz	r1, 800699c <__sflush_r+0xac>
 800696c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006970:	4299      	cmp	r1, r3
 8006972:	d002      	beq.n	800697a <__sflush_r+0x8a>
 8006974:	4628      	mov	r0, r5
 8006976:	f7ff fb43 	bl	8006000 <_free_r>
 800697a:	2300      	movs	r3, #0
 800697c:	6363      	str	r3, [r4, #52]	@ 0x34
 800697e:	e00d      	b.n	800699c <__sflush_r+0xac>
 8006980:	2301      	movs	r3, #1
 8006982:	4628      	mov	r0, r5
 8006984:	47b0      	blx	r6
 8006986:	4602      	mov	r2, r0
 8006988:	1c50      	adds	r0, r2, #1
 800698a:	d1c9      	bne.n	8006920 <__sflush_r+0x30>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0c6      	beq.n	8006920 <__sflush_r+0x30>
 8006992:	2b1d      	cmp	r3, #29
 8006994:	d001      	beq.n	800699a <__sflush_r+0xaa>
 8006996:	2b16      	cmp	r3, #22
 8006998:	d11d      	bne.n	80069d6 <__sflush_r+0xe6>
 800699a:	602f      	str	r7, [r5, #0]
 800699c:	2000      	movs	r0, #0
 800699e:	e021      	b.n	80069e4 <__sflush_r+0xf4>
 80069a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069a4:	b21b      	sxth	r3, r3
 80069a6:	e01a      	b.n	80069de <__sflush_r+0xee>
 80069a8:	690f      	ldr	r7, [r1, #16]
 80069aa:	2f00      	cmp	r7, #0
 80069ac:	d0f6      	beq.n	800699c <__sflush_r+0xac>
 80069ae:	0793      	lsls	r3, r2, #30
 80069b0:	bf18      	it	ne
 80069b2:	2300      	movne	r3, #0
 80069b4:	680e      	ldr	r6, [r1, #0]
 80069b6:	bf08      	it	eq
 80069b8:	694b      	ldreq	r3, [r1, #20]
 80069ba:	1bf6      	subs	r6, r6, r7
 80069bc:	600f      	str	r7, [r1, #0]
 80069be:	608b      	str	r3, [r1, #8]
 80069c0:	2e00      	cmp	r6, #0
 80069c2:	ddeb      	ble.n	800699c <__sflush_r+0xac>
 80069c4:	4633      	mov	r3, r6
 80069c6:	463a      	mov	r2, r7
 80069c8:	4628      	mov	r0, r5
 80069ca:	6a21      	ldr	r1, [r4, #32]
 80069cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80069d0:	47e0      	blx	ip
 80069d2:	2800      	cmp	r0, #0
 80069d4:	dc07      	bgt.n	80069e6 <__sflush_r+0xf6>
 80069d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069de:	f04f 30ff 	mov.w	r0, #4294967295
 80069e2:	81a3      	strh	r3, [r4, #12]
 80069e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069e6:	4407      	add	r7, r0
 80069e8:	1a36      	subs	r6, r6, r0
 80069ea:	e7e9      	b.n	80069c0 <__sflush_r+0xd0>
 80069ec:	20400001 	.word	0x20400001

080069f0 <_fflush_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	690b      	ldr	r3, [r1, #16]
 80069f4:	4605      	mov	r5, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	b913      	cbnz	r3, 8006a00 <_fflush_r+0x10>
 80069fa:	2500      	movs	r5, #0
 80069fc:	4628      	mov	r0, r5
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	b118      	cbz	r0, 8006a0a <_fflush_r+0x1a>
 8006a02:	6a03      	ldr	r3, [r0, #32]
 8006a04:	b90b      	cbnz	r3, 8006a0a <_fflush_r+0x1a>
 8006a06:	f7fe fb95 	bl	8005134 <__sinit>
 8006a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0f3      	beq.n	80069fa <_fflush_r+0xa>
 8006a12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a14:	07d0      	lsls	r0, r2, #31
 8006a16:	d404      	bmi.n	8006a22 <_fflush_r+0x32>
 8006a18:	0599      	lsls	r1, r3, #22
 8006a1a:	d402      	bmi.n	8006a22 <_fflush_r+0x32>
 8006a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a1e:	f7fe fc80 	bl	8005322 <__retarget_lock_acquire_recursive>
 8006a22:	4628      	mov	r0, r5
 8006a24:	4621      	mov	r1, r4
 8006a26:	f7ff ff63 	bl	80068f0 <__sflush_r>
 8006a2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	07da      	lsls	r2, r3, #31
 8006a30:	d4e4      	bmi.n	80069fc <_fflush_r+0xc>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	059b      	lsls	r3, r3, #22
 8006a36:	d4e1      	bmi.n	80069fc <_fflush_r+0xc>
 8006a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a3a:	f7fe fc73 	bl	8005324 <__retarget_lock_release_recursive>
 8006a3e:	e7dd      	b.n	80069fc <_fflush_r+0xc>

08006a40 <_sbrk_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	2300      	movs	r3, #0
 8006a44:	4d05      	ldr	r5, [pc, #20]	@ (8006a5c <_sbrk_r+0x1c>)
 8006a46:	4604      	mov	r4, r0
 8006a48:	4608      	mov	r0, r1
 8006a4a:	602b      	str	r3, [r5, #0]
 8006a4c:	f7fb fada 	bl	8002004 <_sbrk>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d102      	bne.n	8006a5a <_sbrk_r+0x1a>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	b103      	cbz	r3, 8006a5a <_sbrk_r+0x1a>
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
 8006a5c:	200006d4 	.word	0x200006d4

08006a60 <memcpy>:
 8006a60:	440a      	add	r2, r1
 8006a62:	4291      	cmp	r1, r2
 8006a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a68:	d100      	bne.n	8006a6c <memcpy+0xc>
 8006a6a:	4770      	bx	lr
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a72:	4291      	cmp	r1, r2
 8006a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a78:	d1f9      	bne.n	8006a6e <memcpy+0xe>
 8006a7a:	bd10      	pop	{r4, pc}

08006a7c <__assert_func>:
 8006a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a7e:	4614      	mov	r4, r2
 8006a80:	461a      	mov	r2, r3
 8006a82:	4b09      	ldr	r3, [pc, #36]	@ (8006aa8 <__assert_func+0x2c>)
 8006a84:	4605      	mov	r5, r0
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68d8      	ldr	r0, [r3, #12]
 8006a8a:	b14c      	cbz	r4, 8006aa0 <__assert_func+0x24>
 8006a8c:	4b07      	ldr	r3, [pc, #28]	@ (8006aac <__assert_func+0x30>)
 8006a8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a92:	9100      	str	r1, [sp, #0]
 8006a94:	462b      	mov	r3, r5
 8006a96:	4906      	ldr	r1, [pc, #24]	@ (8006ab0 <__assert_func+0x34>)
 8006a98:	f000 f842 	bl	8006b20 <fiprintf>
 8006a9c:	f000 f852 	bl	8006b44 <abort>
 8006aa0:	4b04      	ldr	r3, [pc, #16]	@ (8006ab4 <__assert_func+0x38>)
 8006aa2:	461c      	mov	r4, r3
 8006aa4:	e7f3      	b.n	8006a8e <__assert_func+0x12>
 8006aa6:	bf00      	nop
 8006aa8:	20000018 	.word	0x20000018
 8006aac:	080071ee 	.word	0x080071ee
 8006ab0:	080071fb 	.word	0x080071fb
 8006ab4:	08007229 	.word	0x08007229

08006ab8 <_calloc_r>:
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	fba1 5402 	umull	r5, r4, r1, r2
 8006abe:	b934      	cbnz	r4, 8006ace <_calloc_r+0x16>
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f7ff fb0f 	bl	80060e4 <_malloc_r>
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	b928      	cbnz	r0, 8006ad6 <_calloc_r+0x1e>
 8006aca:	4630      	mov	r0, r6
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
 8006ace:	220c      	movs	r2, #12
 8006ad0:	2600      	movs	r6, #0
 8006ad2:	6002      	str	r2, [r0, #0]
 8006ad4:	e7f9      	b.n	8006aca <_calloc_r+0x12>
 8006ad6:	462a      	mov	r2, r5
 8006ad8:	4621      	mov	r1, r4
 8006ada:	f7fe fba4 	bl	8005226 <memset>
 8006ade:	e7f4      	b.n	8006aca <_calloc_r+0x12>

08006ae0 <__ascii_mbtowc>:
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	b901      	cbnz	r1, 8006ae6 <__ascii_mbtowc+0x6>
 8006ae4:	a901      	add	r1, sp, #4
 8006ae6:	b142      	cbz	r2, 8006afa <__ascii_mbtowc+0x1a>
 8006ae8:	b14b      	cbz	r3, 8006afe <__ascii_mbtowc+0x1e>
 8006aea:	7813      	ldrb	r3, [r2, #0]
 8006aec:	600b      	str	r3, [r1, #0]
 8006aee:	7812      	ldrb	r2, [r2, #0]
 8006af0:	1e10      	subs	r0, r2, #0
 8006af2:	bf18      	it	ne
 8006af4:	2001      	movne	r0, #1
 8006af6:	b002      	add	sp, #8
 8006af8:	4770      	bx	lr
 8006afa:	4610      	mov	r0, r2
 8006afc:	e7fb      	b.n	8006af6 <__ascii_mbtowc+0x16>
 8006afe:	f06f 0001 	mvn.w	r0, #1
 8006b02:	e7f8      	b.n	8006af6 <__ascii_mbtowc+0x16>

08006b04 <__ascii_wctomb>:
 8006b04:	4603      	mov	r3, r0
 8006b06:	4608      	mov	r0, r1
 8006b08:	b141      	cbz	r1, 8006b1c <__ascii_wctomb+0x18>
 8006b0a:	2aff      	cmp	r2, #255	@ 0xff
 8006b0c:	d904      	bls.n	8006b18 <__ascii_wctomb+0x14>
 8006b0e:	228a      	movs	r2, #138	@ 0x8a
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	4770      	bx	lr
 8006b18:	2001      	movs	r0, #1
 8006b1a:	700a      	strb	r2, [r1, #0]
 8006b1c:	4770      	bx	lr
	...

08006b20 <fiprintf>:
 8006b20:	b40e      	push	{r1, r2, r3}
 8006b22:	b503      	push	{r0, r1, lr}
 8006b24:	4601      	mov	r1, r0
 8006b26:	ab03      	add	r3, sp, #12
 8006b28:	4805      	ldr	r0, [pc, #20]	@ (8006b40 <fiprintf+0x20>)
 8006b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b2e:	6800      	ldr	r0, [r0, #0]
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	f000 f835 	bl	8006ba0 <_vfiprintf_r>
 8006b36:	b002      	add	sp, #8
 8006b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b3c:	b003      	add	sp, #12
 8006b3e:	4770      	bx	lr
 8006b40:	20000018 	.word	0x20000018

08006b44 <abort>:
 8006b44:	2006      	movs	r0, #6
 8006b46:	b508      	push	{r3, lr}
 8006b48:	f000 f9fe 	bl	8006f48 <raise>
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	f7fb f9e4 	bl	8001f1a <_exit>

08006b52 <__sfputc_r>:
 8006b52:	6893      	ldr	r3, [r2, #8]
 8006b54:	b410      	push	{r4}
 8006b56:	3b01      	subs	r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	6093      	str	r3, [r2, #8]
 8006b5c:	da07      	bge.n	8006b6e <__sfputc_r+0x1c>
 8006b5e:	6994      	ldr	r4, [r2, #24]
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	db01      	blt.n	8006b68 <__sfputc_r+0x16>
 8006b64:	290a      	cmp	r1, #10
 8006b66:	d102      	bne.n	8006b6e <__sfputc_r+0x1c>
 8006b68:	bc10      	pop	{r4}
 8006b6a:	f000 b931 	b.w	8006dd0 <__swbuf_r>
 8006b6e:	6813      	ldr	r3, [r2, #0]
 8006b70:	1c58      	adds	r0, r3, #1
 8006b72:	6010      	str	r0, [r2, #0]
 8006b74:	7019      	strb	r1, [r3, #0]
 8006b76:	4608      	mov	r0, r1
 8006b78:	bc10      	pop	{r4}
 8006b7a:	4770      	bx	lr

08006b7c <__sfputs_r>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	4606      	mov	r6, r0
 8006b80:	460f      	mov	r7, r1
 8006b82:	4614      	mov	r4, r2
 8006b84:	18d5      	adds	r5, r2, r3
 8006b86:	42ac      	cmp	r4, r5
 8006b88:	d101      	bne.n	8006b8e <__sfputs_r+0x12>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e007      	b.n	8006b9e <__sfputs_r+0x22>
 8006b8e:	463a      	mov	r2, r7
 8006b90:	4630      	mov	r0, r6
 8006b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b96:	f7ff ffdc 	bl	8006b52 <__sfputc_r>
 8006b9a:	1c43      	adds	r3, r0, #1
 8006b9c:	d1f3      	bne.n	8006b86 <__sfputs_r+0xa>
 8006b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ba0 <_vfiprintf_r>:
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	460d      	mov	r5, r1
 8006ba6:	4614      	mov	r4, r2
 8006ba8:	4698      	mov	r8, r3
 8006baa:	4606      	mov	r6, r0
 8006bac:	b09d      	sub	sp, #116	@ 0x74
 8006bae:	b118      	cbz	r0, 8006bb8 <_vfiprintf_r+0x18>
 8006bb0:	6a03      	ldr	r3, [r0, #32]
 8006bb2:	b90b      	cbnz	r3, 8006bb8 <_vfiprintf_r+0x18>
 8006bb4:	f7fe fabe 	bl	8005134 <__sinit>
 8006bb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bba:	07d9      	lsls	r1, r3, #31
 8006bbc:	d405      	bmi.n	8006bca <_vfiprintf_r+0x2a>
 8006bbe:	89ab      	ldrh	r3, [r5, #12]
 8006bc0:	059a      	lsls	r2, r3, #22
 8006bc2:	d402      	bmi.n	8006bca <_vfiprintf_r+0x2a>
 8006bc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bc6:	f7fe fbac 	bl	8005322 <__retarget_lock_acquire_recursive>
 8006bca:	89ab      	ldrh	r3, [r5, #12]
 8006bcc:	071b      	lsls	r3, r3, #28
 8006bce:	d501      	bpl.n	8006bd4 <_vfiprintf_r+0x34>
 8006bd0:	692b      	ldr	r3, [r5, #16]
 8006bd2:	b99b      	cbnz	r3, 8006bfc <_vfiprintf_r+0x5c>
 8006bd4:	4629      	mov	r1, r5
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	f000 f938 	bl	8006e4c <__swsetup_r>
 8006bdc:	b170      	cbz	r0, 8006bfc <_vfiprintf_r+0x5c>
 8006bde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006be0:	07dc      	lsls	r4, r3, #31
 8006be2:	d504      	bpl.n	8006bee <_vfiprintf_r+0x4e>
 8006be4:	f04f 30ff 	mov.w	r0, #4294967295
 8006be8:	b01d      	add	sp, #116	@ 0x74
 8006bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bee:	89ab      	ldrh	r3, [r5, #12]
 8006bf0:	0598      	lsls	r0, r3, #22
 8006bf2:	d4f7      	bmi.n	8006be4 <_vfiprintf_r+0x44>
 8006bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bf6:	f7fe fb95 	bl	8005324 <__retarget_lock_release_recursive>
 8006bfa:	e7f3      	b.n	8006be4 <_vfiprintf_r+0x44>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c00:	2320      	movs	r3, #32
 8006c02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c06:	2330      	movs	r3, #48	@ 0x30
 8006c08:	f04f 0901 	mov.w	r9, #1
 8006c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c10:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006dbc <_vfiprintf_r+0x21c>
 8006c14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c18:	4623      	mov	r3, r4
 8006c1a:	469a      	mov	sl, r3
 8006c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c20:	b10a      	cbz	r2, 8006c26 <_vfiprintf_r+0x86>
 8006c22:	2a25      	cmp	r2, #37	@ 0x25
 8006c24:	d1f9      	bne.n	8006c1a <_vfiprintf_r+0x7a>
 8006c26:	ebba 0b04 	subs.w	fp, sl, r4
 8006c2a:	d00b      	beq.n	8006c44 <_vfiprintf_r+0xa4>
 8006c2c:	465b      	mov	r3, fp
 8006c2e:	4622      	mov	r2, r4
 8006c30:	4629      	mov	r1, r5
 8006c32:	4630      	mov	r0, r6
 8006c34:	f7ff ffa2 	bl	8006b7c <__sfputs_r>
 8006c38:	3001      	adds	r0, #1
 8006c3a:	f000 80a7 	beq.w	8006d8c <_vfiprintf_r+0x1ec>
 8006c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c40:	445a      	add	r2, fp
 8006c42:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c44:	f89a 3000 	ldrb.w	r3, [sl]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 809f 	beq.w	8006d8c <_vfiprintf_r+0x1ec>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f04f 32ff 	mov.w	r2, #4294967295
 8006c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c58:	f10a 0a01 	add.w	sl, sl, #1
 8006c5c:	9304      	str	r3, [sp, #16]
 8006c5e:	9307      	str	r3, [sp, #28]
 8006c60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c64:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c66:	4654      	mov	r4, sl
 8006c68:	2205      	movs	r2, #5
 8006c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c6e:	4853      	ldr	r0, [pc, #332]	@ (8006dbc <_vfiprintf_r+0x21c>)
 8006c70:	f7fe fb59 	bl	8005326 <memchr>
 8006c74:	9a04      	ldr	r2, [sp, #16]
 8006c76:	b9d8      	cbnz	r0, 8006cb0 <_vfiprintf_r+0x110>
 8006c78:	06d1      	lsls	r1, r2, #27
 8006c7a:	bf44      	itt	mi
 8006c7c:	2320      	movmi	r3, #32
 8006c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c82:	0713      	lsls	r3, r2, #28
 8006c84:	bf44      	itt	mi
 8006c86:	232b      	movmi	r3, #43	@ 0x2b
 8006c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c92:	d015      	beq.n	8006cc0 <_vfiprintf_r+0x120>
 8006c94:	4654      	mov	r4, sl
 8006c96:	2000      	movs	r0, #0
 8006c98:	f04f 0c0a 	mov.w	ip, #10
 8006c9c:	9a07      	ldr	r2, [sp, #28]
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ca4:	3b30      	subs	r3, #48	@ 0x30
 8006ca6:	2b09      	cmp	r3, #9
 8006ca8:	d94b      	bls.n	8006d42 <_vfiprintf_r+0x1a2>
 8006caa:	b1b0      	cbz	r0, 8006cda <_vfiprintf_r+0x13a>
 8006cac:	9207      	str	r2, [sp, #28]
 8006cae:	e014      	b.n	8006cda <_vfiprintf_r+0x13a>
 8006cb0:	eba0 0308 	sub.w	r3, r0, r8
 8006cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	46a2      	mov	sl, r4
 8006cbc:	9304      	str	r3, [sp, #16]
 8006cbe:	e7d2      	b.n	8006c66 <_vfiprintf_r+0xc6>
 8006cc0:	9b03      	ldr	r3, [sp, #12]
 8006cc2:	1d19      	adds	r1, r3, #4
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	9103      	str	r1, [sp, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	bfbb      	ittet	lt
 8006ccc:	425b      	neglt	r3, r3
 8006cce:	f042 0202 	orrlt.w	r2, r2, #2
 8006cd2:	9307      	strge	r3, [sp, #28]
 8006cd4:	9307      	strlt	r3, [sp, #28]
 8006cd6:	bfb8      	it	lt
 8006cd8:	9204      	strlt	r2, [sp, #16]
 8006cda:	7823      	ldrb	r3, [r4, #0]
 8006cdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cde:	d10a      	bne.n	8006cf6 <_vfiprintf_r+0x156>
 8006ce0:	7863      	ldrb	r3, [r4, #1]
 8006ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ce4:	d132      	bne.n	8006d4c <_vfiprintf_r+0x1ac>
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	3402      	adds	r4, #2
 8006cea:	1d1a      	adds	r2, r3, #4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	9203      	str	r2, [sp, #12]
 8006cf0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cf4:	9305      	str	r3, [sp, #20]
 8006cf6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006dc0 <_vfiprintf_r+0x220>
 8006cfa:	2203      	movs	r2, #3
 8006cfc:	4650      	mov	r0, sl
 8006cfe:	7821      	ldrb	r1, [r4, #0]
 8006d00:	f7fe fb11 	bl	8005326 <memchr>
 8006d04:	b138      	cbz	r0, 8006d16 <_vfiprintf_r+0x176>
 8006d06:	2240      	movs	r2, #64	@ 0x40
 8006d08:	9b04      	ldr	r3, [sp, #16]
 8006d0a:	eba0 000a 	sub.w	r0, r0, sl
 8006d0e:	4082      	lsls	r2, r0
 8006d10:	4313      	orrs	r3, r2
 8006d12:	3401      	adds	r4, #1
 8006d14:	9304      	str	r3, [sp, #16]
 8006d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d1a:	2206      	movs	r2, #6
 8006d1c:	4829      	ldr	r0, [pc, #164]	@ (8006dc4 <_vfiprintf_r+0x224>)
 8006d1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d22:	f7fe fb00 	bl	8005326 <memchr>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d03f      	beq.n	8006daa <_vfiprintf_r+0x20a>
 8006d2a:	4b27      	ldr	r3, [pc, #156]	@ (8006dc8 <_vfiprintf_r+0x228>)
 8006d2c:	bb1b      	cbnz	r3, 8006d76 <_vfiprintf_r+0x1d6>
 8006d2e:	9b03      	ldr	r3, [sp, #12]
 8006d30:	3307      	adds	r3, #7
 8006d32:	f023 0307 	bic.w	r3, r3, #7
 8006d36:	3308      	adds	r3, #8
 8006d38:	9303      	str	r3, [sp, #12]
 8006d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d3c:	443b      	add	r3, r7
 8006d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d40:	e76a      	b.n	8006c18 <_vfiprintf_r+0x78>
 8006d42:	460c      	mov	r4, r1
 8006d44:	2001      	movs	r0, #1
 8006d46:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d4a:	e7a8      	b.n	8006c9e <_vfiprintf_r+0xfe>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f04f 0c0a 	mov.w	ip, #10
 8006d52:	4619      	mov	r1, r3
 8006d54:	3401      	adds	r4, #1
 8006d56:	9305      	str	r3, [sp, #20]
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d5e:	3a30      	subs	r2, #48	@ 0x30
 8006d60:	2a09      	cmp	r2, #9
 8006d62:	d903      	bls.n	8006d6c <_vfiprintf_r+0x1cc>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0c6      	beq.n	8006cf6 <_vfiprintf_r+0x156>
 8006d68:	9105      	str	r1, [sp, #20]
 8006d6a:	e7c4      	b.n	8006cf6 <_vfiprintf_r+0x156>
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	2301      	movs	r3, #1
 8006d70:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d74:	e7f0      	b.n	8006d58 <_vfiprintf_r+0x1b8>
 8006d76:	ab03      	add	r3, sp, #12
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	462a      	mov	r2, r5
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	4b13      	ldr	r3, [pc, #76]	@ (8006dcc <_vfiprintf_r+0x22c>)
 8006d80:	a904      	add	r1, sp, #16
 8006d82:	f7fd fd8f 	bl	80048a4 <_printf_float>
 8006d86:	4607      	mov	r7, r0
 8006d88:	1c78      	adds	r0, r7, #1
 8006d8a:	d1d6      	bne.n	8006d3a <_vfiprintf_r+0x19a>
 8006d8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d8e:	07d9      	lsls	r1, r3, #31
 8006d90:	d405      	bmi.n	8006d9e <_vfiprintf_r+0x1fe>
 8006d92:	89ab      	ldrh	r3, [r5, #12]
 8006d94:	059a      	lsls	r2, r3, #22
 8006d96:	d402      	bmi.n	8006d9e <_vfiprintf_r+0x1fe>
 8006d98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d9a:	f7fe fac3 	bl	8005324 <__retarget_lock_release_recursive>
 8006d9e:	89ab      	ldrh	r3, [r5, #12]
 8006da0:	065b      	lsls	r3, r3, #25
 8006da2:	f53f af1f 	bmi.w	8006be4 <_vfiprintf_r+0x44>
 8006da6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006da8:	e71e      	b.n	8006be8 <_vfiprintf_r+0x48>
 8006daa:	ab03      	add	r3, sp, #12
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	462a      	mov	r2, r5
 8006db0:	4630      	mov	r0, r6
 8006db2:	4b06      	ldr	r3, [pc, #24]	@ (8006dcc <_vfiprintf_r+0x22c>)
 8006db4:	a904      	add	r1, sp, #16
 8006db6:	f7fe f813 	bl	8004de0 <_printf_i>
 8006dba:	e7e4      	b.n	8006d86 <_vfiprintf_r+0x1e6>
 8006dbc:	0800722a 	.word	0x0800722a
 8006dc0:	08007230 	.word	0x08007230
 8006dc4:	08007234 	.word	0x08007234
 8006dc8:	080048a5 	.word	0x080048a5
 8006dcc:	08006b7d 	.word	0x08006b7d

08006dd0 <__swbuf_r>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	460e      	mov	r6, r1
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	b118      	cbz	r0, 8006de2 <__swbuf_r+0x12>
 8006dda:	6a03      	ldr	r3, [r0, #32]
 8006ddc:	b90b      	cbnz	r3, 8006de2 <__swbuf_r+0x12>
 8006dde:	f7fe f9a9 	bl	8005134 <__sinit>
 8006de2:	69a3      	ldr	r3, [r4, #24]
 8006de4:	60a3      	str	r3, [r4, #8]
 8006de6:	89a3      	ldrh	r3, [r4, #12]
 8006de8:	071a      	lsls	r2, r3, #28
 8006dea:	d501      	bpl.n	8006df0 <__swbuf_r+0x20>
 8006dec:	6923      	ldr	r3, [r4, #16]
 8006dee:	b943      	cbnz	r3, 8006e02 <__swbuf_r+0x32>
 8006df0:	4621      	mov	r1, r4
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 f82a 	bl	8006e4c <__swsetup_r>
 8006df8:	b118      	cbz	r0, 8006e02 <__swbuf_r+0x32>
 8006dfa:	f04f 37ff 	mov.w	r7, #4294967295
 8006dfe:	4638      	mov	r0, r7
 8006e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	6922      	ldr	r2, [r4, #16]
 8006e06:	b2f6      	uxtb	r6, r6
 8006e08:	1a98      	subs	r0, r3, r2
 8006e0a:	6963      	ldr	r3, [r4, #20]
 8006e0c:	4637      	mov	r7, r6
 8006e0e:	4283      	cmp	r3, r0
 8006e10:	dc05      	bgt.n	8006e1e <__swbuf_r+0x4e>
 8006e12:	4621      	mov	r1, r4
 8006e14:	4628      	mov	r0, r5
 8006e16:	f7ff fdeb 	bl	80069f0 <_fflush_r>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d1ed      	bne.n	8006dfa <__swbuf_r+0x2a>
 8006e1e:	68a3      	ldr	r3, [r4, #8]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	60a3      	str	r3, [r4, #8]
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	1c5a      	adds	r2, r3, #1
 8006e28:	6022      	str	r2, [r4, #0]
 8006e2a:	701e      	strb	r6, [r3, #0]
 8006e2c:	6962      	ldr	r2, [r4, #20]
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d004      	beq.n	8006e3e <__swbuf_r+0x6e>
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	07db      	lsls	r3, r3, #31
 8006e38:	d5e1      	bpl.n	8006dfe <__swbuf_r+0x2e>
 8006e3a:	2e0a      	cmp	r6, #10
 8006e3c:	d1df      	bne.n	8006dfe <__swbuf_r+0x2e>
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4628      	mov	r0, r5
 8006e42:	f7ff fdd5 	bl	80069f0 <_fflush_r>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d0d9      	beq.n	8006dfe <__swbuf_r+0x2e>
 8006e4a:	e7d6      	b.n	8006dfa <__swbuf_r+0x2a>

08006e4c <__swsetup_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4b29      	ldr	r3, [pc, #164]	@ (8006ef4 <__swsetup_r+0xa8>)
 8006e50:	4605      	mov	r5, r0
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	460c      	mov	r4, r1
 8006e56:	b118      	cbz	r0, 8006e60 <__swsetup_r+0x14>
 8006e58:	6a03      	ldr	r3, [r0, #32]
 8006e5a:	b90b      	cbnz	r3, 8006e60 <__swsetup_r+0x14>
 8006e5c:	f7fe f96a 	bl	8005134 <__sinit>
 8006e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e64:	0719      	lsls	r1, r3, #28
 8006e66:	d422      	bmi.n	8006eae <__swsetup_r+0x62>
 8006e68:	06da      	lsls	r2, r3, #27
 8006e6a:	d407      	bmi.n	8006e7c <__swsetup_r+0x30>
 8006e6c:	2209      	movs	r2, #9
 8006e6e:	602a      	str	r2, [r5, #0]
 8006e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e74:	f04f 30ff 	mov.w	r0, #4294967295
 8006e78:	81a3      	strh	r3, [r4, #12]
 8006e7a:	e033      	b.n	8006ee4 <__swsetup_r+0x98>
 8006e7c:	0758      	lsls	r0, r3, #29
 8006e7e:	d512      	bpl.n	8006ea6 <__swsetup_r+0x5a>
 8006e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e82:	b141      	cbz	r1, 8006e96 <__swsetup_r+0x4a>
 8006e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e88:	4299      	cmp	r1, r3
 8006e8a:	d002      	beq.n	8006e92 <__swsetup_r+0x46>
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	f7ff f8b7 	bl	8006000 <_free_r>
 8006e92:	2300      	movs	r3, #0
 8006e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e9c:	81a3      	strh	r3, [r4, #12]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6063      	str	r3, [r4, #4]
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f043 0308 	orr.w	r3, r3, #8
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	6923      	ldr	r3, [r4, #16]
 8006eb0:	b94b      	cbnz	r3, 8006ec6 <__swsetup_r+0x7a>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ebc:	d003      	beq.n	8006ec6 <__swsetup_r+0x7a>
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f000 f882 	bl	8006fca <__smakebuf_r>
 8006ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eca:	f013 0201 	ands.w	r2, r3, #1
 8006ece:	d00a      	beq.n	8006ee6 <__swsetup_r+0x9a>
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	60a2      	str	r2, [r4, #8]
 8006ed4:	6962      	ldr	r2, [r4, #20]
 8006ed6:	4252      	negs	r2, r2
 8006ed8:	61a2      	str	r2, [r4, #24]
 8006eda:	6922      	ldr	r2, [r4, #16]
 8006edc:	b942      	cbnz	r2, 8006ef0 <__swsetup_r+0xa4>
 8006ede:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ee2:	d1c5      	bne.n	8006e70 <__swsetup_r+0x24>
 8006ee4:	bd38      	pop	{r3, r4, r5, pc}
 8006ee6:	0799      	lsls	r1, r3, #30
 8006ee8:	bf58      	it	pl
 8006eea:	6962      	ldrpl	r2, [r4, #20]
 8006eec:	60a2      	str	r2, [r4, #8]
 8006eee:	e7f4      	b.n	8006eda <__swsetup_r+0x8e>
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	e7f7      	b.n	8006ee4 <__swsetup_r+0x98>
 8006ef4:	20000018 	.word	0x20000018

08006ef8 <_raise_r>:
 8006ef8:	291f      	cmp	r1, #31
 8006efa:	b538      	push	{r3, r4, r5, lr}
 8006efc:	4605      	mov	r5, r0
 8006efe:	460c      	mov	r4, r1
 8006f00:	d904      	bls.n	8006f0c <_raise_r+0x14>
 8006f02:	2316      	movs	r3, #22
 8006f04:	6003      	str	r3, [r0, #0]
 8006f06:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f0e:	b112      	cbz	r2, 8006f16 <_raise_r+0x1e>
 8006f10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f14:	b94b      	cbnz	r3, 8006f2a <_raise_r+0x32>
 8006f16:	4628      	mov	r0, r5
 8006f18:	f000 f830 	bl	8006f7c <_getpid_r>
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	4601      	mov	r1, r0
 8006f20:	4628      	mov	r0, r5
 8006f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f26:	f000 b817 	b.w	8006f58 <_kill_r>
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d00a      	beq.n	8006f44 <_raise_r+0x4c>
 8006f2e:	1c59      	adds	r1, r3, #1
 8006f30:	d103      	bne.n	8006f3a <_raise_r+0x42>
 8006f32:	2316      	movs	r3, #22
 8006f34:	6003      	str	r3, [r0, #0]
 8006f36:	2001      	movs	r0, #1
 8006f38:	e7e7      	b.n	8006f0a <_raise_r+0x12>
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006f42:	4798      	blx	r3
 8006f44:	2000      	movs	r0, #0
 8006f46:	e7e0      	b.n	8006f0a <_raise_r+0x12>

08006f48 <raise>:
 8006f48:	4b02      	ldr	r3, [pc, #8]	@ (8006f54 <raise+0xc>)
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	f7ff bfd3 	b.w	8006ef8 <_raise_r>
 8006f52:	bf00      	nop
 8006f54:	20000018 	.word	0x20000018

08006f58 <_kill_r>:
 8006f58:	b538      	push	{r3, r4, r5, lr}
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4d06      	ldr	r5, [pc, #24]	@ (8006f78 <_kill_r+0x20>)
 8006f5e:	4604      	mov	r4, r0
 8006f60:	4608      	mov	r0, r1
 8006f62:	4611      	mov	r1, r2
 8006f64:	602b      	str	r3, [r5, #0]
 8006f66:	f7fa ffc8 	bl	8001efa <_kill>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	d102      	bne.n	8006f74 <_kill_r+0x1c>
 8006f6e:	682b      	ldr	r3, [r5, #0]
 8006f70:	b103      	cbz	r3, 8006f74 <_kill_r+0x1c>
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	bd38      	pop	{r3, r4, r5, pc}
 8006f76:	bf00      	nop
 8006f78:	200006d4 	.word	0x200006d4

08006f7c <_getpid_r>:
 8006f7c:	f7fa bfb6 	b.w	8001eec <_getpid>

08006f80 <__swhatbuf_r>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	460c      	mov	r4, r1
 8006f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f88:	4615      	mov	r5, r2
 8006f8a:	2900      	cmp	r1, #0
 8006f8c:	461e      	mov	r6, r3
 8006f8e:	b096      	sub	sp, #88	@ 0x58
 8006f90:	da0c      	bge.n	8006fac <__swhatbuf_r+0x2c>
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	2100      	movs	r1, #0
 8006f96:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f9a:	bf14      	ite	ne
 8006f9c:	2340      	movne	r3, #64	@ 0x40
 8006f9e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	6031      	str	r1, [r6, #0]
 8006fa6:	602b      	str	r3, [r5, #0]
 8006fa8:	b016      	add	sp, #88	@ 0x58
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	466a      	mov	r2, sp
 8006fae:	f000 f849 	bl	8007044 <_fstat_r>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	dbed      	blt.n	8006f92 <__swhatbuf_r+0x12>
 8006fb6:	9901      	ldr	r1, [sp, #4]
 8006fb8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006fbc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006fc0:	4259      	negs	r1, r3
 8006fc2:	4159      	adcs	r1, r3
 8006fc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fc8:	e7eb      	b.n	8006fa2 <__swhatbuf_r+0x22>

08006fca <__smakebuf_r>:
 8006fca:	898b      	ldrh	r3, [r1, #12]
 8006fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fce:	079d      	lsls	r5, r3, #30
 8006fd0:	4606      	mov	r6, r0
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	d507      	bpl.n	8006fe6 <__smakebuf_r+0x1c>
 8006fd6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fda:	6023      	str	r3, [r4, #0]
 8006fdc:	6123      	str	r3, [r4, #16]
 8006fde:	2301      	movs	r3, #1
 8006fe0:	6163      	str	r3, [r4, #20]
 8006fe2:	b003      	add	sp, #12
 8006fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe6:	466a      	mov	r2, sp
 8006fe8:	ab01      	add	r3, sp, #4
 8006fea:	f7ff ffc9 	bl	8006f80 <__swhatbuf_r>
 8006fee:	9f00      	ldr	r7, [sp, #0]
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f7ff f875 	bl	80060e4 <_malloc_r>
 8006ffa:	b948      	cbnz	r0, 8007010 <__smakebuf_r+0x46>
 8006ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007000:	059a      	lsls	r2, r3, #22
 8007002:	d4ee      	bmi.n	8006fe2 <__smakebuf_r+0x18>
 8007004:	f023 0303 	bic.w	r3, r3, #3
 8007008:	f043 0302 	orr.w	r3, r3, #2
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	e7e2      	b.n	8006fd6 <__smakebuf_r+0xc>
 8007010:	89a3      	ldrh	r3, [r4, #12]
 8007012:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800701a:	81a3      	strh	r3, [r4, #12]
 800701c:	9b01      	ldr	r3, [sp, #4]
 800701e:	6020      	str	r0, [r4, #0]
 8007020:	b15b      	cbz	r3, 800703a <__smakebuf_r+0x70>
 8007022:	4630      	mov	r0, r6
 8007024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007028:	f000 f81e 	bl	8007068 <_isatty_r>
 800702c:	b128      	cbz	r0, 800703a <__smakebuf_r+0x70>
 800702e:	89a3      	ldrh	r3, [r4, #12]
 8007030:	f023 0303 	bic.w	r3, r3, #3
 8007034:	f043 0301 	orr.w	r3, r3, #1
 8007038:	81a3      	strh	r3, [r4, #12]
 800703a:	89a3      	ldrh	r3, [r4, #12]
 800703c:	431d      	orrs	r5, r3
 800703e:	81a5      	strh	r5, [r4, #12]
 8007040:	e7cf      	b.n	8006fe2 <__smakebuf_r+0x18>
	...

08007044 <_fstat_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	2300      	movs	r3, #0
 8007048:	4d06      	ldr	r5, [pc, #24]	@ (8007064 <_fstat_r+0x20>)
 800704a:	4604      	mov	r4, r0
 800704c:	4608      	mov	r0, r1
 800704e:	4611      	mov	r1, r2
 8007050:	602b      	str	r3, [r5, #0]
 8007052:	f7fa ffb1 	bl	8001fb8 <_fstat>
 8007056:	1c43      	adds	r3, r0, #1
 8007058:	d102      	bne.n	8007060 <_fstat_r+0x1c>
 800705a:	682b      	ldr	r3, [r5, #0]
 800705c:	b103      	cbz	r3, 8007060 <_fstat_r+0x1c>
 800705e:	6023      	str	r3, [r4, #0]
 8007060:	bd38      	pop	{r3, r4, r5, pc}
 8007062:	bf00      	nop
 8007064:	200006d4 	.word	0x200006d4

08007068 <_isatty_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	2300      	movs	r3, #0
 800706c:	4d05      	ldr	r5, [pc, #20]	@ (8007084 <_isatty_r+0x1c>)
 800706e:	4604      	mov	r4, r0
 8007070:	4608      	mov	r0, r1
 8007072:	602b      	str	r3, [r5, #0]
 8007074:	f7fa ffaf 	bl	8001fd6 <_isatty>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_isatty_r+0x1a>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_isatty_r+0x1a>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	200006d4 	.word	0x200006d4

08007088 <_init>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	bf00      	nop
 800708c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708e:	bc08      	pop	{r3}
 8007090:	469e      	mov	lr, r3
 8007092:	4770      	bx	lr

08007094 <_fini>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	bf00      	nop
 8007098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709a:	bc08      	pop	{r3}
 800709c:	469e      	mov	lr, r3
 800709e:	4770      	bx	lr
