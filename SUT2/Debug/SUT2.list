
SUT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f48  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08006058  08006058  00007058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c4  080064c4  000081d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080064c4  080064c4  000074c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064cc  080064cc  000081d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064cc  080064cc  000074cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064d0  080064d0  000074d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080064d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200001d8  080066ac  000081d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  080066ac  00008574  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b638  00000000  00000000  00008201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aef  00000000  00000000  00013839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00015328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093a  00000000  00000000  00015ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018369  00000000  00000000  0001682a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dee7  00000000  00000000  0002eb93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b88  00000000  00000000  0003ca7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5602  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004398  00000000  00000000  000c5648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c99e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006040 	.word	0x08006040

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08006040 	.word	0x08006040

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__gesf2>:
 8000ca4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ca8:	e006      	b.n	8000cb8 <__cmpsf2+0x4>
 8000caa:	bf00      	nop

08000cac <__lesf2>:
 8000cac:	f04f 0c01 	mov.w	ip, #1
 8000cb0:	e002      	b.n	8000cb8 <__cmpsf2+0x4>
 8000cb2:	bf00      	nop

08000cb4 <__cmpsf2>:
 8000cb4:	f04f 0c01 	mov.w	ip, #1
 8000cb8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc8:	bf18      	it	ne
 8000cca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cce:	d011      	beq.n	8000cf4 <__cmpsf2+0x40>
 8000cd0:	b001      	add	sp, #4
 8000cd2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cd6:	bf18      	it	ne
 8000cd8:	ea90 0f01 	teqne	r0, r1
 8000cdc:	bf58      	it	pl
 8000cde:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ce2:	bf88      	it	hi
 8000ce4:	17c8      	asrhi	r0, r1, #31
 8000ce6:	bf38      	it	cc
 8000ce8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cec:	bf18      	it	ne
 8000cee:	f040 0001 	orrne.w	r0, r0, #1
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	d102      	bne.n	8000d00 <__cmpsf2+0x4c>
 8000cfa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cfe:	d105      	bne.n	8000d0c <__cmpsf2+0x58>
 8000d00:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d04:	d1e4      	bne.n	8000cd0 <__cmpsf2+0x1c>
 8000d06:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d0a:	d0e1      	beq.n	8000cd0 <__cmpsf2+0x1c>
 8000d0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <__aeabi_cfrcmple>:
 8000d14:	4684      	mov	ip, r0
 8000d16:	4608      	mov	r0, r1
 8000d18:	4661      	mov	r1, ip
 8000d1a:	e7ff      	b.n	8000d1c <__aeabi_cfcmpeq>

08000d1c <__aeabi_cfcmpeq>:
 8000d1c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d1e:	f7ff ffc9 	bl	8000cb4 <__cmpsf2>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	bf48      	it	mi
 8000d26:	f110 0f00 	cmnmi.w	r0, #0
 8000d2a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d2c <__aeabi_fcmpeq>:
 8000d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d30:	f7ff fff4 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d34:	bf0c      	ite	eq
 8000d36:	2001      	moveq	r0, #1
 8000d38:	2000      	movne	r0, #0
 8000d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3e:	bf00      	nop

08000d40 <__aeabi_fcmplt>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff ffea 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d48:	bf34      	ite	cc
 8000d4a:	2001      	movcc	r0, #1
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_fcmple>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffe0 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d5c:	bf94      	ite	ls
 8000d5e:	2001      	movls	r0, #1
 8000d60:	2000      	movhi	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_fcmpge>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffd2 	bl	8000d14 <__aeabi_cfrcmple>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_fcmpgt>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffc8 	bl	8000d14 <__aeabi_cfrcmple>
 8000d84:	bf34      	ite	cc
 8000d86:	2001      	movcc	r0, #1
 8000d88:	2000      	movcs	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b5b0      	push	{r4, r5, r7, lr}
 8000d92:	b08c      	sub	sp, #48	@ 0x30
 8000d94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d96:	f000 ff85 	bl	8001ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9a:	f000 f87d 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9e:	f000 f9a3 	bl	80010e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000da2:	f000 f8bf 	bl	8000f24 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000da6:	f000 f8eb 	bl	8000f80 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000daa:	f000 f91f 	bl	8000fec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000dae:	f000 f947 	bl	8001040 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000db2:	f000 f96f 	bl	8001094 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  InitializeGPIO();
 8000db6:	f000 f9c5 	bl	8001144 <InitializeGPIO>

  // Enable UART1 receive interrupt for commands (5 bytes)
  HAL_UART_Receive_IT(&huart1, command_buffer, COMMAND_BUFFER_SIZE);
 8000dba:	2205      	movs	r2, #5
 8000dbc:	492d      	ldr	r1, [pc, #180]	@ (8000e74 <main+0xe4>)
 8000dbe:	482e      	ldr	r0, [pc, #184]	@ (8000e78 <main+0xe8>)
 8000dc0:	f002 f929 	bl	8003016 <HAL_UART_Receive_IT>
  // Also enable interrupt for telemetry data (36 bytes)
  // Note: We'll need to handle both types of packets

  // For testing: Automatically start SUT mode
  // Remove this in production
  system_state = STATE_SYNTHETIC_FLIGHT;
 8000dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e7c <main+0xec>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	701a      	strb	r2, [r3, #0]
  
  // Send initial status to verify UART is working
  HAL_Delay(1000); // Wait 1 second
 8000dca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dce:	f000 ffcb 	bl	8001d68 <HAL_Delay>
  TransmitStatus();
 8000dd2:	f000 fc39 	bl	8001648 <TransmitStatus>
  
  // Send a test message to verify UART transmission
  uint8_t test_msg[] = "ROCKET CONTROL SYSTEM READY\r\n";
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e80 <main+0xf0>)
 8000dd8:	1d3c      	adds	r4, r7, #4
 8000dda:	461d      	mov	r5, r3
 8000ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000de4:	c407      	stmia	r4!, {r0, r1, r2}
 8000de6:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, test_msg, sizeof(test_msg)-1, 100);
 8000de8:	1d39      	adds	r1, r7, #4
 8000dea:	2364      	movs	r3, #100	@ 0x64
 8000dec:	221d      	movs	r2, #29
 8000dee:	4822      	ldr	r0, [pc, #136]	@ (8000e78 <main+0xe8>)
 8000df0:	f002 f886 	bl	8002f00 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	snprintf(debug_msg, sizeof(debug_msg), "Altitude: %.2f m\r\n", current_telemetry.altitude);
 8000df4:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <main+0xf4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fb15 	bl	8000428 <__aeabi_f2d>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	e9cd 2300 	strd	r2, r3, [sp]
 8000e06:	4a20      	ldr	r2, [pc, #128]	@ (8000e88 <main+0xf8>)
 8000e08:	2164      	movs	r1, #100	@ 0x64
 8000e0a:	4820      	ldr	r0, [pc, #128]	@ (8000e8c <main+0xfc>)
 8000e0c:	f002 ffc6 	bl	8003d9c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 8000e10:	481e      	ldr	r0, [pc, #120]	@ (8000e8c <main+0xfc>)
 8000e12:	f7ff f99d 	bl	8000150 <strlen>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	2364      	movs	r3, #100	@ 0x64
 8000e1c:	491b      	ldr	r1, [pc, #108]	@ (8000e8c <main+0xfc>)
 8000e1e:	4816      	ldr	r0, [pc, #88]	@ (8000e78 <main+0xe8>)
 8000e20:	f002 f86e 	bl	8002f00 <HAL_UART_Transmit>
	HAL_Delay(10);
 8000e24:	200a      	movs	r0, #10
 8000e26:	f000 ff9f 	bl	8001d68 <HAL_Delay>


    /* USER CODE BEGIN 3 */
    // Get current time once for this loop iteration
    uint32_t current_time = HAL_GetTick();
 8000e2a:	f000 ff93 	bl	8001d54 <HAL_GetTick>
 8000e2e:	6278      	str	r0, [r7, #36]	@ 0x24
    
    // Process incoming telemetry data
    if (system_state != STATE_IDLE) {
 8000e30:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <main+0xec>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00f      	beq.n	8000e58 <main+0xc8>
      // Check for telemetry data (this would typically come from sensors)
      // For now, we'll simulate telemetry data reception
      
      // Update flight status based on current telemetry
      UpdateFlightStatus();
 8000e38:	f000 f9e6 	bl	8001208 <UpdateFlightStatus>
      
      // Transmit status periodically
      if (current_time - last_status_transmission >= status_transmission_interval) {
 8000e3c:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <main+0x100>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e42:	1ad2      	subs	r2, r2, r3
 8000e44:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <main+0x104>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d3d3      	bcc.n	8000df4 <main+0x64>
        TransmitStatus();
 8000e4c:	f000 fbfc 	bl	8001648 <TransmitStatus>
        last_status_transmission = current_time;
 8000e50:	4a0f      	ldr	r2, [pc, #60]	@ (8000e90 <main+0x100>)
 8000e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e7cd      	b.n	8000df4 <main+0x64>
      }
    } else {
      // Even in IDLE state, transmit status to show system is alive
      if (current_time - last_status_transmission >= status_transmission_interval) {
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <main+0x100>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e5e:	1ad2      	subs	r2, r2, r3
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <main+0x104>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d3c5      	bcc.n	8000df4 <main+0x64>
        TransmitStatus();
 8000e68:	f000 fbee 	bl	8001648 <TransmitStatus>
        last_status_transmission = current_time;
 8000e6c:	4a08      	ldr	r2, [pc, #32]	@ (8000e90 <main+0x100>)
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e70:	6013      	str	r3, [r2, #0]
  {
 8000e72:	e7bf      	b.n	8000df4 <main+0x64>
 8000e74:	200003a8 	.word	0x200003a8
 8000e78:	200002a0 	.word	0x200002a0
 8000e7c:	2000039c 	.word	0x2000039c
 8000e80:	0800606c 	.word	0x0800606c
 8000e84:	2000037c 	.word	0x2000037c
 8000e88:	08006058 	.word	0x08006058
 8000e8c:	200003bc 	.word	0x200003bc
 8000e90:	200003a4 	.word	0x200003a4
 8000e94:	20000000 	.word	0x20000000

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b090      	sub	sp, #64	@ 0x40
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	2228      	movs	r2, #40	@ 0x28
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 fff1 	bl	8003e8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ebe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ed6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 fb29 	bl	8002538 <HAL_RCC_OscConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000eec:	f000 fc40 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000efc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fd96 	bl	8002a3c <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f16:	f000 fc2b 	bl	8001770 <Error_Handler>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3740      	adds	r7, #64	@ 0x40
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <MX_I2C1_Init+0x50>)
 8000f2a:	4a13      	ldr	r2, [pc, #76]	@ (8000f78 <MX_I2C1_Init+0x54>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <MX_I2C1_Init+0x50>)
 8000f30:	4a12      	ldr	r2, [pc, #72]	@ (8000f7c <MX_I2C1_Init+0x58>)
 8000f32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_I2C1_Init+0x50>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <MX_I2C1_Init+0x50>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <MX_I2C1_Init+0x50>)
 8000f42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f54:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <MX_I2C1_Init+0x50>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_I2C1_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f60:	4804      	ldr	r0, [pc, #16]	@ (8000f74 <MX_I2C1_Init+0x50>)
 8000f62:	f001 f9a5 	bl	80022b0 <HAL_I2C_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f6c:	f000 fc00 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200001f4 	.word	0x200001f4
 8000f78:	40005400 	.word	0x40005400
 8000f7c:	000186a0 	.word	0x000186a0

08000f80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f84:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000f86:	4a18      	ldr	r2, [pc, #96]	@ (8000fe8 <MX_SPI1_Init+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000f8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f92:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fb4:	2210      	movs	r2, #16
 8000fb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fcc:	220a      	movs	r2, #10
 8000fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fd0:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <MX_SPI1_Init+0x64>)
 8000fd2:	f001 fec1 	bl	8002d58 <HAL_SPI_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fdc:	f000 fbc8 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000248 	.word	0x20000248
 8000fe8:	40013000 	.word	0x40013000

08000fec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_USART1_UART_Init+0x4c>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	@ (800103c <MX_USART1_UART_Init+0x50>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <MX_USART1_UART_Init+0x4c>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_USART1_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_USART1_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <MX_USART1_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_USART1_UART_Init+0x4c>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <MX_USART1_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_USART1_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MX_USART1_UART_Init+0x4c>)
 8001024:	f001 ff1c 	bl	8002e60 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800102e:	f000 fb9f 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200002a0 	.word	0x200002a0
 800103c:	40013800 	.word	0x40013800

08001040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <MX_USART2_UART_Init+0x50>)
 8001048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_USART2_UART_Init+0x4c>)
 8001078:	f001 fef2 	bl	8002e60 <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001082:	f000 fb75 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200002e8 	.word	0x200002e8
 8001090:	40004400 	.word	0x40004400

08001094 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <MX_USART3_UART_Init+0x4c>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <MX_USART3_UART_Init+0x50>)
 800109c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010cc:	f001 fec8 	bl	8002e60 <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010d6:	f000 fb4b 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000330 	.word	0x20000330
 80010e4:	40004800 	.word	0x40004800

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ee:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <MX_GPIO_Init+0x58>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <MX_GPIO_Init+0x58>)
 80010f4:	f043 0320 	orr.w	r3, r3, #32
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_GPIO_Init+0x58>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0320 	and.w	r3, r3, #32
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_GPIO_Init+0x58>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	4a0d      	ldr	r2, [pc, #52]	@ (8001140 <MX_GPIO_Init+0x58>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6193      	str	r3, [r2, #24]
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <MX_GPIO_Init+0x58>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <MX_GPIO_Init+0x58>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <MX_GPIO_Init+0x58>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <MX_GPIO_Init+0x58>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	40021000 	.word	0x40021000

08001144 <InitializeGPIO>:
/* USER CODE BEGIN 4 */
/**
 * @brief Initialize GPIO pins for parachute deployment
 */
void InitializeGPIO(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
    
    // Enable GPIOB clock if not already enabled
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <InitializeGPIO+0x7c>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a18      	ldr	r2, [pc, #96]	@ (80011c0 <InitializeGPIO+0x7c>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <InitializeGPIO+0x7c>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
    
    // Configure drogue parachute pin (GPIO 14)
    GPIO_InitStruct.Pin = DROGUE_PARACHUTE_PIN;
 8001170:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001174:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2302      	movs	r3, #2
 8001180:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DROGUE_PARACHUTE_PORT, &GPIO_InitStruct);
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	4619      	mov	r1, r3
 8001188:	480e      	ldr	r0, [pc, #56]	@ (80011c4 <InitializeGPIO+0x80>)
 800118a:	f000 fef5 	bl	8001f78 <HAL_GPIO_Init>
    
    // Configure main parachute pin (GPIO 15)
    GPIO_InitStruct.Pin = MAIN_PARACHUTE_PIN;
 800118e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001192:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(MAIN_PARACHUTE_PORT, &GPIO_InitStruct);
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4619      	mov	r1, r3
 800119a:	480a      	ldr	r0, [pc, #40]	@ (80011c4 <InitializeGPIO+0x80>)
 800119c:	f000 feec 	bl	8001f78 <HAL_GPIO_Init>
    
    // Set both pins to low initially
    HAL_GPIO_WritePin(DROGUE_PARACHUTE_PORT, DROGUE_PARACHUTE_PIN, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011a6:	4807      	ldr	r0, [pc, #28]	@ (80011c4 <InitializeGPIO+0x80>)
 80011a8:	f001 f86a 	bl	8002280 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MAIN_PARACHUTE_PORT, MAIN_PARACHUTE_PIN, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011b2:	4804      	ldr	r0, [pc, #16]	@ (80011c4 <InitializeGPIO+0x80>)
 80011b4:	f001 f864 	bl	8002280 <HAL_GPIO_WritePin>
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010c00 	.word	0x40010c00

080011c8 <CalculateChecksum>:
 * @param data: Pointer to data array
 * @param length: Length of data array
 * @retval Calculated checksum
 */
uint8_t CalculateChecksum(uint8_t* data, uint8_t length)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	73bb      	strb	r3, [r7, #14]
 80011dc:	e009      	b.n	80011f2 <CalculateChecksum+0x2a>
        checksum += data[i];
 80011de:	7bbb      	ldrb	r3, [r7, #14]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	4413      	add	r3, r2
 80011ea:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	3301      	adds	r3, #1
 80011f0:	73bb      	strb	r3, [r7, #14]
 80011f2:	7bba      	ldrb	r2, [r7, #14]
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d3f1      	bcc.n	80011de <CalculateChecksum+0x16>
    }
    return checksum;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
	...

08001208 <UpdateFlightStatus>:

/**
 * @brief Update flight status based on current telemetry data
 */
void UpdateFlightStatus(void)
{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 800120e:	f000 fda1 	bl	8001d54 <HAL_GetTick>
 8001212:	6078      	str	r0, [r7, #4]
    
    // Launch detection
    if (!flight_status.launch_detected && 
 8001214:	4ba3      	ldr	r3, [pc, #652]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d125      	bne.n	800126e <UpdateFlightStatus+0x66>
        fabsf(current_telemetry.accel_z) > LAUNCH_ACCELERATION_THRESHOLD) {
 8001222:	4ba1      	ldr	r3, [pc, #644]	@ (80014a8 <UpdateFlightStatus+0x2a0>)
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    if (!flight_status.launch_detected && 
 800122a:	49a0      	ldr	r1, [pc, #640]	@ (80014ac <UpdateFlightStatus+0x2a4>)
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fda5 	bl	8000d7c <__aeabi_fcmpgt>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d01a      	beq.n	800126e <UpdateFlightStatus+0x66>
        flight_status.launch_detected = 1;
 8001238:	4a9a      	ldr	r2, [pc, #616]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 800123a:	7813      	ldrb	r3, [r2, #0]
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	7013      	strb	r3, [r2, #0]
        launch_timestamp = current_time;
 8001242:	4a9b      	ldr	r2, [pc, #620]	@ (80014b0 <UpdateFlightStatus+0x2a8>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6013      	str	r3, [r2, #0]
        strcpy(debug_msg, "launch_detected");
 8001248:	4a9a      	ldr	r2, [pc, #616]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 800124a:	4b9b      	ldr	r3, [pc, #620]	@ (80014b8 <UpdateFlightStatus+0x2b0>)
 800124c:	4614      	mov	r4, r2
 800124e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 8001254:	4897      	ldr	r0, [pc, #604]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 8001256:	f7fe ff7b 	bl	8000150 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	b29a      	uxth	r2, r3
 800125e:	2364      	movs	r3, #100	@ 0x64
 8001260:	4994      	ldr	r1, [pc, #592]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 8001262:	4896      	ldr	r0, [pc, #600]	@ (80014bc <UpdateFlightStatus+0x2b4>)
 8001264:	f001 fe4c 	bl	8002f00 <HAL_UART_Transmit>
        HAL_Delay(10);
 8001268:	200a      	movs	r0, #10
 800126a:	f000 fd7d 	bl	8001d68 <HAL_Delay>
   }
    
    // Motor burnout delay (5 seconds after launch)
    if (flight_status.launch_detected && !flight_status.motor_burnout_delay_completed &&
 800126e:	4b8d      	ldr	r3, [pc, #564]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d025      	beq.n	80012c8 <UpdateFlightStatus+0xc0>
 800127c:	4b89      	ldr	r3, [pc, #548]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d11e      	bne.n	80012c8 <UpdateFlightStatus+0xc0>
        (current_time - launch_timestamp) >= MOTOR_BURNOUT_DELAY_MS) {
 800128a:	4b89      	ldr	r3, [pc, #548]	@ (80014b0 <UpdateFlightStatus+0x2a8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	1ad3      	subs	r3, r2, r3
    if (flight_status.launch_detected && !flight_status.motor_burnout_delay_completed &&
 8001292:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001296:	4293      	cmp	r3, r2
 8001298:	d916      	bls.n	80012c8 <UpdateFlightStatus+0xc0>
        flight_status.motor_burnout_delay_completed = 1;
 800129a:	4a82      	ldr	r2, [pc, #520]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 800129c:	7813      	ldrb	r3, [r2, #0]
 800129e:	f043 0302 	orr.w	r3, r3, #2
 80012a2:	7013      	strb	r3, [r2, #0]
        strcpy(debug_msg, "burn out");
 80012a4:	4b83      	ldr	r3, [pc, #524]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 80012a6:	4a86      	ldr	r2, [pc, #536]	@ (80014c0 <UpdateFlightStatus+0x2b8>)
 80012a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80012aa:	c303      	stmia	r3!, {r0, r1}
 80012ac:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 80012ae:	4881      	ldr	r0, [pc, #516]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 80012b0:	f7fe ff4e 	bl	8000150 <strlen>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	2364      	movs	r3, #100	@ 0x64
 80012ba:	497e      	ldr	r1, [pc, #504]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 80012bc:	487f      	ldr	r0, [pc, #508]	@ (80014bc <UpdateFlightStatus+0x2b4>)
 80012be:	f001 fe1f 	bl	8002f00 <HAL_UART_Transmit>
		HAL_Delay(10);
 80012c2:	200a      	movs	r0, #10
 80012c4:	f000 fd50 	bl	8001d68 <HAL_Delay>
    }
    
    // Minimum altitude threshold
    if (!flight_status.min_altitude_reached && 
 80012c8:	4b76      	ldr	r3, [pc, #472]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d120      	bne.n	8001318 <UpdateFlightStatus+0x110>
        current_telemetry.altitude > MIN_ALTITUDE_THRESHOLD) {
 80012d6:	4b74      	ldr	r3, [pc, #464]	@ (80014a8 <UpdateFlightStatus+0x2a0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
    if (!flight_status.min_altitude_reached && 
 80012da:	497a      	ldr	r1, [pc, #488]	@ (80014c4 <UpdateFlightStatus+0x2bc>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fd4d 	bl	8000d7c <__aeabi_fcmpgt>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d017      	beq.n	8001318 <UpdateFlightStatus+0x110>
        flight_status.min_altitude_reached = 1;
 80012e8:	4a6e      	ldr	r2, [pc, #440]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 80012ea:	7813      	ldrb	r3, [r2, #0]
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	7013      	strb	r3, [r2, #0]
        strcpy(debug_msg, "min_altitude");
 80012f2:	4a70      	ldr	r2, [pc, #448]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 80012f4:	4b74      	ldr	r3, [pc, #464]	@ (80014c8 <UpdateFlightStatus+0x2c0>)
 80012f6:	4614      	mov	r4, r2
 80012f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fa:	c407      	stmia	r4!, {r0, r1, r2}
 80012fc:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 80012fe:	486d      	ldr	r0, [pc, #436]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 8001300:	f7fe ff26 	bl	8000150 <strlen>
 8001304:	4603      	mov	r3, r0
 8001306:	b29a      	uxth	r2, r3
 8001308:	2364      	movs	r3, #100	@ 0x64
 800130a:	496a      	ldr	r1, [pc, #424]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 800130c:	486b      	ldr	r0, [pc, #428]	@ (80014bc <UpdateFlightStatus+0x2b4>)
 800130e:	f001 fdf7 	bl	8002f00 <HAL_UART_Transmit>
		HAL_Delay(10);
 8001312:	200a      	movs	r0, #10
 8001314:	f000 fd28 	bl	8001d68 <HAL_Delay>
    }
    
    // Excessive tilt detection
    if (!flight_status.excessive_tilt_detected &&
 8001318:	4b62      	ldr	r3, [pc, #392]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d130      	bne.n	8001388 <UpdateFlightStatus+0x180>
        (fabsf(current_telemetry.angle_x) > EXCESSIVE_TILT_THRESHOLD ||
 8001326:	4b60      	ldr	r3, [pc, #384]	@ (80014a8 <UpdateFlightStatus+0x2a0>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    if (!flight_status.excessive_tilt_detected &&
 800132e:	4967      	ldr	r1, [pc, #412]	@ (80014cc <UpdateFlightStatus+0x2c4>)
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fd23 	bl	8000d7c <__aeabi_fcmpgt>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10a      	bne.n	8001352 <UpdateFlightStatus+0x14a>
         fabsf(current_telemetry.angle_y) > EXCESSIVE_TILT_THRESHOLD)) {
 800133c:	4b5a      	ldr	r3, [pc, #360]	@ (80014a8 <UpdateFlightStatus+0x2a0>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
        (fabsf(current_telemetry.angle_x) > EXCESSIVE_TILT_THRESHOLD ||
 8001344:	4961      	ldr	r1, [pc, #388]	@ (80014cc <UpdateFlightStatus+0x2c4>)
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fd18 	bl	8000d7c <__aeabi_fcmpgt>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d01a      	beq.n	8001388 <UpdateFlightStatus+0x180>
        flight_status.excessive_tilt_detected = 1;
 8001352:	4a54      	ldr	r2, [pc, #336]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 8001354:	7813      	ldrb	r3, [r2, #0]
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	7013      	strb	r3, [r2, #0]
        strcpy(debug_msg, "angle detected");
 800135c:	4a55      	ldr	r2, [pc, #340]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 800135e:	4b5c      	ldr	r3, [pc, #368]	@ (80014d0 <UpdateFlightStatus+0x2c8>)
 8001360:	4614      	mov	r4, r2
 8001362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001364:	c407      	stmia	r4!, {r0, r1, r2}
 8001366:	8023      	strh	r3, [r4, #0]
 8001368:	3402      	adds	r4, #2
 800136a:	0c1b      	lsrs	r3, r3, #16
 800136c:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 800136e:	4851      	ldr	r0, [pc, #324]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 8001370:	f7fe feee 	bl	8000150 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	b29a      	uxth	r2, r3
 8001378:	2364      	movs	r3, #100	@ 0x64
 800137a:	494e      	ldr	r1, [pc, #312]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 800137c:	484f      	ldr	r0, [pc, #316]	@ (80014bc <UpdateFlightStatus+0x2b4>)
 800137e:	f001 fdbf 	bl	8002f00 <HAL_UART_Transmit>
		HAL_Delay(10);
 8001382:	200a      	movs	r0, #10
 8001384:	f000 fcf0 	bl	8001d68 <HAL_Delay>
    }
    
    // Track peak altitude for apogee detection
    if (current_telemetry.altitude > peak_altitude) {
 8001388:	4b47      	ldr	r3, [pc, #284]	@ (80014a8 <UpdateFlightStatus+0x2a0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a51      	ldr	r2, [pc, #324]	@ (80014d4 <UpdateFlightStatus+0x2cc>)
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fcf2 	bl	8000d7c <__aeabi_fcmpgt>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <UpdateFlightStatus+0x19e>
        peak_altitude = current_telemetry.altitude;
 800139e:	4b42      	ldr	r3, [pc, #264]	@ (80014a8 <UpdateFlightStatus+0x2a0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a4c      	ldr	r2, [pc, #304]	@ (80014d4 <UpdateFlightStatus+0x2cc>)
 80013a4:	6013      	str	r3, [r2, #0]
    }
    
    // Descent detection (apogee passed)
    if (!flight_status.descent_detected && 
 80013a6:	4b3f      	ldr	r3, [pc, #252]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d130      	bne.n	8001416 <UpdateFlightStatus+0x20e>
 80013b4:	4b3b      	ldr	r3, [pc, #236]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d029      	beq.n	8001416 <UpdateFlightStatus+0x20e>
        flight_status.min_altitude_reached &&
        current_telemetry.altitude < (peak_altitude - 10.0f)) { // 10m tolerance
 80013c2:	4b39      	ldr	r3, [pc, #228]	@ (80014a8 <UpdateFlightStatus+0x2a0>)
 80013c4:	681c      	ldr	r4, [r3, #0]
 80013c6:	4b43      	ldr	r3, [pc, #268]	@ (80014d4 <UpdateFlightStatus+0x2cc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4938      	ldr	r1, [pc, #224]	@ (80014ac <UpdateFlightStatus+0x2a4>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fb5f 	bl	8000a90 <__aeabi_fsub>
 80013d2:	4603      	mov	r3, r0
        flight_status.min_altitude_reached &&
 80013d4:	4619      	mov	r1, r3
 80013d6:	4620      	mov	r0, r4
 80013d8:	f7ff fcb2 	bl	8000d40 <__aeabi_fcmplt>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d019      	beq.n	8001416 <UpdateFlightStatus+0x20e>
        flight_status.descent_detected = 1;
 80013e2:	4a30      	ldr	r2, [pc, #192]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 80013e4:	7813      	ldrb	r3, [r2, #0]
 80013e6:	f043 0310 	orr.w	r3, r3, #16
 80013ea:	7013      	strb	r3, [r2, #0]
        strcpy(debug_msg, "descent detected");
 80013ec:	4a31      	ldr	r2, [pc, #196]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 80013ee:	4b3a      	ldr	r3, [pc, #232]	@ (80014d8 <UpdateFlightStatus+0x2d0>)
 80013f0:	4614      	mov	r4, r2
 80013f2:	461d      	mov	r5, r3
 80013f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f8:	682b      	ldr	r3, [r5, #0]
 80013fa:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 80013fc:	482d      	ldr	r0, [pc, #180]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 80013fe:	f7fe fea7 	bl	8000150 <strlen>
 8001402:	4603      	mov	r3, r0
 8001404:	b29a      	uxth	r2, r3
 8001406:	2364      	movs	r3, #100	@ 0x64
 8001408:	492a      	ldr	r1, [pc, #168]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 800140a:	482c      	ldr	r0, [pc, #176]	@ (80014bc <UpdateFlightStatus+0x2b4>)
 800140c:	f001 fd78 	bl	8002f00 <HAL_UART_Transmit>
		HAL_Delay(10);
 8001410:	200a      	movs	r0, #10
 8001412:	f000 fca9 	bl	8001d68 <HAL_Delay>
    }
    
    // Drogue parachute deployment
    if (!flight_status.drogue_deployment_issued &&
 8001416:	4b23      	ldr	r3, [pc, #140]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f003 0320 	and.w	r3, r3, #32
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d124      	bne.n	800146e <UpdateFlightStatus+0x266>
 8001424:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d01d      	beq.n	800146e <UpdateFlightStatus+0x266>
        flight_status.launch_detected &&
 8001432:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d016      	beq.n	800146e <UpdateFlightStatus+0x266>
        flight_status.motor_burnout_delay_completed &&
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00f      	beq.n	800146e <UpdateFlightStatus+0x266>
        flight_status.min_altitude_reached &&
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d008      	beq.n	800146e <UpdateFlightStatus+0x266>
        flight_status.excessive_tilt_detected &&
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <UpdateFlightStatus+0x266>
        flight_status.descent_detected) {
        DeployDrogueParachute();
 800146a:	f000 f86f 	bl	800154c <DeployDrogueParachute>
    }
    
    // Main parachute altitude threshold
    if (!flight_status.altitude_below_main_threshold &&
 800146e:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d146      	bne.n	800150a <UpdateFlightStatus+0x302>
        current_telemetry.altitude < MAIN_PARACHUTE_ALTITUDE) {
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <UpdateFlightStatus+0x2a0>)
 800147e:	681b      	ldr	r3, [r3, #0]
    if (!flight_status.altitude_below_main_threshold &&
 8001480:	4916      	ldr	r1, [pc, #88]	@ (80014dc <UpdateFlightStatus+0x2d4>)
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fc5c 	bl	8000d40 <__aeabi_fcmplt>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d03d      	beq.n	800150a <UpdateFlightStatus+0x302>
        flight_status.altitude_below_main_threshold = 1;
 800148e:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <UpdateFlightStatus+0x29c>)
 8001490:	7813      	ldrb	r3, [r2, #0]
 8001492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001496:	7013      	strb	r3, [r2, #0]
        strcpy(debug_msg, "altitude550 detected");
 8001498:	4a06      	ldr	r2, [pc, #24]	@ (80014b4 <UpdateFlightStatus+0x2ac>)
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <UpdateFlightStatus+0x2d8>)
 800149c:	4614      	mov	r4, r2
 800149e:	461d      	mov	r5, r3
 80014a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a2:	e01f      	b.n	80014e4 <UpdateFlightStatus+0x2dc>
 80014a4:	20000378 	.word	0x20000378
 80014a8:	2000037c 	.word	0x2000037c
 80014ac:	41200000 	.word	0x41200000
 80014b0:	200003a0 	.word	0x200003a0
 80014b4:	200003bc 	.word	0x200003bc
 80014b8:	08006090 	.word	0x08006090
 80014bc:	200002a0 	.word	0x200002a0
 80014c0:	080060a0 	.word	0x080060a0
 80014c4:	44bb8000 	.word	0x44bb8000
 80014c8:	080060ac 	.word	0x080060ac
 80014cc:	42700000 	.word	0x42700000
 80014d0:	080060bc 	.word	0x080060bc
 80014d4:	200003b8 	.word	0x200003b8
 80014d8:	080060cc 	.word	0x080060cc
 80014dc:	44098000 	.word	0x44098000
 80014e0:	080060e0 	.word	0x080060e0
 80014e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014ea:	6020      	str	r0, [r4, #0]
 80014ec:	3404      	adds	r4, #4
 80014ee:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 80014f0:	4813      	ldr	r0, [pc, #76]	@ (8001540 <UpdateFlightStatus+0x338>)
 80014f2:	f7fe fe2d 	bl	8000150 <strlen>
 80014f6:	4603      	mov	r3, r0
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	2364      	movs	r3, #100	@ 0x64
 80014fc:	4910      	ldr	r1, [pc, #64]	@ (8001540 <UpdateFlightStatus+0x338>)
 80014fe:	4811      	ldr	r0, [pc, #68]	@ (8001544 <UpdateFlightStatus+0x33c>)
 8001500:	f001 fcfe 	bl	8002f00 <HAL_UART_Transmit>
		HAL_Delay(10);
 8001504:	200a      	movs	r0, #10
 8001506:	f000 fc2f 	bl	8001d68 <HAL_Delay>
    }
    
    // Main parachute deployment
    if (!flight_status.main_parachute_deployment_issued &&
 800150a:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <UpdateFlightStatus+0x340>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10f      	bne.n	8001538 <UpdateFlightStatus+0x330>
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <UpdateFlightStatus+0x340>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d008      	beq.n	8001538 <UpdateFlightStatus+0x330>
        flight_status.altitude_below_main_threshold && flight_status.descent_detected) {
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <UpdateFlightStatus+0x340>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <UpdateFlightStatus+0x330>
        DeployMainParachute();
 8001534:	f000 f84a 	bl	80015cc <DeployMainParachute>
    }
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bdb0      	pop	{r4, r5, r7, pc}
 8001540:	200003bc 	.word	0x200003bc
 8001544:	200002a0 	.word	0x200002a0
 8001548:	20000378 	.word	0x20000378

0800154c <DeployDrogueParachute>:

/**
 * @brief Deploy drogue parachute
 */
void DeployDrogueParachute(void)
{
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DROGUE_PARACHUTE_PORT, DROGUE_PARACHUTE_PIN, GPIO_PIN_SET);
 8001550:	2201      	movs	r2, #1
 8001552:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001556:	4818      	ldr	r0, [pc, #96]	@ (80015b8 <DeployDrogueParachute+0x6c>)
 8001558:	f000 fe92 	bl	8002280 <HAL_GPIO_WritePin>
    flight_status.drogue_deployment_issued = 1;
 800155c:	4a17      	ldr	r2, [pc, #92]	@ (80015bc <DeployDrogueParachute+0x70>)
 800155e:	7813      	ldrb	r3, [r2, #0]
 8001560:	f043 0320 	orr.w	r3, r3, #32
 8001564:	7013      	strb	r3, [r2, #0]
    
    // Keep pin high for 100ms to ensure deployment
    HAL_Delay(100);
 8001566:	2064      	movs	r0, #100	@ 0x64
 8001568:	f000 fbfe 	bl	8001d68 <HAL_Delay>
    HAL_GPIO_WritePin(DROGUE_PARACHUTE_PORT, DROGUE_PARACHUTE_PIN, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001572:	4811      	ldr	r0, [pc, #68]	@ (80015b8 <DeployDrogueParachute+0x6c>)
 8001574:	f000 fe84 	bl	8002280 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001578:	200a      	movs	r0, #10
 800157a:	f000 fbf5 	bl	8001d68 <HAL_Delay>
    strcpy(debug_msg, "dragparachute deployed");
 800157e:	4a10      	ldr	r2, [pc, #64]	@ (80015c0 <DeployDrogueParachute+0x74>)
 8001580:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <DeployDrogueParachute+0x78>)
 8001582:	4614      	mov	r4, r2
 8001584:	461d      	mov	r5, r3
 8001586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800158a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800158e:	6020      	str	r0, [r4, #0]
 8001590:	3404      	adds	r4, #4
 8001592:	8021      	strh	r1, [r4, #0]
 8001594:	3402      	adds	r4, #2
 8001596:	0c0b      	lsrs	r3, r1, #16
 8001598:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 800159a:	4809      	ldr	r0, [pc, #36]	@ (80015c0 <DeployDrogueParachute+0x74>)
 800159c:	f7fe fdd8 	bl	8000150 <strlen>
 80015a0:	4603      	mov	r3, r0
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	2364      	movs	r3, #100	@ 0x64
 80015a6:	4906      	ldr	r1, [pc, #24]	@ (80015c0 <DeployDrogueParachute+0x74>)
 80015a8:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <DeployDrogueParachute+0x7c>)
 80015aa:	f001 fca9 	bl	8002f00 <HAL_UART_Transmit>
	HAL_Delay(10);
 80015ae:	200a      	movs	r0, #10
 80015b0:	f000 fbda 	bl	8001d68 <HAL_Delay>

}
 80015b4:	bf00      	nop
 80015b6:	bdb0      	pop	{r4, r5, r7, pc}
 80015b8:	40010c00 	.word	0x40010c00
 80015bc:	20000378 	.word	0x20000378
 80015c0:	200003bc 	.word	0x200003bc
 80015c4:	080060f8 	.word	0x080060f8
 80015c8:	200002a0 	.word	0x200002a0

080015cc <DeployMainParachute>:

/**
 * @brief Deploy main parachute
 */
void DeployMainParachute(void)
{
 80015cc:	b5b0      	push	{r4, r5, r7, lr}
 80015ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MAIN_PARACHUTE_PORT, MAIN_PARACHUTE_PIN, GPIO_PIN_SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015d6:	4817      	ldr	r0, [pc, #92]	@ (8001634 <DeployMainParachute+0x68>)
 80015d8:	f000 fe52 	bl	8002280 <HAL_GPIO_WritePin>
    flight_status.main_parachute_deployment_issued = 1;
 80015dc:	4a16      	ldr	r2, [pc, #88]	@ (8001638 <DeployMainParachute+0x6c>)
 80015de:	7813      	ldrb	r3, [r2, #0]
 80015e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015e4:	7013      	strb	r3, [r2, #0]
    
    // Keep pin high for 100ms to ensure deployment
    HAL_Delay(100);
 80015e6:	2064      	movs	r0, #100	@ 0x64
 80015e8:	f000 fbbe 	bl	8001d68 <HAL_Delay>
    HAL_GPIO_WritePin(MAIN_PARACHUTE_PORT, MAIN_PARACHUTE_PIN, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015f2:	4810      	ldr	r0, [pc, #64]	@ (8001634 <DeployMainParachute+0x68>)
 80015f4:	f000 fe44 	bl	8002280 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80015f8:	200a      	movs	r0, #10
 80015fa:	f000 fbb5 	bl	8001d68 <HAL_Delay>
    strcpy(debug_msg, "parachute deployed");
 80015fe:	4a0f      	ldr	r2, [pc, #60]	@ (800163c <DeployMainParachute+0x70>)
 8001600:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <DeployMainParachute+0x74>)
 8001602:	4614      	mov	r4, r2
 8001604:	461d      	mov	r5, r3
 8001606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160a:	682b      	ldr	r3, [r5, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	8022      	strh	r2, [r4, #0]
 8001610:	3402      	adds	r4, #2
 8001612:	0c1b      	lsrs	r3, r3, #16
 8001614:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 8001616:	4809      	ldr	r0, [pc, #36]	@ (800163c <DeployMainParachute+0x70>)
 8001618:	f7fe fd9a 	bl	8000150 <strlen>
 800161c:	4603      	mov	r3, r0
 800161e:	b29a      	uxth	r2, r3
 8001620:	2364      	movs	r3, #100	@ 0x64
 8001622:	4906      	ldr	r1, [pc, #24]	@ (800163c <DeployMainParachute+0x70>)
 8001624:	4807      	ldr	r0, [pc, #28]	@ (8001644 <DeployMainParachute+0x78>)
 8001626:	f001 fc6b 	bl	8002f00 <HAL_UART_Transmit>
	HAL_Delay(10);
 800162a:	200a      	movs	r0, #10
 800162c:	f000 fb9c 	bl	8001d68 <HAL_Delay>
}
 8001630:	bf00      	nop
 8001632:	bdb0      	pop	{r4, r5, r7, pc}
 8001634:	40010c00 	.word	0x40010c00
 8001638:	20000378 	.word	0x20000378
 800163c:	200003bc 	.word	0x200003bc
 8001640:	08006110 	.word	0x08006110
 8001644:	200002a0 	.word	0x200002a0

08001648 <TransmitStatus>:

/**
 * @brief Transmit current flight status
 */
void TransmitStatus(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
    // Prepare status packet
    status_buffer[0] = COMMAND_HEADER;
 800164e:	4b45      	ldr	r3, [pc, #276]	@ (8001764 <TransmitStatus+0x11c>)
 8001650:	22aa      	movs	r2, #170	@ 0xaa
 8001652:	701a      	strb	r2, [r3, #0]
    
    // Convert flight status to 16-bit word
    uint16_t status_word = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	80fb      	strh	r3, [r7, #6]
    status_word |= flight_status.launch_detected << 7;
 8001658:	4b43      	ldr	r3, [pc, #268]	@ (8001768 <TransmitStatus+0x120>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	b21b      	sxth	r3, r3
 8001664:	01db      	lsls	r3, r3, #7
 8001666:	b21a      	sxth	r2, r3
 8001668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166c:	4313      	orrs	r3, r2
 800166e:	b21b      	sxth	r3, r3
 8001670:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.motor_burnout_delay_completed << 6);
 8001672:	4b3d      	ldr	r3, [pc, #244]	@ (8001768 <TransmitStatus+0x120>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	b21b      	sxth	r3, r3
 800167e:	019b      	lsls	r3, r3, #6
 8001680:	b21a      	sxth	r2, r3
 8001682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001686:	4313      	orrs	r3, r2
 8001688:	b21b      	sxth	r3, r3
 800168a:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.min_altitude_reached << 5);
 800168c:	4b36      	ldr	r3, [pc, #216]	@ (8001768 <TransmitStatus+0x120>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	b21b      	sxth	r3, r3
 8001698:	015b      	lsls	r3, r3, #5
 800169a:	b21a      	sxth	r2, r3
 800169c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.excessive_tilt_detected << 4);
 80016a6:	4b30      	ldr	r3, [pc, #192]	@ (8001768 <TransmitStatus+0x120>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b21b      	sxth	r3, r3
 80016be:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.descent_detected << 3);
 80016c0:	4b29      	ldr	r3, [pc, #164]	@ (8001768 <TransmitStatus+0x120>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.drogue_deployment_issued << 2);
 80016da:	4b23      	ldr	r3, [pc, #140]	@ (8001768 <TransmitStatus+0x120>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.altitude_below_main_threshold << 1);
 80016f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <TransmitStatus+0x120>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	b21b      	sxth	r3, r3
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	b21a      	sxth	r2, r3
 8001704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001708:	4313      	orrs	r3, r2
 800170a:	b21b      	sxth	r3, r3
 800170c:	80fb      	strh	r3, [r7, #6]
    status_word |= (flight_status.main_parachute_deployment_issued);
 800170e:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <TransmitStatus+0x120>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	4313      	orrs	r3, r2
 800171e:	80fb      	strh	r3, [r7, #6]

    status_buffer[1] = (uint8_t)(status_word & 0xFF);        // Lower byte
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <TransmitStatus+0x11c>)
 8001726:	705a      	strb	r2, [r3, #1]
    status_buffer[2] = (uint8_t)((status_word >> 8) & 0xFF); // Upper byte
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	b29b      	uxth	r3, r3
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <TransmitStatus+0x11c>)
 8001732:	709a      	strb	r2, [r3, #2]
    
    // Calculate and add checksum
    status_buffer[3] = CalculateChecksum(status_buffer, 3);
 8001734:	2103      	movs	r1, #3
 8001736:	480b      	ldr	r0, [pc, #44]	@ (8001764 <TransmitStatus+0x11c>)
 8001738:	f7ff fd46 	bl	80011c8 <CalculateChecksum>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <TransmitStatus+0x11c>)
 8001742:	70da      	strb	r2, [r3, #3]
    
    // Add footer
    status_buffer[4] = FOOTER_1;
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <TransmitStatus+0x11c>)
 8001746:	220d      	movs	r2, #13
 8001748:	711a      	strb	r2, [r3, #4]
    status_buffer[5] = FOOTER_2;
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <TransmitStatus+0x11c>)
 800174c:	220a      	movs	r2, #10
 800174e:	715a      	strb	r2, [r3, #5]
    
    // Transmit status packet via UART1
    HAL_UART_Transmit(&huart1, status_buffer, STATUS_BUFFER_SIZE, 100);
 8001750:	2364      	movs	r3, #100	@ 0x64
 8001752:	2206      	movs	r2, #6
 8001754:	4903      	ldr	r1, [pc, #12]	@ (8001764 <TransmitStatus+0x11c>)
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <TransmitStatus+0x124>)
 8001758:	f001 fbd2 	bl	8002f00 <HAL_UART_Transmit>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200003b0 	.word	0x200003b0
 8001768:	20000378 	.word	0x20000378
 800176c:	200002a0 	.word	0x200002a0

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <Error_Handler+0x8>

0800177c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_MspInit+0x5c>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	4a14      	ldr	r2, [pc, #80]	@ (80017d8 <HAL_MspInit+0x5c>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6193      	str	r3, [r2, #24]
 800178e:	4b12      	ldr	r3, [pc, #72]	@ (80017d8 <HAL_MspInit+0x5c>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <HAL_MspInit+0x5c>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a0e      	ldr	r2, [pc, #56]	@ (80017d8 <HAL_MspInit+0x5c>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a4:	61d3      	str	r3, [r2, #28]
 80017a6:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <HAL_MspInit+0x5c>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017b2:	4b0a      	ldr	r3, [pc, #40]	@ (80017dc <HAL_MspInit+0x60>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <HAL_MspInit+0x60>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000

080017e0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a15      	ldr	r2, [pc, #84]	@ (8001850 <HAL_I2C_MspInit+0x70>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d123      	bne.n	8001848 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <HAL_I2C_MspInit+0x74>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a13      	ldr	r2, [pc, #76]	@ (8001854 <HAL_I2C_MspInit+0x74>)
 8001806:	f043 0308 	orr.w	r3, r3, #8
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <HAL_I2C_MspInit+0x74>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001818:	23c0      	movs	r3, #192	@ 0xc0
 800181a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800181c:	2312      	movs	r3, #18
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4619      	mov	r1, r3
 800182a:	480b      	ldr	r0, [pc, #44]	@ (8001858 <HAL_I2C_MspInit+0x78>)
 800182c:	f000 fba4 	bl	8001f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HAL_I2C_MspInit+0x74>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <HAL_I2C_MspInit+0x74>)
 8001836:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800183a:	61d3      	str	r3, [r2, #28]
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <HAL_I2C_MspInit+0x74>)
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40005400 	.word	0x40005400
 8001854:	40021000 	.word	0x40021000
 8001858:	40010c00 	.word	0x40010c00

0800185c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1b      	ldr	r2, [pc, #108]	@ (80018e4 <HAL_SPI_MspInit+0x88>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d12f      	bne.n	80018dc <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <HAL_SPI_MspInit+0x8c>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a19      	ldr	r2, [pc, #100]	@ (80018e8 <HAL_SPI_MspInit+0x8c>)
 8001882:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b17      	ldr	r3, [pc, #92]	@ (80018e8 <HAL_SPI_MspInit+0x8c>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <HAL_SPI_MspInit+0x8c>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a13      	ldr	r2, [pc, #76]	@ (80018e8 <HAL_SPI_MspInit+0x8c>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_SPI_MspInit+0x8c>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80018ac:	23a0      	movs	r3, #160	@ 0xa0
 80018ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	4619      	mov	r1, r3
 80018be:	480b      	ldr	r0, [pc, #44]	@ (80018ec <HAL_SPI_MspInit+0x90>)
 80018c0:	f000 fb5a 	bl	8001f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018c4:	2340      	movs	r3, #64	@ 0x40
 80018c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	4619      	mov	r1, r3
 80018d6:	4805      	ldr	r0, [pc, #20]	@ (80018ec <HAL_SPI_MspInit+0x90>)
 80018d8:	f000 fb4e 	bl	8001f78 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40013000 	.word	0x40013000
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40010800 	.word	0x40010800

080018f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	@ 0x30
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0320 	add.w	r3, r7, #32
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a53      	ldr	r2, [pc, #332]	@ (8001a58 <HAL_UART_MspInit+0x168>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d132      	bne.n	8001976 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001910:	4b52      	ldr	r3, [pc, #328]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a51      	ldr	r2, [pc, #324]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 8001916:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b4f      	ldr	r3, [pc, #316]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b4c      	ldr	r3, [pc, #304]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b49      	ldr	r3, [pc, #292]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001940:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0320 	add.w	r3, r7, #32
 8001952:	4619      	mov	r1, r3
 8001954:	4842      	ldr	r0, [pc, #264]	@ (8001a60 <HAL_UART_MspInit+0x170>)
 8001956:	f000 fb0f 	bl	8001f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800195a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 0320 	add.w	r3, r7, #32
 800196c:	4619      	mov	r1, r3
 800196e:	483c      	ldr	r0, [pc, #240]	@ (8001a60 <HAL_UART_MspInit+0x170>)
 8001970:	f000 fb02 	bl	8001f78 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001974:	e06c      	b.n	8001a50 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a3a      	ldr	r2, [pc, #232]	@ (8001a64 <HAL_UART_MspInit+0x174>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d130      	bne.n	80019e2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001980:	4b36      	ldr	r3, [pc, #216]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	4a35      	ldr	r2, [pc, #212]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 8001986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800198a:	61d3      	str	r3, [r2, #28]
 800198c:	4b33      	ldr	r3, [pc, #204]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019b0:	2304      	movs	r3, #4
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	4619      	mov	r1, r3
 80019c2:	4827      	ldr	r0, [pc, #156]	@ (8001a60 <HAL_UART_MspInit+0x170>)
 80019c4:	f000 fad8 	bl	8001f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019c8:	2308      	movs	r3, #8
 80019ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 0320 	add.w	r3, r7, #32
 80019d8:	4619      	mov	r1, r3
 80019da:	4821      	ldr	r0, [pc, #132]	@ (8001a60 <HAL_UART_MspInit+0x170>)
 80019dc:	f000 facc 	bl	8001f78 <HAL_GPIO_Init>
}
 80019e0:	e036      	b.n	8001a50 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a20      	ldr	r2, [pc, #128]	@ (8001a68 <HAL_UART_MspInit+0x178>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d131      	bne.n	8001a50 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019ec:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 80019f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f6:	61d3      	str	r3, [r2, #28]
 80019f8:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a14      	ldr	r2, [pc, #80]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <HAL_UART_MspInit+0x16c>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	f107 0320 	add.w	r3, r7, #32
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480e      	ldr	r0, [pc, #56]	@ (8001a6c <HAL_UART_MspInit+0x17c>)
 8001a32:	f000 faa1 	bl	8001f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f107 0320 	add.w	r3, r7, #32
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4808      	ldr	r0, [pc, #32]	@ (8001a6c <HAL_UART_MspInit+0x17c>)
 8001a4c:	f000 fa94 	bl	8001f78 <HAL_GPIO_Init>
}
 8001a50:	bf00      	nop
 8001a52:	3730      	adds	r7, #48	@ 0x30
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010800 	.word	0x40010800
 8001a64:	40004400 	.word	0x40004400
 8001a68:	40004800 	.word	0x40004800
 8001a6c:	40010c00 	.word	0x40010c00

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <NMI_Handler+0x4>

08001a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <MemManage_Handler+0x4>

08001a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac0:	f000 f936 	bl	8001d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return 1;
 8001acc:	2301      	movs	r3, #1
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <_kill>:

int _kill(int pid, int sig)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ae0:	f002 fa28 	bl	8003f34 <__errno>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2216      	movs	r2, #22
 8001ae8:	601a      	str	r2, [r3, #0]
  return -1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_exit>:

void _exit (int status)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001afe:	f04f 31ff 	mov.w	r1, #4294967295
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffe7 	bl	8001ad6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <_exit+0x12>

08001b0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e00a      	b.n	8001b34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b1e:	f3af 8000 	nop.w
 8001b22:	4601      	mov	r1, r0
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	b2ca      	uxtb	r2, r1
 8001b2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dbf0      	blt.n	8001b1e <_read+0x12>
  }

  return len;
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e009      	b.n	8001b6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	60ba      	str	r2, [r7, #8]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbf1      	blt.n	8001b58 <_write+0x12>
  }
  return len;
 8001b74:	687b      	ldr	r3, [r7, #4]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_close>:

int _close(int file)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <_isatty>:

int _isatty(int file)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr

08001bc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b085      	sub	sp, #20
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
	...

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f002 f990 	bl	8003f34 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20005000 	.word	0x20005000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	20000420 	.word	0x20000420
 8001c48:	20000578 	.word	0x20000578

08001c4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c58:	f7ff fff8 	bl	8001c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c5c:	480b      	ldr	r0, [pc, #44]	@ (8001c8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c5e:	490c      	ldr	r1, [pc, #48]	@ (8001c90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c60:	4a0c      	ldr	r2, [pc, #48]	@ (8001c94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c64:	e002      	b.n	8001c6c <LoopCopyDataInit>

08001c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6a:	3304      	adds	r3, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c70:	d3f9      	bcc.n	8001c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c72:	4a09      	ldr	r2, [pc, #36]	@ (8001c98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c74:	4c09      	ldr	r4, [pc, #36]	@ (8001c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c78:	e001      	b.n	8001c7e <LoopFillZerobss>

08001c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c7c:	3204      	adds	r2, #4

08001c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c82:	f002 f95d 	bl	8003f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c86:	f7ff f883 	bl	8000d90 <main>
  bx lr
 8001c8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001c94:	080064d4 	.word	0x080064d4
  ldr r2, =_sbss
 8001c98:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c9c:	20000574 	.word	0x20000574

08001ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC1_2_IRQHandler>
	...

08001ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca8:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <HAL_Init+0x28>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a07      	ldr	r2, [pc, #28]	@ (8001ccc <HAL_Init+0x28>)
 8001cae:	f043 0310 	orr.w	r3, r3, #16
 8001cb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f000 f92b 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cba:	200f      	movs	r0, #15
 8001cbc:	f000 f808 	bl	8001cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc0:	f7ff fd5c 	bl	800177c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40022000 	.word	0x40022000

08001cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd8:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <HAL_InitTick+0x54>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <HAL_InitTick+0x58>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f935 	bl	8001f5e <HAL_SYSTICK_Config>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00e      	b.n	8001d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b0f      	cmp	r3, #15
 8001d02:	d80a      	bhi.n	8001d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d04:	2200      	movs	r2, #0
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f000 f90b 	bl	8001f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d10:	4a06      	ldr	r2, [pc, #24]	@ (8001d2c <HAL_InitTick+0x5c>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000004 	.word	0x20000004
 8001d28:	2000000c 	.word	0x2000000c
 8001d2c:	20000008 	.word	0x20000008

08001d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d34:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <HAL_IncTick+0x1c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_IncTick+0x20>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a03      	ldr	r2, [pc, #12]	@ (8001d50 <HAL_IncTick+0x20>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	2000000c 	.word	0x2000000c
 8001d50:	20000424 	.word	0x20000424

08001d54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return uwTick;
 8001d58:	4b02      	ldr	r3, [pc, #8]	@ (8001d64 <HAL_GetTick+0x10>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	20000424 	.word	0x20000424

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff fff0 	bl	8001d54 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d005      	beq.n	8001d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <HAL_Delay+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d8e:	bf00      	nop
 8001d90:	f7ff ffe0 	bl	8001d54 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f7      	bhi.n	8001d90 <HAL_Delay+0x28>
  {
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000000c 	.word	0x2000000c

08001db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	@ (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	db0a      	blt.n	8001e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	490c      	ldr	r1, [pc, #48]	@ (8001e60 <__NVIC_SetPriority+0x4c>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	0112      	lsls	r2, r2, #4
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	440b      	add	r3, r1
 8001e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e3c:	e00a      	b.n	8001e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4908      	ldr	r1, [pc, #32]	@ (8001e64 <__NVIC_SetPriority+0x50>)
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	3b04      	subs	r3, #4
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	440b      	add	r3, r1
 8001e52:	761a      	strb	r2, [r3, #24]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	@ 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f1c3 0307 	rsb	r3, r3, #7
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	bf28      	it	cs
 8001e86:	2304      	movcs	r3, #4
 8001e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d902      	bls.n	8001e98 <NVIC_EncodePriority+0x30>
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3b03      	subs	r3, #3
 8001e96:	e000      	b.n	8001e9a <NVIC_EncodePriority+0x32>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	401a      	ands	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	43d9      	mvns	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	4313      	orrs	r3, r2
         );
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3724      	adds	r7, #36	@ 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001edc:	d301      	bcc.n	8001ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00f      	b.n	8001f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <SysTick_Config+0x40>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eea:	210f      	movs	r1, #15
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef0:	f7ff ff90 	bl	8001e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef4:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <SysTick_Config+0x40>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efa:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <SysTick_Config+0x40>)
 8001efc:	2207      	movs	r2, #7
 8001efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	e000e010 	.word	0xe000e010

08001f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff49 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f38:	f7ff ff5e 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	f7ff ff90 	bl	8001e68 <NVIC_EncodePriority>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff5f 	bl	8001e14 <__NVIC_SetPriority>
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ffb0 	bl	8001ecc <SysTick_Config>
 8001f6c:	4603      	mov	r3, r0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b08b      	sub	sp, #44	@ 0x2c
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8a:	e169      	b.n	8002260 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	f040 8158 	bne.w	800225a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a9a      	ldr	r2, [pc, #616]	@ (8002218 <HAL_GPIO_Init+0x2a0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d05e      	beq.n	8002072 <HAL_GPIO_Init+0xfa>
 8001fb4:	4a98      	ldr	r2, [pc, #608]	@ (8002218 <HAL_GPIO_Init+0x2a0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d875      	bhi.n	80020a6 <HAL_GPIO_Init+0x12e>
 8001fba:	4a98      	ldr	r2, [pc, #608]	@ (800221c <HAL_GPIO_Init+0x2a4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d058      	beq.n	8002072 <HAL_GPIO_Init+0xfa>
 8001fc0:	4a96      	ldr	r2, [pc, #600]	@ (800221c <HAL_GPIO_Init+0x2a4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d86f      	bhi.n	80020a6 <HAL_GPIO_Init+0x12e>
 8001fc6:	4a96      	ldr	r2, [pc, #600]	@ (8002220 <HAL_GPIO_Init+0x2a8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d052      	beq.n	8002072 <HAL_GPIO_Init+0xfa>
 8001fcc:	4a94      	ldr	r2, [pc, #592]	@ (8002220 <HAL_GPIO_Init+0x2a8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d869      	bhi.n	80020a6 <HAL_GPIO_Init+0x12e>
 8001fd2:	4a94      	ldr	r2, [pc, #592]	@ (8002224 <HAL_GPIO_Init+0x2ac>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d04c      	beq.n	8002072 <HAL_GPIO_Init+0xfa>
 8001fd8:	4a92      	ldr	r2, [pc, #584]	@ (8002224 <HAL_GPIO_Init+0x2ac>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d863      	bhi.n	80020a6 <HAL_GPIO_Init+0x12e>
 8001fde:	4a92      	ldr	r2, [pc, #584]	@ (8002228 <HAL_GPIO_Init+0x2b0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d046      	beq.n	8002072 <HAL_GPIO_Init+0xfa>
 8001fe4:	4a90      	ldr	r2, [pc, #576]	@ (8002228 <HAL_GPIO_Init+0x2b0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d85d      	bhi.n	80020a6 <HAL_GPIO_Init+0x12e>
 8001fea:	2b12      	cmp	r3, #18
 8001fec:	d82a      	bhi.n	8002044 <HAL_GPIO_Init+0xcc>
 8001fee:	2b12      	cmp	r3, #18
 8001ff0:	d859      	bhi.n	80020a6 <HAL_GPIO_Init+0x12e>
 8001ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff8 <HAL_GPIO_Init+0x80>)
 8001ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff8:	08002073 	.word	0x08002073
 8001ffc:	0800204d 	.word	0x0800204d
 8002000:	0800205f 	.word	0x0800205f
 8002004:	080020a1 	.word	0x080020a1
 8002008:	080020a7 	.word	0x080020a7
 800200c:	080020a7 	.word	0x080020a7
 8002010:	080020a7 	.word	0x080020a7
 8002014:	080020a7 	.word	0x080020a7
 8002018:	080020a7 	.word	0x080020a7
 800201c:	080020a7 	.word	0x080020a7
 8002020:	080020a7 	.word	0x080020a7
 8002024:	080020a7 	.word	0x080020a7
 8002028:	080020a7 	.word	0x080020a7
 800202c:	080020a7 	.word	0x080020a7
 8002030:	080020a7 	.word	0x080020a7
 8002034:	080020a7 	.word	0x080020a7
 8002038:	080020a7 	.word	0x080020a7
 800203c:	08002055 	.word	0x08002055
 8002040:	08002069 	.word	0x08002069
 8002044:	4a79      	ldr	r2, [pc, #484]	@ (800222c <HAL_GPIO_Init+0x2b4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800204a:	e02c      	b.n	80020a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	623b      	str	r3, [r7, #32]
          break;
 8002052:	e029      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	3304      	adds	r3, #4
 800205a:	623b      	str	r3, [r7, #32]
          break;
 800205c:	e024      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	3308      	adds	r3, #8
 8002064:	623b      	str	r3, [r7, #32]
          break;
 8002066:	e01f      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	330c      	adds	r3, #12
 800206e:	623b      	str	r3, [r7, #32]
          break;
 8002070:	e01a      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800207a:	2304      	movs	r3, #4
 800207c:	623b      	str	r3, [r7, #32]
          break;
 800207e:	e013      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002088:	2308      	movs	r3, #8
 800208a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	611a      	str	r2, [r3, #16]
          break;
 8002092:	e009      	b.n	80020a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002094:	2308      	movs	r3, #8
 8002096:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	615a      	str	r2, [r3, #20]
          break;
 800209e:	e003      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
          break;
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x130>
          break;
 80020a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	2bff      	cmp	r3, #255	@ 0xff
 80020ac:	d801      	bhi.n	80020b2 <HAL_GPIO_Init+0x13a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	e001      	b.n	80020b6 <HAL_GPIO_Init+0x13e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3304      	adds	r3, #4
 80020b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2bff      	cmp	r3, #255	@ 0xff
 80020bc:	d802      	bhi.n	80020c4 <HAL_GPIO_Init+0x14c>
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	e002      	b.n	80020ca <HAL_GPIO_Init+0x152>
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	3b08      	subs	r3, #8
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	210f      	movs	r1, #15
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	401a      	ands	r2, r3
 80020dc:	6a39      	ldr	r1, [r7, #32]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	431a      	orrs	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 80b1 	beq.w	800225a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002230 <HAL_GPIO_Init+0x2b8>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002230 <HAL_GPIO_Init+0x2b8>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6193      	str	r3, [r2, #24]
 8002104:	4b4a      	ldr	r3, [pc, #296]	@ (8002230 <HAL_GPIO_Init+0x2b8>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002110:	4a48      	ldr	r2, [pc, #288]	@ (8002234 <HAL_GPIO_Init+0x2bc>)
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	220f      	movs	r2, #15
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4013      	ands	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a40      	ldr	r2, [pc, #256]	@ (8002238 <HAL_GPIO_Init+0x2c0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_GPIO_Init+0x1ec>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3f      	ldr	r2, [pc, #252]	@ (800223c <HAL_GPIO_Init+0x2c4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00d      	beq.n	8002160 <HAL_GPIO_Init+0x1e8>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3e      	ldr	r2, [pc, #248]	@ (8002240 <HAL_GPIO_Init+0x2c8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <HAL_GPIO_Init+0x1e4>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3d      	ldr	r2, [pc, #244]	@ (8002244 <HAL_GPIO_Init+0x2cc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d101      	bne.n	8002158 <HAL_GPIO_Init+0x1e0>
 8002154:	2303      	movs	r3, #3
 8002156:	e006      	b.n	8002166 <HAL_GPIO_Init+0x1ee>
 8002158:	2304      	movs	r3, #4
 800215a:	e004      	b.n	8002166 <HAL_GPIO_Init+0x1ee>
 800215c:	2302      	movs	r3, #2
 800215e:	e002      	b.n	8002166 <HAL_GPIO_Init+0x1ee>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <HAL_GPIO_Init+0x1ee>
 8002164:	2300      	movs	r3, #0
 8002166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002168:	f002 0203 	and.w	r2, r2, #3
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	4093      	lsls	r3, r2
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002176:	492f      	ldr	r1, [pc, #188]	@ (8002234 <HAL_GPIO_Init+0x2bc>)
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d006      	beq.n	800219e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002190:	4b2d      	ldr	r3, [pc, #180]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	492c      	ldr	r1, [pc, #176]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	608b      	str	r3, [r1, #8]
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800219e:	4b2a      	ldr	r3, [pc, #168]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	4928      	ldr	r1, [pc, #160]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021b8:	4b23      	ldr	r3, [pc, #140]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	4922      	ldr	r1, [pc, #136]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60cb      	str	r3, [r1, #12]
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021c6:	4b20      	ldr	r3, [pc, #128]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	43db      	mvns	r3, r3
 80021ce:	491e      	ldr	r1, [pc, #120]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d006      	beq.n	80021ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021e0:	4b19      	ldr	r3, [pc, #100]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4918      	ldr	r1, [pc, #96]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ee:	4b16      	ldr	r3, [pc, #88]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	4914      	ldr	r1, [pc, #80]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d021      	beq.n	800224c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002208:	4b0f      	ldr	r3, [pc, #60]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	490e      	ldr	r1, [pc, #56]	@ (8002248 <HAL_GPIO_Init+0x2d0>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
 8002214:	e021      	b.n	800225a <HAL_GPIO_Init+0x2e2>
 8002216:	bf00      	nop
 8002218:	10320000 	.word	0x10320000
 800221c:	10310000 	.word	0x10310000
 8002220:	10220000 	.word	0x10220000
 8002224:	10210000 	.word	0x10210000
 8002228:	10120000 	.word	0x10120000
 800222c:	10110000 	.word	0x10110000
 8002230:	40021000 	.word	0x40021000
 8002234:	40010000 	.word	0x40010000
 8002238:	40010800 	.word	0x40010800
 800223c:	40010c00 	.word	0x40010c00
 8002240:	40011000 	.word	0x40011000
 8002244:	40011400 	.word	0x40011400
 8002248:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_GPIO_Init+0x304>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	43db      	mvns	r3, r3
 8002254:	4909      	ldr	r1, [pc, #36]	@ (800227c <HAL_GPIO_Init+0x304>)
 8002256:	4013      	ands	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	3301      	adds	r3, #1
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	fa22 f303 	lsr.w	r3, r2, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	f47f ae8e 	bne.w	8001f8c <HAL_GPIO_Init+0x14>
  }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	372c      	adds	r7, #44	@ 0x2c
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	40010400 	.word	0x40010400

08002280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002290:	787b      	ldrb	r3, [r7, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800229c:	e003      	b.n	80022a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800229e:	887b      	ldrh	r3, [r7, #2]
 80022a0:	041a      	lsls	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	611a      	str	r2, [r3, #16]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e12b      	b.n	800251a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fa82 	bl	80017e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2224      	movs	r2, #36	@ 0x24
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0201 	bic.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002312:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002314:	f000 fcda 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8002318:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4a81      	ldr	r2, [pc, #516]	@ (8002524 <HAL_I2C_Init+0x274>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d807      	bhi.n	8002334 <HAL_I2C_Init+0x84>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a80      	ldr	r2, [pc, #512]	@ (8002528 <HAL_I2C_Init+0x278>)
 8002328:	4293      	cmp	r3, r2
 800232a:	bf94      	ite	ls
 800232c:	2301      	movls	r3, #1
 800232e:	2300      	movhi	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	e006      	b.n	8002342 <HAL_I2C_Init+0x92>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a7d      	ldr	r2, [pc, #500]	@ (800252c <HAL_I2C_Init+0x27c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	bf94      	ite	ls
 800233c:	2301      	movls	r3, #1
 800233e:	2300      	movhi	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0e7      	b.n	800251a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4a78      	ldr	r2, [pc, #480]	@ (8002530 <HAL_I2C_Init+0x280>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0c9b      	lsrs	r3, r3, #18
 8002354:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	430a      	orrs	r2, r1
 8002368:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a6a      	ldr	r2, [pc, #424]	@ (8002524 <HAL_I2C_Init+0x274>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d802      	bhi.n	8002384 <HAL_I2C_Init+0xd4>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3301      	adds	r3, #1
 8002382:	e009      	b.n	8002398 <HAL_I2C_Init+0xe8>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	4a69      	ldr	r2, [pc, #420]	@ (8002534 <HAL_I2C_Init+0x284>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	3301      	adds	r3, #1
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	430b      	orrs	r3, r1
 800239e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	495c      	ldr	r1, [pc, #368]	@ (8002524 <HAL_I2C_Init+0x274>)
 80023b4:	428b      	cmp	r3, r1
 80023b6:	d819      	bhi.n	80023ec <HAL_I2C_Init+0x13c>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e59      	subs	r1, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c6:	1c59      	adds	r1, r3, #1
 80023c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023cc:	400b      	ands	r3, r1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_I2C_Init+0x138>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e59      	subs	r1, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e6:	e051      	b.n	800248c <HAL_I2C_Init+0x1dc>
 80023e8:	2304      	movs	r3, #4
 80023ea:	e04f      	b.n	800248c <HAL_I2C_Init+0x1dc>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d111      	bne.n	8002418 <HAL_I2C_Init+0x168>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1e58      	subs	r0, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	440b      	add	r3, r1
 8002402:	fbb0 f3f3 	udiv	r3, r0, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	e012      	b.n	800243e <HAL_I2C_Init+0x18e>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1e58      	subs	r0, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	0099      	lsls	r1, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	fbb0 f3f3 	udiv	r3, r0, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_Init+0x196>
 8002442:	2301      	movs	r3, #1
 8002444:	e022      	b.n	800248c <HAL_I2C_Init+0x1dc>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10e      	bne.n	800246c <HAL_I2C_Init+0x1bc>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1e58      	subs	r0, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	440b      	add	r3, r1
 800245c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002460:	3301      	adds	r3, #1
 8002462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800246a:	e00f      	b.n	800248c <HAL_I2C_Init+0x1dc>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1e58      	subs	r0, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	0099      	lsls	r1, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002482:	3301      	adds	r3, #1
 8002484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002488:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	6809      	ldr	r1, [r1, #0]
 8002490:	4313      	orrs	r3, r2
 8002492:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6911      	ldr	r1, [r2, #16]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68d2      	ldr	r2, [r2, #12]
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	000186a0 	.word	0x000186a0
 8002528:	001e847f 	.word	0x001e847f
 800252c:	003d08ff 	.word	0x003d08ff
 8002530:	431bde83 	.word	0x431bde83
 8002534:	10624dd3 	.word	0x10624dd3

08002538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e272      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8087 	beq.w	8002666 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002558:	4b92      	ldr	r3, [pc, #584]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b04      	cmp	r3, #4
 8002562:	d00c      	beq.n	800257e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002564:	4b8f      	ldr	r3, [pc, #572]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d112      	bne.n	8002596 <HAL_RCC_OscConfig+0x5e>
 8002570:	4b8c      	ldr	r3, [pc, #560]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800257c:	d10b      	bne.n	8002596 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257e:	4b89      	ldr	r3, [pc, #548]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d06c      	beq.n	8002664 <HAL_RCC_OscConfig+0x12c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d168      	bne.n	8002664 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e24c      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x76>
 80025a0:	4b80      	ldr	r3, [pc, #512]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a7f      	ldr	r2, [pc, #508]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	e02e      	b.n	800260c <HAL_RCC_OscConfig+0xd4>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x98>
 80025b6:	4b7b      	ldr	r3, [pc, #492]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a7a      	ldr	r2, [pc, #488]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b78      	ldr	r3, [pc, #480]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a77      	ldr	r2, [pc, #476]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e01d      	b.n	800260c <HAL_RCC_OscConfig+0xd4>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0xbc>
 80025da:	4b72      	ldr	r3, [pc, #456]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a71      	ldr	r2, [pc, #452]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b6f      	ldr	r3, [pc, #444]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6e      	ldr	r2, [pc, #440]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e00b      	b.n	800260c <HAL_RCC_OscConfig+0xd4>
 80025f4:	4b6b      	ldr	r3, [pc, #428]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a6a      	ldr	r2, [pc, #424]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b68      	ldr	r3, [pc, #416]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a67      	ldr	r2, [pc, #412]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 8002606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800260a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7ff fb9e 	bl	8001d54 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7ff fb9a 	bl	8001d54 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	@ 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e200      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b5d      	ldr	r3, [pc, #372]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0xe4>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7ff fb8a 	bl	8001d54 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7ff fb86 	bl	8001d54 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1ec      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	4b53      	ldr	r3, [pc, #332]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x10c>
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d063      	beq.n	800273a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002672:	4b4c      	ldr	r3, [pc, #304]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800267e:	4b49      	ldr	r3, [pc, #292]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b08      	cmp	r3, #8
 8002688:	d11c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x18c>
 800268a:	4b46      	ldr	r3, [pc, #280]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d116      	bne.n	80026c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	4b43      	ldr	r3, [pc, #268]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_RCC_OscConfig+0x176>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e1c0      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	4b3d      	ldr	r3, [pc, #244]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4939      	ldr	r1, [pc, #228]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	e03a      	b.n	800273a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026cc:	4b36      	ldr	r3, [pc, #216]	@ (80027a8 <HAL_RCC_OscConfig+0x270>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7ff fb3f 	bl	8001d54 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026da:	f7ff fb3b 	bl	8001d54 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e1a1      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	4b2d      	ldr	r3, [pc, #180]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f8:	4b2a      	ldr	r3, [pc, #168]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4927      	ldr	r1, [pc, #156]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]
 800270c:	e015      	b.n	800273a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270e:	4b26      	ldr	r3, [pc, #152]	@ (80027a8 <HAL_RCC_OscConfig+0x270>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff fb1e 	bl	8001d54 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271c:	f7ff fb1a 	bl	8001d54 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e180      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d03a      	beq.n	80027bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d019      	beq.n	8002782 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274e:	4b17      	ldr	r3, [pc, #92]	@ (80027ac <HAL_RCC_OscConfig+0x274>)
 8002750:	2201      	movs	r2, #1
 8002752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002754:	f7ff fafe 	bl	8001d54 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800275c:	f7ff fafa 	bl	8001d54 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e160      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <HAL_RCC_OscConfig+0x26c>)
 8002770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800277a:	2001      	movs	r0, #1
 800277c:	f000 face 	bl	8002d1c <RCC_Delay>
 8002780:	e01c      	b.n	80027bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002782:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <HAL_RCC_OscConfig+0x274>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002788:	f7ff fae4 	bl	8001d54 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278e:	e00f      	b.n	80027b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002790:	f7ff fae0 	bl	8001d54 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d908      	bls.n	80027b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e146      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	42420000 	.word	0x42420000
 80027ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b0:	4b92      	ldr	r3, [pc, #584]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1e9      	bne.n	8002790 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80a6 	beq.w	8002916 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ce:	4b8b      	ldr	r3, [pc, #556]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10d      	bne.n	80027f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b88      	ldr	r3, [pc, #544]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4a87      	ldr	r2, [pc, #540]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	61d3      	str	r3, [r2, #28]
 80027e6:	4b85      	ldr	r3, [pc, #532]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f2:	2301      	movs	r3, #1
 80027f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f6:	4b82      	ldr	r3, [pc, #520]	@ (8002a00 <HAL_RCC_OscConfig+0x4c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d118      	bne.n	8002834 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002802:	4b7f      	ldr	r3, [pc, #508]	@ (8002a00 <HAL_RCC_OscConfig+0x4c8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7e      	ldr	r2, [pc, #504]	@ (8002a00 <HAL_RCC_OscConfig+0x4c8>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800280c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280e:	f7ff faa1 	bl	8001d54 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002816:	f7ff fa9d 	bl	8001d54 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b64      	cmp	r3, #100	@ 0x64
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e103      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002828:	4b75      	ldr	r3, [pc, #468]	@ (8002a00 <HAL_RCC_OscConfig+0x4c8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d106      	bne.n	800284a <HAL_RCC_OscConfig+0x312>
 800283c:	4b6f      	ldr	r3, [pc, #444]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	4a6e      	ldr	r2, [pc, #440]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6213      	str	r3, [r2, #32]
 8002848:	e02d      	b.n	80028a6 <HAL_RCC_OscConfig+0x36e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x334>
 8002852:	4b6a      	ldr	r3, [pc, #424]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4a69      	ldr	r2, [pc, #420]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	6213      	str	r3, [r2, #32]
 800285e:	4b67      	ldr	r3, [pc, #412]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a66      	ldr	r2, [pc, #408]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002864:	f023 0304 	bic.w	r3, r3, #4
 8002868:	6213      	str	r3, [r2, #32]
 800286a:	e01c      	b.n	80028a6 <HAL_RCC_OscConfig+0x36e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2b05      	cmp	r3, #5
 8002872:	d10c      	bne.n	800288e <HAL_RCC_OscConfig+0x356>
 8002874:	4b61      	ldr	r3, [pc, #388]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4a60      	ldr	r2, [pc, #384]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 800287a:	f043 0304 	orr.w	r3, r3, #4
 800287e:	6213      	str	r3, [r2, #32]
 8002880:	4b5e      	ldr	r3, [pc, #376]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4a5d      	ldr	r2, [pc, #372]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6213      	str	r3, [r2, #32]
 800288c:	e00b      	b.n	80028a6 <HAL_RCC_OscConfig+0x36e>
 800288e:	4b5b      	ldr	r3, [pc, #364]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4a5a      	ldr	r2, [pc, #360]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	6213      	str	r3, [r2, #32]
 800289a:	4b58      	ldr	r3, [pc, #352]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a57      	ldr	r2, [pc, #348]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	f023 0304 	bic.w	r3, r3, #4
 80028a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d015      	beq.n	80028da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ae:	f7ff fa51 	bl	8001d54 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b4:	e00a      	b.n	80028cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7ff fa4d 	bl	8001d54 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e0b1      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028cc:	4b4b      	ldr	r3, [pc, #300]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ee      	beq.n	80028b6 <HAL_RCC_OscConfig+0x37e>
 80028d8:	e014      	b.n	8002904 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028da:	f7ff fa3b 	bl	8001d54 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7ff fa37 	bl	8001d54 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e09b      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f8:	4b40      	ldr	r3, [pc, #256]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1ee      	bne.n	80028e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002904:	7dfb      	ldrb	r3, [r7, #23]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d105      	bne.n	8002916 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290a:	4b3c      	ldr	r3, [pc, #240]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	4a3b      	ldr	r2, [pc, #236]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002910:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002914:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8087 	beq.w	8002a2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002920:	4b36      	ldr	r3, [pc, #216]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	2b08      	cmp	r3, #8
 800292a:	d061      	beq.n	80029f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d146      	bne.n	80029c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002934:	4b33      	ldr	r3, [pc, #204]	@ (8002a04 <HAL_RCC_OscConfig+0x4cc>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7ff fa0b 	bl	8001d54 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002942:	f7ff fa07 	bl	8001d54 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e06d      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002954:	4b29      	ldr	r3, [pc, #164]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f0      	bne.n	8002942 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002968:	d108      	bne.n	800297c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800296a:	4b24      	ldr	r3, [pc, #144]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	4921      	ldr	r1, [pc, #132]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297c:	4b1f      	ldr	r3, [pc, #124]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a19      	ldr	r1, [r3, #32]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	430b      	orrs	r3, r1
 800298e:	491b      	ldr	r1, [pc, #108]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002994:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <HAL_RCC_OscConfig+0x4cc>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7ff f9db 	bl	8001d54 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a2:	f7ff f9d7 	bl	8001d54 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e03d      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b4:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x46a>
 80029c0:	e035      	b.n	8002a2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b10      	ldr	r3, [pc, #64]	@ (8002a04 <HAL_RCC_OscConfig+0x4cc>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7ff f9c4 	bl	8001d54 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d0:	f7ff f9c0 	bl	8001d54 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e026      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x498>
 80029ee:	e01e      	b.n	8002a2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d107      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e019      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40007000 	.word	0x40007000
 8002a04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a08:	4b0b      	ldr	r3, [pc, #44]	@ (8002a38 <HAL_RCC_OscConfig+0x500>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000

08002a3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0d0      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a50:	4b6a      	ldr	r3, [pc, #424]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d910      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b67      	ldr	r3, [pc, #412]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 0207 	bic.w	r2, r3, #7
 8002a66:	4965      	ldr	r1, [pc, #404]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b63      	ldr	r3, [pc, #396]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0b8      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a98:	4b59      	ldr	r3, [pc, #356]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4a58      	ldr	r2, [pc, #352]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002aa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab0:	4b53      	ldr	r3, [pc, #332]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002aba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002abc:	4b50      	ldr	r3, [pc, #320]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	494d      	ldr	r1, [pc, #308]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d040      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b47      	ldr	r3, [pc, #284]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d115      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e07f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afa:	4b41      	ldr	r3, [pc, #260]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e073      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e06b      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1a:	4b39      	ldr	r3, [pc, #228]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4936      	ldr	r1, [pc, #216]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b2c:	f7ff f912 	bl	8001d54 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7ff f90e 	bl	8001d54 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e053      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b27      	ldr	r3, [pc, #156]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d210      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b24      	ldr	r3, [pc, #144]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 0207 	bic.w	r2, r3, #7
 8002b72:	4922      	ldr	r1, [pc, #136]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b20      	ldr	r3, [pc, #128]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e032      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b98:	4b19      	ldr	r3, [pc, #100]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4916      	ldr	r1, [pc, #88]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bb6:	4b12      	ldr	r3, [pc, #72]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	490e      	ldr	r1, [pc, #56]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bca:	f000 f821 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	490a      	ldr	r1, [pc, #40]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c8>)
 8002bdc:	5ccb      	ldrb	r3, [r1, r3]
 8002bde:	fa22 f303 	lsr.w	r3, r2, r3
 8002be2:	4a09      	ldr	r2, [pc, #36]	@ (8002c08 <HAL_RCC_ClockConfig+0x1cc>)
 8002be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <HAL_RCC_ClockConfig+0x1d0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff f870 	bl	8001cd0 <HAL_InitTick>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40022000 	.word	0x40022000
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08006124 	.word	0x08006124
 8002c08:	20000004 	.word	0x20000004
 8002c0c:	20000008 	.word	0x20000008

08002c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d002      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x30>
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x36>
 8002c3e:	e027      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c40:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c42:	613b      	str	r3, [r7, #16]
      break;
 8002c44:	e027      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	0c9b      	lsrs	r3, r3, #18
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	4a17      	ldr	r2, [pc, #92]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c50:	5cd3      	ldrb	r3, [r2, r3]
 8002c52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d010      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	0c5b      	lsrs	r3, r3, #17
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	4a11      	ldr	r2, [pc, #68]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c6a:	5cd3      	ldrb	r3, [r2, r3]
 8002c6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c72:	fb03 f202 	mul.w	r2, r3, r2
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	e004      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a0c      	ldr	r2, [pc, #48]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	613b      	str	r3, [r7, #16]
      break;
 8002c8e:	e002      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c90:	4b05      	ldr	r3, [pc, #20]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c92:	613b      	str	r3, [r7, #16]
      break;
 8002c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c96:	693b      	ldr	r3, [r7, #16]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	007a1200 	.word	0x007a1200
 8002cac:	0800613c 	.word	0x0800613c
 8002cb0:	0800614c 	.word	0x0800614c
 8002cb4:	003d0900 	.word	0x003d0900

08002cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cbc:	4b02      	ldr	r3, [pc, #8]	@ (8002cc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr
 8002cc8:	20000004 	.word	0x20000004

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cd0:	f7ff fff2 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	@ (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	08006134 	.word	0x08006134

08002cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cf8:	f7ff ffde 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	0adb      	lsrs	r3, r3, #11
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	@ (8002d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08006134 	.word	0x08006134

08002d1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d24:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <RCC_Delay+0x34>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0a      	ldr	r2, [pc, #40]	@ (8002d54 <RCC_Delay+0x38>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	0a5b      	lsrs	r3, r3, #9
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d38:	bf00      	nop
  }
  while (Delay --);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1e5a      	subs	r2, r3, #1
 8002d3e:	60fa      	str	r2, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f9      	bne.n	8002d38 <RCC_Delay+0x1c>
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	20000004 	.word	0x20000004
 8002d54:	10624dd3 	.word	0x10624dd3

08002d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e076      	b.n	8002e58 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d108      	bne.n	8002d84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d7a:	d009      	beq.n	8002d90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61da      	str	r2, [r3, #28]
 8002d82:	e005      	b.n	8002d90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe fd56 	bl	800185c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e14:	ea42 0103 	orr.w	r1, r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	0c1a      	lsrs	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f002 0204 	and.w	r2, r2, #4
 8002e36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e042      	b.n	8002ef8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe fd32 	bl	80018f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2224      	movs	r2, #36	@ 0x24
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f9cf 	bl	8003248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	@ 0x28
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d175      	bne.n	800300c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_UART_Transmit+0x2c>
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e06e      	b.n	800300e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2221      	movs	r2, #33	@ 0x21
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f3e:	f7fe ff09 	bl	8001d54 <HAL_GetTick>
 8002f42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	88fa      	ldrh	r2, [r7, #6]
 8002f4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f58:	d108      	bne.n	8002f6c <HAL_UART_Transmit+0x6c>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	e003      	b.n	8002f74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f74:	e02e      	b.n	8002fd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2180      	movs	r1, #128	@ 0x80
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f86d 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e03a      	b.n	800300e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	3302      	adds	r3, #2
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	e007      	b.n	8002fc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1cb      	bne.n	8002f76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2140      	movs	r1, #64	@ 0x40
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f839 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e006      	b.n	800300e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	4613      	mov	r3, r2
 8003022:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b20      	cmp	r3, #32
 800302e:	d112      	bne.n	8003056 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_UART_Receive_IT+0x26>
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e00b      	b.n	8003058 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	461a      	mov	r2, r3
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f860 	bl	8003112 <UART_Start_Receive_IT>
 8003052:	4603      	mov	r3, r0
 8003054:	e000      	b.n	8003058 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003070:	e03b      	b.n	80030ea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d037      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7fe fe6b 	bl	8001d54 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	6a3a      	ldr	r2, [r7, #32]
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <UART_WaitOnFlagUntilTimeout+0x30>
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e03a      	b.n	800310a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d023      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b80      	cmp	r3, #128	@ 0x80
 80030a6:	d020      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b40      	cmp	r3, #64	@ 0x40
 80030ac:	d01d      	beq.n	80030ea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d116      	bne.n	80030ea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f856 	bl	8003184 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2208      	movs	r2, #8
 80030dc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00f      	b.n	800310a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	429a      	cmp	r2, r3
 8003106:	d0b4      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	4613      	mov	r3, r2
 800311e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	88fa      	ldrh	r2, [r7, #6]
 800312a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	88fa      	ldrh	r2, [r7, #6]
 8003130:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2222      	movs	r2, #34	@ 0x22
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003156:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0220 	orr.w	r2, r2, #32
 8003176:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003184:	b480      	push	{r7}
 8003186:	b095      	sub	sp, #84	@ 0x54
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	330c      	adds	r3, #12
 8003192:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003196:	e853 3f00 	ldrex	r3, [r3]
 800319a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800319c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	330c      	adds	r3, #12
 80031aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80031ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031b4:	e841 2300 	strex	r3, r2, [r1]
 80031b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e5      	bne.n	800318c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3314      	adds	r3, #20
 80031c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	e853 3f00 	ldrex	r3, [r3]
 80031ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3314      	adds	r3, #20
 80031de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031e8:	e841 2300 	strex	r3, r2, [r1]
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e5      	bne.n	80031c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d119      	bne.n	8003230 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	330c      	adds	r3, #12
 8003202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	e853 3f00 	ldrex	r3, [r3]
 800320a:	60bb      	str	r3, [r7, #8]
   return(result);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f023 0310 	bic.w	r3, r3, #16
 8003212:	647b      	str	r3, [r7, #68]	@ 0x44
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800321c:	61ba      	str	r2, [r7, #24]
 800321e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003220:	6979      	ldr	r1, [r7, #20]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	e841 2300 	strex	r3, r2, [r1]
 8003228:	613b      	str	r3, [r7, #16]
   return(result);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e5      	bne.n	80031fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800323e:	bf00      	nop
 8003240:	3754      	adds	r7, #84	@ 0x54
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003282:	f023 030c 	bic.w	r3, r3, #12
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	430b      	orrs	r3, r1
 800328e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2c      	ldr	r2, [pc, #176]	@ (800335c <UART_SetConfig+0x114>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d103      	bne.n	80032b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032b0:	f7ff fd20 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	e002      	b.n	80032be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032b8:	f7ff fd08 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80032bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	009a      	lsls	r2, r3, #2
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	4a22      	ldr	r2, [pc, #136]	@ (8003360 <UART_SetConfig+0x118>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	0119      	lsls	r1, r3, #4
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	009a      	lsls	r2, r3, #2
 80032e8:	441a      	add	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003360 <UART_SetConfig+0x118>)
 80032f6:	fba3 0302 	umull	r0, r3, r3, r2
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2064      	movs	r0, #100	@ 0x64
 80032fe:	fb00 f303 	mul.w	r3, r0, r3
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	3332      	adds	r3, #50	@ 0x32
 8003308:	4a15      	ldr	r2, [pc, #84]	@ (8003360 <UART_SetConfig+0x118>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003314:	4419      	add	r1, r3
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	009a      	lsls	r2, r3, #2
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	fbb2 f2f3 	udiv	r2, r2, r3
 800332c:	4b0c      	ldr	r3, [pc, #48]	@ (8003360 <UART_SetConfig+0x118>)
 800332e:	fba3 0302 	umull	r0, r3, r3, r2
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	2064      	movs	r0, #100	@ 0x64
 8003336:	fb00 f303 	mul.w	r3, r0, r3
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	3332      	adds	r3, #50	@ 0x32
 8003340:	4a07      	ldr	r2, [pc, #28]	@ (8003360 <UART_SetConfig+0x118>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	f003 020f 	and.w	r2, r3, #15
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	440a      	add	r2, r1
 8003352:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40013800 	.word	0x40013800
 8003360:	51eb851f 	.word	0x51eb851f

08003364 <__cvt>:
 8003364:	2b00      	cmp	r3, #0
 8003366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800336a:	461d      	mov	r5, r3
 800336c:	bfbb      	ittet	lt
 800336e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003372:	461d      	movlt	r5, r3
 8003374:	2300      	movge	r3, #0
 8003376:	232d      	movlt	r3, #45	@ 0x2d
 8003378:	b088      	sub	sp, #32
 800337a:	4614      	mov	r4, r2
 800337c:	bfb8      	it	lt
 800337e:	4614      	movlt	r4, r2
 8003380:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003382:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003384:	7013      	strb	r3, [r2, #0]
 8003386:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003388:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800338c:	f023 0820 	bic.w	r8, r3, #32
 8003390:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003394:	d005      	beq.n	80033a2 <__cvt+0x3e>
 8003396:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800339a:	d100      	bne.n	800339e <__cvt+0x3a>
 800339c:	3601      	adds	r6, #1
 800339e:	2302      	movs	r3, #2
 80033a0:	e000      	b.n	80033a4 <__cvt+0x40>
 80033a2:	2303      	movs	r3, #3
 80033a4:	aa07      	add	r2, sp, #28
 80033a6:	9204      	str	r2, [sp, #16]
 80033a8:	aa06      	add	r2, sp, #24
 80033aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80033ae:	e9cd 3600 	strd	r3, r6, [sp]
 80033b2:	4622      	mov	r2, r4
 80033b4:	462b      	mov	r3, r5
 80033b6:	f000 fe83 	bl	80040c0 <_dtoa_r>
 80033ba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80033be:	4607      	mov	r7, r0
 80033c0:	d119      	bne.n	80033f6 <__cvt+0x92>
 80033c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80033c4:	07db      	lsls	r3, r3, #31
 80033c6:	d50e      	bpl.n	80033e6 <__cvt+0x82>
 80033c8:	eb00 0906 	add.w	r9, r0, r6
 80033cc:	2200      	movs	r2, #0
 80033ce:	2300      	movs	r3, #0
 80033d0:	4620      	mov	r0, r4
 80033d2:	4629      	mov	r1, r5
 80033d4:	f7fd fae8 	bl	80009a8 <__aeabi_dcmpeq>
 80033d8:	b108      	cbz	r0, 80033de <__cvt+0x7a>
 80033da:	f8cd 901c 	str.w	r9, [sp, #28]
 80033de:	2230      	movs	r2, #48	@ 0x30
 80033e0:	9b07      	ldr	r3, [sp, #28]
 80033e2:	454b      	cmp	r3, r9
 80033e4:	d31e      	bcc.n	8003424 <__cvt+0xc0>
 80033e6:	4638      	mov	r0, r7
 80033e8:	9b07      	ldr	r3, [sp, #28]
 80033ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80033ec:	1bdb      	subs	r3, r3, r7
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	b008      	add	sp, #32
 80033f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80033fa:	eb00 0906 	add.w	r9, r0, r6
 80033fe:	d1e5      	bne.n	80033cc <__cvt+0x68>
 8003400:	7803      	ldrb	r3, [r0, #0]
 8003402:	2b30      	cmp	r3, #48	@ 0x30
 8003404:	d10a      	bne.n	800341c <__cvt+0xb8>
 8003406:	2200      	movs	r2, #0
 8003408:	2300      	movs	r3, #0
 800340a:	4620      	mov	r0, r4
 800340c:	4629      	mov	r1, r5
 800340e:	f7fd facb 	bl	80009a8 <__aeabi_dcmpeq>
 8003412:	b918      	cbnz	r0, 800341c <__cvt+0xb8>
 8003414:	f1c6 0601 	rsb	r6, r6, #1
 8003418:	f8ca 6000 	str.w	r6, [sl]
 800341c:	f8da 3000 	ldr.w	r3, [sl]
 8003420:	4499      	add	r9, r3
 8003422:	e7d3      	b.n	80033cc <__cvt+0x68>
 8003424:	1c59      	adds	r1, r3, #1
 8003426:	9107      	str	r1, [sp, #28]
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e7d9      	b.n	80033e0 <__cvt+0x7c>

0800342c <__exponent>:
 800342c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800342e:	2900      	cmp	r1, #0
 8003430:	bfb6      	itet	lt
 8003432:	232d      	movlt	r3, #45	@ 0x2d
 8003434:	232b      	movge	r3, #43	@ 0x2b
 8003436:	4249      	neglt	r1, r1
 8003438:	2909      	cmp	r1, #9
 800343a:	7002      	strb	r2, [r0, #0]
 800343c:	7043      	strb	r3, [r0, #1]
 800343e:	dd29      	ble.n	8003494 <__exponent+0x68>
 8003440:	f10d 0307 	add.w	r3, sp, #7
 8003444:	461d      	mov	r5, r3
 8003446:	270a      	movs	r7, #10
 8003448:	fbb1 f6f7 	udiv	r6, r1, r7
 800344c:	461a      	mov	r2, r3
 800344e:	fb07 1416 	mls	r4, r7, r6, r1
 8003452:	3430      	adds	r4, #48	@ 0x30
 8003454:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003458:	460c      	mov	r4, r1
 800345a:	2c63      	cmp	r4, #99	@ 0x63
 800345c:	4631      	mov	r1, r6
 800345e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003462:	dcf1      	bgt.n	8003448 <__exponent+0x1c>
 8003464:	3130      	adds	r1, #48	@ 0x30
 8003466:	1e94      	subs	r4, r2, #2
 8003468:	f803 1c01 	strb.w	r1, [r3, #-1]
 800346c:	4623      	mov	r3, r4
 800346e:	1c41      	adds	r1, r0, #1
 8003470:	42ab      	cmp	r3, r5
 8003472:	d30a      	bcc.n	800348a <__exponent+0x5e>
 8003474:	f10d 0309 	add.w	r3, sp, #9
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	42ac      	cmp	r4, r5
 800347c:	bf88      	it	hi
 800347e:	2300      	movhi	r3, #0
 8003480:	3302      	adds	r3, #2
 8003482:	4403      	add	r3, r0
 8003484:	1a18      	subs	r0, r3, r0
 8003486:	b003      	add	sp, #12
 8003488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800348a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800348e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003492:	e7ed      	b.n	8003470 <__exponent+0x44>
 8003494:	2330      	movs	r3, #48	@ 0x30
 8003496:	3130      	adds	r1, #48	@ 0x30
 8003498:	7083      	strb	r3, [r0, #2]
 800349a:	70c1      	strb	r1, [r0, #3]
 800349c:	1d03      	adds	r3, r0, #4
 800349e:	e7f1      	b.n	8003484 <__exponent+0x58>

080034a0 <_printf_float>:
 80034a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a4:	b091      	sub	sp, #68	@ 0x44
 80034a6:	460c      	mov	r4, r1
 80034a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80034ac:	4616      	mov	r6, r2
 80034ae:	461f      	mov	r7, r3
 80034b0:	4605      	mov	r5, r0
 80034b2:	f000 fcf5 	bl	8003ea0 <_localeconv_r>
 80034b6:	6803      	ldr	r3, [r0, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	9308      	str	r3, [sp, #32]
 80034bc:	f7fc fe48 	bl	8000150 <strlen>
 80034c0:	2300      	movs	r3, #0
 80034c2:	930e      	str	r3, [sp, #56]	@ 0x38
 80034c4:	f8d8 3000 	ldr.w	r3, [r8]
 80034c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80034ca:	3307      	adds	r3, #7
 80034cc:	f023 0307 	bic.w	r3, r3, #7
 80034d0:	f103 0208 	add.w	r2, r3, #8
 80034d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80034d8:	f8d4 b000 	ldr.w	fp, [r4]
 80034dc:	f8c8 2000 	str.w	r2, [r8]
 80034e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80034e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80034e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80034ea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80034ee:	f04f 32ff 	mov.w	r2, #4294967295
 80034f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80034f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80034fa:	4b9c      	ldr	r3, [pc, #624]	@ (800376c <_printf_float+0x2cc>)
 80034fc:	f7fd fa86 	bl	8000a0c <__aeabi_dcmpun>
 8003500:	bb70      	cbnz	r0, 8003560 <_printf_float+0xc0>
 8003502:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003506:	f04f 32ff 	mov.w	r2, #4294967295
 800350a:	4b98      	ldr	r3, [pc, #608]	@ (800376c <_printf_float+0x2cc>)
 800350c:	f7fd fa60 	bl	80009d0 <__aeabi_dcmple>
 8003510:	bb30      	cbnz	r0, 8003560 <_printf_float+0xc0>
 8003512:	2200      	movs	r2, #0
 8003514:	2300      	movs	r3, #0
 8003516:	4640      	mov	r0, r8
 8003518:	4649      	mov	r1, r9
 800351a:	f7fd fa4f 	bl	80009bc <__aeabi_dcmplt>
 800351e:	b110      	cbz	r0, 8003526 <_printf_float+0x86>
 8003520:	232d      	movs	r3, #45	@ 0x2d
 8003522:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003526:	4a92      	ldr	r2, [pc, #584]	@ (8003770 <_printf_float+0x2d0>)
 8003528:	4b92      	ldr	r3, [pc, #584]	@ (8003774 <_printf_float+0x2d4>)
 800352a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800352e:	bf8c      	ite	hi
 8003530:	4690      	movhi	r8, r2
 8003532:	4698      	movls	r8, r3
 8003534:	2303      	movs	r3, #3
 8003536:	f04f 0900 	mov.w	r9, #0
 800353a:	6123      	str	r3, [r4, #16]
 800353c:	f02b 0304 	bic.w	r3, fp, #4
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	4633      	mov	r3, r6
 8003544:	4621      	mov	r1, r4
 8003546:	4628      	mov	r0, r5
 8003548:	9700      	str	r7, [sp, #0]
 800354a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800354c:	f000 f9d4 	bl	80038f8 <_printf_common>
 8003550:	3001      	adds	r0, #1
 8003552:	f040 8090 	bne.w	8003676 <_printf_float+0x1d6>
 8003556:	f04f 30ff 	mov.w	r0, #4294967295
 800355a:	b011      	add	sp, #68	@ 0x44
 800355c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003560:	4642      	mov	r2, r8
 8003562:	464b      	mov	r3, r9
 8003564:	4640      	mov	r0, r8
 8003566:	4649      	mov	r1, r9
 8003568:	f7fd fa50 	bl	8000a0c <__aeabi_dcmpun>
 800356c:	b148      	cbz	r0, 8003582 <_printf_float+0xe2>
 800356e:	464b      	mov	r3, r9
 8003570:	2b00      	cmp	r3, #0
 8003572:	bfb8      	it	lt
 8003574:	232d      	movlt	r3, #45	@ 0x2d
 8003576:	4a80      	ldr	r2, [pc, #512]	@ (8003778 <_printf_float+0x2d8>)
 8003578:	bfb8      	it	lt
 800357a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800357e:	4b7f      	ldr	r3, [pc, #508]	@ (800377c <_printf_float+0x2dc>)
 8003580:	e7d3      	b.n	800352a <_printf_float+0x8a>
 8003582:	6863      	ldr	r3, [r4, #4]
 8003584:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	d13f      	bne.n	800360c <_printf_float+0x16c>
 800358c:	2306      	movs	r3, #6
 800358e:	6063      	str	r3, [r4, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003596:	6023      	str	r3, [r4, #0]
 8003598:	9206      	str	r2, [sp, #24]
 800359a:	aa0e      	add	r2, sp, #56	@ 0x38
 800359c:	e9cd a204 	strd	sl, r2, [sp, #16]
 80035a0:	aa0d      	add	r2, sp, #52	@ 0x34
 80035a2:	9203      	str	r2, [sp, #12]
 80035a4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80035a8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80035ac:	6863      	ldr	r3, [r4, #4]
 80035ae:	4642      	mov	r2, r8
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	4628      	mov	r0, r5
 80035b4:	464b      	mov	r3, r9
 80035b6:	910a      	str	r1, [sp, #40]	@ 0x28
 80035b8:	f7ff fed4 	bl	8003364 <__cvt>
 80035bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80035be:	4680      	mov	r8, r0
 80035c0:	2947      	cmp	r1, #71	@ 0x47
 80035c2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80035c4:	d128      	bne.n	8003618 <_printf_float+0x178>
 80035c6:	1cc8      	adds	r0, r1, #3
 80035c8:	db02      	blt.n	80035d0 <_printf_float+0x130>
 80035ca:	6863      	ldr	r3, [r4, #4]
 80035cc:	4299      	cmp	r1, r3
 80035ce:	dd40      	ble.n	8003652 <_printf_float+0x1b2>
 80035d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80035d4:	fa5f fa8a 	uxtb.w	sl, sl
 80035d8:	4652      	mov	r2, sl
 80035da:	3901      	subs	r1, #1
 80035dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80035e0:	910d      	str	r1, [sp, #52]	@ 0x34
 80035e2:	f7ff ff23 	bl	800342c <__exponent>
 80035e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80035e8:	4681      	mov	r9, r0
 80035ea:	1813      	adds	r3, r2, r0
 80035ec:	2a01      	cmp	r2, #1
 80035ee:	6123      	str	r3, [r4, #16]
 80035f0:	dc02      	bgt.n	80035f8 <_printf_float+0x158>
 80035f2:	6822      	ldr	r2, [r4, #0]
 80035f4:	07d2      	lsls	r2, r2, #31
 80035f6:	d501      	bpl.n	80035fc <_printf_float+0x15c>
 80035f8:	3301      	adds	r3, #1
 80035fa:	6123      	str	r3, [r4, #16]
 80035fc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003600:	2b00      	cmp	r3, #0
 8003602:	d09e      	beq.n	8003542 <_printf_float+0xa2>
 8003604:	232d      	movs	r3, #45	@ 0x2d
 8003606:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800360a:	e79a      	b.n	8003542 <_printf_float+0xa2>
 800360c:	2947      	cmp	r1, #71	@ 0x47
 800360e:	d1bf      	bne.n	8003590 <_printf_float+0xf0>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1bd      	bne.n	8003590 <_printf_float+0xf0>
 8003614:	2301      	movs	r3, #1
 8003616:	e7ba      	b.n	800358e <_printf_float+0xee>
 8003618:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800361c:	d9dc      	bls.n	80035d8 <_printf_float+0x138>
 800361e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003622:	d118      	bne.n	8003656 <_printf_float+0x1b6>
 8003624:	2900      	cmp	r1, #0
 8003626:	6863      	ldr	r3, [r4, #4]
 8003628:	dd0b      	ble.n	8003642 <_printf_float+0x1a2>
 800362a:	6121      	str	r1, [r4, #16]
 800362c:	b913      	cbnz	r3, 8003634 <_printf_float+0x194>
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	07d0      	lsls	r0, r2, #31
 8003632:	d502      	bpl.n	800363a <_printf_float+0x19a>
 8003634:	3301      	adds	r3, #1
 8003636:	440b      	add	r3, r1
 8003638:	6123      	str	r3, [r4, #16]
 800363a:	f04f 0900 	mov.w	r9, #0
 800363e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003640:	e7dc      	b.n	80035fc <_printf_float+0x15c>
 8003642:	b913      	cbnz	r3, 800364a <_printf_float+0x1aa>
 8003644:	6822      	ldr	r2, [r4, #0]
 8003646:	07d2      	lsls	r2, r2, #31
 8003648:	d501      	bpl.n	800364e <_printf_float+0x1ae>
 800364a:	3302      	adds	r3, #2
 800364c:	e7f4      	b.n	8003638 <_printf_float+0x198>
 800364e:	2301      	movs	r3, #1
 8003650:	e7f2      	b.n	8003638 <_printf_float+0x198>
 8003652:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003656:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003658:	4299      	cmp	r1, r3
 800365a:	db05      	blt.n	8003668 <_printf_float+0x1c8>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	6121      	str	r1, [r4, #16]
 8003660:	07d8      	lsls	r0, r3, #31
 8003662:	d5ea      	bpl.n	800363a <_printf_float+0x19a>
 8003664:	1c4b      	adds	r3, r1, #1
 8003666:	e7e7      	b.n	8003638 <_printf_float+0x198>
 8003668:	2900      	cmp	r1, #0
 800366a:	bfcc      	ite	gt
 800366c:	2201      	movgt	r2, #1
 800366e:	f1c1 0202 	rsble	r2, r1, #2
 8003672:	4413      	add	r3, r2
 8003674:	e7e0      	b.n	8003638 <_printf_float+0x198>
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	055a      	lsls	r2, r3, #21
 800367a:	d407      	bmi.n	800368c <_printf_float+0x1ec>
 800367c:	6923      	ldr	r3, [r4, #16]
 800367e:	4642      	mov	r2, r8
 8003680:	4631      	mov	r1, r6
 8003682:	4628      	mov	r0, r5
 8003684:	47b8      	blx	r7
 8003686:	3001      	adds	r0, #1
 8003688:	d12b      	bne.n	80036e2 <_printf_float+0x242>
 800368a:	e764      	b.n	8003556 <_printf_float+0xb6>
 800368c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003690:	f240 80dc 	bls.w	800384c <_printf_float+0x3ac>
 8003694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003698:	2200      	movs	r2, #0
 800369a:	2300      	movs	r3, #0
 800369c:	f7fd f984 	bl	80009a8 <__aeabi_dcmpeq>
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d033      	beq.n	800370c <_printf_float+0x26c>
 80036a4:	2301      	movs	r3, #1
 80036a6:	4631      	mov	r1, r6
 80036a8:	4628      	mov	r0, r5
 80036aa:	4a35      	ldr	r2, [pc, #212]	@ (8003780 <_printf_float+0x2e0>)
 80036ac:	47b8      	blx	r7
 80036ae:	3001      	adds	r0, #1
 80036b0:	f43f af51 	beq.w	8003556 <_printf_float+0xb6>
 80036b4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80036b8:	4543      	cmp	r3, r8
 80036ba:	db02      	blt.n	80036c2 <_printf_float+0x222>
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	07d8      	lsls	r0, r3, #31
 80036c0:	d50f      	bpl.n	80036e2 <_printf_float+0x242>
 80036c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80036c6:	4631      	mov	r1, r6
 80036c8:	4628      	mov	r0, r5
 80036ca:	47b8      	blx	r7
 80036cc:	3001      	adds	r0, #1
 80036ce:	f43f af42 	beq.w	8003556 <_printf_float+0xb6>
 80036d2:	f04f 0900 	mov.w	r9, #0
 80036d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80036da:	f104 0a1a 	add.w	sl, r4, #26
 80036de:	45c8      	cmp	r8, r9
 80036e0:	dc09      	bgt.n	80036f6 <_printf_float+0x256>
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	079b      	lsls	r3, r3, #30
 80036e6:	f100 8102 	bmi.w	80038ee <_printf_float+0x44e>
 80036ea:	68e0      	ldr	r0, [r4, #12]
 80036ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80036ee:	4298      	cmp	r0, r3
 80036f0:	bfb8      	it	lt
 80036f2:	4618      	movlt	r0, r3
 80036f4:	e731      	b.n	800355a <_printf_float+0xba>
 80036f6:	2301      	movs	r3, #1
 80036f8:	4652      	mov	r2, sl
 80036fa:	4631      	mov	r1, r6
 80036fc:	4628      	mov	r0, r5
 80036fe:	47b8      	blx	r7
 8003700:	3001      	adds	r0, #1
 8003702:	f43f af28 	beq.w	8003556 <_printf_float+0xb6>
 8003706:	f109 0901 	add.w	r9, r9, #1
 800370a:	e7e8      	b.n	80036de <_printf_float+0x23e>
 800370c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800370e:	2b00      	cmp	r3, #0
 8003710:	dc38      	bgt.n	8003784 <_printf_float+0x2e4>
 8003712:	2301      	movs	r3, #1
 8003714:	4631      	mov	r1, r6
 8003716:	4628      	mov	r0, r5
 8003718:	4a19      	ldr	r2, [pc, #100]	@ (8003780 <_printf_float+0x2e0>)
 800371a:	47b8      	blx	r7
 800371c:	3001      	adds	r0, #1
 800371e:	f43f af1a 	beq.w	8003556 <_printf_float+0xb6>
 8003722:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003726:	ea59 0303 	orrs.w	r3, r9, r3
 800372a:	d102      	bne.n	8003732 <_printf_float+0x292>
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	07d9      	lsls	r1, r3, #31
 8003730:	d5d7      	bpl.n	80036e2 <_printf_float+0x242>
 8003732:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003736:	4631      	mov	r1, r6
 8003738:	4628      	mov	r0, r5
 800373a:	47b8      	blx	r7
 800373c:	3001      	adds	r0, #1
 800373e:	f43f af0a 	beq.w	8003556 <_printf_float+0xb6>
 8003742:	f04f 0a00 	mov.w	sl, #0
 8003746:	f104 0b1a 	add.w	fp, r4, #26
 800374a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800374c:	425b      	negs	r3, r3
 800374e:	4553      	cmp	r3, sl
 8003750:	dc01      	bgt.n	8003756 <_printf_float+0x2b6>
 8003752:	464b      	mov	r3, r9
 8003754:	e793      	b.n	800367e <_printf_float+0x1de>
 8003756:	2301      	movs	r3, #1
 8003758:	465a      	mov	r2, fp
 800375a:	4631      	mov	r1, r6
 800375c:	4628      	mov	r0, r5
 800375e:	47b8      	blx	r7
 8003760:	3001      	adds	r0, #1
 8003762:	f43f aef8 	beq.w	8003556 <_printf_float+0xb6>
 8003766:	f10a 0a01 	add.w	sl, sl, #1
 800376a:	e7ee      	b.n	800374a <_printf_float+0x2aa>
 800376c:	7fefffff 	.word	0x7fefffff
 8003770:	08006152 	.word	0x08006152
 8003774:	0800614e 	.word	0x0800614e
 8003778:	0800615a 	.word	0x0800615a
 800377c:	08006156 	.word	0x08006156
 8003780:	0800615e 	.word	0x0800615e
 8003784:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003786:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800378a:	4553      	cmp	r3, sl
 800378c:	bfa8      	it	ge
 800378e:	4653      	movge	r3, sl
 8003790:	2b00      	cmp	r3, #0
 8003792:	4699      	mov	r9, r3
 8003794:	dc36      	bgt.n	8003804 <_printf_float+0x364>
 8003796:	f04f 0b00 	mov.w	fp, #0
 800379a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800379e:	f104 021a 	add.w	r2, r4, #26
 80037a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80037a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80037a6:	eba3 0309 	sub.w	r3, r3, r9
 80037aa:	455b      	cmp	r3, fp
 80037ac:	dc31      	bgt.n	8003812 <_printf_float+0x372>
 80037ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037b0:	459a      	cmp	sl, r3
 80037b2:	dc3a      	bgt.n	800382a <_printf_float+0x38a>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	07da      	lsls	r2, r3, #31
 80037b8:	d437      	bmi.n	800382a <_printf_float+0x38a>
 80037ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037bc:	ebaa 0903 	sub.w	r9, sl, r3
 80037c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037c2:	ebaa 0303 	sub.w	r3, sl, r3
 80037c6:	4599      	cmp	r9, r3
 80037c8:	bfa8      	it	ge
 80037ca:	4699      	movge	r9, r3
 80037cc:	f1b9 0f00 	cmp.w	r9, #0
 80037d0:	dc33      	bgt.n	800383a <_printf_float+0x39a>
 80037d2:	f04f 0800 	mov.w	r8, #0
 80037d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037da:	f104 0b1a 	add.w	fp, r4, #26
 80037de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037e0:	ebaa 0303 	sub.w	r3, sl, r3
 80037e4:	eba3 0309 	sub.w	r3, r3, r9
 80037e8:	4543      	cmp	r3, r8
 80037ea:	f77f af7a 	ble.w	80036e2 <_printf_float+0x242>
 80037ee:	2301      	movs	r3, #1
 80037f0:	465a      	mov	r2, fp
 80037f2:	4631      	mov	r1, r6
 80037f4:	4628      	mov	r0, r5
 80037f6:	47b8      	blx	r7
 80037f8:	3001      	adds	r0, #1
 80037fa:	f43f aeac 	beq.w	8003556 <_printf_float+0xb6>
 80037fe:	f108 0801 	add.w	r8, r8, #1
 8003802:	e7ec      	b.n	80037de <_printf_float+0x33e>
 8003804:	4642      	mov	r2, r8
 8003806:	4631      	mov	r1, r6
 8003808:	4628      	mov	r0, r5
 800380a:	47b8      	blx	r7
 800380c:	3001      	adds	r0, #1
 800380e:	d1c2      	bne.n	8003796 <_printf_float+0x2f6>
 8003810:	e6a1      	b.n	8003556 <_printf_float+0xb6>
 8003812:	2301      	movs	r3, #1
 8003814:	4631      	mov	r1, r6
 8003816:	4628      	mov	r0, r5
 8003818:	920a      	str	r2, [sp, #40]	@ 0x28
 800381a:	47b8      	blx	r7
 800381c:	3001      	adds	r0, #1
 800381e:	f43f ae9a 	beq.w	8003556 <_printf_float+0xb6>
 8003822:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003824:	f10b 0b01 	add.w	fp, fp, #1
 8003828:	e7bb      	b.n	80037a2 <_printf_float+0x302>
 800382a:	4631      	mov	r1, r6
 800382c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003830:	4628      	mov	r0, r5
 8003832:	47b8      	blx	r7
 8003834:	3001      	adds	r0, #1
 8003836:	d1c0      	bne.n	80037ba <_printf_float+0x31a>
 8003838:	e68d      	b.n	8003556 <_printf_float+0xb6>
 800383a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800383c:	464b      	mov	r3, r9
 800383e:	4631      	mov	r1, r6
 8003840:	4628      	mov	r0, r5
 8003842:	4442      	add	r2, r8
 8003844:	47b8      	blx	r7
 8003846:	3001      	adds	r0, #1
 8003848:	d1c3      	bne.n	80037d2 <_printf_float+0x332>
 800384a:	e684      	b.n	8003556 <_printf_float+0xb6>
 800384c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003850:	f1ba 0f01 	cmp.w	sl, #1
 8003854:	dc01      	bgt.n	800385a <_printf_float+0x3ba>
 8003856:	07db      	lsls	r3, r3, #31
 8003858:	d536      	bpl.n	80038c8 <_printf_float+0x428>
 800385a:	2301      	movs	r3, #1
 800385c:	4642      	mov	r2, r8
 800385e:	4631      	mov	r1, r6
 8003860:	4628      	mov	r0, r5
 8003862:	47b8      	blx	r7
 8003864:	3001      	adds	r0, #1
 8003866:	f43f ae76 	beq.w	8003556 <_printf_float+0xb6>
 800386a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800386e:	4631      	mov	r1, r6
 8003870:	4628      	mov	r0, r5
 8003872:	47b8      	blx	r7
 8003874:	3001      	adds	r0, #1
 8003876:	f43f ae6e 	beq.w	8003556 <_printf_float+0xb6>
 800387a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800387e:	2200      	movs	r2, #0
 8003880:	2300      	movs	r3, #0
 8003882:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003886:	f7fd f88f 	bl	80009a8 <__aeabi_dcmpeq>
 800388a:	b9c0      	cbnz	r0, 80038be <_printf_float+0x41e>
 800388c:	4653      	mov	r3, sl
 800388e:	f108 0201 	add.w	r2, r8, #1
 8003892:	4631      	mov	r1, r6
 8003894:	4628      	mov	r0, r5
 8003896:	47b8      	blx	r7
 8003898:	3001      	adds	r0, #1
 800389a:	d10c      	bne.n	80038b6 <_printf_float+0x416>
 800389c:	e65b      	b.n	8003556 <_printf_float+0xb6>
 800389e:	2301      	movs	r3, #1
 80038a0:	465a      	mov	r2, fp
 80038a2:	4631      	mov	r1, r6
 80038a4:	4628      	mov	r0, r5
 80038a6:	47b8      	blx	r7
 80038a8:	3001      	adds	r0, #1
 80038aa:	f43f ae54 	beq.w	8003556 <_printf_float+0xb6>
 80038ae:	f108 0801 	add.w	r8, r8, #1
 80038b2:	45d0      	cmp	r8, sl
 80038b4:	dbf3      	blt.n	800389e <_printf_float+0x3fe>
 80038b6:	464b      	mov	r3, r9
 80038b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80038bc:	e6e0      	b.n	8003680 <_printf_float+0x1e0>
 80038be:	f04f 0800 	mov.w	r8, #0
 80038c2:	f104 0b1a 	add.w	fp, r4, #26
 80038c6:	e7f4      	b.n	80038b2 <_printf_float+0x412>
 80038c8:	2301      	movs	r3, #1
 80038ca:	4642      	mov	r2, r8
 80038cc:	e7e1      	b.n	8003892 <_printf_float+0x3f2>
 80038ce:	2301      	movs	r3, #1
 80038d0:	464a      	mov	r2, r9
 80038d2:	4631      	mov	r1, r6
 80038d4:	4628      	mov	r0, r5
 80038d6:	47b8      	blx	r7
 80038d8:	3001      	adds	r0, #1
 80038da:	f43f ae3c 	beq.w	8003556 <_printf_float+0xb6>
 80038de:	f108 0801 	add.w	r8, r8, #1
 80038e2:	68e3      	ldr	r3, [r4, #12]
 80038e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80038e6:	1a5b      	subs	r3, r3, r1
 80038e8:	4543      	cmp	r3, r8
 80038ea:	dcf0      	bgt.n	80038ce <_printf_float+0x42e>
 80038ec:	e6fd      	b.n	80036ea <_printf_float+0x24a>
 80038ee:	f04f 0800 	mov.w	r8, #0
 80038f2:	f104 0919 	add.w	r9, r4, #25
 80038f6:	e7f4      	b.n	80038e2 <_printf_float+0x442>

080038f8 <_printf_common>:
 80038f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038fc:	4616      	mov	r6, r2
 80038fe:	4698      	mov	r8, r3
 8003900:	688a      	ldr	r2, [r1, #8]
 8003902:	690b      	ldr	r3, [r1, #16]
 8003904:	4607      	mov	r7, r0
 8003906:	4293      	cmp	r3, r2
 8003908:	bfb8      	it	lt
 800390a:	4613      	movlt	r3, r2
 800390c:	6033      	str	r3, [r6, #0]
 800390e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003912:	460c      	mov	r4, r1
 8003914:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003918:	b10a      	cbz	r2, 800391e <_printf_common+0x26>
 800391a:	3301      	adds	r3, #1
 800391c:	6033      	str	r3, [r6, #0]
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	0699      	lsls	r1, r3, #26
 8003922:	bf42      	ittt	mi
 8003924:	6833      	ldrmi	r3, [r6, #0]
 8003926:	3302      	addmi	r3, #2
 8003928:	6033      	strmi	r3, [r6, #0]
 800392a:	6825      	ldr	r5, [r4, #0]
 800392c:	f015 0506 	ands.w	r5, r5, #6
 8003930:	d106      	bne.n	8003940 <_printf_common+0x48>
 8003932:	f104 0a19 	add.w	sl, r4, #25
 8003936:	68e3      	ldr	r3, [r4, #12]
 8003938:	6832      	ldr	r2, [r6, #0]
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	42ab      	cmp	r3, r5
 800393e:	dc2b      	bgt.n	8003998 <_printf_common+0xa0>
 8003940:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003944:	6822      	ldr	r2, [r4, #0]
 8003946:	3b00      	subs	r3, #0
 8003948:	bf18      	it	ne
 800394a:	2301      	movne	r3, #1
 800394c:	0692      	lsls	r2, r2, #26
 800394e:	d430      	bmi.n	80039b2 <_printf_common+0xba>
 8003950:	4641      	mov	r1, r8
 8003952:	4638      	mov	r0, r7
 8003954:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003958:	47c8      	blx	r9
 800395a:	3001      	adds	r0, #1
 800395c:	d023      	beq.n	80039a6 <_printf_common+0xae>
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	6922      	ldr	r2, [r4, #16]
 8003962:	f003 0306 	and.w	r3, r3, #6
 8003966:	2b04      	cmp	r3, #4
 8003968:	bf14      	ite	ne
 800396a:	2500      	movne	r5, #0
 800396c:	6833      	ldreq	r3, [r6, #0]
 800396e:	f04f 0600 	mov.w	r6, #0
 8003972:	bf08      	it	eq
 8003974:	68e5      	ldreq	r5, [r4, #12]
 8003976:	f104 041a 	add.w	r4, r4, #26
 800397a:	bf08      	it	eq
 800397c:	1aed      	subeq	r5, r5, r3
 800397e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003982:	bf08      	it	eq
 8003984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003988:	4293      	cmp	r3, r2
 800398a:	bfc4      	itt	gt
 800398c:	1a9b      	subgt	r3, r3, r2
 800398e:	18ed      	addgt	r5, r5, r3
 8003990:	42b5      	cmp	r5, r6
 8003992:	d11a      	bne.n	80039ca <_printf_common+0xd2>
 8003994:	2000      	movs	r0, #0
 8003996:	e008      	b.n	80039aa <_printf_common+0xb2>
 8003998:	2301      	movs	r3, #1
 800399a:	4652      	mov	r2, sl
 800399c:	4641      	mov	r1, r8
 800399e:	4638      	mov	r0, r7
 80039a0:	47c8      	blx	r9
 80039a2:	3001      	adds	r0, #1
 80039a4:	d103      	bne.n	80039ae <_printf_common+0xb6>
 80039a6:	f04f 30ff 	mov.w	r0, #4294967295
 80039aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ae:	3501      	adds	r5, #1
 80039b0:	e7c1      	b.n	8003936 <_printf_common+0x3e>
 80039b2:	2030      	movs	r0, #48	@ 0x30
 80039b4:	18e1      	adds	r1, r4, r3
 80039b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039c0:	4422      	add	r2, r4
 80039c2:	3302      	adds	r3, #2
 80039c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039c8:	e7c2      	b.n	8003950 <_printf_common+0x58>
 80039ca:	2301      	movs	r3, #1
 80039cc:	4622      	mov	r2, r4
 80039ce:	4641      	mov	r1, r8
 80039d0:	4638      	mov	r0, r7
 80039d2:	47c8      	blx	r9
 80039d4:	3001      	adds	r0, #1
 80039d6:	d0e6      	beq.n	80039a6 <_printf_common+0xae>
 80039d8:	3601      	adds	r6, #1
 80039da:	e7d9      	b.n	8003990 <_printf_common+0x98>

080039dc <_printf_i>:
 80039dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039e0:	7e0f      	ldrb	r7, [r1, #24]
 80039e2:	4691      	mov	r9, r2
 80039e4:	2f78      	cmp	r7, #120	@ 0x78
 80039e6:	4680      	mov	r8, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	469a      	mov	sl, r3
 80039ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80039ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039f2:	d807      	bhi.n	8003a04 <_printf_i+0x28>
 80039f4:	2f62      	cmp	r7, #98	@ 0x62
 80039f6:	d80a      	bhi.n	8003a0e <_printf_i+0x32>
 80039f8:	2f00      	cmp	r7, #0
 80039fa:	f000 80d1 	beq.w	8003ba0 <_printf_i+0x1c4>
 80039fe:	2f58      	cmp	r7, #88	@ 0x58
 8003a00:	f000 80b8 	beq.w	8003b74 <_printf_i+0x198>
 8003a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a0c:	e03a      	b.n	8003a84 <_printf_i+0xa8>
 8003a0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a12:	2b15      	cmp	r3, #21
 8003a14:	d8f6      	bhi.n	8003a04 <_printf_i+0x28>
 8003a16:	a101      	add	r1, pc, #4	@ (adr r1, 8003a1c <_printf_i+0x40>)
 8003a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a1c:	08003a75 	.word	0x08003a75
 8003a20:	08003a89 	.word	0x08003a89
 8003a24:	08003a05 	.word	0x08003a05
 8003a28:	08003a05 	.word	0x08003a05
 8003a2c:	08003a05 	.word	0x08003a05
 8003a30:	08003a05 	.word	0x08003a05
 8003a34:	08003a89 	.word	0x08003a89
 8003a38:	08003a05 	.word	0x08003a05
 8003a3c:	08003a05 	.word	0x08003a05
 8003a40:	08003a05 	.word	0x08003a05
 8003a44:	08003a05 	.word	0x08003a05
 8003a48:	08003b87 	.word	0x08003b87
 8003a4c:	08003ab3 	.word	0x08003ab3
 8003a50:	08003b41 	.word	0x08003b41
 8003a54:	08003a05 	.word	0x08003a05
 8003a58:	08003a05 	.word	0x08003a05
 8003a5c:	08003ba9 	.word	0x08003ba9
 8003a60:	08003a05 	.word	0x08003a05
 8003a64:	08003ab3 	.word	0x08003ab3
 8003a68:	08003a05 	.word	0x08003a05
 8003a6c:	08003a05 	.word	0x08003a05
 8003a70:	08003b49 	.word	0x08003b49
 8003a74:	6833      	ldr	r3, [r6, #0]
 8003a76:	1d1a      	adds	r2, r3, #4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6032      	str	r2, [r6, #0]
 8003a7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a84:	2301      	movs	r3, #1
 8003a86:	e09c      	b.n	8003bc2 <_printf_i+0x1e6>
 8003a88:	6833      	ldr	r3, [r6, #0]
 8003a8a:	6820      	ldr	r0, [r4, #0]
 8003a8c:	1d19      	adds	r1, r3, #4
 8003a8e:	6031      	str	r1, [r6, #0]
 8003a90:	0606      	lsls	r6, r0, #24
 8003a92:	d501      	bpl.n	8003a98 <_printf_i+0xbc>
 8003a94:	681d      	ldr	r5, [r3, #0]
 8003a96:	e003      	b.n	8003aa0 <_printf_i+0xc4>
 8003a98:	0645      	lsls	r5, r0, #25
 8003a9a:	d5fb      	bpl.n	8003a94 <_printf_i+0xb8>
 8003a9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003aa0:	2d00      	cmp	r5, #0
 8003aa2:	da03      	bge.n	8003aac <_printf_i+0xd0>
 8003aa4:	232d      	movs	r3, #45	@ 0x2d
 8003aa6:	426d      	negs	r5, r5
 8003aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003aac:	230a      	movs	r3, #10
 8003aae:	4858      	ldr	r0, [pc, #352]	@ (8003c10 <_printf_i+0x234>)
 8003ab0:	e011      	b.n	8003ad6 <_printf_i+0xfa>
 8003ab2:	6821      	ldr	r1, [r4, #0]
 8003ab4:	6833      	ldr	r3, [r6, #0]
 8003ab6:	0608      	lsls	r0, r1, #24
 8003ab8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003abc:	d402      	bmi.n	8003ac4 <_printf_i+0xe8>
 8003abe:	0649      	lsls	r1, r1, #25
 8003ac0:	bf48      	it	mi
 8003ac2:	b2ad      	uxthmi	r5, r5
 8003ac4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ac6:	6033      	str	r3, [r6, #0]
 8003ac8:	bf14      	ite	ne
 8003aca:	230a      	movne	r3, #10
 8003acc:	2308      	moveq	r3, #8
 8003ace:	4850      	ldr	r0, [pc, #320]	@ (8003c10 <_printf_i+0x234>)
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ad6:	6866      	ldr	r6, [r4, #4]
 8003ad8:	2e00      	cmp	r6, #0
 8003ada:	60a6      	str	r6, [r4, #8]
 8003adc:	db05      	blt.n	8003aea <_printf_i+0x10e>
 8003ade:	6821      	ldr	r1, [r4, #0]
 8003ae0:	432e      	orrs	r6, r5
 8003ae2:	f021 0104 	bic.w	r1, r1, #4
 8003ae6:	6021      	str	r1, [r4, #0]
 8003ae8:	d04b      	beq.n	8003b82 <_printf_i+0x1a6>
 8003aea:	4616      	mov	r6, r2
 8003aec:	fbb5 f1f3 	udiv	r1, r5, r3
 8003af0:	fb03 5711 	mls	r7, r3, r1, r5
 8003af4:	5dc7      	ldrb	r7, [r0, r7]
 8003af6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003afa:	462f      	mov	r7, r5
 8003afc:	42bb      	cmp	r3, r7
 8003afe:	460d      	mov	r5, r1
 8003b00:	d9f4      	bls.n	8003aec <_printf_i+0x110>
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d10b      	bne.n	8003b1e <_printf_i+0x142>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	07df      	lsls	r7, r3, #31
 8003b0a:	d508      	bpl.n	8003b1e <_printf_i+0x142>
 8003b0c:	6923      	ldr	r3, [r4, #16]
 8003b0e:	6861      	ldr	r1, [r4, #4]
 8003b10:	4299      	cmp	r1, r3
 8003b12:	bfde      	ittt	le
 8003b14:	2330      	movle	r3, #48	@ 0x30
 8003b16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b1e:	1b92      	subs	r2, r2, r6
 8003b20:	6122      	str	r2, [r4, #16]
 8003b22:	464b      	mov	r3, r9
 8003b24:	4621      	mov	r1, r4
 8003b26:	4640      	mov	r0, r8
 8003b28:	f8cd a000 	str.w	sl, [sp]
 8003b2c:	aa03      	add	r2, sp, #12
 8003b2e:	f7ff fee3 	bl	80038f8 <_printf_common>
 8003b32:	3001      	adds	r0, #1
 8003b34:	d14a      	bne.n	8003bcc <_printf_i+0x1f0>
 8003b36:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3a:	b004      	add	sp, #16
 8003b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	f043 0320 	orr.w	r3, r3, #32
 8003b46:	6023      	str	r3, [r4, #0]
 8003b48:	2778      	movs	r7, #120	@ 0x78
 8003b4a:	4832      	ldr	r0, [pc, #200]	@ (8003c14 <_printf_i+0x238>)
 8003b4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	6831      	ldr	r1, [r6, #0]
 8003b54:	061f      	lsls	r7, r3, #24
 8003b56:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b5a:	d402      	bmi.n	8003b62 <_printf_i+0x186>
 8003b5c:	065f      	lsls	r7, r3, #25
 8003b5e:	bf48      	it	mi
 8003b60:	b2ad      	uxthmi	r5, r5
 8003b62:	6031      	str	r1, [r6, #0]
 8003b64:	07d9      	lsls	r1, r3, #31
 8003b66:	bf44      	itt	mi
 8003b68:	f043 0320 	orrmi.w	r3, r3, #32
 8003b6c:	6023      	strmi	r3, [r4, #0]
 8003b6e:	b11d      	cbz	r5, 8003b78 <_printf_i+0x19c>
 8003b70:	2310      	movs	r3, #16
 8003b72:	e7ad      	b.n	8003ad0 <_printf_i+0xf4>
 8003b74:	4826      	ldr	r0, [pc, #152]	@ (8003c10 <_printf_i+0x234>)
 8003b76:	e7e9      	b.n	8003b4c <_printf_i+0x170>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	f023 0320 	bic.w	r3, r3, #32
 8003b7e:	6023      	str	r3, [r4, #0]
 8003b80:	e7f6      	b.n	8003b70 <_printf_i+0x194>
 8003b82:	4616      	mov	r6, r2
 8003b84:	e7bd      	b.n	8003b02 <_printf_i+0x126>
 8003b86:	6833      	ldr	r3, [r6, #0]
 8003b88:	6825      	ldr	r5, [r4, #0]
 8003b8a:	1d18      	adds	r0, r3, #4
 8003b8c:	6961      	ldr	r1, [r4, #20]
 8003b8e:	6030      	str	r0, [r6, #0]
 8003b90:	062e      	lsls	r6, r5, #24
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	d501      	bpl.n	8003b9a <_printf_i+0x1be>
 8003b96:	6019      	str	r1, [r3, #0]
 8003b98:	e002      	b.n	8003ba0 <_printf_i+0x1c4>
 8003b9a:	0668      	lsls	r0, r5, #25
 8003b9c:	d5fb      	bpl.n	8003b96 <_printf_i+0x1ba>
 8003b9e:	8019      	strh	r1, [r3, #0]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4616      	mov	r6, r2
 8003ba4:	6123      	str	r3, [r4, #16]
 8003ba6:	e7bc      	b.n	8003b22 <_printf_i+0x146>
 8003ba8:	6833      	ldr	r3, [r6, #0]
 8003baa:	2100      	movs	r1, #0
 8003bac:	1d1a      	adds	r2, r3, #4
 8003bae:	6032      	str	r2, [r6, #0]
 8003bb0:	681e      	ldr	r6, [r3, #0]
 8003bb2:	6862      	ldr	r2, [r4, #4]
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	f000 f9ea 	bl	8003f8e <memchr>
 8003bba:	b108      	cbz	r0, 8003bc0 <_printf_i+0x1e4>
 8003bbc:	1b80      	subs	r0, r0, r6
 8003bbe:	6060      	str	r0, [r4, #4]
 8003bc0:	6863      	ldr	r3, [r4, #4]
 8003bc2:	6123      	str	r3, [r4, #16]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bca:	e7aa      	b.n	8003b22 <_printf_i+0x146>
 8003bcc:	4632      	mov	r2, r6
 8003bce:	4649      	mov	r1, r9
 8003bd0:	4640      	mov	r0, r8
 8003bd2:	6923      	ldr	r3, [r4, #16]
 8003bd4:	47d0      	blx	sl
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	d0ad      	beq.n	8003b36 <_printf_i+0x15a>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	079b      	lsls	r3, r3, #30
 8003bde:	d413      	bmi.n	8003c08 <_printf_i+0x22c>
 8003be0:	68e0      	ldr	r0, [r4, #12]
 8003be2:	9b03      	ldr	r3, [sp, #12]
 8003be4:	4298      	cmp	r0, r3
 8003be6:	bfb8      	it	lt
 8003be8:	4618      	movlt	r0, r3
 8003bea:	e7a6      	b.n	8003b3a <_printf_i+0x15e>
 8003bec:	2301      	movs	r3, #1
 8003bee:	4632      	mov	r2, r6
 8003bf0:	4649      	mov	r1, r9
 8003bf2:	4640      	mov	r0, r8
 8003bf4:	47d0      	blx	sl
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d09d      	beq.n	8003b36 <_printf_i+0x15a>
 8003bfa:	3501      	adds	r5, #1
 8003bfc:	68e3      	ldr	r3, [r4, #12]
 8003bfe:	9903      	ldr	r1, [sp, #12]
 8003c00:	1a5b      	subs	r3, r3, r1
 8003c02:	42ab      	cmp	r3, r5
 8003c04:	dcf2      	bgt.n	8003bec <_printf_i+0x210>
 8003c06:	e7eb      	b.n	8003be0 <_printf_i+0x204>
 8003c08:	2500      	movs	r5, #0
 8003c0a:	f104 0619 	add.w	r6, r4, #25
 8003c0e:	e7f5      	b.n	8003bfc <_printf_i+0x220>
 8003c10:	08006160 	.word	0x08006160
 8003c14:	08006171 	.word	0x08006171

08003c18 <std>:
 8003c18:	2300      	movs	r3, #0
 8003c1a:	b510      	push	{r4, lr}
 8003c1c:	4604      	mov	r4, r0
 8003c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c26:	6083      	str	r3, [r0, #8]
 8003c28:	8181      	strh	r1, [r0, #12]
 8003c2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c2c:	81c2      	strh	r2, [r0, #14]
 8003c2e:	6183      	str	r3, [r0, #24]
 8003c30:	4619      	mov	r1, r3
 8003c32:	2208      	movs	r2, #8
 8003c34:	305c      	adds	r0, #92	@ 0x5c
 8003c36:	f000 f92a 	bl	8003e8e <memset>
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c70 <std+0x58>)
 8003c3c:	6224      	str	r4, [r4, #32]
 8003c3e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c40:	4b0c      	ldr	r3, [pc, #48]	@ (8003c74 <std+0x5c>)
 8003c42:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c44:	4b0c      	ldr	r3, [pc, #48]	@ (8003c78 <std+0x60>)
 8003c46:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c48:	4b0c      	ldr	r3, [pc, #48]	@ (8003c7c <std+0x64>)
 8003c4a:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c80 <std+0x68>)
 8003c4e:	429c      	cmp	r4, r3
 8003c50:	d006      	beq.n	8003c60 <std+0x48>
 8003c52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c56:	4294      	cmp	r4, r2
 8003c58:	d002      	beq.n	8003c60 <std+0x48>
 8003c5a:	33d0      	adds	r3, #208	@ 0xd0
 8003c5c:	429c      	cmp	r4, r3
 8003c5e:	d105      	bne.n	8003c6c <std+0x54>
 8003c60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c68:	f000 b98e 	b.w	8003f88 <__retarget_lock_init_recursive>
 8003c6c:	bd10      	pop	{r4, pc}
 8003c6e:	bf00      	nop
 8003c70:	08003e09 	.word	0x08003e09
 8003c74:	08003e2b 	.word	0x08003e2b
 8003c78:	08003e63 	.word	0x08003e63
 8003c7c:	08003e87 	.word	0x08003e87
 8003c80:	20000428 	.word	0x20000428

08003c84 <stdio_exit_handler>:
 8003c84:	4a02      	ldr	r2, [pc, #8]	@ (8003c90 <stdio_exit_handler+0xc>)
 8003c86:	4903      	ldr	r1, [pc, #12]	@ (8003c94 <stdio_exit_handler+0x10>)
 8003c88:	4803      	ldr	r0, [pc, #12]	@ (8003c98 <stdio_exit_handler+0x14>)
 8003c8a:	f000 b869 	b.w	8003d60 <_fwalk_sglue>
 8003c8e:	bf00      	nop
 8003c90:	20000010 	.word	0x20000010
 8003c94:	08005909 	.word	0x08005909
 8003c98:	20000020 	.word	0x20000020

08003c9c <cleanup_stdio>:
 8003c9c:	6841      	ldr	r1, [r0, #4]
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <cleanup_stdio+0x34>)
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	4299      	cmp	r1, r3
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	d001      	beq.n	8003cac <cleanup_stdio+0x10>
 8003ca8:	f001 fe2e 	bl	8005908 <_fflush_r>
 8003cac:	68a1      	ldr	r1, [r4, #8]
 8003cae:	4b09      	ldr	r3, [pc, #36]	@ (8003cd4 <cleanup_stdio+0x38>)
 8003cb0:	4299      	cmp	r1, r3
 8003cb2:	d002      	beq.n	8003cba <cleanup_stdio+0x1e>
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f001 fe27 	bl	8005908 <_fflush_r>
 8003cba:	68e1      	ldr	r1, [r4, #12]
 8003cbc:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <cleanup_stdio+0x3c>)
 8003cbe:	4299      	cmp	r1, r3
 8003cc0:	d004      	beq.n	8003ccc <cleanup_stdio+0x30>
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cc8:	f001 be1e 	b.w	8005908 <_fflush_r>
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000428 	.word	0x20000428
 8003cd4:	20000490 	.word	0x20000490
 8003cd8:	200004f8 	.word	0x200004f8

08003cdc <global_stdio_init.part.0>:
 8003cdc:	b510      	push	{r4, lr}
 8003cde:	4b0b      	ldr	r3, [pc, #44]	@ (8003d0c <global_stdio_init.part.0+0x30>)
 8003ce0:	4c0b      	ldr	r4, [pc, #44]	@ (8003d10 <global_stdio_init.part.0+0x34>)
 8003ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8003d14 <global_stdio_init.part.0+0x38>)
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	2104      	movs	r1, #4
 8003cea:	2200      	movs	r2, #0
 8003cec:	f7ff ff94 	bl	8003c18 <std>
 8003cf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	2109      	movs	r1, #9
 8003cf8:	f7ff ff8e 	bl	8003c18 <std>
 8003cfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d00:	2202      	movs	r2, #2
 8003d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d06:	2112      	movs	r1, #18
 8003d08:	f7ff bf86 	b.w	8003c18 <std>
 8003d0c:	20000560 	.word	0x20000560
 8003d10:	20000428 	.word	0x20000428
 8003d14:	08003c85 	.word	0x08003c85

08003d18 <__sfp_lock_acquire>:
 8003d18:	4801      	ldr	r0, [pc, #4]	@ (8003d20 <__sfp_lock_acquire+0x8>)
 8003d1a:	f000 b936 	b.w	8003f8a <__retarget_lock_acquire_recursive>
 8003d1e:	bf00      	nop
 8003d20:	20000569 	.word	0x20000569

08003d24 <__sfp_lock_release>:
 8003d24:	4801      	ldr	r0, [pc, #4]	@ (8003d2c <__sfp_lock_release+0x8>)
 8003d26:	f000 b931 	b.w	8003f8c <__retarget_lock_release_recursive>
 8003d2a:	bf00      	nop
 8003d2c:	20000569 	.word	0x20000569

08003d30 <__sinit>:
 8003d30:	b510      	push	{r4, lr}
 8003d32:	4604      	mov	r4, r0
 8003d34:	f7ff fff0 	bl	8003d18 <__sfp_lock_acquire>
 8003d38:	6a23      	ldr	r3, [r4, #32]
 8003d3a:	b11b      	cbz	r3, 8003d44 <__sinit+0x14>
 8003d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d40:	f7ff bff0 	b.w	8003d24 <__sfp_lock_release>
 8003d44:	4b04      	ldr	r3, [pc, #16]	@ (8003d58 <__sinit+0x28>)
 8003d46:	6223      	str	r3, [r4, #32]
 8003d48:	4b04      	ldr	r3, [pc, #16]	@ (8003d5c <__sinit+0x2c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f5      	bne.n	8003d3c <__sinit+0xc>
 8003d50:	f7ff ffc4 	bl	8003cdc <global_stdio_init.part.0>
 8003d54:	e7f2      	b.n	8003d3c <__sinit+0xc>
 8003d56:	bf00      	nop
 8003d58:	08003c9d 	.word	0x08003c9d
 8003d5c:	20000560 	.word	0x20000560

08003d60 <_fwalk_sglue>:
 8003d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d64:	4607      	mov	r7, r0
 8003d66:	4688      	mov	r8, r1
 8003d68:	4614      	mov	r4, r2
 8003d6a:	2600      	movs	r6, #0
 8003d6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d70:	f1b9 0901 	subs.w	r9, r9, #1
 8003d74:	d505      	bpl.n	8003d82 <_fwalk_sglue+0x22>
 8003d76:	6824      	ldr	r4, [r4, #0]
 8003d78:	2c00      	cmp	r4, #0
 8003d7a:	d1f7      	bne.n	8003d6c <_fwalk_sglue+0xc>
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d82:	89ab      	ldrh	r3, [r5, #12]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d907      	bls.n	8003d98 <_fwalk_sglue+0x38>
 8003d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	d003      	beq.n	8003d98 <_fwalk_sglue+0x38>
 8003d90:	4629      	mov	r1, r5
 8003d92:	4638      	mov	r0, r7
 8003d94:	47c0      	blx	r8
 8003d96:	4306      	orrs	r6, r0
 8003d98:	3568      	adds	r5, #104	@ 0x68
 8003d9a:	e7e9      	b.n	8003d70 <_fwalk_sglue+0x10>

08003d9c <sniprintf>:
 8003d9c:	b40c      	push	{r2, r3}
 8003d9e:	b530      	push	{r4, r5, lr}
 8003da0:	4b18      	ldr	r3, [pc, #96]	@ (8003e04 <sniprintf+0x68>)
 8003da2:	1e0c      	subs	r4, r1, #0
 8003da4:	681d      	ldr	r5, [r3, #0]
 8003da6:	b09d      	sub	sp, #116	@ 0x74
 8003da8:	da08      	bge.n	8003dbc <sniprintf+0x20>
 8003daa:	238b      	movs	r3, #139	@ 0x8b
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	602b      	str	r3, [r5, #0]
 8003db2:	b01d      	add	sp, #116	@ 0x74
 8003db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003db8:	b002      	add	sp, #8
 8003dba:	4770      	bx	lr
 8003dbc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003dc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003dca:	bf0c      	ite	eq
 8003dcc:	4623      	moveq	r3, r4
 8003dce:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003dd2:	9304      	str	r3, [sp, #16]
 8003dd4:	9307      	str	r3, [sp, #28]
 8003dd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dda:	9002      	str	r0, [sp, #8]
 8003ddc:	9006      	str	r0, [sp, #24]
 8003dde:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003de2:	4628      	mov	r0, r5
 8003de4:	ab21      	add	r3, sp, #132	@ 0x84
 8003de6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003de8:	a902      	add	r1, sp, #8
 8003dea:	9301      	str	r3, [sp, #4]
 8003dec:	f001 fc10 	bl	8005610 <_svfiprintf_r>
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	bfbc      	itt	lt
 8003df4:	238b      	movlt	r3, #139	@ 0x8b
 8003df6:	602b      	strlt	r3, [r5, #0]
 8003df8:	2c00      	cmp	r4, #0
 8003dfa:	d0da      	beq.n	8003db2 <sniprintf+0x16>
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	9b02      	ldr	r3, [sp, #8]
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e7d6      	b.n	8003db2 <sniprintf+0x16>
 8003e04:	2000001c 	.word	0x2000001c

08003e08 <__sread>:
 8003e08:	b510      	push	{r4, lr}
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e10:	f000 f86c 	bl	8003eec <_read_r>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	bfab      	itete	ge
 8003e18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e1c:	181b      	addge	r3, r3, r0
 8003e1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e22:	bfac      	ite	ge
 8003e24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e26:	81a3      	strhlt	r3, [r4, #12]
 8003e28:	bd10      	pop	{r4, pc}

08003e2a <__swrite>:
 8003e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e2e:	461f      	mov	r7, r3
 8003e30:	898b      	ldrh	r3, [r1, #12]
 8003e32:	4605      	mov	r5, r0
 8003e34:	05db      	lsls	r3, r3, #23
 8003e36:	460c      	mov	r4, r1
 8003e38:	4616      	mov	r6, r2
 8003e3a:	d505      	bpl.n	8003e48 <__swrite+0x1e>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e44:	f000 f840 	bl	8003ec8 <_lseek_r>
 8003e48:	89a3      	ldrh	r3, [r4, #12]
 8003e4a:	4632      	mov	r2, r6
 8003e4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e50:	81a3      	strh	r3, [r4, #12]
 8003e52:	4628      	mov	r0, r5
 8003e54:	463b      	mov	r3, r7
 8003e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5e:	f000 b857 	b.w	8003f10 <_write_r>

08003e62 <__sseek>:
 8003e62:	b510      	push	{r4, lr}
 8003e64:	460c      	mov	r4, r1
 8003e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6a:	f000 f82d 	bl	8003ec8 <_lseek_r>
 8003e6e:	1c43      	adds	r3, r0, #1
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	bf15      	itete	ne
 8003e74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e7e:	81a3      	strheq	r3, [r4, #12]
 8003e80:	bf18      	it	ne
 8003e82:	81a3      	strhne	r3, [r4, #12]
 8003e84:	bd10      	pop	{r4, pc}

08003e86 <__sclose>:
 8003e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e8a:	f000 b80d 	b.w	8003ea8 <_close_r>

08003e8e <memset>:
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4402      	add	r2, r0
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d100      	bne.n	8003e98 <memset+0xa>
 8003e96:	4770      	bx	lr
 8003e98:	f803 1b01 	strb.w	r1, [r3], #1
 8003e9c:	e7f9      	b.n	8003e92 <memset+0x4>
	...

08003ea0 <_localeconv_r>:
 8003ea0:	4800      	ldr	r0, [pc, #0]	@ (8003ea4 <_localeconv_r+0x4>)
 8003ea2:	4770      	bx	lr
 8003ea4:	2000015c 	.word	0x2000015c

08003ea8 <_close_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	2300      	movs	r3, #0
 8003eac:	4d05      	ldr	r5, [pc, #20]	@ (8003ec4 <_close_r+0x1c>)
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	602b      	str	r3, [r5, #0]
 8003eb4:	f7fd fe63 	bl	8001b7e <_close>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_close_r+0x1a>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_close_r+0x1a>
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	20000564 	.word	0x20000564

08003ec8 <_lseek_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4604      	mov	r4, r0
 8003ecc:	4608      	mov	r0, r1
 8003ece:	4611      	mov	r1, r2
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	4d05      	ldr	r5, [pc, #20]	@ (8003ee8 <_lseek_r+0x20>)
 8003ed4:	602a      	str	r2, [r5, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f7fd fe75 	bl	8001bc6 <_lseek>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_lseek_r+0x1e>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_lseek_r+0x1e>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	20000564 	.word	0x20000564

08003eec <_read_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	4604      	mov	r4, r0
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	4d05      	ldr	r5, [pc, #20]	@ (8003f0c <_read_r+0x20>)
 8003ef8:	602a      	str	r2, [r5, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f7fd fe06 	bl	8001b0c <_read>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d102      	bne.n	8003f0a <_read_r+0x1e>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	b103      	cbz	r3, 8003f0a <_read_r+0x1e>
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	20000564 	.word	0x20000564

08003f10 <_write_r>:
 8003f10:	b538      	push	{r3, r4, r5, lr}
 8003f12:	4604      	mov	r4, r0
 8003f14:	4608      	mov	r0, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4d05      	ldr	r5, [pc, #20]	@ (8003f30 <_write_r+0x20>)
 8003f1c:	602a      	str	r2, [r5, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f7fd fe11 	bl	8001b46 <_write>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_write_r+0x1e>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_write_r+0x1e>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	20000564 	.word	0x20000564

08003f34 <__errno>:
 8003f34:	4b01      	ldr	r3, [pc, #4]	@ (8003f3c <__errno+0x8>)
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	2000001c 	.word	0x2000001c

08003f40 <__libc_init_array>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	2600      	movs	r6, #0
 8003f44:	4d0c      	ldr	r5, [pc, #48]	@ (8003f78 <__libc_init_array+0x38>)
 8003f46:	4c0d      	ldr	r4, [pc, #52]	@ (8003f7c <__libc_init_array+0x3c>)
 8003f48:	1b64      	subs	r4, r4, r5
 8003f4a:	10a4      	asrs	r4, r4, #2
 8003f4c:	42a6      	cmp	r6, r4
 8003f4e:	d109      	bne.n	8003f64 <__libc_init_array+0x24>
 8003f50:	f002 f876 	bl	8006040 <_init>
 8003f54:	2600      	movs	r6, #0
 8003f56:	4d0a      	ldr	r5, [pc, #40]	@ (8003f80 <__libc_init_array+0x40>)
 8003f58:	4c0a      	ldr	r4, [pc, #40]	@ (8003f84 <__libc_init_array+0x44>)
 8003f5a:	1b64      	subs	r4, r4, r5
 8003f5c:	10a4      	asrs	r4, r4, #2
 8003f5e:	42a6      	cmp	r6, r4
 8003f60:	d105      	bne.n	8003f6e <__libc_init_array+0x2e>
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f68:	4798      	blx	r3
 8003f6a:	3601      	adds	r6, #1
 8003f6c:	e7ee      	b.n	8003f4c <__libc_init_array+0xc>
 8003f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f72:	4798      	blx	r3
 8003f74:	3601      	adds	r6, #1
 8003f76:	e7f2      	b.n	8003f5e <__libc_init_array+0x1e>
 8003f78:	080064cc 	.word	0x080064cc
 8003f7c:	080064cc 	.word	0x080064cc
 8003f80:	080064cc 	.word	0x080064cc
 8003f84:	080064d0 	.word	0x080064d0

08003f88 <__retarget_lock_init_recursive>:
 8003f88:	4770      	bx	lr

08003f8a <__retarget_lock_acquire_recursive>:
 8003f8a:	4770      	bx	lr

08003f8c <__retarget_lock_release_recursive>:
 8003f8c:	4770      	bx	lr

08003f8e <memchr>:
 8003f8e:	4603      	mov	r3, r0
 8003f90:	b510      	push	{r4, lr}
 8003f92:	b2c9      	uxtb	r1, r1
 8003f94:	4402      	add	r2, r0
 8003f96:	4293      	cmp	r3, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	d101      	bne.n	8003fa0 <memchr+0x12>
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	e003      	b.n	8003fa8 <memchr+0x1a>
 8003fa0:	7804      	ldrb	r4, [r0, #0]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	428c      	cmp	r4, r1
 8003fa6:	d1f6      	bne.n	8003f96 <memchr+0x8>
 8003fa8:	bd10      	pop	{r4, pc}

08003faa <quorem>:
 8003faa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fae:	6903      	ldr	r3, [r0, #16]
 8003fb0:	690c      	ldr	r4, [r1, #16]
 8003fb2:	4607      	mov	r7, r0
 8003fb4:	42a3      	cmp	r3, r4
 8003fb6:	db7e      	blt.n	80040b6 <quorem+0x10c>
 8003fb8:	3c01      	subs	r4, #1
 8003fba:	00a3      	lsls	r3, r4, #2
 8003fbc:	f100 0514 	add.w	r5, r0, #20
 8003fc0:	f101 0814 	add.w	r8, r1, #20
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003fd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003fe0:	d32e      	bcc.n	8004040 <quorem+0x96>
 8003fe2:	f04f 0a00 	mov.w	sl, #0
 8003fe6:	46c4      	mov	ip, r8
 8003fe8:	46ae      	mov	lr, r5
 8003fea:	46d3      	mov	fp, sl
 8003fec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003ff0:	b298      	uxth	r0, r3
 8003ff2:	fb06 a000 	mla	r0, r6, r0, sl
 8003ff6:	0c1b      	lsrs	r3, r3, #16
 8003ff8:	0c02      	lsrs	r2, r0, #16
 8003ffa:	fb06 2303 	mla	r3, r6, r3, r2
 8003ffe:	f8de 2000 	ldr.w	r2, [lr]
 8004002:	b280      	uxth	r0, r0
 8004004:	b292      	uxth	r2, r2
 8004006:	1a12      	subs	r2, r2, r0
 8004008:	445a      	add	r2, fp
 800400a:	f8de 0000 	ldr.w	r0, [lr]
 800400e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004012:	b29b      	uxth	r3, r3
 8004014:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004018:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800401c:	b292      	uxth	r2, r2
 800401e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004022:	45e1      	cmp	r9, ip
 8004024:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004028:	f84e 2b04 	str.w	r2, [lr], #4
 800402c:	d2de      	bcs.n	8003fec <quorem+0x42>
 800402e:	9b00      	ldr	r3, [sp, #0]
 8004030:	58eb      	ldr	r3, [r5, r3]
 8004032:	b92b      	cbnz	r3, 8004040 <quorem+0x96>
 8004034:	9b01      	ldr	r3, [sp, #4]
 8004036:	3b04      	subs	r3, #4
 8004038:	429d      	cmp	r5, r3
 800403a:	461a      	mov	r2, r3
 800403c:	d32f      	bcc.n	800409e <quorem+0xf4>
 800403e:	613c      	str	r4, [r7, #16]
 8004040:	4638      	mov	r0, r7
 8004042:	f001 f981 	bl	8005348 <__mcmp>
 8004046:	2800      	cmp	r0, #0
 8004048:	db25      	blt.n	8004096 <quorem+0xec>
 800404a:	4629      	mov	r1, r5
 800404c:	2000      	movs	r0, #0
 800404e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004052:	f8d1 c000 	ldr.w	ip, [r1]
 8004056:	fa1f fe82 	uxth.w	lr, r2
 800405a:	fa1f f38c 	uxth.w	r3, ip
 800405e:	eba3 030e 	sub.w	r3, r3, lr
 8004062:	4403      	add	r3, r0
 8004064:	0c12      	lsrs	r2, r2, #16
 8004066:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800406a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800406e:	b29b      	uxth	r3, r3
 8004070:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004074:	45c1      	cmp	r9, r8
 8004076:	ea4f 4022 	mov.w	r0, r2, asr #16
 800407a:	f841 3b04 	str.w	r3, [r1], #4
 800407e:	d2e6      	bcs.n	800404e <quorem+0xa4>
 8004080:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004084:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004088:	b922      	cbnz	r2, 8004094 <quorem+0xea>
 800408a:	3b04      	subs	r3, #4
 800408c:	429d      	cmp	r5, r3
 800408e:	461a      	mov	r2, r3
 8004090:	d30b      	bcc.n	80040aa <quorem+0x100>
 8004092:	613c      	str	r4, [r7, #16]
 8004094:	3601      	adds	r6, #1
 8004096:	4630      	mov	r0, r6
 8004098:	b003      	add	sp, #12
 800409a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	3b04      	subs	r3, #4
 80040a2:	2a00      	cmp	r2, #0
 80040a4:	d1cb      	bne.n	800403e <quorem+0x94>
 80040a6:	3c01      	subs	r4, #1
 80040a8:	e7c6      	b.n	8004038 <quorem+0x8e>
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	3b04      	subs	r3, #4
 80040ae:	2a00      	cmp	r2, #0
 80040b0:	d1ef      	bne.n	8004092 <quorem+0xe8>
 80040b2:	3c01      	subs	r4, #1
 80040b4:	e7ea      	b.n	800408c <quorem+0xe2>
 80040b6:	2000      	movs	r0, #0
 80040b8:	e7ee      	b.n	8004098 <quorem+0xee>
 80040ba:	0000      	movs	r0, r0
 80040bc:	0000      	movs	r0, r0
	...

080040c0 <_dtoa_r>:
 80040c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c4:	4614      	mov	r4, r2
 80040c6:	461d      	mov	r5, r3
 80040c8:	69c7      	ldr	r7, [r0, #28]
 80040ca:	b097      	sub	sp, #92	@ 0x5c
 80040cc:	4681      	mov	r9, r0
 80040ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80040d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80040d4:	b97f      	cbnz	r7, 80040f6 <_dtoa_r+0x36>
 80040d6:	2010      	movs	r0, #16
 80040d8:	f000 fe0e 	bl	8004cf8 <malloc>
 80040dc:	4602      	mov	r2, r0
 80040de:	f8c9 001c 	str.w	r0, [r9, #28]
 80040e2:	b920      	cbnz	r0, 80040ee <_dtoa_r+0x2e>
 80040e4:	21ef      	movs	r1, #239	@ 0xef
 80040e6:	4bac      	ldr	r3, [pc, #688]	@ (8004398 <_dtoa_r+0x2d8>)
 80040e8:	48ac      	ldr	r0, [pc, #688]	@ (800439c <_dtoa_r+0x2dc>)
 80040ea:	f001 fc6d 	bl	80059c8 <__assert_func>
 80040ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80040f2:	6007      	str	r7, [r0, #0]
 80040f4:	60c7      	str	r7, [r0, #12]
 80040f6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80040fa:	6819      	ldr	r1, [r3, #0]
 80040fc:	b159      	cbz	r1, 8004116 <_dtoa_r+0x56>
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	2301      	movs	r3, #1
 8004102:	4093      	lsls	r3, r2
 8004104:	604a      	str	r2, [r1, #4]
 8004106:	608b      	str	r3, [r1, #8]
 8004108:	4648      	mov	r0, r9
 800410a:	f000 feeb 	bl	8004ee4 <_Bfree>
 800410e:	2200      	movs	r2, #0
 8004110:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	1e2b      	subs	r3, r5, #0
 8004118:	bfaf      	iteee	ge
 800411a:	2300      	movge	r3, #0
 800411c:	2201      	movlt	r2, #1
 800411e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004122:	9307      	strlt	r3, [sp, #28]
 8004124:	bfa8      	it	ge
 8004126:	6033      	strge	r3, [r6, #0]
 8004128:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800412c:	4b9c      	ldr	r3, [pc, #624]	@ (80043a0 <_dtoa_r+0x2e0>)
 800412e:	bfb8      	it	lt
 8004130:	6032      	strlt	r2, [r6, #0]
 8004132:	ea33 0308 	bics.w	r3, r3, r8
 8004136:	d112      	bne.n	800415e <_dtoa_r+0x9e>
 8004138:	f242 730f 	movw	r3, #9999	@ 0x270f
 800413c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004144:	4323      	orrs	r3, r4
 8004146:	f000 855e 	beq.w	8004c06 <_dtoa_r+0xb46>
 800414a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800414c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80043a4 <_dtoa_r+0x2e4>
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8560 	beq.w	8004c16 <_dtoa_r+0xb56>
 8004156:	f10a 0303 	add.w	r3, sl, #3
 800415a:	f000 bd5a 	b.w	8004c12 <_dtoa_r+0xb52>
 800415e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004162:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800416a:	2200      	movs	r2, #0
 800416c:	2300      	movs	r3, #0
 800416e:	f7fc fc1b 	bl	80009a8 <__aeabi_dcmpeq>
 8004172:	4607      	mov	r7, r0
 8004174:	b158      	cbz	r0, 800418e <_dtoa_r+0xce>
 8004176:	2301      	movs	r3, #1
 8004178:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800417e:	b113      	cbz	r3, 8004186 <_dtoa_r+0xc6>
 8004180:	4b89      	ldr	r3, [pc, #548]	@ (80043a8 <_dtoa_r+0x2e8>)
 8004182:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80043ac <_dtoa_r+0x2ec>
 800418a:	f000 bd44 	b.w	8004c16 <_dtoa_r+0xb56>
 800418e:	ab14      	add	r3, sp, #80	@ 0x50
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	ab15      	add	r3, sp, #84	@ 0x54
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	4648      	mov	r0, r9
 8004198:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800419c:	f001 f984 	bl	80054a8 <__d2b>
 80041a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80041a4:	9003      	str	r0, [sp, #12]
 80041a6:	2e00      	cmp	r6, #0
 80041a8:	d078      	beq.n	800429c <_dtoa_r+0x1dc>
 80041aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80041ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80041b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80041bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80041c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80041c2:	4619      	mov	r1, r3
 80041c4:	2200      	movs	r2, #0
 80041c6:	4b7a      	ldr	r3, [pc, #488]	@ (80043b0 <_dtoa_r+0x2f0>)
 80041c8:	f7fb ffce 	bl	8000168 <__aeabi_dsub>
 80041cc:	a36c      	add	r3, pc, #432	@ (adr r3, 8004380 <_dtoa_r+0x2c0>)
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f7fc f981 	bl	80004d8 <__aeabi_dmul>
 80041d6:	a36c      	add	r3, pc, #432	@ (adr r3, 8004388 <_dtoa_r+0x2c8>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fb ffc6 	bl	800016c <__adddf3>
 80041e0:	4604      	mov	r4, r0
 80041e2:	4630      	mov	r0, r6
 80041e4:	460d      	mov	r5, r1
 80041e6:	f7fc f90d 	bl	8000404 <__aeabi_i2d>
 80041ea:	a369      	add	r3, pc, #420	@ (adr r3, 8004390 <_dtoa_r+0x2d0>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f7fc f972 	bl	80004d8 <__aeabi_dmul>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4620      	mov	r0, r4
 80041fa:	4629      	mov	r1, r5
 80041fc:	f7fb ffb6 	bl	800016c <__adddf3>
 8004200:	4604      	mov	r4, r0
 8004202:	460d      	mov	r5, r1
 8004204:	f7fc fc18 	bl	8000a38 <__aeabi_d2iz>
 8004208:	2200      	movs	r2, #0
 800420a:	4607      	mov	r7, r0
 800420c:	2300      	movs	r3, #0
 800420e:	4620      	mov	r0, r4
 8004210:	4629      	mov	r1, r5
 8004212:	f7fc fbd3 	bl	80009bc <__aeabi_dcmplt>
 8004216:	b140      	cbz	r0, 800422a <_dtoa_r+0x16a>
 8004218:	4638      	mov	r0, r7
 800421a:	f7fc f8f3 	bl	8000404 <__aeabi_i2d>
 800421e:	4622      	mov	r2, r4
 8004220:	462b      	mov	r3, r5
 8004222:	f7fc fbc1 	bl	80009a8 <__aeabi_dcmpeq>
 8004226:	b900      	cbnz	r0, 800422a <_dtoa_r+0x16a>
 8004228:	3f01      	subs	r7, #1
 800422a:	2f16      	cmp	r7, #22
 800422c:	d854      	bhi.n	80042d8 <_dtoa_r+0x218>
 800422e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004232:	4b60      	ldr	r3, [pc, #384]	@ (80043b4 <_dtoa_r+0x2f4>)
 8004234:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f7fc fbbe 	bl	80009bc <__aeabi_dcmplt>
 8004240:	2800      	cmp	r0, #0
 8004242:	d04b      	beq.n	80042dc <_dtoa_r+0x21c>
 8004244:	2300      	movs	r3, #0
 8004246:	3f01      	subs	r7, #1
 8004248:	930f      	str	r3, [sp, #60]	@ 0x3c
 800424a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800424c:	1b9b      	subs	r3, r3, r6
 800424e:	1e5a      	subs	r2, r3, #1
 8004250:	bf49      	itett	mi
 8004252:	f1c3 0301 	rsbmi	r3, r3, #1
 8004256:	2300      	movpl	r3, #0
 8004258:	9304      	strmi	r3, [sp, #16]
 800425a:	2300      	movmi	r3, #0
 800425c:	9209      	str	r2, [sp, #36]	@ 0x24
 800425e:	bf54      	ite	pl
 8004260:	9304      	strpl	r3, [sp, #16]
 8004262:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004264:	2f00      	cmp	r7, #0
 8004266:	db3b      	blt.n	80042e0 <_dtoa_r+0x220>
 8004268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800426a:	970e      	str	r7, [sp, #56]	@ 0x38
 800426c:	443b      	add	r3, r7
 800426e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004270:	2300      	movs	r3, #0
 8004272:	930a      	str	r3, [sp, #40]	@ 0x28
 8004274:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004276:	2b09      	cmp	r3, #9
 8004278:	d865      	bhi.n	8004346 <_dtoa_r+0x286>
 800427a:	2b05      	cmp	r3, #5
 800427c:	bfc4      	itt	gt
 800427e:	3b04      	subgt	r3, #4
 8004280:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004282:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004284:	bfc8      	it	gt
 8004286:	2400      	movgt	r4, #0
 8004288:	f1a3 0302 	sub.w	r3, r3, #2
 800428c:	bfd8      	it	le
 800428e:	2401      	movle	r4, #1
 8004290:	2b03      	cmp	r3, #3
 8004292:	d864      	bhi.n	800435e <_dtoa_r+0x29e>
 8004294:	e8df f003 	tbb	[pc, r3]
 8004298:	2c385553 	.word	0x2c385553
 800429c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80042a0:	441e      	add	r6, r3
 80042a2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	bfc1      	itttt	gt
 80042aa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80042ae:	fa08 f803 	lslgt.w	r8, r8, r3
 80042b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80042b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80042ba:	bfd6      	itet	le
 80042bc:	f1c3 0320 	rsble	r3, r3, #32
 80042c0:	ea48 0003 	orrgt.w	r0, r8, r3
 80042c4:	fa04 f003 	lslle.w	r0, r4, r3
 80042c8:	f7fc f88c 	bl	80003e4 <__aeabi_ui2d>
 80042cc:	2201      	movs	r2, #1
 80042ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80042d2:	3e01      	subs	r6, #1
 80042d4:	9212      	str	r2, [sp, #72]	@ 0x48
 80042d6:	e774      	b.n	80041c2 <_dtoa_r+0x102>
 80042d8:	2301      	movs	r3, #1
 80042da:	e7b5      	b.n	8004248 <_dtoa_r+0x188>
 80042dc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80042de:	e7b4      	b.n	800424a <_dtoa_r+0x18a>
 80042e0:	9b04      	ldr	r3, [sp, #16]
 80042e2:	1bdb      	subs	r3, r3, r7
 80042e4:	9304      	str	r3, [sp, #16]
 80042e6:	427b      	negs	r3, r7
 80042e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80042ea:	2300      	movs	r3, #0
 80042ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80042ee:	e7c1      	b.n	8004274 <_dtoa_r+0x1b4>
 80042f0:	2301      	movs	r3, #1
 80042f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80042f6:	eb07 0b03 	add.w	fp, r7, r3
 80042fa:	f10b 0301 	add.w	r3, fp, #1
 80042fe:	2b01      	cmp	r3, #1
 8004300:	9308      	str	r3, [sp, #32]
 8004302:	bfb8      	it	lt
 8004304:	2301      	movlt	r3, #1
 8004306:	e006      	b.n	8004316 <_dtoa_r+0x256>
 8004308:	2301      	movs	r3, #1
 800430a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800430c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800430e:	2b00      	cmp	r3, #0
 8004310:	dd28      	ble.n	8004364 <_dtoa_r+0x2a4>
 8004312:	469b      	mov	fp, r3
 8004314:	9308      	str	r3, [sp, #32]
 8004316:	2100      	movs	r1, #0
 8004318:	2204      	movs	r2, #4
 800431a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800431e:	f102 0514 	add.w	r5, r2, #20
 8004322:	429d      	cmp	r5, r3
 8004324:	d926      	bls.n	8004374 <_dtoa_r+0x2b4>
 8004326:	6041      	str	r1, [r0, #4]
 8004328:	4648      	mov	r0, r9
 800432a:	f000 fd9b 	bl	8004e64 <_Balloc>
 800432e:	4682      	mov	sl, r0
 8004330:	2800      	cmp	r0, #0
 8004332:	d143      	bne.n	80043bc <_dtoa_r+0x2fc>
 8004334:	4602      	mov	r2, r0
 8004336:	f240 11af 	movw	r1, #431	@ 0x1af
 800433a:	4b1f      	ldr	r3, [pc, #124]	@ (80043b8 <_dtoa_r+0x2f8>)
 800433c:	e6d4      	b.n	80040e8 <_dtoa_r+0x28>
 800433e:	2300      	movs	r3, #0
 8004340:	e7e3      	b.n	800430a <_dtoa_r+0x24a>
 8004342:	2300      	movs	r3, #0
 8004344:	e7d5      	b.n	80042f2 <_dtoa_r+0x232>
 8004346:	2401      	movs	r4, #1
 8004348:	2300      	movs	r3, #0
 800434a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800434c:	9320      	str	r3, [sp, #128]	@ 0x80
 800434e:	f04f 3bff 	mov.w	fp, #4294967295
 8004352:	2200      	movs	r2, #0
 8004354:	2312      	movs	r3, #18
 8004356:	f8cd b020 	str.w	fp, [sp, #32]
 800435a:	9221      	str	r2, [sp, #132]	@ 0x84
 800435c:	e7db      	b.n	8004316 <_dtoa_r+0x256>
 800435e:	2301      	movs	r3, #1
 8004360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004362:	e7f4      	b.n	800434e <_dtoa_r+0x28e>
 8004364:	f04f 0b01 	mov.w	fp, #1
 8004368:	465b      	mov	r3, fp
 800436a:	f8cd b020 	str.w	fp, [sp, #32]
 800436e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004372:	e7d0      	b.n	8004316 <_dtoa_r+0x256>
 8004374:	3101      	adds	r1, #1
 8004376:	0052      	lsls	r2, r2, #1
 8004378:	e7d1      	b.n	800431e <_dtoa_r+0x25e>
 800437a:	bf00      	nop
 800437c:	f3af 8000 	nop.w
 8004380:	636f4361 	.word	0x636f4361
 8004384:	3fd287a7 	.word	0x3fd287a7
 8004388:	8b60c8b3 	.word	0x8b60c8b3
 800438c:	3fc68a28 	.word	0x3fc68a28
 8004390:	509f79fb 	.word	0x509f79fb
 8004394:	3fd34413 	.word	0x3fd34413
 8004398:	0800618f 	.word	0x0800618f
 800439c:	080061a6 	.word	0x080061a6
 80043a0:	7ff00000 	.word	0x7ff00000
 80043a4:	0800618b 	.word	0x0800618b
 80043a8:	0800615f 	.word	0x0800615f
 80043ac:	0800615e 	.word	0x0800615e
 80043b0:	3ff80000 	.word	0x3ff80000
 80043b4:	080062f8 	.word	0x080062f8
 80043b8:	080061fe 	.word	0x080061fe
 80043bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80043c0:	6018      	str	r0, [r3, #0]
 80043c2:	9b08      	ldr	r3, [sp, #32]
 80043c4:	2b0e      	cmp	r3, #14
 80043c6:	f200 80a1 	bhi.w	800450c <_dtoa_r+0x44c>
 80043ca:	2c00      	cmp	r4, #0
 80043cc:	f000 809e 	beq.w	800450c <_dtoa_r+0x44c>
 80043d0:	2f00      	cmp	r7, #0
 80043d2:	dd33      	ble.n	800443c <_dtoa_r+0x37c>
 80043d4:	4b9c      	ldr	r3, [pc, #624]	@ (8004648 <_dtoa_r+0x588>)
 80043d6:	f007 020f 	and.w	r2, r7, #15
 80043da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043de:	05f8      	lsls	r0, r7, #23
 80043e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80043e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80043ec:	d516      	bpl.n	800441c <_dtoa_r+0x35c>
 80043ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043f2:	4b96      	ldr	r3, [pc, #600]	@ (800464c <_dtoa_r+0x58c>)
 80043f4:	2603      	movs	r6, #3
 80043f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043fa:	f7fc f997 	bl	800072c <__aeabi_ddiv>
 80043fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004402:	f004 040f 	and.w	r4, r4, #15
 8004406:	4d91      	ldr	r5, [pc, #580]	@ (800464c <_dtoa_r+0x58c>)
 8004408:	b954      	cbnz	r4, 8004420 <_dtoa_r+0x360>
 800440a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800440e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004412:	f7fc f98b 	bl	800072c <__aeabi_ddiv>
 8004416:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800441a:	e028      	b.n	800446e <_dtoa_r+0x3ae>
 800441c:	2602      	movs	r6, #2
 800441e:	e7f2      	b.n	8004406 <_dtoa_r+0x346>
 8004420:	07e1      	lsls	r1, r4, #31
 8004422:	d508      	bpl.n	8004436 <_dtoa_r+0x376>
 8004424:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004428:	e9d5 2300 	ldrd	r2, r3, [r5]
 800442c:	f7fc f854 	bl	80004d8 <__aeabi_dmul>
 8004430:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004434:	3601      	adds	r6, #1
 8004436:	1064      	asrs	r4, r4, #1
 8004438:	3508      	adds	r5, #8
 800443a:	e7e5      	b.n	8004408 <_dtoa_r+0x348>
 800443c:	f000 80af 	beq.w	800459e <_dtoa_r+0x4de>
 8004440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004444:	427c      	negs	r4, r7
 8004446:	4b80      	ldr	r3, [pc, #512]	@ (8004648 <_dtoa_r+0x588>)
 8004448:	f004 020f 	and.w	r2, r4, #15
 800444c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f7fc f840 	bl	80004d8 <__aeabi_dmul>
 8004458:	2602      	movs	r6, #2
 800445a:	2300      	movs	r3, #0
 800445c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004460:	4d7a      	ldr	r5, [pc, #488]	@ (800464c <_dtoa_r+0x58c>)
 8004462:	1124      	asrs	r4, r4, #4
 8004464:	2c00      	cmp	r4, #0
 8004466:	f040 808f 	bne.w	8004588 <_dtoa_r+0x4c8>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1d3      	bne.n	8004416 <_dtoa_r+0x356>
 800446e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004472:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8094 	beq.w	80045a2 <_dtoa_r+0x4e2>
 800447a:	2200      	movs	r2, #0
 800447c:	4620      	mov	r0, r4
 800447e:	4629      	mov	r1, r5
 8004480:	4b73      	ldr	r3, [pc, #460]	@ (8004650 <_dtoa_r+0x590>)
 8004482:	f7fc fa9b 	bl	80009bc <__aeabi_dcmplt>
 8004486:	2800      	cmp	r0, #0
 8004488:	f000 808b 	beq.w	80045a2 <_dtoa_r+0x4e2>
 800448c:	9b08      	ldr	r3, [sp, #32]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8087 	beq.w	80045a2 <_dtoa_r+0x4e2>
 8004494:	f1bb 0f00 	cmp.w	fp, #0
 8004498:	dd34      	ble.n	8004504 <_dtoa_r+0x444>
 800449a:	4620      	mov	r0, r4
 800449c:	2200      	movs	r2, #0
 800449e:	4629      	mov	r1, r5
 80044a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004654 <_dtoa_r+0x594>)
 80044a2:	f7fc f819 	bl	80004d8 <__aeabi_dmul>
 80044a6:	465c      	mov	r4, fp
 80044a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80044ac:	f107 38ff 	add.w	r8, r7, #4294967295
 80044b0:	3601      	adds	r6, #1
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7fb ffa6 	bl	8000404 <__aeabi_i2d>
 80044b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044bc:	f7fc f80c 	bl	80004d8 <__aeabi_dmul>
 80044c0:	2200      	movs	r2, #0
 80044c2:	4b65      	ldr	r3, [pc, #404]	@ (8004658 <_dtoa_r+0x598>)
 80044c4:	f7fb fe52 	bl	800016c <__adddf3>
 80044c8:	4605      	mov	r5, r0
 80044ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80044ce:	2c00      	cmp	r4, #0
 80044d0:	d16a      	bne.n	80045a8 <_dtoa_r+0x4e8>
 80044d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044d6:	2200      	movs	r2, #0
 80044d8:	4b60      	ldr	r3, [pc, #384]	@ (800465c <_dtoa_r+0x59c>)
 80044da:	f7fb fe45 	bl	8000168 <__aeabi_dsub>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80044e6:	462a      	mov	r2, r5
 80044e8:	4633      	mov	r3, r6
 80044ea:	f7fc fa85 	bl	80009f8 <__aeabi_dcmpgt>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	f040 8298 	bne.w	8004a24 <_dtoa_r+0x964>
 80044f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044f8:	462a      	mov	r2, r5
 80044fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80044fe:	f7fc fa5d 	bl	80009bc <__aeabi_dcmplt>
 8004502:	bb38      	cbnz	r0, 8004554 <_dtoa_r+0x494>
 8004504:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004508:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800450c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800450e:	2b00      	cmp	r3, #0
 8004510:	f2c0 8157 	blt.w	80047c2 <_dtoa_r+0x702>
 8004514:	2f0e      	cmp	r7, #14
 8004516:	f300 8154 	bgt.w	80047c2 <_dtoa_r+0x702>
 800451a:	4b4b      	ldr	r3, [pc, #300]	@ (8004648 <_dtoa_r+0x588>)
 800451c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004520:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004524:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004528:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800452a:	2b00      	cmp	r3, #0
 800452c:	f280 80e5 	bge.w	80046fa <_dtoa_r+0x63a>
 8004530:	9b08      	ldr	r3, [sp, #32]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f300 80e1 	bgt.w	80046fa <_dtoa_r+0x63a>
 8004538:	d10c      	bne.n	8004554 <_dtoa_r+0x494>
 800453a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800453e:	2200      	movs	r2, #0
 8004540:	4b46      	ldr	r3, [pc, #280]	@ (800465c <_dtoa_r+0x59c>)
 8004542:	f7fb ffc9 	bl	80004d8 <__aeabi_dmul>
 8004546:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800454a:	f7fc fa4b 	bl	80009e4 <__aeabi_dcmpge>
 800454e:	2800      	cmp	r0, #0
 8004550:	f000 8266 	beq.w	8004a20 <_dtoa_r+0x960>
 8004554:	2400      	movs	r4, #0
 8004556:	4625      	mov	r5, r4
 8004558:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800455a:	4656      	mov	r6, sl
 800455c:	ea6f 0803 	mvn.w	r8, r3
 8004560:	2700      	movs	r7, #0
 8004562:	4621      	mov	r1, r4
 8004564:	4648      	mov	r0, r9
 8004566:	f000 fcbd 	bl	8004ee4 <_Bfree>
 800456a:	2d00      	cmp	r5, #0
 800456c:	f000 80bd 	beq.w	80046ea <_dtoa_r+0x62a>
 8004570:	b12f      	cbz	r7, 800457e <_dtoa_r+0x4be>
 8004572:	42af      	cmp	r7, r5
 8004574:	d003      	beq.n	800457e <_dtoa_r+0x4be>
 8004576:	4639      	mov	r1, r7
 8004578:	4648      	mov	r0, r9
 800457a:	f000 fcb3 	bl	8004ee4 <_Bfree>
 800457e:	4629      	mov	r1, r5
 8004580:	4648      	mov	r0, r9
 8004582:	f000 fcaf 	bl	8004ee4 <_Bfree>
 8004586:	e0b0      	b.n	80046ea <_dtoa_r+0x62a>
 8004588:	07e2      	lsls	r2, r4, #31
 800458a:	d505      	bpl.n	8004598 <_dtoa_r+0x4d8>
 800458c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004590:	f7fb ffa2 	bl	80004d8 <__aeabi_dmul>
 8004594:	2301      	movs	r3, #1
 8004596:	3601      	adds	r6, #1
 8004598:	1064      	asrs	r4, r4, #1
 800459a:	3508      	adds	r5, #8
 800459c:	e762      	b.n	8004464 <_dtoa_r+0x3a4>
 800459e:	2602      	movs	r6, #2
 80045a0:	e765      	b.n	800446e <_dtoa_r+0x3ae>
 80045a2:	46b8      	mov	r8, r7
 80045a4:	9c08      	ldr	r4, [sp, #32]
 80045a6:	e784      	b.n	80044b2 <_dtoa_r+0x3f2>
 80045a8:	4b27      	ldr	r3, [pc, #156]	@ (8004648 <_dtoa_r+0x588>)
 80045aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80045ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80045b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80045b4:	4454      	add	r4, sl
 80045b6:	2900      	cmp	r1, #0
 80045b8:	d054      	beq.n	8004664 <_dtoa_r+0x5a4>
 80045ba:	2000      	movs	r0, #0
 80045bc:	4928      	ldr	r1, [pc, #160]	@ (8004660 <_dtoa_r+0x5a0>)
 80045be:	f7fc f8b5 	bl	800072c <__aeabi_ddiv>
 80045c2:	4633      	mov	r3, r6
 80045c4:	462a      	mov	r2, r5
 80045c6:	f7fb fdcf 	bl	8000168 <__aeabi_dsub>
 80045ca:	4656      	mov	r6, sl
 80045cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80045d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045d4:	f7fc fa30 	bl	8000a38 <__aeabi_d2iz>
 80045d8:	4605      	mov	r5, r0
 80045da:	f7fb ff13 	bl	8000404 <__aeabi_i2d>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045e6:	f7fb fdbf 	bl	8000168 <__aeabi_dsub>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	3530      	adds	r5, #48	@ 0x30
 80045f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80045f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80045f8:	f806 5b01 	strb.w	r5, [r6], #1
 80045fc:	f7fc f9de 	bl	80009bc <__aeabi_dcmplt>
 8004600:	2800      	cmp	r0, #0
 8004602:	d172      	bne.n	80046ea <_dtoa_r+0x62a>
 8004604:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004608:	2000      	movs	r0, #0
 800460a:	4911      	ldr	r1, [pc, #68]	@ (8004650 <_dtoa_r+0x590>)
 800460c:	f7fb fdac 	bl	8000168 <__aeabi_dsub>
 8004610:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004614:	f7fc f9d2 	bl	80009bc <__aeabi_dcmplt>
 8004618:	2800      	cmp	r0, #0
 800461a:	f040 80b4 	bne.w	8004786 <_dtoa_r+0x6c6>
 800461e:	42a6      	cmp	r6, r4
 8004620:	f43f af70 	beq.w	8004504 <_dtoa_r+0x444>
 8004624:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004628:	2200      	movs	r2, #0
 800462a:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <_dtoa_r+0x594>)
 800462c:	f7fb ff54 	bl	80004d8 <__aeabi_dmul>
 8004630:	2200      	movs	r2, #0
 8004632:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800463a:	4b06      	ldr	r3, [pc, #24]	@ (8004654 <_dtoa_r+0x594>)
 800463c:	f7fb ff4c 	bl	80004d8 <__aeabi_dmul>
 8004640:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004644:	e7c4      	b.n	80045d0 <_dtoa_r+0x510>
 8004646:	bf00      	nop
 8004648:	080062f8 	.word	0x080062f8
 800464c:	080062d0 	.word	0x080062d0
 8004650:	3ff00000 	.word	0x3ff00000
 8004654:	40240000 	.word	0x40240000
 8004658:	401c0000 	.word	0x401c0000
 800465c:	40140000 	.word	0x40140000
 8004660:	3fe00000 	.word	0x3fe00000
 8004664:	4631      	mov	r1, r6
 8004666:	4628      	mov	r0, r5
 8004668:	f7fb ff36 	bl	80004d8 <__aeabi_dmul>
 800466c:	4656      	mov	r6, sl
 800466e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004672:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004674:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004678:	f7fc f9de 	bl	8000a38 <__aeabi_d2iz>
 800467c:	4605      	mov	r5, r0
 800467e:	f7fb fec1 	bl	8000404 <__aeabi_i2d>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800468a:	f7fb fd6d 	bl	8000168 <__aeabi_dsub>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	3530      	adds	r5, #48	@ 0x30
 8004694:	f806 5b01 	strb.w	r5, [r6], #1
 8004698:	42a6      	cmp	r6, r4
 800469a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	d124      	bne.n	80046ee <_dtoa_r+0x62e>
 80046a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80046a8:	4bae      	ldr	r3, [pc, #696]	@ (8004964 <_dtoa_r+0x8a4>)
 80046aa:	f7fb fd5f 	bl	800016c <__adddf3>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046b6:	f7fc f99f 	bl	80009f8 <__aeabi_dcmpgt>
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d163      	bne.n	8004786 <_dtoa_r+0x6c6>
 80046be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80046c2:	2000      	movs	r0, #0
 80046c4:	49a7      	ldr	r1, [pc, #668]	@ (8004964 <_dtoa_r+0x8a4>)
 80046c6:	f7fb fd4f 	bl	8000168 <__aeabi_dsub>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046d2:	f7fc f973 	bl	80009bc <__aeabi_dcmplt>
 80046d6:	2800      	cmp	r0, #0
 80046d8:	f43f af14 	beq.w	8004504 <_dtoa_r+0x444>
 80046dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80046de:	1e73      	subs	r3, r6, #1
 80046e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80046e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80046e6:	2b30      	cmp	r3, #48	@ 0x30
 80046e8:	d0f8      	beq.n	80046dc <_dtoa_r+0x61c>
 80046ea:	4647      	mov	r7, r8
 80046ec:	e03b      	b.n	8004766 <_dtoa_r+0x6a6>
 80046ee:	4b9e      	ldr	r3, [pc, #632]	@ (8004968 <_dtoa_r+0x8a8>)
 80046f0:	f7fb fef2 	bl	80004d8 <__aeabi_dmul>
 80046f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80046f8:	e7bc      	b.n	8004674 <_dtoa_r+0x5b4>
 80046fa:	4656      	mov	r6, sl
 80046fc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004704:	4620      	mov	r0, r4
 8004706:	4629      	mov	r1, r5
 8004708:	f7fc f810 	bl	800072c <__aeabi_ddiv>
 800470c:	f7fc f994 	bl	8000a38 <__aeabi_d2iz>
 8004710:	4680      	mov	r8, r0
 8004712:	f7fb fe77 	bl	8000404 <__aeabi_i2d>
 8004716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800471a:	f7fb fedd 	bl	80004d8 <__aeabi_dmul>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4620      	mov	r0, r4
 8004724:	4629      	mov	r1, r5
 8004726:	f7fb fd1f 	bl	8000168 <__aeabi_dsub>
 800472a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800472e:	9d08      	ldr	r5, [sp, #32]
 8004730:	f806 4b01 	strb.w	r4, [r6], #1
 8004734:	eba6 040a 	sub.w	r4, r6, sl
 8004738:	42a5      	cmp	r5, r4
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	d133      	bne.n	80047a8 <_dtoa_r+0x6e8>
 8004740:	f7fb fd14 	bl	800016c <__adddf3>
 8004744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004748:	4604      	mov	r4, r0
 800474a:	460d      	mov	r5, r1
 800474c:	f7fc f954 	bl	80009f8 <__aeabi_dcmpgt>
 8004750:	b9c0      	cbnz	r0, 8004784 <_dtoa_r+0x6c4>
 8004752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004756:	4620      	mov	r0, r4
 8004758:	4629      	mov	r1, r5
 800475a:	f7fc f925 	bl	80009a8 <__aeabi_dcmpeq>
 800475e:	b110      	cbz	r0, 8004766 <_dtoa_r+0x6a6>
 8004760:	f018 0f01 	tst.w	r8, #1
 8004764:	d10e      	bne.n	8004784 <_dtoa_r+0x6c4>
 8004766:	4648      	mov	r0, r9
 8004768:	9903      	ldr	r1, [sp, #12]
 800476a:	f000 fbbb 	bl	8004ee4 <_Bfree>
 800476e:	2300      	movs	r3, #0
 8004770:	7033      	strb	r3, [r6, #0]
 8004772:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004774:	3701      	adds	r7, #1
 8004776:	601f      	str	r7, [r3, #0]
 8004778:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 824b 	beq.w	8004c16 <_dtoa_r+0xb56>
 8004780:	601e      	str	r6, [r3, #0]
 8004782:	e248      	b.n	8004c16 <_dtoa_r+0xb56>
 8004784:	46b8      	mov	r8, r7
 8004786:	4633      	mov	r3, r6
 8004788:	461e      	mov	r6, r3
 800478a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800478e:	2a39      	cmp	r2, #57	@ 0x39
 8004790:	d106      	bne.n	80047a0 <_dtoa_r+0x6e0>
 8004792:	459a      	cmp	sl, r3
 8004794:	d1f8      	bne.n	8004788 <_dtoa_r+0x6c8>
 8004796:	2230      	movs	r2, #48	@ 0x30
 8004798:	f108 0801 	add.w	r8, r8, #1
 800479c:	f88a 2000 	strb.w	r2, [sl]
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	3201      	adds	r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	e7a0      	b.n	80046ea <_dtoa_r+0x62a>
 80047a8:	2200      	movs	r2, #0
 80047aa:	4b6f      	ldr	r3, [pc, #444]	@ (8004968 <_dtoa_r+0x8a8>)
 80047ac:	f7fb fe94 	bl	80004d8 <__aeabi_dmul>
 80047b0:	2200      	movs	r2, #0
 80047b2:	2300      	movs	r3, #0
 80047b4:	4604      	mov	r4, r0
 80047b6:	460d      	mov	r5, r1
 80047b8:	f7fc f8f6 	bl	80009a8 <__aeabi_dcmpeq>
 80047bc:	2800      	cmp	r0, #0
 80047be:	d09f      	beq.n	8004700 <_dtoa_r+0x640>
 80047c0:	e7d1      	b.n	8004766 <_dtoa_r+0x6a6>
 80047c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80047c4:	2a00      	cmp	r2, #0
 80047c6:	f000 80ea 	beq.w	800499e <_dtoa_r+0x8de>
 80047ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80047cc:	2a01      	cmp	r2, #1
 80047ce:	f300 80cd 	bgt.w	800496c <_dtoa_r+0x8ac>
 80047d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80047d4:	2a00      	cmp	r2, #0
 80047d6:	f000 80c1 	beq.w	800495c <_dtoa_r+0x89c>
 80047da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80047de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80047e0:	9e04      	ldr	r6, [sp, #16]
 80047e2:	9a04      	ldr	r2, [sp, #16]
 80047e4:	2101      	movs	r1, #1
 80047e6:	441a      	add	r2, r3
 80047e8:	9204      	str	r2, [sp, #16]
 80047ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047ec:	4648      	mov	r0, r9
 80047ee:	441a      	add	r2, r3
 80047f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80047f2:	f000 fc2b 	bl	800504c <__i2b>
 80047f6:	4605      	mov	r5, r0
 80047f8:	b166      	cbz	r6, 8004814 <_dtoa_r+0x754>
 80047fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	dd09      	ble.n	8004814 <_dtoa_r+0x754>
 8004800:	42b3      	cmp	r3, r6
 8004802:	bfa8      	it	ge
 8004804:	4633      	movge	r3, r6
 8004806:	9a04      	ldr	r2, [sp, #16]
 8004808:	1af6      	subs	r6, r6, r3
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	9204      	str	r2, [sp, #16]
 800480e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	9309      	str	r3, [sp, #36]	@ 0x24
 8004814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004816:	b30b      	cbz	r3, 800485c <_dtoa_r+0x79c>
 8004818:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80c6 	beq.w	80049ac <_dtoa_r+0x8ec>
 8004820:	2c00      	cmp	r4, #0
 8004822:	f000 80c0 	beq.w	80049a6 <_dtoa_r+0x8e6>
 8004826:	4629      	mov	r1, r5
 8004828:	4622      	mov	r2, r4
 800482a:	4648      	mov	r0, r9
 800482c:	f000 fcc6 	bl	80051bc <__pow5mult>
 8004830:	9a03      	ldr	r2, [sp, #12]
 8004832:	4601      	mov	r1, r0
 8004834:	4605      	mov	r5, r0
 8004836:	4648      	mov	r0, r9
 8004838:	f000 fc1e 	bl	8005078 <__multiply>
 800483c:	9903      	ldr	r1, [sp, #12]
 800483e:	4680      	mov	r8, r0
 8004840:	4648      	mov	r0, r9
 8004842:	f000 fb4f 	bl	8004ee4 <_Bfree>
 8004846:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004848:	1b1b      	subs	r3, r3, r4
 800484a:	930a      	str	r3, [sp, #40]	@ 0x28
 800484c:	f000 80b1 	beq.w	80049b2 <_dtoa_r+0x8f2>
 8004850:	4641      	mov	r1, r8
 8004852:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004854:	4648      	mov	r0, r9
 8004856:	f000 fcb1 	bl	80051bc <__pow5mult>
 800485a:	9003      	str	r0, [sp, #12]
 800485c:	2101      	movs	r1, #1
 800485e:	4648      	mov	r0, r9
 8004860:	f000 fbf4 	bl	800504c <__i2b>
 8004864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004866:	4604      	mov	r4, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 81d8 	beq.w	8004c1e <_dtoa_r+0xb5e>
 800486e:	461a      	mov	r2, r3
 8004870:	4601      	mov	r1, r0
 8004872:	4648      	mov	r0, r9
 8004874:	f000 fca2 	bl	80051bc <__pow5mult>
 8004878:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800487a:	4604      	mov	r4, r0
 800487c:	2b01      	cmp	r3, #1
 800487e:	f300 809f 	bgt.w	80049c0 <_dtoa_r+0x900>
 8004882:	9b06      	ldr	r3, [sp, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	f040 8097 	bne.w	80049b8 <_dtoa_r+0x8f8>
 800488a:	9b07      	ldr	r3, [sp, #28]
 800488c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004890:	2b00      	cmp	r3, #0
 8004892:	f040 8093 	bne.w	80049bc <_dtoa_r+0x8fc>
 8004896:	9b07      	ldr	r3, [sp, #28]
 8004898:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800489c:	0d1b      	lsrs	r3, r3, #20
 800489e:	051b      	lsls	r3, r3, #20
 80048a0:	b133      	cbz	r3, 80048b0 <_dtoa_r+0x7f0>
 80048a2:	9b04      	ldr	r3, [sp, #16]
 80048a4:	3301      	adds	r3, #1
 80048a6:	9304      	str	r3, [sp, #16]
 80048a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048aa:	3301      	adds	r3, #1
 80048ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ae:	2301      	movs	r3, #1
 80048b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80048b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 81b8 	beq.w	8004c2a <_dtoa_r+0xb6a>
 80048ba:	6923      	ldr	r3, [r4, #16]
 80048bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80048c0:	6918      	ldr	r0, [r3, #16]
 80048c2:	f000 fb77 	bl	8004fb4 <__hi0bits>
 80048c6:	f1c0 0020 	rsb	r0, r0, #32
 80048ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048cc:	4418      	add	r0, r3
 80048ce:	f010 001f 	ands.w	r0, r0, #31
 80048d2:	f000 8082 	beq.w	80049da <_dtoa_r+0x91a>
 80048d6:	f1c0 0320 	rsb	r3, r0, #32
 80048da:	2b04      	cmp	r3, #4
 80048dc:	dd73      	ble.n	80049c6 <_dtoa_r+0x906>
 80048de:	9b04      	ldr	r3, [sp, #16]
 80048e0:	f1c0 001c 	rsb	r0, r0, #28
 80048e4:	4403      	add	r3, r0
 80048e6:	9304      	str	r3, [sp, #16]
 80048e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ea:	4406      	add	r6, r0
 80048ec:	4403      	add	r3, r0
 80048ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80048f0:	9b04      	ldr	r3, [sp, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	dd05      	ble.n	8004902 <_dtoa_r+0x842>
 80048f6:	461a      	mov	r2, r3
 80048f8:	4648      	mov	r0, r9
 80048fa:	9903      	ldr	r1, [sp, #12]
 80048fc:	f000 fcb8 	bl	8005270 <__lshift>
 8004900:	9003      	str	r0, [sp, #12]
 8004902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004904:	2b00      	cmp	r3, #0
 8004906:	dd05      	ble.n	8004914 <_dtoa_r+0x854>
 8004908:	4621      	mov	r1, r4
 800490a:	461a      	mov	r2, r3
 800490c:	4648      	mov	r0, r9
 800490e:	f000 fcaf 	bl	8005270 <__lshift>
 8004912:	4604      	mov	r4, r0
 8004914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d061      	beq.n	80049de <_dtoa_r+0x91e>
 800491a:	4621      	mov	r1, r4
 800491c:	9803      	ldr	r0, [sp, #12]
 800491e:	f000 fd13 	bl	8005348 <__mcmp>
 8004922:	2800      	cmp	r0, #0
 8004924:	da5b      	bge.n	80049de <_dtoa_r+0x91e>
 8004926:	2300      	movs	r3, #0
 8004928:	220a      	movs	r2, #10
 800492a:	4648      	mov	r0, r9
 800492c:	9903      	ldr	r1, [sp, #12]
 800492e:	f000 fafb 	bl	8004f28 <__multadd>
 8004932:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004934:	f107 38ff 	add.w	r8, r7, #4294967295
 8004938:	9003      	str	r0, [sp, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8177 	beq.w	8004c2e <_dtoa_r+0xb6e>
 8004940:	4629      	mov	r1, r5
 8004942:	2300      	movs	r3, #0
 8004944:	220a      	movs	r2, #10
 8004946:	4648      	mov	r0, r9
 8004948:	f000 faee 	bl	8004f28 <__multadd>
 800494c:	f1bb 0f00 	cmp.w	fp, #0
 8004950:	4605      	mov	r5, r0
 8004952:	dc6f      	bgt.n	8004a34 <_dtoa_r+0x974>
 8004954:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004956:	2b02      	cmp	r3, #2
 8004958:	dc49      	bgt.n	80049ee <_dtoa_r+0x92e>
 800495a:	e06b      	b.n	8004a34 <_dtoa_r+0x974>
 800495c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800495e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004962:	e73c      	b.n	80047de <_dtoa_r+0x71e>
 8004964:	3fe00000 	.word	0x3fe00000
 8004968:	40240000 	.word	0x40240000
 800496c:	9b08      	ldr	r3, [sp, #32]
 800496e:	1e5c      	subs	r4, r3, #1
 8004970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004972:	42a3      	cmp	r3, r4
 8004974:	db09      	blt.n	800498a <_dtoa_r+0x8ca>
 8004976:	1b1c      	subs	r4, r3, r4
 8004978:	9b08      	ldr	r3, [sp, #32]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f6bf af30 	bge.w	80047e0 <_dtoa_r+0x720>
 8004980:	9b04      	ldr	r3, [sp, #16]
 8004982:	9a08      	ldr	r2, [sp, #32]
 8004984:	1a9e      	subs	r6, r3, r2
 8004986:	2300      	movs	r3, #0
 8004988:	e72b      	b.n	80047e2 <_dtoa_r+0x722>
 800498a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800498c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800498e:	1ae3      	subs	r3, r4, r3
 8004990:	441a      	add	r2, r3
 8004992:	940a      	str	r4, [sp, #40]	@ 0x28
 8004994:	9e04      	ldr	r6, [sp, #16]
 8004996:	2400      	movs	r4, #0
 8004998:	9b08      	ldr	r3, [sp, #32]
 800499a:	920e      	str	r2, [sp, #56]	@ 0x38
 800499c:	e721      	b.n	80047e2 <_dtoa_r+0x722>
 800499e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80049a0:	9e04      	ldr	r6, [sp, #16]
 80049a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80049a4:	e728      	b.n	80047f8 <_dtoa_r+0x738>
 80049a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80049aa:	e751      	b.n	8004850 <_dtoa_r+0x790>
 80049ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049ae:	9903      	ldr	r1, [sp, #12]
 80049b0:	e750      	b.n	8004854 <_dtoa_r+0x794>
 80049b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80049b6:	e751      	b.n	800485c <_dtoa_r+0x79c>
 80049b8:	2300      	movs	r3, #0
 80049ba:	e779      	b.n	80048b0 <_dtoa_r+0x7f0>
 80049bc:	9b06      	ldr	r3, [sp, #24]
 80049be:	e777      	b.n	80048b0 <_dtoa_r+0x7f0>
 80049c0:	2300      	movs	r3, #0
 80049c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80049c4:	e779      	b.n	80048ba <_dtoa_r+0x7fa>
 80049c6:	d093      	beq.n	80048f0 <_dtoa_r+0x830>
 80049c8:	9a04      	ldr	r2, [sp, #16]
 80049ca:	331c      	adds	r3, #28
 80049cc:	441a      	add	r2, r3
 80049ce:	9204      	str	r2, [sp, #16]
 80049d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049d2:	441e      	add	r6, r3
 80049d4:	441a      	add	r2, r3
 80049d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80049d8:	e78a      	b.n	80048f0 <_dtoa_r+0x830>
 80049da:	4603      	mov	r3, r0
 80049dc:	e7f4      	b.n	80049c8 <_dtoa_r+0x908>
 80049de:	9b08      	ldr	r3, [sp, #32]
 80049e0:	46b8      	mov	r8, r7
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	dc20      	bgt.n	8004a28 <_dtoa_r+0x968>
 80049e6:	469b      	mov	fp, r3
 80049e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	dd1e      	ble.n	8004a2c <_dtoa_r+0x96c>
 80049ee:	f1bb 0f00 	cmp.w	fp, #0
 80049f2:	f47f adb1 	bne.w	8004558 <_dtoa_r+0x498>
 80049f6:	4621      	mov	r1, r4
 80049f8:	465b      	mov	r3, fp
 80049fa:	2205      	movs	r2, #5
 80049fc:	4648      	mov	r0, r9
 80049fe:	f000 fa93 	bl	8004f28 <__multadd>
 8004a02:	4601      	mov	r1, r0
 8004a04:	4604      	mov	r4, r0
 8004a06:	9803      	ldr	r0, [sp, #12]
 8004a08:	f000 fc9e 	bl	8005348 <__mcmp>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	f77f ada3 	ble.w	8004558 <_dtoa_r+0x498>
 8004a12:	4656      	mov	r6, sl
 8004a14:	2331      	movs	r3, #49	@ 0x31
 8004a16:	f108 0801 	add.w	r8, r8, #1
 8004a1a:	f806 3b01 	strb.w	r3, [r6], #1
 8004a1e:	e59f      	b.n	8004560 <_dtoa_r+0x4a0>
 8004a20:	46b8      	mov	r8, r7
 8004a22:	9c08      	ldr	r4, [sp, #32]
 8004a24:	4625      	mov	r5, r4
 8004a26:	e7f4      	b.n	8004a12 <_dtoa_r+0x952>
 8004a28:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004a2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 8101 	beq.w	8004c36 <_dtoa_r+0xb76>
 8004a34:	2e00      	cmp	r6, #0
 8004a36:	dd05      	ble.n	8004a44 <_dtoa_r+0x984>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4632      	mov	r2, r6
 8004a3c:	4648      	mov	r0, r9
 8004a3e:	f000 fc17 	bl	8005270 <__lshift>
 8004a42:	4605      	mov	r5, r0
 8004a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d05c      	beq.n	8004b04 <_dtoa_r+0xa44>
 8004a4a:	4648      	mov	r0, r9
 8004a4c:	6869      	ldr	r1, [r5, #4]
 8004a4e:	f000 fa09 	bl	8004e64 <_Balloc>
 8004a52:	4606      	mov	r6, r0
 8004a54:	b928      	cbnz	r0, 8004a62 <_dtoa_r+0x9a2>
 8004a56:	4602      	mov	r2, r0
 8004a58:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004a5c:	4b80      	ldr	r3, [pc, #512]	@ (8004c60 <_dtoa_r+0xba0>)
 8004a5e:	f7ff bb43 	b.w	80040e8 <_dtoa_r+0x28>
 8004a62:	692a      	ldr	r2, [r5, #16]
 8004a64:	f105 010c 	add.w	r1, r5, #12
 8004a68:	3202      	adds	r2, #2
 8004a6a:	0092      	lsls	r2, r2, #2
 8004a6c:	300c      	adds	r0, #12
 8004a6e:	f000 ff9d 	bl	80059ac <memcpy>
 8004a72:	2201      	movs	r2, #1
 8004a74:	4631      	mov	r1, r6
 8004a76:	4648      	mov	r0, r9
 8004a78:	f000 fbfa 	bl	8005270 <__lshift>
 8004a7c:	462f      	mov	r7, r5
 8004a7e:	4605      	mov	r5, r0
 8004a80:	f10a 0301 	add.w	r3, sl, #1
 8004a84:	9304      	str	r3, [sp, #16]
 8004a86:	eb0a 030b 	add.w	r3, sl, fp
 8004a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a8c:	9b06      	ldr	r3, [sp, #24]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a94:	9b04      	ldr	r3, [sp, #16]
 8004a96:	4621      	mov	r1, r4
 8004a98:	9803      	ldr	r0, [sp, #12]
 8004a9a:	f103 3bff 	add.w	fp, r3, #4294967295
 8004a9e:	f7ff fa84 	bl	8003faa <quorem>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4639      	mov	r1, r7
 8004aa6:	3330      	adds	r3, #48	@ 0x30
 8004aa8:	9006      	str	r0, [sp, #24]
 8004aaa:	9803      	ldr	r0, [sp, #12]
 8004aac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004aae:	f000 fc4b 	bl	8005348 <__mcmp>
 8004ab2:	462a      	mov	r2, r5
 8004ab4:	9008      	str	r0, [sp, #32]
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	4648      	mov	r0, r9
 8004aba:	f000 fc61 	bl	8005380 <__mdiff>
 8004abe:	68c2      	ldr	r2, [r0, #12]
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ac4:	bb02      	cbnz	r2, 8004b08 <_dtoa_r+0xa48>
 8004ac6:	4601      	mov	r1, r0
 8004ac8:	9803      	ldr	r0, [sp, #12]
 8004aca:	f000 fc3d 	bl	8005348 <__mcmp>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	4648      	mov	r0, r9
 8004ad6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004ada:	f000 fa03 	bl	8004ee4 <_Bfree>
 8004ade:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ae0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004ae2:	9e04      	ldr	r6, [sp, #16]
 8004ae4:	ea42 0103 	orr.w	r1, r2, r3
 8004ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aea:	4319      	orrs	r1, r3
 8004aec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004aee:	d10d      	bne.n	8004b0c <_dtoa_r+0xa4c>
 8004af0:	2b39      	cmp	r3, #57	@ 0x39
 8004af2:	d027      	beq.n	8004b44 <_dtoa_r+0xa84>
 8004af4:	9a08      	ldr	r2, [sp, #32]
 8004af6:	2a00      	cmp	r2, #0
 8004af8:	dd01      	ble.n	8004afe <_dtoa_r+0xa3e>
 8004afa:	9b06      	ldr	r3, [sp, #24]
 8004afc:	3331      	adds	r3, #49	@ 0x31
 8004afe:	f88b 3000 	strb.w	r3, [fp]
 8004b02:	e52e      	b.n	8004562 <_dtoa_r+0x4a2>
 8004b04:	4628      	mov	r0, r5
 8004b06:	e7b9      	b.n	8004a7c <_dtoa_r+0x9bc>
 8004b08:	2201      	movs	r2, #1
 8004b0a:	e7e2      	b.n	8004ad2 <_dtoa_r+0xa12>
 8004b0c:	9908      	ldr	r1, [sp, #32]
 8004b0e:	2900      	cmp	r1, #0
 8004b10:	db04      	blt.n	8004b1c <_dtoa_r+0xa5c>
 8004b12:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004b14:	4301      	orrs	r1, r0
 8004b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b18:	4301      	orrs	r1, r0
 8004b1a:	d120      	bne.n	8004b5e <_dtoa_r+0xa9e>
 8004b1c:	2a00      	cmp	r2, #0
 8004b1e:	ddee      	ble.n	8004afe <_dtoa_r+0xa3e>
 8004b20:	2201      	movs	r2, #1
 8004b22:	9903      	ldr	r1, [sp, #12]
 8004b24:	4648      	mov	r0, r9
 8004b26:	9304      	str	r3, [sp, #16]
 8004b28:	f000 fba2 	bl	8005270 <__lshift>
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	9003      	str	r0, [sp, #12]
 8004b30:	f000 fc0a 	bl	8005348 <__mcmp>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	9b04      	ldr	r3, [sp, #16]
 8004b38:	dc02      	bgt.n	8004b40 <_dtoa_r+0xa80>
 8004b3a:	d1e0      	bne.n	8004afe <_dtoa_r+0xa3e>
 8004b3c:	07da      	lsls	r2, r3, #31
 8004b3e:	d5de      	bpl.n	8004afe <_dtoa_r+0xa3e>
 8004b40:	2b39      	cmp	r3, #57	@ 0x39
 8004b42:	d1da      	bne.n	8004afa <_dtoa_r+0xa3a>
 8004b44:	2339      	movs	r3, #57	@ 0x39
 8004b46:	f88b 3000 	strb.w	r3, [fp]
 8004b4a:	4633      	mov	r3, r6
 8004b4c:	461e      	mov	r6, r3
 8004b4e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	2a39      	cmp	r2, #57	@ 0x39
 8004b56:	d04e      	beq.n	8004bf6 <_dtoa_r+0xb36>
 8004b58:	3201      	adds	r2, #1
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	e501      	b.n	8004562 <_dtoa_r+0x4a2>
 8004b5e:	2a00      	cmp	r2, #0
 8004b60:	dd03      	ble.n	8004b6a <_dtoa_r+0xaaa>
 8004b62:	2b39      	cmp	r3, #57	@ 0x39
 8004b64:	d0ee      	beq.n	8004b44 <_dtoa_r+0xa84>
 8004b66:	3301      	adds	r3, #1
 8004b68:	e7c9      	b.n	8004afe <_dtoa_r+0xa3e>
 8004b6a:	9a04      	ldr	r2, [sp, #16]
 8004b6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b72:	428a      	cmp	r2, r1
 8004b74:	d028      	beq.n	8004bc8 <_dtoa_r+0xb08>
 8004b76:	2300      	movs	r3, #0
 8004b78:	220a      	movs	r2, #10
 8004b7a:	9903      	ldr	r1, [sp, #12]
 8004b7c:	4648      	mov	r0, r9
 8004b7e:	f000 f9d3 	bl	8004f28 <__multadd>
 8004b82:	42af      	cmp	r7, r5
 8004b84:	9003      	str	r0, [sp, #12]
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	f04f 020a 	mov.w	r2, #10
 8004b8e:	4639      	mov	r1, r7
 8004b90:	4648      	mov	r0, r9
 8004b92:	d107      	bne.n	8004ba4 <_dtoa_r+0xae4>
 8004b94:	f000 f9c8 	bl	8004f28 <__multadd>
 8004b98:	4607      	mov	r7, r0
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	9b04      	ldr	r3, [sp, #16]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	9304      	str	r3, [sp, #16]
 8004ba2:	e777      	b.n	8004a94 <_dtoa_r+0x9d4>
 8004ba4:	f000 f9c0 	bl	8004f28 <__multadd>
 8004ba8:	4629      	mov	r1, r5
 8004baa:	4607      	mov	r7, r0
 8004bac:	2300      	movs	r3, #0
 8004bae:	220a      	movs	r2, #10
 8004bb0:	4648      	mov	r0, r9
 8004bb2:	f000 f9b9 	bl	8004f28 <__multadd>
 8004bb6:	4605      	mov	r5, r0
 8004bb8:	e7f0      	b.n	8004b9c <_dtoa_r+0xadc>
 8004bba:	f1bb 0f00 	cmp.w	fp, #0
 8004bbe:	bfcc      	ite	gt
 8004bc0:	465e      	movgt	r6, fp
 8004bc2:	2601      	movle	r6, #1
 8004bc4:	2700      	movs	r7, #0
 8004bc6:	4456      	add	r6, sl
 8004bc8:	2201      	movs	r2, #1
 8004bca:	9903      	ldr	r1, [sp, #12]
 8004bcc:	4648      	mov	r0, r9
 8004bce:	9304      	str	r3, [sp, #16]
 8004bd0:	f000 fb4e 	bl	8005270 <__lshift>
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	9003      	str	r0, [sp, #12]
 8004bd8:	f000 fbb6 	bl	8005348 <__mcmp>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	dcb4      	bgt.n	8004b4a <_dtoa_r+0xa8a>
 8004be0:	d102      	bne.n	8004be8 <_dtoa_r+0xb28>
 8004be2:	9b04      	ldr	r3, [sp, #16]
 8004be4:	07db      	lsls	r3, r3, #31
 8004be6:	d4b0      	bmi.n	8004b4a <_dtoa_r+0xa8a>
 8004be8:	4633      	mov	r3, r6
 8004bea:	461e      	mov	r6, r3
 8004bec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bf0:	2a30      	cmp	r2, #48	@ 0x30
 8004bf2:	d0fa      	beq.n	8004bea <_dtoa_r+0xb2a>
 8004bf4:	e4b5      	b.n	8004562 <_dtoa_r+0x4a2>
 8004bf6:	459a      	cmp	sl, r3
 8004bf8:	d1a8      	bne.n	8004b4c <_dtoa_r+0xa8c>
 8004bfa:	2331      	movs	r3, #49	@ 0x31
 8004bfc:	f108 0801 	add.w	r8, r8, #1
 8004c00:	f88a 3000 	strb.w	r3, [sl]
 8004c04:	e4ad      	b.n	8004562 <_dtoa_r+0x4a2>
 8004c06:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004c08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004c64 <_dtoa_r+0xba4>
 8004c0c:	b11b      	cbz	r3, 8004c16 <_dtoa_r+0xb56>
 8004c0e:	f10a 0308 	add.w	r3, sl, #8
 8004c12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	4650      	mov	r0, sl
 8004c18:	b017      	add	sp, #92	@ 0x5c
 8004c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	f77f ae2e 	ble.w	8004882 <_dtoa_r+0x7c2>
 8004c26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c2a:	2001      	movs	r0, #1
 8004c2c:	e64d      	b.n	80048ca <_dtoa_r+0x80a>
 8004c2e:	f1bb 0f00 	cmp.w	fp, #0
 8004c32:	f77f aed9 	ble.w	80049e8 <_dtoa_r+0x928>
 8004c36:	4656      	mov	r6, sl
 8004c38:	4621      	mov	r1, r4
 8004c3a:	9803      	ldr	r0, [sp, #12]
 8004c3c:	f7ff f9b5 	bl	8003faa <quorem>
 8004c40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004c44:	f806 3b01 	strb.w	r3, [r6], #1
 8004c48:	eba6 020a 	sub.w	r2, r6, sl
 8004c4c:	4593      	cmp	fp, r2
 8004c4e:	ddb4      	ble.n	8004bba <_dtoa_r+0xafa>
 8004c50:	2300      	movs	r3, #0
 8004c52:	220a      	movs	r2, #10
 8004c54:	4648      	mov	r0, r9
 8004c56:	9903      	ldr	r1, [sp, #12]
 8004c58:	f000 f966 	bl	8004f28 <__multadd>
 8004c5c:	9003      	str	r0, [sp, #12]
 8004c5e:	e7eb      	b.n	8004c38 <_dtoa_r+0xb78>
 8004c60:	080061fe 	.word	0x080061fe
 8004c64:	08006182 	.word	0x08006182

08004c68 <_free_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	2900      	cmp	r1, #0
 8004c6e:	d040      	beq.n	8004cf2 <_free_r+0x8a>
 8004c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c74:	1f0c      	subs	r4, r1, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bfb8      	it	lt
 8004c7a:	18e4      	addlt	r4, r4, r3
 8004c7c:	f000 f8e6 	bl	8004e4c <__malloc_lock>
 8004c80:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf4 <_free_r+0x8c>)
 8004c82:	6813      	ldr	r3, [r2, #0]
 8004c84:	b933      	cbnz	r3, 8004c94 <_free_r+0x2c>
 8004c86:	6063      	str	r3, [r4, #4]
 8004c88:	6014      	str	r4, [r2, #0]
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c90:	f000 b8e2 	b.w	8004e58 <__malloc_unlock>
 8004c94:	42a3      	cmp	r3, r4
 8004c96:	d908      	bls.n	8004caa <_free_r+0x42>
 8004c98:	6820      	ldr	r0, [r4, #0]
 8004c9a:	1821      	adds	r1, r4, r0
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	bf01      	itttt	eq
 8004ca0:	6819      	ldreq	r1, [r3, #0]
 8004ca2:	685b      	ldreq	r3, [r3, #4]
 8004ca4:	1809      	addeq	r1, r1, r0
 8004ca6:	6021      	streq	r1, [r4, #0]
 8004ca8:	e7ed      	b.n	8004c86 <_free_r+0x1e>
 8004caa:	461a      	mov	r2, r3
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	b10b      	cbz	r3, 8004cb4 <_free_r+0x4c>
 8004cb0:	42a3      	cmp	r3, r4
 8004cb2:	d9fa      	bls.n	8004caa <_free_r+0x42>
 8004cb4:	6811      	ldr	r1, [r2, #0]
 8004cb6:	1850      	adds	r0, r2, r1
 8004cb8:	42a0      	cmp	r0, r4
 8004cba:	d10b      	bne.n	8004cd4 <_free_r+0x6c>
 8004cbc:	6820      	ldr	r0, [r4, #0]
 8004cbe:	4401      	add	r1, r0
 8004cc0:	1850      	adds	r0, r2, r1
 8004cc2:	4283      	cmp	r3, r0
 8004cc4:	6011      	str	r1, [r2, #0]
 8004cc6:	d1e0      	bne.n	8004c8a <_free_r+0x22>
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	4408      	add	r0, r1
 8004cce:	6010      	str	r0, [r2, #0]
 8004cd0:	6053      	str	r3, [r2, #4]
 8004cd2:	e7da      	b.n	8004c8a <_free_r+0x22>
 8004cd4:	d902      	bls.n	8004cdc <_free_r+0x74>
 8004cd6:	230c      	movs	r3, #12
 8004cd8:	602b      	str	r3, [r5, #0]
 8004cda:	e7d6      	b.n	8004c8a <_free_r+0x22>
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	1821      	adds	r1, r4, r0
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	bf01      	itttt	eq
 8004ce4:	6819      	ldreq	r1, [r3, #0]
 8004ce6:	685b      	ldreq	r3, [r3, #4]
 8004ce8:	1809      	addeq	r1, r1, r0
 8004cea:	6021      	streq	r1, [r4, #0]
 8004cec:	6063      	str	r3, [r4, #4]
 8004cee:	6054      	str	r4, [r2, #4]
 8004cf0:	e7cb      	b.n	8004c8a <_free_r+0x22>
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}
 8004cf4:	20000570 	.word	0x20000570

08004cf8 <malloc>:
 8004cf8:	4b02      	ldr	r3, [pc, #8]	@ (8004d04 <malloc+0xc>)
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	f000 b825 	b.w	8004d4c <_malloc_r>
 8004d02:	bf00      	nop
 8004d04:	2000001c 	.word	0x2000001c

08004d08 <sbrk_aligned>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	4e0f      	ldr	r6, [pc, #60]	@ (8004d48 <sbrk_aligned+0x40>)
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	6831      	ldr	r1, [r6, #0]
 8004d10:	4605      	mov	r5, r0
 8004d12:	b911      	cbnz	r1, 8004d1a <sbrk_aligned+0x12>
 8004d14:	f000 fe3a 	bl	800598c <_sbrk_r>
 8004d18:	6030      	str	r0, [r6, #0]
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f000 fe35 	bl	800598c <_sbrk_r>
 8004d22:	1c43      	adds	r3, r0, #1
 8004d24:	d103      	bne.n	8004d2e <sbrk_aligned+0x26>
 8004d26:	f04f 34ff 	mov.w	r4, #4294967295
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	bd70      	pop	{r4, r5, r6, pc}
 8004d2e:	1cc4      	adds	r4, r0, #3
 8004d30:	f024 0403 	bic.w	r4, r4, #3
 8004d34:	42a0      	cmp	r0, r4
 8004d36:	d0f8      	beq.n	8004d2a <sbrk_aligned+0x22>
 8004d38:	1a21      	subs	r1, r4, r0
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f000 fe26 	bl	800598c <_sbrk_r>
 8004d40:	3001      	adds	r0, #1
 8004d42:	d1f2      	bne.n	8004d2a <sbrk_aligned+0x22>
 8004d44:	e7ef      	b.n	8004d26 <sbrk_aligned+0x1e>
 8004d46:	bf00      	nop
 8004d48:	2000056c 	.word	0x2000056c

08004d4c <_malloc_r>:
 8004d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d50:	1ccd      	adds	r5, r1, #3
 8004d52:	f025 0503 	bic.w	r5, r5, #3
 8004d56:	3508      	adds	r5, #8
 8004d58:	2d0c      	cmp	r5, #12
 8004d5a:	bf38      	it	cc
 8004d5c:	250c      	movcc	r5, #12
 8004d5e:	2d00      	cmp	r5, #0
 8004d60:	4606      	mov	r6, r0
 8004d62:	db01      	blt.n	8004d68 <_malloc_r+0x1c>
 8004d64:	42a9      	cmp	r1, r5
 8004d66:	d904      	bls.n	8004d72 <_malloc_r+0x26>
 8004d68:	230c      	movs	r3, #12
 8004d6a:	6033      	str	r3, [r6, #0]
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e48 <_malloc_r+0xfc>
 8004d76:	f000 f869 	bl	8004e4c <__malloc_lock>
 8004d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d7e:	461c      	mov	r4, r3
 8004d80:	bb44      	cbnz	r4, 8004dd4 <_malloc_r+0x88>
 8004d82:	4629      	mov	r1, r5
 8004d84:	4630      	mov	r0, r6
 8004d86:	f7ff ffbf 	bl	8004d08 <sbrk_aligned>
 8004d8a:	1c43      	adds	r3, r0, #1
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	d158      	bne.n	8004e42 <_malloc_r+0xf6>
 8004d90:	f8d8 4000 	ldr.w	r4, [r8]
 8004d94:	4627      	mov	r7, r4
 8004d96:	2f00      	cmp	r7, #0
 8004d98:	d143      	bne.n	8004e22 <_malloc_r+0xd6>
 8004d9a:	2c00      	cmp	r4, #0
 8004d9c:	d04b      	beq.n	8004e36 <_malloc_r+0xea>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	4639      	mov	r1, r7
 8004da2:	4630      	mov	r0, r6
 8004da4:	eb04 0903 	add.w	r9, r4, r3
 8004da8:	f000 fdf0 	bl	800598c <_sbrk_r>
 8004dac:	4581      	cmp	r9, r0
 8004dae:	d142      	bne.n	8004e36 <_malloc_r+0xea>
 8004db0:	6821      	ldr	r1, [r4, #0]
 8004db2:	4630      	mov	r0, r6
 8004db4:	1a6d      	subs	r5, r5, r1
 8004db6:	4629      	mov	r1, r5
 8004db8:	f7ff ffa6 	bl	8004d08 <sbrk_aligned>
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d03a      	beq.n	8004e36 <_malloc_r+0xea>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	442b      	add	r3, r5
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	f8d8 3000 	ldr.w	r3, [r8]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	bb62      	cbnz	r2, 8004e28 <_malloc_r+0xdc>
 8004dce:	f8c8 7000 	str.w	r7, [r8]
 8004dd2:	e00f      	b.n	8004df4 <_malloc_r+0xa8>
 8004dd4:	6822      	ldr	r2, [r4, #0]
 8004dd6:	1b52      	subs	r2, r2, r5
 8004dd8:	d420      	bmi.n	8004e1c <_malloc_r+0xd0>
 8004dda:	2a0b      	cmp	r2, #11
 8004ddc:	d917      	bls.n	8004e0e <_malloc_r+0xc2>
 8004dde:	1961      	adds	r1, r4, r5
 8004de0:	42a3      	cmp	r3, r4
 8004de2:	6025      	str	r5, [r4, #0]
 8004de4:	bf18      	it	ne
 8004de6:	6059      	strne	r1, [r3, #4]
 8004de8:	6863      	ldr	r3, [r4, #4]
 8004dea:	bf08      	it	eq
 8004dec:	f8c8 1000 	streq.w	r1, [r8]
 8004df0:	5162      	str	r2, [r4, r5]
 8004df2:	604b      	str	r3, [r1, #4]
 8004df4:	4630      	mov	r0, r6
 8004df6:	f000 f82f 	bl	8004e58 <__malloc_unlock>
 8004dfa:	f104 000b 	add.w	r0, r4, #11
 8004dfe:	1d23      	adds	r3, r4, #4
 8004e00:	f020 0007 	bic.w	r0, r0, #7
 8004e04:	1ac2      	subs	r2, r0, r3
 8004e06:	bf1c      	itt	ne
 8004e08:	1a1b      	subne	r3, r3, r0
 8004e0a:	50a3      	strne	r3, [r4, r2]
 8004e0c:	e7af      	b.n	8004d6e <_malloc_r+0x22>
 8004e0e:	6862      	ldr	r2, [r4, #4]
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	bf0c      	ite	eq
 8004e14:	f8c8 2000 	streq.w	r2, [r8]
 8004e18:	605a      	strne	r2, [r3, #4]
 8004e1a:	e7eb      	b.n	8004df4 <_malloc_r+0xa8>
 8004e1c:	4623      	mov	r3, r4
 8004e1e:	6864      	ldr	r4, [r4, #4]
 8004e20:	e7ae      	b.n	8004d80 <_malloc_r+0x34>
 8004e22:	463c      	mov	r4, r7
 8004e24:	687f      	ldr	r7, [r7, #4]
 8004e26:	e7b6      	b.n	8004d96 <_malloc_r+0x4a>
 8004e28:	461a      	mov	r2, r3
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	42a3      	cmp	r3, r4
 8004e2e:	d1fb      	bne.n	8004e28 <_malloc_r+0xdc>
 8004e30:	2300      	movs	r3, #0
 8004e32:	6053      	str	r3, [r2, #4]
 8004e34:	e7de      	b.n	8004df4 <_malloc_r+0xa8>
 8004e36:	230c      	movs	r3, #12
 8004e38:	4630      	mov	r0, r6
 8004e3a:	6033      	str	r3, [r6, #0]
 8004e3c:	f000 f80c 	bl	8004e58 <__malloc_unlock>
 8004e40:	e794      	b.n	8004d6c <_malloc_r+0x20>
 8004e42:	6005      	str	r5, [r0, #0]
 8004e44:	e7d6      	b.n	8004df4 <_malloc_r+0xa8>
 8004e46:	bf00      	nop
 8004e48:	20000570 	.word	0x20000570

08004e4c <__malloc_lock>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	@ (8004e54 <__malloc_lock+0x8>)
 8004e4e:	f7ff b89c 	b.w	8003f8a <__retarget_lock_acquire_recursive>
 8004e52:	bf00      	nop
 8004e54:	20000568 	.word	0x20000568

08004e58 <__malloc_unlock>:
 8004e58:	4801      	ldr	r0, [pc, #4]	@ (8004e60 <__malloc_unlock+0x8>)
 8004e5a:	f7ff b897 	b.w	8003f8c <__retarget_lock_release_recursive>
 8004e5e:	bf00      	nop
 8004e60:	20000568 	.word	0x20000568

08004e64 <_Balloc>:
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	69c6      	ldr	r6, [r0, #28]
 8004e68:	4604      	mov	r4, r0
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	b976      	cbnz	r6, 8004e8c <_Balloc+0x28>
 8004e6e:	2010      	movs	r0, #16
 8004e70:	f7ff ff42 	bl	8004cf8 <malloc>
 8004e74:	4602      	mov	r2, r0
 8004e76:	61e0      	str	r0, [r4, #28]
 8004e78:	b920      	cbnz	r0, 8004e84 <_Balloc+0x20>
 8004e7a:	216b      	movs	r1, #107	@ 0x6b
 8004e7c:	4b17      	ldr	r3, [pc, #92]	@ (8004edc <_Balloc+0x78>)
 8004e7e:	4818      	ldr	r0, [pc, #96]	@ (8004ee0 <_Balloc+0x7c>)
 8004e80:	f000 fda2 	bl	80059c8 <__assert_func>
 8004e84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e88:	6006      	str	r6, [r0, #0]
 8004e8a:	60c6      	str	r6, [r0, #12]
 8004e8c:	69e6      	ldr	r6, [r4, #28]
 8004e8e:	68f3      	ldr	r3, [r6, #12]
 8004e90:	b183      	cbz	r3, 8004eb4 <_Balloc+0x50>
 8004e92:	69e3      	ldr	r3, [r4, #28]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e9a:	b9b8      	cbnz	r0, 8004ecc <_Balloc+0x68>
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	fa01 f605 	lsl.w	r6, r1, r5
 8004ea2:	1d72      	adds	r2, r6, #5
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	0092      	lsls	r2, r2, #2
 8004ea8:	f000 fdac 	bl	8005a04 <_calloc_r>
 8004eac:	b160      	cbz	r0, 8004ec8 <_Balloc+0x64>
 8004eae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004eb2:	e00e      	b.n	8004ed2 <_Balloc+0x6e>
 8004eb4:	2221      	movs	r2, #33	@ 0x21
 8004eb6:	2104      	movs	r1, #4
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f000 fda3 	bl	8005a04 <_calloc_r>
 8004ebe:	69e3      	ldr	r3, [r4, #28]
 8004ec0:	60f0      	str	r0, [r6, #12]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e4      	bne.n	8004e92 <_Balloc+0x2e>
 8004ec8:	2000      	movs	r0, #0
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	6802      	ldr	r2, [r0, #0]
 8004ece:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ed8:	e7f7      	b.n	8004eca <_Balloc+0x66>
 8004eda:	bf00      	nop
 8004edc:	0800618f 	.word	0x0800618f
 8004ee0:	0800620f 	.word	0x0800620f

08004ee4 <_Bfree>:
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	69c6      	ldr	r6, [r0, #28]
 8004ee8:	4605      	mov	r5, r0
 8004eea:	460c      	mov	r4, r1
 8004eec:	b976      	cbnz	r6, 8004f0c <_Bfree+0x28>
 8004eee:	2010      	movs	r0, #16
 8004ef0:	f7ff ff02 	bl	8004cf8 <malloc>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	61e8      	str	r0, [r5, #28]
 8004ef8:	b920      	cbnz	r0, 8004f04 <_Bfree+0x20>
 8004efa:	218f      	movs	r1, #143	@ 0x8f
 8004efc:	4b08      	ldr	r3, [pc, #32]	@ (8004f20 <_Bfree+0x3c>)
 8004efe:	4809      	ldr	r0, [pc, #36]	@ (8004f24 <_Bfree+0x40>)
 8004f00:	f000 fd62 	bl	80059c8 <__assert_func>
 8004f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f08:	6006      	str	r6, [r0, #0]
 8004f0a:	60c6      	str	r6, [r0, #12]
 8004f0c:	b13c      	cbz	r4, 8004f1e <_Bfree+0x3a>
 8004f0e:	69eb      	ldr	r3, [r5, #28]
 8004f10:	6862      	ldr	r2, [r4, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f18:	6021      	str	r1, [r4, #0]
 8004f1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
 8004f20:	0800618f 	.word	0x0800618f
 8004f24:	0800620f 	.word	0x0800620f

08004f28 <__multadd>:
 8004f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2c:	4607      	mov	r7, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	461e      	mov	r6, r3
 8004f32:	2000      	movs	r0, #0
 8004f34:	690d      	ldr	r5, [r1, #16]
 8004f36:	f101 0c14 	add.w	ip, r1, #20
 8004f3a:	f8dc 3000 	ldr.w	r3, [ip]
 8004f3e:	3001      	adds	r0, #1
 8004f40:	b299      	uxth	r1, r3
 8004f42:	fb02 6101 	mla	r1, r2, r1, r6
 8004f46:	0c1e      	lsrs	r6, r3, #16
 8004f48:	0c0b      	lsrs	r3, r1, #16
 8004f4a:	fb02 3306 	mla	r3, r2, r6, r3
 8004f4e:	b289      	uxth	r1, r1
 8004f50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004f54:	4285      	cmp	r5, r0
 8004f56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004f5a:	f84c 1b04 	str.w	r1, [ip], #4
 8004f5e:	dcec      	bgt.n	8004f3a <__multadd+0x12>
 8004f60:	b30e      	cbz	r6, 8004fa6 <__multadd+0x7e>
 8004f62:	68a3      	ldr	r3, [r4, #8]
 8004f64:	42ab      	cmp	r3, r5
 8004f66:	dc19      	bgt.n	8004f9c <__multadd+0x74>
 8004f68:	6861      	ldr	r1, [r4, #4]
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	3101      	adds	r1, #1
 8004f6e:	f7ff ff79 	bl	8004e64 <_Balloc>
 8004f72:	4680      	mov	r8, r0
 8004f74:	b928      	cbnz	r0, 8004f82 <__multadd+0x5a>
 8004f76:	4602      	mov	r2, r0
 8004f78:	21ba      	movs	r1, #186	@ 0xba
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004fac <__multadd+0x84>)
 8004f7c:	480c      	ldr	r0, [pc, #48]	@ (8004fb0 <__multadd+0x88>)
 8004f7e:	f000 fd23 	bl	80059c8 <__assert_func>
 8004f82:	6922      	ldr	r2, [r4, #16]
 8004f84:	f104 010c 	add.w	r1, r4, #12
 8004f88:	3202      	adds	r2, #2
 8004f8a:	0092      	lsls	r2, r2, #2
 8004f8c:	300c      	adds	r0, #12
 8004f8e:	f000 fd0d 	bl	80059ac <memcpy>
 8004f92:	4621      	mov	r1, r4
 8004f94:	4638      	mov	r0, r7
 8004f96:	f7ff ffa5 	bl	8004ee4 <_Bfree>
 8004f9a:	4644      	mov	r4, r8
 8004f9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004fa0:	3501      	adds	r5, #1
 8004fa2:	615e      	str	r6, [r3, #20]
 8004fa4:	6125      	str	r5, [r4, #16]
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fac:	080061fe 	.word	0x080061fe
 8004fb0:	0800620f 	.word	0x0800620f

08004fb4 <__hi0bits>:
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004fba:	bf3a      	itte	cc
 8004fbc:	0403      	lslcc	r3, r0, #16
 8004fbe:	2010      	movcc	r0, #16
 8004fc0:	2000      	movcs	r0, #0
 8004fc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fc6:	bf3c      	itt	cc
 8004fc8:	021b      	lslcc	r3, r3, #8
 8004fca:	3008      	addcc	r0, #8
 8004fcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fd0:	bf3c      	itt	cc
 8004fd2:	011b      	lslcc	r3, r3, #4
 8004fd4:	3004      	addcc	r0, #4
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fda:	bf3c      	itt	cc
 8004fdc:	009b      	lslcc	r3, r3, #2
 8004fde:	3002      	addcc	r0, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	db05      	blt.n	8004ff0 <__hi0bits+0x3c>
 8004fe4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004fe8:	f100 0001 	add.w	r0, r0, #1
 8004fec:	bf08      	it	eq
 8004fee:	2020      	moveq	r0, #32
 8004ff0:	4770      	bx	lr

08004ff2 <__lo0bits>:
 8004ff2:	6803      	ldr	r3, [r0, #0]
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	f013 0007 	ands.w	r0, r3, #7
 8004ffa:	d00b      	beq.n	8005014 <__lo0bits+0x22>
 8004ffc:	07d9      	lsls	r1, r3, #31
 8004ffe:	d421      	bmi.n	8005044 <__lo0bits+0x52>
 8005000:	0798      	lsls	r0, r3, #30
 8005002:	bf49      	itett	mi
 8005004:	085b      	lsrmi	r3, r3, #1
 8005006:	089b      	lsrpl	r3, r3, #2
 8005008:	2001      	movmi	r0, #1
 800500a:	6013      	strmi	r3, [r2, #0]
 800500c:	bf5c      	itt	pl
 800500e:	2002      	movpl	r0, #2
 8005010:	6013      	strpl	r3, [r2, #0]
 8005012:	4770      	bx	lr
 8005014:	b299      	uxth	r1, r3
 8005016:	b909      	cbnz	r1, 800501c <__lo0bits+0x2a>
 8005018:	2010      	movs	r0, #16
 800501a:	0c1b      	lsrs	r3, r3, #16
 800501c:	b2d9      	uxtb	r1, r3
 800501e:	b909      	cbnz	r1, 8005024 <__lo0bits+0x32>
 8005020:	3008      	adds	r0, #8
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	0719      	lsls	r1, r3, #28
 8005026:	bf04      	itt	eq
 8005028:	091b      	lsreq	r3, r3, #4
 800502a:	3004      	addeq	r0, #4
 800502c:	0799      	lsls	r1, r3, #30
 800502e:	bf04      	itt	eq
 8005030:	089b      	lsreq	r3, r3, #2
 8005032:	3002      	addeq	r0, #2
 8005034:	07d9      	lsls	r1, r3, #31
 8005036:	d403      	bmi.n	8005040 <__lo0bits+0x4e>
 8005038:	085b      	lsrs	r3, r3, #1
 800503a:	f100 0001 	add.w	r0, r0, #1
 800503e:	d003      	beq.n	8005048 <__lo0bits+0x56>
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	4770      	bx	lr
 8005044:	2000      	movs	r0, #0
 8005046:	4770      	bx	lr
 8005048:	2020      	movs	r0, #32
 800504a:	4770      	bx	lr

0800504c <__i2b>:
 800504c:	b510      	push	{r4, lr}
 800504e:	460c      	mov	r4, r1
 8005050:	2101      	movs	r1, #1
 8005052:	f7ff ff07 	bl	8004e64 <_Balloc>
 8005056:	4602      	mov	r2, r0
 8005058:	b928      	cbnz	r0, 8005066 <__i2b+0x1a>
 800505a:	f240 1145 	movw	r1, #325	@ 0x145
 800505e:	4b04      	ldr	r3, [pc, #16]	@ (8005070 <__i2b+0x24>)
 8005060:	4804      	ldr	r0, [pc, #16]	@ (8005074 <__i2b+0x28>)
 8005062:	f000 fcb1 	bl	80059c8 <__assert_func>
 8005066:	2301      	movs	r3, #1
 8005068:	6144      	str	r4, [r0, #20]
 800506a:	6103      	str	r3, [r0, #16]
 800506c:	bd10      	pop	{r4, pc}
 800506e:	bf00      	nop
 8005070:	080061fe 	.word	0x080061fe
 8005074:	0800620f 	.word	0x0800620f

08005078 <__multiply>:
 8005078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507c:	4617      	mov	r7, r2
 800507e:	690a      	ldr	r2, [r1, #16]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4689      	mov	r9, r1
 8005084:	429a      	cmp	r2, r3
 8005086:	bfa2      	ittt	ge
 8005088:	463b      	movge	r3, r7
 800508a:	460f      	movge	r7, r1
 800508c:	4699      	movge	r9, r3
 800508e:	693d      	ldr	r5, [r7, #16]
 8005090:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	eb05 060a 	add.w	r6, r5, sl
 800509c:	42b3      	cmp	r3, r6
 800509e:	b085      	sub	sp, #20
 80050a0:	bfb8      	it	lt
 80050a2:	3101      	addlt	r1, #1
 80050a4:	f7ff fede 	bl	8004e64 <_Balloc>
 80050a8:	b930      	cbnz	r0, 80050b8 <__multiply+0x40>
 80050aa:	4602      	mov	r2, r0
 80050ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80050b0:	4b40      	ldr	r3, [pc, #256]	@ (80051b4 <__multiply+0x13c>)
 80050b2:	4841      	ldr	r0, [pc, #260]	@ (80051b8 <__multiply+0x140>)
 80050b4:	f000 fc88 	bl	80059c8 <__assert_func>
 80050b8:	f100 0414 	add.w	r4, r0, #20
 80050bc:	4623      	mov	r3, r4
 80050be:	2200      	movs	r2, #0
 80050c0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80050c4:	4573      	cmp	r3, lr
 80050c6:	d320      	bcc.n	800510a <__multiply+0x92>
 80050c8:	f107 0814 	add.w	r8, r7, #20
 80050cc:	f109 0114 	add.w	r1, r9, #20
 80050d0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80050d4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80050d8:	9302      	str	r3, [sp, #8]
 80050da:	1beb      	subs	r3, r5, r7
 80050dc:	3b15      	subs	r3, #21
 80050de:	f023 0303 	bic.w	r3, r3, #3
 80050e2:	3304      	adds	r3, #4
 80050e4:	3715      	adds	r7, #21
 80050e6:	42bd      	cmp	r5, r7
 80050e8:	bf38      	it	cc
 80050ea:	2304      	movcc	r3, #4
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	9b02      	ldr	r3, [sp, #8]
 80050f0:	9103      	str	r1, [sp, #12]
 80050f2:	428b      	cmp	r3, r1
 80050f4:	d80c      	bhi.n	8005110 <__multiply+0x98>
 80050f6:	2e00      	cmp	r6, #0
 80050f8:	dd03      	ble.n	8005102 <__multiply+0x8a>
 80050fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d055      	beq.n	80051ae <__multiply+0x136>
 8005102:	6106      	str	r6, [r0, #16]
 8005104:	b005      	add	sp, #20
 8005106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510a:	f843 2b04 	str.w	r2, [r3], #4
 800510e:	e7d9      	b.n	80050c4 <__multiply+0x4c>
 8005110:	f8b1 a000 	ldrh.w	sl, [r1]
 8005114:	f1ba 0f00 	cmp.w	sl, #0
 8005118:	d01f      	beq.n	800515a <__multiply+0xe2>
 800511a:	46c4      	mov	ip, r8
 800511c:	46a1      	mov	r9, r4
 800511e:	2700      	movs	r7, #0
 8005120:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005124:	f8d9 3000 	ldr.w	r3, [r9]
 8005128:	fa1f fb82 	uxth.w	fp, r2
 800512c:	b29b      	uxth	r3, r3
 800512e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005132:	443b      	add	r3, r7
 8005134:	f8d9 7000 	ldr.w	r7, [r9]
 8005138:	0c12      	lsrs	r2, r2, #16
 800513a:	0c3f      	lsrs	r7, r7, #16
 800513c:	fb0a 7202 	mla	r2, sl, r2, r7
 8005140:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005144:	b29b      	uxth	r3, r3
 8005146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800514a:	4565      	cmp	r5, ip
 800514c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005150:	f849 3b04 	str.w	r3, [r9], #4
 8005154:	d8e4      	bhi.n	8005120 <__multiply+0xa8>
 8005156:	9b01      	ldr	r3, [sp, #4]
 8005158:	50e7      	str	r7, [r4, r3]
 800515a:	9b03      	ldr	r3, [sp, #12]
 800515c:	3104      	adds	r1, #4
 800515e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005162:	f1b9 0f00 	cmp.w	r9, #0
 8005166:	d020      	beq.n	80051aa <__multiply+0x132>
 8005168:	4647      	mov	r7, r8
 800516a:	46a4      	mov	ip, r4
 800516c:	f04f 0a00 	mov.w	sl, #0
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	f8b7 b000 	ldrh.w	fp, [r7]
 8005176:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800517a:	b29b      	uxth	r3, r3
 800517c:	fb09 220b 	mla	r2, r9, fp, r2
 8005180:	4452      	add	r2, sl
 8005182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005186:	f84c 3b04 	str.w	r3, [ip], #4
 800518a:	f857 3b04 	ldr.w	r3, [r7], #4
 800518e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005192:	f8bc 3000 	ldrh.w	r3, [ip]
 8005196:	42bd      	cmp	r5, r7
 8005198:	fb09 330a 	mla	r3, r9, sl, r3
 800519c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80051a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80051a4:	d8e5      	bhi.n	8005172 <__multiply+0xfa>
 80051a6:	9a01      	ldr	r2, [sp, #4]
 80051a8:	50a3      	str	r3, [r4, r2]
 80051aa:	3404      	adds	r4, #4
 80051ac:	e79f      	b.n	80050ee <__multiply+0x76>
 80051ae:	3e01      	subs	r6, #1
 80051b0:	e7a1      	b.n	80050f6 <__multiply+0x7e>
 80051b2:	bf00      	nop
 80051b4:	080061fe 	.word	0x080061fe
 80051b8:	0800620f 	.word	0x0800620f

080051bc <__pow5mult>:
 80051bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051c0:	4615      	mov	r5, r2
 80051c2:	f012 0203 	ands.w	r2, r2, #3
 80051c6:	4607      	mov	r7, r0
 80051c8:	460e      	mov	r6, r1
 80051ca:	d007      	beq.n	80051dc <__pow5mult+0x20>
 80051cc:	4c25      	ldr	r4, [pc, #148]	@ (8005264 <__pow5mult+0xa8>)
 80051ce:	3a01      	subs	r2, #1
 80051d0:	2300      	movs	r3, #0
 80051d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80051d6:	f7ff fea7 	bl	8004f28 <__multadd>
 80051da:	4606      	mov	r6, r0
 80051dc:	10ad      	asrs	r5, r5, #2
 80051de:	d03d      	beq.n	800525c <__pow5mult+0xa0>
 80051e0:	69fc      	ldr	r4, [r7, #28]
 80051e2:	b97c      	cbnz	r4, 8005204 <__pow5mult+0x48>
 80051e4:	2010      	movs	r0, #16
 80051e6:	f7ff fd87 	bl	8004cf8 <malloc>
 80051ea:	4602      	mov	r2, r0
 80051ec:	61f8      	str	r0, [r7, #28]
 80051ee:	b928      	cbnz	r0, 80051fc <__pow5mult+0x40>
 80051f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80051f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005268 <__pow5mult+0xac>)
 80051f6:	481d      	ldr	r0, [pc, #116]	@ (800526c <__pow5mult+0xb0>)
 80051f8:	f000 fbe6 	bl	80059c8 <__assert_func>
 80051fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005200:	6004      	str	r4, [r0, #0]
 8005202:	60c4      	str	r4, [r0, #12]
 8005204:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005208:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800520c:	b94c      	cbnz	r4, 8005222 <__pow5mult+0x66>
 800520e:	f240 2171 	movw	r1, #625	@ 0x271
 8005212:	4638      	mov	r0, r7
 8005214:	f7ff ff1a 	bl	800504c <__i2b>
 8005218:	2300      	movs	r3, #0
 800521a:	4604      	mov	r4, r0
 800521c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005220:	6003      	str	r3, [r0, #0]
 8005222:	f04f 0900 	mov.w	r9, #0
 8005226:	07eb      	lsls	r3, r5, #31
 8005228:	d50a      	bpl.n	8005240 <__pow5mult+0x84>
 800522a:	4631      	mov	r1, r6
 800522c:	4622      	mov	r2, r4
 800522e:	4638      	mov	r0, r7
 8005230:	f7ff ff22 	bl	8005078 <__multiply>
 8005234:	4680      	mov	r8, r0
 8005236:	4631      	mov	r1, r6
 8005238:	4638      	mov	r0, r7
 800523a:	f7ff fe53 	bl	8004ee4 <_Bfree>
 800523e:	4646      	mov	r6, r8
 8005240:	106d      	asrs	r5, r5, #1
 8005242:	d00b      	beq.n	800525c <__pow5mult+0xa0>
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	b938      	cbnz	r0, 8005258 <__pow5mult+0x9c>
 8005248:	4622      	mov	r2, r4
 800524a:	4621      	mov	r1, r4
 800524c:	4638      	mov	r0, r7
 800524e:	f7ff ff13 	bl	8005078 <__multiply>
 8005252:	6020      	str	r0, [r4, #0]
 8005254:	f8c0 9000 	str.w	r9, [r0]
 8005258:	4604      	mov	r4, r0
 800525a:	e7e4      	b.n	8005226 <__pow5mult+0x6a>
 800525c:	4630      	mov	r0, r6
 800525e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005262:	bf00      	nop
 8005264:	080062c0 	.word	0x080062c0
 8005268:	0800618f 	.word	0x0800618f
 800526c:	0800620f 	.word	0x0800620f

08005270 <__lshift>:
 8005270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005274:	460c      	mov	r4, r1
 8005276:	4607      	mov	r7, r0
 8005278:	4691      	mov	r9, r2
 800527a:	6923      	ldr	r3, [r4, #16]
 800527c:	6849      	ldr	r1, [r1, #4]
 800527e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005282:	68a3      	ldr	r3, [r4, #8]
 8005284:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005288:	f108 0601 	add.w	r6, r8, #1
 800528c:	42b3      	cmp	r3, r6
 800528e:	db0b      	blt.n	80052a8 <__lshift+0x38>
 8005290:	4638      	mov	r0, r7
 8005292:	f7ff fde7 	bl	8004e64 <_Balloc>
 8005296:	4605      	mov	r5, r0
 8005298:	b948      	cbnz	r0, 80052ae <__lshift+0x3e>
 800529a:	4602      	mov	r2, r0
 800529c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80052a0:	4b27      	ldr	r3, [pc, #156]	@ (8005340 <__lshift+0xd0>)
 80052a2:	4828      	ldr	r0, [pc, #160]	@ (8005344 <__lshift+0xd4>)
 80052a4:	f000 fb90 	bl	80059c8 <__assert_func>
 80052a8:	3101      	adds	r1, #1
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	e7ee      	b.n	800528c <__lshift+0x1c>
 80052ae:	2300      	movs	r3, #0
 80052b0:	f100 0114 	add.w	r1, r0, #20
 80052b4:	f100 0210 	add.w	r2, r0, #16
 80052b8:	4618      	mov	r0, r3
 80052ba:	4553      	cmp	r3, sl
 80052bc:	db33      	blt.n	8005326 <__lshift+0xb6>
 80052be:	6920      	ldr	r0, [r4, #16]
 80052c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80052c4:	f104 0314 	add.w	r3, r4, #20
 80052c8:	f019 091f 	ands.w	r9, r9, #31
 80052cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80052d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80052d4:	d02b      	beq.n	800532e <__lshift+0xbe>
 80052d6:	468a      	mov	sl, r1
 80052d8:	2200      	movs	r2, #0
 80052da:	f1c9 0e20 	rsb	lr, r9, #32
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	fa00 f009 	lsl.w	r0, r0, r9
 80052e4:	4310      	orrs	r0, r2
 80052e6:	f84a 0b04 	str.w	r0, [sl], #4
 80052ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80052ee:	459c      	cmp	ip, r3
 80052f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80052f4:	d8f3      	bhi.n	80052de <__lshift+0x6e>
 80052f6:	ebac 0304 	sub.w	r3, ip, r4
 80052fa:	3b15      	subs	r3, #21
 80052fc:	f023 0303 	bic.w	r3, r3, #3
 8005300:	3304      	adds	r3, #4
 8005302:	f104 0015 	add.w	r0, r4, #21
 8005306:	4560      	cmp	r0, ip
 8005308:	bf88      	it	hi
 800530a:	2304      	movhi	r3, #4
 800530c:	50ca      	str	r2, [r1, r3]
 800530e:	b10a      	cbz	r2, 8005314 <__lshift+0xa4>
 8005310:	f108 0602 	add.w	r6, r8, #2
 8005314:	3e01      	subs	r6, #1
 8005316:	4638      	mov	r0, r7
 8005318:	4621      	mov	r1, r4
 800531a:	612e      	str	r6, [r5, #16]
 800531c:	f7ff fde2 	bl	8004ee4 <_Bfree>
 8005320:	4628      	mov	r0, r5
 8005322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005326:	f842 0f04 	str.w	r0, [r2, #4]!
 800532a:	3301      	adds	r3, #1
 800532c:	e7c5      	b.n	80052ba <__lshift+0x4a>
 800532e:	3904      	subs	r1, #4
 8005330:	f853 2b04 	ldr.w	r2, [r3], #4
 8005334:	459c      	cmp	ip, r3
 8005336:	f841 2f04 	str.w	r2, [r1, #4]!
 800533a:	d8f9      	bhi.n	8005330 <__lshift+0xc0>
 800533c:	e7ea      	b.n	8005314 <__lshift+0xa4>
 800533e:	bf00      	nop
 8005340:	080061fe 	.word	0x080061fe
 8005344:	0800620f 	.word	0x0800620f

08005348 <__mcmp>:
 8005348:	4603      	mov	r3, r0
 800534a:	690a      	ldr	r2, [r1, #16]
 800534c:	6900      	ldr	r0, [r0, #16]
 800534e:	b530      	push	{r4, r5, lr}
 8005350:	1a80      	subs	r0, r0, r2
 8005352:	d10e      	bne.n	8005372 <__mcmp+0x2a>
 8005354:	3314      	adds	r3, #20
 8005356:	3114      	adds	r1, #20
 8005358:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800535c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005360:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005364:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005368:	4295      	cmp	r5, r2
 800536a:	d003      	beq.n	8005374 <__mcmp+0x2c>
 800536c:	d205      	bcs.n	800537a <__mcmp+0x32>
 800536e:	f04f 30ff 	mov.w	r0, #4294967295
 8005372:	bd30      	pop	{r4, r5, pc}
 8005374:	42a3      	cmp	r3, r4
 8005376:	d3f3      	bcc.n	8005360 <__mcmp+0x18>
 8005378:	e7fb      	b.n	8005372 <__mcmp+0x2a>
 800537a:	2001      	movs	r0, #1
 800537c:	e7f9      	b.n	8005372 <__mcmp+0x2a>
	...

08005380 <__mdiff>:
 8005380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005384:	4689      	mov	r9, r1
 8005386:	4606      	mov	r6, r0
 8005388:	4611      	mov	r1, r2
 800538a:	4648      	mov	r0, r9
 800538c:	4614      	mov	r4, r2
 800538e:	f7ff ffdb 	bl	8005348 <__mcmp>
 8005392:	1e05      	subs	r5, r0, #0
 8005394:	d112      	bne.n	80053bc <__mdiff+0x3c>
 8005396:	4629      	mov	r1, r5
 8005398:	4630      	mov	r0, r6
 800539a:	f7ff fd63 	bl	8004e64 <_Balloc>
 800539e:	4602      	mov	r2, r0
 80053a0:	b928      	cbnz	r0, 80053ae <__mdiff+0x2e>
 80053a2:	f240 2137 	movw	r1, #567	@ 0x237
 80053a6:	4b3e      	ldr	r3, [pc, #248]	@ (80054a0 <__mdiff+0x120>)
 80053a8:	483e      	ldr	r0, [pc, #248]	@ (80054a4 <__mdiff+0x124>)
 80053aa:	f000 fb0d 	bl	80059c8 <__assert_func>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80053b4:	4610      	mov	r0, r2
 80053b6:	b003      	add	sp, #12
 80053b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053bc:	bfbc      	itt	lt
 80053be:	464b      	movlt	r3, r9
 80053c0:	46a1      	movlt	r9, r4
 80053c2:	4630      	mov	r0, r6
 80053c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80053c8:	bfba      	itte	lt
 80053ca:	461c      	movlt	r4, r3
 80053cc:	2501      	movlt	r5, #1
 80053ce:	2500      	movge	r5, #0
 80053d0:	f7ff fd48 	bl	8004e64 <_Balloc>
 80053d4:	4602      	mov	r2, r0
 80053d6:	b918      	cbnz	r0, 80053e0 <__mdiff+0x60>
 80053d8:	f240 2145 	movw	r1, #581	@ 0x245
 80053dc:	4b30      	ldr	r3, [pc, #192]	@ (80054a0 <__mdiff+0x120>)
 80053de:	e7e3      	b.n	80053a8 <__mdiff+0x28>
 80053e0:	f100 0b14 	add.w	fp, r0, #20
 80053e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80053e8:	f109 0310 	add.w	r3, r9, #16
 80053ec:	60c5      	str	r5, [r0, #12]
 80053ee:	f04f 0c00 	mov.w	ip, #0
 80053f2:	f109 0514 	add.w	r5, r9, #20
 80053f6:	46d9      	mov	r9, fp
 80053f8:	6926      	ldr	r6, [r4, #16]
 80053fa:	f104 0e14 	add.w	lr, r4, #20
 80053fe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005402:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	9b01      	ldr	r3, [sp, #4]
 800540a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800540e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005412:	b281      	uxth	r1, r0
 8005414:	9301      	str	r3, [sp, #4]
 8005416:	fa1f f38a 	uxth.w	r3, sl
 800541a:	1a5b      	subs	r3, r3, r1
 800541c:	0c00      	lsrs	r0, r0, #16
 800541e:	4463      	add	r3, ip
 8005420:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005424:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005428:	b29b      	uxth	r3, r3
 800542a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800542e:	4576      	cmp	r6, lr
 8005430:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005434:	f849 3b04 	str.w	r3, [r9], #4
 8005438:	d8e6      	bhi.n	8005408 <__mdiff+0x88>
 800543a:	1b33      	subs	r3, r6, r4
 800543c:	3b15      	subs	r3, #21
 800543e:	f023 0303 	bic.w	r3, r3, #3
 8005442:	3415      	adds	r4, #21
 8005444:	3304      	adds	r3, #4
 8005446:	42a6      	cmp	r6, r4
 8005448:	bf38      	it	cc
 800544a:	2304      	movcc	r3, #4
 800544c:	441d      	add	r5, r3
 800544e:	445b      	add	r3, fp
 8005450:	461e      	mov	r6, r3
 8005452:	462c      	mov	r4, r5
 8005454:	4544      	cmp	r4, r8
 8005456:	d30e      	bcc.n	8005476 <__mdiff+0xf6>
 8005458:	f108 0103 	add.w	r1, r8, #3
 800545c:	1b49      	subs	r1, r1, r5
 800545e:	f021 0103 	bic.w	r1, r1, #3
 8005462:	3d03      	subs	r5, #3
 8005464:	45a8      	cmp	r8, r5
 8005466:	bf38      	it	cc
 8005468:	2100      	movcc	r1, #0
 800546a:	440b      	add	r3, r1
 800546c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005470:	b199      	cbz	r1, 800549a <__mdiff+0x11a>
 8005472:	6117      	str	r7, [r2, #16]
 8005474:	e79e      	b.n	80053b4 <__mdiff+0x34>
 8005476:	46e6      	mov	lr, ip
 8005478:	f854 1b04 	ldr.w	r1, [r4], #4
 800547c:	fa1f fc81 	uxth.w	ip, r1
 8005480:	44f4      	add	ip, lr
 8005482:	0c08      	lsrs	r0, r1, #16
 8005484:	4471      	add	r1, lr
 8005486:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800548a:	b289      	uxth	r1, r1
 800548c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005490:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005494:	f846 1b04 	str.w	r1, [r6], #4
 8005498:	e7dc      	b.n	8005454 <__mdiff+0xd4>
 800549a:	3f01      	subs	r7, #1
 800549c:	e7e6      	b.n	800546c <__mdiff+0xec>
 800549e:	bf00      	nop
 80054a0:	080061fe 	.word	0x080061fe
 80054a4:	0800620f 	.word	0x0800620f

080054a8 <__d2b>:
 80054a8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80054ac:	2101      	movs	r1, #1
 80054ae:	4690      	mov	r8, r2
 80054b0:	4699      	mov	r9, r3
 80054b2:	9e08      	ldr	r6, [sp, #32]
 80054b4:	f7ff fcd6 	bl	8004e64 <_Balloc>
 80054b8:	4604      	mov	r4, r0
 80054ba:	b930      	cbnz	r0, 80054ca <__d2b+0x22>
 80054bc:	4602      	mov	r2, r0
 80054be:	f240 310f 	movw	r1, #783	@ 0x30f
 80054c2:	4b23      	ldr	r3, [pc, #140]	@ (8005550 <__d2b+0xa8>)
 80054c4:	4823      	ldr	r0, [pc, #140]	@ (8005554 <__d2b+0xac>)
 80054c6:	f000 fa7f 	bl	80059c8 <__assert_func>
 80054ca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80054ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054d2:	b10d      	cbz	r5, 80054d8 <__d2b+0x30>
 80054d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	f1b8 0300 	subs.w	r3, r8, #0
 80054de:	d024      	beq.n	800552a <__d2b+0x82>
 80054e0:	4668      	mov	r0, sp
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	f7ff fd85 	bl	8004ff2 <__lo0bits>
 80054e8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80054ec:	b1d8      	cbz	r0, 8005526 <__d2b+0x7e>
 80054ee:	f1c0 0320 	rsb	r3, r0, #32
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	430b      	orrs	r3, r1
 80054f8:	40c2      	lsrs	r2, r0
 80054fa:	6163      	str	r3, [r4, #20]
 80054fc:	9201      	str	r2, [sp, #4]
 80054fe:	9b01      	ldr	r3, [sp, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	bf0c      	ite	eq
 8005504:	2201      	moveq	r2, #1
 8005506:	2202      	movne	r2, #2
 8005508:	61a3      	str	r3, [r4, #24]
 800550a:	6122      	str	r2, [r4, #16]
 800550c:	b1ad      	cbz	r5, 800553a <__d2b+0x92>
 800550e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005512:	4405      	add	r5, r0
 8005514:	6035      	str	r5, [r6, #0]
 8005516:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800551a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800551c:	6018      	str	r0, [r3, #0]
 800551e:	4620      	mov	r0, r4
 8005520:	b002      	add	sp, #8
 8005522:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005526:	6161      	str	r1, [r4, #20]
 8005528:	e7e9      	b.n	80054fe <__d2b+0x56>
 800552a:	a801      	add	r0, sp, #4
 800552c:	f7ff fd61 	bl	8004ff2 <__lo0bits>
 8005530:	9b01      	ldr	r3, [sp, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	6163      	str	r3, [r4, #20]
 8005536:	3020      	adds	r0, #32
 8005538:	e7e7      	b.n	800550a <__d2b+0x62>
 800553a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800553e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005542:	6030      	str	r0, [r6, #0]
 8005544:	6918      	ldr	r0, [r3, #16]
 8005546:	f7ff fd35 	bl	8004fb4 <__hi0bits>
 800554a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800554e:	e7e4      	b.n	800551a <__d2b+0x72>
 8005550:	080061fe 	.word	0x080061fe
 8005554:	0800620f 	.word	0x0800620f

08005558 <__ssputs_r>:
 8005558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800555c:	461f      	mov	r7, r3
 800555e:	688e      	ldr	r6, [r1, #8]
 8005560:	4682      	mov	sl, r0
 8005562:	42be      	cmp	r6, r7
 8005564:	460c      	mov	r4, r1
 8005566:	4690      	mov	r8, r2
 8005568:	680b      	ldr	r3, [r1, #0]
 800556a:	d82d      	bhi.n	80055c8 <__ssputs_r+0x70>
 800556c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005570:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005574:	d026      	beq.n	80055c4 <__ssputs_r+0x6c>
 8005576:	6965      	ldr	r5, [r4, #20]
 8005578:	6909      	ldr	r1, [r1, #16]
 800557a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800557e:	eba3 0901 	sub.w	r9, r3, r1
 8005582:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005586:	1c7b      	adds	r3, r7, #1
 8005588:	444b      	add	r3, r9
 800558a:	106d      	asrs	r5, r5, #1
 800558c:	429d      	cmp	r5, r3
 800558e:	bf38      	it	cc
 8005590:	461d      	movcc	r5, r3
 8005592:	0553      	lsls	r3, r2, #21
 8005594:	d527      	bpl.n	80055e6 <__ssputs_r+0x8e>
 8005596:	4629      	mov	r1, r5
 8005598:	f7ff fbd8 	bl	8004d4c <_malloc_r>
 800559c:	4606      	mov	r6, r0
 800559e:	b360      	cbz	r0, 80055fa <__ssputs_r+0xa2>
 80055a0:	464a      	mov	r2, r9
 80055a2:	6921      	ldr	r1, [r4, #16]
 80055a4:	f000 fa02 	bl	80059ac <memcpy>
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80055ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055b2:	81a3      	strh	r3, [r4, #12]
 80055b4:	6126      	str	r6, [r4, #16]
 80055b6:	444e      	add	r6, r9
 80055b8:	6026      	str	r6, [r4, #0]
 80055ba:	463e      	mov	r6, r7
 80055bc:	6165      	str	r5, [r4, #20]
 80055be:	eba5 0509 	sub.w	r5, r5, r9
 80055c2:	60a5      	str	r5, [r4, #8]
 80055c4:	42be      	cmp	r6, r7
 80055c6:	d900      	bls.n	80055ca <__ssputs_r+0x72>
 80055c8:	463e      	mov	r6, r7
 80055ca:	4632      	mov	r2, r6
 80055cc:	4641      	mov	r1, r8
 80055ce:	6820      	ldr	r0, [r4, #0]
 80055d0:	f000 f9c2 	bl	8005958 <memmove>
 80055d4:	2000      	movs	r0, #0
 80055d6:	68a3      	ldr	r3, [r4, #8]
 80055d8:	1b9b      	subs	r3, r3, r6
 80055da:	60a3      	str	r3, [r4, #8]
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	4433      	add	r3, r6
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e6:	462a      	mov	r2, r5
 80055e8:	f000 fa32 	bl	8005a50 <_realloc_r>
 80055ec:	4606      	mov	r6, r0
 80055ee:	2800      	cmp	r0, #0
 80055f0:	d1e0      	bne.n	80055b4 <__ssputs_r+0x5c>
 80055f2:	4650      	mov	r0, sl
 80055f4:	6921      	ldr	r1, [r4, #16]
 80055f6:	f7ff fb37 	bl	8004c68 <_free_r>
 80055fa:	230c      	movs	r3, #12
 80055fc:	f8ca 3000 	str.w	r3, [sl]
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	f04f 30ff 	mov.w	r0, #4294967295
 8005606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800560a:	81a3      	strh	r3, [r4, #12]
 800560c:	e7e9      	b.n	80055e2 <__ssputs_r+0x8a>
	...

08005610 <_svfiprintf_r>:
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	4698      	mov	r8, r3
 8005616:	898b      	ldrh	r3, [r1, #12]
 8005618:	4607      	mov	r7, r0
 800561a:	061b      	lsls	r3, r3, #24
 800561c:	460d      	mov	r5, r1
 800561e:	4614      	mov	r4, r2
 8005620:	b09d      	sub	sp, #116	@ 0x74
 8005622:	d510      	bpl.n	8005646 <_svfiprintf_r+0x36>
 8005624:	690b      	ldr	r3, [r1, #16]
 8005626:	b973      	cbnz	r3, 8005646 <_svfiprintf_r+0x36>
 8005628:	2140      	movs	r1, #64	@ 0x40
 800562a:	f7ff fb8f 	bl	8004d4c <_malloc_r>
 800562e:	6028      	str	r0, [r5, #0]
 8005630:	6128      	str	r0, [r5, #16]
 8005632:	b930      	cbnz	r0, 8005642 <_svfiprintf_r+0x32>
 8005634:	230c      	movs	r3, #12
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	f04f 30ff 	mov.w	r0, #4294967295
 800563c:	b01d      	add	sp, #116	@ 0x74
 800563e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005642:	2340      	movs	r3, #64	@ 0x40
 8005644:	616b      	str	r3, [r5, #20]
 8005646:	2300      	movs	r3, #0
 8005648:	9309      	str	r3, [sp, #36]	@ 0x24
 800564a:	2320      	movs	r3, #32
 800564c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005650:	2330      	movs	r3, #48	@ 0x30
 8005652:	f04f 0901 	mov.w	r9, #1
 8005656:	f8cd 800c 	str.w	r8, [sp, #12]
 800565a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80057f4 <_svfiprintf_r+0x1e4>
 800565e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005662:	4623      	mov	r3, r4
 8005664:	469a      	mov	sl, r3
 8005666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800566a:	b10a      	cbz	r2, 8005670 <_svfiprintf_r+0x60>
 800566c:	2a25      	cmp	r2, #37	@ 0x25
 800566e:	d1f9      	bne.n	8005664 <_svfiprintf_r+0x54>
 8005670:	ebba 0b04 	subs.w	fp, sl, r4
 8005674:	d00b      	beq.n	800568e <_svfiprintf_r+0x7e>
 8005676:	465b      	mov	r3, fp
 8005678:	4622      	mov	r2, r4
 800567a:	4629      	mov	r1, r5
 800567c:	4638      	mov	r0, r7
 800567e:	f7ff ff6b 	bl	8005558 <__ssputs_r>
 8005682:	3001      	adds	r0, #1
 8005684:	f000 80a7 	beq.w	80057d6 <_svfiprintf_r+0x1c6>
 8005688:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800568a:	445a      	add	r2, fp
 800568c:	9209      	str	r2, [sp, #36]	@ 0x24
 800568e:	f89a 3000 	ldrb.w	r3, [sl]
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 809f 	beq.w	80057d6 <_svfiprintf_r+0x1c6>
 8005698:	2300      	movs	r3, #0
 800569a:	f04f 32ff 	mov.w	r2, #4294967295
 800569e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056a2:	f10a 0a01 	add.w	sl, sl, #1
 80056a6:	9304      	str	r3, [sp, #16]
 80056a8:	9307      	str	r3, [sp, #28]
 80056aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80056b0:	4654      	mov	r4, sl
 80056b2:	2205      	movs	r2, #5
 80056b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b8:	484e      	ldr	r0, [pc, #312]	@ (80057f4 <_svfiprintf_r+0x1e4>)
 80056ba:	f7fe fc68 	bl	8003f8e <memchr>
 80056be:	9a04      	ldr	r2, [sp, #16]
 80056c0:	b9d8      	cbnz	r0, 80056fa <_svfiprintf_r+0xea>
 80056c2:	06d0      	lsls	r0, r2, #27
 80056c4:	bf44      	itt	mi
 80056c6:	2320      	movmi	r3, #32
 80056c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056cc:	0711      	lsls	r1, r2, #28
 80056ce:	bf44      	itt	mi
 80056d0:	232b      	movmi	r3, #43	@ 0x2b
 80056d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056d6:	f89a 3000 	ldrb.w	r3, [sl]
 80056da:	2b2a      	cmp	r3, #42	@ 0x2a
 80056dc:	d015      	beq.n	800570a <_svfiprintf_r+0xfa>
 80056de:	4654      	mov	r4, sl
 80056e0:	2000      	movs	r0, #0
 80056e2:	f04f 0c0a 	mov.w	ip, #10
 80056e6:	9a07      	ldr	r2, [sp, #28]
 80056e8:	4621      	mov	r1, r4
 80056ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ee:	3b30      	subs	r3, #48	@ 0x30
 80056f0:	2b09      	cmp	r3, #9
 80056f2:	d94b      	bls.n	800578c <_svfiprintf_r+0x17c>
 80056f4:	b1b0      	cbz	r0, 8005724 <_svfiprintf_r+0x114>
 80056f6:	9207      	str	r2, [sp, #28]
 80056f8:	e014      	b.n	8005724 <_svfiprintf_r+0x114>
 80056fa:	eba0 0308 	sub.w	r3, r0, r8
 80056fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005702:	4313      	orrs	r3, r2
 8005704:	46a2      	mov	sl, r4
 8005706:	9304      	str	r3, [sp, #16]
 8005708:	e7d2      	b.n	80056b0 <_svfiprintf_r+0xa0>
 800570a:	9b03      	ldr	r3, [sp, #12]
 800570c:	1d19      	adds	r1, r3, #4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	9103      	str	r1, [sp, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	bfbb      	ittet	lt
 8005716:	425b      	neglt	r3, r3
 8005718:	f042 0202 	orrlt.w	r2, r2, #2
 800571c:	9307      	strge	r3, [sp, #28]
 800571e:	9307      	strlt	r3, [sp, #28]
 8005720:	bfb8      	it	lt
 8005722:	9204      	strlt	r2, [sp, #16]
 8005724:	7823      	ldrb	r3, [r4, #0]
 8005726:	2b2e      	cmp	r3, #46	@ 0x2e
 8005728:	d10a      	bne.n	8005740 <_svfiprintf_r+0x130>
 800572a:	7863      	ldrb	r3, [r4, #1]
 800572c:	2b2a      	cmp	r3, #42	@ 0x2a
 800572e:	d132      	bne.n	8005796 <_svfiprintf_r+0x186>
 8005730:	9b03      	ldr	r3, [sp, #12]
 8005732:	3402      	adds	r4, #2
 8005734:	1d1a      	adds	r2, r3, #4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	9203      	str	r2, [sp, #12]
 800573a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800573e:	9305      	str	r3, [sp, #20]
 8005740:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80057f8 <_svfiprintf_r+0x1e8>
 8005744:	2203      	movs	r2, #3
 8005746:	4650      	mov	r0, sl
 8005748:	7821      	ldrb	r1, [r4, #0]
 800574a:	f7fe fc20 	bl	8003f8e <memchr>
 800574e:	b138      	cbz	r0, 8005760 <_svfiprintf_r+0x150>
 8005750:	2240      	movs	r2, #64	@ 0x40
 8005752:	9b04      	ldr	r3, [sp, #16]
 8005754:	eba0 000a 	sub.w	r0, r0, sl
 8005758:	4082      	lsls	r2, r0
 800575a:	4313      	orrs	r3, r2
 800575c:	3401      	adds	r4, #1
 800575e:	9304      	str	r3, [sp, #16]
 8005760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005764:	2206      	movs	r2, #6
 8005766:	4825      	ldr	r0, [pc, #148]	@ (80057fc <_svfiprintf_r+0x1ec>)
 8005768:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800576c:	f7fe fc0f 	bl	8003f8e <memchr>
 8005770:	2800      	cmp	r0, #0
 8005772:	d036      	beq.n	80057e2 <_svfiprintf_r+0x1d2>
 8005774:	4b22      	ldr	r3, [pc, #136]	@ (8005800 <_svfiprintf_r+0x1f0>)
 8005776:	bb1b      	cbnz	r3, 80057c0 <_svfiprintf_r+0x1b0>
 8005778:	9b03      	ldr	r3, [sp, #12]
 800577a:	3307      	adds	r3, #7
 800577c:	f023 0307 	bic.w	r3, r3, #7
 8005780:	3308      	adds	r3, #8
 8005782:	9303      	str	r3, [sp, #12]
 8005784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005786:	4433      	add	r3, r6
 8005788:	9309      	str	r3, [sp, #36]	@ 0x24
 800578a:	e76a      	b.n	8005662 <_svfiprintf_r+0x52>
 800578c:	460c      	mov	r4, r1
 800578e:	2001      	movs	r0, #1
 8005790:	fb0c 3202 	mla	r2, ip, r2, r3
 8005794:	e7a8      	b.n	80056e8 <_svfiprintf_r+0xd8>
 8005796:	2300      	movs	r3, #0
 8005798:	f04f 0c0a 	mov.w	ip, #10
 800579c:	4619      	mov	r1, r3
 800579e:	3401      	adds	r4, #1
 80057a0:	9305      	str	r3, [sp, #20]
 80057a2:	4620      	mov	r0, r4
 80057a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057a8:	3a30      	subs	r2, #48	@ 0x30
 80057aa:	2a09      	cmp	r2, #9
 80057ac:	d903      	bls.n	80057b6 <_svfiprintf_r+0x1a6>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0c6      	beq.n	8005740 <_svfiprintf_r+0x130>
 80057b2:	9105      	str	r1, [sp, #20]
 80057b4:	e7c4      	b.n	8005740 <_svfiprintf_r+0x130>
 80057b6:	4604      	mov	r4, r0
 80057b8:	2301      	movs	r3, #1
 80057ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80057be:	e7f0      	b.n	80057a2 <_svfiprintf_r+0x192>
 80057c0:	ab03      	add	r3, sp, #12
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	462a      	mov	r2, r5
 80057c6:	4638      	mov	r0, r7
 80057c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005804 <_svfiprintf_r+0x1f4>)
 80057ca:	a904      	add	r1, sp, #16
 80057cc:	f7fd fe68 	bl	80034a0 <_printf_float>
 80057d0:	1c42      	adds	r2, r0, #1
 80057d2:	4606      	mov	r6, r0
 80057d4:	d1d6      	bne.n	8005784 <_svfiprintf_r+0x174>
 80057d6:	89ab      	ldrh	r3, [r5, #12]
 80057d8:	065b      	lsls	r3, r3, #25
 80057da:	f53f af2d 	bmi.w	8005638 <_svfiprintf_r+0x28>
 80057de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057e0:	e72c      	b.n	800563c <_svfiprintf_r+0x2c>
 80057e2:	ab03      	add	r3, sp, #12
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	462a      	mov	r2, r5
 80057e8:	4638      	mov	r0, r7
 80057ea:	4b06      	ldr	r3, [pc, #24]	@ (8005804 <_svfiprintf_r+0x1f4>)
 80057ec:	a904      	add	r1, sp, #16
 80057ee:	f7fe f8f5 	bl	80039dc <_printf_i>
 80057f2:	e7ed      	b.n	80057d0 <_svfiprintf_r+0x1c0>
 80057f4:	08006268 	.word	0x08006268
 80057f8:	0800626e 	.word	0x0800626e
 80057fc:	08006272 	.word	0x08006272
 8005800:	080034a1 	.word	0x080034a1
 8005804:	08005559 	.word	0x08005559

08005808 <__sflush_r>:
 8005808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	0716      	lsls	r6, r2, #28
 8005810:	4605      	mov	r5, r0
 8005812:	460c      	mov	r4, r1
 8005814:	d454      	bmi.n	80058c0 <__sflush_r+0xb8>
 8005816:	684b      	ldr	r3, [r1, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	dc02      	bgt.n	8005822 <__sflush_r+0x1a>
 800581c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	dd48      	ble.n	80058b4 <__sflush_r+0xac>
 8005822:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005824:	2e00      	cmp	r6, #0
 8005826:	d045      	beq.n	80058b4 <__sflush_r+0xac>
 8005828:	2300      	movs	r3, #0
 800582a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800582e:	682f      	ldr	r7, [r5, #0]
 8005830:	6a21      	ldr	r1, [r4, #32]
 8005832:	602b      	str	r3, [r5, #0]
 8005834:	d030      	beq.n	8005898 <__sflush_r+0x90>
 8005836:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	0759      	lsls	r1, r3, #29
 800583c:	d505      	bpl.n	800584a <__sflush_r+0x42>
 800583e:	6863      	ldr	r3, [r4, #4]
 8005840:	1ad2      	subs	r2, r2, r3
 8005842:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005844:	b10b      	cbz	r3, 800584a <__sflush_r+0x42>
 8005846:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005848:	1ad2      	subs	r2, r2, r3
 800584a:	2300      	movs	r3, #0
 800584c:	4628      	mov	r0, r5
 800584e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005850:	6a21      	ldr	r1, [r4, #32]
 8005852:	47b0      	blx	r6
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	d106      	bne.n	8005868 <__sflush_r+0x60>
 800585a:	6829      	ldr	r1, [r5, #0]
 800585c:	291d      	cmp	r1, #29
 800585e:	d82b      	bhi.n	80058b8 <__sflush_r+0xb0>
 8005860:	4a28      	ldr	r2, [pc, #160]	@ (8005904 <__sflush_r+0xfc>)
 8005862:	40ca      	lsrs	r2, r1
 8005864:	07d6      	lsls	r6, r2, #31
 8005866:	d527      	bpl.n	80058b8 <__sflush_r+0xb0>
 8005868:	2200      	movs	r2, #0
 800586a:	6062      	str	r2, [r4, #4]
 800586c:	6922      	ldr	r2, [r4, #16]
 800586e:	04d9      	lsls	r1, r3, #19
 8005870:	6022      	str	r2, [r4, #0]
 8005872:	d504      	bpl.n	800587e <__sflush_r+0x76>
 8005874:	1c42      	adds	r2, r0, #1
 8005876:	d101      	bne.n	800587c <__sflush_r+0x74>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	b903      	cbnz	r3, 800587e <__sflush_r+0x76>
 800587c:	6560      	str	r0, [r4, #84]	@ 0x54
 800587e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005880:	602f      	str	r7, [r5, #0]
 8005882:	b1b9      	cbz	r1, 80058b4 <__sflush_r+0xac>
 8005884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005888:	4299      	cmp	r1, r3
 800588a:	d002      	beq.n	8005892 <__sflush_r+0x8a>
 800588c:	4628      	mov	r0, r5
 800588e:	f7ff f9eb 	bl	8004c68 <_free_r>
 8005892:	2300      	movs	r3, #0
 8005894:	6363      	str	r3, [r4, #52]	@ 0x34
 8005896:	e00d      	b.n	80058b4 <__sflush_r+0xac>
 8005898:	2301      	movs	r3, #1
 800589a:	4628      	mov	r0, r5
 800589c:	47b0      	blx	r6
 800589e:	4602      	mov	r2, r0
 80058a0:	1c50      	adds	r0, r2, #1
 80058a2:	d1c9      	bne.n	8005838 <__sflush_r+0x30>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0c6      	beq.n	8005838 <__sflush_r+0x30>
 80058aa:	2b1d      	cmp	r3, #29
 80058ac:	d001      	beq.n	80058b2 <__sflush_r+0xaa>
 80058ae:	2b16      	cmp	r3, #22
 80058b0:	d11d      	bne.n	80058ee <__sflush_r+0xe6>
 80058b2:	602f      	str	r7, [r5, #0]
 80058b4:	2000      	movs	r0, #0
 80058b6:	e021      	b.n	80058fc <__sflush_r+0xf4>
 80058b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058bc:	b21b      	sxth	r3, r3
 80058be:	e01a      	b.n	80058f6 <__sflush_r+0xee>
 80058c0:	690f      	ldr	r7, [r1, #16]
 80058c2:	2f00      	cmp	r7, #0
 80058c4:	d0f6      	beq.n	80058b4 <__sflush_r+0xac>
 80058c6:	0793      	lsls	r3, r2, #30
 80058c8:	bf18      	it	ne
 80058ca:	2300      	movne	r3, #0
 80058cc:	680e      	ldr	r6, [r1, #0]
 80058ce:	bf08      	it	eq
 80058d0:	694b      	ldreq	r3, [r1, #20]
 80058d2:	1bf6      	subs	r6, r6, r7
 80058d4:	600f      	str	r7, [r1, #0]
 80058d6:	608b      	str	r3, [r1, #8]
 80058d8:	2e00      	cmp	r6, #0
 80058da:	ddeb      	ble.n	80058b4 <__sflush_r+0xac>
 80058dc:	4633      	mov	r3, r6
 80058de:	463a      	mov	r2, r7
 80058e0:	4628      	mov	r0, r5
 80058e2:	6a21      	ldr	r1, [r4, #32]
 80058e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80058e8:	47e0      	blx	ip
 80058ea:	2800      	cmp	r0, #0
 80058ec:	dc07      	bgt.n	80058fe <__sflush_r+0xf6>
 80058ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058f6:	f04f 30ff 	mov.w	r0, #4294967295
 80058fa:	81a3      	strh	r3, [r4, #12]
 80058fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058fe:	4407      	add	r7, r0
 8005900:	1a36      	subs	r6, r6, r0
 8005902:	e7e9      	b.n	80058d8 <__sflush_r+0xd0>
 8005904:	20400001 	.word	0x20400001

08005908 <_fflush_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	690b      	ldr	r3, [r1, #16]
 800590c:	4605      	mov	r5, r0
 800590e:	460c      	mov	r4, r1
 8005910:	b913      	cbnz	r3, 8005918 <_fflush_r+0x10>
 8005912:	2500      	movs	r5, #0
 8005914:	4628      	mov	r0, r5
 8005916:	bd38      	pop	{r3, r4, r5, pc}
 8005918:	b118      	cbz	r0, 8005922 <_fflush_r+0x1a>
 800591a:	6a03      	ldr	r3, [r0, #32]
 800591c:	b90b      	cbnz	r3, 8005922 <_fflush_r+0x1a>
 800591e:	f7fe fa07 	bl	8003d30 <__sinit>
 8005922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f3      	beq.n	8005912 <_fflush_r+0xa>
 800592a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800592c:	07d0      	lsls	r0, r2, #31
 800592e:	d404      	bmi.n	800593a <_fflush_r+0x32>
 8005930:	0599      	lsls	r1, r3, #22
 8005932:	d402      	bmi.n	800593a <_fflush_r+0x32>
 8005934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005936:	f7fe fb28 	bl	8003f8a <__retarget_lock_acquire_recursive>
 800593a:	4628      	mov	r0, r5
 800593c:	4621      	mov	r1, r4
 800593e:	f7ff ff63 	bl	8005808 <__sflush_r>
 8005942:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005944:	4605      	mov	r5, r0
 8005946:	07da      	lsls	r2, r3, #31
 8005948:	d4e4      	bmi.n	8005914 <_fflush_r+0xc>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	059b      	lsls	r3, r3, #22
 800594e:	d4e1      	bmi.n	8005914 <_fflush_r+0xc>
 8005950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005952:	f7fe fb1b 	bl	8003f8c <__retarget_lock_release_recursive>
 8005956:	e7dd      	b.n	8005914 <_fflush_r+0xc>

08005958 <memmove>:
 8005958:	4288      	cmp	r0, r1
 800595a:	b510      	push	{r4, lr}
 800595c:	eb01 0402 	add.w	r4, r1, r2
 8005960:	d902      	bls.n	8005968 <memmove+0x10>
 8005962:	4284      	cmp	r4, r0
 8005964:	4623      	mov	r3, r4
 8005966:	d807      	bhi.n	8005978 <memmove+0x20>
 8005968:	1e43      	subs	r3, r0, #1
 800596a:	42a1      	cmp	r1, r4
 800596c:	d008      	beq.n	8005980 <memmove+0x28>
 800596e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005972:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005976:	e7f8      	b.n	800596a <memmove+0x12>
 8005978:	4601      	mov	r1, r0
 800597a:	4402      	add	r2, r0
 800597c:	428a      	cmp	r2, r1
 800597e:	d100      	bne.n	8005982 <memmove+0x2a>
 8005980:	bd10      	pop	{r4, pc}
 8005982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800598a:	e7f7      	b.n	800597c <memmove+0x24>

0800598c <_sbrk_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	2300      	movs	r3, #0
 8005990:	4d05      	ldr	r5, [pc, #20]	@ (80059a8 <_sbrk_r+0x1c>)
 8005992:	4604      	mov	r4, r0
 8005994:	4608      	mov	r0, r1
 8005996:	602b      	str	r3, [r5, #0]
 8005998:	f7fc f922 	bl	8001be0 <_sbrk>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d102      	bne.n	80059a6 <_sbrk_r+0x1a>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	b103      	cbz	r3, 80059a6 <_sbrk_r+0x1a>
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	20000564 	.word	0x20000564

080059ac <memcpy>:
 80059ac:	440a      	add	r2, r1
 80059ae:	4291      	cmp	r1, r2
 80059b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80059b4:	d100      	bne.n	80059b8 <memcpy+0xc>
 80059b6:	4770      	bx	lr
 80059b8:	b510      	push	{r4, lr}
 80059ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059be:	4291      	cmp	r1, r2
 80059c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059c4:	d1f9      	bne.n	80059ba <memcpy+0xe>
 80059c6:	bd10      	pop	{r4, pc}

080059c8 <__assert_func>:
 80059c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059ca:	4614      	mov	r4, r2
 80059cc:	461a      	mov	r2, r3
 80059ce:	4b09      	ldr	r3, [pc, #36]	@ (80059f4 <__assert_func+0x2c>)
 80059d0:	4605      	mov	r5, r0
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68d8      	ldr	r0, [r3, #12]
 80059d6:	b14c      	cbz	r4, 80059ec <__assert_func+0x24>
 80059d8:	4b07      	ldr	r3, [pc, #28]	@ (80059f8 <__assert_func+0x30>)
 80059da:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059de:	9100      	str	r1, [sp, #0]
 80059e0:	462b      	mov	r3, r5
 80059e2:	4906      	ldr	r1, [pc, #24]	@ (80059fc <__assert_func+0x34>)
 80059e4:	f000 f870 	bl	8005ac8 <fiprintf>
 80059e8:	f000 f880 	bl	8005aec <abort>
 80059ec:	4b04      	ldr	r3, [pc, #16]	@ (8005a00 <__assert_func+0x38>)
 80059ee:	461c      	mov	r4, r3
 80059f0:	e7f3      	b.n	80059da <__assert_func+0x12>
 80059f2:	bf00      	nop
 80059f4:	2000001c 	.word	0x2000001c
 80059f8:	08006283 	.word	0x08006283
 80059fc:	08006290 	.word	0x08006290
 8005a00:	080062be 	.word	0x080062be

08005a04 <_calloc_r>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	fba1 5402 	umull	r5, r4, r1, r2
 8005a0a:	b934      	cbnz	r4, 8005a1a <_calloc_r+0x16>
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	f7ff f99d 	bl	8004d4c <_malloc_r>
 8005a12:	4606      	mov	r6, r0
 8005a14:	b928      	cbnz	r0, 8005a22 <_calloc_r+0x1e>
 8005a16:	4630      	mov	r0, r6
 8005a18:	bd70      	pop	{r4, r5, r6, pc}
 8005a1a:	220c      	movs	r2, #12
 8005a1c:	2600      	movs	r6, #0
 8005a1e:	6002      	str	r2, [r0, #0]
 8005a20:	e7f9      	b.n	8005a16 <_calloc_r+0x12>
 8005a22:	462a      	mov	r2, r5
 8005a24:	4621      	mov	r1, r4
 8005a26:	f7fe fa32 	bl	8003e8e <memset>
 8005a2a:	e7f4      	b.n	8005a16 <_calloc_r+0x12>

08005a2c <__ascii_mbtowc>:
 8005a2c:	b082      	sub	sp, #8
 8005a2e:	b901      	cbnz	r1, 8005a32 <__ascii_mbtowc+0x6>
 8005a30:	a901      	add	r1, sp, #4
 8005a32:	b142      	cbz	r2, 8005a46 <__ascii_mbtowc+0x1a>
 8005a34:	b14b      	cbz	r3, 8005a4a <__ascii_mbtowc+0x1e>
 8005a36:	7813      	ldrb	r3, [r2, #0]
 8005a38:	600b      	str	r3, [r1, #0]
 8005a3a:	7812      	ldrb	r2, [r2, #0]
 8005a3c:	1e10      	subs	r0, r2, #0
 8005a3e:	bf18      	it	ne
 8005a40:	2001      	movne	r0, #1
 8005a42:	b002      	add	sp, #8
 8005a44:	4770      	bx	lr
 8005a46:	4610      	mov	r0, r2
 8005a48:	e7fb      	b.n	8005a42 <__ascii_mbtowc+0x16>
 8005a4a:	f06f 0001 	mvn.w	r0, #1
 8005a4e:	e7f8      	b.n	8005a42 <__ascii_mbtowc+0x16>

08005a50 <_realloc_r>:
 8005a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a54:	4607      	mov	r7, r0
 8005a56:	4614      	mov	r4, r2
 8005a58:	460d      	mov	r5, r1
 8005a5a:	b921      	cbnz	r1, 8005a66 <_realloc_r+0x16>
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a62:	f7ff b973 	b.w	8004d4c <_malloc_r>
 8005a66:	b92a      	cbnz	r2, 8005a74 <_realloc_r+0x24>
 8005a68:	f7ff f8fe 	bl	8004c68 <_free_r>
 8005a6c:	4625      	mov	r5, r4
 8005a6e:	4628      	mov	r0, r5
 8005a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a74:	f000 f841 	bl	8005afa <_malloc_usable_size_r>
 8005a78:	4284      	cmp	r4, r0
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	d802      	bhi.n	8005a84 <_realloc_r+0x34>
 8005a7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a82:	d8f4      	bhi.n	8005a6e <_realloc_r+0x1e>
 8005a84:	4621      	mov	r1, r4
 8005a86:	4638      	mov	r0, r7
 8005a88:	f7ff f960 	bl	8004d4c <_malloc_r>
 8005a8c:	4680      	mov	r8, r0
 8005a8e:	b908      	cbnz	r0, 8005a94 <_realloc_r+0x44>
 8005a90:	4645      	mov	r5, r8
 8005a92:	e7ec      	b.n	8005a6e <_realloc_r+0x1e>
 8005a94:	42b4      	cmp	r4, r6
 8005a96:	4622      	mov	r2, r4
 8005a98:	4629      	mov	r1, r5
 8005a9a:	bf28      	it	cs
 8005a9c:	4632      	movcs	r2, r6
 8005a9e:	f7ff ff85 	bl	80059ac <memcpy>
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	f7ff f8df 	bl	8004c68 <_free_r>
 8005aaa:	e7f1      	b.n	8005a90 <_realloc_r+0x40>

08005aac <__ascii_wctomb>:
 8005aac:	4603      	mov	r3, r0
 8005aae:	4608      	mov	r0, r1
 8005ab0:	b141      	cbz	r1, 8005ac4 <__ascii_wctomb+0x18>
 8005ab2:	2aff      	cmp	r2, #255	@ 0xff
 8005ab4:	d904      	bls.n	8005ac0 <__ascii_wctomb+0x14>
 8005ab6:	228a      	movs	r2, #138	@ 0x8a
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	4770      	bx	lr
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	700a      	strb	r2, [r1, #0]
 8005ac4:	4770      	bx	lr
	...

08005ac8 <fiprintf>:
 8005ac8:	b40e      	push	{r1, r2, r3}
 8005aca:	b503      	push	{r0, r1, lr}
 8005acc:	4601      	mov	r1, r0
 8005ace:	ab03      	add	r3, sp, #12
 8005ad0:	4805      	ldr	r0, [pc, #20]	@ (8005ae8 <fiprintf+0x20>)
 8005ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ad6:	6800      	ldr	r0, [r0, #0]
 8005ad8:	9301      	str	r3, [sp, #4]
 8005ada:	f000 f83d 	bl	8005b58 <_vfiprintf_r>
 8005ade:	b002      	add	sp, #8
 8005ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ae4:	b003      	add	sp, #12
 8005ae6:	4770      	bx	lr
 8005ae8:	2000001c 	.word	0x2000001c

08005aec <abort>:
 8005aec:	2006      	movs	r0, #6
 8005aee:	b508      	push	{r3, lr}
 8005af0:	f000 fa06 	bl	8005f00 <raise>
 8005af4:	2001      	movs	r0, #1
 8005af6:	f7fb fffe 	bl	8001af6 <_exit>

08005afa <_malloc_usable_size_r>:
 8005afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005afe:	1f18      	subs	r0, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	bfbc      	itt	lt
 8005b04:	580b      	ldrlt	r3, [r1, r0]
 8005b06:	18c0      	addlt	r0, r0, r3
 8005b08:	4770      	bx	lr

08005b0a <__sfputc_r>:
 8005b0a:	6893      	ldr	r3, [r2, #8]
 8005b0c:	b410      	push	{r4}
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	6093      	str	r3, [r2, #8]
 8005b14:	da07      	bge.n	8005b26 <__sfputc_r+0x1c>
 8005b16:	6994      	ldr	r4, [r2, #24]
 8005b18:	42a3      	cmp	r3, r4
 8005b1a:	db01      	blt.n	8005b20 <__sfputc_r+0x16>
 8005b1c:	290a      	cmp	r1, #10
 8005b1e:	d102      	bne.n	8005b26 <__sfputc_r+0x1c>
 8005b20:	bc10      	pop	{r4}
 8005b22:	f000 b931 	b.w	8005d88 <__swbuf_r>
 8005b26:	6813      	ldr	r3, [r2, #0]
 8005b28:	1c58      	adds	r0, r3, #1
 8005b2a:	6010      	str	r0, [r2, #0]
 8005b2c:	7019      	strb	r1, [r3, #0]
 8005b2e:	4608      	mov	r0, r1
 8005b30:	bc10      	pop	{r4}
 8005b32:	4770      	bx	lr

08005b34 <__sfputs_r>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	4606      	mov	r6, r0
 8005b38:	460f      	mov	r7, r1
 8005b3a:	4614      	mov	r4, r2
 8005b3c:	18d5      	adds	r5, r2, r3
 8005b3e:	42ac      	cmp	r4, r5
 8005b40:	d101      	bne.n	8005b46 <__sfputs_r+0x12>
 8005b42:	2000      	movs	r0, #0
 8005b44:	e007      	b.n	8005b56 <__sfputs_r+0x22>
 8005b46:	463a      	mov	r2, r7
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b4e:	f7ff ffdc 	bl	8005b0a <__sfputc_r>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	d1f3      	bne.n	8005b3e <__sfputs_r+0xa>
 8005b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005b58 <_vfiprintf_r>:
 8005b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5c:	460d      	mov	r5, r1
 8005b5e:	4614      	mov	r4, r2
 8005b60:	4698      	mov	r8, r3
 8005b62:	4606      	mov	r6, r0
 8005b64:	b09d      	sub	sp, #116	@ 0x74
 8005b66:	b118      	cbz	r0, 8005b70 <_vfiprintf_r+0x18>
 8005b68:	6a03      	ldr	r3, [r0, #32]
 8005b6a:	b90b      	cbnz	r3, 8005b70 <_vfiprintf_r+0x18>
 8005b6c:	f7fe f8e0 	bl	8003d30 <__sinit>
 8005b70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b72:	07d9      	lsls	r1, r3, #31
 8005b74:	d405      	bmi.n	8005b82 <_vfiprintf_r+0x2a>
 8005b76:	89ab      	ldrh	r3, [r5, #12]
 8005b78:	059a      	lsls	r2, r3, #22
 8005b7a:	d402      	bmi.n	8005b82 <_vfiprintf_r+0x2a>
 8005b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b7e:	f7fe fa04 	bl	8003f8a <__retarget_lock_acquire_recursive>
 8005b82:	89ab      	ldrh	r3, [r5, #12]
 8005b84:	071b      	lsls	r3, r3, #28
 8005b86:	d501      	bpl.n	8005b8c <_vfiprintf_r+0x34>
 8005b88:	692b      	ldr	r3, [r5, #16]
 8005b8a:	b99b      	cbnz	r3, 8005bb4 <_vfiprintf_r+0x5c>
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f000 f938 	bl	8005e04 <__swsetup_r>
 8005b94:	b170      	cbz	r0, 8005bb4 <_vfiprintf_r+0x5c>
 8005b96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b98:	07dc      	lsls	r4, r3, #31
 8005b9a:	d504      	bpl.n	8005ba6 <_vfiprintf_r+0x4e>
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	b01d      	add	sp, #116	@ 0x74
 8005ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba6:	89ab      	ldrh	r3, [r5, #12]
 8005ba8:	0598      	lsls	r0, r3, #22
 8005baa:	d4f7      	bmi.n	8005b9c <_vfiprintf_r+0x44>
 8005bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bae:	f7fe f9ed 	bl	8003f8c <__retarget_lock_release_recursive>
 8005bb2:	e7f3      	b.n	8005b9c <_vfiprintf_r+0x44>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bb8:	2320      	movs	r3, #32
 8005bba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bbe:	2330      	movs	r3, #48	@ 0x30
 8005bc0:	f04f 0901 	mov.w	r9, #1
 8005bc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bc8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005d74 <_vfiprintf_r+0x21c>
 8005bcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bd0:	4623      	mov	r3, r4
 8005bd2:	469a      	mov	sl, r3
 8005bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bd8:	b10a      	cbz	r2, 8005bde <_vfiprintf_r+0x86>
 8005bda:	2a25      	cmp	r2, #37	@ 0x25
 8005bdc:	d1f9      	bne.n	8005bd2 <_vfiprintf_r+0x7a>
 8005bde:	ebba 0b04 	subs.w	fp, sl, r4
 8005be2:	d00b      	beq.n	8005bfc <_vfiprintf_r+0xa4>
 8005be4:	465b      	mov	r3, fp
 8005be6:	4622      	mov	r2, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	4630      	mov	r0, r6
 8005bec:	f7ff ffa2 	bl	8005b34 <__sfputs_r>
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	f000 80a7 	beq.w	8005d44 <_vfiprintf_r+0x1ec>
 8005bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bf8:	445a      	add	r2, fp
 8005bfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 809f 	beq.w	8005d44 <_vfiprintf_r+0x1ec>
 8005c06:	2300      	movs	r3, #0
 8005c08:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c10:	f10a 0a01 	add.w	sl, sl, #1
 8005c14:	9304      	str	r3, [sp, #16]
 8005c16:	9307      	str	r3, [sp, #28]
 8005c18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c1e:	4654      	mov	r4, sl
 8005c20:	2205      	movs	r2, #5
 8005c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c26:	4853      	ldr	r0, [pc, #332]	@ (8005d74 <_vfiprintf_r+0x21c>)
 8005c28:	f7fe f9b1 	bl	8003f8e <memchr>
 8005c2c:	9a04      	ldr	r2, [sp, #16]
 8005c2e:	b9d8      	cbnz	r0, 8005c68 <_vfiprintf_r+0x110>
 8005c30:	06d1      	lsls	r1, r2, #27
 8005c32:	bf44      	itt	mi
 8005c34:	2320      	movmi	r3, #32
 8005c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c3a:	0713      	lsls	r3, r2, #28
 8005c3c:	bf44      	itt	mi
 8005c3e:	232b      	movmi	r3, #43	@ 0x2b
 8005c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c44:	f89a 3000 	ldrb.w	r3, [sl]
 8005c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c4a:	d015      	beq.n	8005c78 <_vfiprintf_r+0x120>
 8005c4c:	4654      	mov	r4, sl
 8005c4e:	2000      	movs	r0, #0
 8005c50:	f04f 0c0a 	mov.w	ip, #10
 8005c54:	9a07      	ldr	r2, [sp, #28]
 8005c56:	4621      	mov	r1, r4
 8005c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c5c:	3b30      	subs	r3, #48	@ 0x30
 8005c5e:	2b09      	cmp	r3, #9
 8005c60:	d94b      	bls.n	8005cfa <_vfiprintf_r+0x1a2>
 8005c62:	b1b0      	cbz	r0, 8005c92 <_vfiprintf_r+0x13a>
 8005c64:	9207      	str	r2, [sp, #28]
 8005c66:	e014      	b.n	8005c92 <_vfiprintf_r+0x13a>
 8005c68:	eba0 0308 	sub.w	r3, r0, r8
 8005c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8005c70:	4313      	orrs	r3, r2
 8005c72:	46a2      	mov	sl, r4
 8005c74:	9304      	str	r3, [sp, #16]
 8005c76:	e7d2      	b.n	8005c1e <_vfiprintf_r+0xc6>
 8005c78:	9b03      	ldr	r3, [sp, #12]
 8005c7a:	1d19      	adds	r1, r3, #4
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	9103      	str	r1, [sp, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bfbb      	ittet	lt
 8005c84:	425b      	neglt	r3, r3
 8005c86:	f042 0202 	orrlt.w	r2, r2, #2
 8005c8a:	9307      	strge	r3, [sp, #28]
 8005c8c:	9307      	strlt	r3, [sp, #28]
 8005c8e:	bfb8      	it	lt
 8005c90:	9204      	strlt	r2, [sp, #16]
 8005c92:	7823      	ldrb	r3, [r4, #0]
 8005c94:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c96:	d10a      	bne.n	8005cae <_vfiprintf_r+0x156>
 8005c98:	7863      	ldrb	r3, [r4, #1]
 8005c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c9c:	d132      	bne.n	8005d04 <_vfiprintf_r+0x1ac>
 8005c9e:	9b03      	ldr	r3, [sp, #12]
 8005ca0:	3402      	adds	r4, #2
 8005ca2:	1d1a      	adds	r2, r3, #4
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	9203      	str	r2, [sp, #12]
 8005ca8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cac:	9305      	str	r3, [sp, #20]
 8005cae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005d78 <_vfiprintf_r+0x220>
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	4650      	mov	r0, sl
 8005cb6:	7821      	ldrb	r1, [r4, #0]
 8005cb8:	f7fe f969 	bl	8003f8e <memchr>
 8005cbc:	b138      	cbz	r0, 8005cce <_vfiprintf_r+0x176>
 8005cbe:	2240      	movs	r2, #64	@ 0x40
 8005cc0:	9b04      	ldr	r3, [sp, #16]
 8005cc2:	eba0 000a 	sub.w	r0, r0, sl
 8005cc6:	4082      	lsls	r2, r0
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	3401      	adds	r4, #1
 8005ccc:	9304      	str	r3, [sp, #16]
 8005cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd2:	2206      	movs	r2, #6
 8005cd4:	4829      	ldr	r0, [pc, #164]	@ (8005d7c <_vfiprintf_r+0x224>)
 8005cd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cda:	f7fe f958 	bl	8003f8e <memchr>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d03f      	beq.n	8005d62 <_vfiprintf_r+0x20a>
 8005ce2:	4b27      	ldr	r3, [pc, #156]	@ (8005d80 <_vfiprintf_r+0x228>)
 8005ce4:	bb1b      	cbnz	r3, 8005d2e <_vfiprintf_r+0x1d6>
 8005ce6:	9b03      	ldr	r3, [sp, #12]
 8005ce8:	3307      	adds	r3, #7
 8005cea:	f023 0307 	bic.w	r3, r3, #7
 8005cee:	3308      	adds	r3, #8
 8005cf0:	9303      	str	r3, [sp, #12]
 8005cf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cf4:	443b      	add	r3, r7
 8005cf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cf8:	e76a      	b.n	8005bd0 <_vfiprintf_r+0x78>
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	2001      	movs	r0, #1
 8005cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d02:	e7a8      	b.n	8005c56 <_vfiprintf_r+0xfe>
 8005d04:	2300      	movs	r3, #0
 8005d06:	f04f 0c0a 	mov.w	ip, #10
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	3401      	adds	r4, #1
 8005d0e:	9305      	str	r3, [sp, #20]
 8005d10:	4620      	mov	r0, r4
 8005d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d16:	3a30      	subs	r2, #48	@ 0x30
 8005d18:	2a09      	cmp	r2, #9
 8005d1a:	d903      	bls.n	8005d24 <_vfiprintf_r+0x1cc>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0c6      	beq.n	8005cae <_vfiprintf_r+0x156>
 8005d20:	9105      	str	r1, [sp, #20]
 8005d22:	e7c4      	b.n	8005cae <_vfiprintf_r+0x156>
 8005d24:	4604      	mov	r4, r0
 8005d26:	2301      	movs	r3, #1
 8005d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d2c:	e7f0      	b.n	8005d10 <_vfiprintf_r+0x1b8>
 8005d2e:	ab03      	add	r3, sp, #12
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	462a      	mov	r2, r5
 8005d34:	4630      	mov	r0, r6
 8005d36:	4b13      	ldr	r3, [pc, #76]	@ (8005d84 <_vfiprintf_r+0x22c>)
 8005d38:	a904      	add	r1, sp, #16
 8005d3a:	f7fd fbb1 	bl	80034a0 <_printf_float>
 8005d3e:	4607      	mov	r7, r0
 8005d40:	1c78      	adds	r0, r7, #1
 8005d42:	d1d6      	bne.n	8005cf2 <_vfiprintf_r+0x19a>
 8005d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d46:	07d9      	lsls	r1, r3, #31
 8005d48:	d405      	bmi.n	8005d56 <_vfiprintf_r+0x1fe>
 8005d4a:	89ab      	ldrh	r3, [r5, #12]
 8005d4c:	059a      	lsls	r2, r3, #22
 8005d4e:	d402      	bmi.n	8005d56 <_vfiprintf_r+0x1fe>
 8005d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d52:	f7fe f91b 	bl	8003f8c <__retarget_lock_release_recursive>
 8005d56:	89ab      	ldrh	r3, [r5, #12]
 8005d58:	065b      	lsls	r3, r3, #25
 8005d5a:	f53f af1f 	bmi.w	8005b9c <_vfiprintf_r+0x44>
 8005d5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d60:	e71e      	b.n	8005ba0 <_vfiprintf_r+0x48>
 8005d62:	ab03      	add	r3, sp, #12
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	462a      	mov	r2, r5
 8005d68:	4630      	mov	r0, r6
 8005d6a:	4b06      	ldr	r3, [pc, #24]	@ (8005d84 <_vfiprintf_r+0x22c>)
 8005d6c:	a904      	add	r1, sp, #16
 8005d6e:	f7fd fe35 	bl	80039dc <_printf_i>
 8005d72:	e7e4      	b.n	8005d3e <_vfiprintf_r+0x1e6>
 8005d74:	08006268 	.word	0x08006268
 8005d78:	0800626e 	.word	0x0800626e
 8005d7c:	08006272 	.word	0x08006272
 8005d80:	080034a1 	.word	0x080034a1
 8005d84:	08005b35 	.word	0x08005b35

08005d88 <__swbuf_r>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	460e      	mov	r6, r1
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	4605      	mov	r5, r0
 8005d90:	b118      	cbz	r0, 8005d9a <__swbuf_r+0x12>
 8005d92:	6a03      	ldr	r3, [r0, #32]
 8005d94:	b90b      	cbnz	r3, 8005d9a <__swbuf_r+0x12>
 8005d96:	f7fd ffcb 	bl	8003d30 <__sinit>
 8005d9a:	69a3      	ldr	r3, [r4, #24]
 8005d9c:	60a3      	str	r3, [r4, #8]
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	071a      	lsls	r2, r3, #28
 8005da2:	d501      	bpl.n	8005da8 <__swbuf_r+0x20>
 8005da4:	6923      	ldr	r3, [r4, #16]
 8005da6:	b943      	cbnz	r3, 8005dba <__swbuf_r+0x32>
 8005da8:	4621      	mov	r1, r4
 8005daa:	4628      	mov	r0, r5
 8005dac:	f000 f82a 	bl	8005e04 <__swsetup_r>
 8005db0:	b118      	cbz	r0, 8005dba <__swbuf_r+0x32>
 8005db2:	f04f 37ff 	mov.w	r7, #4294967295
 8005db6:	4638      	mov	r0, r7
 8005db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	6922      	ldr	r2, [r4, #16]
 8005dbe:	b2f6      	uxtb	r6, r6
 8005dc0:	1a98      	subs	r0, r3, r2
 8005dc2:	6963      	ldr	r3, [r4, #20]
 8005dc4:	4637      	mov	r7, r6
 8005dc6:	4283      	cmp	r3, r0
 8005dc8:	dc05      	bgt.n	8005dd6 <__swbuf_r+0x4e>
 8005dca:	4621      	mov	r1, r4
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f7ff fd9b 	bl	8005908 <_fflush_r>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d1ed      	bne.n	8005db2 <__swbuf_r+0x2a>
 8005dd6:	68a3      	ldr	r3, [r4, #8]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	60a3      	str	r3, [r4, #8]
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	6022      	str	r2, [r4, #0]
 8005de2:	701e      	strb	r6, [r3, #0]
 8005de4:	6962      	ldr	r2, [r4, #20]
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d004      	beq.n	8005df6 <__swbuf_r+0x6e>
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	07db      	lsls	r3, r3, #31
 8005df0:	d5e1      	bpl.n	8005db6 <__swbuf_r+0x2e>
 8005df2:	2e0a      	cmp	r6, #10
 8005df4:	d1df      	bne.n	8005db6 <__swbuf_r+0x2e>
 8005df6:	4621      	mov	r1, r4
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f7ff fd85 	bl	8005908 <_fflush_r>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d0d9      	beq.n	8005db6 <__swbuf_r+0x2e>
 8005e02:	e7d6      	b.n	8005db2 <__swbuf_r+0x2a>

08005e04 <__swsetup_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4b29      	ldr	r3, [pc, #164]	@ (8005eac <__swsetup_r+0xa8>)
 8005e08:	4605      	mov	r5, r0
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	b118      	cbz	r0, 8005e18 <__swsetup_r+0x14>
 8005e10:	6a03      	ldr	r3, [r0, #32]
 8005e12:	b90b      	cbnz	r3, 8005e18 <__swsetup_r+0x14>
 8005e14:	f7fd ff8c 	bl	8003d30 <__sinit>
 8005e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e1c:	0719      	lsls	r1, r3, #28
 8005e1e:	d422      	bmi.n	8005e66 <__swsetup_r+0x62>
 8005e20:	06da      	lsls	r2, r3, #27
 8005e22:	d407      	bmi.n	8005e34 <__swsetup_r+0x30>
 8005e24:	2209      	movs	r2, #9
 8005e26:	602a      	str	r2, [r5, #0]
 8005e28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	e033      	b.n	8005e9c <__swsetup_r+0x98>
 8005e34:	0758      	lsls	r0, r3, #29
 8005e36:	d512      	bpl.n	8005e5e <__swsetup_r+0x5a>
 8005e38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e3a:	b141      	cbz	r1, 8005e4e <__swsetup_r+0x4a>
 8005e3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e40:	4299      	cmp	r1, r3
 8005e42:	d002      	beq.n	8005e4a <__swsetup_r+0x46>
 8005e44:	4628      	mov	r0, r5
 8005e46:	f7fe ff0f 	bl	8004c68 <_free_r>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	2300      	movs	r3, #0
 8005e58:	6063      	str	r3, [r4, #4]
 8005e5a:	6923      	ldr	r3, [r4, #16]
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	89a3      	ldrh	r3, [r4, #12]
 8005e60:	f043 0308 	orr.w	r3, r3, #8
 8005e64:	81a3      	strh	r3, [r4, #12]
 8005e66:	6923      	ldr	r3, [r4, #16]
 8005e68:	b94b      	cbnz	r3, 8005e7e <__swsetup_r+0x7a>
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e74:	d003      	beq.n	8005e7e <__swsetup_r+0x7a>
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f000 f882 	bl	8005f82 <__smakebuf_r>
 8005e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e82:	f013 0201 	ands.w	r2, r3, #1
 8005e86:	d00a      	beq.n	8005e9e <__swsetup_r+0x9a>
 8005e88:	2200      	movs	r2, #0
 8005e8a:	60a2      	str	r2, [r4, #8]
 8005e8c:	6962      	ldr	r2, [r4, #20]
 8005e8e:	4252      	negs	r2, r2
 8005e90:	61a2      	str	r2, [r4, #24]
 8005e92:	6922      	ldr	r2, [r4, #16]
 8005e94:	b942      	cbnz	r2, 8005ea8 <__swsetup_r+0xa4>
 8005e96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e9a:	d1c5      	bne.n	8005e28 <__swsetup_r+0x24>
 8005e9c:	bd38      	pop	{r3, r4, r5, pc}
 8005e9e:	0799      	lsls	r1, r3, #30
 8005ea0:	bf58      	it	pl
 8005ea2:	6962      	ldrpl	r2, [r4, #20]
 8005ea4:	60a2      	str	r2, [r4, #8]
 8005ea6:	e7f4      	b.n	8005e92 <__swsetup_r+0x8e>
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	e7f7      	b.n	8005e9c <__swsetup_r+0x98>
 8005eac:	2000001c 	.word	0x2000001c

08005eb0 <_raise_r>:
 8005eb0:	291f      	cmp	r1, #31
 8005eb2:	b538      	push	{r3, r4, r5, lr}
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	d904      	bls.n	8005ec4 <_raise_r+0x14>
 8005eba:	2316      	movs	r3, #22
 8005ebc:	6003      	str	r3, [r0, #0]
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec2:	bd38      	pop	{r3, r4, r5, pc}
 8005ec4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005ec6:	b112      	cbz	r2, 8005ece <_raise_r+0x1e>
 8005ec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ecc:	b94b      	cbnz	r3, 8005ee2 <_raise_r+0x32>
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f830 	bl	8005f34 <_getpid_r>
 8005ed4:	4622      	mov	r2, r4
 8005ed6:	4601      	mov	r1, r0
 8005ed8:	4628      	mov	r0, r5
 8005eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ede:	f000 b817 	b.w	8005f10 <_kill_r>
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d00a      	beq.n	8005efc <_raise_r+0x4c>
 8005ee6:	1c59      	adds	r1, r3, #1
 8005ee8:	d103      	bne.n	8005ef2 <_raise_r+0x42>
 8005eea:	2316      	movs	r3, #22
 8005eec:	6003      	str	r3, [r0, #0]
 8005eee:	2001      	movs	r0, #1
 8005ef0:	e7e7      	b.n	8005ec2 <_raise_r+0x12>
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005efa:	4798      	blx	r3
 8005efc:	2000      	movs	r0, #0
 8005efe:	e7e0      	b.n	8005ec2 <_raise_r+0x12>

08005f00 <raise>:
 8005f00:	4b02      	ldr	r3, [pc, #8]	@ (8005f0c <raise+0xc>)
 8005f02:	4601      	mov	r1, r0
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	f7ff bfd3 	b.w	8005eb0 <_raise_r>
 8005f0a:	bf00      	nop
 8005f0c:	2000001c 	.word	0x2000001c

08005f10 <_kill_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	2300      	movs	r3, #0
 8005f14:	4d06      	ldr	r5, [pc, #24]	@ (8005f30 <_kill_r+0x20>)
 8005f16:	4604      	mov	r4, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	602b      	str	r3, [r5, #0]
 8005f1e:	f7fb fdda 	bl	8001ad6 <_kill>
 8005f22:	1c43      	adds	r3, r0, #1
 8005f24:	d102      	bne.n	8005f2c <_kill_r+0x1c>
 8005f26:	682b      	ldr	r3, [r5, #0]
 8005f28:	b103      	cbz	r3, 8005f2c <_kill_r+0x1c>
 8005f2a:	6023      	str	r3, [r4, #0]
 8005f2c:	bd38      	pop	{r3, r4, r5, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000564 	.word	0x20000564

08005f34 <_getpid_r>:
 8005f34:	f7fb bdc8 	b.w	8001ac8 <_getpid>

08005f38 <__swhatbuf_r>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f40:	4615      	mov	r5, r2
 8005f42:	2900      	cmp	r1, #0
 8005f44:	461e      	mov	r6, r3
 8005f46:	b096      	sub	sp, #88	@ 0x58
 8005f48:	da0c      	bge.n	8005f64 <__swhatbuf_r+0x2c>
 8005f4a:	89a3      	ldrh	r3, [r4, #12]
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f52:	bf14      	ite	ne
 8005f54:	2340      	movne	r3, #64	@ 0x40
 8005f56:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	6031      	str	r1, [r6, #0]
 8005f5e:	602b      	str	r3, [r5, #0]
 8005f60:	b016      	add	sp, #88	@ 0x58
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	466a      	mov	r2, sp
 8005f66:	f000 f849 	bl	8005ffc <_fstat_r>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	dbed      	blt.n	8005f4a <__swhatbuf_r+0x12>
 8005f6e:	9901      	ldr	r1, [sp, #4]
 8005f70:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f74:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f78:	4259      	negs	r1, r3
 8005f7a:	4159      	adcs	r1, r3
 8005f7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f80:	e7eb      	b.n	8005f5a <__swhatbuf_r+0x22>

08005f82 <__smakebuf_r>:
 8005f82:	898b      	ldrh	r3, [r1, #12]
 8005f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f86:	079d      	lsls	r5, r3, #30
 8005f88:	4606      	mov	r6, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	d507      	bpl.n	8005f9e <__smakebuf_r+0x1c>
 8005f8e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	6123      	str	r3, [r4, #16]
 8005f96:	2301      	movs	r3, #1
 8005f98:	6163      	str	r3, [r4, #20]
 8005f9a:	b003      	add	sp, #12
 8005f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f9e:	466a      	mov	r2, sp
 8005fa0:	ab01      	add	r3, sp, #4
 8005fa2:	f7ff ffc9 	bl	8005f38 <__swhatbuf_r>
 8005fa6:	9f00      	ldr	r7, [sp, #0]
 8005fa8:	4605      	mov	r5, r0
 8005faa:	4639      	mov	r1, r7
 8005fac:	4630      	mov	r0, r6
 8005fae:	f7fe fecd 	bl	8004d4c <_malloc_r>
 8005fb2:	b948      	cbnz	r0, 8005fc8 <__smakebuf_r+0x46>
 8005fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb8:	059a      	lsls	r2, r3, #22
 8005fba:	d4ee      	bmi.n	8005f9a <__smakebuf_r+0x18>
 8005fbc:	f023 0303 	bic.w	r3, r3, #3
 8005fc0:	f043 0302 	orr.w	r3, r3, #2
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	e7e2      	b.n	8005f8e <__smakebuf_r+0xc>
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd2:	81a3      	strh	r3, [r4, #12]
 8005fd4:	9b01      	ldr	r3, [sp, #4]
 8005fd6:	6020      	str	r0, [r4, #0]
 8005fd8:	b15b      	cbz	r3, 8005ff2 <__smakebuf_r+0x70>
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fe0:	f000 f81e 	bl	8006020 <_isatty_r>
 8005fe4:	b128      	cbz	r0, 8005ff2 <__smakebuf_r+0x70>
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	f023 0303 	bic.w	r3, r3, #3
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	81a3      	strh	r3, [r4, #12]
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	431d      	orrs	r5, r3
 8005ff6:	81a5      	strh	r5, [r4, #12]
 8005ff8:	e7cf      	b.n	8005f9a <__smakebuf_r+0x18>
	...

08005ffc <_fstat_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	2300      	movs	r3, #0
 8006000:	4d06      	ldr	r5, [pc, #24]	@ (800601c <_fstat_r+0x20>)
 8006002:	4604      	mov	r4, r0
 8006004:	4608      	mov	r0, r1
 8006006:	4611      	mov	r1, r2
 8006008:	602b      	str	r3, [r5, #0]
 800600a:	f7fb fdc3 	bl	8001b94 <_fstat>
 800600e:	1c43      	adds	r3, r0, #1
 8006010:	d102      	bne.n	8006018 <_fstat_r+0x1c>
 8006012:	682b      	ldr	r3, [r5, #0]
 8006014:	b103      	cbz	r3, 8006018 <_fstat_r+0x1c>
 8006016:	6023      	str	r3, [r4, #0]
 8006018:	bd38      	pop	{r3, r4, r5, pc}
 800601a:	bf00      	nop
 800601c:	20000564 	.word	0x20000564

08006020 <_isatty_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	2300      	movs	r3, #0
 8006024:	4d05      	ldr	r5, [pc, #20]	@ (800603c <_isatty_r+0x1c>)
 8006026:	4604      	mov	r4, r0
 8006028:	4608      	mov	r0, r1
 800602a:	602b      	str	r3, [r5, #0]
 800602c:	f7fb fdc1 	bl	8001bb2 <_isatty>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_isatty_r+0x1a>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_isatty_r+0x1a>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	20000564 	.word	0x20000564

08006040 <_init>:
 8006040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006042:	bf00      	nop
 8006044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006046:	bc08      	pop	{r3}
 8006048:	469e      	mov	lr, r3
 800604a:	4770      	bx	lr

0800604c <_fini>:
 800604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604e:	bf00      	nop
 8006050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006052:	bc08      	pop	{r3}
 8006054:	469e      	mov	lr, r3
 8006056:	4770      	bx	lr
