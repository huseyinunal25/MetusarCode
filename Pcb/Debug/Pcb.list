
Pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009340  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08009450  08009450  0000a450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009850  08009850  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009850  08009850  0000a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009858  08009858  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009858  08009858  0000a858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800985c  0800985c  0000a85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009860  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200001d4  08009a34  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08009a34  0000b508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb39  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002063  00000000  00000000  00017d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00019da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c2  00000000  00000000  0001aa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018823  00000000  00000000  0001b3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4b7  00000000  00000000  00033c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d78  00000000  00000000  000430bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbe34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a4  00000000  00000000  000cbe78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d071c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009438 	.word	0x08009438

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08009438 	.word	0x08009438

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_fmul>:
 8000b28:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b30:	bf1e      	ittt	ne
 8000b32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b36:	ea92 0f0c 	teqne	r2, ip
 8000b3a:	ea93 0f0c 	teqne	r3, ip
 8000b3e:	d06f      	beq.n	8000c20 <__aeabi_fmul+0xf8>
 8000b40:	441a      	add	r2, r3
 8000b42:	ea80 0c01 	eor.w	ip, r0, r1
 8000b46:	0240      	lsls	r0, r0, #9
 8000b48:	bf18      	it	ne
 8000b4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b4e:	d01e      	beq.n	8000b8e <__aeabi_fmul+0x66>
 8000b50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b64:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b68:	bf3e      	ittt	cc
 8000b6a:	0049      	lslcc	r1, r1, #1
 8000b6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b70:	005b      	lslcc	r3, r3, #1
 8000b72:	ea40 0001 	orr.w	r0, r0, r1
 8000b76:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b7a:	2afd      	cmp	r2, #253	@ 0xfd
 8000b7c:	d81d      	bhi.n	8000bba <__aeabi_fmul+0x92>
 8000b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b86:	bf08      	it	eq
 8000b88:	f020 0001 	biceq.w	r0, r0, #1
 8000b8c:	4770      	bx	lr
 8000b8e:	f090 0f00 	teq	r0, #0
 8000b92:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b96:	bf08      	it	eq
 8000b98:	0249      	lsleq	r1, r1, #9
 8000b9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ba2:	3a7f      	subs	r2, #127	@ 0x7f
 8000ba4:	bfc2      	ittt	gt
 8000ba6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000baa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bae:	4770      	bxgt	lr
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	dc5d      	bgt.n	8000c78 <__aeabi_fmul+0x150>
 8000bbc:	f112 0f19 	cmn.w	r2, #25
 8000bc0:	bfdc      	itt	le
 8000bc2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bxle	lr
 8000bc8:	f1c2 0200 	rsb	r2, r2, #0
 8000bcc:	0041      	lsls	r1, r0, #1
 8000bce:	fa21 f102 	lsr.w	r1, r1, r2
 8000bd2:	f1c2 0220 	rsb	r2, r2, #32
 8000bd6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bda:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bde:	f140 0000 	adc.w	r0, r0, #0
 8000be2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000be6:	bf08      	it	eq
 8000be8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bec:	4770      	bx	lr
 8000bee:	f092 0f00 	teq	r2, #0
 8000bf2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bf6:	bf02      	ittt	eq
 8000bf8:	0040      	lsleq	r0, r0, #1
 8000bfa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bfe:	3a01      	subeq	r2, #1
 8000c00:	d0f9      	beq.n	8000bf6 <__aeabi_fmul+0xce>
 8000c02:	ea40 000c 	orr.w	r0, r0, ip
 8000c06:	f093 0f00 	teq	r3, #0
 8000c0a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c0e:	bf02      	ittt	eq
 8000c10:	0049      	lsleq	r1, r1, #1
 8000c12:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c16:	3b01      	subeq	r3, #1
 8000c18:	d0f9      	beq.n	8000c0e <__aeabi_fmul+0xe6>
 8000c1a:	ea41 010c 	orr.w	r1, r1, ip
 8000c1e:	e78f      	b.n	8000b40 <__aeabi_fmul+0x18>
 8000c20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c24:	ea92 0f0c 	teq	r2, ip
 8000c28:	bf18      	it	ne
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d00a      	beq.n	8000c46 <__aeabi_fmul+0x11e>
 8000c30:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c34:	bf18      	it	ne
 8000c36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c3a:	d1d8      	bne.n	8000bee <__aeabi_fmul+0xc6>
 8000c3c:	ea80 0001 	eor.w	r0, r0, r1
 8000c40:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f090 0f00 	teq	r0, #0
 8000c4a:	bf17      	itett	ne
 8000c4c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c50:	4608      	moveq	r0, r1
 8000c52:	f091 0f00 	teqne	r1, #0
 8000c56:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c5a:	d014      	beq.n	8000c86 <__aeabi_fmul+0x15e>
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	d101      	bne.n	8000c66 <__aeabi_fmul+0x13e>
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	d10f      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c66:	ea93 0f0c 	teq	r3, ip
 8000c6a:	d103      	bne.n	8000c74 <__aeabi_fmul+0x14c>
 8000c6c:	024b      	lsls	r3, r1, #9
 8000c6e:	bf18      	it	ne
 8000c70:	4608      	movne	r0, r1
 8000c72:	d108      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c8a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fdiv>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d069      	beq.n	8000d7c <__aeabi_fdiv+0xec>
 8000ca8:	eba2 0203 	sub.w	r2, r2, r3
 8000cac:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cb6:	d037      	beq.n	8000d28 <__aeabi_fdiv+0x98>
 8000cb8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cbc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cc0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cc4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	bf38      	it	cc
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000cd2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	bf24      	itt	cs
 8000cda:	1a5b      	subcs	r3, r3, r1
 8000cdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ce0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ce4:	bf24      	itt	cs
 8000ce6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cf2:	bf24      	itt	cs
 8000cf4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cfc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d00:	bf24      	itt	cs
 8000d02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	bf18      	it	ne
 8000d0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d12:	d1e0      	bne.n	8000cd6 <__aeabi_fdiv+0x46>
 8000d14:	2afd      	cmp	r2, #253	@ 0xfd
 8000d16:	f63f af50 	bhi.w	8000bba <__aeabi_fmul+0x92>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d30:	327f      	adds	r2, #127	@ 0x7f
 8000d32:	bfc2      	ittt	gt
 8000d34:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3c:	4770      	bxgt	lr
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	3a01      	subs	r2, #1
 8000d48:	e737      	b.n	8000bba <__aeabi_fmul+0x92>
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fdiv+0xc2>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fdiv+0xda>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e795      	b.n	8000ca8 <__aeabi_fdiv+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	d108      	bne.n	8000d98 <__aeabi_fdiv+0x108>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	f47f af7d 	bne.w	8000c86 <__aeabi_fmul+0x15e>
 8000d8c:	ea93 0f0c 	teq	r3, ip
 8000d90:	f47f af70 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e776      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000d98:	ea93 0f0c 	teq	r3, ip
 8000d9c:	d104      	bne.n	8000da8 <__aeabi_fdiv+0x118>
 8000d9e:	024b      	lsls	r3, r1, #9
 8000da0:	f43f af4c 	beq.w	8000c3c <__aeabi_fmul+0x114>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e76e      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db2:	d1ca      	bne.n	8000d4a <__aeabi_fdiv+0xba>
 8000db4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000db8:	f47f af5c 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000dbc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000dc0:	f47f af3c 	bne.w	8000c3c <__aeabi_fmul+0x114>
 8000dc4:	e75f      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_f2iz>:
 8000dc8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dcc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000dd0:	d30f      	bcc.n	8000df2 <__aeabi_f2iz+0x2a>
 8000dd2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000dd6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dda:	d90d      	bls.n	8000df8 <__aeabi_f2iz+0x30>
 8000ddc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000de0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000de4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000de8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dec:	bf18      	it	ne
 8000dee:	4240      	negne	r0, r0
 8000df0:	4770      	bx	lr
 8000df2:	f04f 0000 	mov.w	r0, #0
 8000df6:	4770      	bx	lr
 8000df8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000dfc:	d101      	bne.n	8000e02 <__aeabi_f2iz+0x3a>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	d105      	bne.n	8000e0e <__aeabi_f2iz+0x46>
 8000e02:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e0c:	4770      	bx	lr
 8000e0e:	f04f 0000 	mov.w	r0, #0
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_ldivmod>:
 8000e14:	b97b      	cbnz	r3, 8000e36 <__aeabi_ldivmod+0x22>
 8000e16:	b972      	cbnz	r2, 8000e36 <__aeabi_ldivmod+0x22>
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	bfbe      	ittt	lt
 8000e1c:	2000      	movlt	r0, #0
 8000e1e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000e22:	e006      	blt.n	8000e32 <__aeabi_ldivmod+0x1e>
 8000e24:	bf08      	it	eq
 8000e26:	2800      	cmpeq	r0, #0
 8000e28:	bf1c      	itt	ne
 8000e2a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000e2e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e32:	f000 b9bf 	b.w	80011b4 <__aeabi_idiv0>
 8000e36:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e3a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	db09      	blt.n	8000e56 <__aeabi_ldivmod+0x42>
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db1a      	blt.n	8000e7c <__aeabi_ldivmod+0x68>
 8000e46:	f000 f835 	bl	8000eb4 <__udivmoddi4>
 8000e4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e52:	b004      	add	sp, #16
 8000e54:	4770      	bx	lr
 8000e56:	4240      	negs	r0, r0
 8000e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db1b      	blt.n	8000e98 <__aeabi_ldivmod+0x84>
 8000e60:	f000 f828 	bl	8000eb4 <__udivmoddi4>
 8000e64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e6c:	b004      	add	sp, #16
 8000e6e:	4240      	negs	r0, r0
 8000e70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e74:	4252      	negs	r2, r2
 8000e76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e7a:	4770      	bx	lr
 8000e7c:	4252      	negs	r2, r2
 8000e7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e82:	f000 f817 	bl	8000eb4 <__udivmoddi4>
 8000e86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e8e:	b004      	add	sp, #16
 8000e90:	4240      	negs	r0, r0
 8000e92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e96:	4770      	bx	lr
 8000e98:	4252      	negs	r2, r2
 8000e9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e9e:	f000 f809 	bl	8000eb4 <__udivmoddi4>
 8000ea2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eaa:	b004      	add	sp, #16
 8000eac:	4252      	negs	r2, r2
 8000eae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eb2:	4770      	bx	lr

08000eb4 <__udivmoddi4>:
 8000eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb8:	9d08      	ldr	r5, [sp, #32]
 8000eba:	468e      	mov	lr, r1
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	4688      	mov	r8, r1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d14a      	bne.n	8000f5a <__udivmoddi4+0xa6>
 8000ec4:	428a      	cmp	r2, r1
 8000ec6:	4617      	mov	r7, r2
 8000ec8:	d962      	bls.n	8000f90 <__udivmoddi4+0xdc>
 8000eca:	fab2 f682 	clz	r6, r2
 8000ece:	b14e      	cbz	r6, 8000ee4 <__udivmoddi4+0x30>
 8000ed0:	f1c6 0320 	rsb	r3, r6, #32
 8000ed4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ed8:	fa20 f303 	lsr.w	r3, r0, r3
 8000edc:	40b7      	lsls	r7, r6
 8000ede:	ea43 0808 	orr.w	r8, r3, r8
 8000ee2:	40b4      	lsls	r4, r6
 8000ee4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ef4:	fb01 f20c 	mul.w	r2, r1, ip
 8000ef8:	0c23      	lsrs	r3, r4, #16
 8000efa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d909      	bls.n	8000f16 <__udivmoddi4+0x62>
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f08:	f080 80eb 	bcs.w	80010e2 <__udivmoddi4+0x22e>
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f240 80e8 	bls.w	80010e2 <__udivmoddi4+0x22e>
 8000f12:	3902      	subs	r1, #2
 8000f14:	443b      	add	r3, r7
 8000f16:	1a9a      	subs	r2, r3, r2
 8000f18:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f1c:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f20:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f24:	b2a3      	uxth	r3, r4
 8000f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f2a:	459c      	cmp	ip, r3
 8000f2c:	d909      	bls.n	8000f42 <__udivmoddi4+0x8e>
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f34:	f080 80d7 	bcs.w	80010e6 <__udivmoddi4+0x232>
 8000f38:	459c      	cmp	ip, r3
 8000f3a:	f240 80d4 	bls.w	80010e6 <__udivmoddi4+0x232>
 8000f3e:	443b      	add	r3, r7
 8000f40:	3802      	subs	r0, #2
 8000f42:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f46:	2100      	movs	r1, #0
 8000f48:	eba3 030c 	sub.w	r3, r3, ip
 8000f4c:	b11d      	cbz	r5, 8000f56 <__udivmoddi4+0xa2>
 8000f4e:	2200      	movs	r2, #0
 8000f50:	40f3      	lsrs	r3, r6
 8000f52:	e9c5 3200 	strd	r3, r2, [r5]
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d905      	bls.n	8000f6a <__udivmoddi4+0xb6>
 8000f5e:	b10d      	cbz	r5, 8000f64 <__udivmoddi4+0xb0>
 8000f60:	e9c5 0100 	strd	r0, r1, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	4608      	mov	r0, r1
 8000f68:	e7f5      	b.n	8000f56 <__udivmoddi4+0xa2>
 8000f6a:	fab3 f183 	clz	r1, r3
 8000f6e:	2900      	cmp	r1, #0
 8000f70:	d146      	bne.n	8001000 <__udivmoddi4+0x14c>
 8000f72:	4573      	cmp	r3, lr
 8000f74:	d302      	bcc.n	8000f7c <__udivmoddi4+0xc8>
 8000f76:	4282      	cmp	r2, r0
 8000f78:	f200 8108 	bhi.w	800118c <__udivmoddi4+0x2d8>
 8000f7c:	1a84      	subs	r4, r0, r2
 8000f7e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000f82:	2001      	movs	r0, #1
 8000f84:	4690      	mov	r8, r2
 8000f86:	2d00      	cmp	r5, #0
 8000f88:	d0e5      	beq.n	8000f56 <__udivmoddi4+0xa2>
 8000f8a:	e9c5 4800 	strd	r4, r8, [r5]
 8000f8e:	e7e2      	b.n	8000f56 <__udivmoddi4+0xa2>
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	f000 8091 	beq.w	80010b8 <__udivmoddi4+0x204>
 8000f96:	fab2 f682 	clz	r6, r2
 8000f9a:	2e00      	cmp	r6, #0
 8000f9c:	f040 80a5 	bne.w	80010ea <__udivmoddi4+0x236>
 8000fa0:	1a8a      	subs	r2, r1, r2
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	0c03      	lsrs	r3, r0, #16
 8000fa6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	b2bc      	uxth	r4, r7
 8000fae:	fbb2 fcfe 	udiv	ip, r2, lr
 8000fb2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fba:	fb04 f20c 	mul.w	r2, r4, ip
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d907      	bls.n	8000fd2 <__udivmoddi4+0x11e>
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000fc8:	d202      	bcs.n	8000fd0 <__udivmoddi4+0x11c>
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	f200 80e3 	bhi.w	8001196 <__udivmoddi4+0x2e2>
 8000fd0:	46c4      	mov	ip, r8
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000fd8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000fdc:	fb02 f404 	mul.w	r4, r2, r4
 8000fe0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000fe4:	429c      	cmp	r4, r3
 8000fe6:	d907      	bls.n	8000ff8 <__udivmoddi4+0x144>
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	f102 30ff 	add.w	r0, r2, #4294967295
 8000fee:	d202      	bcs.n	8000ff6 <__udivmoddi4+0x142>
 8000ff0:	429c      	cmp	r4, r3
 8000ff2:	f200 80cd 	bhi.w	8001190 <__udivmoddi4+0x2dc>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	1b1b      	subs	r3, r3, r4
 8000ffa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ffe:	e7a5      	b.n	8000f4c <__udivmoddi4+0x98>
 8001000:	f1c1 0620 	rsb	r6, r1, #32
 8001004:	408b      	lsls	r3, r1
 8001006:	fa22 f706 	lsr.w	r7, r2, r6
 800100a:	431f      	orrs	r7, r3
 800100c:	fa2e fa06 	lsr.w	sl, lr, r6
 8001010:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001014:	fbba f8f9 	udiv	r8, sl, r9
 8001018:	fa0e fe01 	lsl.w	lr, lr, r1
 800101c:	fa20 f306 	lsr.w	r3, r0, r6
 8001020:	fb09 aa18 	mls	sl, r9, r8, sl
 8001024:	fa1f fc87 	uxth.w	ip, r7
 8001028:	ea43 030e 	orr.w	r3, r3, lr
 800102c:	fa00 fe01 	lsl.w	lr, r0, r1
 8001030:	fb08 f00c 	mul.w	r0, r8, ip
 8001034:	0c1c      	lsrs	r4, r3, #16
 8001036:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800103a:	42a0      	cmp	r0, r4
 800103c:	fa02 f201 	lsl.w	r2, r2, r1
 8001040:	d90a      	bls.n	8001058 <__udivmoddi4+0x1a4>
 8001042:	193c      	adds	r4, r7, r4
 8001044:	f108 3aff 	add.w	sl, r8, #4294967295
 8001048:	f080 809e 	bcs.w	8001188 <__udivmoddi4+0x2d4>
 800104c:	42a0      	cmp	r0, r4
 800104e:	f240 809b 	bls.w	8001188 <__udivmoddi4+0x2d4>
 8001052:	f1a8 0802 	sub.w	r8, r8, #2
 8001056:	443c      	add	r4, r7
 8001058:	1a24      	subs	r4, r4, r0
 800105a:	b298      	uxth	r0, r3
 800105c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001060:	fb09 4413 	mls	r4, r9, r3, r4
 8001064:	fb03 fc0c 	mul.w	ip, r3, ip
 8001068:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800106c:	45a4      	cmp	ip, r4
 800106e:	d909      	bls.n	8001084 <__udivmoddi4+0x1d0>
 8001070:	193c      	adds	r4, r7, r4
 8001072:	f103 30ff 	add.w	r0, r3, #4294967295
 8001076:	f080 8085 	bcs.w	8001184 <__udivmoddi4+0x2d0>
 800107a:	45a4      	cmp	ip, r4
 800107c:	f240 8082 	bls.w	8001184 <__udivmoddi4+0x2d0>
 8001080:	3b02      	subs	r3, #2
 8001082:	443c      	add	r4, r7
 8001084:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001088:	eba4 040c 	sub.w	r4, r4, ip
 800108c:	fba0 8c02 	umull	r8, ip, r0, r2
 8001090:	4564      	cmp	r4, ip
 8001092:	4643      	mov	r3, r8
 8001094:	46e1      	mov	r9, ip
 8001096:	d364      	bcc.n	8001162 <__udivmoddi4+0x2ae>
 8001098:	d061      	beq.n	800115e <__udivmoddi4+0x2aa>
 800109a:	b15d      	cbz	r5, 80010b4 <__udivmoddi4+0x200>
 800109c:	ebbe 0203 	subs.w	r2, lr, r3
 80010a0:	eb64 0409 	sbc.w	r4, r4, r9
 80010a4:	fa04 f606 	lsl.w	r6, r4, r6
 80010a8:	fa22 f301 	lsr.w	r3, r2, r1
 80010ac:	431e      	orrs	r6, r3
 80010ae:	40cc      	lsrs	r4, r1
 80010b0:	e9c5 6400 	strd	r6, r4, [r5]
 80010b4:	2100      	movs	r1, #0
 80010b6:	e74e      	b.n	8000f56 <__udivmoddi4+0xa2>
 80010b8:	fbb1 fcf2 	udiv	ip, r1, r2
 80010bc:	0c01      	lsrs	r1, r0, #16
 80010be:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80010c2:	b280      	uxth	r0, r0
 80010c4:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80010c8:	463b      	mov	r3, r7
 80010ca:	fbb1 f1f7 	udiv	r1, r1, r7
 80010ce:	4638      	mov	r0, r7
 80010d0:	463c      	mov	r4, r7
 80010d2:	46b8      	mov	r8, r7
 80010d4:	46be      	mov	lr, r7
 80010d6:	2620      	movs	r6, #32
 80010d8:	eba2 0208 	sub.w	r2, r2, r8
 80010dc:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80010e0:	e765      	b.n	8000fae <__udivmoddi4+0xfa>
 80010e2:	4601      	mov	r1, r0
 80010e4:	e717      	b.n	8000f16 <__udivmoddi4+0x62>
 80010e6:	4610      	mov	r0, r2
 80010e8:	e72b      	b.n	8000f42 <__udivmoddi4+0x8e>
 80010ea:	f1c6 0120 	rsb	r1, r6, #32
 80010ee:	fa2e fc01 	lsr.w	ip, lr, r1
 80010f2:	40b7      	lsls	r7, r6
 80010f4:	fa0e fe06 	lsl.w	lr, lr, r6
 80010f8:	fa20 f101 	lsr.w	r1, r0, r1
 80010fc:	ea41 010e 	orr.w	r1, r1, lr
 8001100:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001104:	fbbc f8fe 	udiv	r8, ip, lr
 8001108:	b2bc      	uxth	r4, r7
 800110a:	fb0e cc18 	mls	ip, lr, r8, ip
 800110e:	fb08 f904 	mul.w	r9, r8, r4
 8001112:	0c0a      	lsrs	r2, r1, #16
 8001114:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001118:	40b0      	lsls	r0, r6
 800111a:	4591      	cmp	r9, r2
 800111c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001120:	b280      	uxth	r0, r0
 8001122:	d93e      	bls.n	80011a2 <__udivmoddi4+0x2ee>
 8001124:	18ba      	adds	r2, r7, r2
 8001126:	f108 3cff 	add.w	ip, r8, #4294967295
 800112a:	d201      	bcs.n	8001130 <__udivmoddi4+0x27c>
 800112c:	4591      	cmp	r9, r2
 800112e:	d81f      	bhi.n	8001170 <__udivmoddi4+0x2bc>
 8001130:	eba2 0209 	sub.w	r2, r2, r9
 8001134:	fbb2 f9fe 	udiv	r9, r2, lr
 8001138:	fb09 f804 	mul.w	r8, r9, r4
 800113c:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001140:	b28a      	uxth	r2, r1
 8001142:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001146:	4542      	cmp	r2, r8
 8001148:	d229      	bcs.n	800119e <__udivmoddi4+0x2ea>
 800114a:	18ba      	adds	r2, r7, r2
 800114c:	f109 31ff 	add.w	r1, r9, #4294967295
 8001150:	d2c2      	bcs.n	80010d8 <__udivmoddi4+0x224>
 8001152:	4542      	cmp	r2, r8
 8001154:	d2c0      	bcs.n	80010d8 <__udivmoddi4+0x224>
 8001156:	f1a9 0102 	sub.w	r1, r9, #2
 800115a:	443a      	add	r2, r7
 800115c:	e7bc      	b.n	80010d8 <__udivmoddi4+0x224>
 800115e:	45c6      	cmp	lr, r8
 8001160:	d29b      	bcs.n	800109a <__udivmoddi4+0x1e6>
 8001162:	ebb8 0302 	subs.w	r3, r8, r2
 8001166:	eb6c 0c07 	sbc.w	ip, ip, r7
 800116a:	3801      	subs	r0, #1
 800116c:	46e1      	mov	r9, ip
 800116e:	e794      	b.n	800109a <__udivmoddi4+0x1e6>
 8001170:	eba7 0909 	sub.w	r9, r7, r9
 8001174:	444a      	add	r2, r9
 8001176:	fbb2 f9fe 	udiv	r9, r2, lr
 800117a:	f1a8 0c02 	sub.w	ip, r8, #2
 800117e:	fb09 f804 	mul.w	r8, r9, r4
 8001182:	e7db      	b.n	800113c <__udivmoddi4+0x288>
 8001184:	4603      	mov	r3, r0
 8001186:	e77d      	b.n	8001084 <__udivmoddi4+0x1d0>
 8001188:	46d0      	mov	r8, sl
 800118a:	e765      	b.n	8001058 <__udivmoddi4+0x1a4>
 800118c:	4608      	mov	r0, r1
 800118e:	e6fa      	b.n	8000f86 <__udivmoddi4+0xd2>
 8001190:	443b      	add	r3, r7
 8001192:	3a02      	subs	r2, #2
 8001194:	e730      	b.n	8000ff8 <__udivmoddi4+0x144>
 8001196:	f1ac 0c02 	sub.w	ip, ip, #2
 800119a:	443b      	add	r3, r7
 800119c:	e719      	b.n	8000fd2 <__udivmoddi4+0x11e>
 800119e:	4649      	mov	r1, r9
 80011a0:	e79a      	b.n	80010d8 <__udivmoddi4+0x224>
 80011a2:	eba2 0209 	sub.w	r2, r2, r9
 80011a6:	fbb2 f9fe 	udiv	r9, r2, lr
 80011aa:	46c4      	mov	ip, r8
 80011ac:	fb09 f804 	mul.w	r8, r9, r4
 80011b0:	e7c4      	b.n	800113c <__udivmoddi4+0x288>
 80011b2:	bf00      	nop

080011b4 <__aeabi_idiv0>:
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	@ 0x30
 80011bc:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	9302      	str	r3, [sp, #8]
 80011c4:	2319      	movs	r3, #25
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	463b      	mov	r3, r7
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	2288      	movs	r2, #136	@ 0x88
 80011d0:	21ec      	movs	r1, #236	@ 0xec
 80011d2:	485f      	ldr	r0, [pc, #380]	@ (8001350 <TrimRead+0x198>)
 80011d4:	f002 f8d8 	bl	8003388 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80011d8:	463b      	mov	r3, r7
 80011da:	3319      	adds	r3, #25
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	9202      	str	r2, [sp, #8]
 80011e2:	2207      	movs	r2, #7
 80011e4:	9201      	str	r2, [sp, #4]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	22e1      	movs	r2, #225	@ 0xe1
 80011ec:	21ec      	movs	r1, #236	@ 0xec
 80011ee:	4858      	ldr	r0, [pc, #352]	@ (8001350 <TrimRead+0x198>)
 80011f0:	f002 f8ca 	bl	8003388 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	783b      	ldrb	r3, [r7, #0]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21b      	sxth	r3, r3
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b53      	ldr	r3, [pc, #332]	@ (8001354 <TrimRead+0x19c>)
 8001208:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	b21b      	sxth	r3, r3
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	78bb      	ldrb	r3, [r7, #2]
 8001214:	b21b      	sxth	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b4f      	ldr	r3, [pc, #316]	@ (8001358 <TrimRead+0x1a0>)
 800121c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800121e:	797b      	ldrb	r3, [r7, #5]
 8001220:	b21b      	sxth	r3, r3
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	793b      	ldrb	r3, [r7, #4]
 8001228:	b21b      	sxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b21a      	sxth	r2, r3
 800122e:	4b4b      	ldr	r3, [pc, #300]	@ (800135c <TrimRead+0x1a4>)
 8001230:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	b21b      	sxth	r3, r3
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	797b      	ldrb	r3, [r7, #5]
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21b      	sxth	r3, r3
 8001242:	b29a      	uxth	r2, r3
 8001244:	4b46      	ldr	r3, [pc, #280]	@ (8001360 <TrimRead+0x1a8>)
 8001246:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001248:	7a7b      	ldrb	r3, [r7, #9]
 800124a:	b21b      	sxth	r3, r3
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	4b42      	ldr	r3, [pc, #264]	@ (8001364 <TrimRead+0x1ac>)
 800125a:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	b21b      	sxth	r3, r3
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	7abb      	ldrb	r3, [r7, #10]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b3e      	ldr	r3, [pc, #248]	@ (8001368 <TrimRead+0x1b0>)
 800126e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001270:	7b7b      	ldrb	r3, [r7, #13]
 8001272:	b21b      	sxth	r3, r3
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21a      	sxth	r2, r3
 8001278:	7b3b      	ldrb	r3, [r7, #12]
 800127a:	b21b      	sxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b21a      	sxth	r2, r3
 8001280:	4b3a      	ldr	r3, [pc, #232]	@ (800136c <TrimRead+0x1b4>)
 8001282:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	b21b      	sxth	r3, r3
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21a      	sxth	r2, r3
 8001294:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <TrimRead+0x1b8>)
 8001296:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001298:	7c7b      	ldrb	r3, [r7, #17]
 800129a:	b21b      	sxth	r3, r3
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21a      	sxth	r2, r3
 80012a0:	7c3b      	ldrb	r3, [r7, #16]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	4b32      	ldr	r3, [pc, #200]	@ (8001374 <TrimRead+0x1bc>)
 80012aa:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80012ac:	7cfb      	ldrb	r3, [r7, #19]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	7cbb      	ldrb	r3, [r7, #18]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001378 <TrimRead+0x1c0>)
 80012be:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80012c0:	7d7b      	ldrb	r3, [r7, #21]
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	7d3b      	ldrb	r3, [r7, #20]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	4b2a      	ldr	r3, [pc, #168]	@ (800137c <TrimRead+0x1c4>)
 80012d2:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	7dbb      	ldrb	r3, [r7, #22]
 80012de:	b21b      	sxth	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	4b26      	ldr	r3, [pc, #152]	@ (8001380 <TrimRead+0x1c8>)
 80012e6:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80012e8:	7e3b      	ldrb	r3, [r7, #24]
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b25      	ldr	r3, [pc, #148]	@ (8001384 <TrimRead+0x1cc>)
 80012ee:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80012f0:	7ebb      	ldrb	r3, [r7, #26]
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	7e7b      	ldrb	r3, [r7, #25]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b21a      	sxth	r2, r3
 8001300:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <TrimRead+0x1d0>)
 8001302:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001304:	7efb      	ldrb	r3, [r7, #27]
 8001306:	461a      	mov	r2, r3
 8001308:	4b20      	ldr	r3, [pc, #128]	@ (800138c <TrimRead+0x1d4>)
 800130a:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800130c:	7f3b      	ldrb	r3, [r7, #28]
 800130e:	b21b      	sxth	r3, r3
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	b21a      	sxth	r2, r3
 8001314:	7f7b      	ldrb	r3, [r7, #29]
 8001316:	b21b      	sxth	r3, r3
 8001318:	f003 030f 	and.w	r3, r3, #15
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <TrimRead+0x1d8>)
 8001324:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001326:	7fbb      	ldrb	r3, [r7, #30]
 8001328:	b21b      	sxth	r3, r3
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	b21a      	sxth	r2, r3
 800132e:	7f7b      	ldrb	r3, [r7, #29]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	b2db      	uxtb	r3, r3
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <TrimRead+0x1dc>)
 800133c:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 800133e:	7ffb      	ldrb	r3, [r7, #31]
 8001340:	b21a      	sxth	r2, r3
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <TrimRead+0x1e0>)
 8001344:	801a      	strh	r2, [r3, #0]
}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000224 	.word	0x20000224
 8001354:	200001fc 	.word	0x200001fc
 8001358:	20000204 	.word	0x20000204
 800135c:	20000206 	.word	0x20000206
 8001360:	200001fe 	.word	0x200001fe
 8001364:	20000208 	.word	0x20000208
 8001368:	2000020a 	.word	0x2000020a
 800136c:	2000020c 	.word	0x2000020c
 8001370:	2000020e 	.word	0x2000020e
 8001374:	20000210 	.word	0x20000210
 8001378:	20000212 	.word	0x20000212
 800137c:	20000214 	.word	0x20000214
 8001380:	20000216 	.word	0x20000216
 8001384:	20000200 	.word	0x20000200
 8001388:	20000218 	.word	0x20000218
 800138c:	20000202 	.word	0x20000202
 8001390:	2000021a 	.word	0x2000021a
 8001394:	2000021c 	.word	0x2000021c
 8001398:	2000021e 	.word	0x2000021e

0800139c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b089      	sub	sp, #36	@ 0x24
 80013a0:	af04      	add	r7, sp, #16
 80013a2:	4604      	mov	r4, r0
 80013a4:	4608      	mov	r0, r1
 80013a6:	4611      	mov	r1, r2
 80013a8:	461a      	mov	r2, r3
 80013aa:	4623      	mov	r3, r4
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	4603      	mov	r3, r0
 80013b0:	71bb      	strb	r3, [r7, #6]
 80013b2:	460b      	mov	r3, r1
 80013b4:	717b      	strb	r3, [r7, #5]
 80013b6:	4613      	mov	r3, r2
 80013b8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80013ba:	f7ff fefd 	bl	80011b8 <TrimRead>


	uint8_t datatowrite = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80013c6:	23b6      	movs	r3, #182	@ 0xb6
 80013c8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f107 030f 	add.w	r3, r7, #15
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	22e0      	movs	r2, #224	@ 0xe0
 80013de:	21ec      	movs	r1, #236	@ 0xec
 80013e0:	4842      	ldr	r0, [pc, #264]	@ (80014ec <BME280_Config+0x150>)
 80013e2:	f001 fed7 	bl	8003194 <HAL_I2C_Mem_Write>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <BME280_Config+0x56>
	{
		return -1;
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	e077      	b.n	80014e2 <BME280_Config+0x146>
	}

	HAL_Delay (100);
 80013f2:	2064      	movs	r0, #100	@ 0x64
 80013f4:	f001 fa44 	bl	8002880 <HAL_Delay>
	// write the humidity oversampling to 0xF2



	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80013f8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80013fc:	015b      	lsls	r3, r3, #5
 80013fe:	b25a      	sxtb	r2, r3
 8001400:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	b25b      	sxtb	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b25b      	sxtb	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001410:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030f 	add.w	r3, r7, #15
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	22f5      	movs	r2, #245	@ 0xf5
 8001424:	21ec      	movs	r1, #236	@ 0xec
 8001426:	4831      	ldr	r0, [pc, #196]	@ (80014ec <BME280_Config+0x150>)
 8001428:	f001 feb4 	bl	8003194 <HAL_I2C_Mem_Write>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <BME280_Config+0x9c>
	{
		return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e054      	b.n	80014e2 <BME280_Config+0x146>
	}
	HAL_Delay (100);
 8001438:	2064      	movs	r0, #100	@ 0x64
 800143a:	f001 fa21 	bl	8002880 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800143e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	f107 030e 	add.w	r3, r7, #14
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	22f5      	movs	r2, #245	@ 0xf5
 8001452:	21ec      	movs	r1, #236	@ 0xec
 8001454:	4825      	ldr	r0, [pc, #148]	@ (80014ec <BME280_Config+0x150>)
 8001456:	f001 ff97 	bl	8003388 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800145a:	7bba      	ldrb	r2, [r7, #14]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	429a      	cmp	r2, r3
 8001460:	d002      	beq.n	8001468 <BME280_Config+0xcc>
	{
		return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e03c      	b.n	80014e2 <BME280_Config+0x146>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	015b      	lsls	r3, r3, #5
 800146e:	b25a      	sxtb	r2, r3
 8001470:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	b25b      	sxtb	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b25a      	sxtb	r2, r3
 800147c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001480:	4313      	orrs	r3, r2
 8001482:	b25b      	sxtb	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001488:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	2301      	movs	r3, #1
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	f107 030f 	add.w	r3, r7, #15
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2301      	movs	r3, #1
 800149a:	22f4      	movs	r2, #244	@ 0xf4
 800149c:	21ec      	movs	r1, #236	@ 0xec
 800149e:	4813      	ldr	r0, [pc, #76]	@ (80014ec <BME280_Config+0x150>)
 80014a0:	f001 fe78 	bl	8003194 <HAL_I2C_Mem_Write>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <BME280_Config+0x114>
	{
		return -1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e018      	b.n	80014e2 <BME280_Config+0x146>
	}
	HAL_Delay (100);
 80014b0:	2064      	movs	r0, #100	@ 0x64
 80014b2:	f001 f9e5 	bl	8002880 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80014b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ba:	9302      	str	r3, [sp, #8]
 80014bc:	2301      	movs	r3, #1
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	f107 030e 	add.w	r3, r7, #14
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	2301      	movs	r3, #1
 80014c8:	22f4      	movs	r2, #244	@ 0xf4
 80014ca:	21ec      	movs	r1, #236	@ 0xec
 80014cc:	4807      	ldr	r0, [pc, #28]	@ (80014ec <BME280_Config+0x150>)
 80014ce:	f001 ff5b 	bl	8003388 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80014d2:	7bba      	ldrb	r2, [r7, #14]
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d002      	beq.n	80014e0 <BME280_Config+0x144>
	{
		return -1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	e000      	b.n	80014e2 <BME280_Config+0x146>
	}

	return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000224 	.word	0x20000224

080014f0 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80014f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	2301      	movs	r3, #1
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <BMEReadRaw+0x80>)
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	22d0      	movs	r2, #208	@ 0xd0
 8001508:	21ec      	movs	r1, #236	@ 0xec
 800150a:	481a      	ldr	r0, [pc, #104]	@ (8001574 <BMEReadRaw+0x84>)
 800150c:	f001 ff3c 	bl	8003388 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001510:	4b17      	ldr	r3, [pc, #92]	@ (8001570 <BMEReadRaw+0x80>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b60      	cmp	r3, #96	@ 0x60
 8001516:	d124      	bne.n	8001562 <BMEReadRaw+0x72>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	2308      	movs	r3, #8
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	463b      	mov	r3, r7
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2301      	movs	r3, #1
 8001528:	22f7      	movs	r2, #247	@ 0xf7
 800152a:	21ec      	movs	r1, #236	@ 0xec
 800152c:	4811      	ldr	r0, [pc, #68]	@ (8001574 <BMEReadRaw+0x84>)
 800152e:	f001 ff2b 	bl	8003388 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001532:	783b      	ldrb	r3, [r7, #0]
 8001534:	031a      	lsls	r2, r3, #12
 8001536:	787b      	ldrb	r3, [r7, #1]
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	4313      	orrs	r3, r2
 800153c:	78ba      	ldrb	r2, [r7, #2]
 800153e:	0912      	lsrs	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	4313      	orrs	r3, r2
 8001544:	4a0c      	ldr	r2, [pc, #48]	@ (8001578 <BMEReadRaw+0x88>)
 8001546:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	031a      	lsls	r2, r3, #12
 800154c:	793b      	ldrb	r3, [r7, #4]
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	4313      	orrs	r3, r2
 8001552:	797a      	ldrb	r2, [r7, #5]
 8001554:	0912      	lsrs	r2, r2, #4
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	4313      	orrs	r3, r2
 800155a:	4a08      	ldr	r2, [pc, #32]	@ (800157c <BMEReadRaw+0x8c>)
 800155c:	6013      	str	r3, [r2, #0]


		return 0;
 800155e:	2300      	movs	r3, #0
 8001560:	e001      	b.n	8001566 <BMEReadRaw+0x76>
	}

	else return -1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200001f0 	.word	0x200001f0
 8001574:	20000224 	.word	0x20000224
 8001578:	200001f8 	.word	0x200001f8
 800157c:	200001f4 	.word	0x200001f4

08001580 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	10da      	asrs	r2, r3, #3
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <BME280_compensate_T_int32+0x70>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	4a17      	ldr	r2, [pc, #92]	@ (80015f4 <BME280_compensate_T_int32+0x74>)
 8001596:	f9b2 2000 	ldrsh.w	r2, [r2]
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	12db      	asrs	r3, r3, #11
 80015a0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	111b      	asrs	r3, r3, #4
 80015a6:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <BME280_compensate_T_int32+0x70>)
 80015a8:	8812      	ldrh	r2, [r2, #0]
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	1112      	asrs	r2, r2, #4
 80015b0:	490f      	ldr	r1, [pc, #60]	@ (80015f0 <BME280_compensate_T_int32+0x70>)
 80015b2:	8809      	ldrh	r1, [r1, #0]
 80015b4:	1a52      	subs	r2, r2, r1
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	131b      	asrs	r3, r3, #12
 80015bc:	4a0e      	ldr	r2, [pc, #56]	@ (80015f8 <BME280_compensate_T_int32+0x78>)
 80015be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	139b      	asrs	r3, r3, #14
 80015c8:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <BME280_compensate_T_int32+0x7c>)
 80015d2:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <BME280_compensate_T_int32+0x7c>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	3380      	adds	r3, #128	@ 0x80
 80015e0:	121b      	asrs	r3, r3, #8
 80015e2:	60fb      	str	r3, [r7, #12]
	return T;
 80015e4:	68fb      	ldr	r3, [r7, #12]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	200001fc 	.word	0x200001fc
 80015f4:	20000204 	.word	0x20000204
 80015f8:	20000206 	.word	0x20000206
 80015fc:	20000220 	.word	0x20000220

08001600 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001604:	b0ca      	sub	sp, #296	@ 0x128
 8001606:	af00      	add	r7, sp, #0
 8001608:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800160c:	4bae      	ldr	r3, [pc, #696]	@ (80018c8 <BME280_compensate_P_int64+0x2c8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	17da      	asrs	r2, r3, #31
 8001612:	461c      	mov	r4, r3
 8001614:	4615      	mov	r5, r2
 8001616:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800161a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800161e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001622:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001626:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800162a:	fb03 f102 	mul.w	r1, r3, r2
 800162e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001632:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	18ca      	adds	r2, r1, r3
 800163c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001640:	fba3 8903 	umull	r8, r9, r3, r3
 8001644:	eb02 0309 	add.w	r3, r2, r9
 8001648:	4699      	mov	r9, r3
 800164a:	4ba0      	ldr	r3, [pc, #640]	@ (80018cc <BME280_compensate_P_int64+0x2cc>)
 800164c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001650:	b21b      	sxth	r3, r3
 8001652:	17da      	asrs	r2, r3, #31
 8001654:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001658:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800165c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001660:	4603      	mov	r3, r0
 8001662:	fb03 f209 	mul.w	r2, r3, r9
 8001666:	460b      	mov	r3, r1
 8001668:	fb08 f303 	mul.w	r3, r8, r3
 800166c:	4413      	add	r3, r2
 800166e:	4602      	mov	r2, r0
 8001670:	fba8 2102 	umull	r2, r1, r8, r2
 8001674:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001678:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800167c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001680:	4413      	add	r3, r2
 8001682:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001686:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800168a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800168e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001692:	4b8f      	ldr	r3, [pc, #572]	@ (80018d0 <BME280_compensate_P_int64+0x2d0>)
 8001694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001698:	b21b      	sxth	r3, r3
 800169a:	17da      	asrs	r2, r3, #31
 800169c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80016a0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80016a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016a8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80016ac:	462a      	mov	r2, r5
 80016ae:	fb02 f203 	mul.w	r2, r2, r3
 80016b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80016b6:	4621      	mov	r1, r4
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	441a      	add	r2, r3
 80016be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016c2:	4621      	mov	r1, r4
 80016c4:	fba3 3101 	umull	r3, r1, r3, r1
 80016c8:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80016cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80016d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80016d4:	18d3      	adds	r3, r2, r3
 80016d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016da:	f04f 0000 	mov.w	r0, #0
 80016de:	f04f 0100 	mov.w	r1, #0
 80016e2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80016e6:	462b      	mov	r3, r5
 80016e8:	0459      	lsls	r1, r3, #17
 80016ea:	4622      	mov	r2, r4
 80016ec:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80016f0:	4623      	mov	r3, r4
 80016f2:	0458      	lsls	r0, r3, #17
 80016f4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80016f8:	1814      	adds	r4, r2, r0
 80016fa:	643c      	str	r4, [r7, #64]	@ 0x40
 80016fc:	414b      	adcs	r3, r1
 80016fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001700:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001704:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001708:	4b72      	ldr	r3, [pc, #456]	@ (80018d4 <BME280_compensate_P_int64+0x2d4>)
 800170a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170e:	b21b      	sxth	r3, r3
 8001710:	17da      	asrs	r2, r3, #31
 8001712:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001716:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800171a:	f04f 0000 	mov.w	r0, #0
 800171e:	f04f 0100 	mov.w	r1, #0
 8001722:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001726:	00d9      	lsls	r1, r3, #3
 8001728:	2000      	movs	r0, #0
 800172a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800172e:	1814      	adds	r4, r2, r0
 8001730:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001732:	414b      	adcs	r3, r1
 8001734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001736:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800173a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800173e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001742:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001746:	fb03 f102 	mul.w	r1, r3, r2
 800174a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800174e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001752:	fb02 f303 	mul.w	r3, r2, r3
 8001756:	18ca      	adds	r2, r1, r3
 8001758:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800175c:	fba3 3103 	umull	r3, r1, r3, r3
 8001760:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001764:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800176c:	18d3      	adds	r3, r2, r3
 800176e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001772:	4b59      	ldr	r3, [pc, #356]	@ (80018d8 <BME280_compensate_P_int64+0x2d8>)
 8001774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001778:	b21b      	sxth	r3, r3
 800177a:	17da      	asrs	r2, r3, #31
 800177c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001780:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001784:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8001788:	4622      	mov	r2, r4
 800178a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800178e:	4641      	mov	r1, r8
 8001790:	fb01 f202 	mul.w	r2, r1, r2
 8001794:	464d      	mov	r5, r9
 8001796:	4618      	mov	r0, r3
 8001798:	4621      	mov	r1, r4
 800179a:	4603      	mov	r3, r0
 800179c:	fb03 f305 	mul.w	r3, r3, r5
 80017a0:	4413      	add	r3, r2
 80017a2:	4602      	mov	r2, r0
 80017a4:	4641      	mov	r1, r8
 80017a6:	fba2 2101 	umull	r2, r1, r2, r1
 80017aa:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 80017ae:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80017b2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80017b6:	4413      	add	r3, r2
 80017b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80017bc:	f04f 0000 	mov.w	r0, #0
 80017c0:	f04f 0100 	mov.w	r1, #0
 80017c4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80017c8:	4623      	mov	r3, r4
 80017ca:	0a18      	lsrs	r0, r3, #8
 80017cc:	462a      	mov	r2, r5
 80017ce:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80017d2:	462b      	mov	r3, r5
 80017d4:	1219      	asrs	r1, r3, #8
 80017d6:	4b41      	ldr	r3, [pc, #260]	@ (80018dc <BME280_compensate_P_int64+0x2dc>)
 80017d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	17da      	asrs	r2, r3, #31
 80017e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80017e4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80017e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017ec:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80017f0:	464a      	mov	r2, r9
 80017f2:	fb02 f203 	mul.w	r2, r2, r3
 80017f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017fa:	4644      	mov	r4, r8
 80017fc:	fb04 f303 	mul.w	r3, r4, r3
 8001800:	441a      	add	r2, r3
 8001802:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001806:	4644      	mov	r4, r8
 8001808:	fba3 3404 	umull	r3, r4, r3, r4
 800180c:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001810:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001814:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001818:	18d3      	adds	r3, r2, r3
 800181a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800182a:	464c      	mov	r4, r9
 800182c:	0323      	lsls	r3, r4, #12
 800182e:	46c4      	mov	ip, r8
 8001830:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001834:	4644      	mov	r4, r8
 8001836:	0322      	lsls	r2, r4, #12
 8001838:	1884      	adds	r4, r0, r2
 800183a:	633c      	str	r4, [r7, #48]	@ 0x30
 800183c:	eb41 0303 	adc.w	r3, r1, r3
 8001840:	637b      	str	r3, [r7, #52]	@ 0x34
 8001842:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001846:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800184a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800184e:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001852:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001856:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800185a:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <BME280_compensate_P_int64+0x2e0>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	2200      	movs	r2, #0
 8001862:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001866:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800186a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 800186e:	4622      	mov	r2, r4
 8001870:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001874:	4641      	mov	r1, r8
 8001876:	fb01 f202 	mul.w	r2, r1, r2
 800187a:	464d      	mov	r5, r9
 800187c:	4618      	mov	r0, r3
 800187e:	4621      	mov	r1, r4
 8001880:	4603      	mov	r3, r0
 8001882:	fb03 f305 	mul.w	r3, r3, r5
 8001886:	4413      	add	r3, r2
 8001888:	4602      	mov	r2, r0
 800188a:	4641      	mov	r1, r8
 800188c:	fba2 2101 	umull	r2, r1, r2, r1
 8001890:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001894:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001898:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800189c:	4413      	add	r3, r2
 800189e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80018ae:	4629      	mov	r1, r5
 80018b0:	104a      	asrs	r2, r1, #1
 80018b2:	4629      	mov	r1, r5
 80018b4:	17cb      	asrs	r3, r1, #31
 80018b6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80018ba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80018be:	4313      	orrs	r3, r2
 80018c0:	d110      	bne.n	80018e4 <BME280_compensate_P_int64+0x2e4>
	{
		return 0; // avoid exception caused by division by zero
 80018c2:	2300      	movs	r3, #0
 80018c4:	e152      	b.n	8001b6c <BME280_compensate_P_int64+0x56c>
 80018c6:	bf00      	nop
 80018c8:	20000220 	.word	0x20000220
 80018cc:	20000210 	.word	0x20000210
 80018d0:	2000020e 	.word	0x2000020e
 80018d4:	2000020c 	.word	0x2000020c
 80018d8:	2000020a 	.word	0x2000020a
 80018dc:	20000208 	.word	0x20000208
 80018e0:	200001fe 	.word	0x200001fe
	}
	p = 1048576-adc_P;
 80018e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80018e8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80018ec:	17da      	asrs	r2, r3, #31
 80018ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018f2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80018f6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80018fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018fe:	105b      	asrs	r3, r3, #1
 8001900:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001904:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001908:	07db      	lsls	r3, r3, #31
 800190a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800190e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001912:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001916:	4604      	mov	r4, r0
 8001918:	1aa4      	subs	r4, r4, r2
 800191a:	67bc      	str	r4, [r7, #120]	@ 0x78
 800191c:	eb61 0303 	sbc.w	r3, r1, r3
 8001920:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001922:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001926:	4622      	mov	r2, r4
 8001928:	462b      	mov	r3, r5
 800192a:	1891      	adds	r1, r2, r2
 800192c:	6239      	str	r1, [r7, #32]
 800192e:	415b      	adcs	r3, r3
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
 8001932:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001936:	4621      	mov	r1, r4
 8001938:	1851      	adds	r1, r2, r1
 800193a:	61b9      	str	r1, [r7, #24]
 800193c:	4629      	mov	r1, r5
 800193e:	414b      	adcs	r3, r1
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800194e:	4649      	mov	r1, r9
 8001950:	018b      	lsls	r3, r1, #6
 8001952:	4641      	mov	r1, r8
 8001954:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001958:	4641      	mov	r1, r8
 800195a:	018a      	lsls	r2, r1, #6
 800195c:	4641      	mov	r1, r8
 800195e:	1889      	adds	r1, r1, r2
 8001960:	6139      	str	r1, [r7, #16]
 8001962:	4649      	mov	r1, r9
 8001964:	eb43 0101 	adc.w	r1, r3, r1
 8001968:	6179      	str	r1, [r7, #20]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001976:	4649      	mov	r1, r9
 8001978:	008b      	lsls	r3, r1, #2
 800197a:	46c4      	mov	ip, r8
 800197c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001980:	4641      	mov	r1, r8
 8001982:	008a      	lsls	r2, r1, #2
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	4603      	mov	r3, r0
 800198a:	4622      	mov	r2, r4
 800198c:	189b      	adds	r3, r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	460b      	mov	r3, r1
 8001992:	462a      	mov	r2, r5
 8001994:	eb42 0303 	adc.w	r3, r2, r3
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80019a6:	4649      	mov	r1, r9
 80019a8:	008b      	lsls	r3, r1, #2
 80019aa:	46c4      	mov	ip, r8
 80019ac:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80019b0:	4641      	mov	r1, r8
 80019b2:	008a      	lsls	r2, r1, #2
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	4603      	mov	r3, r0
 80019ba:	4622      	mov	r2, r4
 80019bc:	189b      	adds	r3, r3, r2
 80019be:	673b      	str	r3, [r7, #112]	@ 0x70
 80019c0:	462b      	mov	r3, r5
 80019c2:	460a      	mov	r2, r1
 80019c4:	eb42 0303 	adc.w	r3, r2, r3
 80019c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80019ca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019ce:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80019d2:	f7ff fa1f 	bl	8000e14 <__aeabi_ldivmod>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80019de:	4b66      	ldr	r3, [pc, #408]	@ (8001b78 <BME280_compensate_P_int64+0x578>)
 80019e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	17da      	asrs	r2, r3, #31
 80019e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019ec:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80019f0:	f04f 0000 	mov.w	r0, #0
 80019f4:	f04f 0100 	mov.w	r1, #0
 80019f8:	0b50      	lsrs	r0, r2, #13
 80019fa:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019fe:	1359      	asrs	r1, r3, #13
 8001a00:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a04:	462b      	mov	r3, r5
 8001a06:	fb00 f203 	mul.w	r2, r0, r3
 8001a0a:	4623      	mov	r3, r4
 8001a0c:	fb03 f301 	mul.w	r3, r3, r1
 8001a10:	4413      	add	r3, r2
 8001a12:	4622      	mov	r2, r4
 8001a14:	fba2 2100 	umull	r2, r1, r2, r0
 8001a18:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001a1c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001a20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001a24:	4413      	add	r3, r2
 8001a26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001a2a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a2e:	f04f 0000 	mov.w	r0, #0
 8001a32:	f04f 0100 	mov.w	r1, #0
 8001a36:	0b50      	lsrs	r0, r2, #13
 8001a38:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a3c:	1359      	asrs	r1, r3, #13
 8001a3e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001a42:	462b      	mov	r3, r5
 8001a44:	fb00 f203 	mul.w	r2, r0, r3
 8001a48:	4623      	mov	r3, r4
 8001a4a:	fb03 f301 	mul.w	r3, r3, r1
 8001a4e:	4413      	add	r3, r2
 8001a50:	4622      	mov	r2, r4
 8001a52:	fba2 2100 	umull	r2, r1, r2, r0
 8001a56:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001a5a:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a5e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a62:	4413      	add	r3, r2
 8001a64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001a74:	4621      	mov	r1, r4
 8001a76:	0e4a      	lsrs	r2, r1, #25
 8001a78:	4620      	mov	r0, r4
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	460c      	mov	r4, r1
 8001a7e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001a82:	164b      	asrs	r3, r1, #25
 8001a84:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001a88:	4b3c      	ldr	r3, [pc, #240]	@ (8001b7c <BME280_compensate_P_int64+0x57c>)
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	17da      	asrs	r2, r3, #31
 8001a92:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a94:	667a      	str	r2, [r7, #100]	@ 0x64
 8001a96:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a9a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a9e:	462a      	mov	r2, r5
 8001aa0:	fb02 f203 	mul.w	r2, r2, r3
 8001aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	fba2 2101 	umull	r2, r1, r2, r1
 8001aba:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001abe:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001ac2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001ad8:	4621      	mov	r1, r4
 8001ada:	0cca      	lsrs	r2, r1, #19
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001ae6:	14cb      	asrs	r3, r1, #19
 8001ae8:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001aec:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001af0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001af4:	1884      	adds	r4, r0, r2
 8001af6:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001af8:	eb41 0303 	adc.w	r3, r1, r3
 8001afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001afe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b02:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001b06:	4621      	mov	r1, r4
 8001b08:	1889      	adds	r1, r1, r2
 8001b0a:	6539      	str	r1, [r7, #80]	@ 0x50
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	eb43 0101 	adc.w	r1, r3, r1
 8001b12:	6579      	str	r1, [r7, #84]	@ 0x54
 8001b14:	f04f 0000 	mov.w	r0, #0
 8001b18:	f04f 0100 	mov.w	r1, #0
 8001b1c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001b20:	4623      	mov	r3, r4
 8001b22:	0a18      	lsrs	r0, r3, #8
 8001b24:	462a      	mov	r2, r5
 8001b26:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001b2a:	462b      	mov	r3, r5
 8001b2c:	1219      	asrs	r1, r3, #8
 8001b2e:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <BME280_compensate_P_int64+0x580>)
 8001b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	17da      	asrs	r2, r3, #31
 8001b38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b3a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001b48:	464c      	mov	r4, r9
 8001b4a:	0123      	lsls	r3, r4, #4
 8001b4c:	46c4      	mov	ip, r8
 8001b4e:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001b52:	4644      	mov	r4, r8
 8001b54:	0122      	lsls	r2, r4, #4
 8001b56:	1884      	adds	r4, r0, r2
 8001b58:	603c      	str	r4, [r7, #0]
 8001b5a:	eb41 0303 	adc.w	r3, r1, r3
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b64:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001b68:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001b72:	46bd      	mov	sp, r7
 8001b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b78:	20000216 	.word	0x20000216
 8001b7c:	20000214 	.word	0x20000214
 8001b80:	20000212 	.word	0x20000212

08001b84 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001b88:	f7ff fcb2 	bl	80014f0 <BMEReadRaw>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d142      	bne.n	8001c18 <BME280_Measure+0x94>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001b92:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <BME280_Measure+0xa8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b9a:	d104      	bne.n	8001ba6 <BME280_Measure+0x22>
 8001b9c:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <BME280_Measure+0xac>)
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e016      	b.n	8001bd4 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001ba6:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <BME280_Measure+0xa8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fce8 	bl	8001580 <BME280_compensate_T_int32>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fc26 	bl	8000404 <__aeabi_i2d>
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <BME280_Measure+0xb0>)
 8001bbe:	f7fe fdb5 	bl	800072c <__aeabi_ddiv>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe ff5d 	bl	8000a88 <__aeabi_d2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a17      	ldr	r2, [pc, #92]	@ (8001c30 <BME280_Measure+0xac>)
 8001bd2:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001bd4:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <BME280_Measure+0xb4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001bdc:	d104      	bne.n	8001be8 <BME280_Measure+0x64>
 8001bde:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <BME280_Measure+0xb8>)
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = 0;
	}
}
 8001be6:	e01f      	b.n	8001c28 <BME280_Measure+0xa4>
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001be8:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <BME280_Measure+0xb4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fd07 	bl	8001600 <BME280_compensate_P_int64>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fbf5 	bl	80003e4 <__aeabi_ui2d>
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <BME280_Measure+0xbc>)
 8001c00:	f7fe fd94 	bl	800072c <__aeabi_ddiv>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7fe ff3c 	bl	8000a88 <__aeabi_d2f>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <BME280_Measure+0xb8>)
 8001c14:	6013      	str	r3, [r2, #0]
}
 8001c16:	e007      	b.n	8001c28 <BME280_Measure+0xa4>
		Temperature = Pressure = 0;
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <BME280_Measure+0xb8>)
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <BME280_Measure+0xb8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a02      	ldr	r2, [pc, #8]	@ (8001c30 <BME280_Measure+0xac>)
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200001f4 	.word	0x200001f4
 8001c30:	200003a8 	.word	0x200003a8
 8001c34:	40590000 	.word	0x40590000
 8001c38:	200001f8 	.word	0x200001f8
 8001c3c:	200003ac 	.word	0x200003ac
 8001c40:	40700000 	.word	0x40700000

08001c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
    /* MCU Configuration */
    HAL_Init();
 8001c4a:	f000 fdb7 	bl	80027bc <HAL_Init>
    SystemClock_Config();
 8001c4e:	f000 f9ad 	bl	8001fac <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001c52:	f000 fac9 	bl	80021e8 <MX_GPIO_Init>
    MX_I2C1_Init();
 8001c56:	f000 f9e5 	bl	8002024 <MX_I2C1_Init>
    MX_SPI1_Init();
 8001c5a:	f000 fa11 	bl	8002080 <MX_SPI1_Init>
    MX_USART1_UART_Init();
 8001c5e:	f000 fa45 	bl	80020ec <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 8001c62:	f000 fa6d 	bl	8002140 <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 8001c66:	f000 fa95 	bl	8002194 <MX_USART3_UART_Init>

    /* Initialize sensors */
    initialize_sensors();
 8001c6a:	f000 f81d 	bl	8001ca8 <initialize_sensors>

    /* Infinite loop */
    while (1)
    {
        // Read BME280 environmental data
        read_bme280_data();
 8001c6e:	f000 f82b 	bl	8001cc8 <read_bme280_data>

        // Read IMU data
        read_accelerometer_data(&accel_data);
 8001c72:	f107 0308 	add.w	r3, r7, #8
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f866 	bl	8001d48 <read_accelerometer_data>
        read_gyroscope_data(&gyro_data);
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f88c 	bl	8001d9c <read_gyroscope_data>

        // Transmit accelerometer data via UART
        transmit_sensor_packet(altitude, &accel_data, &gyro_data);
 8001c84:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <main+0x60>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f89d 	bl	8000dc8 <__aeabi_f2iz>
 8001c8e:	463a      	mov	r2, r7
 8001c90:	f107 0308 	add.w	r3, r7, #8
 8001c94:	4619      	mov	r1, r3
 8001c96:	f000 f8ab 	bl	8001df0 <transmit_sensor_packet>

        // Wait before next measurement
        HAL_Delay(MEASUREMENT_DELAY);
 8001c9a:	20c8      	movs	r0, #200	@ 0xc8
 8001c9c:	f000 fdf0 	bl	8002880 <HAL_Delay>
        read_bme280_data();
 8001ca0:	bf00      	nop
 8001ca2:	e7e4      	b.n	8001c6e <main+0x2a>
 8001ca4:	200003b0 	.word	0x200003b0

08001ca8 <initialize_sensors>:
  * @brief Initialize sensors
  * @param None
  * @retval None
  */
void initialize_sensors(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af02      	add	r7, sp, #8
    // Configure BME280 sensor
    BME280_Config(OSRS_2, OSRS_2, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001cae:	2304      	movs	r3, #4
 8001cb0:	9301      	str	r3, [sp, #4]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2102      	movs	r1, #2
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	f7ff fb6d 	bl	800139c <BME280_Config>
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <read_bme280_data>:
  * @brief Read BME280 environmental data
  * @param None
  * @retval None
  */
void read_bme280_data(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
    BME280_Measure();
 8001ccc:	f7ff ff5a 	bl	8001b84 <BME280_Measure>
    altitude = 44330 * (1 - pow((Pressure/101325), (1/5.225)));
 8001cd0:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <read_bme280_data+0x70>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4919      	ldr	r1, [pc, #100]	@ (8001d3c <read_bme280_data+0x74>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe ffda 	bl	8000c90 <__aeabi_fdiv>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fba2 	bl	8000428 <__aeabi_f2d>
 8001ce4:	a310      	add	r3, pc, #64	@ (adr r3, 8001d28 <read_bme280_data+0x60>)
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	f006 fc9b 	bl	8008624 <pow>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	f04f 0000 	mov.w	r0, #0
 8001cf6:	4912      	ldr	r1, [pc, #72]	@ (8001d40 <read_bme280_data+0x78>)
 8001cf8:	f7fe fa36 	bl	8000168 <__aeabi_dsub>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	a30a      	add	r3, pc, #40	@ (adr r3, 8001d30 <read_bme280_data+0x68>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	f7fe fbe5 	bl	80004d8 <__aeabi_dmul>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe feb7 	bl	8000a88 <__aeabi_d2f>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4a09      	ldr	r2, [pc, #36]	@ (8001d44 <read_bme280_data+0x7c>)
 8001d1e:	6013      	str	r3, [r2, #0]
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	f3af 8000 	nop.w
 8001d28:	371e9f3c 	.word	0x371e9f3c
 8001d2c:	3fc87f63 	.word	0x3fc87f63
 8001d30:	00000000 	.word	0x00000000
 8001d34:	40e5a540 	.word	0x40e5a540
 8001d38:	200003ac 	.word	0x200003ac
 8001d3c:	47c5e680 	.word	0x47c5e680
 8001d40:	3ff00000 	.word	0x3ff00000
 8001d44:	200003b0 	.word	0x200003b0

08001d48 <read_accelerometer_data>:
  * @brief Read accelerometer data from MPU9250
  * @param accel_data: Pointer to accelerometer data structure
  * @retval None
  */
void read_accelerometer_data(sensor_data_t *accel_data)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
    uint8_t imu_data[IMU_DATA_SIZE];

    mpu9250_read_data(MPU9250_ACCEL_XOUT_H, imu_data, sizeof(imu_data));
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	220e      	movs	r2, #14
 8001d56:	4619      	mov	r1, r3
 8001d58:	203b      	movs	r0, #59	@ 0x3b
 8001d5a:	f000 f8f9 	bl	8001f50 <mpu9250_read_data>

    accel_data->x = ((int16_t)imu_data[0] << 8) + imu_data[1];
 8001d5e:	7a3b      	ldrb	r3, [r7, #8]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	7a7a      	ldrb	r2, [r7, #9]
 8001d66:	4413      	add	r3, r2
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	801a      	strh	r2, [r3, #0]
    accel_data->y = ((int16_t)imu_data[2] << 8) + imu_data[3];
 8001d70:	7abb      	ldrb	r3, [r7, #10]
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	7afa      	ldrb	r2, [r7, #11]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b21a      	sxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	805a      	strh	r2, [r3, #2]
    accel_data->z = ((int16_t)imu_data[4] << 8) + imu_data[5];
 8001d82:	7b3b      	ldrb	r3, [r7, #12]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	7b7a      	ldrb	r2, [r7, #13]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	b21a      	sxth	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	809a      	strh	r2, [r3, #4]
}
 8001d94:	bf00      	nop
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <read_gyroscope_data>:
  * @brief Read gyroscope data from MPU9250
  * @param gyro_data: Pointer to gyroscope data structure
  * @retval None
  */
void read_gyroscope_data(sensor_data_t *gyro_data)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
    uint8_t imu_data[IMU_DATA_SIZE];

    mpu9250_read_data(MPU9250_GYRO_XOUT_H, imu_data, sizeof(imu_data));
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	220e      	movs	r2, #14
 8001daa:	4619      	mov	r1, r3
 8001dac:	2043      	movs	r0, #67	@ 0x43
 8001dae:	f000 f8cf 	bl	8001f50 <mpu9250_read_data>

    gyro_data->x = ((int16_t)imu_data[0] << 8) + imu_data[1];
 8001db2:	7a3b      	ldrb	r3, [r7, #8]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	7a7a      	ldrb	r2, [r7, #9]
 8001dba:	4413      	add	r3, r2
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	b21a      	sxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	801a      	strh	r2, [r3, #0]
    gyro_data->y = ((int16_t)imu_data[2] << 8) + imu_data[3];
 8001dc4:	7abb      	ldrb	r3, [r7, #10]
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	7afa      	ldrb	r2, [r7, #11]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	805a      	strh	r2, [r3, #2]
    gyro_data->z = ((int16_t)imu_data[4] << 8) + imu_data[5];
 8001dd6:	7b3b      	ldrb	r3, [r7, #12]
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	7b7a      	ldrb	r2, [r7, #13]
 8001dde:	4413      	add	r3, r2
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	809a      	strh	r2, [r3, #4]
}
 8001de8:	bf00      	nop
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <transmit_sensor_packet>:
  * @brief Transmit sensor data packet via UART
  * @param accel_data: Pointer to accelerometer data structure
  * @retval None
  */
void transmit_sensor_packet(int altitude, sensor_data_t *accel_data, sensor_data_t *gyro_data)
{
 8001df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df4:	b0ad      	sub	sp, #180	@ 0xb4
 8001df6:	af08      	add	r7, sp, #32
 8001df8:	61f8      	str	r0, [r7, #28]
 8001dfa:	61b9      	str	r1, [r7, #24]
 8001dfc:	617a      	str	r2, [r7, #20]
 8001dfe:	466b      	mov	r3, sp
 8001e00:	60bb      	str	r3, [r7, #8]
    uint16_t len;

    // Format sensor data string
    len = sprintf(buffer, "%d,%d,%d,%d,%.2f,%.2f,%.2f\r\n",
    			  altitude,
                  accel_data->x, accel_data->y, accel_data->z,
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f9b3 3000 	ldrsh.w	r3, [r3]
    len = sprintf(buffer, "%d,%d,%d,%d,%.2f,%.2f,%.2f\r\n",
 8001e08:	613b      	str	r3, [r7, #16]
                  accel_data->x, accel_data->y, accel_data->z,
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    len = sprintf(buffer, "%d,%d,%d,%d,%.2f,%.2f,%.2f\r\n",
 8001e10:	461e      	mov	r6, r3
                  accel_data->x, accel_data->y, accel_data->z,
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    len = sprintf(buffer, "%d,%d,%d,%d,%.2f,%.2f,%.2f\r\n",
 8001e18:	60fb      	str	r3, [r7, #12]
				  gyro_data->x/131.0, gyro_data->y/131.0, gyro_data->z/131.0);
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
    len = sprintf(buffer, "%d,%d,%d,%d,%.2f,%.2f,%.2f\r\n",
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe faef 	bl	8000404 <__aeabi_i2d>
 8001e26:	a346      	add	r3, pc, #280	@ (adr r3, 8001f40 <transmit_sensor_packet+0x150>)
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	f7fe fc7e 	bl	800072c <__aeabi_ddiv>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	e9c7 2300 	strd	r2, r3, [r7]
				  gyro_data->x/131.0, gyro_data->y/131.0, gyro_data->z/131.0);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    len = sprintf(buffer, "%d,%d,%d,%d,%.2f,%.2f,%.2f\r\n",
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fae0 	bl	8000404 <__aeabi_i2d>
 8001e44:	a33e      	add	r3, pc, #248	@ (adr r3, 8001f40 <transmit_sensor_packet+0x150>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fc6f 	bl	800072c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4692      	mov	sl, r2
 8001e54:	469b      	mov	fp, r3
				  gyro_data->x/131.0, gyro_data->y/131.0, gyro_data->z/131.0);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    len = sprintf(buffer, "%d,%d,%d,%d,%.2f,%.2f,%.2f\r\n",
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fad1 	bl	8000404 <__aeabi_i2d>
 8001e62:	a337      	add	r3, pc, #220	@ (adr r3, 8001f40 <transmit_sensor_packet+0x150>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	f7fe fc60 	bl	800072c <__aeabi_ddiv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	f107 0020 	add.w	r0, r7, #32
 8001e74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001e78:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	9201      	str	r2, [sp, #4]
 8001e88:	9600      	str	r6, [sp, #0]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	492e      	ldr	r1, [pc, #184]	@ (8001f48 <transmit_sensor_packet+0x158>)
 8001e90:	f004 fa8c 	bl	80063ac <siprintf>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

    // Create packet with header
    uint8_t packet[PACKET_HEADER_SIZE + len];
 8001e9a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001e9e:	1cd9      	adds	r1, r3, #3
 8001ea0:	1e4b      	subs	r3, r1, #1
 8001ea2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ea6:	460a      	mov	r2, r1
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	4690      	mov	r8, r2
 8001eac:	4699      	mov	r9, r3
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ec2:	460a      	mov	r2, r1
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	4614      	mov	r4, r2
 8001ec8:	461d      	mov	r5, r3
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	00eb      	lsls	r3, r5, #3
 8001ed4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ed8:	00e2      	lsls	r2, r4, #3
 8001eda:	460b      	mov	r3, r1
 8001edc:	3307      	adds	r3, #7
 8001ede:	08db      	lsrs	r3, r3, #3
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ee6:	ab08      	add	r3, sp, #32
 8001ee8:	3300      	adds	r3, #0
 8001eea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    packet[0] = TARGET_ADDR_HIGH;
 8001eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
    packet[1] = TARGET_ADDR_LOW;
 8001ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001efa:	2202      	movs	r2, #2
 8001efc:	705a      	strb	r2, [r3, #1]
    packet[2] = CHANNEL;
 8001efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f02:	2217      	movs	r2, #23
 8001f04:	709a      	strb	r2, [r3, #2]
    memcpy(&packet[PACKET_HEADER_SIZE], buffer, len);
 8001f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f0a:	3303      	adds	r3, #3
 8001f0c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8001f10:	f107 0120 	add.w	r1, r7, #32
 8001f14:	4618      	mov	r0, r3
 8001f16:	f004 fb3c 	bl	8006592 <memcpy>

    // Transmit packet
    HAL_UART_Transmit(&huart3, packet, PACKET_HEADER_SIZE + len, HAL_MAX_DELAY);
 8001f1a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001f1e:	3303      	adds	r3, #3
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
 8001f26:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001f2a:	4808      	ldr	r0, [pc, #32]	@ (8001f4c <transmit_sensor_packet+0x15c>)
 8001f2c:	f003 fb4d 	bl	80055ca <HAL_UART_Transmit>
 8001f30:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8001f34:	bf00      	nop
 8001f36:	3794      	adds	r7, #148	@ 0x94
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f3e:	bf00      	nop
 8001f40:	00000000 	.word	0x00000000
 8001f44:	40606000 	.word	0x40606000
 8001f48:	08009450 	.word	0x08009450
 8001f4c:	20000360 	.word	0x20000360

08001f50 <mpu9250_read_data>:
  * @param data: Pointer to data buffer
  * @param data_length: Number of bytes to read
  * @retval None
  */
void mpu9250_read_data(uint8_t reg, uint8_t *data, uint8_t data_length)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buffer[1];
    tx_buffer[0] = 0x80 | reg;  // Read command with register address
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	733b      	strb	r3, [r7, #12]

    // Assert CS (Chip Select)
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	480d      	ldr	r0, [pc, #52]	@ (8001fa4 <mpu9250_read_data+0x54>)
 8001f70:	f000 ffb4 	bl	8002edc <HAL_GPIO_WritePin>

    // Send register address and read data
    HAL_SPI_Transmit(&hspi1, tx_buffer, 1, 100);
 8001f74:	f107 010c 	add.w	r1, r7, #12
 8001f78:	2364      	movs	r3, #100	@ 0x64
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	480a      	ldr	r0, [pc, #40]	@ (8001fa8 <mpu9250_read_data+0x58>)
 8001f7e:	f002 fcbf 	bl	8004900 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, data_length, 100);
 8001f82:	79bb      	ldrb	r3, [r7, #6]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	2364      	movs	r3, #100	@ 0x64
 8001f88:	6839      	ldr	r1, [r7, #0]
 8001f8a:	4807      	ldr	r0, [pc, #28]	@ (8001fa8 <mpu9250_read_data+0x58>)
 8001f8c:	f002 fdfc 	bl	8004b88 <HAL_SPI_Receive>

    // Deassert CS
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001f90:	2201      	movs	r2, #1
 8001f92:	2110      	movs	r1, #16
 8001f94:	4803      	ldr	r0, [pc, #12]	@ (8001fa4 <mpu9250_read_data+0x54>)
 8001f96:	f000 ffa1 	bl	8002edc <HAL_GPIO_WritePin>
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40010800 	.word	0x40010800
 8001fa8:	20000278 	.word	0x20000278

08001fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b090      	sub	sp, #64	@ 0x40
 8001fb0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb2:	f107 0318 	add.w	r3, r7, #24
 8001fb6:	2228      	movs	r2, #40	@ 0x28
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 fa5b 	bl	8006476 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fd6:	2310      	movs	r3, #16
 8001fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fde:	f107 0318 	add.w	r3, r7, #24
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 fff8 	bl	8003fd8 <HAL_RCC_OscConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <SystemClock_Config+0x46>
    {
        Error_Handler();
 8001fee:	f000 f939 	bl	8002264 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff2:	230f      	movs	r3, #15
 8001ff4:	607b      	str	r3, [r7, #4]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f002 fa66 	bl	80044dc <HAL_RCC_ClockConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <SystemClock_Config+0x6e>
    {
        Error_Handler();
 8002016:	f000 f925 	bl	8002264 <Error_Handler>
    }
}
 800201a:	bf00      	nop
 800201c:	3740      	adds	r7, #64	@ 0x40
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8002028:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <MX_I2C1_Init+0x50>)
 800202a:	4a13      	ldr	r2, [pc, #76]	@ (8002078 <MX_I2C1_Init+0x54>)
 800202c:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 800202e:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <MX_I2C1_Init+0x50>)
 8002030:	4a12      	ldr	r2, [pc, #72]	@ (800207c <MX_I2C1_Init+0x58>)
 8002032:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002034:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <MX_I2C1_Init+0x50>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800203a:	4b0e      	ldr	r3, [pc, #56]	@ (8002074 <MX_I2C1_Init+0x50>)
 800203c:	2200      	movs	r2, #0
 800203e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <MX_I2C1_Init+0x50>)
 8002042:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002046:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002048:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <MX_I2C1_Init+0x50>)
 800204a:	2200      	movs	r2, #0
 800204c:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <MX_I2C1_Init+0x50>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002054:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <MX_I2C1_Init+0x50>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <MX_I2C1_Init+0x50>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002060:	4804      	ldr	r0, [pc, #16]	@ (8002074 <MX_I2C1_Init+0x50>)
 8002062:	f000 ff53 	bl	8002f0c <HAL_I2C_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 800206c:	f000 f8fa 	bl	8002264 <Error_Handler>
    }
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000224 	.word	0x20000224
 8002078:	40005400 	.word	0x40005400
 800207c:	000186a0 	.word	0x000186a0

08002080 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8002084:	4b17      	ldr	r3, [pc, #92]	@ (80020e4 <MX_SPI1_Init+0x64>)
 8002086:	4a18      	ldr	r2, [pc, #96]	@ (80020e8 <MX_SPI1_Init+0x68>)
 8002088:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800208a:	4b16      	ldr	r3, [pc, #88]	@ (80020e4 <MX_SPI1_Init+0x64>)
 800208c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002090:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002092:	4b14      	ldr	r3, [pc, #80]	@ (80020e4 <MX_SPI1_Init+0x64>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <MX_SPI1_Init+0x64>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800209e:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <MX_SPI1_Init+0x64>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020a4:	4b0f      	ldr	r3, [pc, #60]	@ (80020e4 <MX_SPI1_Init+0x64>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80020aa:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <MX_SPI1_Init+0x64>)
 80020ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020b0:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020b2:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <MX_SPI1_Init+0x64>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020b8:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <MX_SPI1_Init+0x64>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020be:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <MX_SPI1_Init+0x64>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c4:	4b07      	ldr	r3, [pc, #28]	@ (80020e4 <MX_SPI1_Init+0x64>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <MX_SPI1_Init+0x64>)
 80020cc:	220a      	movs	r2, #10
 80020ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <MX_SPI1_Init+0x64>)
 80020d2:	f002 fb91 	bl	80047f8 <HAL_SPI_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 80020dc:	f000 f8c2 	bl	8002264 <Error_Handler>
    }
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000278 	.word	0x20000278
 80020e8:	40013000 	.word	0x40013000

080020ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 80020f0:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <MX_USART1_UART_Init+0x4c>)
 80020f2:	4a12      	ldr	r2, [pc, #72]	@ (800213c <MX_USART1_UART_Init+0x50>)
 80020f4:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <MX_USART1_UART_Init+0x4c>)
 80020f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020fc:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <MX_USART1_UART_Init+0x4c>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8002104:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <MX_USART1_UART_Init+0x4c>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 800210a:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <MX_USART1_UART_Init+0x4c>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8002110:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <MX_USART1_UART_Init+0x4c>)
 8002112:	220c      	movs	r2, #12
 8002114:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002116:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <MX_USART1_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800211c:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <MX_USART1_UART_Init+0x4c>)
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8002122:	4805      	ldr	r0, [pc, #20]	@ (8002138 <MX_USART1_UART_Init+0x4c>)
 8002124:	f003 fa01 	bl	800552a <HAL_UART_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 800212e:	f000 f899 	bl	8002264 <Error_Handler>
    }
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200002d0 	.word	0x200002d0
 800213c:	40013800 	.word	0x40013800

08002140 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8002144:	4b11      	ldr	r3, [pc, #68]	@ (800218c <MX_USART2_UART_Init+0x4c>)
 8002146:	4a12      	ldr	r2, [pc, #72]	@ (8002190 <MX_USART2_UART_Init+0x50>)
 8002148:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 800214a:	4b10      	ldr	r3, [pc, #64]	@ (800218c <MX_USART2_UART_Init+0x4c>)
 800214c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002150:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002152:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <MX_USART2_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <MX_USART2_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800215e:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <MX_USART2_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8002164:	4b09      	ldr	r3, [pc, #36]	@ (800218c <MX_USART2_UART_Init+0x4c>)
 8002166:	220c      	movs	r2, #12
 8002168:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216a:	4b08      	ldr	r3, [pc, #32]	@ (800218c <MX_USART2_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <MX_USART2_UART_Init+0x4c>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8002176:	4805      	ldr	r0, [pc, #20]	@ (800218c <MX_USART2_UART_Init+0x4c>)
 8002178:	f003 f9d7 	bl	800552a <HAL_UART_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 8002182:	f000 f86f 	bl	8002264 <Error_Handler>
    }
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000318 	.word	0x20000318
 8002190:	40004400 	.word	0x40004400

08002194 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
    huart3.Instance = USART3;
 8002198:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <MX_USART3_UART_Init+0x4c>)
 800219a:	4a12      	ldr	r2, [pc, #72]	@ (80021e4 <MX_USART3_UART_Init+0x50>)
 800219c:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 800219e:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021a4:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 80021b8:	4b09      	ldr	r3, [pc, #36]	@ (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021ba:	220c      	movs	r2, #12
 80021bc:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021be:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 80021ca:	4805      	ldr	r0, [pc, #20]	@ (80021e0 <MX_USART3_UART_Init+0x4c>)
 80021cc:	f003 f9ad 	bl	800552a <HAL_UART_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_USART3_UART_Init+0x46>
    {
        Error_Handler();
 80021d6:	f000 f845 	bl	8002264 <Error_Handler>
    }
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000360 	.word	0x20000360
 80021e4:	40004800 	.word	0x40004800

080021e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fc:	4b17      	ldr	r3, [pc, #92]	@ (800225c <MX_GPIO_Init+0x74>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a16      	ldr	r2, [pc, #88]	@ (800225c <MX_GPIO_Init+0x74>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b14      	ldr	r3, [pc, #80]	@ (800225c <MX_GPIO_Init+0x74>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <MX_GPIO_Init+0x74>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a10      	ldr	r2, [pc, #64]	@ (800225c <MX_GPIO_Init+0x74>)
 800221a:	f043 0308 	orr.w	r3, r3, #8
 800221e:	6193      	str	r3, [r2, #24]
 8002220:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <MX_GPIO_Init+0x74>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800222c:	2200      	movs	r2, #0
 800222e:	2110      	movs	r1, #16
 8002230:	480b      	ldr	r0, [pc, #44]	@ (8002260 <MX_GPIO_Init+0x78>)
 8002232:	f000 fe53 	bl	8002edc <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PA4 */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002236:	2310      	movs	r3, #16
 8002238:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223a:	2301      	movs	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2302      	movs	r3, #2
 8002244:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	f107 0308 	add.w	r3, r7, #8
 800224a:	4619      	mov	r1, r3
 800224c:	4804      	ldr	r0, [pc, #16]	@ (8002260 <MX_GPIO_Init+0x78>)
 800224e:	f000 fcc1 	bl	8002bd4 <HAL_GPIO_Init>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	40010800 	.word	0x40010800

08002264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002268:	b672      	cpsid	i
}
 800226a:	bf00      	nop
    __disable_irq();
    while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <Error_Handler+0x8>

08002270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002276:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <HAL_MspInit+0x5c>)
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	4a14      	ldr	r2, [pc, #80]	@ (80022cc <HAL_MspInit+0x5c>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6193      	str	r3, [r2, #24]
 8002282:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <HAL_MspInit+0x5c>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	4b0f      	ldr	r3, [pc, #60]	@ (80022cc <HAL_MspInit+0x5c>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a0e      	ldr	r2, [pc, #56]	@ (80022cc <HAL_MspInit+0x5c>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002298:	61d3      	str	r3, [r2, #28]
 800229a:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <HAL_MspInit+0x5c>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80022a6:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <HAL_MspInit+0x60>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <HAL_MspInit+0x60>)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010000 	.word	0x40010000

080022d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0310 	add.w	r3, r7, #16
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a15      	ldr	r2, [pc, #84]	@ (8002344 <HAL_I2C_MspInit+0x70>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d123      	bne.n	800233c <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	4b14      	ldr	r3, [pc, #80]	@ (8002348 <HAL_I2C_MspInit+0x74>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a13      	ldr	r2, [pc, #76]	@ (8002348 <HAL_I2C_MspInit+0x74>)
 80022fa:	f043 0308 	orr.w	r3, r3, #8
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <HAL_I2C_MspInit+0x74>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800230c:	23c0      	movs	r3, #192	@ 0xc0
 800230e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002310:	2312      	movs	r3, #18
 8002312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	4619      	mov	r1, r3
 800231e:	480b      	ldr	r0, [pc, #44]	@ (800234c <HAL_I2C_MspInit+0x78>)
 8002320:	f000 fc58 	bl	8002bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002324:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_I2C_MspInit+0x74>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	4a07      	ldr	r2, [pc, #28]	@ (8002348 <HAL_I2C_MspInit+0x74>)
 800232a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800232e:	61d3      	str	r3, [r2, #28]
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_I2C_MspInit+0x74>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800233c:	bf00      	nop
 800233e:	3720      	adds	r7, #32
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40005400 	.word	0x40005400
 8002348:	40021000 	.word	0x40021000
 800234c:	40010c00 	.word	0x40010c00

08002350 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1f      	ldr	r2, [pc, #124]	@ (80023e8 <HAL_SPI_MspInit+0x98>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d137      	bne.n	80023e0 <HAL_SPI_MspInit+0x90>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002370:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <HAL_SPI_MspInit+0x9c>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a1d      	ldr	r2, [pc, #116]	@ (80023ec <HAL_SPI_MspInit+0x9c>)
 8002376:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <HAL_SPI_MspInit+0x9c>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	4b18      	ldr	r3, [pc, #96]	@ (80023ec <HAL_SPI_MspInit+0x9c>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4a17      	ldr	r2, [pc, #92]	@ (80023ec <HAL_SPI_MspInit+0x9c>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	6193      	str	r3, [r2, #24]
 8002394:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <HAL_SPI_MspInit+0x9c>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023a0:	23a0      	movs	r3, #160	@ 0xa0
 80023a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	4619      	mov	r1, r3
 80023b2:	480f      	ldr	r0, [pc, #60]	@ (80023f0 <HAL_SPI_MspInit+0xa0>)
 80023b4:	f000 fc0e 	bl	8002bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023b8:	2340      	movs	r3, #64	@ 0x40
 80023ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c4:	f107 0310 	add.w	r3, r7, #16
 80023c8:	4619      	mov	r1, r3
 80023ca:	4809      	ldr	r0, [pc, #36]	@ (80023f0 <HAL_SPI_MspInit+0xa0>)
 80023cc:	f000 fc02 	bl	8002bd4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2100      	movs	r1, #0
 80023d4:	2023      	movs	r0, #35	@ 0x23
 80023d6:	f000 fb4e 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80023da:	2023      	movs	r0, #35	@ 0x23
 80023dc:	f000 fb67 	bl	8002aae <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80023e0:	bf00      	nop
 80023e2:	3720      	adds	r7, #32
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40013000 	.word	0x40013000
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40010800 	.word	0x40010800

080023f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	@ 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 0320 	add.w	r3, r7, #32
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a53      	ldr	r2, [pc, #332]	@ (800255c <HAL_UART_MspInit+0x168>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d132      	bne.n	800247a <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002414:	4b52      	ldr	r3, [pc, #328]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	4a51      	ldr	r2, [pc, #324]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 800241a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800241e:	6193      	str	r3, [r2, #24]
 8002420:	4b4f      	ldr	r3, [pc, #316]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	4b4c      	ldr	r3, [pc, #304]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4a4b      	ldr	r2, [pc, #300]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	6193      	str	r3, [r2, #24]
 8002438:	4b49      	ldr	r3, [pc, #292]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002444:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800244e:	2303      	movs	r3, #3
 8002450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	f107 0320 	add.w	r3, r7, #32
 8002456:	4619      	mov	r1, r3
 8002458:	4842      	ldr	r0, [pc, #264]	@ (8002564 <HAL_UART_MspInit+0x170>)
 800245a:	f000 fbbb 	bl	8002bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800245e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002464:	2300      	movs	r3, #0
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 0320 	add.w	r3, r7, #32
 8002470:	4619      	mov	r1, r3
 8002472:	483c      	ldr	r0, [pc, #240]	@ (8002564 <HAL_UART_MspInit+0x170>)
 8002474:	f000 fbae 	bl	8002bd4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002478:	e06c      	b.n	8002554 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a3a      	ldr	r2, [pc, #232]	@ (8002568 <HAL_UART_MspInit+0x174>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d130      	bne.n	80024e6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002484:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	4a35      	ldr	r2, [pc, #212]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 800248a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800248e:	61d3      	str	r3, [r2, #28]
 8002490:	4b33      	ldr	r3, [pc, #204]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249c:	4b30      	ldr	r3, [pc, #192]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 80024a2:	f043 0304 	orr.w	r3, r3, #4
 80024a6:	6193      	str	r3, [r2, #24]
 80024a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024b4:	2304      	movs	r3, #4
 80024b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	f107 0320 	add.w	r3, r7, #32
 80024c4:	4619      	mov	r1, r3
 80024c6:	4827      	ldr	r0, [pc, #156]	@ (8002564 <HAL_UART_MspInit+0x170>)
 80024c8:	f000 fb84 	bl	8002bd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024cc:	2308      	movs	r3, #8
 80024ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d8:	f107 0320 	add.w	r3, r7, #32
 80024dc:	4619      	mov	r1, r3
 80024de:	4821      	ldr	r0, [pc, #132]	@ (8002564 <HAL_UART_MspInit+0x170>)
 80024e0:	f000 fb78 	bl	8002bd4 <HAL_GPIO_Init>
}
 80024e4:	e036      	b.n	8002554 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a20      	ldr	r2, [pc, #128]	@ (800256c <HAL_UART_MspInit+0x178>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d131      	bne.n	8002554 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 80024f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024fa:	61d3      	str	r3, [r2, #28]
 80024fc:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002508:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4a14      	ldr	r2, [pc, #80]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 800250e:	f043 0308 	orr.w	r3, r3, #8
 8002512:	6193      	str	r3, [r2, #24]
 8002514:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_UART_MspInit+0x16c>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002520:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800252a:	2303      	movs	r3, #3
 800252c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252e:	f107 0320 	add.w	r3, r7, #32
 8002532:	4619      	mov	r1, r3
 8002534:	480e      	ldr	r0, [pc, #56]	@ (8002570 <HAL_UART_MspInit+0x17c>)
 8002536:	f000 fb4d 	bl	8002bd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800253a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800253e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002548:	f107 0320 	add.w	r3, r7, #32
 800254c:	4619      	mov	r1, r3
 800254e:	4808      	ldr	r0, [pc, #32]	@ (8002570 <HAL_UART_MspInit+0x17c>)
 8002550:	f000 fb40 	bl	8002bd4 <HAL_GPIO_Init>
}
 8002554:	bf00      	nop
 8002556:	3730      	adds	r7, #48	@ 0x30
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40013800 	.word	0x40013800
 8002560:	40021000 	.word	0x40021000
 8002564:	40010800 	.word	0x40010800
 8002568:	40004400 	.word	0x40004400
 800256c:	40004800 	.word	0x40004800
 8002570:	40010c00 	.word	0x40010c00

08002574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <NMI_Handler+0x4>

0800257c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <HardFault_Handler+0x4>

08002584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <MemManage_Handler+0x4>

0800258c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <BusFault_Handler+0x4>

08002594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <UsageFault_Handler+0x4>

0800259c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c4:	f000 f940 	bl	8002848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}

080025cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80025d0:	4802      	ldr	r0, [pc, #8]	@ (80025dc <SPI1_IRQHandler+0x10>)
 80025d2:	f002 fd9b 	bl	800510c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000278 	.word	0x20000278

080025e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return 1;
 80025e4:	2301      	movs	r3, #1
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <_kill>:

int _kill(int pid, int sig)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025f8:	f003 ff90 	bl	800651c <__errno>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2216      	movs	r2, #22
 8002600:	601a      	str	r2, [r3, #0]
  return -1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_exit>:

void _exit (int status)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002616:	f04f 31ff 	mov.w	r1, #4294967295
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ffe7 	bl	80025ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <_exit+0x12>

08002624 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	e00a      	b.n	800264c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002636:	f3af 8000 	nop.w
 800263a:	4601      	mov	r1, r0
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	60ba      	str	r2, [r7, #8]
 8002642:	b2ca      	uxtb	r2, r1
 8002644:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3301      	adds	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	dbf0      	blt.n	8002636 <_read+0x12>
  }

  return len;
 8002654:	687b      	ldr	r3, [r7, #4]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	e009      	b.n	8002684 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	60ba      	str	r2, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3301      	adds	r3, #1
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	429a      	cmp	r2, r3
 800268a:	dbf1      	blt.n	8002670 <_write+0x12>
  }
  return len;
 800268c:	687b      	ldr	r3, [r7, #4]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <_close>:

int _close(int file)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026bc:	605a      	str	r2, [r3, #4]
  return 0;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <_isatty>:

int _isatty(int file)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026d2:	2301      	movs	r3, #1
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
	...

080026f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002700:	4a14      	ldr	r2, [pc, #80]	@ (8002754 <_sbrk+0x5c>)
 8002702:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <_sbrk+0x60>)
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800270c:	4b13      	ldr	r3, [pc, #76]	@ (800275c <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <_sbrk+0x64>)
 8002716:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <_sbrk+0x68>)
 8002718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800271a:	4b10      	ldr	r3, [pc, #64]	@ (800275c <_sbrk+0x64>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	429a      	cmp	r2, r3
 8002726:	d207      	bcs.n	8002738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002728:	f003 fef8 	bl	800651c <__errno>
 800272c:	4603      	mov	r3, r0
 800272e:	220c      	movs	r2, #12
 8002730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
 8002736:	e009      	b.n	800274c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002738:	4b08      	ldr	r3, [pc, #32]	@ (800275c <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800273e:	4b07      	ldr	r3, [pc, #28]	@ (800275c <_sbrk+0x64>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	4a05      	ldr	r2, [pc, #20]	@ (800275c <_sbrk+0x64>)
 8002748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800274a:	68fb      	ldr	r3, [r7, #12]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20005000 	.word	0x20005000
 8002758:	00000400 	.word	0x00000400
 800275c:	200003b4 	.word	0x200003b4
 8002760:	20000508 	.word	0x20000508

08002764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002770:	f7ff fff8 	bl	8002764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002774:	480b      	ldr	r0, [pc, #44]	@ (80027a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002776:	490c      	ldr	r1, [pc, #48]	@ (80027a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002778:	4a0c      	ldr	r2, [pc, #48]	@ (80027ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800277c:	e002      	b.n	8002784 <LoopCopyDataInit>

0800277e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002782:	3304      	adds	r3, #4

08002784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002788:	d3f9      	bcc.n	800277e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278a:	4a09      	ldr	r2, [pc, #36]	@ (80027b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800278c:	4c09      	ldr	r4, [pc, #36]	@ (80027b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002790:	e001      	b.n	8002796 <LoopFillZerobss>

08002792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002794:	3204      	adds	r2, #4

08002796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002798:	d3fb      	bcc.n	8002792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800279a:	f003 fec5 	bl	8006528 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800279e:	f7ff fa51 	bl	8001c44 <main>
  bx lr
 80027a2:	4770      	bx	lr
  ldr r0, =_sdata
 80027a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80027ac:	08009860 	.word	0x08009860
  ldr r2, =_sbss
 80027b0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80027b4:	20000508 	.word	0x20000508

080027b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027b8:	e7fe      	b.n	80027b8 <ADC1_2_IRQHandler>
	...

080027bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c0:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <HAL_Init+0x28>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a07      	ldr	r2, [pc, #28]	@ (80027e4 <HAL_Init+0x28>)
 80027c6:	f043 0310 	orr.w	r3, r3, #16
 80027ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027cc:	2003      	movs	r0, #3
 80027ce:	f000 f947 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d2:	200f      	movs	r0, #15
 80027d4:	f000 f808 	bl	80027e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d8:	f7ff fd4a 	bl	8002270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40022000 	.word	0x40022000

080027e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f0:	4b12      	ldr	r3, [pc, #72]	@ (800283c <HAL_InitTick+0x54>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <HAL_InitTick+0x58>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4619      	mov	r1, r3
 80027fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f95f 	bl	8002aca <HAL_SYSTICK_Config>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e00e      	b.n	8002834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b0f      	cmp	r3, #15
 800281a:	d80a      	bhi.n	8002832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800281c:	2200      	movs	r2, #0
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f000 f927 	bl	8002a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002828:	4a06      	ldr	r2, [pc, #24]	@ (8002844 <HAL_InitTick+0x5c>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000000 	.word	0x20000000
 8002840:	20000008 	.word	0x20000008
 8002844:	20000004 	.word	0x20000004

08002848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800284c:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_IncTick+0x1c>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <HAL_IncTick+0x20>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4413      	add	r3, r2
 8002858:	4a03      	ldr	r2, [pc, #12]	@ (8002868 <HAL_IncTick+0x20>)
 800285a:	6013      	str	r3, [r2, #0]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	20000008 	.word	0x20000008
 8002868:	200003b8 	.word	0x200003b8

0800286c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return uwTick;
 8002870:	4b02      	ldr	r3, [pc, #8]	@ (800287c <HAL_GetTick+0x10>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	200003b8 	.word	0x200003b8

08002880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff fff0 	bl	800286c <HAL_GetTick>
 800288c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d005      	beq.n	80028a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <HAL_Delay+0x44>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028a6:	bf00      	nop
 80028a8:	f7ff ffe0 	bl	800286c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d8f7      	bhi.n	80028a8 <HAL_Delay+0x28>
  {
  }
}
 80028b8:	bf00      	nop
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000008 	.word	0x20000008

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4906      	ldr	r1, [pc, #24]	@ (8002960 <__NVIC_EnableIRQ+0x34>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	e000e100 	.word	0xe000e100

08002964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	@ (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	@ (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	@ 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a2c:	d301      	bcc.n	8002a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00f      	b.n	8002a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	4a0a      	ldr	r2, [pc, #40]	@ (8002a5c <SysTick_Config+0x40>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f7ff ff90 	bl	8002964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <SysTick_Config+0x40>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4a:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <SysTick_Config+0x40>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000e010 	.word	0xe000e010

08002a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff2d 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a88:	f7ff ff42 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7ff ff90 	bl	80029b8 <NVIC_EncodePriority>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff5f 	bl	8002964 <__NVIC_SetPriority>
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff35 	bl	800292c <__NVIC_EnableIRQ>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ffa2 	bl	8002a1c <SysTick_Config>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d005      	beq.n	8002b08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2204      	movs	r2, #4
 8002b00:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	e051      	b.n	8002bac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 020e 	bic.w	r2, r2, #14
 8002b16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a22      	ldr	r2, [pc, #136]	@ (8002bb8 <HAL_DMA_Abort_IT+0xd4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d029      	beq.n	8002b86 <HAL_DMA_Abort_IT+0xa2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a21      	ldr	r2, [pc, #132]	@ (8002bbc <HAL_DMA_Abort_IT+0xd8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x9e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc0 <HAL_DMA_Abort_IT+0xdc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01a      	beq.n	8002b7c <HAL_DMA_Abort_IT+0x98>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc4 <HAL_DMA_Abort_IT+0xe0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d012      	beq.n	8002b76 <HAL_DMA_Abort_IT+0x92>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc8 <HAL_DMA_Abort_IT+0xe4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00a      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x8c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8002bcc <HAL_DMA_Abort_IT+0xe8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d102      	bne.n	8002b6a <HAL_DMA_Abort_IT+0x86>
 8002b64:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b68:	e00e      	b.n	8002b88 <HAL_DMA_Abort_IT+0xa4>
 8002b6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b6e:	e00b      	b.n	8002b88 <HAL_DMA_Abort_IT+0xa4>
 8002b70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b74:	e008      	b.n	8002b88 <HAL_DMA_Abort_IT+0xa4>
 8002b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b7a:	e005      	b.n	8002b88 <HAL_DMA_Abort_IT+0xa4>
 8002b7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b80:	e002      	b.n	8002b88 <HAL_DMA_Abort_IT+0xa4>
 8002b82:	2310      	movs	r3, #16
 8002b84:	e000      	b.n	8002b88 <HAL_DMA_Abort_IT+0xa4>
 8002b86:	2301      	movs	r3, #1
 8002b88:	4a11      	ldr	r2, [pc, #68]	@ (8002bd0 <HAL_DMA_Abort_IT+0xec>)
 8002b8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
    } 
  }
  return status;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40020008 	.word	0x40020008
 8002bbc:	4002001c 	.word	0x4002001c
 8002bc0:	40020030 	.word	0x40020030
 8002bc4:	40020044 	.word	0x40020044
 8002bc8:	40020058 	.word	0x40020058
 8002bcc:	4002006c 	.word	0x4002006c
 8002bd0:	40020000 	.word	0x40020000

08002bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b08b      	sub	sp, #44	@ 0x2c
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be6:	e169      	b.n	8002ebc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002be8:	2201      	movs	r2, #1
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f040 8158 	bne.w	8002eb6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4a9a      	ldr	r2, [pc, #616]	@ (8002e74 <HAL_GPIO_Init+0x2a0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d05e      	beq.n	8002cce <HAL_GPIO_Init+0xfa>
 8002c10:	4a98      	ldr	r2, [pc, #608]	@ (8002e74 <HAL_GPIO_Init+0x2a0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d875      	bhi.n	8002d02 <HAL_GPIO_Init+0x12e>
 8002c16:	4a98      	ldr	r2, [pc, #608]	@ (8002e78 <HAL_GPIO_Init+0x2a4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d058      	beq.n	8002cce <HAL_GPIO_Init+0xfa>
 8002c1c:	4a96      	ldr	r2, [pc, #600]	@ (8002e78 <HAL_GPIO_Init+0x2a4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d86f      	bhi.n	8002d02 <HAL_GPIO_Init+0x12e>
 8002c22:	4a96      	ldr	r2, [pc, #600]	@ (8002e7c <HAL_GPIO_Init+0x2a8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d052      	beq.n	8002cce <HAL_GPIO_Init+0xfa>
 8002c28:	4a94      	ldr	r2, [pc, #592]	@ (8002e7c <HAL_GPIO_Init+0x2a8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d869      	bhi.n	8002d02 <HAL_GPIO_Init+0x12e>
 8002c2e:	4a94      	ldr	r2, [pc, #592]	@ (8002e80 <HAL_GPIO_Init+0x2ac>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d04c      	beq.n	8002cce <HAL_GPIO_Init+0xfa>
 8002c34:	4a92      	ldr	r2, [pc, #584]	@ (8002e80 <HAL_GPIO_Init+0x2ac>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d863      	bhi.n	8002d02 <HAL_GPIO_Init+0x12e>
 8002c3a:	4a92      	ldr	r2, [pc, #584]	@ (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d046      	beq.n	8002cce <HAL_GPIO_Init+0xfa>
 8002c40:	4a90      	ldr	r2, [pc, #576]	@ (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d85d      	bhi.n	8002d02 <HAL_GPIO_Init+0x12e>
 8002c46:	2b12      	cmp	r3, #18
 8002c48:	d82a      	bhi.n	8002ca0 <HAL_GPIO_Init+0xcc>
 8002c4a:	2b12      	cmp	r3, #18
 8002c4c:	d859      	bhi.n	8002d02 <HAL_GPIO_Init+0x12e>
 8002c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c54 <HAL_GPIO_Init+0x80>)
 8002c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c54:	08002ccf 	.word	0x08002ccf
 8002c58:	08002ca9 	.word	0x08002ca9
 8002c5c:	08002cbb 	.word	0x08002cbb
 8002c60:	08002cfd 	.word	0x08002cfd
 8002c64:	08002d03 	.word	0x08002d03
 8002c68:	08002d03 	.word	0x08002d03
 8002c6c:	08002d03 	.word	0x08002d03
 8002c70:	08002d03 	.word	0x08002d03
 8002c74:	08002d03 	.word	0x08002d03
 8002c78:	08002d03 	.word	0x08002d03
 8002c7c:	08002d03 	.word	0x08002d03
 8002c80:	08002d03 	.word	0x08002d03
 8002c84:	08002d03 	.word	0x08002d03
 8002c88:	08002d03 	.word	0x08002d03
 8002c8c:	08002d03 	.word	0x08002d03
 8002c90:	08002d03 	.word	0x08002d03
 8002c94:	08002d03 	.word	0x08002d03
 8002c98:	08002cb1 	.word	0x08002cb1
 8002c9c:	08002cc5 	.word	0x08002cc5
 8002ca0:	4a79      	ldr	r2, [pc, #484]	@ (8002e88 <HAL_GPIO_Init+0x2b4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ca6:	e02c      	b.n	8002d02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	623b      	str	r3, [r7, #32]
          break;
 8002cae:	e029      	b.n	8002d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	623b      	str	r3, [r7, #32]
          break;
 8002cb8:	e024      	b.n	8002d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	623b      	str	r3, [r7, #32]
          break;
 8002cc2:	e01f      	b.n	8002d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	623b      	str	r3, [r7, #32]
          break;
 8002ccc:	e01a      	b.n	8002d04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	623b      	str	r3, [r7, #32]
          break;
 8002cda:	e013      	b.n	8002d04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ce4:	2308      	movs	r3, #8
 8002ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	611a      	str	r2, [r3, #16]
          break;
 8002cee:	e009      	b.n	8002d04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	615a      	str	r2, [r3, #20]
          break;
 8002cfa:	e003      	b.n	8002d04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]
          break;
 8002d00:	e000      	b.n	8002d04 <HAL_GPIO_Init+0x130>
          break;
 8002d02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2bff      	cmp	r3, #255	@ 0xff
 8002d08:	d801      	bhi.n	8002d0e <HAL_GPIO_Init+0x13a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	e001      	b.n	8002d12 <HAL_GPIO_Init+0x13e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2bff      	cmp	r3, #255	@ 0xff
 8002d18:	d802      	bhi.n	8002d20 <HAL_GPIO_Init+0x14c>
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	e002      	b.n	8002d26 <HAL_GPIO_Init+0x152>
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	3b08      	subs	r3, #8
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	210f      	movs	r1, #15
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	401a      	ands	r2, r3
 8002d38:	6a39      	ldr	r1, [r7, #32]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	431a      	orrs	r2, r3
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80b1 	beq.w	8002eb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d54:	4b4d      	ldr	r3, [pc, #308]	@ (8002e8c <HAL_GPIO_Init+0x2b8>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	4a4c      	ldr	r2, [pc, #304]	@ (8002e8c <HAL_GPIO_Init+0x2b8>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6193      	str	r3, [r2, #24]
 8002d60:	4b4a      	ldr	r3, [pc, #296]	@ (8002e8c <HAL_GPIO_Init+0x2b8>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d6c:	4a48      	ldr	r2, [pc, #288]	@ (8002e90 <HAL_GPIO_Init+0x2bc>)
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	089b      	lsrs	r3, r3, #2
 8002d72:	3302      	adds	r3, #2
 8002d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	220f      	movs	r2, #15
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a40      	ldr	r2, [pc, #256]	@ (8002e94 <HAL_GPIO_Init+0x2c0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d013      	beq.n	8002dc0 <HAL_GPIO_Init+0x1ec>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e98 <HAL_GPIO_Init+0x2c4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00d      	beq.n	8002dbc <HAL_GPIO_Init+0x1e8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a3e      	ldr	r2, [pc, #248]	@ (8002e9c <HAL_GPIO_Init+0x2c8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d007      	beq.n	8002db8 <HAL_GPIO_Init+0x1e4>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a3d      	ldr	r2, [pc, #244]	@ (8002ea0 <HAL_GPIO_Init+0x2cc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d101      	bne.n	8002db4 <HAL_GPIO_Init+0x1e0>
 8002db0:	2303      	movs	r3, #3
 8002db2:	e006      	b.n	8002dc2 <HAL_GPIO_Init+0x1ee>
 8002db4:	2304      	movs	r3, #4
 8002db6:	e004      	b.n	8002dc2 <HAL_GPIO_Init+0x1ee>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e002      	b.n	8002dc2 <HAL_GPIO_Init+0x1ee>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <HAL_GPIO_Init+0x1ee>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc4:	f002 0203 	and.w	r2, r2, #3
 8002dc8:	0092      	lsls	r2, r2, #2
 8002dca:	4093      	lsls	r3, r2
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dd2:	492f      	ldr	r1, [pc, #188]	@ (8002e90 <HAL_GPIO_Init+0x2bc>)
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	089b      	lsrs	r3, r3, #2
 8002dd8:	3302      	adds	r3, #2
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d006      	beq.n	8002dfa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	492c      	ldr	r1, [pc, #176]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]
 8002df8:	e006      	b.n	8002e08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	4928      	ldr	r1, [pc, #160]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d006      	beq.n	8002e22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e14:	4b23      	ldr	r3, [pc, #140]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	4922      	ldr	r1, [pc, #136]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60cb      	str	r3, [r1, #12]
 8002e20:	e006      	b.n	8002e30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e22:	4b20      	ldr	r3, [pc, #128]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	491e      	ldr	r1, [pc, #120]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d006      	beq.n	8002e4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	4918      	ldr	r1, [pc, #96]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
 8002e48:	e006      	b.n	8002e58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e4a:	4b16      	ldr	r3, [pc, #88]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	4914      	ldr	r1, [pc, #80]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d021      	beq.n	8002ea8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	490e      	ldr	r1, [pc, #56]	@ (8002ea4 <HAL_GPIO_Init+0x2d0>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
 8002e70:	e021      	b.n	8002eb6 <HAL_GPIO_Init+0x2e2>
 8002e72:	bf00      	nop
 8002e74:	10320000 	.word	0x10320000
 8002e78:	10310000 	.word	0x10310000
 8002e7c:	10220000 	.word	0x10220000
 8002e80:	10210000 	.word	0x10210000
 8002e84:	10120000 	.word	0x10120000
 8002e88:	10110000 	.word	0x10110000
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40010000 	.word	0x40010000
 8002e94:	40010800 	.word	0x40010800
 8002e98:	40010c00 	.word	0x40010c00
 8002e9c:	40011000 	.word	0x40011000
 8002ea0:	40011400 	.word	0x40011400
 8002ea4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <HAL_GPIO_Init+0x304>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	4909      	ldr	r1, [pc, #36]	@ (8002ed8 <HAL_GPIO_Init+0x304>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	3301      	adds	r3, #1
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f47f ae8e 	bne.w	8002be8 <HAL_GPIO_Init+0x14>
  }
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	372c      	adds	r7, #44	@ 0x2c
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr
 8002ed8:	40010400 	.word	0x40010400

08002edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	807b      	strh	r3, [r7, #2]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eec:	787b      	ldrb	r3, [r7, #1]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ef2:	887a      	ldrh	r2, [r7, #2]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ef8:	e003      	b.n	8002f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002efa:	887b      	ldrh	r3, [r7, #2]
 8002efc:	041a      	lsls	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	611a      	str	r2, [r3, #16]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e12b      	b.n	8003176 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff f9ce 	bl	80022d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	@ 0x24
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f70:	f001 fbfc 	bl	800476c <HAL_RCC_GetPCLK1Freq>
 8002f74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4a81      	ldr	r2, [pc, #516]	@ (8003180 <HAL_I2C_Init+0x274>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d807      	bhi.n	8002f90 <HAL_I2C_Init+0x84>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a80      	ldr	r2, [pc, #512]	@ (8003184 <HAL_I2C_Init+0x278>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bf94      	ite	ls
 8002f88:	2301      	movls	r3, #1
 8002f8a:	2300      	movhi	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e006      	b.n	8002f9e <HAL_I2C_Init+0x92>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4a7d      	ldr	r2, [pc, #500]	@ (8003188 <HAL_I2C_Init+0x27c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	bf94      	ite	ls
 8002f98:	2301      	movls	r3, #1
 8002f9a:	2300      	movhi	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0e7      	b.n	8003176 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4a78      	ldr	r2, [pc, #480]	@ (800318c <HAL_I2C_Init+0x280>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0c9b      	lsrs	r3, r3, #18
 8002fb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a6a      	ldr	r2, [pc, #424]	@ (8003180 <HAL_I2C_Init+0x274>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d802      	bhi.n	8002fe0 <HAL_I2C_Init+0xd4>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	e009      	b.n	8002ff4 <HAL_I2C_Init+0xe8>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	4a69      	ldr	r2, [pc, #420]	@ (8003190 <HAL_I2C_Init+0x284>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003006:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	495c      	ldr	r1, [pc, #368]	@ (8003180 <HAL_I2C_Init+0x274>)
 8003010:	428b      	cmp	r3, r1
 8003012:	d819      	bhi.n	8003048 <HAL_I2C_Init+0x13c>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e59      	subs	r1, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003022:	1c59      	adds	r1, r3, #1
 8003024:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003028:	400b      	ands	r3, r1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_I2C_Init+0x138>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1e59      	subs	r1, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fbb1 f3f3 	udiv	r3, r1, r3
 800303c:	3301      	adds	r3, #1
 800303e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003042:	e051      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 8003044:	2304      	movs	r3, #4
 8003046:	e04f      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d111      	bne.n	8003074 <HAL_I2C_Init+0x168>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1e58      	subs	r0, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	440b      	add	r3, r1
 800305e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e012      	b.n	800309a <HAL_I2C_Init+0x18e>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e58      	subs	r0, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	0099      	lsls	r1, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	fbb0 f3f3 	udiv	r3, r0, r3
 800308a:	3301      	adds	r3, #1
 800308c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Init+0x196>
 800309e:	2301      	movs	r3, #1
 80030a0:	e022      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10e      	bne.n	80030c8 <HAL_I2C_Init+0x1bc>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1e58      	subs	r0, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	440b      	add	r3, r1
 80030b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030c6:	e00f      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e58      	subs	r0, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	0099      	lsls	r1, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	6809      	ldr	r1, [r1, #0]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003116:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6911      	ldr	r1, [r2, #16]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68d2      	ldr	r2, [r2, #12]
 8003122:	4311      	orrs	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	430b      	orrs	r3, r1
 800312a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	000186a0 	.word	0x000186a0
 8003184:	001e847f 	.word	0x001e847f
 8003188:	003d08ff 	.word	0x003d08ff
 800318c:	431bde83 	.word	0x431bde83
 8003190:	10624dd3 	.word	0x10624dd3

08003194 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af02      	add	r7, sp, #8
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	4608      	mov	r0, r1
 800319e:	4611      	mov	r1, r2
 80031a0:	461a      	mov	r2, r3
 80031a2:	4603      	mov	r3, r0
 80031a4:	817b      	strh	r3, [r7, #10]
 80031a6:	460b      	mov	r3, r1
 80031a8:	813b      	strh	r3, [r7, #8]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031ae:	f7ff fb5d 	bl	800286c <HAL_GetTick>
 80031b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b20      	cmp	r3, #32
 80031be:	f040 80d9 	bne.w	8003374 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2319      	movs	r3, #25
 80031c8:	2201      	movs	r2, #1
 80031ca:	496d      	ldr	r1, [pc, #436]	@ (8003380 <HAL_I2C_Mem_Write+0x1ec>)
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 fccd 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
 80031da:	e0cc      	b.n	8003376 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_I2C_Mem_Write+0x56>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e0c5      	b.n	8003376 <HAL_I2C_Mem_Write+0x1e2>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d007      	beq.n	8003210 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800321e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2221      	movs	r2, #33	@ 0x21
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2240      	movs	r2, #64	@ 0x40
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a3a      	ldr	r2, [r7, #32]
 800323a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003240:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a4d      	ldr	r2, [pc, #308]	@ (8003384 <HAL_I2C_Mem_Write+0x1f0>)
 8003250:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003252:	88f8      	ldrh	r0, [r7, #6]
 8003254:	893a      	ldrh	r2, [r7, #8]
 8003256:	8979      	ldrh	r1, [r7, #10]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	4603      	mov	r3, r0
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fb04 	bl	8003870 <I2C_RequestMemoryWrite>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d052      	beq.n	8003314 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e081      	b.n	8003376 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fd92 	bl	8003da0 <I2C_WaitOnTXEFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	2b04      	cmp	r3, #4
 8003288:	d107      	bne.n	800329a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e06b      	b.n	8003376 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d11b      	bne.n	8003314 <HAL_I2C_Mem_Write+0x180>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d017      	beq.n	8003314 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1aa      	bne.n	8003272 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fd85 	bl	8003e30 <I2C_WaitOnBTFFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00d      	beq.n	8003348 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	2b04      	cmp	r3, #4
 8003332:	d107      	bne.n	8003344 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003342:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e016      	b.n	8003376 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	00100002 	.word	0x00100002
 8003384:	ffff0000 	.word	0xffff0000

08003388 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08c      	sub	sp, #48	@ 0x30
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	4608      	mov	r0, r1
 8003392:	4611      	mov	r1, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4603      	mov	r3, r0
 8003398:	817b      	strh	r3, [r7, #10]
 800339a:	460b      	mov	r3, r1
 800339c:	813b      	strh	r3, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033a6:	f7ff fa61 	bl	800286c <HAL_GetTick>
 80033aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	f040 8250 	bne.w	800385a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	2319      	movs	r3, #25
 80033c0:	2201      	movs	r2, #1
 80033c2:	4982      	ldr	r1, [pc, #520]	@ (80035cc <HAL_I2C_Mem_Read+0x244>)
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fbd1 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
 80033d2:	e243      	b.n	800385c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_I2C_Mem_Read+0x5a>
 80033de:	2302      	movs	r3, #2
 80033e0:	e23c      	b.n	800385c <HAL_I2C_Mem_Read+0x4d4>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d007      	beq.n	8003408 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2222      	movs	r2, #34	@ 0x22
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2240      	movs	r2, #64	@ 0x40
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003432:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003438:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a62      	ldr	r2, [pc, #392]	@ (80035d0 <HAL_I2C_Mem_Read+0x248>)
 8003448:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800344a:	88f8      	ldrh	r0, [r7, #6]
 800344c:	893a      	ldrh	r2, [r7, #8]
 800344e:	8979      	ldrh	r1, [r7, #10]
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	4603      	mov	r3, r0
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fa9e 	bl	800399c <I2C_RequestMemoryRead>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e1f8      	b.n	800385c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346e:	2b00      	cmp	r3, #0
 8003470:	d113      	bne.n	800349a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	e1cc      	b.n	8003834 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d11e      	bne.n	80034e0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034b2:	b672      	cpsid	i
}
 80034b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034dc:	b662      	cpsie	i
}
 80034de:	e035      	b.n	800354c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d11e      	bne.n	8003526 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034f8:	b672      	cpsid	i
}
 80034fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003520:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003522:	b662      	cpsie	i
}
 8003524:	e012      	b.n	800354c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003534:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800354c:	e172      	b.n	8003834 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003552:	2b03      	cmp	r3, #3
 8003554:	f200 811f 	bhi.w	8003796 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355c:	2b01      	cmp	r3, #1
 800355e:	d123      	bne.n	80035a8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003562:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fcab 	bl	8003ec0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e173      	b.n	800385c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035a6:	e145      	b.n	8003834 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d152      	bne.n	8003656 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b6:	2200      	movs	r2, #0
 80035b8:	4906      	ldr	r1, [pc, #24]	@ (80035d4 <HAL_I2C_Mem_Read+0x24c>)
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fad6 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e148      	b.n	800385c <HAL_I2C_Mem_Read+0x4d4>
 80035ca:	bf00      	nop
 80035cc:	00100002 	.word	0x00100002
 80035d0:	ffff0000 	.word	0xffff0000
 80035d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80035d8:	b672      	cpsid	i
}
 80035da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800361e:	b662      	cpsie	i
}
 8003620:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003654:	e0ee      	b.n	8003834 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365c:	2200      	movs	r2, #0
 800365e:	4981      	ldr	r1, [pc, #516]	@ (8003864 <HAL_I2C_Mem_Read+0x4dc>)
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fa83 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0f5      	b.n	800385c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800367e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003680:	b672      	cpsid	i
}
 8003682:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003868 <HAL_I2C_Mem_Read+0x4e0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	08db      	lsrs	r3, r3, #3
 80036bc:	4a6b      	ldr	r2, [pc, #428]	@ (800386c <HAL_I2C_Mem_Read+0x4e4>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0a1a      	lsrs	r2, r3, #8
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	00da      	lsls	r2, r3, #3
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d118      	bne.n	800370e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80036fe:	b662      	cpsie	i
}
 8003700:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e0a6      	b.n	800385c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b04      	cmp	r3, #4
 800371a:	d1d9      	bne.n	80036d0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800372a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800375e:	b662      	cpsie	i
}
 8003760:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003794:	e04e      	b.n	8003834 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003798:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fb90 	bl	8003ec0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e058      	b.n	800385c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d124      	bne.n	8003834 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d107      	bne.n	8003802 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003800:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003838:	2b00      	cmp	r3, #0
 800383a:	f47f ae88 	bne.w	800354e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e000      	b.n	800385c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800385a:	2302      	movs	r3, #2
  }
}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	@ 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	00010004 	.word	0x00010004
 8003868:	20000000 	.word	0x20000000
 800386c:	14f8b589 	.word	0x14f8b589

08003870 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4603      	mov	r3, r0
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	460b      	mov	r3, r1
 8003884:	813b      	strh	r3, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003898:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f960 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00d      	beq.n	80038ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c0:	d103      	bne.n	80038ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e05f      	b.n	800398e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ce:	897b      	ldrh	r3, [r7, #10]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	6a3a      	ldr	r2, [r7, #32]
 80038e2:	492d      	ldr	r1, [pc, #180]	@ (8003998 <I2C_RequestMemoryWrite+0x128>)
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f9bb 	bl	8003c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e04c      	b.n	800398e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800390a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390c:	6a39      	ldr	r1, [r7, #32]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 fa46 	bl	8003da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00d      	beq.n	8003936 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	2b04      	cmp	r3, #4
 8003920:	d107      	bne.n	8003932 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003930:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e02b      	b.n	800398e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d105      	bne.n	8003948 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800393c:	893b      	ldrh	r3, [r7, #8]
 800393e:	b2da      	uxtb	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	611a      	str	r2, [r3, #16]
 8003946:	e021      	b.n	800398c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003948:	893b      	ldrh	r3, [r7, #8]
 800394a:	0a1b      	lsrs	r3, r3, #8
 800394c:	b29b      	uxth	r3, r3
 800394e:	b2da      	uxtb	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003958:	6a39      	ldr	r1, [r7, #32]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fa20 	bl	8003da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	2b04      	cmp	r3, #4
 800396c:	d107      	bne.n	800397e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800397c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e005      	b.n	800398e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003982:	893b      	ldrh	r3, [r7, #8]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	00010002 	.word	0x00010002

0800399c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	4608      	mov	r0, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	461a      	mov	r2, r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	817b      	strh	r3, [r7, #10]
 80039ae:	460b      	mov	r3, r1
 80039b0:	813b      	strh	r3, [r7, #8]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	2200      	movs	r2, #0
 80039de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f8c2 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00d      	beq.n	8003a0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039fc:	d103      	bne.n	8003a06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e0aa      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a0a:	897b      	ldrh	r3, [r7, #10]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	6a3a      	ldr	r2, [r7, #32]
 8003a1e:	4952      	ldr	r1, [pc, #328]	@ (8003b68 <I2C_RequestMemoryRead+0x1cc>)
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f91d 	bl	8003c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e097      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a48:	6a39      	ldr	r1, [r7, #32]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f9a8 	bl	8003da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00d      	beq.n	8003a72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d107      	bne.n	8003a6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e076      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d105      	bne.n	8003a84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a78:	893b      	ldrh	r3, [r7, #8]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	611a      	str	r2, [r3, #16]
 8003a82:	e021      	b.n	8003ac8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a84:	893b      	ldrh	r3, [r7, #8]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a94:	6a39      	ldr	r1, [r7, #32]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f982 	bl	8003da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00d      	beq.n	8003abe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d107      	bne.n	8003aba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e050      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003abe:	893b      	ldrh	r3, [r7, #8]
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aca:	6a39      	ldr	r1, [r7, #32]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f967 	bl	8003da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00d      	beq.n	8003af4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d107      	bne.n	8003af0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e035      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f82b 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00d      	beq.n	8003b38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b2a:	d103      	bne.n	8003b34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e013      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b38:	897b      	ldrh	r3, [r7, #10]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4a:	6a3a      	ldr	r2, [r7, #32]
 8003b4c:	4906      	ldr	r1, [pc, #24]	@ (8003b68 <I2C_RequestMemoryRead+0x1cc>)
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f886 	bl	8003c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	00010002 	.word	0x00010002

08003b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b7c:	e048      	b.n	8003c10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b84:	d044      	beq.n	8003c10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b86:	f7fe fe71 	bl	800286c <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d302      	bcc.n	8003b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d139      	bne.n	8003c10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d10d      	bne.n	8003bc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	43da      	mvns	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	e00c      	b.n	8003bdc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	43da      	mvns	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d116      	bne.n	8003c10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	f043 0220 	orr.w	r2, r3, #32
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e023      	b.n	8003c58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	0c1b      	lsrs	r3, r3, #16
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d10d      	bne.n	8003c36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	43da      	mvns	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4013      	ands	r3, r2
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	e00c      	b.n	8003c50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	43da      	mvns	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	4013      	ands	r3, r2
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d093      	beq.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c6e:	e071      	b.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c7e:	d123      	bne.n	8003cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb4:	f043 0204 	orr.w	r2, r3, #4
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e067      	b.n	8003d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d041      	beq.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd0:	f7fe fdcc 	bl	800286c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d302      	bcc.n	8003ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d136      	bne.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d10c      	bne.n	8003d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	bf14      	ite	ne
 8003d02:	2301      	movne	r3, #1
 8003d04:	2300      	moveq	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	e00b      	b.n	8003d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	43da      	mvns	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4013      	ands	r3, r2
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf14      	ite	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	2300      	moveq	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d016      	beq.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e021      	b.n	8003d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	0c1b      	lsrs	r3, r3, #16
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d10c      	bne.n	8003d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	43da      	mvns	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf14      	ite	ne
 8003d70:	2301      	movne	r3, #1
 8003d72:	2300      	moveq	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	e00b      	b.n	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4013      	ands	r3, r2
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bf14      	ite	ne
 8003d8a:	2301      	movne	r3, #1
 8003d8c:	2300      	moveq	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f47f af6d 	bne.w	8003c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dac:	e034      	b.n	8003e18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f8e3 	bl	8003f7a <I2C_IsAcknowledgeFailed>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e034      	b.n	8003e28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d028      	beq.n	8003e18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc6:	f7fe fd51 	bl	800286c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d302      	bcc.n	8003ddc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d11d      	bne.n	8003e18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de6:	2b80      	cmp	r3, #128	@ 0x80
 8003de8:	d016      	beq.n	8003e18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e04:	f043 0220 	orr.w	r2, r3, #32
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e007      	b.n	8003e28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e22:	2b80      	cmp	r3, #128	@ 0x80
 8003e24:	d1c3      	bne.n	8003dae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e3c:	e034      	b.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f89b 	bl	8003f7a <I2C_IsAcknowledgeFailed>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e034      	b.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d028      	beq.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7fe fd09 	bl	800286c <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d11d      	bne.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d016      	beq.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	f043 0220 	orr.w	r2, r3, #32
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e007      	b.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d1c3      	bne.n	8003e3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ecc:	e049      	b.n	8003f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d119      	bne.n	8003f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0210 	mvn.w	r2, #16
 8003ee4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e030      	b.n	8003f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f10:	f7fe fcac 	bl	800286c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d11d      	bne.n	8003f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f30:	2b40      	cmp	r3, #64	@ 0x40
 8003f32:	d016      	beq.n	8003f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e007      	b.n	8003f72 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6c:	2b40      	cmp	r3, #64	@ 0x40
 8003f6e:	d1ae      	bne.n	8003ece <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f90:	d11b      	bne.n	8003fca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	f043 0204 	orr.w	r2, r3, #4
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr
	...

08003fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e272      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8087 	beq.w	8004106 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ff8:	4b92      	ldr	r3, [pc, #584]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	2b04      	cmp	r3, #4
 8004002:	d00c      	beq.n	800401e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004004:	4b8f      	ldr	r3, [pc, #572]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b08      	cmp	r3, #8
 800400e:	d112      	bne.n	8004036 <HAL_RCC_OscConfig+0x5e>
 8004010:	4b8c      	ldr	r3, [pc, #560]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800401c:	d10b      	bne.n	8004036 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401e:	4b89      	ldr	r3, [pc, #548]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d06c      	beq.n	8004104 <HAL_RCC_OscConfig+0x12c>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d168      	bne.n	8004104 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e24c      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800403e:	d106      	bne.n	800404e <HAL_RCC_OscConfig+0x76>
 8004040:	4b80      	ldr	r3, [pc, #512]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a7f      	ldr	r2, [pc, #508]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004046:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	e02e      	b.n	80040ac <HAL_RCC_OscConfig+0xd4>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10c      	bne.n	8004070 <HAL_RCC_OscConfig+0x98>
 8004056:	4b7b      	ldr	r3, [pc, #492]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a7a      	ldr	r2, [pc, #488]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 800405c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	4b78      	ldr	r3, [pc, #480]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a77      	ldr	r2, [pc, #476]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004068:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e01d      	b.n	80040ac <HAL_RCC_OscConfig+0xd4>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004078:	d10c      	bne.n	8004094 <HAL_RCC_OscConfig+0xbc>
 800407a:	4b72      	ldr	r3, [pc, #456]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a71      	ldr	r2, [pc, #452]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	4b6f      	ldr	r3, [pc, #444]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a6e      	ldr	r2, [pc, #440]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 800408c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e00b      	b.n	80040ac <HAL_RCC_OscConfig+0xd4>
 8004094:	4b6b      	ldr	r3, [pc, #428]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a6a      	ldr	r2, [pc, #424]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 800409a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	4b68      	ldr	r3, [pc, #416]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a67      	ldr	r2, [pc, #412]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 80040a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d013      	beq.n	80040dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fe fbda 	bl	800286c <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040bc:	f7fe fbd6 	bl	800286c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	@ 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e200      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0xe4>
 80040da:	e014      	b.n	8004106 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040dc:	f7fe fbc6 	bl	800286c <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fe fbc2 	bl	800286c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	@ 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e1ec      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f6:	4b53      	ldr	r3, [pc, #332]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0x10c>
 8004102:	e000      	b.n	8004106 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d063      	beq.n	80041da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004112:	4b4c      	ldr	r3, [pc, #304]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00b      	beq.n	8004136 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800411e:	4b49      	ldr	r3, [pc, #292]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 030c 	and.w	r3, r3, #12
 8004126:	2b08      	cmp	r3, #8
 8004128:	d11c      	bne.n	8004164 <HAL_RCC_OscConfig+0x18c>
 800412a:	4b46      	ldr	r3, [pc, #280]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d116      	bne.n	8004164 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004136:	4b43      	ldr	r3, [pc, #268]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_RCC_OscConfig+0x176>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d001      	beq.n	800414e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e1c0      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414e:	4b3d      	ldr	r3, [pc, #244]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4939      	ldr	r1, [pc, #228]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004162:	e03a      	b.n	80041da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d020      	beq.n	80041ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800416c:	4b36      	ldr	r3, [pc, #216]	@ (8004248 <HAL_RCC_OscConfig+0x270>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004172:	f7fe fb7b 	bl	800286c <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417a:	f7fe fb77 	bl	800286c <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e1a1      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418c:	4b2d      	ldr	r3, [pc, #180]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004198:	4b2a      	ldr	r3, [pc, #168]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4927      	ldr	r1, [pc, #156]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	600b      	str	r3, [r1, #0]
 80041ac:	e015      	b.n	80041da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ae:	4b26      	ldr	r3, [pc, #152]	@ (8004248 <HAL_RCC_OscConfig+0x270>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b4:	f7fe fb5a 	bl	800286c <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041bc:	f7fe fb56 	bl	800286c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e180      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d03a      	beq.n	800425c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d019      	beq.n	8004222 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ee:	4b17      	ldr	r3, [pc, #92]	@ (800424c <HAL_RCC_OscConfig+0x274>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f4:	f7fe fb3a 	bl	800286c <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fc:	f7fe fb36 	bl	800286c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e160      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420e:	4b0d      	ldr	r3, [pc, #52]	@ (8004244 <HAL_RCC_OscConfig+0x26c>)
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800421a:	2001      	movs	r0, #1
 800421c:	f000 face 	bl	80047bc <RCC_Delay>
 8004220:	e01c      	b.n	800425c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004222:	4b0a      	ldr	r3, [pc, #40]	@ (800424c <HAL_RCC_OscConfig+0x274>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004228:	f7fe fb20 	bl	800286c <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800422e:	e00f      	b.n	8004250 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004230:	f7fe fb1c 	bl	800286c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d908      	bls.n	8004250 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e146      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
 8004248:	42420000 	.word	0x42420000
 800424c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004250:	4b92      	ldr	r3, [pc, #584]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e9      	bne.n	8004230 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80a6 	beq.w	80043b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426e:	4b8b      	ldr	r3, [pc, #556]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10d      	bne.n	8004296 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	4b88      	ldr	r3, [pc, #544]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	4a87      	ldr	r2, [pc, #540]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004284:	61d3      	str	r3, [r2, #28]
 8004286:	4b85      	ldr	r3, [pc, #532]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004292:	2301      	movs	r3, #1
 8004294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004296:	4b82      	ldr	r3, [pc, #520]	@ (80044a0 <HAL_RCC_OscConfig+0x4c8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d118      	bne.n	80042d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042a2:	4b7f      	ldr	r3, [pc, #508]	@ (80044a0 <HAL_RCC_OscConfig+0x4c8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a7e      	ldr	r2, [pc, #504]	@ (80044a0 <HAL_RCC_OscConfig+0x4c8>)
 80042a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ae:	f7fe fadd 	bl	800286c <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b6:	f7fe fad9 	bl	800286c <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b64      	cmp	r3, #100	@ 0x64
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e103      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	4b75      	ldr	r3, [pc, #468]	@ (80044a0 <HAL_RCC_OscConfig+0x4c8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d106      	bne.n	80042ea <HAL_RCC_OscConfig+0x312>
 80042dc:	4b6f      	ldr	r3, [pc, #444]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	4a6e      	ldr	r2, [pc, #440]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6213      	str	r3, [r2, #32]
 80042e8:	e02d      	b.n	8004346 <HAL_RCC_OscConfig+0x36e>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0x334>
 80042f2:	4b6a      	ldr	r3, [pc, #424]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	4a69      	ldr	r2, [pc, #420]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	6213      	str	r3, [r2, #32]
 80042fe:	4b67      	ldr	r3, [pc, #412]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	4a66      	ldr	r2, [pc, #408]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004304:	f023 0304 	bic.w	r3, r3, #4
 8004308:	6213      	str	r3, [r2, #32]
 800430a:	e01c      	b.n	8004346 <HAL_RCC_OscConfig+0x36e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	2b05      	cmp	r3, #5
 8004312:	d10c      	bne.n	800432e <HAL_RCC_OscConfig+0x356>
 8004314:	4b61      	ldr	r3, [pc, #388]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	4a60      	ldr	r2, [pc, #384]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	6213      	str	r3, [r2, #32]
 8004320:	4b5e      	ldr	r3, [pc, #376]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	4a5d      	ldr	r2, [pc, #372]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	6213      	str	r3, [r2, #32]
 800432c:	e00b      	b.n	8004346 <HAL_RCC_OscConfig+0x36e>
 800432e:	4b5b      	ldr	r3, [pc, #364]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	4a5a      	ldr	r2, [pc, #360]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004334:	f023 0301 	bic.w	r3, r3, #1
 8004338:	6213      	str	r3, [r2, #32]
 800433a:	4b58      	ldr	r3, [pc, #352]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	4a57      	ldr	r2, [pc, #348]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004340:	f023 0304 	bic.w	r3, r3, #4
 8004344:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d015      	beq.n	800437a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434e:	f7fe fa8d 	bl	800286c <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fe fa89 	bl	800286c <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e0b1      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	4b4b      	ldr	r3, [pc, #300]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ee      	beq.n	8004356 <HAL_RCC_OscConfig+0x37e>
 8004378:	e014      	b.n	80043a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800437a:	f7fe fa77 	bl	800286c <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004380:	e00a      	b.n	8004398 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fe fa73 	bl	800286c <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e09b      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004398:	4b40      	ldr	r3, [pc, #256]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1ee      	bne.n	8004382 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d105      	bne.n	80043b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043aa:	4b3c      	ldr	r3, [pc, #240]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	4a3b      	ldr	r2, [pc, #236]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8087 	beq.w	80044ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043c0:	4b36      	ldr	r3, [pc, #216]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 030c 	and.w	r3, r3, #12
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d061      	beq.n	8004490 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d146      	bne.n	8004462 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d4:	4b33      	ldr	r3, [pc, #204]	@ (80044a4 <HAL_RCC_OscConfig+0x4cc>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043da:	f7fe fa47 	bl	800286c <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e2:	f7fe fa43 	bl	800286c <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e06d      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043f4:	4b29      	ldr	r3, [pc, #164]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f0      	bne.n	80043e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004408:	d108      	bne.n	800441c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800440a:	4b24      	ldr	r3, [pc, #144]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	4921      	ldr	r1, [pc, #132]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800441c:	4b1f      	ldr	r3, [pc, #124]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a19      	ldr	r1, [r3, #32]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	430b      	orrs	r3, r1
 800442e:	491b      	ldr	r1, [pc, #108]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004430:	4313      	orrs	r3, r2
 8004432:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004434:	4b1b      	ldr	r3, [pc, #108]	@ (80044a4 <HAL_RCC_OscConfig+0x4cc>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fe fa17 	bl	800286c <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004442:	f7fe fa13 	bl	800286c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e03d      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004454:	4b11      	ldr	r3, [pc, #68]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x46a>
 8004460:	e035      	b.n	80044ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004462:	4b10      	ldr	r3, [pc, #64]	@ (80044a4 <HAL_RCC_OscConfig+0x4cc>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fe fa00 	bl	800286c <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004470:	f7fe f9fc 	bl	800286c <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e026      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004482:	4b06      	ldr	r3, [pc, #24]	@ (800449c <HAL_RCC_OscConfig+0x4c4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x498>
 800448e:	e01e      	b.n	80044ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e019      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
 800449c:	40021000 	.word	0x40021000
 80044a0:	40007000 	.word	0x40007000
 80044a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044a8:	4b0b      	ldr	r3, [pc, #44]	@ (80044d8 <HAL_RCC_OscConfig+0x500>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d106      	bne.n	80044ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d001      	beq.n	80044ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000

080044dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0d0      	b.n	8004692 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044f0:	4b6a      	ldr	r3, [pc, #424]	@ (800469c <HAL_RCC_ClockConfig+0x1c0>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d910      	bls.n	8004520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b67      	ldr	r3, [pc, #412]	@ (800469c <HAL_RCC_ClockConfig+0x1c0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 0207 	bic.w	r2, r3, #7
 8004506:	4965      	ldr	r1, [pc, #404]	@ (800469c <HAL_RCC_ClockConfig+0x1c0>)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450e:	4b63      	ldr	r3, [pc, #396]	@ (800469c <HAL_RCC_ClockConfig+0x1c0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d001      	beq.n	8004520 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0b8      	b.n	8004692 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d020      	beq.n	800456e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004538:	4b59      	ldr	r3, [pc, #356]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4a58      	ldr	r2, [pc, #352]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 800453e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004542:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004550:	4b53      	ldr	r3, [pc, #332]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4a52      	ldr	r2, [pc, #328]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004556:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800455a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800455c:	4b50      	ldr	r3, [pc, #320]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	494d      	ldr	r1, [pc, #308]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 800456a:	4313      	orrs	r3, r2
 800456c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d040      	beq.n	80045fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	4b47      	ldr	r3, [pc, #284]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d115      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e07f      	b.n	8004692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459a:	4b41      	ldr	r3, [pc, #260]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e073      	b.n	8004692 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045aa:	4b3d      	ldr	r3, [pc, #244]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e06b      	b.n	8004692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ba:	4b39      	ldr	r3, [pc, #228]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4936      	ldr	r1, [pc, #216]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045cc:	f7fe f94e 	bl	800286c <HAL_GetTick>
 80045d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d4:	f7fe f94a 	bl	800286c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e053      	b.n	8004692 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	4b2d      	ldr	r3, [pc, #180]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 020c 	and.w	r2, r3, #12
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d1eb      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045fc:	4b27      	ldr	r3, [pc, #156]	@ (800469c <HAL_RCC_ClockConfig+0x1c0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d210      	bcs.n	800462c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b24      	ldr	r3, [pc, #144]	@ (800469c <HAL_RCC_ClockConfig+0x1c0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 0207 	bic.w	r2, r3, #7
 8004612:	4922      	ldr	r1, [pc, #136]	@ (800469c <HAL_RCC_ClockConfig+0x1c0>)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b20      	ldr	r3, [pc, #128]	@ (800469c <HAL_RCC_ClockConfig+0x1c0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e032      	b.n	8004692 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004638:	4b19      	ldr	r3, [pc, #100]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4916      	ldr	r1, [pc, #88]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004646:	4313      	orrs	r3, r2
 8004648:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004656:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	490e      	ldr	r1, [pc, #56]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004666:	4313      	orrs	r3, r2
 8004668:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800466a:	f000 f821 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 800466e:	4602      	mov	r2, r0
 8004670:	4b0b      	ldr	r3, [pc, #44]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	490a      	ldr	r1, [pc, #40]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c8>)
 800467c:	5ccb      	ldrb	r3, [r1, r3]
 800467e:	fa22 f303 	lsr.w	r3, r2, r3
 8004682:	4a09      	ldr	r2, [pc, #36]	@ (80046a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004686:	4b09      	ldr	r3, [pc, #36]	@ (80046ac <HAL_RCC_ClockConfig+0x1d0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe f8ac 	bl	80027e8 <HAL_InitTick>

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40022000 	.word	0x40022000
 80046a0:	40021000 	.word	0x40021000
 80046a4:	08009470 	.word	0x08009470
 80046a8:	20000000 	.word	0x20000000
 80046ac:	20000004 	.word	0x20000004

080046b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	2300      	movs	r3, #0
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	2300      	movs	r3, #0
 80046c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x94>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d002      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0x30>
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d003      	beq.n	80046e6 <HAL_RCC_GetSysClockFreq+0x36>
 80046de:	e027      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046e0:	4b19      	ldr	r3, [pc, #100]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x98>)
 80046e2:	613b      	str	r3, [r7, #16]
      break;
 80046e4:	e027      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	0c9b      	lsrs	r3, r3, #18
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	4a17      	ldr	r2, [pc, #92]	@ (800474c <HAL_RCC_GetSysClockFreq+0x9c>)
 80046f0:	5cd3      	ldrb	r3, [r2, r3]
 80046f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d010      	beq.n	8004720 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046fe:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x94>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	0c5b      	lsrs	r3, r3, #17
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	4a11      	ldr	r2, [pc, #68]	@ (8004750 <HAL_RCC_GetSysClockFreq+0xa0>)
 800470a:	5cd3      	ldrb	r3, [r2, r3]
 800470c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a0d      	ldr	r2, [pc, #52]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x98>)
 8004712:	fb03 f202 	mul.w	r2, r3, r2
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e004      	b.n	800472a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a0c      	ldr	r2, [pc, #48]	@ (8004754 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	613b      	str	r3, [r7, #16]
      break;
 800472e:	e002      	b.n	8004736 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <HAL_RCC_GetSysClockFreq+0x98>)
 8004732:	613b      	str	r3, [r7, #16]
      break;
 8004734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004736:	693b      	ldr	r3, [r7, #16]
}
 8004738:	4618      	mov	r0, r3
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40021000 	.word	0x40021000
 8004748:	007a1200 	.word	0x007a1200
 800474c:	08009488 	.word	0x08009488
 8004750:	08009498 	.word	0x08009498
 8004754:	003d0900 	.word	0x003d0900

08004758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800475c:	4b02      	ldr	r3, [pc, #8]	@ (8004768 <HAL_RCC_GetHCLKFreq+0x10>)
 800475e:	681b      	ldr	r3, [r3, #0]
}
 8004760:	4618      	mov	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr
 8004768:	20000000 	.word	0x20000000

0800476c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004770:	f7ff fff2 	bl	8004758 <HAL_RCC_GetHCLKFreq>
 8004774:	4602      	mov	r2, r0
 8004776:	4b05      	ldr	r3, [pc, #20]	@ (800478c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	0a1b      	lsrs	r3, r3, #8
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	4903      	ldr	r1, [pc, #12]	@ (8004790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004782:	5ccb      	ldrb	r3, [r1, r3]
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004788:	4618      	mov	r0, r3
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40021000 	.word	0x40021000
 8004790:	08009480 	.word	0x08009480

08004794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004798:	f7ff ffde 	bl	8004758 <HAL_RCC_GetHCLKFreq>
 800479c:	4602      	mov	r2, r0
 800479e:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	0adb      	lsrs	r3, r3, #11
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	4903      	ldr	r1, [pc, #12]	@ (80047b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047aa:	5ccb      	ldrb	r3, [r1, r3]
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000
 80047b8:	08009480 	.word	0x08009480

080047bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047c4:	4b0a      	ldr	r3, [pc, #40]	@ (80047f0 <RCC_Delay+0x34>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a0a      	ldr	r2, [pc, #40]	@ (80047f4 <RCC_Delay+0x38>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	0a5b      	lsrs	r3, r3, #9
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047d8:	bf00      	nop
  }
  while (Delay --);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1e5a      	subs	r2, r3, #1
 80047de:	60fa      	str	r2, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f9      	bne.n	80047d8 <RCC_Delay+0x1c>
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr
 80047f0:	20000000 	.word	0x20000000
 80047f4:	10624dd3 	.word	0x10624dd3

080047f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e076      	b.n	80048f8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800481a:	d009      	beq.n	8004830 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	61da      	str	r2, [r3, #28]
 8004822:	e005      	b.n	8004830 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fd fd80 	bl	8002350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b4:	ea42 0103 	orr.w	r1, r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	0c1a      	lsrs	r2, r3, #16
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f002 0204 	and.w	r2, r2, #4
 80048d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004910:	f7fd ffac 	bl	800286c <HAL_GetTick>
 8004914:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d001      	beq.n	800492a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004926:	2302      	movs	r3, #2
 8004928:	e12a      	b.n	8004b80 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_SPI_Transmit+0x36>
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e122      	b.n	8004b80 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_SPI_Transmit+0x48>
 8004944:	2302      	movs	r3, #2
 8004946:	e11b      	b.n	8004b80 <HAL_SPI_Transmit+0x280>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2203      	movs	r2, #3
 8004954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	88fa      	ldrh	r2, [r7, #6]
 8004968:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	88fa      	ldrh	r2, [r7, #6]
 800496e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004996:	d10f      	bne.n	80049b8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c2:	2b40      	cmp	r3, #64	@ 0x40
 80049c4:	d007      	beq.n	80049d6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049de:	d152      	bne.n	8004a86 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_SPI_Transmit+0xee>
 80049e8:	8b7b      	ldrh	r3, [r7, #26]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d145      	bne.n	8004a7a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f2:	881a      	ldrh	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	1c9a      	adds	r2, r3, #2
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a12:	e032      	b.n	8004a7a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d112      	bne.n	8004a48 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a26:	881a      	ldrh	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a32:	1c9a      	adds	r2, r3, #2
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a46:	e018      	b.n	8004a7a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a48:	f7fd ff10 	bl	800286c <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d803      	bhi.n	8004a60 <HAL_SPI_Transmit+0x160>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d102      	bne.n	8004a66 <HAL_SPI_Transmit+0x166>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e082      	b.n	8004b80 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1c7      	bne.n	8004a14 <HAL_SPI_Transmit+0x114>
 8004a84:	e053      	b.n	8004b2e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_SPI_Transmit+0x194>
 8004a8e:	8b7b      	ldrh	r3, [r7, #26]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d147      	bne.n	8004b24 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	7812      	ldrb	r2, [r2, #0]
 8004aa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004aba:	e033      	b.n	8004b24 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d113      	bne.n	8004af2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004af0:	e018      	b.n	8004b24 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004af2:	f7fd febb 	bl	800286c <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d803      	bhi.n	8004b0a <HAL_SPI_Transmit+0x20a>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d102      	bne.n	8004b10 <HAL_SPI_Transmit+0x210>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d109      	bne.n	8004b24 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e02d      	b.n	8004b80 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1c6      	bne.n	8004abc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	6839      	ldr	r1, [r7, #0]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fcc8 	bl	80054c8 <SPI_EndRxTxTransaction>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
  }
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d001      	beq.n	8004ba8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e104      	b.n	8004db2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bb0:	d112      	bne.n	8004bd8 <HAL_SPI_Receive+0x50>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bc2:	88fa      	ldrh	r2, [r7, #6]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 f8f3 	bl	8004dba <HAL_SPI_TransmitReceive>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	e0ec      	b.n	8004db2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bd8:	f7fd fe48 	bl	800286c <HAL_GetTick>
 8004bdc:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_SPI_Receive+0x62>
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e0e1      	b.n	8004db2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_SPI_Receive+0x74>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e0da      	b.n	8004db2 <HAL_SPI_Receive+0x22a>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2204      	movs	r2, #4
 8004c08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	88fa      	ldrh	r2, [r7, #6]
 8004c22:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c4a:	d10f      	bne.n	8004c6c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c6a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c76:	2b40      	cmp	r3, #64	@ 0x40
 8004c78:	d007      	beq.n	8004c8a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c88:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d170      	bne.n	8004d74 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c92:	e035      	b.n	8004d00 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d115      	bne.n	8004cce <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f103 020c 	add.w	r2, r3, #12
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cae:	7812      	ldrb	r2, [r2, #0]
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ccc:	e018      	b.n	8004d00 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cce:	f7fd fdcd 	bl	800286c <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d803      	bhi.n	8004ce6 <HAL_SPI_Receive+0x15e>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d102      	bne.n	8004cec <HAL_SPI_Receive+0x164>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e058      	b.n	8004db2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1c4      	bne.n	8004c94 <HAL_SPI_Receive+0x10c>
 8004d0a:	e038      	b.n	8004d7e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d113      	bne.n	8004d42 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d24:	b292      	uxth	r2, r2
 8004d26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2c:	1c9a      	adds	r2, r3, #2
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d40:	e018      	b.n	8004d74 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d42:	f7fd fd93 	bl	800286c <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d803      	bhi.n	8004d5a <HAL_SPI_Receive+0x1d2>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d102      	bne.n	8004d60 <HAL_SPI_Receive+0x1d8>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d109      	bne.n	8004d74 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e01e      	b.n	8004db2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1c6      	bne.n	8004d0c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	6839      	ldr	r1, [r7, #0]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fb4e 	bl	8005424 <SPI_EndRxTransaction>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004db0:	2300      	movs	r3, #0
  }
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b08a      	sub	sp, #40	@ 0x28
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
 8004dc6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dcc:	f7fd fd4e 	bl	800286c <HAL_GetTick>
 8004dd0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dd8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004de0:	887b      	ldrh	r3, [r7, #2]
 8004de2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004de4:	7ffb      	ldrb	r3, [r7, #31]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d00c      	beq.n	8004e04 <HAL_SPI_TransmitReceive+0x4a>
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004df0:	d106      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x46>
 8004dfa:	7ffb      	ldrb	r3, [r7, #31]
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d001      	beq.n	8004e04 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004e00:	2302      	movs	r3, #2
 8004e02:	e17f      	b.n	8005104 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_SPI_TransmitReceive+0x5c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <HAL_SPI_TransmitReceive+0x5c>
 8004e10:	887b      	ldrh	r3, [r7, #2]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e174      	b.n	8005104 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x6e>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e16d      	b.n	8005104 <HAL_SPI_TransmitReceive+0x34a>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d003      	beq.n	8004e44 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2205      	movs	r2, #5
 8004e40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	887a      	ldrh	r2, [r7, #2]
 8004e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	887a      	ldrh	r2, [r7, #2]
 8004e5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	887a      	ldrh	r2, [r7, #2]
 8004e66:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e84:	2b40      	cmp	r3, #64	@ 0x40
 8004e86:	d007      	beq.n	8004e98 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea0:	d17e      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_SPI_TransmitReceive+0xf6>
 8004eaa:	8afb      	ldrh	r3, [r7, #22]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d16c      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb4:	881a      	ldrh	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec0:	1c9a      	adds	r2, r3, #2
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed4:	e059      	b.n	8004f8a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d11b      	bne.n	8004f1c <HAL_SPI_TransmitReceive+0x162>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d016      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x162>
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d113      	bne.n	8004f1c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef8:	881a      	ldrh	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f04:	1c9a      	adds	r2, r3, #2
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d119      	bne.n	8004f5e <HAL_SPI_TransmitReceive+0x1a4>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d014      	beq.n	8004f5e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3e:	b292      	uxth	r2, r2
 8004f40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f46:	1c9a      	adds	r2, r3, #2
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f5e:	f7fd fc85 	bl	800286c <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d80d      	bhi.n	8004f8a <HAL_SPI_TransmitReceive+0x1d0>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f74:	d009      	beq.n	8004f8a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e0bc      	b.n	8005104 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1a0      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x11c>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d19b      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x11c>
 8004f9e:	e082      	b.n	80050a6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_SPI_TransmitReceive+0x1f4>
 8004fa8:	8afb      	ldrh	r3, [r7, #22]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d171      	bne.n	8005092 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	7812      	ldrb	r2, [r2, #0]
 8004fba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fd4:	e05d      	b.n	8005092 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d11c      	bne.n	800501e <HAL_SPI_TransmitReceive+0x264>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d017      	beq.n	800501e <HAL_SPI_TransmitReceive+0x264>
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d114      	bne.n	800501e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	7812      	ldrb	r2, [r2, #0]
 8005000:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b01      	cmp	r3, #1
 800502a:	d119      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x2a6>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d014      	beq.n	8005060 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800505c:	2301      	movs	r3, #1
 800505e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005060:	f7fd fc04 	bl	800286c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800506c:	429a      	cmp	r2, r3
 800506e:	d803      	bhi.n	8005078 <HAL_SPI_TransmitReceive+0x2be>
 8005070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d102      	bne.n	800507e <HAL_SPI_TransmitReceive+0x2c4>
 8005078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e038      	b.n	8005104 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d19c      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x21c>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d197      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050a6:	6a3a      	ldr	r2, [r7, #32]
 80050a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fa0c 	bl	80054c8 <SPI_EndRxTxTransaction>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e01d      	b.n	8005104 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10a      	bne.n	80050e6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050d0:	2300      	movs	r3, #0
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005102:	2300      	movs	r3, #0
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3728      	adds	r7, #40	@ 0x28
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	099b      	lsrs	r3, r3, #6
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10f      	bne.n	8005150 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	099b      	lsrs	r3, r3, #6
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	4798      	blx	r3
    return;
 800514e:	e0be      	b.n	80052ce <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_SPI_IRQHandler+0x66>
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	09db      	lsrs	r3, r3, #7
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d004      	beq.n	8005172 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	4798      	blx	r3
    return;
 8005170:	e0ad      	b.n	80052ce <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_SPI_IRQHandler+0x80>
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	099b      	lsrs	r3, r3, #6
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 80a1 	beq.w	80052ce <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 809a 	beq.w	80052ce <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	099b      	lsrs	r3, r3, #6
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d023      	beq.n	80051ee <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d011      	beq.n	80051d6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b6:	f043 0204 	orr.w	r2, r3, #4
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	e00b      	b.n	80051ee <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051d6:	2300      	movs	r3, #0
 80051d8:	613b      	str	r3, [r7, #16]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	693b      	ldr	r3, [r7, #16]
        return;
 80051ec:	e06f      	b.n	80052ce <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d014      	beq.n	8005224 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fe:	f043 0201 	orr.w	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005228:	2b00      	cmp	r3, #0
 800522a:	d04f      	beq.n	80052cc <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800523a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d104      	bne.n	8005258 <HAL_SPI_IRQHandler+0x14c>
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d034      	beq.n	80052c2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0203 	bic.w	r2, r2, #3
 8005266:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d011      	beq.n	8005294 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005274:	4a17      	ldr	r2, [pc, #92]	@ (80052d4 <HAL_SPI_IRQHandler+0x1c8>)
 8005276:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800527c:	4618      	mov	r0, r3
 800527e:	f7fd fc31 	bl	8002ae4 <HAL_DMA_Abort_IT>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800528c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005298:	2b00      	cmp	r3, #0
 800529a:	d016      	beq.n	80052ca <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052a0:	4a0c      	ldr	r2, [pc, #48]	@ (80052d4 <HAL_SPI_IRQHandler+0x1c8>)
 80052a2:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fd fc1b 	bl	8002ae4 <HAL_DMA_Abort_IT>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80052c0:	e003      	b.n	80052ca <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f808 	bl	80052d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80052c8:	e000      	b.n	80052cc <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80052ca:	bf00      	nop
    return;
 80052cc:	bf00      	nop
  }
}
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	080052eb 	.word	0x080052eb

080052d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	4770      	bx	lr

080052ea <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7ff ffe7 	bl	80052d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	4613      	mov	r3, r2
 8005322:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005324:	f7fd faa2 	bl	800286c <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	4413      	add	r3, r2
 8005332:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005334:	f7fd fa9a 	bl	800286c <HAL_GetTick>
 8005338:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800533a:	4b39      	ldr	r3, [pc, #228]	@ (8005420 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	015b      	lsls	r3, r3, #5
 8005340:	0d1b      	lsrs	r3, r3, #20
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	fb02 f303 	mul.w	r3, r2, r3
 8005348:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800534a:	e054      	b.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d050      	beq.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005354:	f7fd fa8a 	bl	800286c <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	429a      	cmp	r2, r3
 8005362:	d902      	bls.n	800536a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d13d      	bne.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005378:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005382:	d111      	bne.n	80053a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800538c:	d004      	beq.n	8005398 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005396:	d107      	bne.n	80053a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053b0:	d10f      	bne.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e017      	b.n	8005416 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4013      	ands	r3, r2
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	bf0c      	ite	eq
 8005406:	2301      	moveq	r3, #1
 8005408:	2300      	movne	r3, #0
 800540a:	b2db      	uxtb	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	429a      	cmp	r2, r3
 8005412:	d19b      	bne.n	800534c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20000000 	.word	0x20000000

08005424 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005438:	d111      	bne.n	800545e <SPI_EndRxTransaction+0x3a>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005442:	d004      	beq.n	800544e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800544c:	d107      	bne.n	800545e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800545c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005466:	d117      	bne.n	8005498 <SPI_EndRxTransaction+0x74>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005470:	d112      	bne.n	8005498 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2200      	movs	r2, #0
 800547a:	2101      	movs	r1, #1
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f7ff ff49 	bl	8005314 <SPI_WaitFlagStateUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01a      	beq.n	80054be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548c:	f043 0220 	orr.w	r2, r3, #32
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e013      	b.n	80054c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2200      	movs	r2, #0
 80054a0:	2180      	movs	r1, #128	@ 0x80
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff ff36 	bl	8005314 <SPI_WaitFlagStateUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e000      	b.n	80054c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2201      	movs	r2, #1
 80054dc:	2102      	movs	r1, #2
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff ff18 	bl	8005314 <SPI_WaitFlagStateUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ee:	f043 0220 	orr.w	r2, r3, #32
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e013      	b.n	8005522 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2200      	movs	r2, #0
 8005502:	2180      	movs	r1, #128	@ 0x80
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7ff ff05 	bl	8005314 <SPI_WaitFlagStateUntilTimeout>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d007      	beq.n	8005520 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005514:	f043 0220 	orr.w	r2, r3, #32
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e000      	b.n	8005522 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e042      	b.n	80055c2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d106      	bne.n	8005556 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7fc ff4f 	bl	80023f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2224      	movs	r2, #36	@ 0x24
 800555a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800556c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f972 	bl	8005858 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005582:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695a      	ldr	r2, [r3, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005592:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b08a      	sub	sp, #40	@ 0x28
 80055ce:	af02      	add	r7, sp, #8
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	603b      	str	r3, [r7, #0]
 80055d6:	4613      	mov	r3, r2
 80055d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d175      	bne.n	80056d6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_UART_Transmit+0x2c>
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e06e      	b.n	80056d8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2221      	movs	r2, #33	@ 0x21
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005608:	f7fd f930 	bl	800286c <HAL_GetTick>
 800560c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	88fa      	ldrh	r2, [r7, #6]
 8005612:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	88fa      	ldrh	r2, [r7, #6]
 8005618:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005622:	d108      	bne.n	8005636 <HAL_UART_Transmit+0x6c>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	61bb      	str	r3, [r7, #24]
 8005634:	e003      	b.n	800563e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800563e:	e02e      	b.n	800569e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2200      	movs	r2, #0
 8005648:	2180      	movs	r1, #128	@ 0x80
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 f848 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e03a      	b.n	80056d8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	461a      	mov	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005676:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	3302      	adds	r3, #2
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	e007      	b.n	8005690 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	781a      	ldrb	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	3301      	adds	r3, #1
 800568e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1cb      	bne.n	8005640 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2200      	movs	r2, #0
 80056b0:	2140      	movs	r1, #64	@ 0x40
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f814 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e006      	b.n	80056d8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e000      	b.n	80056d8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056d6:	2302      	movs	r3, #2
  }
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f0:	e03b      	b.n	800576a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f8:	d037      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fa:	f7fd f8b7 	bl	800286c <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	6a3a      	ldr	r2, [r7, #32]
 8005706:	429a      	cmp	r2, r3
 8005708:	d302      	bcc.n	8005710 <UART_WaitOnFlagUntilTimeout+0x30>
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e03a      	b.n	800578a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	d023      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b80      	cmp	r3, #128	@ 0x80
 8005726:	d020      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b40      	cmp	r3, #64	@ 0x40
 800572c:	d01d      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b08      	cmp	r3, #8
 800573a:	d116      	bne.n	800576a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f81d 	bl	8005792 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2208      	movs	r2, #8
 800575c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e00f      	b.n	800578a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4013      	ands	r3, r2
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	429a      	cmp	r2, r3
 8005778:	bf0c      	ite	eq
 800577a:	2301      	moveq	r3, #1
 800577c:	2300      	movne	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	429a      	cmp	r2, r3
 8005786:	d0b4      	beq.n	80056f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005792:	b480      	push	{r7}
 8005794:	b095      	sub	sp, #84	@ 0x54
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	330c      	adds	r3, #12
 80057a0:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	330c      	adds	r3, #12
 80057b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80057bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e5      	bne.n	800579a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3314      	adds	r3, #20
 80057d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3314      	adds	r3, #20
 80057ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e5      	bne.n	80057ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005806:	2b01      	cmp	r3, #1
 8005808:	d119      	bne.n	800583e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	330c      	adds	r3, #12
 8005810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	60bb      	str	r3, [r7, #8]
   return(result);
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f023 0310 	bic.w	r3, r3, #16
 8005820:	647b      	str	r3, [r7, #68]	@ 0x44
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	330c      	adds	r3, #12
 8005828:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800582a:	61ba      	str	r2, [r7, #24]
 800582c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6979      	ldr	r1, [r7, #20]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	613b      	str	r3, [r7, #16]
   return(result);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e5      	bne.n	800580a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800584c:	bf00      	nop
 800584e:	3754      	adds	r7, #84	@ 0x54
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr
	...

08005858 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005892:	f023 030c 	bic.w	r3, r3, #12
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	430b      	orrs	r3, r1
 800589e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a2c      	ldr	r2, [pc, #176]	@ (800596c <UART_SetConfig+0x114>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d103      	bne.n	80058c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058c0:	f7fe ff68 	bl	8004794 <HAL_RCC_GetPCLK2Freq>
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	e002      	b.n	80058ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058c8:	f7fe ff50 	bl	800476c <HAL_RCC_GetPCLK1Freq>
 80058cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4613      	mov	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	009a      	lsls	r2, r3, #2
 80058d8:	441a      	add	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e4:	4a22      	ldr	r2, [pc, #136]	@ (8005970 <UART_SetConfig+0x118>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	0119      	lsls	r1, r3, #4
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4613      	mov	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	009a      	lsls	r2, r3, #2
 80058f8:	441a      	add	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	fbb2 f2f3 	udiv	r2, r2, r3
 8005904:	4b1a      	ldr	r3, [pc, #104]	@ (8005970 <UART_SetConfig+0x118>)
 8005906:	fba3 0302 	umull	r0, r3, r3, r2
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	2064      	movs	r0, #100	@ 0x64
 800590e:	fb00 f303 	mul.w	r3, r0, r3
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	3332      	adds	r3, #50	@ 0x32
 8005918:	4a15      	ldr	r2, [pc, #84]	@ (8005970 <UART_SetConfig+0x118>)
 800591a:	fba2 2303 	umull	r2, r3, r2, r3
 800591e:	095b      	lsrs	r3, r3, #5
 8005920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005924:	4419      	add	r1, r3
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	009a      	lsls	r2, r3, #2
 8005930:	441a      	add	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	fbb2 f2f3 	udiv	r2, r2, r3
 800593c:	4b0c      	ldr	r3, [pc, #48]	@ (8005970 <UART_SetConfig+0x118>)
 800593e:	fba3 0302 	umull	r0, r3, r3, r2
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	2064      	movs	r0, #100	@ 0x64
 8005946:	fb00 f303 	mul.w	r3, r0, r3
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	3332      	adds	r3, #50	@ 0x32
 8005950:	4a07      	ldr	r2, [pc, #28]	@ (8005970 <UART_SetConfig+0x118>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	f003 020f 	and.w	r2, r3, #15
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	440a      	add	r2, r1
 8005962:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40013800 	.word	0x40013800
 8005970:	51eb851f 	.word	0x51eb851f

08005974 <__cvt>:
 8005974:	2b00      	cmp	r3, #0
 8005976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800597a:	461d      	mov	r5, r3
 800597c:	bfbb      	ittet	lt
 800597e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005982:	461d      	movlt	r5, r3
 8005984:	2300      	movge	r3, #0
 8005986:	232d      	movlt	r3, #45	@ 0x2d
 8005988:	b088      	sub	sp, #32
 800598a:	4614      	mov	r4, r2
 800598c:	bfb8      	it	lt
 800598e:	4614      	movlt	r4, r2
 8005990:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005992:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005994:	7013      	strb	r3, [r2, #0]
 8005996:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005998:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800599c:	f023 0820 	bic.w	r8, r3, #32
 80059a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059a4:	d005      	beq.n	80059b2 <__cvt+0x3e>
 80059a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80059aa:	d100      	bne.n	80059ae <__cvt+0x3a>
 80059ac:	3601      	adds	r6, #1
 80059ae:	2302      	movs	r3, #2
 80059b0:	e000      	b.n	80059b4 <__cvt+0x40>
 80059b2:	2303      	movs	r3, #3
 80059b4:	aa07      	add	r2, sp, #28
 80059b6:	9204      	str	r2, [sp, #16]
 80059b8:	aa06      	add	r2, sp, #24
 80059ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80059be:	e9cd 3600 	strd	r3, r6, [sp]
 80059c2:	4622      	mov	r2, r4
 80059c4:	462b      	mov	r3, r5
 80059c6:	f000 fe7b 	bl	80066c0 <_dtoa_r>
 80059ca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80059ce:	4607      	mov	r7, r0
 80059d0:	d119      	bne.n	8005a06 <__cvt+0x92>
 80059d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80059d4:	07db      	lsls	r3, r3, #31
 80059d6:	d50e      	bpl.n	80059f6 <__cvt+0x82>
 80059d8:	eb00 0906 	add.w	r9, r0, r6
 80059dc:	2200      	movs	r2, #0
 80059de:	2300      	movs	r3, #0
 80059e0:	4620      	mov	r0, r4
 80059e2:	4629      	mov	r1, r5
 80059e4:	f7fa ffe0 	bl	80009a8 <__aeabi_dcmpeq>
 80059e8:	b108      	cbz	r0, 80059ee <__cvt+0x7a>
 80059ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80059ee:	2230      	movs	r2, #48	@ 0x30
 80059f0:	9b07      	ldr	r3, [sp, #28]
 80059f2:	454b      	cmp	r3, r9
 80059f4:	d31e      	bcc.n	8005a34 <__cvt+0xc0>
 80059f6:	4638      	mov	r0, r7
 80059f8:	9b07      	ldr	r3, [sp, #28]
 80059fa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80059fc:	1bdb      	subs	r3, r3, r7
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	b008      	add	sp, #32
 8005a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a06:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a0a:	eb00 0906 	add.w	r9, r0, r6
 8005a0e:	d1e5      	bne.n	80059dc <__cvt+0x68>
 8005a10:	7803      	ldrb	r3, [r0, #0]
 8005a12:	2b30      	cmp	r3, #48	@ 0x30
 8005a14:	d10a      	bne.n	8005a2c <__cvt+0xb8>
 8005a16:	2200      	movs	r2, #0
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	f7fa ffc3 	bl	80009a8 <__aeabi_dcmpeq>
 8005a22:	b918      	cbnz	r0, 8005a2c <__cvt+0xb8>
 8005a24:	f1c6 0601 	rsb	r6, r6, #1
 8005a28:	f8ca 6000 	str.w	r6, [sl]
 8005a2c:	f8da 3000 	ldr.w	r3, [sl]
 8005a30:	4499      	add	r9, r3
 8005a32:	e7d3      	b.n	80059dc <__cvt+0x68>
 8005a34:	1c59      	adds	r1, r3, #1
 8005a36:	9107      	str	r1, [sp, #28]
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	e7d9      	b.n	80059f0 <__cvt+0x7c>

08005a3c <__exponent>:
 8005a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a3e:	2900      	cmp	r1, #0
 8005a40:	bfb6      	itet	lt
 8005a42:	232d      	movlt	r3, #45	@ 0x2d
 8005a44:	232b      	movge	r3, #43	@ 0x2b
 8005a46:	4249      	neglt	r1, r1
 8005a48:	2909      	cmp	r1, #9
 8005a4a:	7002      	strb	r2, [r0, #0]
 8005a4c:	7043      	strb	r3, [r0, #1]
 8005a4e:	dd29      	ble.n	8005aa4 <__exponent+0x68>
 8005a50:	f10d 0307 	add.w	r3, sp, #7
 8005a54:	461d      	mov	r5, r3
 8005a56:	270a      	movs	r7, #10
 8005a58:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	fb07 1416 	mls	r4, r7, r6, r1
 8005a62:	3430      	adds	r4, #48	@ 0x30
 8005a64:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a68:	460c      	mov	r4, r1
 8005a6a:	2c63      	cmp	r4, #99	@ 0x63
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a72:	dcf1      	bgt.n	8005a58 <__exponent+0x1c>
 8005a74:	3130      	adds	r1, #48	@ 0x30
 8005a76:	1e94      	subs	r4, r2, #2
 8005a78:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a7c:	4623      	mov	r3, r4
 8005a7e:	1c41      	adds	r1, r0, #1
 8005a80:	42ab      	cmp	r3, r5
 8005a82:	d30a      	bcc.n	8005a9a <__exponent+0x5e>
 8005a84:	f10d 0309 	add.w	r3, sp, #9
 8005a88:	1a9b      	subs	r3, r3, r2
 8005a8a:	42ac      	cmp	r4, r5
 8005a8c:	bf88      	it	hi
 8005a8e:	2300      	movhi	r3, #0
 8005a90:	3302      	adds	r3, #2
 8005a92:	4403      	add	r3, r0
 8005a94:	1a18      	subs	r0, r3, r0
 8005a96:	b003      	add	sp, #12
 8005a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a9a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a9e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005aa2:	e7ed      	b.n	8005a80 <__exponent+0x44>
 8005aa4:	2330      	movs	r3, #48	@ 0x30
 8005aa6:	3130      	adds	r1, #48	@ 0x30
 8005aa8:	7083      	strb	r3, [r0, #2]
 8005aaa:	70c1      	strb	r1, [r0, #3]
 8005aac:	1d03      	adds	r3, r0, #4
 8005aae:	e7f1      	b.n	8005a94 <__exponent+0x58>

08005ab0 <_printf_float>:
 8005ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab4:	b091      	sub	sp, #68	@ 0x44
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005abc:	4616      	mov	r6, r2
 8005abe:	461f      	mov	r7, r3
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	f000 fce1 	bl	8006488 <_localeconv_r>
 8005ac6:	6803      	ldr	r3, [r0, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	9308      	str	r3, [sp, #32]
 8005acc:	f7fa fb40 	bl	8000150 <strlen>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	930e      	str	r3, [sp, #56]	@ 0x38
 8005ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad8:	9009      	str	r0, [sp, #36]	@ 0x24
 8005ada:	3307      	adds	r3, #7
 8005adc:	f023 0307 	bic.w	r3, r3, #7
 8005ae0:	f103 0208 	add.w	r2, r3, #8
 8005ae4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ae8:	f8d4 b000 	ldr.w	fp, [r4]
 8005aec:	f8c8 2000 	str.w	r2, [r8]
 8005af0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005af4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005af8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005afa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005afe:	f04f 32ff 	mov.w	r2, #4294967295
 8005b02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005b0a:	4b9c      	ldr	r3, [pc, #624]	@ (8005d7c <_printf_float+0x2cc>)
 8005b0c:	f7fa ff7e 	bl	8000a0c <__aeabi_dcmpun>
 8005b10:	bb70      	cbnz	r0, 8005b70 <_printf_float+0xc0>
 8005b12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b16:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1a:	4b98      	ldr	r3, [pc, #608]	@ (8005d7c <_printf_float+0x2cc>)
 8005b1c:	f7fa ff58 	bl	80009d0 <__aeabi_dcmple>
 8005b20:	bb30      	cbnz	r0, 8005b70 <_printf_float+0xc0>
 8005b22:	2200      	movs	r2, #0
 8005b24:	2300      	movs	r3, #0
 8005b26:	4640      	mov	r0, r8
 8005b28:	4649      	mov	r1, r9
 8005b2a:	f7fa ff47 	bl	80009bc <__aeabi_dcmplt>
 8005b2e:	b110      	cbz	r0, 8005b36 <_printf_float+0x86>
 8005b30:	232d      	movs	r3, #45	@ 0x2d
 8005b32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b36:	4a92      	ldr	r2, [pc, #584]	@ (8005d80 <_printf_float+0x2d0>)
 8005b38:	4b92      	ldr	r3, [pc, #584]	@ (8005d84 <_printf_float+0x2d4>)
 8005b3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005b3e:	bf8c      	ite	hi
 8005b40:	4690      	movhi	r8, r2
 8005b42:	4698      	movls	r8, r3
 8005b44:	2303      	movs	r3, #3
 8005b46:	f04f 0900 	mov.w	r9, #0
 8005b4a:	6123      	str	r3, [r4, #16]
 8005b4c:	f02b 0304 	bic.w	r3, fp, #4
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	4633      	mov	r3, r6
 8005b54:	4621      	mov	r1, r4
 8005b56:	4628      	mov	r0, r5
 8005b58:	9700      	str	r7, [sp, #0]
 8005b5a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005b5c:	f000 f9d4 	bl	8005f08 <_printf_common>
 8005b60:	3001      	adds	r0, #1
 8005b62:	f040 8090 	bne.w	8005c86 <_printf_float+0x1d6>
 8005b66:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6a:	b011      	add	sp, #68	@ 0x44
 8005b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	4640      	mov	r0, r8
 8005b76:	4649      	mov	r1, r9
 8005b78:	f7fa ff48 	bl	8000a0c <__aeabi_dcmpun>
 8005b7c:	b148      	cbz	r0, 8005b92 <_printf_float+0xe2>
 8005b7e:	464b      	mov	r3, r9
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bfb8      	it	lt
 8005b84:	232d      	movlt	r3, #45	@ 0x2d
 8005b86:	4a80      	ldr	r2, [pc, #512]	@ (8005d88 <_printf_float+0x2d8>)
 8005b88:	bfb8      	it	lt
 8005b8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d8c <_printf_float+0x2dc>)
 8005b90:	e7d3      	b.n	8005b3a <_printf_float+0x8a>
 8005b92:	6863      	ldr	r3, [r4, #4]
 8005b94:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	d13f      	bne.n	8005c1c <_printf_float+0x16c>
 8005b9c:	2306      	movs	r3, #6
 8005b9e:	6063      	str	r3, [r4, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	9206      	str	r2, [sp, #24]
 8005baa:	aa0e      	add	r2, sp, #56	@ 0x38
 8005bac:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005bb0:	aa0d      	add	r2, sp, #52	@ 0x34
 8005bb2:	9203      	str	r2, [sp, #12]
 8005bb4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005bb8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005bbc:	6863      	ldr	r3, [r4, #4]
 8005bbe:	4642      	mov	r2, r8
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	910a      	str	r1, [sp, #40]	@ 0x28
 8005bc8:	f7ff fed4 	bl	8005974 <__cvt>
 8005bcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005bce:	4680      	mov	r8, r0
 8005bd0:	2947      	cmp	r1, #71	@ 0x47
 8005bd2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005bd4:	d128      	bne.n	8005c28 <_printf_float+0x178>
 8005bd6:	1cc8      	adds	r0, r1, #3
 8005bd8:	db02      	blt.n	8005be0 <_printf_float+0x130>
 8005bda:	6863      	ldr	r3, [r4, #4]
 8005bdc:	4299      	cmp	r1, r3
 8005bde:	dd40      	ble.n	8005c62 <_printf_float+0x1b2>
 8005be0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005be4:	fa5f fa8a 	uxtb.w	sl, sl
 8005be8:	4652      	mov	r2, sl
 8005bea:	3901      	subs	r1, #1
 8005bec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005bf0:	910d      	str	r1, [sp, #52]	@ 0x34
 8005bf2:	f7ff ff23 	bl	8005a3c <__exponent>
 8005bf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bf8:	4681      	mov	r9, r0
 8005bfa:	1813      	adds	r3, r2, r0
 8005bfc:	2a01      	cmp	r2, #1
 8005bfe:	6123      	str	r3, [r4, #16]
 8005c00:	dc02      	bgt.n	8005c08 <_printf_float+0x158>
 8005c02:	6822      	ldr	r2, [r4, #0]
 8005c04:	07d2      	lsls	r2, r2, #31
 8005c06:	d501      	bpl.n	8005c0c <_printf_float+0x15c>
 8005c08:	3301      	adds	r3, #1
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d09e      	beq.n	8005b52 <_printf_float+0xa2>
 8005c14:	232d      	movs	r3, #45	@ 0x2d
 8005c16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c1a:	e79a      	b.n	8005b52 <_printf_float+0xa2>
 8005c1c:	2947      	cmp	r1, #71	@ 0x47
 8005c1e:	d1bf      	bne.n	8005ba0 <_printf_float+0xf0>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1bd      	bne.n	8005ba0 <_printf_float+0xf0>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e7ba      	b.n	8005b9e <_printf_float+0xee>
 8005c28:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c2c:	d9dc      	bls.n	8005be8 <_printf_float+0x138>
 8005c2e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005c32:	d118      	bne.n	8005c66 <_printf_float+0x1b6>
 8005c34:	2900      	cmp	r1, #0
 8005c36:	6863      	ldr	r3, [r4, #4]
 8005c38:	dd0b      	ble.n	8005c52 <_printf_float+0x1a2>
 8005c3a:	6121      	str	r1, [r4, #16]
 8005c3c:	b913      	cbnz	r3, 8005c44 <_printf_float+0x194>
 8005c3e:	6822      	ldr	r2, [r4, #0]
 8005c40:	07d0      	lsls	r0, r2, #31
 8005c42:	d502      	bpl.n	8005c4a <_printf_float+0x19a>
 8005c44:	3301      	adds	r3, #1
 8005c46:	440b      	add	r3, r1
 8005c48:	6123      	str	r3, [r4, #16]
 8005c4a:	f04f 0900 	mov.w	r9, #0
 8005c4e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005c50:	e7dc      	b.n	8005c0c <_printf_float+0x15c>
 8005c52:	b913      	cbnz	r3, 8005c5a <_printf_float+0x1aa>
 8005c54:	6822      	ldr	r2, [r4, #0]
 8005c56:	07d2      	lsls	r2, r2, #31
 8005c58:	d501      	bpl.n	8005c5e <_printf_float+0x1ae>
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	e7f4      	b.n	8005c48 <_printf_float+0x198>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e7f2      	b.n	8005c48 <_printf_float+0x198>
 8005c62:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	db05      	blt.n	8005c78 <_printf_float+0x1c8>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	6121      	str	r1, [r4, #16]
 8005c70:	07d8      	lsls	r0, r3, #31
 8005c72:	d5ea      	bpl.n	8005c4a <_printf_float+0x19a>
 8005c74:	1c4b      	adds	r3, r1, #1
 8005c76:	e7e7      	b.n	8005c48 <_printf_float+0x198>
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	bfcc      	ite	gt
 8005c7c:	2201      	movgt	r2, #1
 8005c7e:	f1c1 0202 	rsble	r2, r1, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	e7e0      	b.n	8005c48 <_printf_float+0x198>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	055a      	lsls	r2, r3, #21
 8005c8a:	d407      	bmi.n	8005c9c <_printf_float+0x1ec>
 8005c8c:	6923      	ldr	r3, [r4, #16]
 8005c8e:	4642      	mov	r2, r8
 8005c90:	4631      	mov	r1, r6
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	d12b      	bne.n	8005cf2 <_printf_float+0x242>
 8005c9a:	e764      	b.n	8005b66 <_printf_float+0xb6>
 8005c9c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ca0:	f240 80dc 	bls.w	8005e5c <_printf_float+0x3ac>
 8005ca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2300      	movs	r3, #0
 8005cac:	f7fa fe7c 	bl	80009a8 <__aeabi_dcmpeq>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d033      	beq.n	8005d1c <_printf_float+0x26c>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4628      	mov	r0, r5
 8005cba:	4a35      	ldr	r2, [pc, #212]	@ (8005d90 <_printf_float+0x2e0>)
 8005cbc:	47b8      	blx	r7
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	f43f af51 	beq.w	8005b66 <_printf_float+0xb6>
 8005cc4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005cc8:	4543      	cmp	r3, r8
 8005cca:	db02      	blt.n	8005cd2 <_printf_float+0x222>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	07d8      	lsls	r0, r3, #31
 8005cd0:	d50f      	bpl.n	8005cf2 <_printf_float+0x242>
 8005cd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b8      	blx	r7
 8005cdc:	3001      	adds	r0, #1
 8005cde:	f43f af42 	beq.w	8005b66 <_printf_float+0xb6>
 8005ce2:	f04f 0900 	mov.w	r9, #0
 8005ce6:	f108 38ff 	add.w	r8, r8, #4294967295
 8005cea:	f104 0a1a 	add.w	sl, r4, #26
 8005cee:	45c8      	cmp	r8, r9
 8005cf0:	dc09      	bgt.n	8005d06 <_printf_float+0x256>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	079b      	lsls	r3, r3, #30
 8005cf6:	f100 8102 	bmi.w	8005efe <_printf_float+0x44e>
 8005cfa:	68e0      	ldr	r0, [r4, #12]
 8005cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cfe:	4298      	cmp	r0, r3
 8005d00:	bfb8      	it	lt
 8005d02:	4618      	movlt	r0, r3
 8005d04:	e731      	b.n	8005b6a <_printf_float+0xba>
 8005d06:	2301      	movs	r3, #1
 8005d08:	4652      	mov	r2, sl
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47b8      	blx	r7
 8005d10:	3001      	adds	r0, #1
 8005d12:	f43f af28 	beq.w	8005b66 <_printf_float+0xb6>
 8005d16:	f109 0901 	add.w	r9, r9, #1
 8005d1a:	e7e8      	b.n	8005cee <_printf_float+0x23e>
 8005d1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	dc38      	bgt.n	8005d94 <_printf_float+0x2e4>
 8005d22:	2301      	movs	r3, #1
 8005d24:	4631      	mov	r1, r6
 8005d26:	4628      	mov	r0, r5
 8005d28:	4a19      	ldr	r2, [pc, #100]	@ (8005d90 <_printf_float+0x2e0>)
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f43f af1a 	beq.w	8005b66 <_printf_float+0xb6>
 8005d32:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005d36:	ea59 0303 	orrs.w	r3, r9, r3
 8005d3a:	d102      	bne.n	8005d42 <_printf_float+0x292>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	07d9      	lsls	r1, r3, #31
 8005d40:	d5d7      	bpl.n	8005cf2 <_printf_float+0x242>
 8005d42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f43f af0a 	beq.w	8005b66 <_printf_float+0xb6>
 8005d52:	f04f 0a00 	mov.w	sl, #0
 8005d56:	f104 0b1a 	add.w	fp, r4, #26
 8005d5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d5c:	425b      	negs	r3, r3
 8005d5e:	4553      	cmp	r3, sl
 8005d60:	dc01      	bgt.n	8005d66 <_printf_float+0x2b6>
 8005d62:	464b      	mov	r3, r9
 8005d64:	e793      	b.n	8005c8e <_printf_float+0x1de>
 8005d66:	2301      	movs	r3, #1
 8005d68:	465a      	mov	r2, fp
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b8      	blx	r7
 8005d70:	3001      	adds	r0, #1
 8005d72:	f43f aef8 	beq.w	8005b66 <_printf_float+0xb6>
 8005d76:	f10a 0a01 	add.w	sl, sl, #1
 8005d7a:	e7ee      	b.n	8005d5a <_printf_float+0x2aa>
 8005d7c:	7fefffff 	.word	0x7fefffff
 8005d80:	0800949e 	.word	0x0800949e
 8005d84:	0800949a 	.word	0x0800949a
 8005d88:	080094a6 	.word	0x080094a6
 8005d8c:	080094a2 	.word	0x080094a2
 8005d90:	080094aa 	.word	0x080094aa
 8005d94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d96:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005d9a:	4553      	cmp	r3, sl
 8005d9c:	bfa8      	it	ge
 8005d9e:	4653      	movge	r3, sl
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	4699      	mov	r9, r3
 8005da4:	dc36      	bgt.n	8005e14 <_printf_float+0x364>
 8005da6:	f04f 0b00 	mov.w	fp, #0
 8005daa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dae:	f104 021a 	add.w	r2, r4, #26
 8005db2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005db4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005db6:	eba3 0309 	sub.w	r3, r3, r9
 8005dba:	455b      	cmp	r3, fp
 8005dbc:	dc31      	bgt.n	8005e22 <_printf_float+0x372>
 8005dbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dc0:	459a      	cmp	sl, r3
 8005dc2:	dc3a      	bgt.n	8005e3a <_printf_float+0x38a>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	07da      	lsls	r2, r3, #31
 8005dc8:	d437      	bmi.n	8005e3a <_printf_float+0x38a>
 8005dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dcc:	ebaa 0903 	sub.w	r9, sl, r3
 8005dd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dd2:	ebaa 0303 	sub.w	r3, sl, r3
 8005dd6:	4599      	cmp	r9, r3
 8005dd8:	bfa8      	it	ge
 8005dda:	4699      	movge	r9, r3
 8005ddc:	f1b9 0f00 	cmp.w	r9, #0
 8005de0:	dc33      	bgt.n	8005e4a <_printf_float+0x39a>
 8005de2:	f04f 0800 	mov.w	r8, #0
 8005de6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dea:	f104 0b1a 	add.w	fp, r4, #26
 8005dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005df0:	ebaa 0303 	sub.w	r3, sl, r3
 8005df4:	eba3 0309 	sub.w	r3, r3, r9
 8005df8:	4543      	cmp	r3, r8
 8005dfa:	f77f af7a 	ble.w	8005cf2 <_printf_float+0x242>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	465a      	mov	r2, fp
 8005e02:	4631      	mov	r1, r6
 8005e04:	4628      	mov	r0, r5
 8005e06:	47b8      	blx	r7
 8005e08:	3001      	adds	r0, #1
 8005e0a:	f43f aeac 	beq.w	8005b66 <_printf_float+0xb6>
 8005e0e:	f108 0801 	add.w	r8, r8, #1
 8005e12:	e7ec      	b.n	8005dee <_printf_float+0x33e>
 8005e14:	4642      	mov	r2, r8
 8005e16:	4631      	mov	r1, r6
 8005e18:	4628      	mov	r0, r5
 8005e1a:	47b8      	blx	r7
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d1c2      	bne.n	8005da6 <_printf_float+0x2f6>
 8005e20:	e6a1      	b.n	8005b66 <_printf_float+0xb6>
 8005e22:	2301      	movs	r3, #1
 8005e24:	4631      	mov	r1, r6
 8005e26:	4628      	mov	r0, r5
 8005e28:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e2a:	47b8      	blx	r7
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	f43f ae9a 	beq.w	8005b66 <_printf_float+0xb6>
 8005e32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e34:	f10b 0b01 	add.w	fp, fp, #1
 8005e38:	e7bb      	b.n	8005db2 <_printf_float+0x302>
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e40:	4628      	mov	r0, r5
 8005e42:	47b8      	blx	r7
 8005e44:	3001      	adds	r0, #1
 8005e46:	d1c0      	bne.n	8005dca <_printf_float+0x31a>
 8005e48:	e68d      	b.n	8005b66 <_printf_float+0xb6>
 8005e4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e4c:	464b      	mov	r3, r9
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	4442      	add	r2, r8
 8005e54:	47b8      	blx	r7
 8005e56:	3001      	adds	r0, #1
 8005e58:	d1c3      	bne.n	8005de2 <_printf_float+0x332>
 8005e5a:	e684      	b.n	8005b66 <_printf_float+0xb6>
 8005e5c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e60:	f1ba 0f01 	cmp.w	sl, #1
 8005e64:	dc01      	bgt.n	8005e6a <_printf_float+0x3ba>
 8005e66:	07db      	lsls	r3, r3, #31
 8005e68:	d536      	bpl.n	8005ed8 <_printf_float+0x428>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4628      	mov	r0, r5
 8005e72:	47b8      	blx	r7
 8005e74:	3001      	adds	r0, #1
 8005e76:	f43f ae76 	beq.w	8005b66 <_printf_float+0xb6>
 8005e7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f ae6e 	beq.w	8005b66 <_printf_float+0xb6>
 8005e8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2300      	movs	r3, #0
 8005e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e96:	f7fa fd87 	bl	80009a8 <__aeabi_dcmpeq>
 8005e9a:	b9c0      	cbnz	r0, 8005ece <_printf_float+0x41e>
 8005e9c:	4653      	mov	r3, sl
 8005e9e:	f108 0201 	add.w	r2, r8, #1
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	47b8      	blx	r7
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d10c      	bne.n	8005ec6 <_printf_float+0x416>
 8005eac:	e65b      	b.n	8005b66 <_printf_float+0xb6>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	465a      	mov	r2, fp
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f43f ae54 	beq.w	8005b66 <_printf_float+0xb6>
 8005ebe:	f108 0801 	add.w	r8, r8, #1
 8005ec2:	45d0      	cmp	r8, sl
 8005ec4:	dbf3      	blt.n	8005eae <_printf_float+0x3fe>
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005ecc:	e6e0      	b.n	8005c90 <_printf_float+0x1e0>
 8005ece:	f04f 0800 	mov.w	r8, #0
 8005ed2:	f104 0b1a 	add.w	fp, r4, #26
 8005ed6:	e7f4      	b.n	8005ec2 <_printf_float+0x412>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	4642      	mov	r2, r8
 8005edc:	e7e1      	b.n	8005ea2 <_printf_float+0x3f2>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	464a      	mov	r2, r9
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b8      	blx	r7
 8005ee8:	3001      	adds	r0, #1
 8005eea:	f43f ae3c 	beq.w	8005b66 <_printf_float+0xb6>
 8005eee:	f108 0801 	add.w	r8, r8, #1
 8005ef2:	68e3      	ldr	r3, [r4, #12]
 8005ef4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ef6:	1a5b      	subs	r3, r3, r1
 8005ef8:	4543      	cmp	r3, r8
 8005efa:	dcf0      	bgt.n	8005ede <_printf_float+0x42e>
 8005efc:	e6fd      	b.n	8005cfa <_printf_float+0x24a>
 8005efe:	f04f 0800 	mov.w	r8, #0
 8005f02:	f104 0919 	add.w	r9, r4, #25
 8005f06:	e7f4      	b.n	8005ef2 <_printf_float+0x442>

08005f08 <_printf_common>:
 8005f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f0c:	4616      	mov	r6, r2
 8005f0e:	4698      	mov	r8, r3
 8005f10:	688a      	ldr	r2, [r1, #8]
 8005f12:	690b      	ldr	r3, [r1, #16]
 8005f14:	4607      	mov	r7, r0
 8005f16:	4293      	cmp	r3, r2
 8005f18:	bfb8      	it	lt
 8005f1a:	4613      	movlt	r3, r2
 8005f1c:	6033      	str	r3, [r6, #0]
 8005f1e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f22:	460c      	mov	r4, r1
 8005f24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f28:	b10a      	cbz	r2, 8005f2e <_printf_common+0x26>
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	6033      	str	r3, [r6, #0]
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	0699      	lsls	r1, r3, #26
 8005f32:	bf42      	ittt	mi
 8005f34:	6833      	ldrmi	r3, [r6, #0]
 8005f36:	3302      	addmi	r3, #2
 8005f38:	6033      	strmi	r3, [r6, #0]
 8005f3a:	6825      	ldr	r5, [r4, #0]
 8005f3c:	f015 0506 	ands.w	r5, r5, #6
 8005f40:	d106      	bne.n	8005f50 <_printf_common+0x48>
 8005f42:	f104 0a19 	add.w	sl, r4, #25
 8005f46:	68e3      	ldr	r3, [r4, #12]
 8005f48:	6832      	ldr	r2, [r6, #0]
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	42ab      	cmp	r3, r5
 8005f4e:	dc2b      	bgt.n	8005fa8 <_printf_common+0xa0>
 8005f50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f54:	6822      	ldr	r2, [r4, #0]
 8005f56:	3b00      	subs	r3, #0
 8005f58:	bf18      	it	ne
 8005f5a:	2301      	movne	r3, #1
 8005f5c:	0692      	lsls	r2, r2, #26
 8005f5e:	d430      	bmi.n	8005fc2 <_printf_common+0xba>
 8005f60:	4641      	mov	r1, r8
 8005f62:	4638      	mov	r0, r7
 8005f64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f68:	47c8      	blx	r9
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d023      	beq.n	8005fb6 <_printf_common+0xae>
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	6922      	ldr	r2, [r4, #16]
 8005f72:	f003 0306 	and.w	r3, r3, #6
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	bf14      	ite	ne
 8005f7a:	2500      	movne	r5, #0
 8005f7c:	6833      	ldreq	r3, [r6, #0]
 8005f7e:	f04f 0600 	mov.w	r6, #0
 8005f82:	bf08      	it	eq
 8005f84:	68e5      	ldreq	r5, [r4, #12]
 8005f86:	f104 041a 	add.w	r4, r4, #26
 8005f8a:	bf08      	it	eq
 8005f8c:	1aed      	subeq	r5, r5, r3
 8005f8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005f92:	bf08      	it	eq
 8005f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	bfc4      	itt	gt
 8005f9c:	1a9b      	subgt	r3, r3, r2
 8005f9e:	18ed      	addgt	r5, r5, r3
 8005fa0:	42b5      	cmp	r5, r6
 8005fa2:	d11a      	bne.n	8005fda <_printf_common+0xd2>
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	e008      	b.n	8005fba <_printf_common+0xb2>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	4652      	mov	r2, sl
 8005fac:	4641      	mov	r1, r8
 8005fae:	4638      	mov	r0, r7
 8005fb0:	47c8      	blx	r9
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d103      	bne.n	8005fbe <_printf_common+0xb6>
 8005fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fbe:	3501      	adds	r5, #1
 8005fc0:	e7c1      	b.n	8005f46 <_printf_common+0x3e>
 8005fc2:	2030      	movs	r0, #48	@ 0x30
 8005fc4:	18e1      	adds	r1, r4, r3
 8005fc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fd0:	4422      	add	r2, r4
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fd8:	e7c2      	b.n	8005f60 <_printf_common+0x58>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4622      	mov	r2, r4
 8005fde:	4641      	mov	r1, r8
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	47c8      	blx	r9
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d0e6      	beq.n	8005fb6 <_printf_common+0xae>
 8005fe8:	3601      	adds	r6, #1
 8005fea:	e7d9      	b.n	8005fa0 <_printf_common+0x98>

08005fec <_printf_i>:
 8005fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff0:	7e0f      	ldrb	r7, [r1, #24]
 8005ff2:	4691      	mov	r9, r2
 8005ff4:	2f78      	cmp	r7, #120	@ 0x78
 8005ff6:	4680      	mov	r8, r0
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	469a      	mov	sl, r3
 8005ffc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006002:	d807      	bhi.n	8006014 <_printf_i+0x28>
 8006004:	2f62      	cmp	r7, #98	@ 0x62
 8006006:	d80a      	bhi.n	800601e <_printf_i+0x32>
 8006008:	2f00      	cmp	r7, #0
 800600a:	f000 80d1 	beq.w	80061b0 <_printf_i+0x1c4>
 800600e:	2f58      	cmp	r7, #88	@ 0x58
 8006010:	f000 80b8 	beq.w	8006184 <_printf_i+0x198>
 8006014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800601c:	e03a      	b.n	8006094 <_printf_i+0xa8>
 800601e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006022:	2b15      	cmp	r3, #21
 8006024:	d8f6      	bhi.n	8006014 <_printf_i+0x28>
 8006026:	a101      	add	r1, pc, #4	@ (adr r1, 800602c <_printf_i+0x40>)
 8006028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800602c:	08006085 	.word	0x08006085
 8006030:	08006099 	.word	0x08006099
 8006034:	08006015 	.word	0x08006015
 8006038:	08006015 	.word	0x08006015
 800603c:	08006015 	.word	0x08006015
 8006040:	08006015 	.word	0x08006015
 8006044:	08006099 	.word	0x08006099
 8006048:	08006015 	.word	0x08006015
 800604c:	08006015 	.word	0x08006015
 8006050:	08006015 	.word	0x08006015
 8006054:	08006015 	.word	0x08006015
 8006058:	08006197 	.word	0x08006197
 800605c:	080060c3 	.word	0x080060c3
 8006060:	08006151 	.word	0x08006151
 8006064:	08006015 	.word	0x08006015
 8006068:	08006015 	.word	0x08006015
 800606c:	080061b9 	.word	0x080061b9
 8006070:	08006015 	.word	0x08006015
 8006074:	080060c3 	.word	0x080060c3
 8006078:	08006015 	.word	0x08006015
 800607c:	08006015 	.word	0x08006015
 8006080:	08006159 	.word	0x08006159
 8006084:	6833      	ldr	r3, [r6, #0]
 8006086:	1d1a      	adds	r2, r3, #4
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6032      	str	r2, [r6, #0]
 800608c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006094:	2301      	movs	r3, #1
 8006096:	e09c      	b.n	80061d2 <_printf_i+0x1e6>
 8006098:	6833      	ldr	r3, [r6, #0]
 800609a:	6820      	ldr	r0, [r4, #0]
 800609c:	1d19      	adds	r1, r3, #4
 800609e:	6031      	str	r1, [r6, #0]
 80060a0:	0606      	lsls	r6, r0, #24
 80060a2:	d501      	bpl.n	80060a8 <_printf_i+0xbc>
 80060a4:	681d      	ldr	r5, [r3, #0]
 80060a6:	e003      	b.n	80060b0 <_printf_i+0xc4>
 80060a8:	0645      	lsls	r5, r0, #25
 80060aa:	d5fb      	bpl.n	80060a4 <_printf_i+0xb8>
 80060ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060b0:	2d00      	cmp	r5, #0
 80060b2:	da03      	bge.n	80060bc <_printf_i+0xd0>
 80060b4:	232d      	movs	r3, #45	@ 0x2d
 80060b6:	426d      	negs	r5, r5
 80060b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060bc:	230a      	movs	r3, #10
 80060be:	4858      	ldr	r0, [pc, #352]	@ (8006220 <_printf_i+0x234>)
 80060c0:	e011      	b.n	80060e6 <_printf_i+0xfa>
 80060c2:	6821      	ldr	r1, [r4, #0]
 80060c4:	6833      	ldr	r3, [r6, #0]
 80060c6:	0608      	lsls	r0, r1, #24
 80060c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80060cc:	d402      	bmi.n	80060d4 <_printf_i+0xe8>
 80060ce:	0649      	lsls	r1, r1, #25
 80060d0:	bf48      	it	mi
 80060d2:	b2ad      	uxthmi	r5, r5
 80060d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80060d6:	6033      	str	r3, [r6, #0]
 80060d8:	bf14      	ite	ne
 80060da:	230a      	movne	r3, #10
 80060dc:	2308      	moveq	r3, #8
 80060de:	4850      	ldr	r0, [pc, #320]	@ (8006220 <_printf_i+0x234>)
 80060e0:	2100      	movs	r1, #0
 80060e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060e6:	6866      	ldr	r6, [r4, #4]
 80060e8:	2e00      	cmp	r6, #0
 80060ea:	60a6      	str	r6, [r4, #8]
 80060ec:	db05      	blt.n	80060fa <_printf_i+0x10e>
 80060ee:	6821      	ldr	r1, [r4, #0]
 80060f0:	432e      	orrs	r6, r5
 80060f2:	f021 0104 	bic.w	r1, r1, #4
 80060f6:	6021      	str	r1, [r4, #0]
 80060f8:	d04b      	beq.n	8006192 <_printf_i+0x1a6>
 80060fa:	4616      	mov	r6, r2
 80060fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006100:	fb03 5711 	mls	r7, r3, r1, r5
 8006104:	5dc7      	ldrb	r7, [r0, r7]
 8006106:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800610a:	462f      	mov	r7, r5
 800610c:	42bb      	cmp	r3, r7
 800610e:	460d      	mov	r5, r1
 8006110:	d9f4      	bls.n	80060fc <_printf_i+0x110>
 8006112:	2b08      	cmp	r3, #8
 8006114:	d10b      	bne.n	800612e <_printf_i+0x142>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	07df      	lsls	r7, r3, #31
 800611a:	d508      	bpl.n	800612e <_printf_i+0x142>
 800611c:	6923      	ldr	r3, [r4, #16]
 800611e:	6861      	ldr	r1, [r4, #4]
 8006120:	4299      	cmp	r1, r3
 8006122:	bfde      	ittt	le
 8006124:	2330      	movle	r3, #48	@ 0x30
 8006126:	f806 3c01 	strble.w	r3, [r6, #-1]
 800612a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800612e:	1b92      	subs	r2, r2, r6
 8006130:	6122      	str	r2, [r4, #16]
 8006132:	464b      	mov	r3, r9
 8006134:	4621      	mov	r1, r4
 8006136:	4640      	mov	r0, r8
 8006138:	f8cd a000 	str.w	sl, [sp]
 800613c:	aa03      	add	r2, sp, #12
 800613e:	f7ff fee3 	bl	8005f08 <_printf_common>
 8006142:	3001      	adds	r0, #1
 8006144:	d14a      	bne.n	80061dc <_printf_i+0x1f0>
 8006146:	f04f 30ff 	mov.w	r0, #4294967295
 800614a:	b004      	add	sp, #16
 800614c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	f043 0320 	orr.w	r3, r3, #32
 8006156:	6023      	str	r3, [r4, #0]
 8006158:	2778      	movs	r7, #120	@ 0x78
 800615a:	4832      	ldr	r0, [pc, #200]	@ (8006224 <_printf_i+0x238>)
 800615c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	6831      	ldr	r1, [r6, #0]
 8006164:	061f      	lsls	r7, r3, #24
 8006166:	f851 5b04 	ldr.w	r5, [r1], #4
 800616a:	d402      	bmi.n	8006172 <_printf_i+0x186>
 800616c:	065f      	lsls	r7, r3, #25
 800616e:	bf48      	it	mi
 8006170:	b2ad      	uxthmi	r5, r5
 8006172:	6031      	str	r1, [r6, #0]
 8006174:	07d9      	lsls	r1, r3, #31
 8006176:	bf44      	itt	mi
 8006178:	f043 0320 	orrmi.w	r3, r3, #32
 800617c:	6023      	strmi	r3, [r4, #0]
 800617e:	b11d      	cbz	r5, 8006188 <_printf_i+0x19c>
 8006180:	2310      	movs	r3, #16
 8006182:	e7ad      	b.n	80060e0 <_printf_i+0xf4>
 8006184:	4826      	ldr	r0, [pc, #152]	@ (8006220 <_printf_i+0x234>)
 8006186:	e7e9      	b.n	800615c <_printf_i+0x170>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	f023 0320 	bic.w	r3, r3, #32
 800618e:	6023      	str	r3, [r4, #0]
 8006190:	e7f6      	b.n	8006180 <_printf_i+0x194>
 8006192:	4616      	mov	r6, r2
 8006194:	e7bd      	b.n	8006112 <_printf_i+0x126>
 8006196:	6833      	ldr	r3, [r6, #0]
 8006198:	6825      	ldr	r5, [r4, #0]
 800619a:	1d18      	adds	r0, r3, #4
 800619c:	6961      	ldr	r1, [r4, #20]
 800619e:	6030      	str	r0, [r6, #0]
 80061a0:	062e      	lsls	r6, r5, #24
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	d501      	bpl.n	80061aa <_printf_i+0x1be>
 80061a6:	6019      	str	r1, [r3, #0]
 80061a8:	e002      	b.n	80061b0 <_printf_i+0x1c4>
 80061aa:	0668      	lsls	r0, r5, #25
 80061ac:	d5fb      	bpl.n	80061a6 <_printf_i+0x1ba>
 80061ae:	8019      	strh	r1, [r3, #0]
 80061b0:	2300      	movs	r3, #0
 80061b2:	4616      	mov	r6, r2
 80061b4:	6123      	str	r3, [r4, #16]
 80061b6:	e7bc      	b.n	8006132 <_printf_i+0x146>
 80061b8:	6833      	ldr	r3, [r6, #0]
 80061ba:	2100      	movs	r1, #0
 80061bc:	1d1a      	adds	r2, r3, #4
 80061be:	6032      	str	r2, [r6, #0]
 80061c0:	681e      	ldr	r6, [r3, #0]
 80061c2:	6862      	ldr	r2, [r4, #4]
 80061c4:	4630      	mov	r0, r6
 80061c6:	f000 f9d6 	bl	8006576 <memchr>
 80061ca:	b108      	cbz	r0, 80061d0 <_printf_i+0x1e4>
 80061cc:	1b80      	subs	r0, r0, r6
 80061ce:	6060      	str	r0, [r4, #4]
 80061d0:	6863      	ldr	r3, [r4, #4]
 80061d2:	6123      	str	r3, [r4, #16]
 80061d4:	2300      	movs	r3, #0
 80061d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061da:	e7aa      	b.n	8006132 <_printf_i+0x146>
 80061dc:	4632      	mov	r2, r6
 80061de:	4649      	mov	r1, r9
 80061e0:	4640      	mov	r0, r8
 80061e2:	6923      	ldr	r3, [r4, #16]
 80061e4:	47d0      	blx	sl
 80061e6:	3001      	adds	r0, #1
 80061e8:	d0ad      	beq.n	8006146 <_printf_i+0x15a>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	079b      	lsls	r3, r3, #30
 80061ee:	d413      	bmi.n	8006218 <_printf_i+0x22c>
 80061f0:	68e0      	ldr	r0, [r4, #12]
 80061f2:	9b03      	ldr	r3, [sp, #12]
 80061f4:	4298      	cmp	r0, r3
 80061f6:	bfb8      	it	lt
 80061f8:	4618      	movlt	r0, r3
 80061fa:	e7a6      	b.n	800614a <_printf_i+0x15e>
 80061fc:	2301      	movs	r3, #1
 80061fe:	4632      	mov	r2, r6
 8006200:	4649      	mov	r1, r9
 8006202:	4640      	mov	r0, r8
 8006204:	47d0      	blx	sl
 8006206:	3001      	adds	r0, #1
 8006208:	d09d      	beq.n	8006146 <_printf_i+0x15a>
 800620a:	3501      	adds	r5, #1
 800620c:	68e3      	ldr	r3, [r4, #12]
 800620e:	9903      	ldr	r1, [sp, #12]
 8006210:	1a5b      	subs	r3, r3, r1
 8006212:	42ab      	cmp	r3, r5
 8006214:	dcf2      	bgt.n	80061fc <_printf_i+0x210>
 8006216:	e7eb      	b.n	80061f0 <_printf_i+0x204>
 8006218:	2500      	movs	r5, #0
 800621a:	f104 0619 	add.w	r6, r4, #25
 800621e:	e7f5      	b.n	800620c <_printf_i+0x220>
 8006220:	080094ac 	.word	0x080094ac
 8006224:	080094bd 	.word	0x080094bd

08006228 <std>:
 8006228:	2300      	movs	r3, #0
 800622a:	b510      	push	{r4, lr}
 800622c:	4604      	mov	r4, r0
 800622e:	e9c0 3300 	strd	r3, r3, [r0]
 8006232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006236:	6083      	str	r3, [r0, #8]
 8006238:	8181      	strh	r1, [r0, #12]
 800623a:	6643      	str	r3, [r0, #100]	@ 0x64
 800623c:	81c2      	strh	r2, [r0, #14]
 800623e:	6183      	str	r3, [r0, #24]
 8006240:	4619      	mov	r1, r3
 8006242:	2208      	movs	r2, #8
 8006244:	305c      	adds	r0, #92	@ 0x5c
 8006246:	f000 f916 	bl	8006476 <memset>
 800624a:	4b0d      	ldr	r3, [pc, #52]	@ (8006280 <std+0x58>)
 800624c:	6224      	str	r4, [r4, #32]
 800624e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006250:	4b0c      	ldr	r3, [pc, #48]	@ (8006284 <std+0x5c>)
 8006252:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006254:	4b0c      	ldr	r3, [pc, #48]	@ (8006288 <std+0x60>)
 8006256:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006258:	4b0c      	ldr	r3, [pc, #48]	@ (800628c <std+0x64>)
 800625a:	6323      	str	r3, [r4, #48]	@ 0x30
 800625c:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <std+0x68>)
 800625e:	429c      	cmp	r4, r3
 8006260:	d006      	beq.n	8006270 <std+0x48>
 8006262:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006266:	4294      	cmp	r4, r2
 8006268:	d002      	beq.n	8006270 <std+0x48>
 800626a:	33d0      	adds	r3, #208	@ 0xd0
 800626c:	429c      	cmp	r4, r3
 800626e:	d105      	bne.n	800627c <std+0x54>
 8006270:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006278:	f000 b97a 	b.w	8006570 <__retarget_lock_init_recursive>
 800627c:	bd10      	pop	{r4, pc}
 800627e:	bf00      	nop
 8006280:	080063f1 	.word	0x080063f1
 8006284:	08006413 	.word	0x08006413
 8006288:	0800644b 	.word	0x0800644b
 800628c:	0800646f 	.word	0x0800646f
 8006290:	200003bc 	.word	0x200003bc

08006294 <stdio_exit_handler>:
 8006294:	4a02      	ldr	r2, [pc, #8]	@ (80062a0 <stdio_exit_handler+0xc>)
 8006296:	4903      	ldr	r1, [pc, #12]	@ (80062a4 <stdio_exit_handler+0x10>)
 8006298:	4803      	ldr	r0, [pc, #12]	@ (80062a8 <stdio_exit_handler+0x14>)
 800629a:	f000 b869 	b.w	8006370 <_fwalk_sglue>
 800629e:	bf00      	nop
 80062a0:	2000000c 	.word	0x2000000c
 80062a4:	08007f09 	.word	0x08007f09
 80062a8:	2000001c 	.word	0x2000001c

080062ac <cleanup_stdio>:
 80062ac:	6841      	ldr	r1, [r0, #4]
 80062ae:	4b0c      	ldr	r3, [pc, #48]	@ (80062e0 <cleanup_stdio+0x34>)
 80062b0:	b510      	push	{r4, lr}
 80062b2:	4299      	cmp	r1, r3
 80062b4:	4604      	mov	r4, r0
 80062b6:	d001      	beq.n	80062bc <cleanup_stdio+0x10>
 80062b8:	f001 fe26 	bl	8007f08 <_fflush_r>
 80062bc:	68a1      	ldr	r1, [r4, #8]
 80062be:	4b09      	ldr	r3, [pc, #36]	@ (80062e4 <cleanup_stdio+0x38>)
 80062c0:	4299      	cmp	r1, r3
 80062c2:	d002      	beq.n	80062ca <cleanup_stdio+0x1e>
 80062c4:	4620      	mov	r0, r4
 80062c6:	f001 fe1f 	bl	8007f08 <_fflush_r>
 80062ca:	68e1      	ldr	r1, [r4, #12]
 80062cc:	4b06      	ldr	r3, [pc, #24]	@ (80062e8 <cleanup_stdio+0x3c>)
 80062ce:	4299      	cmp	r1, r3
 80062d0:	d004      	beq.n	80062dc <cleanup_stdio+0x30>
 80062d2:	4620      	mov	r0, r4
 80062d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d8:	f001 be16 	b.w	8007f08 <_fflush_r>
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	bf00      	nop
 80062e0:	200003bc 	.word	0x200003bc
 80062e4:	20000424 	.word	0x20000424
 80062e8:	2000048c 	.word	0x2000048c

080062ec <global_stdio_init.part.0>:
 80062ec:	b510      	push	{r4, lr}
 80062ee:	4b0b      	ldr	r3, [pc, #44]	@ (800631c <global_stdio_init.part.0+0x30>)
 80062f0:	4c0b      	ldr	r4, [pc, #44]	@ (8006320 <global_stdio_init.part.0+0x34>)
 80062f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006324 <global_stdio_init.part.0+0x38>)
 80062f4:	4620      	mov	r0, r4
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	2104      	movs	r1, #4
 80062fa:	2200      	movs	r2, #0
 80062fc:	f7ff ff94 	bl	8006228 <std>
 8006300:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006304:	2201      	movs	r2, #1
 8006306:	2109      	movs	r1, #9
 8006308:	f7ff ff8e 	bl	8006228 <std>
 800630c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006310:	2202      	movs	r2, #2
 8006312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006316:	2112      	movs	r1, #18
 8006318:	f7ff bf86 	b.w	8006228 <std>
 800631c:	200004f4 	.word	0x200004f4
 8006320:	200003bc 	.word	0x200003bc
 8006324:	08006295 	.word	0x08006295

08006328 <__sfp_lock_acquire>:
 8006328:	4801      	ldr	r0, [pc, #4]	@ (8006330 <__sfp_lock_acquire+0x8>)
 800632a:	f000 b922 	b.w	8006572 <__retarget_lock_acquire_recursive>
 800632e:	bf00      	nop
 8006330:	200004fd 	.word	0x200004fd

08006334 <__sfp_lock_release>:
 8006334:	4801      	ldr	r0, [pc, #4]	@ (800633c <__sfp_lock_release+0x8>)
 8006336:	f000 b91d 	b.w	8006574 <__retarget_lock_release_recursive>
 800633a:	bf00      	nop
 800633c:	200004fd 	.word	0x200004fd

08006340 <__sinit>:
 8006340:	b510      	push	{r4, lr}
 8006342:	4604      	mov	r4, r0
 8006344:	f7ff fff0 	bl	8006328 <__sfp_lock_acquire>
 8006348:	6a23      	ldr	r3, [r4, #32]
 800634a:	b11b      	cbz	r3, 8006354 <__sinit+0x14>
 800634c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006350:	f7ff bff0 	b.w	8006334 <__sfp_lock_release>
 8006354:	4b04      	ldr	r3, [pc, #16]	@ (8006368 <__sinit+0x28>)
 8006356:	6223      	str	r3, [r4, #32]
 8006358:	4b04      	ldr	r3, [pc, #16]	@ (800636c <__sinit+0x2c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1f5      	bne.n	800634c <__sinit+0xc>
 8006360:	f7ff ffc4 	bl	80062ec <global_stdio_init.part.0>
 8006364:	e7f2      	b.n	800634c <__sinit+0xc>
 8006366:	bf00      	nop
 8006368:	080062ad 	.word	0x080062ad
 800636c:	200004f4 	.word	0x200004f4

08006370 <_fwalk_sglue>:
 8006370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006374:	4607      	mov	r7, r0
 8006376:	4688      	mov	r8, r1
 8006378:	4614      	mov	r4, r2
 800637a:	2600      	movs	r6, #0
 800637c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006380:	f1b9 0901 	subs.w	r9, r9, #1
 8006384:	d505      	bpl.n	8006392 <_fwalk_sglue+0x22>
 8006386:	6824      	ldr	r4, [r4, #0]
 8006388:	2c00      	cmp	r4, #0
 800638a:	d1f7      	bne.n	800637c <_fwalk_sglue+0xc>
 800638c:	4630      	mov	r0, r6
 800638e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006392:	89ab      	ldrh	r3, [r5, #12]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d907      	bls.n	80063a8 <_fwalk_sglue+0x38>
 8006398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800639c:	3301      	adds	r3, #1
 800639e:	d003      	beq.n	80063a8 <_fwalk_sglue+0x38>
 80063a0:	4629      	mov	r1, r5
 80063a2:	4638      	mov	r0, r7
 80063a4:	47c0      	blx	r8
 80063a6:	4306      	orrs	r6, r0
 80063a8:	3568      	adds	r5, #104	@ 0x68
 80063aa:	e7e9      	b.n	8006380 <_fwalk_sglue+0x10>

080063ac <siprintf>:
 80063ac:	b40e      	push	{r1, r2, r3}
 80063ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80063b2:	b510      	push	{r4, lr}
 80063b4:	2400      	movs	r4, #0
 80063b6:	b09d      	sub	sp, #116	@ 0x74
 80063b8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80063ba:	9002      	str	r0, [sp, #8]
 80063bc:	9006      	str	r0, [sp, #24]
 80063be:	9107      	str	r1, [sp, #28]
 80063c0:	9104      	str	r1, [sp, #16]
 80063c2:	4809      	ldr	r0, [pc, #36]	@ (80063e8 <siprintf+0x3c>)
 80063c4:	4909      	ldr	r1, [pc, #36]	@ (80063ec <siprintf+0x40>)
 80063c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ca:	9105      	str	r1, [sp, #20]
 80063cc:	6800      	ldr	r0, [r0, #0]
 80063ce:	a902      	add	r1, sp, #8
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80063d4:	f001 fc1c 	bl	8007c10 <_svfiprintf_r>
 80063d8:	9b02      	ldr	r3, [sp, #8]
 80063da:	701c      	strb	r4, [r3, #0]
 80063dc:	b01d      	add	sp, #116	@ 0x74
 80063de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063e2:	b003      	add	sp, #12
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	20000018 	.word	0x20000018
 80063ec:	ffff0208 	.word	0xffff0208

080063f0 <__sread>:
 80063f0:	b510      	push	{r4, lr}
 80063f2:	460c      	mov	r4, r1
 80063f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f8:	f000 f86c 	bl	80064d4 <_read_r>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	bfab      	itete	ge
 8006400:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006402:	89a3      	ldrhlt	r3, [r4, #12]
 8006404:	181b      	addge	r3, r3, r0
 8006406:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800640a:	bfac      	ite	ge
 800640c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800640e:	81a3      	strhlt	r3, [r4, #12]
 8006410:	bd10      	pop	{r4, pc}

08006412 <__swrite>:
 8006412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006416:	461f      	mov	r7, r3
 8006418:	898b      	ldrh	r3, [r1, #12]
 800641a:	4605      	mov	r5, r0
 800641c:	05db      	lsls	r3, r3, #23
 800641e:	460c      	mov	r4, r1
 8006420:	4616      	mov	r6, r2
 8006422:	d505      	bpl.n	8006430 <__swrite+0x1e>
 8006424:	2302      	movs	r3, #2
 8006426:	2200      	movs	r2, #0
 8006428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800642c:	f000 f840 	bl	80064b0 <_lseek_r>
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	4632      	mov	r2, r6
 8006434:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006438:	81a3      	strh	r3, [r4, #12]
 800643a:	4628      	mov	r0, r5
 800643c:	463b      	mov	r3, r7
 800643e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006446:	f000 b857 	b.w	80064f8 <_write_r>

0800644a <__sseek>:
 800644a:	b510      	push	{r4, lr}
 800644c:	460c      	mov	r4, r1
 800644e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006452:	f000 f82d 	bl	80064b0 <_lseek_r>
 8006456:	1c43      	adds	r3, r0, #1
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	bf15      	itete	ne
 800645c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800645e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006462:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006466:	81a3      	strheq	r3, [r4, #12]
 8006468:	bf18      	it	ne
 800646a:	81a3      	strhne	r3, [r4, #12]
 800646c:	bd10      	pop	{r4, pc}

0800646e <__sclose>:
 800646e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006472:	f000 b80d 	b.w	8006490 <_close_r>

08006476 <memset>:
 8006476:	4603      	mov	r3, r0
 8006478:	4402      	add	r2, r0
 800647a:	4293      	cmp	r3, r2
 800647c:	d100      	bne.n	8006480 <memset+0xa>
 800647e:	4770      	bx	lr
 8006480:	f803 1b01 	strb.w	r1, [r3], #1
 8006484:	e7f9      	b.n	800647a <memset+0x4>
	...

08006488 <_localeconv_r>:
 8006488:	4800      	ldr	r0, [pc, #0]	@ (800648c <_localeconv_r+0x4>)
 800648a:	4770      	bx	lr
 800648c:	20000158 	.word	0x20000158

08006490 <_close_r>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	2300      	movs	r3, #0
 8006494:	4d05      	ldr	r5, [pc, #20]	@ (80064ac <_close_r+0x1c>)
 8006496:	4604      	mov	r4, r0
 8006498:	4608      	mov	r0, r1
 800649a:	602b      	str	r3, [r5, #0]
 800649c:	f7fc f8fb 	bl	8002696 <_close>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_close_r+0x1a>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_close_r+0x1a>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	200004f8 	.word	0x200004f8

080064b0 <_lseek_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4604      	mov	r4, r0
 80064b4:	4608      	mov	r0, r1
 80064b6:	4611      	mov	r1, r2
 80064b8:	2200      	movs	r2, #0
 80064ba:	4d05      	ldr	r5, [pc, #20]	@ (80064d0 <_lseek_r+0x20>)
 80064bc:	602a      	str	r2, [r5, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	f7fc f90d 	bl	80026de <_lseek>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d102      	bne.n	80064ce <_lseek_r+0x1e>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b103      	cbz	r3, 80064ce <_lseek_r+0x1e>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	200004f8 	.word	0x200004f8

080064d4 <_read_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4604      	mov	r4, r0
 80064d8:	4608      	mov	r0, r1
 80064da:	4611      	mov	r1, r2
 80064dc:	2200      	movs	r2, #0
 80064de:	4d05      	ldr	r5, [pc, #20]	@ (80064f4 <_read_r+0x20>)
 80064e0:	602a      	str	r2, [r5, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	f7fc f89e 	bl	8002624 <_read>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d102      	bne.n	80064f2 <_read_r+0x1e>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	b103      	cbz	r3, 80064f2 <_read_r+0x1e>
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
 80064f4:	200004f8 	.word	0x200004f8

080064f8 <_write_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4604      	mov	r4, r0
 80064fc:	4608      	mov	r0, r1
 80064fe:	4611      	mov	r1, r2
 8006500:	2200      	movs	r2, #0
 8006502:	4d05      	ldr	r5, [pc, #20]	@ (8006518 <_write_r+0x20>)
 8006504:	602a      	str	r2, [r5, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	f7fc f8a9 	bl	800265e <_write>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_write_r+0x1e>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	b103      	cbz	r3, 8006516 <_write_r+0x1e>
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	200004f8 	.word	0x200004f8

0800651c <__errno>:
 800651c:	4b01      	ldr	r3, [pc, #4]	@ (8006524 <__errno+0x8>)
 800651e:	6818      	ldr	r0, [r3, #0]
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000018 	.word	0x20000018

08006528 <__libc_init_array>:
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	2600      	movs	r6, #0
 800652c:	4d0c      	ldr	r5, [pc, #48]	@ (8006560 <__libc_init_array+0x38>)
 800652e:	4c0d      	ldr	r4, [pc, #52]	@ (8006564 <__libc_init_array+0x3c>)
 8006530:	1b64      	subs	r4, r4, r5
 8006532:	10a4      	asrs	r4, r4, #2
 8006534:	42a6      	cmp	r6, r4
 8006536:	d109      	bne.n	800654c <__libc_init_array+0x24>
 8006538:	f002 ff7e 	bl	8009438 <_init>
 800653c:	2600      	movs	r6, #0
 800653e:	4d0a      	ldr	r5, [pc, #40]	@ (8006568 <__libc_init_array+0x40>)
 8006540:	4c0a      	ldr	r4, [pc, #40]	@ (800656c <__libc_init_array+0x44>)
 8006542:	1b64      	subs	r4, r4, r5
 8006544:	10a4      	asrs	r4, r4, #2
 8006546:	42a6      	cmp	r6, r4
 8006548:	d105      	bne.n	8006556 <__libc_init_array+0x2e>
 800654a:	bd70      	pop	{r4, r5, r6, pc}
 800654c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006550:	4798      	blx	r3
 8006552:	3601      	adds	r6, #1
 8006554:	e7ee      	b.n	8006534 <__libc_init_array+0xc>
 8006556:	f855 3b04 	ldr.w	r3, [r5], #4
 800655a:	4798      	blx	r3
 800655c:	3601      	adds	r6, #1
 800655e:	e7f2      	b.n	8006546 <__libc_init_array+0x1e>
 8006560:	08009858 	.word	0x08009858
 8006564:	08009858 	.word	0x08009858
 8006568:	08009858 	.word	0x08009858
 800656c:	0800985c 	.word	0x0800985c

08006570 <__retarget_lock_init_recursive>:
 8006570:	4770      	bx	lr

08006572 <__retarget_lock_acquire_recursive>:
 8006572:	4770      	bx	lr

08006574 <__retarget_lock_release_recursive>:
 8006574:	4770      	bx	lr

08006576 <memchr>:
 8006576:	4603      	mov	r3, r0
 8006578:	b510      	push	{r4, lr}
 800657a:	b2c9      	uxtb	r1, r1
 800657c:	4402      	add	r2, r0
 800657e:	4293      	cmp	r3, r2
 8006580:	4618      	mov	r0, r3
 8006582:	d101      	bne.n	8006588 <memchr+0x12>
 8006584:	2000      	movs	r0, #0
 8006586:	e003      	b.n	8006590 <memchr+0x1a>
 8006588:	7804      	ldrb	r4, [r0, #0]
 800658a:	3301      	adds	r3, #1
 800658c:	428c      	cmp	r4, r1
 800658e:	d1f6      	bne.n	800657e <memchr+0x8>
 8006590:	bd10      	pop	{r4, pc}

08006592 <memcpy>:
 8006592:	440a      	add	r2, r1
 8006594:	4291      	cmp	r1, r2
 8006596:	f100 33ff 	add.w	r3, r0, #4294967295
 800659a:	d100      	bne.n	800659e <memcpy+0xc>
 800659c:	4770      	bx	lr
 800659e:	b510      	push	{r4, lr}
 80065a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a4:	4291      	cmp	r1, r2
 80065a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065aa:	d1f9      	bne.n	80065a0 <memcpy+0xe>
 80065ac:	bd10      	pop	{r4, pc}

080065ae <quorem>:
 80065ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b2:	6903      	ldr	r3, [r0, #16]
 80065b4:	690c      	ldr	r4, [r1, #16]
 80065b6:	4607      	mov	r7, r0
 80065b8:	42a3      	cmp	r3, r4
 80065ba:	db7e      	blt.n	80066ba <quorem+0x10c>
 80065bc:	3c01      	subs	r4, #1
 80065be:	00a3      	lsls	r3, r4, #2
 80065c0:	f100 0514 	add.w	r5, r0, #20
 80065c4:	f101 0814 	add.w	r8, r1, #20
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065d8:	3301      	adds	r3, #1
 80065da:	429a      	cmp	r2, r3
 80065dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80065e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80065e4:	d32e      	bcc.n	8006644 <quorem+0x96>
 80065e6:	f04f 0a00 	mov.w	sl, #0
 80065ea:	46c4      	mov	ip, r8
 80065ec:	46ae      	mov	lr, r5
 80065ee:	46d3      	mov	fp, sl
 80065f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80065f4:	b298      	uxth	r0, r3
 80065f6:	fb06 a000 	mla	r0, r6, r0, sl
 80065fa:	0c1b      	lsrs	r3, r3, #16
 80065fc:	0c02      	lsrs	r2, r0, #16
 80065fe:	fb06 2303 	mla	r3, r6, r3, r2
 8006602:	f8de 2000 	ldr.w	r2, [lr]
 8006606:	b280      	uxth	r0, r0
 8006608:	b292      	uxth	r2, r2
 800660a:	1a12      	subs	r2, r2, r0
 800660c:	445a      	add	r2, fp
 800660e:	f8de 0000 	ldr.w	r0, [lr]
 8006612:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006616:	b29b      	uxth	r3, r3
 8006618:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800661c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006620:	b292      	uxth	r2, r2
 8006622:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006626:	45e1      	cmp	r9, ip
 8006628:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800662c:	f84e 2b04 	str.w	r2, [lr], #4
 8006630:	d2de      	bcs.n	80065f0 <quorem+0x42>
 8006632:	9b00      	ldr	r3, [sp, #0]
 8006634:	58eb      	ldr	r3, [r5, r3]
 8006636:	b92b      	cbnz	r3, 8006644 <quorem+0x96>
 8006638:	9b01      	ldr	r3, [sp, #4]
 800663a:	3b04      	subs	r3, #4
 800663c:	429d      	cmp	r5, r3
 800663e:	461a      	mov	r2, r3
 8006640:	d32f      	bcc.n	80066a2 <quorem+0xf4>
 8006642:	613c      	str	r4, [r7, #16]
 8006644:	4638      	mov	r0, r7
 8006646:	f001 f97f 	bl	8007948 <__mcmp>
 800664a:	2800      	cmp	r0, #0
 800664c:	db25      	blt.n	800669a <quorem+0xec>
 800664e:	4629      	mov	r1, r5
 8006650:	2000      	movs	r0, #0
 8006652:	f858 2b04 	ldr.w	r2, [r8], #4
 8006656:	f8d1 c000 	ldr.w	ip, [r1]
 800665a:	fa1f fe82 	uxth.w	lr, r2
 800665e:	fa1f f38c 	uxth.w	r3, ip
 8006662:	eba3 030e 	sub.w	r3, r3, lr
 8006666:	4403      	add	r3, r0
 8006668:	0c12      	lsrs	r2, r2, #16
 800666a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800666e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006672:	b29b      	uxth	r3, r3
 8006674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006678:	45c1      	cmp	r9, r8
 800667a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800667e:	f841 3b04 	str.w	r3, [r1], #4
 8006682:	d2e6      	bcs.n	8006652 <quorem+0xa4>
 8006684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006688:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800668c:	b922      	cbnz	r2, 8006698 <quorem+0xea>
 800668e:	3b04      	subs	r3, #4
 8006690:	429d      	cmp	r5, r3
 8006692:	461a      	mov	r2, r3
 8006694:	d30b      	bcc.n	80066ae <quorem+0x100>
 8006696:	613c      	str	r4, [r7, #16]
 8006698:	3601      	adds	r6, #1
 800669a:	4630      	mov	r0, r6
 800669c:	b003      	add	sp, #12
 800669e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a2:	6812      	ldr	r2, [r2, #0]
 80066a4:	3b04      	subs	r3, #4
 80066a6:	2a00      	cmp	r2, #0
 80066a8:	d1cb      	bne.n	8006642 <quorem+0x94>
 80066aa:	3c01      	subs	r4, #1
 80066ac:	e7c6      	b.n	800663c <quorem+0x8e>
 80066ae:	6812      	ldr	r2, [r2, #0]
 80066b0:	3b04      	subs	r3, #4
 80066b2:	2a00      	cmp	r2, #0
 80066b4:	d1ef      	bne.n	8006696 <quorem+0xe8>
 80066b6:	3c01      	subs	r4, #1
 80066b8:	e7ea      	b.n	8006690 <quorem+0xe2>
 80066ba:	2000      	movs	r0, #0
 80066bc:	e7ee      	b.n	800669c <quorem+0xee>
	...

080066c0 <_dtoa_r>:
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	4614      	mov	r4, r2
 80066c6:	461d      	mov	r5, r3
 80066c8:	69c7      	ldr	r7, [r0, #28]
 80066ca:	b097      	sub	sp, #92	@ 0x5c
 80066cc:	4681      	mov	r9, r0
 80066ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80066d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80066d4:	b97f      	cbnz	r7, 80066f6 <_dtoa_r+0x36>
 80066d6:	2010      	movs	r0, #16
 80066d8:	f000 fe0e 	bl	80072f8 <malloc>
 80066dc:	4602      	mov	r2, r0
 80066de:	f8c9 001c 	str.w	r0, [r9, #28]
 80066e2:	b920      	cbnz	r0, 80066ee <_dtoa_r+0x2e>
 80066e4:	21ef      	movs	r1, #239	@ 0xef
 80066e6:	4bac      	ldr	r3, [pc, #688]	@ (8006998 <_dtoa_r+0x2d8>)
 80066e8:	48ac      	ldr	r0, [pc, #688]	@ (800699c <_dtoa_r+0x2dc>)
 80066ea:	f001 fc5f 	bl	8007fac <__assert_func>
 80066ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80066f2:	6007      	str	r7, [r0, #0]
 80066f4:	60c7      	str	r7, [r0, #12]
 80066f6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80066fa:	6819      	ldr	r1, [r3, #0]
 80066fc:	b159      	cbz	r1, 8006716 <_dtoa_r+0x56>
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	2301      	movs	r3, #1
 8006702:	4093      	lsls	r3, r2
 8006704:	604a      	str	r2, [r1, #4]
 8006706:	608b      	str	r3, [r1, #8]
 8006708:	4648      	mov	r0, r9
 800670a:	f000 feeb 	bl	80074e4 <_Bfree>
 800670e:	2200      	movs	r2, #0
 8006710:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	1e2b      	subs	r3, r5, #0
 8006718:	bfaf      	iteee	ge
 800671a:	2300      	movge	r3, #0
 800671c:	2201      	movlt	r2, #1
 800671e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006722:	9307      	strlt	r3, [sp, #28]
 8006724:	bfa8      	it	ge
 8006726:	6033      	strge	r3, [r6, #0]
 8006728:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800672c:	4b9c      	ldr	r3, [pc, #624]	@ (80069a0 <_dtoa_r+0x2e0>)
 800672e:	bfb8      	it	lt
 8006730:	6032      	strlt	r2, [r6, #0]
 8006732:	ea33 0308 	bics.w	r3, r3, r8
 8006736:	d112      	bne.n	800675e <_dtoa_r+0x9e>
 8006738:	f242 730f 	movw	r3, #9999	@ 0x270f
 800673c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006744:	4323      	orrs	r3, r4
 8006746:	f000 855e 	beq.w	8007206 <_dtoa_r+0xb46>
 800674a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800674c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80069a4 <_dtoa_r+0x2e4>
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8560 	beq.w	8007216 <_dtoa_r+0xb56>
 8006756:	f10a 0303 	add.w	r3, sl, #3
 800675a:	f000 bd5a 	b.w	8007212 <_dtoa_r+0xb52>
 800675e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006762:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800676a:	2200      	movs	r2, #0
 800676c:	2300      	movs	r3, #0
 800676e:	f7fa f91b 	bl	80009a8 <__aeabi_dcmpeq>
 8006772:	4607      	mov	r7, r0
 8006774:	b158      	cbz	r0, 800678e <_dtoa_r+0xce>
 8006776:	2301      	movs	r3, #1
 8006778:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800677e:	b113      	cbz	r3, 8006786 <_dtoa_r+0xc6>
 8006780:	4b89      	ldr	r3, [pc, #548]	@ (80069a8 <_dtoa_r+0x2e8>)
 8006782:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80069ac <_dtoa_r+0x2ec>
 800678a:	f000 bd44 	b.w	8007216 <_dtoa_r+0xb56>
 800678e:	ab14      	add	r3, sp, #80	@ 0x50
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	ab15      	add	r3, sp, #84	@ 0x54
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	4648      	mov	r0, r9
 8006798:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800679c:	f001 f984 	bl	8007aa8 <__d2b>
 80067a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80067a4:	9003      	str	r0, [sp, #12]
 80067a6:	2e00      	cmp	r6, #0
 80067a8:	d078      	beq.n	800689c <_dtoa_r+0x1dc>
 80067aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80067b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80067bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80067c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80067c2:	4619      	mov	r1, r3
 80067c4:	2200      	movs	r2, #0
 80067c6:	4b7a      	ldr	r3, [pc, #488]	@ (80069b0 <_dtoa_r+0x2f0>)
 80067c8:	f7f9 fcce 	bl	8000168 <__aeabi_dsub>
 80067cc:	a36c      	add	r3, pc, #432	@ (adr r3, 8006980 <_dtoa_r+0x2c0>)
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f7f9 fe81 	bl	80004d8 <__aeabi_dmul>
 80067d6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006988 <_dtoa_r+0x2c8>)
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f7f9 fcc6 	bl	800016c <__adddf3>
 80067e0:	4604      	mov	r4, r0
 80067e2:	4630      	mov	r0, r6
 80067e4:	460d      	mov	r5, r1
 80067e6:	f7f9 fe0d 	bl	8000404 <__aeabi_i2d>
 80067ea:	a369      	add	r3, pc, #420	@ (adr r3, 8006990 <_dtoa_r+0x2d0>)
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	f7f9 fe72 	bl	80004d8 <__aeabi_dmul>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4620      	mov	r0, r4
 80067fa:	4629      	mov	r1, r5
 80067fc:	f7f9 fcb6 	bl	800016c <__adddf3>
 8006800:	4604      	mov	r4, r0
 8006802:	460d      	mov	r5, r1
 8006804:	f7fa f918 	bl	8000a38 <__aeabi_d2iz>
 8006808:	2200      	movs	r2, #0
 800680a:	4607      	mov	r7, r0
 800680c:	2300      	movs	r3, #0
 800680e:	4620      	mov	r0, r4
 8006810:	4629      	mov	r1, r5
 8006812:	f7fa f8d3 	bl	80009bc <__aeabi_dcmplt>
 8006816:	b140      	cbz	r0, 800682a <_dtoa_r+0x16a>
 8006818:	4638      	mov	r0, r7
 800681a:	f7f9 fdf3 	bl	8000404 <__aeabi_i2d>
 800681e:	4622      	mov	r2, r4
 8006820:	462b      	mov	r3, r5
 8006822:	f7fa f8c1 	bl	80009a8 <__aeabi_dcmpeq>
 8006826:	b900      	cbnz	r0, 800682a <_dtoa_r+0x16a>
 8006828:	3f01      	subs	r7, #1
 800682a:	2f16      	cmp	r7, #22
 800682c:	d854      	bhi.n	80068d8 <_dtoa_r+0x218>
 800682e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006832:	4b60      	ldr	r3, [pc, #384]	@ (80069b4 <_dtoa_r+0x2f4>)
 8006834:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	f7fa f8be 	bl	80009bc <__aeabi_dcmplt>
 8006840:	2800      	cmp	r0, #0
 8006842:	d04b      	beq.n	80068dc <_dtoa_r+0x21c>
 8006844:	2300      	movs	r3, #0
 8006846:	3f01      	subs	r7, #1
 8006848:	930f      	str	r3, [sp, #60]	@ 0x3c
 800684a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800684c:	1b9b      	subs	r3, r3, r6
 800684e:	1e5a      	subs	r2, r3, #1
 8006850:	bf49      	itett	mi
 8006852:	f1c3 0301 	rsbmi	r3, r3, #1
 8006856:	2300      	movpl	r3, #0
 8006858:	9304      	strmi	r3, [sp, #16]
 800685a:	2300      	movmi	r3, #0
 800685c:	9209      	str	r2, [sp, #36]	@ 0x24
 800685e:	bf54      	ite	pl
 8006860:	9304      	strpl	r3, [sp, #16]
 8006862:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006864:	2f00      	cmp	r7, #0
 8006866:	db3b      	blt.n	80068e0 <_dtoa_r+0x220>
 8006868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800686a:	970e      	str	r7, [sp, #56]	@ 0x38
 800686c:	443b      	add	r3, r7
 800686e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006870:	2300      	movs	r3, #0
 8006872:	930a      	str	r3, [sp, #40]	@ 0x28
 8006874:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006876:	2b09      	cmp	r3, #9
 8006878:	d865      	bhi.n	8006946 <_dtoa_r+0x286>
 800687a:	2b05      	cmp	r3, #5
 800687c:	bfc4      	itt	gt
 800687e:	3b04      	subgt	r3, #4
 8006880:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006882:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006884:	bfc8      	it	gt
 8006886:	2400      	movgt	r4, #0
 8006888:	f1a3 0302 	sub.w	r3, r3, #2
 800688c:	bfd8      	it	le
 800688e:	2401      	movle	r4, #1
 8006890:	2b03      	cmp	r3, #3
 8006892:	d864      	bhi.n	800695e <_dtoa_r+0x29e>
 8006894:	e8df f003 	tbb	[pc, r3]
 8006898:	2c385553 	.word	0x2c385553
 800689c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80068a0:	441e      	add	r6, r3
 80068a2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	bfc1      	itttt	gt
 80068aa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80068ae:	fa08 f803 	lslgt.w	r8, r8, r3
 80068b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80068b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80068ba:	bfd6      	itet	le
 80068bc:	f1c3 0320 	rsble	r3, r3, #32
 80068c0:	ea48 0003 	orrgt.w	r0, r8, r3
 80068c4:	fa04 f003 	lslle.w	r0, r4, r3
 80068c8:	f7f9 fd8c 	bl	80003e4 <__aeabi_ui2d>
 80068cc:	2201      	movs	r2, #1
 80068ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80068d2:	3e01      	subs	r6, #1
 80068d4:	9212      	str	r2, [sp, #72]	@ 0x48
 80068d6:	e774      	b.n	80067c2 <_dtoa_r+0x102>
 80068d8:	2301      	movs	r3, #1
 80068da:	e7b5      	b.n	8006848 <_dtoa_r+0x188>
 80068dc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80068de:	e7b4      	b.n	800684a <_dtoa_r+0x18a>
 80068e0:	9b04      	ldr	r3, [sp, #16]
 80068e2:	1bdb      	subs	r3, r3, r7
 80068e4:	9304      	str	r3, [sp, #16]
 80068e6:	427b      	negs	r3, r7
 80068e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80068ea:	2300      	movs	r3, #0
 80068ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80068ee:	e7c1      	b.n	8006874 <_dtoa_r+0x1b4>
 80068f0:	2301      	movs	r3, #1
 80068f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80068f6:	eb07 0b03 	add.w	fp, r7, r3
 80068fa:	f10b 0301 	add.w	r3, fp, #1
 80068fe:	2b01      	cmp	r3, #1
 8006900:	9308      	str	r3, [sp, #32]
 8006902:	bfb8      	it	lt
 8006904:	2301      	movlt	r3, #1
 8006906:	e006      	b.n	8006916 <_dtoa_r+0x256>
 8006908:	2301      	movs	r3, #1
 800690a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800690c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800690e:	2b00      	cmp	r3, #0
 8006910:	dd28      	ble.n	8006964 <_dtoa_r+0x2a4>
 8006912:	469b      	mov	fp, r3
 8006914:	9308      	str	r3, [sp, #32]
 8006916:	2100      	movs	r1, #0
 8006918:	2204      	movs	r2, #4
 800691a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800691e:	f102 0514 	add.w	r5, r2, #20
 8006922:	429d      	cmp	r5, r3
 8006924:	d926      	bls.n	8006974 <_dtoa_r+0x2b4>
 8006926:	6041      	str	r1, [r0, #4]
 8006928:	4648      	mov	r0, r9
 800692a:	f000 fd9b 	bl	8007464 <_Balloc>
 800692e:	4682      	mov	sl, r0
 8006930:	2800      	cmp	r0, #0
 8006932:	d143      	bne.n	80069bc <_dtoa_r+0x2fc>
 8006934:	4602      	mov	r2, r0
 8006936:	f240 11af 	movw	r1, #431	@ 0x1af
 800693a:	4b1f      	ldr	r3, [pc, #124]	@ (80069b8 <_dtoa_r+0x2f8>)
 800693c:	e6d4      	b.n	80066e8 <_dtoa_r+0x28>
 800693e:	2300      	movs	r3, #0
 8006940:	e7e3      	b.n	800690a <_dtoa_r+0x24a>
 8006942:	2300      	movs	r3, #0
 8006944:	e7d5      	b.n	80068f2 <_dtoa_r+0x232>
 8006946:	2401      	movs	r4, #1
 8006948:	2300      	movs	r3, #0
 800694a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800694c:	9320      	str	r3, [sp, #128]	@ 0x80
 800694e:	f04f 3bff 	mov.w	fp, #4294967295
 8006952:	2200      	movs	r2, #0
 8006954:	2312      	movs	r3, #18
 8006956:	f8cd b020 	str.w	fp, [sp, #32]
 800695a:	9221      	str	r2, [sp, #132]	@ 0x84
 800695c:	e7db      	b.n	8006916 <_dtoa_r+0x256>
 800695e:	2301      	movs	r3, #1
 8006960:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006962:	e7f4      	b.n	800694e <_dtoa_r+0x28e>
 8006964:	f04f 0b01 	mov.w	fp, #1
 8006968:	465b      	mov	r3, fp
 800696a:	f8cd b020 	str.w	fp, [sp, #32]
 800696e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006972:	e7d0      	b.n	8006916 <_dtoa_r+0x256>
 8006974:	3101      	adds	r1, #1
 8006976:	0052      	lsls	r2, r2, #1
 8006978:	e7d1      	b.n	800691e <_dtoa_r+0x25e>
 800697a:	bf00      	nop
 800697c:	f3af 8000 	nop.w
 8006980:	636f4361 	.word	0x636f4361
 8006984:	3fd287a7 	.word	0x3fd287a7
 8006988:	8b60c8b3 	.word	0x8b60c8b3
 800698c:	3fc68a28 	.word	0x3fc68a28
 8006990:	509f79fb 	.word	0x509f79fb
 8006994:	3fd34413 	.word	0x3fd34413
 8006998:	080094db 	.word	0x080094db
 800699c:	080094f2 	.word	0x080094f2
 80069a0:	7ff00000 	.word	0x7ff00000
 80069a4:	080094d7 	.word	0x080094d7
 80069a8:	080094ab 	.word	0x080094ab
 80069ac:	080094aa 	.word	0x080094aa
 80069b0:	3ff80000 	.word	0x3ff80000
 80069b4:	08009640 	.word	0x08009640
 80069b8:	0800954a 	.word	0x0800954a
 80069bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80069c0:	6018      	str	r0, [r3, #0]
 80069c2:	9b08      	ldr	r3, [sp, #32]
 80069c4:	2b0e      	cmp	r3, #14
 80069c6:	f200 80a1 	bhi.w	8006b0c <_dtoa_r+0x44c>
 80069ca:	2c00      	cmp	r4, #0
 80069cc:	f000 809e 	beq.w	8006b0c <_dtoa_r+0x44c>
 80069d0:	2f00      	cmp	r7, #0
 80069d2:	dd33      	ble.n	8006a3c <_dtoa_r+0x37c>
 80069d4:	4b9c      	ldr	r3, [pc, #624]	@ (8006c48 <_dtoa_r+0x588>)
 80069d6:	f007 020f 	and.w	r2, r7, #15
 80069da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069de:	05f8      	lsls	r0, r7, #23
 80069e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80069e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80069ec:	d516      	bpl.n	8006a1c <_dtoa_r+0x35c>
 80069ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069f2:	4b96      	ldr	r3, [pc, #600]	@ (8006c4c <_dtoa_r+0x58c>)
 80069f4:	2603      	movs	r6, #3
 80069f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069fa:	f7f9 fe97 	bl	800072c <__aeabi_ddiv>
 80069fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a02:	f004 040f 	and.w	r4, r4, #15
 8006a06:	4d91      	ldr	r5, [pc, #580]	@ (8006c4c <_dtoa_r+0x58c>)
 8006a08:	b954      	cbnz	r4, 8006a20 <_dtoa_r+0x360>
 8006a0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a12:	f7f9 fe8b 	bl	800072c <__aeabi_ddiv>
 8006a16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a1a:	e028      	b.n	8006a6e <_dtoa_r+0x3ae>
 8006a1c:	2602      	movs	r6, #2
 8006a1e:	e7f2      	b.n	8006a06 <_dtoa_r+0x346>
 8006a20:	07e1      	lsls	r1, r4, #31
 8006a22:	d508      	bpl.n	8006a36 <_dtoa_r+0x376>
 8006a24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a2c:	f7f9 fd54 	bl	80004d8 <__aeabi_dmul>
 8006a30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a34:	3601      	adds	r6, #1
 8006a36:	1064      	asrs	r4, r4, #1
 8006a38:	3508      	adds	r5, #8
 8006a3a:	e7e5      	b.n	8006a08 <_dtoa_r+0x348>
 8006a3c:	f000 80af 	beq.w	8006b9e <_dtoa_r+0x4de>
 8006a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a44:	427c      	negs	r4, r7
 8006a46:	4b80      	ldr	r3, [pc, #512]	@ (8006c48 <_dtoa_r+0x588>)
 8006a48:	f004 020f 	and.w	r2, r4, #15
 8006a4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	f7f9 fd40 	bl	80004d8 <__aeabi_dmul>
 8006a58:	2602      	movs	r6, #2
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a60:	4d7a      	ldr	r5, [pc, #488]	@ (8006c4c <_dtoa_r+0x58c>)
 8006a62:	1124      	asrs	r4, r4, #4
 8006a64:	2c00      	cmp	r4, #0
 8006a66:	f040 808f 	bne.w	8006b88 <_dtoa_r+0x4c8>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1d3      	bne.n	8006a16 <_dtoa_r+0x356>
 8006a6e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006a72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8094 	beq.w	8006ba2 <_dtoa_r+0x4e2>
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	4629      	mov	r1, r5
 8006a80:	4b73      	ldr	r3, [pc, #460]	@ (8006c50 <_dtoa_r+0x590>)
 8006a82:	f7f9 ff9b 	bl	80009bc <__aeabi_dcmplt>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	f000 808b 	beq.w	8006ba2 <_dtoa_r+0x4e2>
 8006a8c:	9b08      	ldr	r3, [sp, #32]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8087 	beq.w	8006ba2 <_dtoa_r+0x4e2>
 8006a94:	f1bb 0f00 	cmp.w	fp, #0
 8006a98:	dd34      	ble.n	8006b04 <_dtoa_r+0x444>
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	4b6c      	ldr	r3, [pc, #432]	@ (8006c54 <_dtoa_r+0x594>)
 8006aa2:	f7f9 fd19 	bl	80004d8 <__aeabi_dmul>
 8006aa6:	465c      	mov	r4, fp
 8006aa8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006aac:	f107 38ff 	add.w	r8, r7, #4294967295
 8006ab0:	3601      	adds	r6, #1
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f7f9 fca6 	bl	8000404 <__aeabi_i2d>
 8006ab8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006abc:	f7f9 fd0c 	bl	80004d8 <__aeabi_dmul>
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	4b65      	ldr	r3, [pc, #404]	@ (8006c58 <_dtoa_r+0x598>)
 8006ac4:	f7f9 fb52 	bl	800016c <__adddf3>
 8006ac8:	4605      	mov	r5, r0
 8006aca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006ace:	2c00      	cmp	r4, #0
 8006ad0:	d16a      	bne.n	8006ba8 <_dtoa_r+0x4e8>
 8006ad2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4b60      	ldr	r3, [pc, #384]	@ (8006c5c <_dtoa_r+0x59c>)
 8006ada:	f7f9 fb45 	bl	8000168 <__aeabi_dsub>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ae6:	462a      	mov	r2, r5
 8006ae8:	4633      	mov	r3, r6
 8006aea:	f7f9 ff85 	bl	80009f8 <__aeabi_dcmpgt>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	f040 8298 	bne.w	8007024 <_dtoa_r+0x964>
 8006af4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006af8:	462a      	mov	r2, r5
 8006afa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006afe:	f7f9 ff5d 	bl	80009bc <__aeabi_dcmplt>
 8006b02:	bb38      	cbnz	r0, 8006b54 <_dtoa_r+0x494>
 8006b04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006b08:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006b0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f2c0 8157 	blt.w	8006dc2 <_dtoa_r+0x702>
 8006b14:	2f0e      	cmp	r7, #14
 8006b16:	f300 8154 	bgt.w	8006dc2 <_dtoa_r+0x702>
 8006b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8006c48 <_dtoa_r+0x588>)
 8006b1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006b28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f280 80e5 	bge.w	8006cfa <_dtoa_r+0x63a>
 8006b30:	9b08      	ldr	r3, [sp, #32]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f300 80e1 	bgt.w	8006cfa <_dtoa_r+0x63a>
 8006b38:	d10c      	bne.n	8006b54 <_dtoa_r+0x494>
 8006b3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	4b46      	ldr	r3, [pc, #280]	@ (8006c5c <_dtoa_r+0x59c>)
 8006b42:	f7f9 fcc9 	bl	80004d8 <__aeabi_dmul>
 8006b46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b4a:	f7f9 ff4b 	bl	80009e4 <__aeabi_dcmpge>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	f000 8266 	beq.w	8007020 <_dtoa_r+0x960>
 8006b54:	2400      	movs	r4, #0
 8006b56:	4625      	mov	r5, r4
 8006b58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b5a:	4656      	mov	r6, sl
 8006b5c:	ea6f 0803 	mvn.w	r8, r3
 8006b60:	2700      	movs	r7, #0
 8006b62:	4621      	mov	r1, r4
 8006b64:	4648      	mov	r0, r9
 8006b66:	f000 fcbd 	bl	80074e4 <_Bfree>
 8006b6a:	2d00      	cmp	r5, #0
 8006b6c:	f000 80bd 	beq.w	8006cea <_dtoa_r+0x62a>
 8006b70:	b12f      	cbz	r7, 8006b7e <_dtoa_r+0x4be>
 8006b72:	42af      	cmp	r7, r5
 8006b74:	d003      	beq.n	8006b7e <_dtoa_r+0x4be>
 8006b76:	4639      	mov	r1, r7
 8006b78:	4648      	mov	r0, r9
 8006b7a:	f000 fcb3 	bl	80074e4 <_Bfree>
 8006b7e:	4629      	mov	r1, r5
 8006b80:	4648      	mov	r0, r9
 8006b82:	f000 fcaf 	bl	80074e4 <_Bfree>
 8006b86:	e0b0      	b.n	8006cea <_dtoa_r+0x62a>
 8006b88:	07e2      	lsls	r2, r4, #31
 8006b8a:	d505      	bpl.n	8006b98 <_dtoa_r+0x4d8>
 8006b8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b90:	f7f9 fca2 	bl	80004d8 <__aeabi_dmul>
 8006b94:	2301      	movs	r3, #1
 8006b96:	3601      	adds	r6, #1
 8006b98:	1064      	asrs	r4, r4, #1
 8006b9a:	3508      	adds	r5, #8
 8006b9c:	e762      	b.n	8006a64 <_dtoa_r+0x3a4>
 8006b9e:	2602      	movs	r6, #2
 8006ba0:	e765      	b.n	8006a6e <_dtoa_r+0x3ae>
 8006ba2:	46b8      	mov	r8, r7
 8006ba4:	9c08      	ldr	r4, [sp, #32]
 8006ba6:	e784      	b.n	8006ab2 <_dtoa_r+0x3f2>
 8006ba8:	4b27      	ldr	r3, [pc, #156]	@ (8006c48 <_dtoa_r+0x588>)
 8006baa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006bac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006bb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006bb4:	4454      	add	r4, sl
 8006bb6:	2900      	cmp	r1, #0
 8006bb8:	d054      	beq.n	8006c64 <_dtoa_r+0x5a4>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	4928      	ldr	r1, [pc, #160]	@ (8006c60 <_dtoa_r+0x5a0>)
 8006bbe:	f7f9 fdb5 	bl	800072c <__aeabi_ddiv>
 8006bc2:	4633      	mov	r3, r6
 8006bc4:	462a      	mov	r2, r5
 8006bc6:	f7f9 facf 	bl	8000168 <__aeabi_dsub>
 8006bca:	4656      	mov	r6, sl
 8006bcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006bd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bd4:	f7f9 ff30 	bl	8000a38 <__aeabi_d2iz>
 8006bd8:	4605      	mov	r5, r0
 8006bda:	f7f9 fc13 	bl	8000404 <__aeabi_i2d>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006be6:	f7f9 fabf 	bl	8000168 <__aeabi_dsub>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	3530      	adds	r5, #48	@ 0x30
 8006bf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006bf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006bf8:	f806 5b01 	strb.w	r5, [r6], #1
 8006bfc:	f7f9 fede 	bl	80009bc <__aeabi_dcmplt>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d172      	bne.n	8006cea <_dtoa_r+0x62a>
 8006c04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c08:	2000      	movs	r0, #0
 8006c0a:	4911      	ldr	r1, [pc, #68]	@ (8006c50 <_dtoa_r+0x590>)
 8006c0c:	f7f9 faac 	bl	8000168 <__aeabi_dsub>
 8006c10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c14:	f7f9 fed2 	bl	80009bc <__aeabi_dcmplt>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	f040 80b4 	bne.w	8006d86 <_dtoa_r+0x6c6>
 8006c1e:	42a6      	cmp	r6, r4
 8006c20:	f43f af70 	beq.w	8006b04 <_dtoa_r+0x444>
 8006c24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c28:	2200      	movs	r2, #0
 8006c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c54 <_dtoa_r+0x594>)
 8006c2c:	f7f9 fc54 	bl	80004d8 <__aeabi_dmul>
 8006c30:	2200      	movs	r2, #0
 8006c32:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c3a:	4b06      	ldr	r3, [pc, #24]	@ (8006c54 <_dtoa_r+0x594>)
 8006c3c:	f7f9 fc4c 	bl	80004d8 <__aeabi_dmul>
 8006c40:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c44:	e7c4      	b.n	8006bd0 <_dtoa_r+0x510>
 8006c46:	bf00      	nop
 8006c48:	08009640 	.word	0x08009640
 8006c4c:	08009618 	.word	0x08009618
 8006c50:	3ff00000 	.word	0x3ff00000
 8006c54:	40240000 	.word	0x40240000
 8006c58:	401c0000 	.word	0x401c0000
 8006c5c:	40140000 	.word	0x40140000
 8006c60:	3fe00000 	.word	0x3fe00000
 8006c64:	4631      	mov	r1, r6
 8006c66:	4628      	mov	r0, r5
 8006c68:	f7f9 fc36 	bl	80004d8 <__aeabi_dmul>
 8006c6c:	4656      	mov	r6, sl
 8006c6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c72:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006c74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c78:	f7f9 fede 	bl	8000a38 <__aeabi_d2iz>
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	f7f9 fbc1 	bl	8000404 <__aeabi_i2d>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c8a:	f7f9 fa6d 	bl	8000168 <__aeabi_dsub>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	3530      	adds	r5, #48	@ 0x30
 8006c94:	f806 5b01 	strb.w	r5, [r6], #1
 8006c98:	42a6      	cmp	r6, r4
 8006c9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	d124      	bne.n	8006cee <_dtoa_r+0x62e>
 8006ca4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ca8:	4bae      	ldr	r3, [pc, #696]	@ (8006f64 <_dtoa_r+0x8a4>)
 8006caa:	f7f9 fa5f 	bl	800016c <__adddf3>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cb6:	f7f9 fe9f 	bl	80009f8 <__aeabi_dcmpgt>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d163      	bne.n	8006d86 <_dtoa_r+0x6c6>
 8006cbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	49a7      	ldr	r1, [pc, #668]	@ (8006f64 <_dtoa_r+0x8a4>)
 8006cc6:	f7f9 fa4f 	bl	8000168 <__aeabi_dsub>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cd2:	f7f9 fe73 	bl	80009bc <__aeabi_dcmplt>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f43f af14 	beq.w	8006b04 <_dtoa_r+0x444>
 8006cdc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006cde:	1e73      	subs	r3, r6, #1
 8006ce0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ce2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ce6:	2b30      	cmp	r3, #48	@ 0x30
 8006ce8:	d0f8      	beq.n	8006cdc <_dtoa_r+0x61c>
 8006cea:	4647      	mov	r7, r8
 8006cec:	e03b      	b.n	8006d66 <_dtoa_r+0x6a6>
 8006cee:	4b9e      	ldr	r3, [pc, #632]	@ (8006f68 <_dtoa_r+0x8a8>)
 8006cf0:	f7f9 fbf2 	bl	80004d8 <__aeabi_dmul>
 8006cf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006cf8:	e7bc      	b.n	8006c74 <_dtoa_r+0x5b4>
 8006cfa:	4656      	mov	r6, sl
 8006cfc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d04:	4620      	mov	r0, r4
 8006d06:	4629      	mov	r1, r5
 8006d08:	f7f9 fd10 	bl	800072c <__aeabi_ddiv>
 8006d0c:	f7f9 fe94 	bl	8000a38 <__aeabi_d2iz>
 8006d10:	4680      	mov	r8, r0
 8006d12:	f7f9 fb77 	bl	8000404 <__aeabi_i2d>
 8006d16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d1a:	f7f9 fbdd 	bl	80004d8 <__aeabi_dmul>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	4620      	mov	r0, r4
 8006d24:	4629      	mov	r1, r5
 8006d26:	f7f9 fa1f 	bl	8000168 <__aeabi_dsub>
 8006d2a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d2e:	9d08      	ldr	r5, [sp, #32]
 8006d30:	f806 4b01 	strb.w	r4, [r6], #1
 8006d34:	eba6 040a 	sub.w	r4, r6, sl
 8006d38:	42a5      	cmp	r5, r4
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	d133      	bne.n	8006da8 <_dtoa_r+0x6e8>
 8006d40:	f7f9 fa14 	bl	800016c <__adddf3>
 8006d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	f7f9 fe54 	bl	80009f8 <__aeabi_dcmpgt>
 8006d50:	b9c0      	cbnz	r0, 8006d84 <_dtoa_r+0x6c4>
 8006d52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d56:	4620      	mov	r0, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7f9 fe25 	bl	80009a8 <__aeabi_dcmpeq>
 8006d5e:	b110      	cbz	r0, 8006d66 <_dtoa_r+0x6a6>
 8006d60:	f018 0f01 	tst.w	r8, #1
 8006d64:	d10e      	bne.n	8006d84 <_dtoa_r+0x6c4>
 8006d66:	4648      	mov	r0, r9
 8006d68:	9903      	ldr	r1, [sp, #12]
 8006d6a:	f000 fbbb 	bl	80074e4 <_Bfree>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	7033      	strb	r3, [r6, #0]
 8006d72:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006d74:	3701      	adds	r7, #1
 8006d76:	601f      	str	r7, [r3, #0]
 8006d78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 824b 	beq.w	8007216 <_dtoa_r+0xb56>
 8006d80:	601e      	str	r6, [r3, #0]
 8006d82:	e248      	b.n	8007216 <_dtoa_r+0xb56>
 8006d84:	46b8      	mov	r8, r7
 8006d86:	4633      	mov	r3, r6
 8006d88:	461e      	mov	r6, r3
 8006d8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d8e:	2a39      	cmp	r2, #57	@ 0x39
 8006d90:	d106      	bne.n	8006da0 <_dtoa_r+0x6e0>
 8006d92:	459a      	cmp	sl, r3
 8006d94:	d1f8      	bne.n	8006d88 <_dtoa_r+0x6c8>
 8006d96:	2230      	movs	r2, #48	@ 0x30
 8006d98:	f108 0801 	add.w	r8, r8, #1
 8006d9c:	f88a 2000 	strb.w	r2, [sl]
 8006da0:	781a      	ldrb	r2, [r3, #0]
 8006da2:	3201      	adds	r2, #1
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	e7a0      	b.n	8006cea <_dtoa_r+0x62a>
 8006da8:	2200      	movs	r2, #0
 8006daa:	4b6f      	ldr	r3, [pc, #444]	@ (8006f68 <_dtoa_r+0x8a8>)
 8006dac:	f7f9 fb94 	bl	80004d8 <__aeabi_dmul>
 8006db0:	2200      	movs	r2, #0
 8006db2:	2300      	movs	r3, #0
 8006db4:	4604      	mov	r4, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	f7f9 fdf6 	bl	80009a8 <__aeabi_dcmpeq>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d09f      	beq.n	8006d00 <_dtoa_r+0x640>
 8006dc0:	e7d1      	b.n	8006d66 <_dtoa_r+0x6a6>
 8006dc2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006dc4:	2a00      	cmp	r2, #0
 8006dc6:	f000 80ea 	beq.w	8006f9e <_dtoa_r+0x8de>
 8006dca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006dcc:	2a01      	cmp	r2, #1
 8006dce:	f300 80cd 	bgt.w	8006f6c <_dtoa_r+0x8ac>
 8006dd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006dd4:	2a00      	cmp	r2, #0
 8006dd6:	f000 80c1 	beq.w	8006f5c <_dtoa_r+0x89c>
 8006dda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006dde:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006de0:	9e04      	ldr	r6, [sp, #16]
 8006de2:	9a04      	ldr	r2, [sp, #16]
 8006de4:	2101      	movs	r1, #1
 8006de6:	441a      	add	r2, r3
 8006de8:	9204      	str	r2, [sp, #16]
 8006dea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dec:	4648      	mov	r0, r9
 8006dee:	441a      	add	r2, r3
 8006df0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006df2:	f000 fc2b 	bl	800764c <__i2b>
 8006df6:	4605      	mov	r5, r0
 8006df8:	b166      	cbz	r6, 8006e14 <_dtoa_r+0x754>
 8006dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	dd09      	ble.n	8006e14 <_dtoa_r+0x754>
 8006e00:	42b3      	cmp	r3, r6
 8006e02:	bfa8      	it	ge
 8006e04:	4633      	movge	r3, r6
 8006e06:	9a04      	ldr	r2, [sp, #16]
 8006e08:	1af6      	subs	r6, r6, r3
 8006e0a:	1ad2      	subs	r2, r2, r3
 8006e0c:	9204      	str	r2, [sp, #16]
 8006e0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e16:	b30b      	cbz	r3, 8006e5c <_dtoa_r+0x79c>
 8006e18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 80c6 	beq.w	8006fac <_dtoa_r+0x8ec>
 8006e20:	2c00      	cmp	r4, #0
 8006e22:	f000 80c0 	beq.w	8006fa6 <_dtoa_r+0x8e6>
 8006e26:	4629      	mov	r1, r5
 8006e28:	4622      	mov	r2, r4
 8006e2a:	4648      	mov	r0, r9
 8006e2c:	f000 fcc6 	bl	80077bc <__pow5mult>
 8006e30:	9a03      	ldr	r2, [sp, #12]
 8006e32:	4601      	mov	r1, r0
 8006e34:	4605      	mov	r5, r0
 8006e36:	4648      	mov	r0, r9
 8006e38:	f000 fc1e 	bl	8007678 <__multiply>
 8006e3c:	9903      	ldr	r1, [sp, #12]
 8006e3e:	4680      	mov	r8, r0
 8006e40:	4648      	mov	r0, r9
 8006e42:	f000 fb4f 	bl	80074e4 <_Bfree>
 8006e46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e48:	1b1b      	subs	r3, r3, r4
 8006e4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e4c:	f000 80b1 	beq.w	8006fb2 <_dtoa_r+0x8f2>
 8006e50:	4641      	mov	r1, r8
 8006e52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e54:	4648      	mov	r0, r9
 8006e56:	f000 fcb1 	bl	80077bc <__pow5mult>
 8006e5a:	9003      	str	r0, [sp, #12]
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	4648      	mov	r0, r9
 8006e60:	f000 fbf4 	bl	800764c <__i2b>
 8006e64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e66:	4604      	mov	r4, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 81d8 	beq.w	800721e <_dtoa_r+0xb5e>
 8006e6e:	461a      	mov	r2, r3
 8006e70:	4601      	mov	r1, r0
 8006e72:	4648      	mov	r0, r9
 8006e74:	f000 fca2 	bl	80077bc <__pow5mult>
 8006e78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	f300 809f 	bgt.w	8006fc0 <_dtoa_r+0x900>
 8006e82:	9b06      	ldr	r3, [sp, #24]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f040 8097 	bne.w	8006fb8 <_dtoa_r+0x8f8>
 8006e8a:	9b07      	ldr	r3, [sp, #28]
 8006e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f040 8093 	bne.w	8006fbc <_dtoa_r+0x8fc>
 8006e96:	9b07      	ldr	r3, [sp, #28]
 8006e98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e9c:	0d1b      	lsrs	r3, r3, #20
 8006e9e:	051b      	lsls	r3, r3, #20
 8006ea0:	b133      	cbz	r3, 8006eb0 <_dtoa_r+0x7f0>
 8006ea2:	9b04      	ldr	r3, [sp, #16]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	9304      	str	r3, [sp, #16]
 8006ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eaa:	3301      	adds	r3, #1
 8006eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eae:	2301      	movs	r3, #1
 8006eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 81b8 	beq.w	800722a <_dtoa_r+0xb6a>
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ec0:	6918      	ldr	r0, [r3, #16]
 8006ec2:	f000 fb77 	bl	80075b4 <__hi0bits>
 8006ec6:	f1c0 0020 	rsb	r0, r0, #32
 8006eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ecc:	4418      	add	r0, r3
 8006ece:	f010 001f 	ands.w	r0, r0, #31
 8006ed2:	f000 8082 	beq.w	8006fda <_dtoa_r+0x91a>
 8006ed6:	f1c0 0320 	rsb	r3, r0, #32
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	dd73      	ble.n	8006fc6 <_dtoa_r+0x906>
 8006ede:	9b04      	ldr	r3, [sp, #16]
 8006ee0:	f1c0 001c 	rsb	r0, r0, #28
 8006ee4:	4403      	add	r3, r0
 8006ee6:	9304      	str	r3, [sp, #16]
 8006ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eea:	4406      	add	r6, r0
 8006eec:	4403      	add	r3, r0
 8006eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ef0:	9b04      	ldr	r3, [sp, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	dd05      	ble.n	8006f02 <_dtoa_r+0x842>
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	4648      	mov	r0, r9
 8006efa:	9903      	ldr	r1, [sp, #12]
 8006efc:	f000 fcb8 	bl	8007870 <__lshift>
 8006f00:	9003      	str	r0, [sp, #12]
 8006f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	dd05      	ble.n	8006f14 <_dtoa_r+0x854>
 8006f08:	4621      	mov	r1, r4
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4648      	mov	r0, r9
 8006f0e:	f000 fcaf 	bl	8007870 <__lshift>
 8006f12:	4604      	mov	r4, r0
 8006f14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d061      	beq.n	8006fde <_dtoa_r+0x91e>
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	9803      	ldr	r0, [sp, #12]
 8006f1e:	f000 fd13 	bl	8007948 <__mcmp>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	da5b      	bge.n	8006fde <_dtoa_r+0x91e>
 8006f26:	2300      	movs	r3, #0
 8006f28:	220a      	movs	r2, #10
 8006f2a:	4648      	mov	r0, r9
 8006f2c:	9903      	ldr	r1, [sp, #12]
 8006f2e:	f000 fafb 	bl	8007528 <__multadd>
 8006f32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f34:	f107 38ff 	add.w	r8, r7, #4294967295
 8006f38:	9003      	str	r0, [sp, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 8177 	beq.w	800722e <_dtoa_r+0xb6e>
 8006f40:	4629      	mov	r1, r5
 8006f42:	2300      	movs	r3, #0
 8006f44:	220a      	movs	r2, #10
 8006f46:	4648      	mov	r0, r9
 8006f48:	f000 faee 	bl	8007528 <__multadd>
 8006f4c:	f1bb 0f00 	cmp.w	fp, #0
 8006f50:	4605      	mov	r5, r0
 8006f52:	dc6f      	bgt.n	8007034 <_dtoa_r+0x974>
 8006f54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	dc49      	bgt.n	8006fee <_dtoa_r+0x92e>
 8006f5a:	e06b      	b.n	8007034 <_dtoa_r+0x974>
 8006f5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006f62:	e73c      	b.n	8006dde <_dtoa_r+0x71e>
 8006f64:	3fe00000 	.word	0x3fe00000
 8006f68:	40240000 	.word	0x40240000
 8006f6c:	9b08      	ldr	r3, [sp, #32]
 8006f6e:	1e5c      	subs	r4, r3, #1
 8006f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f72:	42a3      	cmp	r3, r4
 8006f74:	db09      	blt.n	8006f8a <_dtoa_r+0x8ca>
 8006f76:	1b1c      	subs	r4, r3, r4
 8006f78:	9b08      	ldr	r3, [sp, #32]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f6bf af30 	bge.w	8006de0 <_dtoa_r+0x720>
 8006f80:	9b04      	ldr	r3, [sp, #16]
 8006f82:	9a08      	ldr	r2, [sp, #32]
 8006f84:	1a9e      	subs	r6, r3, r2
 8006f86:	2300      	movs	r3, #0
 8006f88:	e72b      	b.n	8006de2 <_dtoa_r+0x722>
 8006f8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f8e:	1ae3      	subs	r3, r4, r3
 8006f90:	441a      	add	r2, r3
 8006f92:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f94:	9e04      	ldr	r6, [sp, #16]
 8006f96:	2400      	movs	r4, #0
 8006f98:	9b08      	ldr	r3, [sp, #32]
 8006f9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f9c:	e721      	b.n	8006de2 <_dtoa_r+0x722>
 8006f9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006fa0:	9e04      	ldr	r6, [sp, #16]
 8006fa2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006fa4:	e728      	b.n	8006df8 <_dtoa_r+0x738>
 8006fa6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006faa:	e751      	b.n	8006e50 <_dtoa_r+0x790>
 8006fac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fae:	9903      	ldr	r1, [sp, #12]
 8006fb0:	e750      	b.n	8006e54 <_dtoa_r+0x794>
 8006fb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fb6:	e751      	b.n	8006e5c <_dtoa_r+0x79c>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	e779      	b.n	8006eb0 <_dtoa_r+0x7f0>
 8006fbc:	9b06      	ldr	r3, [sp, #24]
 8006fbe:	e777      	b.n	8006eb0 <_dtoa_r+0x7f0>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fc4:	e779      	b.n	8006eba <_dtoa_r+0x7fa>
 8006fc6:	d093      	beq.n	8006ef0 <_dtoa_r+0x830>
 8006fc8:	9a04      	ldr	r2, [sp, #16]
 8006fca:	331c      	adds	r3, #28
 8006fcc:	441a      	add	r2, r3
 8006fce:	9204      	str	r2, [sp, #16]
 8006fd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fd2:	441e      	add	r6, r3
 8006fd4:	441a      	add	r2, r3
 8006fd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fd8:	e78a      	b.n	8006ef0 <_dtoa_r+0x830>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	e7f4      	b.n	8006fc8 <_dtoa_r+0x908>
 8006fde:	9b08      	ldr	r3, [sp, #32]
 8006fe0:	46b8      	mov	r8, r7
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dc20      	bgt.n	8007028 <_dtoa_r+0x968>
 8006fe6:	469b      	mov	fp, r3
 8006fe8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	dd1e      	ble.n	800702c <_dtoa_r+0x96c>
 8006fee:	f1bb 0f00 	cmp.w	fp, #0
 8006ff2:	f47f adb1 	bne.w	8006b58 <_dtoa_r+0x498>
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	465b      	mov	r3, fp
 8006ffa:	2205      	movs	r2, #5
 8006ffc:	4648      	mov	r0, r9
 8006ffe:	f000 fa93 	bl	8007528 <__multadd>
 8007002:	4601      	mov	r1, r0
 8007004:	4604      	mov	r4, r0
 8007006:	9803      	ldr	r0, [sp, #12]
 8007008:	f000 fc9e 	bl	8007948 <__mcmp>
 800700c:	2800      	cmp	r0, #0
 800700e:	f77f ada3 	ble.w	8006b58 <_dtoa_r+0x498>
 8007012:	4656      	mov	r6, sl
 8007014:	2331      	movs	r3, #49	@ 0x31
 8007016:	f108 0801 	add.w	r8, r8, #1
 800701a:	f806 3b01 	strb.w	r3, [r6], #1
 800701e:	e59f      	b.n	8006b60 <_dtoa_r+0x4a0>
 8007020:	46b8      	mov	r8, r7
 8007022:	9c08      	ldr	r4, [sp, #32]
 8007024:	4625      	mov	r5, r4
 8007026:	e7f4      	b.n	8007012 <_dtoa_r+0x952>
 8007028:	f8dd b020 	ldr.w	fp, [sp, #32]
 800702c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 8101 	beq.w	8007236 <_dtoa_r+0xb76>
 8007034:	2e00      	cmp	r6, #0
 8007036:	dd05      	ble.n	8007044 <_dtoa_r+0x984>
 8007038:	4629      	mov	r1, r5
 800703a:	4632      	mov	r2, r6
 800703c:	4648      	mov	r0, r9
 800703e:	f000 fc17 	bl	8007870 <__lshift>
 8007042:	4605      	mov	r5, r0
 8007044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007046:	2b00      	cmp	r3, #0
 8007048:	d05c      	beq.n	8007104 <_dtoa_r+0xa44>
 800704a:	4648      	mov	r0, r9
 800704c:	6869      	ldr	r1, [r5, #4]
 800704e:	f000 fa09 	bl	8007464 <_Balloc>
 8007052:	4606      	mov	r6, r0
 8007054:	b928      	cbnz	r0, 8007062 <_dtoa_r+0x9a2>
 8007056:	4602      	mov	r2, r0
 8007058:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800705c:	4b80      	ldr	r3, [pc, #512]	@ (8007260 <_dtoa_r+0xba0>)
 800705e:	f7ff bb43 	b.w	80066e8 <_dtoa_r+0x28>
 8007062:	692a      	ldr	r2, [r5, #16]
 8007064:	f105 010c 	add.w	r1, r5, #12
 8007068:	3202      	adds	r2, #2
 800706a:	0092      	lsls	r2, r2, #2
 800706c:	300c      	adds	r0, #12
 800706e:	f7ff fa90 	bl	8006592 <memcpy>
 8007072:	2201      	movs	r2, #1
 8007074:	4631      	mov	r1, r6
 8007076:	4648      	mov	r0, r9
 8007078:	f000 fbfa 	bl	8007870 <__lshift>
 800707c:	462f      	mov	r7, r5
 800707e:	4605      	mov	r5, r0
 8007080:	f10a 0301 	add.w	r3, sl, #1
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	eb0a 030b 	add.w	r3, sl, fp
 800708a:	930a      	str	r3, [sp, #40]	@ 0x28
 800708c:	9b06      	ldr	r3, [sp, #24]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	9309      	str	r3, [sp, #36]	@ 0x24
 8007094:	9b04      	ldr	r3, [sp, #16]
 8007096:	4621      	mov	r1, r4
 8007098:	9803      	ldr	r0, [sp, #12]
 800709a:	f103 3bff 	add.w	fp, r3, #4294967295
 800709e:	f7ff fa86 	bl	80065ae <quorem>
 80070a2:	4603      	mov	r3, r0
 80070a4:	4639      	mov	r1, r7
 80070a6:	3330      	adds	r3, #48	@ 0x30
 80070a8:	9006      	str	r0, [sp, #24]
 80070aa:	9803      	ldr	r0, [sp, #12]
 80070ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070ae:	f000 fc4b 	bl	8007948 <__mcmp>
 80070b2:	462a      	mov	r2, r5
 80070b4:	9008      	str	r0, [sp, #32]
 80070b6:	4621      	mov	r1, r4
 80070b8:	4648      	mov	r0, r9
 80070ba:	f000 fc61 	bl	8007980 <__mdiff>
 80070be:	68c2      	ldr	r2, [r0, #12]
 80070c0:	4606      	mov	r6, r0
 80070c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070c4:	bb02      	cbnz	r2, 8007108 <_dtoa_r+0xa48>
 80070c6:	4601      	mov	r1, r0
 80070c8:	9803      	ldr	r0, [sp, #12]
 80070ca:	f000 fc3d 	bl	8007948 <__mcmp>
 80070ce:	4602      	mov	r2, r0
 80070d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070d2:	4631      	mov	r1, r6
 80070d4:	4648      	mov	r0, r9
 80070d6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80070da:	f000 fa03 	bl	80074e4 <_Bfree>
 80070de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80070e2:	9e04      	ldr	r6, [sp, #16]
 80070e4:	ea42 0103 	orr.w	r1, r2, r3
 80070e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ea:	4319      	orrs	r1, r3
 80070ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070ee:	d10d      	bne.n	800710c <_dtoa_r+0xa4c>
 80070f0:	2b39      	cmp	r3, #57	@ 0x39
 80070f2:	d027      	beq.n	8007144 <_dtoa_r+0xa84>
 80070f4:	9a08      	ldr	r2, [sp, #32]
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	dd01      	ble.n	80070fe <_dtoa_r+0xa3e>
 80070fa:	9b06      	ldr	r3, [sp, #24]
 80070fc:	3331      	adds	r3, #49	@ 0x31
 80070fe:	f88b 3000 	strb.w	r3, [fp]
 8007102:	e52e      	b.n	8006b62 <_dtoa_r+0x4a2>
 8007104:	4628      	mov	r0, r5
 8007106:	e7b9      	b.n	800707c <_dtoa_r+0x9bc>
 8007108:	2201      	movs	r2, #1
 800710a:	e7e2      	b.n	80070d2 <_dtoa_r+0xa12>
 800710c:	9908      	ldr	r1, [sp, #32]
 800710e:	2900      	cmp	r1, #0
 8007110:	db04      	blt.n	800711c <_dtoa_r+0xa5c>
 8007112:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007114:	4301      	orrs	r1, r0
 8007116:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007118:	4301      	orrs	r1, r0
 800711a:	d120      	bne.n	800715e <_dtoa_r+0xa9e>
 800711c:	2a00      	cmp	r2, #0
 800711e:	ddee      	ble.n	80070fe <_dtoa_r+0xa3e>
 8007120:	2201      	movs	r2, #1
 8007122:	9903      	ldr	r1, [sp, #12]
 8007124:	4648      	mov	r0, r9
 8007126:	9304      	str	r3, [sp, #16]
 8007128:	f000 fba2 	bl	8007870 <__lshift>
 800712c:	4621      	mov	r1, r4
 800712e:	9003      	str	r0, [sp, #12]
 8007130:	f000 fc0a 	bl	8007948 <__mcmp>
 8007134:	2800      	cmp	r0, #0
 8007136:	9b04      	ldr	r3, [sp, #16]
 8007138:	dc02      	bgt.n	8007140 <_dtoa_r+0xa80>
 800713a:	d1e0      	bne.n	80070fe <_dtoa_r+0xa3e>
 800713c:	07da      	lsls	r2, r3, #31
 800713e:	d5de      	bpl.n	80070fe <_dtoa_r+0xa3e>
 8007140:	2b39      	cmp	r3, #57	@ 0x39
 8007142:	d1da      	bne.n	80070fa <_dtoa_r+0xa3a>
 8007144:	2339      	movs	r3, #57	@ 0x39
 8007146:	f88b 3000 	strb.w	r3, [fp]
 800714a:	4633      	mov	r3, r6
 800714c:	461e      	mov	r6, r3
 800714e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007152:	3b01      	subs	r3, #1
 8007154:	2a39      	cmp	r2, #57	@ 0x39
 8007156:	d04e      	beq.n	80071f6 <_dtoa_r+0xb36>
 8007158:	3201      	adds	r2, #1
 800715a:	701a      	strb	r2, [r3, #0]
 800715c:	e501      	b.n	8006b62 <_dtoa_r+0x4a2>
 800715e:	2a00      	cmp	r2, #0
 8007160:	dd03      	ble.n	800716a <_dtoa_r+0xaaa>
 8007162:	2b39      	cmp	r3, #57	@ 0x39
 8007164:	d0ee      	beq.n	8007144 <_dtoa_r+0xa84>
 8007166:	3301      	adds	r3, #1
 8007168:	e7c9      	b.n	80070fe <_dtoa_r+0xa3e>
 800716a:	9a04      	ldr	r2, [sp, #16]
 800716c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800716e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007172:	428a      	cmp	r2, r1
 8007174:	d028      	beq.n	80071c8 <_dtoa_r+0xb08>
 8007176:	2300      	movs	r3, #0
 8007178:	220a      	movs	r2, #10
 800717a:	9903      	ldr	r1, [sp, #12]
 800717c:	4648      	mov	r0, r9
 800717e:	f000 f9d3 	bl	8007528 <__multadd>
 8007182:	42af      	cmp	r7, r5
 8007184:	9003      	str	r0, [sp, #12]
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	f04f 020a 	mov.w	r2, #10
 800718e:	4639      	mov	r1, r7
 8007190:	4648      	mov	r0, r9
 8007192:	d107      	bne.n	80071a4 <_dtoa_r+0xae4>
 8007194:	f000 f9c8 	bl	8007528 <__multadd>
 8007198:	4607      	mov	r7, r0
 800719a:	4605      	mov	r5, r0
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	3301      	adds	r3, #1
 80071a0:	9304      	str	r3, [sp, #16]
 80071a2:	e777      	b.n	8007094 <_dtoa_r+0x9d4>
 80071a4:	f000 f9c0 	bl	8007528 <__multadd>
 80071a8:	4629      	mov	r1, r5
 80071aa:	4607      	mov	r7, r0
 80071ac:	2300      	movs	r3, #0
 80071ae:	220a      	movs	r2, #10
 80071b0:	4648      	mov	r0, r9
 80071b2:	f000 f9b9 	bl	8007528 <__multadd>
 80071b6:	4605      	mov	r5, r0
 80071b8:	e7f0      	b.n	800719c <_dtoa_r+0xadc>
 80071ba:	f1bb 0f00 	cmp.w	fp, #0
 80071be:	bfcc      	ite	gt
 80071c0:	465e      	movgt	r6, fp
 80071c2:	2601      	movle	r6, #1
 80071c4:	2700      	movs	r7, #0
 80071c6:	4456      	add	r6, sl
 80071c8:	2201      	movs	r2, #1
 80071ca:	9903      	ldr	r1, [sp, #12]
 80071cc:	4648      	mov	r0, r9
 80071ce:	9304      	str	r3, [sp, #16]
 80071d0:	f000 fb4e 	bl	8007870 <__lshift>
 80071d4:	4621      	mov	r1, r4
 80071d6:	9003      	str	r0, [sp, #12]
 80071d8:	f000 fbb6 	bl	8007948 <__mcmp>
 80071dc:	2800      	cmp	r0, #0
 80071de:	dcb4      	bgt.n	800714a <_dtoa_r+0xa8a>
 80071e0:	d102      	bne.n	80071e8 <_dtoa_r+0xb28>
 80071e2:	9b04      	ldr	r3, [sp, #16]
 80071e4:	07db      	lsls	r3, r3, #31
 80071e6:	d4b0      	bmi.n	800714a <_dtoa_r+0xa8a>
 80071e8:	4633      	mov	r3, r6
 80071ea:	461e      	mov	r6, r3
 80071ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071f0:	2a30      	cmp	r2, #48	@ 0x30
 80071f2:	d0fa      	beq.n	80071ea <_dtoa_r+0xb2a>
 80071f4:	e4b5      	b.n	8006b62 <_dtoa_r+0x4a2>
 80071f6:	459a      	cmp	sl, r3
 80071f8:	d1a8      	bne.n	800714c <_dtoa_r+0xa8c>
 80071fa:	2331      	movs	r3, #49	@ 0x31
 80071fc:	f108 0801 	add.w	r8, r8, #1
 8007200:	f88a 3000 	strb.w	r3, [sl]
 8007204:	e4ad      	b.n	8006b62 <_dtoa_r+0x4a2>
 8007206:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007208:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007264 <_dtoa_r+0xba4>
 800720c:	b11b      	cbz	r3, 8007216 <_dtoa_r+0xb56>
 800720e:	f10a 0308 	add.w	r3, sl, #8
 8007212:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	4650      	mov	r0, sl
 8007218:	b017      	add	sp, #92	@ 0x5c
 800721a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007220:	2b01      	cmp	r3, #1
 8007222:	f77f ae2e 	ble.w	8006e82 <_dtoa_r+0x7c2>
 8007226:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007228:	930a      	str	r3, [sp, #40]	@ 0x28
 800722a:	2001      	movs	r0, #1
 800722c:	e64d      	b.n	8006eca <_dtoa_r+0x80a>
 800722e:	f1bb 0f00 	cmp.w	fp, #0
 8007232:	f77f aed9 	ble.w	8006fe8 <_dtoa_r+0x928>
 8007236:	4656      	mov	r6, sl
 8007238:	4621      	mov	r1, r4
 800723a:	9803      	ldr	r0, [sp, #12]
 800723c:	f7ff f9b7 	bl	80065ae <quorem>
 8007240:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007244:	f806 3b01 	strb.w	r3, [r6], #1
 8007248:	eba6 020a 	sub.w	r2, r6, sl
 800724c:	4593      	cmp	fp, r2
 800724e:	ddb4      	ble.n	80071ba <_dtoa_r+0xafa>
 8007250:	2300      	movs	r3, #0
 8007252:	220a      	movs	r2, #10
 8007254:	4648      	mov	r0, r9
 8007256:	9903      	ldr	r1, [sp, #12]
 8007258:	f000 f966 	bl	8007528 <__multadd>
 800725c:	9003      	str	r0, [sp, #12]
 800725e:	e7eb      	b.n	8007238 <_dtoa_r+0xb78>
 8007260:	0800954a 	.word	0x0800954a
 8007264:	080094ce 	.word	0x080094ce

08007268 <_free_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4605      	mov	r5, r0
 800726c:	2900      	cmp	r1, #0
 800726e:	d040      	beq.n	80072f2 <_free_r+0x8a>
 8007270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007274:	1f0c      	subs	r4, r1, #4
 8007276:	2b00      	cmp	r3, #0
 8007278:	bfb8      	it	lt
 800727a:	18e4      	addlt	r4, r4, r3
 800727c:	f000 f8e6 	bl	800744c <__malloc_lock>
 8007280:	4a1c      	ldr	r2, [pc, #112]	@ (80072f4 <_free_r+0x8c>)
 8007282:	6813      	ldr	r3, [r2, #0]
 8007284:	b933      	cbnz	r3, 8007294 <_free_r+0x2c>
 8007286:	6063      	str	r3, [r4, #4]
 8007288:	6014      	str	r4, [r2, #0]
 800728a:	4628      	mov	r0, r5
 800728c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007290:	f000 b8e2 	b.w	8007458 <__malloc_unlock>
 8007294:	42a3      	cmp	r3, r4
 8007296:	d908      	bls.n	80072aa <_free_r+0x42>
 8007298:	6820      	ldr	r0, [r4, #0]
 800729a:	1821      	adds	r1, r4, r0
 800729c:	428b      	cmp	r3, r1
 800729e:	bf01      	itttt	eq
 80072a0:	6819      	ldreq	r1, [r3, #0]
 80072a2:	685b      	ldreq	r3, [r3, #4]
 80072a4:	1809      	addeq	r1, r1, r0
 80072a6:	6021      	streq	r1, [r4, #0]
 80072a8:	e7ed      	b.n	8007286 <_free_r+0x1e>
 80072aa:	461a      	mov	r2, r3
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	b10b      	cbz	r3, 80072b4 <_free_r+0x4c>
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	d9fa      	bls.n	80072aa <_free_r+0x42>
 80072b4:	6811      	ldr	r1, [r2, #0]
 80072b6:	1850      	adds	r0, r2, r1
 80072b8:	42a0      	cmp	r0, r4
 80072ba:	d10b      	bne.n	80072d4 <_free_r+0x6c>
 80072bc:	6820      	ldr	r0, [r4, #0]
 80072be:	4401      	add	r1, r0
 80072c0:	1850      	adds	r0, r2, r1
 80072c2:	4283      	cmp	r3, r0
 80072c4:	6011      	str	r1, [r2, #0]
 80072c6:	d1e0      	bne.n	800728a <_free_r+0x22>
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	4408      	add	r0, r1
 80072ce:	6010      	str	r0, [r2, #0]
 80072d0:	6053      	str	r3, [r2, #4]
 80072d2:	e7da      	b.n	800728a <_free_r+0x22>
 80072d4:	d902      	bls.n	80072dc <_free_r+0x74>
 80072d6:	230c      	movs	r3, #12
 80072d8:	602b      	str	r3, [r5, #0]
 80072da:	e7d6      	b.n	800728a <_free_r+0x22>
 80072dc:	6820      	ldr	r0, [r4, #0]
 80072de:	1821      	adds	r1, r4, r0
 80072e0:	428b      	cmp	r3, r1
 80072e2:	bf01      	itttt	eq
 80072e4:	6819      	ldreq	r1, [r3, #0]
 80072e6:	685b      	ldreq	r3, [r3, #4]
 80072e8:	1809      	addeq	r1, r1, r0
 80072ea:	6021      	streq	r1, [r4, #0]
 80072ec:	6063      	str	r3, [r4, #4]
 80072ee:	6054      	str	r4, [r2, #4]
 80072f0:	e7cb      	b.n	800728a <_free_r+0x22>
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	20000504 	.word	0x20000504

080072f8 <malloc>:
 80072f8:	4b02      	ldr	r3, [pc, #8]	@ (8007304 <malloc+0xc>)
 80072fa:	4601      	mov	r1, r0
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	f000 b825 	b.w	800734c <_malloc_r>
 8007302:	bf00      	nop
 8007304:	20000018 	.word	0x20000018

08007308 <sbrk_aligned>:
 8007308:	b570      	push	{r4, r5, r6, lr}
 800730a:	4e0f      	ldr	r6, [pc, #60]	@ (8007348 <sbrk_aligned+0x40>)
 800730c:	460c      	mov	r4, r1
 800730e:	6831      	ldr	r1, [r6, #0]
 8007310:	4605      	mov	r5, r0
 8007312:	b911      	cbnz	r1, 800731a <sbrk_aligned+0x12>
 8007314:	f000 fe3a 	bl	8007f8c <_sbrk_r>
 8007318:	6030      	str	r0, [r6, #0]
 800731a:	4621      	mov	r1, r4
 800731c:	4628      	mov	r0, r5
 800731e:	f000 fe35 	bl	8007f8c <_sbrk_r>
 8007322:	1c43      	adds	r3, r0, #1
 8007324:	d103      	bne.n	800732e <sbrk_aligned+0x26>
 8007326:	f04f 34ff 	mov.w	r4, #4294967295
 800732a:	4620      	mov	r0, r4
 800732c:	bd70      	pop	{r4, r5, r6, pc}
 800732e:	1cc4      	adds	r4, r0, #3
 8007330:	f024 0403 	bic.w	r4, r4, #3
 8007334:	42a0      	cmp	r0, r4
 8007336:	d0f8      	beq.n	800732a <sbrk_aligned+0x22>
 8007338:	1a21      	subs	r1, r4, r0
 800733a:	4628      	mov	r0, r5
 800733c:	f000 fe26 	bl	8007f8c <_sbrk_r>
 8007340:	3001      	adds	r0, #1
 8007342:	d1f2      	bne.n	800732a <sbrk_aligned+0x22>
 8007344:	e7ef      	b.n	8007326 <sbrk_aligned+0x1e>
 8007346:	bf00      	nop
 8007348:	20000500 	.word	0x20000500

0800734c <_malloc_r>:
 800734c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007350:	1ccd      	adds	r5, r1, #3
 8007352:	f025 0503 	bic.w	r5, r5, #3
 8007356:	3508      	adds	r5, #8
 8007358:	2d0c      	cmp	r5, #12
 800735a:	bf38      	it	cc
 800735c:	250c      	movcc	r5, #12
 800735e:	2d00      	cmp	r5, #0
 8007360:	4606      	mov	r6, r0
 8007362:	db01      	blt.n	8007368 <_malloc_r+0x1c>
 8007364:	42a9      	cmp	r1, r5
 8007366:	d904      	bls.n	8007372 <_malloc_r+0x26>
 8007368:	230c      	movs	r3, #12
 800736a:	6033      	str	r3, [r6, #0]
 800736c:	2000      	movs	r0, #0
 800736e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007372:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007448 <_malloc_r+0xfc>
 8007376:	f000 f869 	bl	800744c <__malloc_lock>
 800737a:	f8d8 3000 	ldr.w	r3, [r8]
 800737e:	461c      	mov	r4, r3
 8007380:	bb44      	cbnz	r4, 80073d4 <_malloc_r+0x88>
 8007382:	4629      	mov	r1, r5
 8007384:	4630      	mov	r0, r6
 8007386:	f7ff ffbf 	bl	8007308 <sbrk_aligned>
 800738a:	1c43      	adds	r3, r0, #1
 800738c:	4604      	mov	r4, r0
 800738e:	d158      	bne.n	8007442 <_malloc_r+0xf6>
 8007390:	f8d8 4000 	ldr.w	r4, [r8]
 8007394:	4627      	mov	r7, r4
 8007396:	2f00      	cmp	r7, #0
 8007398:	d143      	bne.n	8007422 <_malloc_r+0xd6>
 800739a:	2c00      	cmp	r4, #0
 800739c:	d04b      	beq.n	8007436 <_malloc_r+0xea>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	4639      	mov	r1, r7
 80073a2:	4630      	mov	r0, r6
 80073a4:	eb04 0903 	add.w	r9, r4, r3
 80073a8:	f000 fdf0 	bl	8007f8c <_sbrk_r>
 80073ac:	4581      	cmp	r9, r0
 80073ae:	d142      	bne.n	8007436 <_malloc_r+0xea>
 80073b0:	6821      	ldr	r1, [r4, #0]
 80073b2:	4630      	mov	r0, r6
 80073b4:	1a6d      	subs	r5, r5, r1
 80073b6:	4629      	mov	r1, r5
 80073b8:	f7ff ffa6 	bl	8007308 <sbrk_aligned>
 80073bc:	3001      	adds	r0, #1
 80073be:	d03a      	beq.n	8007436 <_malloc_r+0xea>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	442b      	add	r3, r5
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	f8d8 3000 	ldr.w	r3, [r8]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	bb62      	cbnz	r2, 8007428 <_malloc_r+0xdc>
 80073ce:	f8c8 7000 	str.w	r7, [r8]
 80073d2:	e00f      	b.n	80073f4 <_malloc_r+0xa8>
 80073d4:	6822      	ldr	r2, [r4, #0]
 80073d6:	1b52      	subs	r2, r2, r5
 80073d8:	d420      	bmi.n	800741c <_malloc_r+0xd0>
 80073da:	2a0b      	cmp	r2, #11
 80073dc:	d917      	bls.n	800740e <_malloc_r+0xc2>
 80073de:	1961      	adds	r1, r4, r5
 80073e0:	42a3      	cmp	r3, r4
 80073e2:	6025      	str	r5, [r4, #0]
 80073e4:	bf18      	it	ne
 80073e6:	6059      	strne	r1, [r3, #4]
 80073e8:	6863      	ldr	r3, [r4, #4]
 80073ea:	bf08      	it	eq
 80073ec:	f8c8 1000 	streq.w	r1, [r8]
 80073f0:	5162      	str	r2, [r4, r5]
 80073f2:	604b      	str	r3, [r1, #4]
 80073f4:	4630      	mov	r0, r6
 80073f6:	f000 f82f 	bl	8007458 <__malloc_unlock>
 80073fa:	f104 000b 	add.w	r0, r4, #11
 80073fe:	1d23      	adds	r3, r4, #4
 8007400:	f020 0007 	bic.w	r0, r0, #7
 8007404:	1ac2      	subs	r2, r0, r3
 8007406:	bf1c      	itt	ne
 8007408:	1a1b      	subne	r3, r3, r0
 800740a:	50a3      	strne	r3, [r4, r2]
 800740c:	e7af      	b.n	800736e <_malloc_r+0x22>
 800740e:	6862      	ldr	r2, [r4, #4]
 8007410:	42a3      	cmp	r3, r4
 8007412:	bf0c      	ite	eq
 8007414:	f8c8 2000 	streq.w	r2, [r8]
 8007418:	605a      	strne	r2, [r3, #4]
 800741a:	e7eb      	b.n	80073f4 <_malloc_r+0xa8>
 800741c:	4623      	mov	r3, r4
 800741e:	6864      	ldr	r4, [r4, #4]
 8007420:	e7ae      	b.n	8007380 <_malloc_r+0x34>
 8007422:	463c      	mov	r4, r7
 8007424:	687f      	ldr	r7, [r7, #4]
 8007426:	e7b6      	b.n	8007396 <_malloc_r+0x4a>
 8007428:	461a      	mov	r2, r3
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	42a3      	cmp	r3, r4
 800742e:	d1fb      	bne.n	8007428 <_malloc_r+0xdc>
 8007430:	2300      	movs	r3, #0
 8007432:	6053      	str	r3, [r2, #4]
 8007434:	e7de      	b.n	80073f4 <_malloc_r+0xa8>
 8007436:	230c      	movs	r3, #12
 8007438:	4630      	mov	r0, r6
 800743a:	6033      	str	r3, [r6, #0]
 800743c:	f000 f80c 	bl	8007458 <__malloc_unlock>
 8007440:	e794      	b.n	800736c <_malloc_r+0x20>
 8007442:	6005      	str	r5, [r0, #0]
 8007444:	e7d6      	b.n	80073f4 <_malloc_r+0xa8>
 8007446:	bf00      	nop
 8007448:	20000504 	.word	0x20000504

0800744c <__malloc_lock>:
 800744c:	4801      	ldr	r0, [pc, #4]	@ (8007454 <__malloc_lock+0x8>)
 800744e:	f7ff b890 	b.w	8006572 <__retarget_lock_acquire_recursive>
 8007452:	bf00      	nop
 8007454:	200004fc 	.word	0x200004fc

08007458 <__malloc_unlock>:
 8007458:	4801      	ldr	r0, [pc, #4]	@ (8007460 <__malloc_unlock+0x8>)
 800745a:	f7ff b88b 	b.w	8006574 <__retarget_lock_release_recursive>
 800745e:	bf00      	nop
 8007460:	200004fc 	.word	0x200004fc

08007464 <_Balloc>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	69c6      	ldr	r6, [r0, #28]
 8007468:	4604      	mov	r4, r0
 800746a:	460d      	mov	r5, r1
 800746c:	b976      	cbnz	r6, 800748c <_Balloc+0x28>
 800746e:	2010      	movs	r0, #16
 8007470:	f7ff ff42 	bl	80072f8 <malloc>
 8007474:	4602      	mov	r2, r0
 8007476:	61e0      	str	r0, [r4, #28]
 8007478:	b920      	cbnz	r0, 8007484 <_Balloc+0x20>
 800747a:	216b      	movs	r1, #107	@ 0x6b
 800747c:	4b17      	ldr	r3, [pc, #92]	@ (80074dc <_Balloc+0x78>)
 800747e:	4818      	ldr	r0, [pc, #96]	@ (80074e0 <_Balloc+0x7c>)
 8007480:	f000 fd94 	bl	8007fac <__assert_func>
 8007484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007488:	6006      	str	r6, [r0, #0]
 800748a:	60c6      	str	r6, [r0, #12]
 800748c:	69e6      	ldr	r6, [r4, #28]
 800748e:	68f3      	ldr	r3, [r6, #12]
 8007490:	b183      	cbz	r3, 80074b4 <_Balloc+0x50>
 8007492:	69e3      	ldr	r3, [r4, #28]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800749a:	b9b8      	cbnz	r0, 80074cc <_Balloc+0x68>
 800749c:	2101      	movs	r1, #1
 800749e:	fa01 f605 	lsl.w	r6, r1, r5
 80074a2:	1d72      	adds	r2, r6, #5
 80074a4:	4620      	mov	r0, r4
 80074a6:	0092      	lsls	r2, r2, #2
 80074a8:	f000 fd9e 	bl	8007fe8 <_calloc_r>
 80074ac:	b160      	cbz	r0, 80074c8 <_Balloc+0x64>
 80074ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074b2:	e00e      	b.n	80074d2 <_Balloc+0x6e>
 80074b4:	2221      	movs	r2, #33	@ 0x21
 80074b6:	2104      	movs	r1, #4
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 fd95 	bl	8007fe8 <_calloc_r>
 80074be:	69e3      	ldr	r3, [r4, #28]
 80074c0:	60f0      	str	r0, [r6, #12]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e4      	bne.n	8007492 <_Balloc+0x2e>
 80074c8:	2000      	movs	r0, #0
 80074ca:	bd70      	pop	{r4, r5, r6, pc}
 80074cc:	6802      	ldr	r2, [r0, #0]
 80074ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074d2:	2300      	movs	r3, #0
 80074d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80074d8:	e7f7      	b.n	80074ca <_Balloc+0x66>
 80074da:	bf00      	nop
 80074dc:	080094db 	.word	0x080094db
 80074e0:	0800955b 	.word	0x0800955b

080074e4 <_Bfree>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	69c6      	ldr	r6, [r0, #28]
 80074e8:	4605      	mov	r5, r0
 80074ea:	460c      	mov	r4, r1
 80074ec:	b976      	cbnz	r6, 800750c <_Bfree+0x28>
 80074ee:	2010      	movs	r0, #16
 80074f0:	f7ff ff02 	bl	80072f8 <malloc>
 80074f4:	4602      	mov	r2, r0
 80074f6:	61e8      	str	r0, [r5, #28]
 80074f8:	b920      	cbnz	r0, 8007504 <_Bfree+0x20>
 80074fa:	218f      	movs	r1, #143	@ 0x8f
 80074fc:	4b08      	ldr	r3, [pc, #32]	@ (8007520 <_Bfree+0x3c>)
 80074fe:	4809      	ldr	r0, [pc, #36]	@ (8007524 <_Bfree+0x40>)
 8007500:	f000 fd54 	bl	8007fac <__assert_func>
 8007504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007508:	6006      	str	r6, [r0, #0]
 800750a:	60c6      	str	r6, [r0, #12]
 800750c:	b13c      	cbz	r4, 800751e <_Bfree+0x3a>
 800750e:	69eb      	ldr	r3, [r5, #28]
 8007510:	6862      	ldr	r2, [r4, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007518:	6021      	str	r1, [r4, #0]
 800751a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	080094db 	.word	0x080094db
 8007524:	0800955b 	.word	0x0800955b

08007528 <__multadd>:
 8007528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752c:	4607      	mov	r7, r0
 800752e:	460c      	mov	r4, r1
 8007530:	461e      	mov	r6, r3
 8007532:	2000      	movs	r0, #0
 8007534:	690d      	ldr	r5, [r1, #16]
 8007536:	f101 0c14 	add.w	ip, r1, #20
 800753a:	f8dc 3000 	ldr.w	r3, [ip]
 800753e:	3001      	adds	r0, #1
 8007540:	b299      	uxth	r1, r3
 8007542:	fb02 6101 	mla	r1, r2, r1, r6
 8007546:	0c1e      	lsrs	r6, r3, #16
 8007548:	0c0b      	lsrs	r3, r1, #16
 800754a:	fb02 3306 	mla	r3, r2, r6, r3
 800754e:	b289      	uxth	r1, r1
 8007550:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007554:	4285      	cmp	r5, r0
 8007556:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800755a:	f84c 1b04 	str.w	r1, [ip], #4
 800755e:	dcec      	bgt.n	800753a <__multadd+0x12>
 8007560:	b30e      	cbz	r6, 80075a6 <__multadd+0x7e>
 8007562:	68a3      	ldr	r3, [r4, #8]
 8007564:	42ab      	cmp	r3, r5
 8007566:	dc19      	bgt.n	800759c <__multadd+0x74>
 8007568:	6861      	ldr	r1, [r4, #4]
 800756a:	4638      	mov	r0, r7
 800756c:	3101      	adds	r1, #1
 800756e:	f7ff ff79 	bl	8007464 <_Balloc>
 8007572:	4680      	mov	r8, r0
 8007574:	b928      	cbnz	r0, 8007582 <__multadd+0x5a>
 8007576:	4602      	mov	r2, r0
 8007578:	21ba      	movs	r1, #186	@ 0xba
 800757a:	4b0c      	ldr	r3, [pc, #48]	@ (80075ac <__multadd+0x84>)
 800757c:	480c      	ldr	r0, [pc, #48]	@ (80075b0 <__multadd+0x88>)
 800757e:	f000 fd15 	bl	8007fac <__assert_func>
 8007582:	6922      	ldr	r2, [r4, #16]
 8007584:	f104 010c 	add.w	r1, r4, #12
 8007588:	3202      	adds	r2, #2
 800758a:	0092      	lsls	r2, r2, #2
 800758c:	300c      	adds	r0, #12
 800758e:	f7ff f800 	bl	8006592 <memcpy>
 8007592:	4621      	mov	r1, r4
 8007594:	4638      	mov	r0, r7
 8007596:	f7ff ffa5 	bl	80074e4 <_Bfree>
 800759a:	4644      	mov	r4, r8
 800759c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075a0:	3501      	adds	r5, #1
 80075a2:	615e      	str	r6, [r3, #20]
 80075a4:	6125      	str	r5, [r4, #16]
 80075a6:	4620      	mov	r0, r4
 80075a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ac:	0800954a 	.word	0x0800954a
 80075b0:	0800955b 	.word	0x0800955b

080075b4 <__hi0bits>:
 80075b4:	4603      	mov	r3, r0
 80075b6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80075ba:	bf3a      	itte	cc
 80075bc:	0403      	lslcc	r3, r0, #16
 80075be:	2010      	movcc	r0, #16
 80075c0:	2000      	movcs	r0, #0
 80075c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075c6:	bf3c      	itt	cc
 80075c8:	021b      	lslcc	r3, r3, #8
 80075ca:	3008      	addcc	r0, #8
 80075cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075d0:	bf3c      	itt	cc
 80075d2:	011b      	lslcc	r3, r3, #4
 80075d4:	3004      	addcc	r0, #4
 80075d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075da:	bf3c      	itt	cc
 80075dc:	009b      	lslcc	r3, r3, #2
 80075de:	3002      	addcc	r0, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	db05      	blt.n	80075f0 <__hi0bits+0x3c>
 80075e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80075e8:	f100 0001 	add.w	r0, r0, #1
 80075ec:	bf08      	it	eq
 80075ee:	2020      	moveq	r0, #32
 80075f0:	4770      	bx	lr

080075f2 <__lo0bits>:
 80075f2:	6803      	ldr	r3, [r0, #0]
 80075f4:	4602      	mov	r2, r0
 80075f6:	f013 0007 	ands.w	r0, r3, #7
 80075fa:	d00b      	beq.n	8007614 <__lo0bits+0x22>
 80075fc:	07d9      	lsls	r1, r3, #31
 80075fe:	d421      	bmi.n	8007644 <__lo0bits+0x52>
 8007600:	0798      	lsls	r0, r3, #30
 8007602:	bf49      	itett	mi
 8007604:	085b      	lsrmi	r3, r3, #1
 8007606:	089b      	lsrpl	r3, r3, #2
 8007608:	2001      	movmi	r0, #1
 800760a:	6013      	strmi	r3, [r2, #0]
 800760c:	bf5c      	itt	pl
 800760e:	2002      	movpl	r0, #2
 8007610:	6013      	strpl	r3, [r2, #0]
 8007612:	4770      	bx	lr
 8007614:	b299      	uxth	r1, r3
 8007616:	b909      	cbnz	r1, 800761c <__lo0bits+0x2a>
 8007618:	2010      	movs	r0, #16
 800761a:	0c1b      	lsrs	r3, r3, #16
 800761c:	b2d9      	uxtb	r1, r3
 800761e:	b909      	cbnz	r1, 8007624 <__lo0bits+0x32>
 8007620:	3008      	adds	r0, #8
 8007622:	0a1b      	lsrs	r3, r3, #8
 8007624:	0719      	lsls	r1, r3, #28
 8007626:	bf04      	itt	eq
 8007628:	091b      	lsreq	r3, r3, #4
 800762a:	3004      	addeq	r0, #4
 800762c:	0799      	lsls	r1, r3, #30
 800762e:	bf04      	itt	eq
 8007630:	089b      	lsreq	r3, r3, #2
 8007632:	3002      	addeq	r0, #2
 8007634:	07d9      	lsls	r1, r3, #31
 8007636:	d403      	bmi.n	8007640 <__lo0bits+0x4e>
 8007638:	085b      	lsrs	r3, r3, #1
 800763a:	f100 0001 	add.w	r0, r0, #1
 800763e:	d003      	beq.n	8007648 <__lo0bits+0x56>
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	4770      	bx	lr
 8007644:	2000      	movs	r0, #0
 8007646:	4770      	bx	lr
 8007648:	2020      	movs	r0, #32
 800764a:	4770      	bx	lr

0800764c <__i2b>:
 800764c:	b510      	push	{r4, lr}
 800764e:	460c      	mov	r4, r1
 8007650:	2101      	movs	r1, #1
 8007652:	f7ff ff07 	bl	8007464 <_Balloc>
 8007656:	4602      	mov	r2, r0
 8007658:	b928      	cbnz	r0, 8007666 <__i2b+0x1a>
 800765a:	f240 1145 	movw	r1, #325	@ 0x145
 800765e:	4b04      	ldr	r3, [pc, #16]	@ (8007670 <__i2b+0x24>)
 8007660:	4804      	ldr	r0, [pc, #16]	@ (8007674 <__i2b+0x28>)
 8007662:	f000 fca3 	bl	8007fac <__assert_func>
 8007666:	2301      	movs	r3, #1
 8007668:	6144      	str	r4, [r0, #20]
 800766a:	6103      	str	r3, [r0, #16]
 800766c:	bd10      	pop	{r4, pc}
 800766e:	bf00      	nop
 8007670:	0800954a 	.word	0x0800954a
 8007674:	0800955b 	.word	0x0800955b

08007678 <__multiply>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	4617      	mov	r7, r2
 800767e:	690a      	ldr	r2, [r1, #16]
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	4689      	mov	r9, r1
 8007684:	429a      	cmp	r2, r3
 8007686:	bfa2      	ittt	ge
 8007688:	463b      	movge	r3, r7
 800768a:	460f      	movge	r7, r1
 800768c:	4699      	movge	r9, r3
 800768e:	693d      	ldr	r5, [r7, #16]
 8007690:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	eb05 060a 	add.w	r6, r5, sl
 800769c:	42b3      	cmp	r3, r6
 800769e:	b085      	sub	sp, #20
 80076a0:	bfb8      	it	lt
 80076a2:	3101      	addlt	r1, #1
 80076a4:	f7ff fede 	bl	8007464 <_Balloc>
 80076a8:	b930      	cbnz	r0, 80076b8 <__multiply+0x40>
 80076aa:	4602      	mov	r2, r0
 80076ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80076b0:	4b40      	ldr	r3, [pc, #256]	@ (80077b4 <__multiply+0x13c>)
 80076b2:	4841      	ldr	r0, [pc, #260]	@ (80077b8 <__multiply+0x140>)
 80076b4:	f000 fc7a 	bl	8007fac <__assert_func>
 80076b8:	f100 0414 	add.w	r4, r0, #20
 80076bc:	4623      	mov	r3, r4
 80076be:	2200      	movs	r2, #0
 80076c0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80076c4:	4573      	cmp	r3, lr
 80076c6:	d320      	bcc.n	800770a <__multiply+0x92>
 80076c8:	f107 0814 	add.w	r8, r7, #20
 80076cc:	f109 0114 	add.w	r1, r9, #20
 80076d0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80076d4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80076d8:	9302      	str	r3, [sp, #8]
 80076da:	1beb      	subs	r3, r5, r7
 80076dc:	3b15      	subs	r3, #21
 80076de:	f023 0303 	bic.w	r3, r3, #3
 80076e2:	3304      	adds	r3, #4
 80076e4:	3715      	adds	r7, #21
 80076e6:	42bd      	cmp	r5, r7
 80076e8:	bf38      	it	cc
 80076ea:	2304      	movcc	r3, #4
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	9b02      	ldr	r3, [sp, #8]
 80076f0:	9103      	str	r1, [sp, #12]
 80076f2:	428b      	cmp	r3, r1
 80076f4:	d80c      	bhi.n	8007710 <__multiply+0x98>
 80076f6:	2e00      	cmp	r6, #0
 80076f8:	dd03      	ble.n	8007702 <__multiply+0x8a>
 80076fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d055      	beq.n	80077ae <__multiply+0x136>
 8007702:	6106      	str	r6, [r0, #16]
 8007704:	b005      	add	sp, #20
 8007706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770a:	f843 2b04 	str.w	r2, [r3], #4
 800770e:	e7d9      	b.n	80076c4 <__multiply+0x4c>
 8007710:	f8b1 a000 	ldrh.w	sl, [r1]
 8007714:	f1ba 0f00 	cmp.w	sl, #0
 8007718:	d01f      	beq.n	800775a <__multiply+0xe2>
 800771a:	46c4      	mov	ip, r8
 800771c:	46a1      	mov	r9, r4
 800771e:	2700      	movs	r7, #0
 8007720:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007724:	f8d9 3000 	ldr.w	r3, [r9]
 8007728:	fa1f fb82 	uxth.w	fp, r2
 800772c:	b29b      	uxth	r3, r3
 800772e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007732:	443b      	add	r3, r7
 8007734:	f8d9 7000 	ldr.w	r7, [r9]
 8007738:	0c12      	lsrs	r2, r2, #16
 800773a:	0c3f      	lsrs	r7, r7, #16
 800773c:	fb0a 7202 	mla	r2, sl, r2, r7
 8007740:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007744:	b29b      	uxth	r3, r3
 8007746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800774a:	4565      	cmp	r5, ip
 800774c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007750:	f849 3b04 	str.w	r3, [r9], #4
 8007754:	d8e4      	bhi.n	8007720 <__multiply+0xa8>
 8007756:	9b01      	ldr	r3, [sp, #4]
 8007758:	50e7      	str	r7, [r4, r3]
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	3104      	adds	r1, #4
 800775e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007762:	f1b9 0f00 	cmp.w	r9, #0
 8007766:	d020      	beq.n	80077aa <__multiply+0x132>
 8007768:	4647      	mov	r7, r8
 800776a:	46a4      	mov	ip, r4
 800776c:	f04f 0a00 	mov.w	sl, #0
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	f8b7 b000 	ldrh.w	fp, [r7]
 8007776:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800777a:	b29b      	uxth	r3, r3
 800777c:	fb09 220b 	mla	r2, r9, fp, r2
 8007780:	4452      	add	r2, sl
 8007782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007786:	f84c 3b04 	str.w	r3, [ip], #4
 800778a:	f857 3b04 	ldr.w	r3, [r7], #4
 800778e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007792:	f8bc 3000 	ldrh.w	r3, [ip]
 8007796:	42bd      	cmp	r5, r7
 8007798:	fb09 330a 	mla	r3, r9, sl, r3
 800779c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80077a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077a4:	d8e5      	bhi.n	8007772 <__multiply+0xfa>
 80077a6:	9a01      	ldr	r2, [sp, #4]
 80077a8:	50a3      	str	r3, [r4, r2]
 80077aa:	3404      	adds	r4, #4
 80077ac:	e79f      	b.n	80076ee <__multiply+0x76>
 80077ae:	3e01      	subs	r6, #1
 80077b0:	e7a1      	b.n	80076f6 <__multiply+0x7e>
 80077b2:	bf00      	nop
 80077b4:	0800954a 	.word	0x0800954a
 80077b8:	0800955b 	.word	0x0800955b

080077bc <__pow5mult>:
 80077bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077c0:	4615      	mov	r5, r2
 80077c2:	f012 0203 	ands.w	r2, r2, #3
 80077c6:	4607      	mov	r7, r0
 80077c8:	460e      	mov	r6, r1
 80077ca:	d007      	beq.n	80077dc <__pow5mult+0x20>
 80077cc:	4c25      	ldr	r4, [pc, #148]	@ (8007864 <__pow5mult+0xa8>)
 80077ce:	3a01      	subs	r2, #1
 80077d0:	2300      	movs	r3, #0
 80077d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077d6:	f7ff fea7 	bl	8007528 <__multadd>
 80077da:	4606      	mov	r6, r0
 80077dc:	10ad      	asrs	r5, r5, #2
 80077de:	d03d      	beq.n	800785c <__pow5mult+0xa0>
 80077e0:	69fc      	ldr	r4, [r7, #28]
 80077e2:	b97c      	cbnz	r4, 8007804 <__pow5mult+0x48>
 80077e4:	2010      	movs	r0, #16
 80077e6:	f7ff fd87 	bl	80072f8 <malloc>
 80077ea:	4602      	mov	r2, r0
 80077ec:	61f8      	str	r0, [r7, #28]
 80077ee:	b928      	cbnz	r0, 80077fc <__pow5mult+0x40>
 80077f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80077f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007868 <__pow5mult+0xac>)
 80077f6:	481d      	ldr	r0, [pc, #116]	@ (800786c <__pow5mult+0xb0>)
 80077f8:	f000 fbd8 	bl	8007fac <__assert_func>
 80077fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007800:	6004      	str	r4, [r0, #0]
 8007802:	60c4      	str	r4, [r0, #12]
 8007804:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800780c:	b94c      	cbnz	r4, 8007822 <__pow5mult+0x66>
 800780e:	f240 2171 	movw	r1, #625	@ 0x271
 8007812:	4638      	mov	r0, r7
 8007814:	f7ff ff1a 	bl	800764c <__i2b>
 8007818:	2300      	movs	r3, #0
 800781a:	4604      	mov	r4, r0
 800781c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007820:	6003      	str	r3, [r0, #0]
 8007822:	f04f 0900 	mov.w	r9, #0
 8007826:	07eb      	lsls	r3, r5, #31
 8007828:	d50a      	bpl.n	8007840 <__pow5mult+0x84>
 800782a:	4631      	mov	r1, r6
 800782c:	4622      	mov	r2, r4
 800782e:	4638      	mov	r0, r7
 8007830:	f7ff ff22 	bl	8007678 <__multiply>
 8007834:	4680      	mov	r8, r0
 8007836:	4631      	mov	r1, r6
 8007838:	4638      	mov	r0, r7
 800783a:	f7ff fe53 	bl	80074e4 <_Bfree>
 800783e:	4646      	mov	r6, r8
 8007840:	106d      	asrs	r5, r5, #1
 8007842:	d00b      	beq.n	800785c <__pow5mult+0xa0>
 8007844:	6820      	ldr	r0, [r4, #0]
 8007846:	b938      	cbnz	r0, 8007858 <__pow5mult+0x9c>
 8007848:	4622      	mov	r2, r4
 800784a:	4621      	mov	r1, r4
 800784c:	4638      	mov	r0, r7
 800784e:	f7ff ff13 	bl	8007678 <__multiply>
 8007852:	6020      	str	r0, [r4, #0]
 8007854:	f8c0 9000 	str.w	r9, [r0]
 8007858:	4604      	mov	r4, r0
 800785a:	e7e4      	b.n	8007826 <__pow5mult+0x6a>
 800785c:	4630      	mov	r0, r6
 800785e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007862:	bf00      	nop
 8007864:	0800960c 	.word	0x0800960c
 8007868:	080094db 	.word	0x080094db
 800786c:	0800955b 	.word	0x0800955b

08007870 <__lshift>:
 8007870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007874:	460c      	mov	r4, r1
 8007876:	4607      	mov	r7, r0
 8007878:	4691      	mov	r9, r2
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	6849      	ldr	r1, [r1, #4]
 800787e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007882:	68a3      	ldr	r3, [r4, #8]
 8007884:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007888:	f108 0601 	add.w	r6, r8, #1
 800788c:	42b3      	cmp	r3, r6
 800788e:	db0b      	blt.n	80078a8 <__lshift+0x38>
 8007890:	4638      	mov	r0, r7
 8007892:	f7ff fde7 	bl	8007464 <_Balloc>
 8007896:	4605      	mov	r5, r0
 8007898:	b948      	cbnz	r0, 80078ae <__lshift+0x3e>
 800789a:	4602      	mov	r2, r0
 800789c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80078a0:	4b27      	ldr	r3, [pc, #156]	@ (8007940 <__lshift+0xd0>)
 80078a2:	4828      	ldr	r0, [pc, #160]	@ (8007944 <__lshift+0xd4>)
 80078a4:	f000 fb82 	bl	8007fac <__assert_func>
 80078a8:	3101      	adds	r1, #1
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	e7ee      	b.n	800788c <__lshift+0x1c>
 80078ae:	2300      	movs	r3, #0
 80078b0:	f100 0114 	add.w	r1, r0, #20
 80078b4:	f100 0210 	add.w	r2, r0, #16
 80078b8:	4618      	mov	r0, r3
 80078ba:	4553      	cmp	r3, sl
 80078bc:	db33      	blt.n	8007926 <__lshift+0xb6>
 80078be:	6920      	ldr	r0, [r4, #16]
 80078c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078c4:	f104 0314 	add.w	r3, r4, #20
 80078c8:	f019 091f 	ands.w	r9, r9, #31
 80078cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078d4:	d02b      	beq.n	800792e <__lshift+0xbe>
 80078d6:	468a      	mov	sl, r1
 80078d8:	2200      	movs	r2, #0
 80078da:	f1c9 0e20 	rsb	lr, r9, #32
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	fa00 f009 	lsl.w	r0, r0, r9
 80078e4:	4310      	orrs	r0, r2
 80078e6:	f84a 0b04 	str.w	r0, [sl], #4
 80078ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ee:	459c      	cmp	ip, r3
 80078f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80078f4:	d8f3      	bhi.n	80078de <__lshift+0x6e>
 80078f6:	ebac 0304 	sub.w	r3, ip, r4
 80078fa:	3b15      	subs	r3, #21
 80078fc:	f023 0303 	bic.w	r3, r3, #3
 8007900:	3304      	adds	r3, #4
 8007902:	f104 0015 	add.w	r0, r4, #21
 8007906:	4560      	cmp	r0, ip
 8007908:	bf88      	it	hi
 800790a:	2304      	movhi	r3, #4
 800790c:	50ca      	str	r2, [r1, r3]
 800790e:	b10a      	cbz	r2, 8007914 <__lshift+0xa4>
 8007910:	f108 0602 	add.w	r6, r8, #2
 8007914:	3e01      	subs	r6, #1
 8007916:	4638      	mov	r0, r7
 8007918:	4621      	mov	r1, r4
 800791a:	612e      	str	r6, [r5, #16]
 800791c:	f7ff fde2 	bl	80074e4 <_Bfree>
 8007920:	4628      	mov	r0, r5
 8007922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007926:	f842 0f04 	str.w	r0, [r2, #4]!
 800792a:	3301      	adds	r3, #1
 800792c:	e7c5      	b.n	80078ba <__lshift+0x4a>
 800792e:	3904      	subs	r1, #4
 8007930:	f853 2b04 	ldr.w	r2, [r3], #4
 8007934:	459c      	cmp	ip, r3
 8007936:	f841 2f04 	str.w	r2, [r1, #4]!
 800793a:	d8f9      	bhi.n	8007930 <__lshift+0xc0>
 800793c:	e7ea      	b.n	8007914 <__lshift+0xa4>
 800793e:	bf00      	nop
 8007940:	0800954a 	.word	0x0800954a
 8007944:	0800955b 	.word	0x0800955b

08007948 <__mcmp>:
 8007948:	4603      	mov	r3, r0
 800794a:	690a      	ldr	r2, [r1, #16]
 800794c:	6900      	ldr	r0, [r0, #16]
 800794e:	b530      	push	{r4, r5, lr}
 8007950:	1a80      	subs	r0, r0, r2
 8007952:	d10e      	bne.n	8007972 <__mcmp+0x2a>
 8007954:	3314      	adds	r3, #20
 8007956:	3114      	adds	r1, #20
 8007958:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800795c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007960:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007964:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007968:	4295      	cmp	r5, r2
 800796a:	d003      	beq.n	8007974 <__mcmp+0x2c>
 800796c:	d205      	bcs.n	800797a <__mcmp+0x32>
 800796e:	f04f 30ff 	mov.w	r0, #4294967295
 8007972:	bd30      	pop	{r4, r5, pc}
 8007974:	42a3      	cmp	r3, r4
 8007976:	d3f3      	bcc.n	8007960 <__mcmp+0x18>
 8007978:	e7fb      	b.n	8007972 <__mcmp+0x2a>
 800797a:	2001      	movs	r0, #1
 800797c:	e7f9      	b.n	8007972 <__mcmp+0x2a>
	...

08007980 <__mdiff>:
 8007980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007984:	4689      	mov	r9, r1
 8007986:	4606      	mov	r6, r0
 8007988:	4611      	mov	r1, r2
 800798a:	4648      	mov	r0, r9
 800798c:	4614      	mov	r4, r2
 800798e:	f7ff ffdb 	bl	8007948 <__mcmp>
 8007992:	1e05      	subs	r5, r0, #0
 8007994:	d112      	bne.n	80079bc <__mdiff+0x3c>
 8007996:	4629      	mov	r1, r5
 8007998:	4630      	mov	r0, r6
 800799a:	f7ff fd63 	bl	8007464 <_Balloc>
 800799e:	4602      	mov	r2, r0
 80079a0:	b928      	cbnz	r0, 80079ae <__mdiff+0x2e>
 80079a2:	f240 2137 	movw	r1, #567	@ 0x237
 80079a6:	4b3e      	ldr	r3, [pc, #248]	@ (8007aa0 <__mdiff+0x120>)
 80079a8:	483e      	ldr	r0, [pc, #248]	@ (8007aa4 <__mdiff+0x124>)
 80079aa:	f000 faff 	bl	8007fac <__assert_func>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079b4:	4610      	mov	r0, r2
 80079b6:	b003      	add	sp, #12
 80079b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079bc:	bfbc      	itt	lt
 80079be:	464b      	movlt	r3, r9
 80079c0:	46a1      	movlt	r9, r4
 80079c2:	4630      	mov	r0, r6
 80079c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80079c8:	bfba      	itte	lt
 80079ca:	461c      	movlt	r4, r3
 80079cc:	2501      	movlt	r5, #1
 80079ce:	2500      	movge	r5, #0
 80079d0:	f7ff fd48 	bl	8007464 <_Balloc>
 80079d4:	4602      	mov	r2, r0
 80079d6:	b918      	cbnz	r0, 80079e0 <__mdiff+0x60>
 80079d8:	f240 2145 	movw	r1, #581	@ 0x245
 80079dc:	4b30      	ldr	r3, [pc, #192]	@ (8007aa0 <__mdiff+0x120>)
 80079de:	e7e3      	b.n	80079a8 <__mdiff+0x28>
 80079e0:	f100 0b14 	add.w	fp, r0, #20
 80079e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80079e8:	f109 0310 	add.w	r3, r9, #16
 80079ec:	60c5      	str	r5, [r0, #12]
 80079ee:	f04f 0c00 	mov.w	ip, #0
 80079f2:	f109 0514 	add.w	r5, r9, #20
 80079f6:	46d9      	mov	r9, fp
 80079f8:	6926      	ldr	r6, [r4, #16]
 80079fa:	f104 0e14 	add.w	lr, r4, #20
 80079fe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a02:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a12:	b281      	uxth	r1, r0
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	fa1f f38a 	uxth.w	r3, sl
 8007a1a:	1a5b      	subs	r3, r3, r1
 8007a1c:	0c00      	lsrs	r0, r0, #16
 8007a1e:	4463      	add	r3, ip
 8007a20:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007a24:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007a2e:	4576      	cmp	r6, lr
 8007a30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a34:	f849 3b04 	str.w	r3, [r9], #4
 8007a38:	d8e6      	bhi.n	8007a08 <__mdiff+0x88>
 8007a3a:	1b33      	subs	r3, r6, r4
 8007a3c:	3b15      	subs	r3, #21
 8007a3e:	f023 0303 	bic.w	r3, r3, #3
 8007a42:	3415      	adds	r4, #21
 8007a44:	3304      	adds	r3, #4
 8007a46:	42a6      	cmp	r6, r4
 8007a48:	bf38      	it	cc
 8007a4a:	2304      	movcc	r3, #4
 8007a4c:	441d      	add	r5, r3
 8007a4e:	445b      	add	r3, fp
 8007a50:	461e      	mov	r6, r3
 8007a52:	462c      	mov	r4, r5
 8007a54:	4544      	cmp	r4, r8
 8007a56:	d30e      	bcc.n	8007a76 <__mdiff+0xf6>
 8007a58:	f108 0103 	add.w	r1, r8, #3
 8007a5c:	1b49      	subs	r1, r1, r5
 8007a5e:	f021 0103 	bic.w	r1, r1, #3
 8007a62:	3d03      	subs	r5, #3
 8007a64:	45a8      	cmp	r8, r5
 8007a66:	bf38      	it	cc
 8007a68:	2100      	movcc	r1, #0
 8007a6a:	440b      	add	r3, r1
 8007a6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a70:	b199      	cbz	r1, 8007a9a <__mdiff+0x11a>
 8007a72:	6117      	str	r7, [r2, #16]
 8007a74:	e79e      	b.n	80079b4 <__mdiff+0x34>
 8007a76:	46e6      	mov	lr, ip
 8007a78:	f854 1b04 	ldr.w	r1, [r4], #4
 8007a7c:	fa1f fc81 	uxth.w	ip, r1
 8007a80:	44f4      	add	ip, lr
 8007a82:	0c08      	lsrs	r0, r1, #16
 8007a84:	4471      	add	r1, lr
 8007a86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007a8a:	b289      	uxth	r1, r1
 8007a8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a94:	f846 1b04 	str.w	r1, [r6], #4
 8007a98:	e7dc      	b.n	8007a54 <__mdiff+0xd4>
 8007a9a:	3f01      	subs	r7, #1
 8007a9c:	e7e6      	b.n	8007a6c <__mdiff+0xec>
 8007a9e:	bf00      	nop
 8007aa0:	0800954a 	.word	0x0800954a
 8007aa4:	0800955b 	.word	0x0800955b

08007aa8 <__d2b>:
 8007aa8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007aac:	2101      	movs	r1, #1
 8007aae:	4690      	mov	r8, r2
 8007ab0:	4699      	mov	r9, r3
 8007ab2:	9e08      	ldr	r6, [sp, #32]
 8007ab4:	f7ff fcd6 	bl	8007464 <_Balloc>
 8007ab8:	4604      	mov	r4, r0
 8007aba:	b930      	cbnz	r0, 8007aca <__d2b+0x22>
 8007abc:	4602      	mov	r2, r0
 8007abe:	f240 310f 	movw	r1, #783	@ 0x30f
 8007ac2:	4b23      	ldr	r3, [pc, #140]	@ (8007b50 <__d2b+0xa8>)
 8007ac4:	4823      	ldr	r0, [pc, #140]	@ (8007b54 <__d2b+0xac>)
 8007ac6:	f000 fa71 	bl	8007fac <__assert_func>
 8007aca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ace:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ad2:	b10d      	cbz	r5, 8007ad8 <__d2b+0x30>
 8007ad4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ad8:	9301      	str	r3, [sp, #4]
 8007ada:	f1b8 0300 	subs.w	r3, r8, #0
 8007ade:	d024      	beq.n	8007b2a <__d2b+0x82>
 8007ae0:	4668      	mov	r0, sp
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	f7ff fd85 	bl	80075f2 <__lo0bits>
 8007ae8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007aec:	b1d8      	cbz	r0, 8007b26 <__d2b+0x7e>
 8007aee:	f1c0 0320 	rsb	r3, r0, #32
 8007af2:	fa02 f303 	lsl.w	r3, r2, r3
 8007af6:	430b      	orrs	r3, r1
 8007af8:	40c2      	lsrs	r2, r0
 8007afa:	6163      	str	r3, [r4, #20]
 8007afc:	9201      	str	r2, [sp, #4]
 8007afe:	9b01      	ldr	r3, [sp, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bf0c      	ite	eq
 8007b04:	2201      	moveq	r2, #1
 8007b06:	2202      	movne	r2, #2
 8007b08:	61a3      	str	r3, [r4, #24]
 8007b0a:	6122      	str	r2, [r4, #16]
 8007b0c:	b1ad      	cbz	r5, 8007b3a <__d2b+0x92>
 8007b0e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b12:	4405      	add	r5, r0
 8007b14:	6035      	str	r5, [r6, #0]
 8007b16:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b1c:	6018      	str	r0, [r3, #0]
 8007b1e:	4620      	mov	r0, r4
 8007b20:	b002      	add	sp, #8
 8007b22:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007b26:	6161      	str	r1, [r4, #20]
 8007b28:	e7e9      	b.n	8007afe <__d2b+0x56>
 8007b2a:	a801      	add	r0, sp, #4
 8007b2c:	f7ff fd61 	bl	80075f2 <__lo0bits>
 8007b30:	9b01      	ldr	r3, [sp, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	6163      	str	r3, [r4, #20]
 8007b36:	3020      	adds	r0, #32
 8007b38:	e7e7      	b.n	8007b0a <__d2b+0x62>
 8007b3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b42:	6030      	str	r0, [r6, #0]
 8007b44:	6918      	ldr	r0, [r3, #16]
 8007b46:	f7ff fd35 	bl	80075b4 <__hi0bits>
 8007b4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b4e:	e7e4      	b.n	8007b1a <__d2b+0x72>
 8007b50:	0800954a 	.word	0x0800954a
 8007b54:	0800955b 	.word	0x0800955b

08007b58 <__ssputs_r>:
 8007b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b5c:	461f      	mov	r7, r3
 8007b5e:	688e      	ldr	r6, [r1, #8]
 8007b60:	4682      	mov	sl, r0
 8007b62:	42be      	cmp	r6, r7
 8007b64:	460c      	mov	r4, r1
 8007b66:	4690      	mov	r8, r2
 8007b68:	680b      	ldr	r3, [r1, #0]
 8007b6a:	d82d      	bhi.n	8007bc8 <__ssputs_r+0x70>
 8007b6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b74:	d026      	beq.n	8007bc4 <__ssputs_r+0x6c>
 8007b76:	6965      	ldr	r5, [r4, #20]
 8007b78:	6909      	ldr	r1, [r1, #16]
 8007b7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b7e:	eba3 0901 	sub.w	r9, r3, r1
 8007b82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b86:	1c7b      	adds	r3, r7, #1
 8007b88:	444b      	add	r3, r9
 8007b8a:	106d      	asrs	r5, r5, #1
 8007b8c:	429d      	cmp	r5, r3
 8007b8e:	bf38      	it	cc
 8007b90:	461d      	movcc	r5, r3
 8007b92:	0553      	lsls	r3, r2, #21
 8007b94:	d527      	bpl.n	8007be6 <__ssputs_r+0x8e>
 8007b96:	4629      	mov	r1, r5
 8007b98:	f7ff fbd8 	bl	800734c <_malloc_r>
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	b360      	cbz	r0, 8007bfa <__ssputs_r+0xa2>
 8007ba0:	464a      	mov	r2, r9
 8007ba2:	6921      	ldr	r1, [r4, #16]
 8007ba4:	f7fe fcf5 	bl	8006592 <memcpy>
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bb2:	81a3      	strh	r3, [r4, #12]
 8007bb4:	6126      	str	r6, [r4, #16]
 8007bb6:	444e      	add	r6, r9
 8007bb8:	6026      	str	r6, [r4, #0]
 8007bba:	463e      	mov	r6, r7
 8007bbc:	6165      	str	r5, [r4, #20]
 8007bbe:	eba5 0509 	sub.w	r5, r5, r9
 8007bc2:	60a5      	str	r5, [r4, #8]
 8007bc4:	42be      	cmp	r6, r7
 8007bc6:	d900      	bls.n	8007bca <__ssputs_r+0x72>
 8007bc8:	463e      	mov	r6, r7
 8007bca:	4632      	mov	r2, r6
 8007bcc:	4641      	mov	r1, r8
 8007bce:	6820      	ldr	r0, [r4, #0]
 8007bd0:	f000 f9c2 	bl	8007f58 <memmove>
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	68a3      	ldr	r3, [r4, #8]
 8007bd8:	1b9b      	subs	r3, r3, r6
 8007bda:	60a3      	str	r3, [r4, #8]
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	4433      	add	r3, r6
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be6:	462a      	mov	r2, r5
 8007be8:	f000 fa24 	bl	8008034 <_realloc_r>
 8007bec:	4606      	mov	r6, r0
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d1e0      	bne.n	8007bb4 <__ssputs_r+0x5c>
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	6921      	ldr	r1, [r4, #16]
 8007bf6:	f7ff fb37 	bl	8007268 <_free_r>
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	f8ca 3000 	str.w	r3, [sl]
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	f04f 30ff 	mov.w	r0, #4294967295
 8007c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	e7e9      	b.n	8007be2 <__ssputs_r+0x8a>
	...

08007c10 <_svfiprintf_r>:
 8007c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	4698      	mov	r8, r3
 8007c16:	898b      	ldrh	r3, [r1, #12]
 8007c18:	4607      	mov	r7, r0
 8007c1a:	061b      	lsls	r3, r3, #24
 8007c1c:	460d      	mov	r5, r1
 8007c1e:	4614      	mov	r4, r2
 8007c20:	b09d      	sub	sp, #116	@ 0x74
 8007c22:	d510      	bpl.n	8007c46 <_svfiprintf_r+0x36>
 8007c24:	690b      	ldr	r3, [r1, #16]
 8007c26:	b973      	cbnz	r3, 8007c46 <_svfiprintf_r+0x36>
 8007c28:	2140      	movs	r1, #64	@ 0x40
 8007c2a:	f7ff fb8f 	bl	800734c <_malloc_r>
 8007c2e:	6028      	str	r0, [r5, #0]
 8007c30:	6128      	str	r0, [r5, #16]
 8007c32:	b930      	cbnz	r0, 8007c42 <_svfiprintf_r+0x32>
 8007c34:	230c      	movs	r3, #12
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3c:	b01d      	add	sp, #116	@ 0x74
 8007c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c42:	2340      	movs	r3, #64	@ 0x40
 8007c44:	616b      	str	r3, [r5, #20]
 8007c46:	2300      	movs	r3, #0
 8007c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c4a:	2320      	movs	r3, #32
 8007c4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c50:	2330      	movs	r3, #48	@ 0x30
 8007c52:	f04f 0901 	mov.w	r9, #1
 8007c56:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c5a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007df4 <_svfiprintf_r+0x1e4>
 8007c5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c62:	4623      	mov	r3, r4
 8007c64:	469a      	mov	sl, r3
 8007c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c6a:	b10a      	cbz	r2, 8007c70 <_svfiprintf_r+0x60>
 8007c6c:	2a25      	cmp	r2, #37	@ 0x25
 8007c6e:	d1f9      	bne.n	8007c64 <_svfiprintf_r+0x54>
 8007c70:	ebba 0b04 	subs.w	fp, sl, r4
 8007c74:	d00b      	beq.n	8007c8e <_svfiprintf_r+0x7e>
 8007c76:	465b      	mov	r3, fp
 8007c78:	4622      	mov	r2, r4
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	f7ff ff6b 	bl	8007b58 <__ssputs_r>
 8007c82:	3001      	adds	r0, #1
 8007c84:	f000 80a7 	beq.w	8007dd6 <_svfiprintf_r+0x1c6>
 8007c88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c8a:	445a      	add	r2, fp
 8007c8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 809f 	beq.w	8007dd6 <_svfiprintf_r+0x1c6>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ca2:	f10a 0a01 	add.w	sl, sl, #1
 8007ca6:	9304      	str	r3, [sp, #16]
 8007ca8:	9307      	str	r3, [sp, #28]
 8007caa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cae:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cb0:	4654      	mov	r4, sl
 8007cb2:	2205      	movs	r2, #5
 8007cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb8:	484e      	ldr	r0, [pc, #312]	@ (8007df4 <_svfiprintf_r+0x1e4>)
 8007cba:	f7fe fc5c 	bl	8006576 <memchr>
 8007cbe:	9a04      	ldr	r2, [sp, #16]
 8007cc0:	b9d8      	cbnz	r0, 8007cfa <_svfiprintf_r+0xea>
 8007cc2:	06d0      	lsls	r0, r2, #27
 8007cc4:	bf44      	itt	mi
 8007cc6:	2320      	movmi	r3, #32
 8007cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ccc:	0711      	lsls	r1, r2, #28
 8007cce:	bf44      	itt	mi
 8007cd0:	232b      	movmi	r3, #43	@ 0x2b
 8007cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8007cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cdc:	d015      	beq.n	8007d0a <_svfiprintf_r+0xfa>
 8007cde:	4654      	mov	r4, sl
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	f04f 0c0a 	mov.w	ip, #10
 8007ce6:	9a07      	ldr	r2, [sp, #28]
 8007ce8:	4621      	mov	r1, r4
 8007cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cee:	3b30      	subs	r3, #48	@ 0x30
 8007cf0:	2b09      	cmp	r3, #9
 8007cf2:	d94b      	bls.n	8007d8c <_svfiprintf_r+0x17c>
 8007cf4:	b1b0      	cbz	r0, 8007d24 <_svfiprintf_r+0x114>
 8007cf6:	9207      	str	r2, [sp, #28]
 8007cf8:	e014      	b.n	8007d24 <_svfiprintf_r+0x114>
 8007cfa:	eba0 0308 	sub.w	r3, r0, r8
 8007cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8007d02:	4313      	orrs	r3, r2
 8007d04:	46a2      	mov	sl, r4
 8007d06:	9304      	str	r3, [sp, #16]
 8007d08:	e7d2      	b.n	8007cb0 <_svfiprintf_r+0xa0>
 8007d0a:	9b03      	ldr	r3, [sp, #12]
 8007d0c:	1d19      	adds	r1, r3, #4
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	9103      	str	r1, [sp, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bfbb      	ittet	lt
 8007d16:	425b      	neglt	r3, r3
 8007d18:	f042 0202 	orrlt.w	r2, r2, #2
 8007d1c:	9307      	strge	r3, [sp, #28]
 8007d1e:	9307      	strlt	r3, [sp, #28]
 8007d20:	bfb8      	it	lt
 8007d22:	9204      	strlt	r2, [sp, #16]
 8007d24:	7823      	ldrb	r3, [r4, #0]
 8007d26:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d28:	d10a      	bne.n	8007d40 <_svfiprintf_r+0x130>
 8007d2a:	7863      	ldrb	r3, [r4, #1]
 8007d2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d2e:	d132      	bne.n	8007d96 <_svfiprintf_r+0x186>
 8007d30:	9b03      	ldr	r3, [sp, #12]
 8007d32:	3402      	adds	r4, #2
 8007d34:	1d1a      	adds	r2, r3, #4
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	9203      	str	r2, [sp, #12]
 8007d3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d3e:	9305      	str	r3, [sp, #20]
 8007d40:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007df8 <_svfiprintf_r+0x1e8>
 8007d44:	2203      	movs	r2, #3
 8007d46:	4650      	mov	r0, sl
 8007d48:	7821      	ldrb	r1, [r4, #0]
 8007d4a:	f7fe fc14 	bl	8006576 <memchr>
 8007d4e:	b138      	cbz	r0, 8007d60 <_svfiprintf_r+0x150>
 8007d50:	2240      	movs	r2, #64	@ 0x40
 8007d52:	9b04      	ldr	r3, [sp, #16]
 8007d54:	eba0 000a 	sub.w	r0, r0, sl
 8007d58:	4082      	lsls	r2, r0
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	3401      	adds	r4, #1
 8007d5e:	9304      	str	r3, [sp, #16]
 8007d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d64:	2206      	movs	r2, #6
 8007d66:	4825      	ldr	r0, [pc, #148]	@ (8007dfc <_svfiprintf_r+0x1ec>)
 8007d68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d6c:	f7fe fc03 	bl	8006576 <memchr>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d036      	beq.n	8007de2 <_svfiprintf_r+0x1d2>
 8007d74:	4b22      	ldr	r3, [pc, #136]	@ (8007e00 <_svfiprintf_r+0x1f0>)
 8007d76:	bb1b      	cbnz	r3, 8007dc0 <_svfiprintf_r+0x1b0>
 8007d78:	9b03      	ldr	r3, [sp, #12]
 8007d7a:	3307      	adds	r3, #7
 8007d7c:	f023 0307 	bic.w	r3, r3, #7
 8007d80:	3308      	adds	r3, #8
 8007d82:	9303      	str	r3, [sp, #12]
 8007d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d86:	4433      	add	r3, r6
 8007d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d8a:	e76a      	b.n	8007c62 <_svfiprintf_r+0x52>
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	2001      	movs	r0, #1
 8007d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d94:	e7a8      	b.n	8007ce8 <_svfiprintf_r+0xd8>
 8007d96:	2300      	movs	r3, #0
 8007d98:	f04f 0c0a 	mov.w	ip, #10
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	3401      	adds	r4, #1
 8007da0:	9305      	str	r3, [sp, #20]
 8007da2:	4620      	mov	r0, r4
 8007da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007da8:	3a30      	subs	r2, #48	@ 0x30
 8007daa:	2a09      	cmp	r2, #9
 8007dac:	d903      	bls.n	8007db6 <_svfiprintf_r+0x1a6>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0c6      	beq.n	8007d40 <_svfiprintf_r+0x130>
 8007db2:	9105      	str	r1, [sp, #20]
 8007db4:	e7c4      	b.n	8007d40 <_svfiprintf_r+0x130>
 8007db6:	4604      	mov	r4, r0
 8007db8:	2301      	movs	r3, #1
 8007dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dbe:	e7f0      	b.n	8007da2 <_svfiprintf_r+0x192>
 8007dc0:	ab03      	add	r3, sp, #12
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	462a      	mov	r2, r5
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8007e04 <_svfiprintf_r+0x1f4>)
 8007dca:	a904      	add	r1, sp, #16
 8007dcc:	f7fd fe70 	bl	8005ab0 <_printf_float>
 8007dd0:	1c42      	adds	r2, r0, #1
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	d1d6      	bne.n	8007d84 <_svfiprintf_r+0x174>
 8007dd6:	89ab      	ldrh	r3, [r5, #12]
 8007dd8:	065b      	lsls	r3, r3, #25
 8007dda:	f53f af2d 	bmi.w	8007c38 <_svfiprintf_r+0x28>
 8007dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007de0:	e72c      	b.n	8007c3c <_svfiprintf_r+0x2c>
 8007de2:	ab03      	add	r3, sp, #12
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	462a      	mov	r2, r5
 8007de8:	4638      	mov	r0, r7
 8007dea:	4b06      	ldr	r3, [pc, #24]	@ (8007e04 <_svfiprintf_r+0x1f4>)
 8007dec:	a904      	add	r1, sp, #16
 8007dee:	f7fe f8fd 	bl	8005fec <_printf_i>
 8007df2:	e7ed      	b.n	8007dd0 <_svfiprintf_r+0x1c0>
 8007df4:	080095b4 	.word	0x080095b4
 8007df8:	080095ba 	.word	0x080095ba
 8007dfc:	080095be 	.word	0x080095be
 8007e00:	08005ab1 	.word	0x08005ab1
 8007e04:	08007b59 	.word	0x08007b59

08007e08 <__sflush_r>:
 8007e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0e:	0716      	lsls	r6, r2, #28
 8007e10:	4605      	mov	r5, r0
 8007e12:	460c      	mov	r4, r1
 8007e14:	d454      	bmi.n	8007ec0 <__sflush_r+0xb8>
 8007e16:	684b      	ldr	r3, [r1, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	dc02      	bgt.n	8007e22 <__sflush_r+0x1a>
 8007e1c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	dd48      	ble.n	8007eb4 <__sflush_r+0xac>
 8007e22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e24:	2e00      	cmp	r6, #0
 8007e26:	d045      	beq.n	8007eb4 <__sflush_r+0xac>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e2e:	682f      	ldr	r7, [r5, #0]
 8007e30:	6a21      	ldr	r1, [r4, #32]
 8007e32:	602b      	str	r3, [r5, #0]
 8007e34:	d030      	beq.n	8007e98 <__sflush_r+0x90>
 8007e36:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	0759      	lsls	r1, r3, #29
 8007e3c:	d505      	bpl.n	8007e4a <__sflush_r+0x42>
 8007e3e:	6863      	ldr	r3, [r4, #4]
 8007e40:	1ad2      	subs	r2, r2, r3
 8007e42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e44:	b10b      	cbz	r3, 8007e4a <__sflush_r+0x42>
 8007e46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e48:	1ad2      	subs	r2, r2, r3
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e50:	6a21      	ldr	r1, [r4, #32]
 8007e52:	47b0      	blx	r6
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	d106      	bne.n	8007e68 <__sflush_r+0x60>
 8007e5a:	6829      	ldr	r1, [r5, #0]
 8007e5c:	291d      	cmp	r1, #29
 8007e5e:	d82b      	bhi.n	8007eb8 <__sflush_r+0xb0>
 8007e60:	4a28      	ldr	r2, [pc, #160]	@ (8007f04 <__sflush_r+0xfc>)
 8007e62:	40ca      	lsrs	r2, r1
 8007e64:	07d6      	lsls	r6, r2, #31
 8007e66:	d527      	bpl.n	8007eb8 <__sflush_r+0xb0>
 8007e68:	2200      	movs	r2, #0
 8007e6a:	6062      	str	r2, [r4, #4]
 8007e6c:	6922      	ldr	r2, [r4, #16]
 8007e6e:	04d9      	lsls	r1, r3, #19
 8007e70:	6022      	str	r2, [r4, #0]
 8007e72:	d504      	bpl.n	8007e7e <__sflush_r+0x76>
 8007e74:	1c42      	adds	r2, r0, #1
 8007e76:	d101      	bne.n	8007e7c <__sflush_r+0x74>
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	b903      	cbnz	r3, 8007e7e <__sflush_r+0x76>
 8007e7c:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e80:	602f      	str	r7, [r5, #0]
 8007e82:	b1b9      	cbz	r1, 8007eb4 <__sflush_r+0xac>
 8007e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e88:	4299      	cmp	r1, r3
 8007e8a:	d002      	beq.n	8007e92 <__sflush_r+0x8a>
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	f7ff f9eb 	bl	8007268 <_free_r>
 8007e92:	2300      	movs	r3, #0
 8007e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e96:	e00d      	b.n	8007eb4 <__sflush_r+0xac>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	47b0      	blx	r6
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	1c50      	adds	r0, r2, #1
 8007ea2:	d1c9      	bne.n	8007e38 <__sflush_r+0x30>
 8007ea4:	682b      	ldr	r3, [r5, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d0c6      	beq.n	8007e38 <__sflush_r+0x30>
 8007eaa:	2b1d      	cmp	r3, #29
 8007eac:	d001      	beq.n	8007eb2 <__sflush_r+0xaa>
 8007eae:	2b16      	cmp	r3, #22
 8007eb0:	d11d      	bne.n	8007eee <__sflush_r+0xe6>
 8007eb2:	602f      	str	r7, [r5, #0]
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	e021      	b.n	8007efc <__sflush_r+0xf4>
 8007eb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ebc:	b21b      	sxth	r3, r3
 8007ebe:	e01a      	b.n	8007ef6 <__sflush_r+0xee>
 8007ec0:	690f      	ldr	r7, [r1, #16]
 8007ec2:	2f00      	cmp	r7, #0
 8007ec4:	d0f6      	beq.n	8007eb4 <__sflush_r+0xac>
 8007ec6:	0793      	lsls	r3, r2, #30
 8007ec8:	bf18      	it	ne
 8007eca:	2300      	movne	r3, #0
 8007ecc:	680e      	ldr	r6, [r1, #0]
 8007ece:	bf08      	it	eq
 8007ed0:	694b      	ldreq	r3, [r1, #20]
 8007ed2:	1bf6      	subs	r6, r6, r7
 8007ed4:	600f      	str	r7, [r1, #0]
 8007ed6:	608b      	str	r3, [r1, #8]
 8007ed8:	2e00      	cmp	r6, #0
 8007eda:	ddeb      	ble.n	8007eb4 <__sflush_r+0xac>
 8007edc:	4633      	mov	r3, r6
 8007ede:	463a      	mov	r2, r7
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	6a21      	ldr	r1, [r4, #32]
 8007ee4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007ee8:	47e0      	blx	ip
 8007eea:	2800      	cmp	r0, #0
 8007eec:	dc07      	bgt.n	8007efe <__sflush_r+0xf6>
 8007eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8007efa:	81a3      	strh	r3, [r4, #12]
 8007efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007efe:	4407      	add	r7, r0
 8007f00:	1a36      	subs	r6, r6, r0
 8007f02:	e7e9      	b.n	8007ed8 <__sflush_r+0xd0>
 8007f04:	20400001 	.word	0x20400001

08007f08 <_fflush_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	690b      	ldr	r3, [r1, #16]
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	b913      	cbnz	r3, 8007f18 <_fflush_r+0x10>
 8007f12:	2500      	movs	r5, #0
 8007f14:	4628      	mov	r0, r5
 8007f16:	bd38      	pop	{r3, r4, r5, pc}
 8007f18:	b118      	cbz	r0, 8007f22 <_fflush_r+0x1a>
 8007f1a:	6a03      	ldr	r3, [r0, #32]
 8007f1c:	b90b      	cbnz	r3, 8007f22 <_fflush_r+0x1a>
 8007f1e:	f7fe fa0f 	bl	8006340 <__sinit>
 8007f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0f3      	beq.n	8007f12 <_fflush_r+0xa>
 8007f2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f2c:	07d0      	lsls	r0, r2, #31
 8007f2e:	d404      	bmi.n	8007f3a <_fflush_r+0x32>
 8007f30:	0599      	lsls	r1, r3, #22
 8007f32:	d402      	bmi.n	8007f3a <_fflush_r+0x32>
 8007f34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f36:	f7fe fb1c 	bl	8006572 <__retarget_lock_acquire_recursive>
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	4621      	mov	r1, r4
 8007f3e:	f7ff ff63 	bl	8007e08 <__sflush_r>
 8007f42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f44:	4605      	mov	r5, r0
 8007f46:	07da      	lsls	r2, r3, #31
 8007f48:	d4e4      	bmi.n	8007f14 <_fflush_r+0xc>
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	059b      	lsls	r3, r3, #22
 8007f4e:	d4e1      	bmi.n	8007f14 <_fflush_r+0xc>
 8007f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f52:	f7fe fb0f 	bl	8006574 <__retarget_lock_release_recursive>
 8007f56:	e7dd      	b.n	8007f14 <_fflush_r+0xc>

08007f58 <memmove>:
 8007f58:	4288      	cmp	r0, r1
 8007f5a:	b510      	push	{r4, lr}
 8007f5c:	eb01 0402 	add.w	r4, r1, r2
 8007f60:	d902      	bls.n	8007f68 <memmove+0x10>
 8007f62:	4284      	cmp	r4, r0
 8007f64:	4623      	mov	r3, r4
 8007f66:	d807      	bhi.n	8007f78 <memmove+0x20>
 8007f68:	1e43      	subs	r3, r0, #1
 8007f6a:	42a1      	cmp	r1, r4
 8007f6c:	d008      	beq.n	8007f80 <memmove+0x28>
 8007f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f76:	e7f8      	b.n	8007f6a <memmove+0x12>
 8007f78:	4601      	mov	r1, r0
 8007f7a:	4402      	add	r2, r0
 8007f7c:	428a      	cmp	r2, r1
 8007f7e:	d100      	bne.n	8007f82 <memmove+0x2a>
 8007f80:	bd10      	pop	{r4, pc}
 8007f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f8a:	e7f7      	b.n	8007f7c <memmove+0x24>

08007f8c <_sbrk_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4d05      	ldr	r5, [pc, #20]	@ (8007fa8 <_sbrk_r+0x1c>)
 8007f92:	4604      	mov	r4, r0
 8007f94:	4608      	mov	r0, r1
 8007f96:	602b      	str	r3, [r5, #0]
 8007f98:	f7fa fbae 	bl	80026f8 <_sbrk>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d102      	bne.n	8007fa6 <_sbrk_r+0x1a>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	b103      	cbz	r3, 8007fa6 <_sbrk_r+0x1a>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	200004f8 	.word	0x200004f8

08007fac <__assert_func>:
 8007fac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fae:	4614      	mov	r4, r2
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	4b09      	ldr	r3, [pc, #36]	@ (8007fd8 <__assert_func+0x2c>)
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68d8      	ldr	r0, [r3, #12]
 8007fba:	b14c      	cbz	r4, 8007fd0 <__assert_func+0x24>
 8007fbc:	4b07      	ldr	r3, [pc, #28]	@ (8007fdc <__assert_func+0x30>)
 8007fbe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fc2:	9100      	str	r1, [sp, #0]
 8007fc4:	462b      	mov	r3, r5
 8007fc6:	4906      	ldr	r1, [pc, #24]	@ (8007fe0 <__assert_func+0x34>)
 8007fc8:	f000 f870 	bl	80080ac <fiprintf>
 8007fcc:	f000 f880 	bl	80080d0 <abort>
 8007fd0:	4b04      	ldr	r3, [pc, #16]	@ (8007fe4 <__assert_func+0x38>)
 8007fd2:	461c      	mov	r4, r3
 8007fd4:	e7f3      	b.n	8007fbe <__assert_func+0x12>
 8007fd6:	bf00      	nop
 8007fd8:	20000018 	.word	0x20000018
 8007fdc:	080095cf 	.word	0x080095cf
 8007fe0:	080095dc 	.word	0x080095dc
 8007fe4:	0800960a 	.word	0x0800960a

08007fe8 <_calloc_r>:
 8007fe8:	b570      	push	{r4, r5, r6, lr}
 8007fea:	fba1 5402 	umull	r5, r4, r1, r2
 8007fee:	b934      	cbnz	r4, 8007ffe <_calloc_r+0x16>
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	f7ff f9ab 	bl	800734c <_malloc_r>
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	b928      	cbnz	r0, 8008006 <_calloc_r+0x1e>
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	bd70      	pop	{r4, r5, r6, pc}
 8007ffe:	220c      	movs	r2, #12
 8008000:	2600      	movs	r6, #0
 8008002:	6002      	str	r2, [r0, #0]
 8008004:	e7f9      	b.n	8007ffa <_calloc_r+0x12>
 8008006:	462a      	mov	r2, r5
 8008008:	4621      	mov	r1, r4
 800800a:	f7fe fa34 	bl	8006476 <memset>
 800800e:	e7f4      	b.n	8007ffa <_calloc_r+0x12>

08008010 <__ascii_mbtowc>:
 8008010:	b082      	sub	sp, #8
 8008012:	b901      	cbnz	r1, 8008016 <__ascii_mbtowc+0x6>
 8008014:	a901      	add	r1, sp, #4
 8008016:	b142      	cbz	r2, 800802a <__ascii_mbtowc+0x1a>
 8008018:	b14b      	cbz	r3, 800802e <__ascii_mbtowc+0x1e>
 800801a:	7813      	ldrb	r3, [r2, #0]
 800801c:	600b      	str	r3, [r1, #0]
 800801e:	7812      	ldrb	r2, [r2, #0]
 8008020:	1e10      	subs	r0, r2, #0
 8008022:	bf18      	it	ne
 8008024:	2001      	movne	r0, #1
 8008026:	b002      	add	sp, #8
 8008028:	4770      	bx	lr
 800802a:	4610      	mov	r0, r2
 800802c:	e7fb      	b.n	8008026 <__ascii_mbtowc+0x16>
 800802e:	f06f 0001 	mvn.w	r0, #1
 8008032:	e7f8      	b.n	8008026 <__ascii_mbtowc+0x16>

08008034 <_realloc_r>:
 8008034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008038:	4607      	mov	r7, r0
 800803a:	4614      	mov	r4, r2
 800803c:	460d      	mov	r5, r1
 800803e:	b921      	cbnz	r1, 800804a <_realloc_r+0x16>
 8008040:	4611      	mov	r1, r2
 8008042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008046:	f7ff b981 	b.w	800734c <_malloc_r>
 800804a:	b92a      	cbnz	r2, 8008058 <_realloc_r+0x24>
 800804c:	f7ff f90c 	bl	8007268 <_free_r>
 8008050:	4625      	mov	r5, r4
 8008052:	4628      	mov	r0, r5
 8008054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008058:	f000 f841 	bl	80080de <_malloc_usable_size_r>
 800805c:	4284      	cmp	r4, r0
 800805e:	4606      	mov	r6, r0
 8008060:	d802      	bhi.n	8008068 <_realloc_r+0x34>
 8008062:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008066:	d8f4      	bhi.n	8008052 <_realloc_r+0x1e>
 8008068:	4621      	mov	r1, r4
 800806a:	4638      	mov	r0, r7
 800806c:	f7ff f96e 	bl	800734c <_malloc_r>
 8008070:	4680      	mov	r8, r0
 8008072:	b908      	cbnz	r0, 8008078 <_realloc_r+0x44>
 8008074:	4645      	mov	r5, r8
 8008076:	e7ec      	b.n	8008052 <_realloc_r+0x1e>
 8008078:	42b4      	cmp	r4, r6
 800807a:	4622      	mov	r2, r4
 800807c:	4629      	mov	r1, r5
 800807e:	bf28      	it	cs
 8008080:	4632      	movcs	r2, r6
 8008082:	f7fe fa86 	bl	8006592 <memcpy>
 8008086:	4629      	mov	r1, r5
 8008088:	4638      	mov	r0, r7
 800808a:	f7ff f8ed 	bl	8007268 <_free_r>
 800808e:	e7f1      	b.n	8008074 <_realloc_r+0x40>

08008090 <__ascii_wctomb>:
 8008090:	4603      	mov	r3, r0
 8008092:	4608      	mov	r0, r1
 8008094:	b141      	cbz	r1, 80080a8 <__ascii_wctomb+0x18>
 8008096:	2aff      	cmp	r2, #255	@ 0xff
 8008098:	d904      	bls.n	80080a4 <__ascii_wctomb+0x14>
 800809a:	228a      	movs	r2, #138	@ 0x8a
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	4770      	bx	lr
 80080a4:	2001      	movs	r0, #1
 80080a6:	700a      	strb	r2, [r1, #0]
 80080a8:	4770      	bx	lr
	...

080080ac <fiprintf>:
 80080ac:	b40e      	push	{r1, r2, r3}
 80080ae:	b503      	push	{r0, r1, lr}
 80080b0:	4601      	mov	r1, r0
 80080b2:	ab03      	add	r3, sp, #12
 80080b4:	4805      	ldr	r0, [pc, #20]	@ (80080cc <fiprintf+0x20>)
 80080b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ba:	6800      	ldr	r0, [r0, #0]
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	f000 f83d 	bl	800813c <_vfiprintf_r>
 80080c2:	b002      	add	sp, #8
 80080c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080c8:	b003      	add	sp, #12
 80080ca:	4770      	bx	lr
 80080cc:	20000018 	.word	0x20000018

080080d0 <abort>:
 80080d0:	2006      	movs	r0, #6
 80080d2:	b508      	push	{r3, lr}
 80080d4:	f000 fa06 	bl	80084e4 <raise>
 80080d8:	2001      	movs	r0, #1
 80080da:	f7fa fa98 	bl	800260e <_exit>

080080de <_malloc_usable_size_r>:
 80080de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080e2:	1f18      	subs	r0, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bfbc      	itt	lt
 80080e8:	580b      	ldrlt	r3, [r1, r0]
 80080ea:	18c0      	addlt	r0, r0, r3
 80080ec:	4770      	bx	lr

080080ee <__sfputc_r>:
 80080ee:	6893      	ldr	r3, [r2, #8]
 80080f0:	b410      	push	{r4}
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	6093      	str	r3, [r2, #8]
 80080f8:	da07      	bge.n	800810a <__sfputc_r+0x1c>
 80080fa:	6994      	ldr	r4, [r2, #24]
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	db01      	blt.n	8008104 <__sfputc_r+0x16>
 8008100:	290a      	cmp	r1, #10
 8008102:	d102      	bne.n	800810a <__sfputc_r+0x1c>
 8008104:	bc10      	pop	{r4}
 8008106:	f000 b931 	b.w	800836c <__swbuf_r>
 800810a:	6813      	ldr	r3, [r2, #0]
 800810c:	1c58      	adds	r0, r3, #1
 800810e:	6010      	str	r0, [r2, #0]
 8008110:	7019      	strb	r1, [r3, #0]
 8008112:	4608      	mov	r0, r1
 8008114:	bc10      	pop	{r4}
 8008116:	4770      	bx	lr

08008118 <__sfputs_r>:
 8008118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811a:	4606      	mov	r6, r0
 800811c:	460f      	mov	r7, r1
 800811e:	4614      	mov	r4, r2
 8008120:	18d5      	adds	r5, r2, r3
 8008122:	42ac      	cmp	r4, r5
 8008124:	d101      	bne.n	800812a <__sfputs_r+0x12>
 8008126:	2000      	movs	r0, #0
 8008128:	e007      	b.n	800813a <__sfputs_r+0x22>
 800812a:	463a      	mov	r2, r7
 800812c:	4630      	mov	r0, r6
 800812e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008132:	f7ff ffdc 	bl	80080ee <__sfputc_r>
 8008136:	1c43      	adds	r3, r0, #1
 8008138:	d1f3      	bne.n	8008122 <__sfputs_r+0xa>
 800813a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800813c <_vfiprintf_r>:
 800813c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	460d      	mov	r5, r1
 8008142:	4614      	mov	r4, r2
 8008144:	4698      	mov	r8, r3
 8008146:	4606      	mov	r6, r0
 8008148:	b09d      	sub	sp, #116	@ 0x74
 800814a:	b118      	cbz	r0, 8008154 <_vfiprintf_r+0x18>
 800814c:	6a03      	ldr	r3, [r0, #32]
 800814e:	b90b      	cbnz	r3, 8008154 <_vfiprintf_r+0x18>
 8008150:	f7fe f8f6 	bl	8006340 <__sinit>
 8008154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008156:	07d9      	lsls	r1, r3, #31
 8008158:	d405      	bmi.n	8008166 <_vfiprintf_r+0x2a>
 800815a:	89ab      	ldrh	r3, [r5, #12]
 800815c:	059a      	lsls	r2, r3, #22
 800815e:	d402      	bmi.n	8008166 <_vfiprintf_r+0x2a>
 8008160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008162:	f7fe fa06 	bl	8006572 <__retarget_lock_acquire_recursive>
 8008166:	89ab      	ldrh	r3, [r5, #12]
 8008168:	071b      	lsls	r3, r3, #28
 800816a:	d501      	bpl.n	8008170 <_vfiprintf_r+0x34>
 800816c:	692b      	ldr	r3, [r5, #16]
 800816e:	b99b      	cbnz	r3, 8008198 <_vfiprintf_r+0x5c>
 8008170:	4629      	mov	r1, r5
 8008172:	4630      	mov	r0, r6
 8008174:	f000 f938 	bl	80083e8 <__swsetup_r>
 8008178:	b170      	cbz	r0, 8008198 <_vfiprintf_r+0x5c>
 800817a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800817c:	07dc      	lsls	r4, r3, #31
 800817e:	d504      	bpl.n	800818a <_vfiprintf_r+0x4e>
 8008180:	f04f 30ff 	mov.w	r0, #4294967295
 8008184:	b01d      	add	sp, #116	@ 0x74
 8008186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818a:	89ab      	ldrh	r3, [r5, #12]
 800818c:	0598      	lsls	r0, r3, #22
 800818e:	d4f7      	bmi.n	8008180 <_vfiprintf_r+0x44>
 8008190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008192:	f7fe f9ef 	bl	8006574 <__retarget_lock_release_recursive>
 8008196:	e7f3      	b.n	8008180 <_vfiprintf_r+0x44>
 8008198:	2300      	movs	r3, #0
 800819a:	9309      	str	r3, [sp, #36]	@ 0x24
 800819c:	2320      	movs	r3, #32
 800819e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081a2:	2330      	movs	r3, #48	@ 0x30
 80081a4:	f04f 0901 	mov.w	r9, #1
 80081a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008358 <_vfiprintf_r+0x21c>
 80081b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081b4:	4623      	mov	r3, r4
 80081b6:	469a      	mov	sl, r3
 80081b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081bc:	b10a      	cbz	r2, 80081c2 <_vfiprintf_r+0x86>
 80081be:	2a25      	cmp	r2, #37	@ 0x25
 80081c0:	d1f9      	bne.n	80081b6 <_vfiprintf_r+0x7a>
 80081c2:	ebba 0b04 	subs.w	fp, sl, r4
 80081c6:	d00b      	beq.n	80081e0 <_vfiprintf_r+0xa4>
 80081c8:	465b      	mov	r3, fp
 80081ca:	4622      	mov	r2, r4
 80081cc:	4629      	mov	r1, r5
 80081ce:	4630      	mov	r0, r6
 80081d0:	f7ff ffa2 	bl	8008118 <__sfputs_r>
 80081d4:	3001      	adds	r0, #1
 80081d6:	f000 80a7 	beq.w	8008328 <_vfiprintf_r+0x1ec>
 80081da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081dc:	445a      	add	r2, fp
 80081de:	9209      	str	r2, [sp, #36]	@ 0x24
 80081e0:	f89a 3000 	ldrb.w	r3, [sl]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 809f 	beq.w	8008328 <_vfiprintf_r+0x1ec>
 80081ea:	2300      	movs	r3, #0
 80081ec:	f04f 32ff 	mov.w	r2, #4294967295
 80081f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081f4:	f10a 0a01 	add.w	sl, sl, #1
 80081f8:	9304      	str	r3, [sp, #16]
 80081fa:	9307      	str	r3, [sp, #28]
 80081fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008200:	931a      	str	r3, [sp, #104]	@ 0x68
 8008202:	4654      	mov	r4, sl
 8008204:	2205      	movs	r2, #5
 8008206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800820a:	4853      	ldr	r0, [pc, #332]	@ (8008358 <_vfiprintf_r+0x21c>)
 800820c:	f7fe f9b3 	bl	8006576 <memchr>
 8008210:	9a04      	ldr	r2, [sp, #16]
 8008212:	b9d8      	cbnz	r0, 800824c <_vfiprintf_r+0x110>
 8008214:	06d1      	lsls	r1, r2, #27
 8008216:	bf44      	itt	mi
 8008218:	2320      	movmi	r3, #32
 800821a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800821e:	0713      	lsls	r3, r2, #28
 8008220:	bf44      	itt	mi
 8008222:	232b      	movmi	r3, #43	@ 0x2b
 8008224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008228:	f89a 3000 	ldrb.w	r3, [sl]
 800822c:	2b2a      	cmp	r3, #42	@ 0x2a
 800822e:	d015      	beq.n	800825c <_vfiprintf_r+0x120>
 8008230:	4654      	mov	r4, sl
 8008232:	2000      	movs	r0, #0
 8008234:	f04f 0c0a 	mov.w	ip, #10
 8008238:	9a07      	ldr	r2, [sp, #28]
 800823a:	4621      	mov	r1, r4
 800823c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008240:	3b30      	subs	r3, #48	@ 0x30
 8008242:	2b09      	cmp	r3, #9
 8008244:	d94b      	bls.n	80082de <_vfiprintf_r+0x1a2>
 8008246:	b1b0      	cbz	r0, 8008276 <_vfiprintf_r+0x13a>
 8008248:	9207      	str	r2, [sp, #28]
 800824a:	e014      	b.n	8008276 <_vfiprintf_r+0x13a>
 800824c:	eba0 0308 	sub.w	r3, r0, r8
 8008250:	fa09 f303 	lsl.w	r3, r9, r3
 8008254:	4313      	orrs	r3, r2
 8008256:	46a2      	mov	sl, r4
 8008258:	9304      	str	r3, [sp, #16]
 800825a:	e7d2      	b.n	8008202 <_vfiprintf_r+0xc6>
 800825c:	9b03      	ldr	r3, [sp, #12]
 800825e:	1d19      	adds	r1, r3, #4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	9103      	str	r1, [sp, #12]
 8008264:	2b00      	cmp	r3, #0
 8008266:	bfbb      	ittet	lt
 8008268:	425b      	neglt	r3, r3
 800826a:	f042 0202 	orrlt.w	r2, r2, #2
 800826e:	9307      	strge	r3, [sp, #28]
 8008270:	9307      	strlt	r3, [sp, #28]
 8008272:	bfb8      	it	lt
 8008274:	9204      	strlt	r2, [sp, #16]
 8008276:	7823      	ldrb	r3, [r4, #0]
 8008278:	2b2e      	cmp	r3, #46	@ 0x2e
 800827a:	d10a      	bne.n	8008292 <_vfiprintf_r+0x156>
 800827c:	7863      	ldrb	r3, [r4, #1]
 800827e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008280:	d132      	bne.n	80082e8 <_vfiprintf_r+0x1ac>
 8008282:	9b03      	ldr	r3, [sp, #12]
 8008284:	3402      	adds	r4, #2
 8008286:	1d1a      	adds	r2, r3, #4
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	9203      	str	r2, [sp, #12]
 800828c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008290:	9305      	str	r3, [sp, #20]
 8008292:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800835c <_vfiprintf_r+0x220>
 8008296:	2203      	movs	r2, #3
 8008298:	4650      	mov	r0, sl
 800829a:	7821      	ldrb	r1, [r4, #0]
 800829c:	f7fe f96b 	bl	8006576 <memchr>
 80082a0:	b138      	cbz	r0, 80082b2 <_vfiprintf_r+0x176>
 80082a2:	2240      	movs	r2, #64	@ 0x40
 80082a4:	9b04      	ldr	r3, [sp, #16]
 80082a6:	eba0 000a 	sub.w	r0, r0, sl
 80082aa:	4082      	lsls	r2, r0
 80082ac:	4313      	orrs	r3, r2
 80082ae:	3401      	adds	r4, #1
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b6:	2206      	movs	r2, #6
 80082b8:	4829      	ldr	r0, [pc, #164]	@ (8008360 <_vfiprintf_r+0x224>)
 80082ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082be:	f7fe f95a 	bl	8006576 <memchr>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d03f      	beq.n	8008346 <_vfiprintf_r+0x20a>
 80082c6:	4b27      	ldr	r3, [pc, #156]	@ (8008364 <_vfiprintf_r+0x228>)
 80082c8:	bb1b      	cbnz	r3, 8008312 <_vfiprintf_r+0x1d6>
 80082ca:	9b03      	ldr	r3, [sp, #12]
 80082cc:	3307      	adds	r3, #7
 80082ce:	f023 0307 	bic.w	r3, r3, #7
 80082d2:	3308      	adds	r3, #8
 80082d4:	9303      	str	r3, [sp, #12]
 80082d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082d8:	443b      	add	r3, r7
 80082da:	9309      	str	r3, [sp, #36]	@ 0x24
 80082dc:	e76a      	b.n	80081b4 <_vfiprintf_r+0x78>
 80082de:	460c      	mov	r4, r1
 80082e0:	2001      	movs	r0, #1
 80082e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80082e6:	e7a8      	b.n	800823a <_vfiprintf_r+0xfe>
 80082e8:	2300      	movs	r3, #0
 80082ea:	f04f 0c0a 	mov.w	ip, #10
 80082ee:	4619      	mov	r1, r3
 80082f0:	3401      	adds	r4, #1
 80082f2:	9305      	str	r3, [sp, #20]
 80082f4:	4620      	mov	r0, r4
 80082f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082fa:	3a30      	subs	r2, #48	@ 0x30
 80082fc:	2a09      	cmp	r2, #9
 80082fe:	d903      	bls.n	8008308 <_vfiprintf_r+0x1cc>
 8008300:	2b00      	cmp	r3, #0
 8008302:	d0c6      	beq.n	8008292 <_vfiprintf_r+0x156>
 8008304:	9105      	str	r1, [sp, #20]
 8008306:	e7c4      	b.n	8008292 <_vfiprintf_r+0x156>
 8008308:	4604      	mov	r4, r0
 800830a:	2301      	movs	r3, #1
 800830c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008310:	e7f0      	b.n	80082f4 <_vfiprintf_r+0x1b8>
 8008312:	ab03      	add	r3, sp, #12
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	462a      	mov	r2, r5
 8008318:	4630      	mov	r0, r6
 800831a:	4b13      	ldr	r3, [pc, #76]	@ (8008368 <_vfiprintf_r+0x22c>)
 800831c:	a904      	add	r1, sp, #16
 800831e:	f7fd fbc7 	bl	8005ab0 <_printf_float>
 8008322:	4607      	mov	r7, r0
 8008324:	1c78      	adds	r0, r7, #1
 8008326:	d1d6      	bne.n	80082d6 <_vfiprintf_r+0x19a>
 8008328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800832a:	07d9      	lsls	r1, r3, #31
 800832c:	d405      	bmi.n	800833a <_vfiprintf_r+0x1fe>
 800832e:	89ab      	ldrh	r3, [r5, #12]
 8008330:	059a      	lsls	r2, r3, #22
 8008332:	d402      	bmi.n	800833a <_vfiprintf_r+0x1fe>
 8008334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008336:	f7fe f91d 	bl	8006574 <__retarget_lock_release_recursive>
 800833a:	89ab      	ldrh	r3, [r5, #12]
 800833c:	065b      	lsls	r3, r3, #25
 800833e:	f53f af1f 	bmi.w	8008180 <_vfiprintf_r+0x44>
 8008342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008344:	e71e      	b.n	8008184 <_vfiprintf_r+0x48>
 8008346:	ab03      	add	r3, sp, #12
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	462a      	mov	r2, r5
 800834c:	4630      	mov	r0, r6
 800834e:	4b06      	ldr	r3, [pc, #24]	@ (8008368 <_vfiprintf_r+0x22c>)
 8008350:	a904      	add	r1, sp, #16
 8008352:	f7fd fe4b 	bl	8005fec <_printf_i>
 8008356:	e7e4      	b.n	8008322 <_vfiprintf_r+0x1e6>
 8008358:	080095b4 	.word	0x080095b4
 800835c:	080095ba 	.word	0x080095ba
 8008360:	080095be 	.word	0x080095be
 8008364:	08005ab1 	.word	0x08005ab1
 8008368:	08008119 	.word	0x08008119

0800836c <__swbuf_r>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	460e      	mov	r6, r1
 8008370:	4614      	mov	r4, r2
 8008372:	4605      	mov	r5, r0
 8008374:	b118      	cbz	r0, 800837e <__swbuf_r+0x12>
 8008376:	6a03      	ldr	r3, [r0, #32]
 8008378:	b90b      	cbnz	r3, 800837e <__swbuf_r+0x12>
 800837a:	f7fd ffe1 	bl	8006340 <__sinit>
 800837e:	69a3      	ldr	r3, [r4, #24]
 8008380:	60a3      	str	r3, [r4, #8]
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	071a      	lsls	r2, r3, #28
 8008386:	d501      	bpl.n	800838c <__swbuf_r+0x20>
 8008388:	6923      	ldr	r3, [r4, #16]
 800838a:	b943      	cbnz	r3, 800839e <__swbuf_r+0x32>
 800838c:	4621      	mov	r1, r4
 800838e:	4628      	mov	r0, r5
 8008390:	f000 f82a 	bl	80083e8 <__swsetup_r>
 8008394:	b118      	cbz	r0, 800839e <__swbuf_r+0x32>
 8008396:	f04f 37ff 	mov.w	r7, #4294967295
 800839a:	4638      	mov	r0, r7
 800839c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	6922      	ldr	r2, [r4, #16]
 80083a2:	b2f6      	uxtb	r6, r6
 80083a4:	1a98      	subs	r0, r3, r2
 80083a6:	6963      	ldr	r3, [r4, #20]
 80083a8:	4637      	mov	r7, r6
 80083aa:	4283      	cmp	r3, r0
 80083ac:	dc05      	bgt.n	80083ba <__swbuf_r+0x4e>
 80083ae:	4621      	mov	r1, r4
 80083b0:	4628      	mov	r0, r5
 80083b2:	f7ff fda9 	bl	8007f08 <_fflush_r>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d1ed      	bne.n	8008396 <__swbuf_r+0x2a>
 80083ba:	68a3      	ldr	r3, [r4, #8]
 80083bc:	3b01      	subs	r3, #1
 80083be:	60a3      	str	r3, [r4, #8]
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	6022      	str	r2, [r4, #0]
 80083c6:	701e      	strb	r6, [r3, #0]
 80083c8:	6962      	ldr	r2, [r4, #20]
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d004      	beq.n	80083da <__swbuf_r+0x6e>
 80083d0:	89a3      	ldrh	r3, [r4, #12]
 80083d2:	07db      	lsls	r3, r3, #31
 80083d4:	d5e1      	bpl.n	800839a <__swbuf_r+0x2e>
 80083d6:	2e0a      	cmp	r6, #10
 80083d8:	d1df      	bne.n	800839a <__swbuf_r+0x2e>
 80083da:	4621      	mov	r1, r4
 80083dc:	4628      	mov	r0, r5
 80083de:	f7ff fd93 	bl	8007f08 <_fflush_r>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d0d9      	beq.n	800839a <__swbuf_r+0x2e>
 80083e6:	e7d6      	b.n	8008396 <__swbuf_r+0x2a>

080083e8 <__swsetup_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4b29      	ldr	r3, [pc, #164]	@ (8008490 <__swsetup_r+0xa8>)
 80083ec:	4605      	mov	r5, r0
 80083ee:	6818      	ldr	r0, [r3, #0]
 80083f0:	460c      	mov	r4, r1
 80083f2:	b118      	cbz	r0, 80083fc <__swsetup_r+0x14>
 80083f4:	6a03      	ldr	r3, [r0, #32]
 80083f6:	b90b      	cbnz	r3, 80083fc <__swsetup_r+0x14>
 80083f8:	f7fd ffa2 	bl	8006340 <__sinit>
 80083fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008400:	0719      	lsls	r1, r3, #28
 8008402:	d422      	bmi.n	800844a <__swsetup_r+0x62>
 8008404:	06da      	lsls	r2, r3, #27
 8008406:	d407      	bmi.n	8008418 <__swsetup_r+0x30>
 8008408:	2209      	movs	r2, #9
 800840a:	602a      	str	r2, [r5, #0]
 800840c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008410:	f04f 30ff 	mov.w	r0, #4294967295
 8008414:	81a3      	strh	r3, [r4, #12]
 8008416:	e033      	b.n	8008480 <__swsetup_r+0x98>
 8008418:	0758      	lsls	r0, r3, #29
 800841a:	d512      	bpl.n	8008442 <__swsetup_r+0x5a>
 800841c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800841e:	b141      	cbz	r1, 8008432 <__swsetup_r+0x4a>
 8008420:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008424:	4299      	cmp	r1, r3
 8008426:	d002      	beq.n	800842e <__swsetup_r+0x46>
 8008428:	4628      	mov	r0, r5
 800842a:	f7fe ff1d 	bl	8007268 <_free_r>
 800842e:	2300      	movs	r3, #0
 8008430:	6363      	str	r3, [r4, #52]	@ 0x34
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008438:	81a3      	strh	r3, [r4, #12]
 800843a:	2300      	movs	r3, #0
 800843c:	6063      	str	r3, [r4, #4]
 800843e:	6923      	ldr	r3, [r4, #16]
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	f043 0308 	orr.w	r3, r3, #8
 8008448:	81a3      	strh	r3, [r4, #12]
 800844a:	6923      	ldr	r3, [r4, #16]
 800844c:	b94b      	cbnz	r3, 8008462 <__swsetup_r+0x7a>
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008458:	d003      	beq.n	8008462 <__swsetup_r+0x7a>
 800845a:	4621      	mov	r1, r4
 800845c:	4628      	mov	r0, r5
 800845e:	f000 f882 	bl	8008566 <__smakebuf_r>
 8008462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008466:	f013 0201 	ands.w	r2, r3, #1
 800846a:	d00a      	beq.n	8008482 <__swsetup_r+0x9a>
 800846c:	2200      	movs	r2, #0
 800846e:	60a2      	str	r2, [r4, #8]
 8008470:	6962      	ldr	r2, [r4, #20]
 8008472:	4252      	negs	r2, r2
 8008474:	61a2      	str	r2, [r4, #24]
 8008476:	6922      	ldr	r2, [r4, #16]
 8008478:	b942      	cbnz	r2, 800848c <__swsetup_r+0xa4>
 800847a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800847e:	d1c5      	bne.n	800840c <__swsetup_r+0x24>
 8008480:	bd38      	pop	{r3, r4, r5, pc}
 8008482:	0799      	lsls	r1, r3, #30
 8008484:	bf58      	it	pl
 8008486:	6962      	ldrpl	r2, [r4, #20]
 8008488:	60a2      	str	r2, [r4, #8]
 800848a:	e7f4      	b.n	8008476 <__swsetup_r+0x8e>
 800848c:	2000      	movs	r0, #0
 800848e:	e7f7      	b.n	8008480 <__swsetup_r+0x98>
 8008490:	20000018 	.word	0x20000018

08008494 <_raise_r>:
 8008494:	291f      	cmp	r1, #31
 8008496:	b538      	push	{r3, r4, r5, lr}
 8008498:	4605      	mov	r5, r0
 800849a:	460c      	mov	r4, r1
 800849c:	d904      	bls.n	80084a8 <_raise_r+0x14>
 800849e:	2316      	movs	r3, #22
 80084a0:	6003      	str	r3, [r0, #0]
 80084a2:	f04f 30ff 	mov.w	r0, #4294967295
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80084aa:	b112      	cbz	r2, 80084b2 <_raise_r+0x1e>
 80084ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084b0:	b94b      	cbnz	r3, 80084c6 <_raise_r+0x32>
 80084b2:	4628      	mov	r0, r5
 80084b4:	f000 f830 	bl	8008518 <_getpid_r>
 80084b8:	4622      	mov	r2, r4
 80084ba:	4601      	mov	r1, r0
 80084bc:	4628      	mov	r0, r5
 80084be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084c2:	f000 b817 	b.w	80084f4 <_kill_r>
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d00a      	beq.n	80084e0 <_raise_r+0x4c>
 80084ca:	1c59      	adds	r1, r3, #1
 80084cc:	d103      	bne.n	80084d6 <_raise_r+0x42>
 80084ce:	2316      	movs	r3, #22
 80084d0:	6003      	str	r3, [r0, #0]
 80084d2:	2001      	movs	r0, #1
 80084d4:	e7e7      	b.n	80084a6 <_raise_r+0x12>
 80084d6:	2100      	movs	r1, #0
 80084d8:	4620      	mov	r0, r4
 80084da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80084de:	4798      	blx	r3
 80084e0:	2000      	movs	r0, #0
 80084e2:	e7e0      	b.n	80084a6 <_raise_r+0x12>

080084e4 <raise>:
 80084e4:	4b02      	ldr	r3, [pc, #8]	@ (80084f0 <raise+0xc>)
 80084e6:	4601      	mov	r1, r0
 80084e8:	6818      	ldr	r0, [r3, #0]
 80084ea:	f7ff bfd3 	b.w	8008494 <_raise_r>
 80084ee:	bf00      	nop
 80084f0:	20000018 	.word	0x20000018

080084f4 <_kill_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	2300      	movs	r3, #0
 80084f8:	4d06      	ldr	r5, [pc, #24]	@ (8008514 <_kill_r+0x20>)
 80084fa:	4604      	mov	r4, r0
 80084fc:	4608      	mov	r0, r1
 80084fe:	4611      	mov	r1, r2
 8008500:	602b      	str	r3, [r5, #0]
 8008502:	f7fa f874 	bl	80025ee <_kill>
 8008506:	1c43      	adds	r3, r0, #1
 8008508:	d102      	bne.n	8008510 <_kill_r+0x1c>
 800850a:	682b      	ldr	r3, [r5, #0]
 800850c:	b103      	cbz	r3, 8008510 <_kill_r+0x1c>
 800850e:	6023      	str	r3, [r4, #0]
 8008510:	bd38      	pop	{r3, r4, r5, pc}
 8008512:	bf00      	nop
 8008514:	200004f8 	.word	0x200004f8

08008518 <_getpid_r>:
 8008518:	f7fa b862 	b.w	80025e0 <_getpid>

0800851c <__swhatbuf_r>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	460c      	mov	r4, r1
 8008520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008524:	4615      	mov	r5, r2
 8008526:	2900      	cmp	r1, #0
 8008528:	461e      	mov	r6, r3
 800852a:	b096      	sub	sp, #88	@ 0x58
 800852c:	da0c      	bge.n	8008548 <__swhatbuf_r+0x2c>
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	2100      	movs	r1, #0
 8008532:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008536:	bf14      	ite	ne
 8008538:	2340      	movne	r3, #64	@ 0x40
 800853a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800853e:	2000      	movs	r0, #0
 8008540:	6031      	str	r1, [r6, #0]
 8008542:	602b      	str	r3, [r5, #0]
 8008544:	b016      	add	sp, #88	@ 0x58
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	466a      	mov	r2, sp
 800854a:	f000 f849 	bl	80085e0 <_fstat_r>
 800854e:	2800      	cmp	r0, #0
 8008550:	dbed      	blt.n	800852e <__swhatbuf_r+0x12>
 8008552:	9901      	ldr	r1, [sp, #4]
 8008554:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008558:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800855c:	4259      	negs	r1, r3
 800855e:	4159      	adcs	r1, r3
 8008560:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008564:	e7eb      	b.n	800853e <__swhatbuf_r+0x22>

08008566 <__smakebuf_r>:
 8008566:	898b      	ldrh	r3, [r1, #12]
 8008568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800856a:	079d      	lsls	r5, r3, #30
 800856c:	4606      	mov	r6, r0
 800856e:	460c      	mov	r4, r1
 8008570:	d507      	bpl.n	8008582 <__smakebuf_r+0x1c>
 8008572:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008576:	6023      	str	r3, [r4, #0]
 8008578:	6123      	str	r3, [r4, #16]
 800857a:	2301      	movs	r3, #1
 800857c:	6163      	str	r3, [r4, #20]
 800857e:	b003      	add	sp, #12
 8008580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008582:	466a      	mov	r2, sp
 8008584:	ab01      	add	r3, sp, #4
 8008586:	f7ff ffc9 	bl	800851c <__swhatbuf_r>
 800858a:	9f00      	ldr	r7, [sp, #0]
 800858c:	4605      	mov	r5, r0
 800858e:	4639      	mov	r1, r7
 8008590:	4630      	mov	r0, r6
 8008592:	f7fe fedb 	bl	800734c <_malloc_r>
 8008596:	b948      	cbnz	r0, 80085ac <__smakebuf_r+0x46>
 8008598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800859c:	059a      	lsls	r2, r3, #22
 800859e:	d4ee      	bmi.n	800857e <__smakebuf_r+0x18>
 80085a0:	f023 0303 	bic.w	r3, r3, #3
 80085a4:	f043 0302 	orr.w	r3, r3, #2
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	e7e2      	b.n	8008572 <__smakebuf_r+0xc>
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80085b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085b6:	81a3      	strh	r3, [r4, #12]
 80085b8:	9b01      	ldr	r3, [sp, #4]
 80085ba:	6020      	str	r0, [r4, #0]
 80085bc:	b15b      	cbz	r3, 80085d6 <__smakebuf_r+0x70>
 80085be:	4630      	mov	r0, r6
 80085c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085c4:	f000 f81e 	bl	8008604 <_isatty_r>
 80085c8:	b128      	cbz	r0, 80085d6 <__smakebuf_r+0x70>
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	f023 0303 	bic.w	r3, r3, #3
 80085d0:	f043 0301 	orr.w	r3, r3, #1
 80085d4:	81a3      	strh	r3, [r4, #12]
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	431d      	orrs	r5, r3
 80085da:	81a5      	strh	r5, [r4, #12]
 80085dc:	e7cf      	b.n	800857e <__smakebuf_r+0x18>
	...

080085e0 <_fstat_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	2300      	movs	r3, #0
 80085e4:	4d06      	ldr	r5, [pc, #24]	@ (8008600 <_fstat_r+0x20>)
 80085e6:	4604      	mov	r4, r0
 80085e8:	4608      	mov	r0, r1
 80085ea:	4611      	mov	r1, r2
 80085ec:	602b      	str	r3, [r5, #0]
 80085ee:	f7fa f85d 	bl	80026ac <_fstat>
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	d102      	bne.n	80085fc <_fstat_r+0x1c>
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	b103      	cbz	r3, 80085fc <_fstat_r+0x1c>
 80085fa:	6023      	str	r3, [r4, #0]
 80085fc:	bd38      	pop	{r3, r4, r5, pc}
 80085fe:	bf00      	nop
 8008600:	200004f8 	.word	0x200004f8

08008604 <_isatty_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	2300      	movs	r3, #0
 8008608:	4d05      	ldr	r5, [pc, #20]	@ (8008620 <_isatty_r+0x1c>)
 800860a:	4604      	mov	r4, r0
 800860c:	4608      	mov	r0, r1
 800860e:	602b      	str	r3, [r5, #0]
 8008610:	f7fa f85b 	bl	80026ca <_isatty>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <_isatty_r+0x1a>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	b103      	cbz	r3, 800861e <_isatty_r+0x1a>
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	200004f8 	.word	0x200004f8

08008624 <pow>:
 8008624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008628:	4614      	mov	r4, r2
 800862a:	461d      	mov	r5, r3
 800862c:	4680      	mov	r8, r0
 800862e:	4689      	mov	r9, r1
 8008630:	f000 f866 	bl	8008700 <__ieee754_pow>
 8008634:	4622      	mov	r2, r4
 8008636:	4606      	mov	r6, r0
 8008638:	460f      	mov	r7, r1
 800863a:	462b      	mov	r3, r5
 800863c:	4620      	mov	r0, r4
 800863e:	4629      	mov	r1, r5
 8008640:	f7f8 f9e4 	bl	8000a0c <__aeabi_dcmpun>
 8008644:	bbc8      	cbnz	r0, 80086ba <pow+0x96>
 8008646:	2200      	movs	r2, #0
 8008648:	2300      	movs	r3, #0
 800864a:	4640      	mov	r0, r8
 800864c:	4649      	mov	r1, r9
 800864e:	f7f8 f9ab 	bl	80009a8 <__aeabi_dcmpeq>
 8008652:	b1b8      	cbz	r0, 8008684 <pow+0x60>
 8008654:	2200      	movs	r2, #0
 8008656:	2300      	movs	r3, #0
 8008658:	4620      	mov	r0, r4
 800865a:	4629      	mov	r1, r5
 800865c:	f7f8 f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 8008660:	2800      	cmp	r0, #0
 8008662:	d141      	bne.n	80086e8 <pow+0xc4>
 8008664:	4620      	mov	r0, r4
 8008666:	4629      	mov	r1, r5
 8008668:	f000 f844 	bl	80086f4 <finite>
 800866c:	b328      	cbz	r0, 80086ba <pow+0x96>
 800866e:	2200      	movs	r2, #0
 8008670:	2300      	movs	r3, #0
 8008672:	4620      	mov	r0, r4
 8008674:	4629      	mov	r1, r5
 8008676:	f7f8 f9a1 	bl	80009bc <__aeabi_dcmplt>
 800867a:	b1f0      	cbz	r0, 80086ba <pow+0x96>
 800867c:	f7fd ff4e 	bl	800651c <__errno>
 8008680:	2322      	movs	r3, #34	@ 0x22
 8008682:	e019      	b.n	80086b8 <pow+0x94>
 8008684:	4630      	mov	r0, r6
 8008686:	4639      	mov	r1, r7
 8008688:	f000 f834 	bl	80086f4 <finite>
 800868c:	b9c8      	cbnz	r0, 80086c2 <pow+0x9e>
 800868e:	4640      	mov	r0, r8
 8008690:	4649      	mov	r1, r9
 8008692:	f000 f82f 	bl	80086f4 <finite>
 8008696:	b1a0      	cbz	r0, 80086c2 <pow+0x9e>
 8008698:	4620      	mov	r0, r4
 800869a:	4629      	mov	r1, r5
 800869c:	f000 f82a 	bl	80086f4 <finite>
 80086a0:	b178      	cbz	r0, 80086c2 <pow+0x9e>
 80086a2:	4632      	mov	r2, r6
 80086a4:	463b      	mov	r3, r7
 80086a6:	4630      	mov	r0, r6
 80086a8:	4639      	mov	r1, r7
 80086aa:	f7f8 f9af 	bl	8000a0c <__aeabi_dcmpun>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d0e4      	beq.n	800867c <pow+0x58>
 80086b2:	f7fd ff33 	bl	800651c <__errno>
 80086b6:	2321      	movs	r3, #33	@ 0x21
 80086b8:	6003      	str	r3, [r0, #0]
 80086ba:	4630      	mov	r0, r6
 80086bc:	4639      	mov	r1, r7
 80086be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c2:	2200      	movs	r2, #0
 80086c4:	2300      	movs	r3, #0
 80086c6:	4630      	mov	r0, r6
 80086c8:	4639      	mov	r1, r7
 80086ca:	f7f8 f96d 	bl	80009a8 <__aeabi_dcmpeq>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	d0f3      	beq.n	80086ba <pow+0x96>
 80086d2:	4640      	mov	r0, r8
 80086d4:	4649      	mov	r1, r9
 80086d6:	f000 f80d 	bl	80086f4 <finite>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0ed      	beq.n	80086ba <pow+0x96>
 80086de:	4620      	mov	r0, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	f000 f807 	bl	80086f4 <finite>
 80086e6:	e7c8      	b.n	800867a <pow+0x56>
 80086e8:	2600      	movs	r6, #0
 80086ea:	4f01      	ldr	r7, [pc, #4]	@ (80086f0 <pow+0xcc>)
 80086ec:	e7e5      	b.n	80086ba <pow+0x96>
 80086ee:	bf00      	nop
 80086f0:	3ff00000 	.word	0x3ff00000

080086f4 <finite>:
 80086f4:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80086f8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80086fc:	0fc0      	lsrs	r0, r0, #31
 80086fe:	4770      	bx	lr

08008700 <__ieee754_pow>:
 8008700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008704:	b091      	sub	sp, #68	@ 0x44
 8008706:	e9cd 2300 	strd	r2, r3, [sp]
 800870a:	468b      	mov	fp, r1
 800870c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8008710:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8008714:	4682      	mov	sl, r0
 8008716:	ea57 0001 	orrs.w	r0, r7, r1
 800871a:	d112      	bne.n	8008742 <__ieee754_pow+0x42>
 800871c:	4653      	mov	r3, sl
 800871e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8008722:	18db      	adds	r3, r3, r3
 8008724:	4152      	adcs	r2, r2
 8008726:	4298      	cmp	r0, r3
 8008728:	4b93      	ldr	r3, [pc, #588]	@ (8008978 <__ieee754_pow+0x278>)
 800872a:	4193      	sbcs	r3, r2
 800872c:	f080 84cd 	bcs.w	80090ca <__ieee754_pow+0x9ca>
 8008730:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008734:	4650      	mov	r0, sl
 8008736:	4659      	mov	r1, fp
 8008738:	f7f7 fd18 	bl	800016c <__adddf3>
 800873c:	b011      	add	sp, #68	@ 0x44
 800873e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008742:	4b8e      	ldr	r3, [pc, #568]	@ (800897c <__ieee754_pow+0x27c>)
 8008744:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8008748:	429d      	cmp	r5, r3
 800874a:	465e      	mov	r6, fp
 800874c:	46d1      	mov	r9, sl
 800874e:	d80b      	bhi.n	8008768 <__ieee754_pow+0x68>
 8008750:	d105      	bne.n	800875e <__ieee754_pow+0x5e>
 8008752:	f1ba 0f00 	cmp.w	sl, #0
 8008756:	d1eb      	bne.n	8008730 <__ieee754_pow+0x30>
 8008758:	42af      	cmp	r7, r5
 800875a:	d8e9      	bhi.n	8008730 <__ieee754_pow+0x30>
 800875c:	e001      	b.n	8008762 <__ieee754_pow+0x62>
 800875e:	429f      	cmp	r7, r3
 8008760:	d802      	bhi.n	8008768 <__ieee754_pow+0x68>
 8008762:	429f      	cmp	r7, r3
 8008764:	d10f      	bne.n	8008786 <__ieee754_pow+0x86>
 8008766:	b171      	cbz	r1, 8008786 <__ieee754_pow+0x86>
 8008768:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800876c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008770:	ea56 0609 	orrs.w	r6, r6, r9
 8008774:	d1dc      	bne.n	8008730 <__ieee754_pow+0x30>
 8008776:	e9dd 3200 	ldrd	r3, r2, [sp]
 800877a:	18db      	adds	r3, r3, r3
 800877c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008780:	4152      	adcs	r2, r2
 8008782:	429e      	cmp	r6, r3
 8008784:	e7d0      	b.n	8008728 <__ieee754_pow+0x28>
 8008786:	2e00      	cmp	r6, #0
 8008788:	462b      	mov	r3, r5
 800878a:	da42      	bge.n	8008812 <__ieee754_pow+0x112>
 800878c:	4a7c      	ldr	r2, [pc, #496]	@ (8008980 <__ieee754_pow+0x280>)
 800878e:	4297      	cmp	r7, r2
 8008790:	d856      	bhi.n	8008840 <__ieee754_pow+0x140>
 8008792:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008796:	4297      	cmp	r7, r2
 8008798:	f240 84a6 	bls.w	80090e8 <__ieee754_pow+0x9e8>
 800879c:	153a      	asrs	r2, r7, #20
 800879e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80087a2:	2a14      	cmp	r2, #20
 80087a4:	dd18      	ble.n	80087d8 <__ieee754_pow+0xd8>
 80087a6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80087aa:	fa21 f402 	lsr.w	r4, r1, r2
 80087ae:	fa04 f202 	lsl.w	r2, r4, r2
 80087b2:	428a      	cmp	r2, r1
 80087b4:	f040 8498 	bne.w	80090e8 <__ieee754_pow+0x9e8>
 80087b8:	f004 0401 	and.w	r4, r4, #1
 80087bc:	f1c4 0402 	rsb	r4, r4, #2
 80087c0:	2900      	cmp	r1, #0
 80087c2:	d159      	bne.n	8008878 <__ieee754_pow+0x178>
 80087c4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80087c8:	d149      	bne.n	800885e <__ieee754_pow+0x15e>
 80087ca:	4652      	mov	r2, sl
 80087cc:	465b      	mov	r3, fp
 80087ce:	4650      	mov	r0, sl
 80087d0:	4659      	mov	r1, fp
 80087d2:	f7f7 fe81 	bl	80004d8 <__aeabi_dmul>
 80087d6:	e7b1      	b.n	800873c <__ieee754_pow+0x3c>
 80087d8:	2900      	cmp	r1, #0
 80087da:	d14c      	bne.n	8008876 <__ieee754_pow+0x176>
 80087dc:	f1c2 0214 	rsb	r2, r2, #20
 80087e0:	fa47 f402 	asr.w	r4, r7, r2
 80087e4:	fa04 f202 	lsl.w	r2, r4, r2
 80087e8:	42ba      	cmp	r2, r7
 80087ea:	f040 847a 	bne.w	80090e2 <__ieee754_pow+0x9e2>
 80087ee:	f004 0401 	and.w	r4, r4, #1
 80087f2:	f1c4 0402 	rsb	r4, r4, #2
 80087f6:	4a63      	ldr	r2, [pc, #396]	@ (8008984 <__ieee754_pow+0x284>)
 80087f8:	4297      	cmp	r7, r2
 80087fa:	d1e3      	bne.n	80087c4 <__ieee754_pow+0xc4>
 80087fc:	f1b8 0f00 	cmp.w	r8, #0
 8008800:	f280 846b 	bge.w	80090da <__ieee754_pow+0x9da>
 8008804:	4652      	mov	r2, sl
 8008806:	465b      	mov	r3, fp
 8008808:	2000      	movs	r0, #0
 800880a:	495e      	ldr	r1, [pc, #376]	@ (8008984 <__ieee754_pow+0x284>)
 800880c:	f7f7 ff8e 	bl	800072c <__aeabi_ddiv>
 8008810:	e794      	b.n	800873c <__ieee754_pow+0x3c>
 8008812:	2400      	movs	r4, #0
 8008814:	bb81      	cbnz	r1, 8008878 <__ieee754_pow+0x178>
 8008816:	4a59      	ldr	r2, [pc, #356]	@ (800897c <__ieee754_pow+0x27c>)
 8008818:	4297      	cmp	r7, r2
 800881a:	d1ec      	bne.n	80087f6 <__ieee754_pow+0xf6>
 800881c:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8008820:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8008824:	ea53 0309 	orrs.w	r3, r3, r9
 8008828:	f000 844f 	beq.w	80090ca <__ieee754_pow+0x9ca>
 800882c:	4b56      	ldr	r3, [pc, #344]	@ (8008988 <__ieee754_pow+0x288>)
 800882e:	429d      	cmp	r5, r3
 8008830:	d908      	bls.n	8008844 <__ieee754_pow+0x144>
 8008832:	f1b8 0f00 	cmp.w	r8, #0
 8008836:	f280 844c 	bge.w	80090d2 <__ieee754_pow+0x9d2>
 800883a:	2000      	movs	r0, #0
 800883c:	2100      	movs	r1, #0
 800883e:	e77d      	b.n	800873c <__ieee754_pow+0x3c>
 8008840:	2402      	movs	r4, #2
 8008842:	e7e7      	b.n	8008814 <__ieee754_pow+0x114>
 8008844:	f1b8 0f00 	cmp.w	r8, #0
 8008848:	f04f 0000 	mov.w	r0, #0
 800884c:	f04f 0100 	mov.w	r1, #0
 8008850:	f6bf af74 	bge.w	800873c <__ieee754_pow+0x3c>
 8008854:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008858:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800885c:	e76e      	b.n	800873c <__ieee754_pow+0x3c>
 800885e:	4a4b      	ldr	r2, [pc, #300]	@ (800898c <__ieee754_pow+0x28c>)
 8008860:	4590      	cmp	r8, r2
 8008862:	d109      	bne.n	8008878 <__ieee754_pow+0x178>
 8008864:	2e00      	cmp	r6, #0
 8008866:	db07      	blt.n	8008878 <__ieee754_pow+0x178>
 8008868:	4650      	mov	r0, sl
 800886a:	4659      	mov	r1, fp
 800886c:	b011      	add	sp, #68	@ 0x44
 800886e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008872:	f000 bd0f 	b.w	8009294 <__ieee754_sqrt>
 8008876:	2400      	movs	r4, #0
 8008878:	4650      	mov	r0, sl
 800887a:	4659      	mov	r1, fp
 800887c:	9302      	str	r3, [sp, #8]
 800887e:	f000 fc69 	bl	8009154 <fabs>
 8008882:	9b02      	ldr	r3, [sp, #8]
 8008884:	f1b9 0f00 	cmp.w	r9, #0
 8008888:	d127      	bne.n	80088da <__ieee754_pow+0x1da>
 800888a:	4a3e      	ldr	r2, [pc, #248]	@ (8008984 <__ieee754_pow+0x284>)
 800888c:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8008890:	4594      	cmp	ip, r2
 8008892:	d000      	beq.n	8008896 <__ieee754_pow+0x196>
 8008894:	bb0d      	cbnz	r5, 80088da <__ieee754_pow+0x1da>
 8008896:	f1b8 0f00 	cmp.w	r8, #0
 800889a:	da05      	bge.n	80088a8 <__ieee754_pow+0x1a8>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	2000      	movs	r0, #0
 80088a2:	4938      	ldr	r1, [pc, #224]	@ (8008984 <__ieee754_pow+0x284>)
 80088a4:	f7f7 ff42 	bl	800072c <__aeabi_ddiv>
 80088a8:	2e00      	cmp	r6, #0
 80088aa:	f6bf af47 	bge.w	800873c <__ieee754_pow+0x3c>
 80088ae:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80088b2:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80088b6:	4325      	orrs	r5, r4
 80088b8:	d108      	bne.n	80088cc <__ieee754_pow+0x1cc>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4610      	mov	r0, r2
 80088c0:	4619      	mov	r1, r3
 80088c2:	f7f7 fc51 	bl	8000168 <__aeabi_dsub>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	e79f      	b.n	800880c <__ieee754_pow+0x10c>
 80088cc:	2c01      	cmp	r4, #1
 80088ce:	f47f af35 	bne.w	800873c <__ieee754_pow+0x3c>
 80088d2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80088d6:	4619      	mov	r1, r3
 80088d8:	e730      	b.n	800873c <__ieee754_pow+0x3c>
 80088da:	0ff2      	lsrs	r2, r6, #31
 80088dc:	3a01      	subs	r2, #1
 80088de:	ea52 0c04 	orrs.w	ip, r2, r4
 80088e2:	d102      	bne.n	80088ea <__ieee754_pow+0x1ea>
 80088e4:	4652      	mov	r2, sl
 80088e6:	465b      	mov	r3, fp
 80088e8:	e7e9      	b.n	80088be <__ieee754_pow+0x1be>
 80088ea:	f04f 0900 	mov.w	r9, #0
 80088ee:	3c01      	subs	r4, #1
 80088f0:	4314      	orrs	r4, r2
 80088f2:	bf14      	ite	ne
 80088f4:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8008984 <__ieee754_pow+0x284>
 80088f8:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8008990 <__ieee754_pow+0x290>
 80088fc:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8008900:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8008904:	f240 8104 	bls.w	8008b10 <__ieee754_pow+0x410>
 8008908:	4b22      	ldr	r3, [pc, #136]	@ (8008994 <__ieee754_pow+0x294>)
 800890a:	429f      	cmp	r7, r3
 800890c:	4b1e      	ldr	r3, [pc, #120]	@ (8008988 <__ieee754_pow+0x288>)
 800890e:	d913      	bls.n	8008938 <__ieee754_pow+0x238>
 8008910:	429d      	cmp	r5, r3
 8008912:	d808      	bhi.n	8008926 <__ieee754_pow+0x226>
 8008914:	f1b8 0f00 	cmp.w	r8, #0
 8008918:	da08      	bge.n	800892c <__ieee754_pow+0x22c>
 800891a:	2000      	movs	r0, #0
 800891c:	b011      	add	sp, #68	@ 0x44
 800891e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008922:	f000 bcb1 	b.w	8009288 <__math_oflow>
 8008926:	f1b8 0f00 	cmp.w	r8, #0
 800892a:	dcf6      	bgt.n	800891a <__ieee754_pow+0x21a>
 800892c:	2000      	movs	r0, #0
 800892e:	b011      	add	sp, #68	@ 0x44
 8008930:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	f000 bca3 	b.w	800927e <__math_uflow>
 8008938:	429d      	cmp	r5, r3
 800893a:	d20c      	bcs.n	8008956 <__ieee754_pow+0x256>
 800893c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008940:	2200      	movs	r2, #0
 8008942:	2300      	movs	r3, #0
 8008944:	f7f8 f83a 	bl	80009bc <__aeabi_dcmplt>
 8008948:	3800      	subs	r0, #0
 800894a:	bf18      	it	ne
 800894c:	2001      	movne	r0, #1
 800894e:	f1b8 0f00 	cmp.w	r8, #0
 8008952:	daec      	bge.n	800892e <__ieee754_pow+0x22e>
 8008954:	e7e2      	b.n	800891c <__ieee754_pow+0x21c>
 8008956:	4b0b      	ldr	r3, [pc, #44]	@ (8008984 <__ieee754_pow+0x284>)
 8008958:	2200      	movs	r2, #0
 800895a:	429d      	cmp	r5, r3
 800895c:	d91c      	bls.n	8008998 <__ieee754_pow+0x298>
 800895e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008962:	2300      	movs	r3, #0
 8008964:	f7f8 f82a 	bl	80009bc <__aeabi_dcmplt>
 8008968:	3800      	subs	r0, #0
 800896a:	bf18      	it	ne
 800896c:	2001      	movne	r0, #1
 800896e:	f1b8 0f00 	cmp.w	r8, #0
 8008972:	dcd3      	bgt.n	800891c <__ieee754_pow+0x21c>
 8008974:	e7db      	b.n	800892e <__ieee754_pow+0x22e>
 8008976:	bf00      	nop
 8008978:	fff00000 	.word	0xfff00000
 800897c:	7ff00000 	.word	0x7ff00000
 8008980:	433fffff 	.word	0x433fffff
 8008984:	3ff00000 	.word	0x3ff00000
 8008988:	3fefffff 	.word	0x3fefffff
 800898c:	3fe00000 	.word	0x3fe00000
 8008990:	bff00000 	.word	0xbff00000
 8008994:	43f00000 	.word	0x43f00000
 8008998:	4b59      	ldr	r3, [pc, #356]	@ (8008b00 <__ieee754_pow+0x400>)
 800899a:	f7f7 fbe5 	bl	8000168 <__aeabi_dsub>
 800899e:	a350      	add	r3, pc, #320	@ (adr r3, 8008ae0 <__ieee754_pow+0x3e0>)
 80089a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a4:	4604      	mov	r4, r0
 80089a6:	460d      	mov	r5, r1
 80089a8:	f7f7 fd96 	bl	80004d8 <__aeabi_dmul>
 80089ac:	a34e      	add	r3, pc, #312	@ (adr r3, 8008ae8 <__ieee754_pow+0x3e8>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	4606      	mov	r6, r0
 80089b4:	460f      	mov	r7, r1
 80089b6:	4620      	mov	r0, r4
 80089b8:	4629      	mov	r1, r5
 80089ba:	f7f7 fd8d 	bl	80004d8 <__aeabi_dmul>
 80089be:	2200      	movs	r2, #0
 80089c0:	4682      	mov	sl, r0
 80089c2:	468b      	mov	fp, r1
 80089c4:	4620      	mov	r0, r4
 80089c6:	4629      	mov	r1, r5
 80089c8:	4b4e      	ldr	r3, [pc, #312]	@ (8008b04 <__ieee754_pow+0x404>)
 80089ca:	f7f7 fd85 	bl	80004d8 <__aeabi_dmul>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	a147      	add	r1, pc, #284	@ (adr r1, 8008af0 <__ieee754_pow+0x3f0>)
 80089d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089d8:	f7f7 fbc6 	bl	8000168 <__aeabi_dsub>
 80089dc:	4622      	mov	r2, r4
 80089de:	462b      	mov	r3, r5
 80089e0:	f7f7 fd7a 	bl	80004d8 <__aeabi_dmul>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	2000      	movs	r0, #0
 80089ea:	4947      	ldr	r1, [pc, #284]	@ (8008b08 <__ieee754_pow+0x408>)
 80089ec:	f7f7 fbbc 	bl	8000168 <__aeabi_dsub>
 80089f0:	4622      	mov	r2, r4
 80089f2:	4680      	mov	r8, r0
 80089f4:	4689      	mov	r9, r1
 80089f6:	462b      	mov	r3, r5
 80089f8:	4620      	mov	r0, r4
 80089fa:	4629      	mov	r1, r5
 80089fc:	f7f7 fd6c 	bl	80004d8 <__aeabi_dmul>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4640      	mov	r0, r8
 8008a06:	4649      	mov	r1, r9
 8008a08:	f7f7 fd66 	bl	80004d8 <__aeabi_dmul>
 8008a0c:	a33a      	add	r3, pc, #232	@ (adr r3, 8008af8 <__ieee754_pow+0x3f8>)
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	f7f7 fd61 	bl	80004d8 <__aeabi_dmul>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4650      	mov	r0, sl
 8008a1c:	4659      	mov	r1, fp
 8008a1e:	f7f7 fba3 	bl	8000168 <__aeabi_dsub>
 8008a22:	2400      	movs	r4, #0
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4680      	mov	r8, r0
 8008a2a:	4689      	mov	r9, r1
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	4639      	mov	r1, r7
 8008a30:	f7f7 fb9c 	bl	800016c <__adddf3>
 8008a34:	4632      	mov	r2, r6
 8008a36:	463b      	mov	r3, r7
 8008a38:	4620      	mov	r0, r4
 8008a3a:	460d      	mov	r5, r1
 8008a3c:	f7f7 fb94 	bl	8000168 <__aeabi_dsub>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4640      	mov	r0, r8
 8008a46:	4649      	mov	r1, r9
 8008a48:	f7f7 fb8e 	bl	8000168 <__aeabi_dsub>
 8008a4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a54:	2300      	movs	r3, #0
 8008a56:	9304      	str	r3, [sp, #16]
 8008a58:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	460f      	mov	r7, r1
 8008a60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a64:	465b      	mov	r3, fp
 8008a66:	4652      	mov	r2, sl
 8008a68:	f7f7 fb7e 	bl	8000168 <__aeabi_dsub>
 8008a6c:	4622      	mov	r2, r4
 8008a6e:	462b      	mov	r3, r5
 8008a70:	f7f7 fd32 	bl	80004d8 <__aeabi_dmul>
 8008a74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a78:	4680      	mov	r8, r0
 8008a7a:	4689      	mov	r9, r1
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	4639      	mov	r1, r7
 8008a80:	f7f7 fd2a 	bl	80004d8 <__aeabi_dmul>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	f7f7 fb6e 	bl	800016c <__adddf3>
 8008a90:	465b      	mov	r3, fp
 8008a92:	4606      	mov	r6, r0
 8008a94:	460f      	mov	r7, r1
 8008a96:	4652      	mov	r2, sl
 8008a98:	4620      	mov	r0, r4
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	f7f7 fd1c 	bl	80004d8 <__aeabi_dmul>
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	4680      	mov	r8, r0
 8008aa6:	4689      	mov	r9, r1
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	4639      	mov	r1, r7
 8008aac:	f7f7 fb5e 	bl	800016c <__adddf3>
 8008ab0:	4b16      	ldr	r3, [pc, #88]	@ (8008b0c <__ieee754_pow+0x40c>)
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4299      	cmp	r1, r3
 8008ab6:	460d      	mov	r5, r1
 8008ab8:	468b      	mov	fp, r1
 8008aba:	f340 81fd 	ble.w	8008eb8 <__ieee754_pow+0x7b8>
 8008abe:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008ac2:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008ac6:	4303      	orrs	r3, r0
 8008ac8:	f000 81dc 	beq.w	8008e84 <__ieee754_pow+0x784>
 8008acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f7f7 ff72 	bl	80009bc <__aeabi_dcmplt>
 8008ad8:	3800      	subs	r0, #0
 8008ada:	bf18      	it	ne
 8008adc:	2001      	movne	r0, #1
 8008ade:	e71d      	b.n	800891c <__ieee754_pow+0x21c>
 8008ae0:	60000000 	.word	0x60000000
 8008ae4:	3ff71547 	.word	0x3ff71547
 8008ae8:	f85ddf44 	.word	0xf85ddf44
 8008aec:	3e54ae0b 	.word	0x3e54ae0b
 8008af0:	55555555 	.word	0x55555555
 8008af4:	3fd55555 	.word	0x3fd55555
 8008af8:	652b82fe 	.word	0x652b82fe
 8008afc:	3ff71547 	.word	0x3ff71547
 8008b00:	3ff00000 	.word	0x3ff00000
 8008b04:	3fd00000 	.word	0x3fd00000
 8008b08:	3fe00000 	.word	0x3fe00000
 8008b0c:	408fffff 	.word	0x408fffff
 8008b10:	4ad3      	ldr	r2, [pc, #844]	@ (8008e60 <__ieee754_pow+0x760>)
 8008b12:	4032      	ands	r2, r6
 8008b14:	2a00      	cmp	r2, #0
 8008b16:	f040 817a 	bne.w	8008e0e <__ieee754_pow+0x70e>
 8008b1a:	4bd2      	ldr	r3, [pc, #840]	@ (8008e64 <__ieee754_pow+0x764>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f7f7 fcdb 	bl	80004d8 <__aeabi_dmul>
 8008b22:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8008b26:	460b      	mov	r3, r1
 8008b28:	151a      	asrs	r2, r3, #20
 8008b2a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008b2e:	4422      	add	r2, r4
 8008b30:	920a      	str	r2, [sp, #40]	@ 0x28
 8008b32:	4acd      	ldr	r2, [pc, #820]	@ (8008e68 <__ieee754_pow+0x768>)
 8008b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b38:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008b42:	dd08      	ble.n	8008b56 <__ieee754_pow+0x456>
 8008b44:	4ac9      	ldr	r2, [pc, #804]	@ (8008e6c <__ieee754_pow+0x76c>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	f340 8163 	ble.w	8008e12 <__ieee754_pow+0x712>
 8008b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b4e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008b52:	3301      	adds	r3, #1
 8008b54:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b56:	2600      	movs	r6, #0
 8008b58:	00f3      	lsls	r3, r6, #3
 8008b5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b5c:	4bc4      	ldr	r3, [pc, #784]	@ (8008e70 <__ieee754_pow+0x770>)
 8008b5e:	4629      	mov	r1, r5
 8008b60:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008b6e:	4623      	mov	r3, r4
 8008b70:	4682      	mov	sl, r0
 8008b72:	f7f7 faf9 	bl	8000168 <__aeabi_dsub>
 8008b76:	4652      	mov	r2, sl
 8008b78:	462b      	mov	r3, r5
 8008b7a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008b7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b82:	f7f7 faf3 	bl	800016c <__adddf3>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	49b9      	ldr	r1, [pc, #740]	@ (8008e74 <__ieee754_pow+0x774>)
 8008b8e:	f7f7 fdcd 	bl	800072c <__aeabi_ddiv>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b9e:	f7f7 fc9b 	bl	80004d8 <__aeabi_dmul>
 8008ba2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ba6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008baa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	46ab      	mov	fp, r5
 8008bb4:	106d      	asrs	r5, r5, #1
 8008bb6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008bba:	9304      	str	r3, [sp, #16]
 8008bbc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008bc0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008bc4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008bc8:	4640      	mov	r0, r8
 8008bca:	4649      	mov	r1, r9
 8008bcc:	4614      	mov	r4, r2
 8008bce:	461d      	mov	r5, r3
 8008bd0:	f7f7 fc82 	bl	80004d8 <__aeabi_dmul>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bdc:	f7f7 fac4 	bl	8000168 <__aeabi_dsub>
 8008be0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008be4:	4606      	mov	r6, r0
 8008be6:	460f      	mov	r7, r1
 8008be8:	4620      	mov	r0, r4
 8008bea:	4629      	mov	r1, r5
 8008bec:	f7f7 fabc 	bl	8000168 <__aeabi_dsub>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	4650      	mov	r0, sl
 8008bf6:	4659      	mov	r1, fp
 8008bf8:	f7f7 fab6 	bl	8000168 <__aeabi_dsub>
 8008bfc:	4642      	mov	r2, r8
 8008bfe:	464b      	mov	r3, r9
 8008c00:	f7f7 fc6a 	bl	80004d8 <__aeabi_dmul>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4630      	mov	r0, r6
 8008c0a:	4639      	mov	r1, r7
 8008c0c:	f7f7 faac 	bl	8000168 <__aeabi_dsub>
 8008c10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008c14:	f7f7 fc60 	bl	80004d8 <__aeabi_dmul>
 8008c18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c1c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c20:	4610      	mov	r0, r2
 8008c22:	4619      	mov	r1, r3
 8008c24:	f7f7 fc58 	bl	80004d8 <__aeabi_dmul>
 8008c28:	a37b      	add	r3, pc, #492	@ (adr r3, 8008e18 <__ieee754_pow+0x718>)
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	4604      	mov	r4, r0
 8008c30:	460d      	mov	r5, r1
 8008c32:	f7f7 fc51 	bl	80004d8 <__aeabi_dmul>
 8008c36:	a37a      	add	r3, pc, #488	@ (adr r3, 8008e20 <__ieee754_pow+0x720>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f7f7 fa96 	bl	800016c <__adddf3>
 8008c40:	4622      	mov	r2, r4
 8008c42:	462b      	mov	r3, r5
 8008c44:	f7f7 fc48 	bl	80004d8 <__aeabi_dmul>
 8008c48:	a377      	add	r3, pc, #476	@ (adr r3, 8008e28 <__ieee754_pow+0x728>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fa8d 	bl	800016c <__adddf3>
 8008c52:	4622      	mov	r2, r4
 8008c54:	462b      	mov	r3, r5
 8008c56:	f7f7 fc3f 	bl	80004d8 <__aeabi_dmul>
 8008c5a:	a375      	add	r3, pc, #468	@ (adr r3, 8008e30 <__ieee754_pow+0x730>)
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f7f7 fa84 	bl	800016c <__adddf3>
 8008c64:	4622      	mov	r2, r4
 8008c66:	462b      	mov	r3, r5
 8008c68:	f7f7 fc36 	bl	80004d8 <__aeabi_dmul>
 8008c6c:	a372      	add	r3, pc, #456	@ (adr r3, 8008e38 <__ieee754_pow+0x738>)
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	f7f7 fa7b 	bl	800016c <__adddf3>
 8008c76:	4622      	mov	r2, r4
 8008c78:	462b      	mov	r3, r5
 8008c7a:	f7f7 fc2d 	bl	80004d8 <__aeabi_dmul>
 8008c7e:	a370      	add	r3, pc, #448	@ (adr r3, 8008e40 <__ieee754_pow+0x740>)
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	f7f7 fa72 	bl	800016c <__adddf3>
 8008c88:	4622      	mov	r2, r4
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	460f      	mov	r7, r1
 8008c8e:	462b      	mov	r3, r5
 8008c90:	4620      	mov	r0, r4
 8008c92:	4629      	mov	r1, r5
 8008c94:	f7f7 fc20 	bl	80004d8 <__aeabi_dmul>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	f7f7 fc1a 	bl	80004d8 <__aeabi_dmul>
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	460d      	mov	r5, r1
 8008ca8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cac:	4642      	mov	r2, r8
 8008cae:	464b      	mov	r3, r9
 8008cb0:	f7f7 fa5c 	bl	800016c <__adddf3>
 8008cb4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008cb8:	f7f7 fc0e 	bl	80004d8 <__aeabi_dmul>
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	462b      	mov	r3, r5
 8008cc0:	f7f7 fa54 	bl	800016c <__adddf3>
 8008cc4:	4642      	mov	r2, r8
 8008cc6:	4682      	mov	sl, r0
 8008cc8:	468b      	mov	fp, r1
 8008cca:	464b      	mov	r3, r9
 8008ccc:	4640      	mov	r0, r8
 8008cce:	4649      	mov	r1, r9
 8008cd0:	f7f7 fc02 	bl	80004d8 <__aeabi_dmul>
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4b68      	ldr	r3, [pc, #416]	@ (8008e78 <__ieee754_pow+0x778>)
 8008cd8:	4606      	mov	r6, r0
 8008cda:	460f      	mov	r7, r1
 8008cdc:	f7f7 fa46 	bl	800016c <__adddf3>
 8008ce0:	4652      	mov	r2, sl
 8008ce2:	465b      	mov	r3, fp
 8008ce4:	f7f7 fa42 	bl	800016c <__adddf3>
 8008ce8:	2400      	movs	r4, #0
 8008cea:	460d      	mov	r5, r1
 8008cec:	4622      	mov	r2, r4
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	4649      	mov	r1, r9
 8008cf4:	f7f7 fbf0 	bl	80004d8 <__aeabi_dmul>
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	4680      	mov	r8, r0
 8008cfc:	4689      	mov	r9, r1
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	4b5d      	ldr	r3, [pc, #372]	@ (8008e78 <__ieee754_pow+0x778>)
 8008d04:	f7f7 fa30 	bl	8000168 <__aeabi_dsub>
 8008d08:	4632      	mov	r2, r6
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	f7f7 fa2c 	bl	8000168 <__aeabi_dsub>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	4650      	mov	r0, sl
 8008d16:	4659      	mov	r1, fp
 8008d18:	f7f7 fa26 	bl	8000168 <__aeabi_dsub>
 8008d1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d20:	f7f7 fbda 	bl	80004d8 <__aeabi_dmul>
 8008d24:	4622      	mov	r2, r4
 8008d26:	4606      	mov	r6, r0
 8008d28:	460f      	mov	r7, r1
 8008d2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d2e:	462b      	mov	r3, r5
 8008d30:	f7f7 fbd2 	bl	80004d8 <__aeabi_dmul>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	4630      	mov	r0, r6
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	f7f7 fa16 	bl	800016c <__adddf3>
 8008d40:	2400      	movs	r4, #0
 8008d42:	4606      	mov	r6, r0
 8008d44:	460f      	mov	r7, r1
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	f7f7 fa0d 	bl	800016c <__adddf3>
 8008d52:	a33d      	add	r3, pc, #244	@ (adr r3, 8008e48 <__ieee754_pow+0x748>)
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	4620      	mov	r0, r4
 8008d5a:	460d      	mov	r5, r1
 8008d5c:	f7f7 fbbc 	bl	80004d8 <__aeabi_dmul>
 8008d60:	4642      	mov	r2, r8
 8008d62:	464b      	mov	r3, r9
 8008d64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d68:	4620      	mov	r0, r4
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	f7f7 f9fc 	bl	8000168 <__aeabi_dsub>
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	4630      	mov	r0, r6
 8008d76:	4639      	mov	r1, r7
 8008d78:	f7f7 f9f6 	bl	8000168 <__aeabi_dsub>
 8008d7c:	a334      	add	r3, pc, #208	@ (adr r3, 8008e50 <__ieee754_pow+0x750>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	f7f7 fba9 	bl	80004d8 <__aeabi_dmul>
 8008d86:	a334      	add	r3, pc, #208	@ (adr r3, 8008e58 <__ieee754_pow+0x758>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	4606      	mov	r6, r0
 8008d8e:	460f      	mov	r7, r1
 8008d90:	4620      	mov	r0, r4
 8008d92:	4629      	mov	r1, r5
 8008d94:	f7f7 fba0 	bl	80004d8 <__aeabi_dmul>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	4639      	mov	r1, r7
 8008da0:	f7f7 f9e4 	bl	800016c <__adddf3>
 8008da4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008da6:	4b35      	ldr	r3, [pc, #212]	@ (8008e7c <__ieee754_pow+0x77c>)
 8008da8:	2400      	movs	r4, #0
 8008daa:	4413      	add	r3, r2
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	f7f7 f9dc 	bl	800016c <__adddf3>
 8008db4:	4682      	mov	sl, r0
 8008db6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008db8:	468b      	mov	fp, r1
 8008dba:	f7f7 fb23 	bl	8000404 <__aeabi_i2d>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	460f      	mov	r7, r1
 8008dc2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8008e80 <__ieee754_pow+0x780>)
 8008dc6:	4413      	add	r3, r2
 8008dc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dcc:	4652      	mov	r2, sl
 8008dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dd2:	465b      	mov	r3, fp
 8008dd4:	f7f7 f9ca 	bl	800016c <__adddf3>
 8008dd8:	4642      	mov	r2, r8
 8008dda:	464b      	mov	r3, r9
 8008ddc:	f7f7 f9c6 	bl	800016c <__adddf3>
 8008de0:	4632      	mov	r2, r6
 8008de2:	463b      	mov	r3, r7
 8008de4:	f7f7 f9c2 	bl	800016c <__adddf3>
 8008de8:	4632      	mov	r2, r6
 8008dea:	463b      	mov	r3, r7
 8008dec:	4620      	mov	r0, r4
 8008dee:	460d      	mov	r5, r1
 8008df0:	f7f7 f9ba 	bl	8000168 <__aeabi_dsub>
 8008df4:	4642      	mov	r2, r8
 8008df6:	464b      	mov	r3, r9
 8008df8:	f7f7 f9b6 	bl	8000168 <__aeabi_dsub>
 8008dfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e00:	f7f7 f9b2 	bl	8000168 <__aeabi_dsub>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	4650      	mov	r0, sl
 8008e0a:	4659      	mov	r1, fp
 8008e0c:	e61c      	b.n	8008a48 <__ieee754_pow+0x348>
 8008e0e:	2400      	movs	r4, #0
 8008e10:	e68a      	b.n	8008b28 <__ieee754_pow+0x428>
 8008e12:	2601      	movs	r6, #1
 8008e14:	e6a0      	b.n	8008b58 <__ieee754_pow+0x458>
 8008e16:	bf00      	nop
 8008e18:	4a454eef 	.word	0x4a454eef
 8008e1c:	3fca7e28 	.word	0x3fca7e28
 8008e20:	93c9db65 	.word	0x93c9db65
 8008e24:	3fcd864a 	.word	0x3fcd864a
 8008e28:	a91d4101 	.word	0xa91d4101
 8008e2c:	3fd17460 	.word	0x3fd17460
 8008e30:	518f264d 	.word	0x518f264d
 8008e34:	3fd55555 	.word	0x3fd55555
 8008e38:	db6fabff 	.word	0xdb6fabff
 8008e3c:	3fdb6db6 	.word	0x3fdb6db6
 8008e40:	33333303 	.word	0x33333303
 8008e44:	3fe33333 	.word	0x3fe33333
 8008e48:	e0000000 	.word	0xe0000000
 8008e4c:	3feec709 	.word	0x3feec709
 8008e50:	dc3a03fd 	.word	0xdc3a03fd
 8008e54:	3feec709 	.word	0x3feec709
 8008e58:	145b01f5 	.word	0x145b01f5
 8008e5c:	be3e2fe0 	.word	0xbe3e2fe0
 8008e60:	7ff00000 	.word	0x7ff00000
 8008e64:	43400000 	.word	0x43400000
 8008e68:	0003988e 	.word	0x0003988e
 8008e6c:	000bb679 	.word	0x000bb679
 8008e70:	08009830 	.word	0x08009830
 8008e74:	3ff00000 	.word	0x3ff00000
 8008e78:	40080000 	.word	0x40080000
 8008e7c:	08009810 	.word	0x08009810
 8008e80:	08009820 	.word	0x08009820
 8008e84:	a39a      	add	r3, pc, #616	@ (adr r3, 80090f0 <__ieee754_pow+0x9f0>)
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	f7f7 f96d 	bl	800016c <__adddf3>
 8008e92:	4642      	mov	r2, r8
 8008e94:	e9cd 0100 	strd	r0, r1, [sp]
 8008e98:	464b      	mov	r3, r9
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	f7f7 f963 	bl	8000168 <__aeabi_dsub>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eaa:	f7f7 fda5 	bl	80009f8 <__aeabi_dcmpgt>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	f47f ae0c 	bne.w	8008acc <__ieee754_pow+0x3cc>
 8008eb4:	4ba0      	ldr	r3, [pc, #640]	@ (8009138 <__ieee754_pow+0xa38>)
 8008eb6:	e022      	b.n	8008efe <__ieee754_pow+0x7fe>
 8008eb8:	4ca0      	ldr	r4, [pc, #640]	@ (800913c <__ieee754_pow+0xa3c>)
 8008eba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008ebe:	42a3      	cmp	r3, r4
 8008ec0:	d919      	bls.n	8008ef6 <__ieee754_pow+0x7f6>
 8008ec2:	4b9f      	ldr	r3, [pc, #636]	@ (8009140 <__ieee754_pow+0xa40>)
 8008ec4:	440b      	add	r3, r1
 8008ec6:	4303      	orrs	r3, r0
 8008ec8:	d009      	beq.n	8008ede <__ieee754_pow+0x7de>
 8008eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f7f7 fd73 	bl	80009bc <__aeabi_dcmplt>
 8008ed6:	3800      	subs	r0, #0
 8008ed8:	bf18      	it	ne
 8008eda:	2001      	movne	r0, #1
 8008edc:	e527      	b.n	800892e <__ieee754_pow+0x22e>
 8008ede:	4642      	mov	r2, r8
 8008ee0:	464b      	mov	r3, r9
 8008ee2:	f7f7 f941 	bl	8000168 <__aeabi_dsub>
 8008ee6:	4632      	mov	r2, r6
 8008ee8:	463b      	mov	r3, r7
 8008eea:	f7f7 fd7b 	bl	80009e4 <__aeabi_dcmpge>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d1eb      	bne.n	8008eca <__ieee754_pow+0x7ca>
 8008ef2:	4b94      	ldr	r3, [pc, #592]	@ (8009144 <__ieee754_pow+0xa44>)
 8008ef4:	e003      	b.n	8008efe <__ieee754_pow+0x7fe>
 8008ef6:	4a94      	ldr	r2, [pc, #592]	@ (8009148 <__ieee754_pow+0xa48>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	f240 80e1 	bls.w	80090c0 <__ieee754_pow+0x9c0>
 8008efe:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8008f02:	151b      	asrs	r3, r3, #20
 8008f04:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8008f08:	fa4a fa03 	asr.w	sl, sl, r3
 8008f0c:	44da      	add	sl, fp
 8008f0e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008f12:	488e      	ldr	r0, [pc, #568]	@ (800914c <__ieee754_pow+0xa4c>)
 8008f14:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008f18:	4108      	asrs	r0, r1
 8008f1a:	ea00 030a 	and.w	r3, r0, sl
 8008f1e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008f22:	f1c1 0114 	rsb	r1, r1, #20
 8008f26:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	fa4a fa01 	asr.w	sl, sl, r1
 8008f30:	f1bb 0f00 	cmp.w	fp, #0
 8008f34:	4649      	mov	r1, r9
 8008f36:	f04f 0200 	mov.w	r2, #0
 8008f3a:	bfb8      	it	lt
 8008f3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8008f40:	f7f7 f912 	bl	8000168 <__aeabi_dsub>
 8008f44:	4680      	mov	r8, r0
 8008f46:	4689      	mov	r9, r1
 8008f48:	2400      	movs	r4, #0
 8008f4a:	4632      	mov	r2, r6
 8008f4c:	463b      	mov	r3, r7
 8008f4e:	4640      	mov	r0, r8
 8008f50:	4649      	mov	r1, r9
 8008f52:	f7f7 f90b 	bl	800016c <__adddf3>
 8008f56:	a368      	add	r3, pc, #416	@ (adr r3, 80090f8 <__ieee754_pow+0x9f8>)
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	460d      	mov	r5, r1
 8008f60:	f7f7 faba 	bl	80004d8 <__aeabi_dmul>
 8008f64:	4642      	mov	r2, r8
 8008f66:	464b      	mov	r3, r9
 8008f68:	e9cd 0100 	strd	r0, r1, [sp]
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	4629      	mov	r1, r5
 8008f70:	f7f7 f8fa 	bl	8000168 <__aeabi_dsub>
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	4630      	mov	r0, r6
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	f7f7 f8f4 	bl	8000168 <__aeabi_dsub>
 8008f80:	a35f      	add	r3, pc, #380	@ (adr r3, 8009100 <__ieee754_pow+0xa00>)
 8008f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f86:	f7f7 faa7 	bl	80004d8 <__aeabi_dmul>
 8008f8a:	a35f      	add	r3, pc, #380	@ (adr r3, 8009108 <__ieee754_pow+0xa08>)
 8008f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f90:	4680      	mov	r8, r0
 8008f92:	4689      	mov	r9, r1
 8008f94:	4620      	mov	r0, r4
 8008f96:	4629      	mov	r1, r5
 8008f98:	f7f7 fa9e 	bl	80004d8 <__aeabi_dmul>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	4649      	mov	r1, r9
 8008fa4:	f7f7 f8e2 	bl	800016c <__adddf3>
 8008fa8:	4604      	mov	r4, r0
 8008faa:	460d      	mov	r5, r1
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fb4:	f7f7 f8da 	bl	800016c <__adddf3>
 8008fb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fbc:	4680      	mov	r8, r0
 8008fbe:	4689      	mov	r9, r1
 8008fc0:	f7f7 f8d2 	bl	8000168 <__aeabi_dsub>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4620      	mov	r0, r4
 8008fca:	4629      	mov	r1, r5
 8008fcc:	f7f7 f8cc 	bl	8000168 <__aeabi_dsub>
 8008fd0:	4642      	mov	r2, r8
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	460f      	mov	r7, r1
 8008fd6:	464b      	mov	r3, r9
 8008fd8:	4640      	mov	r0, r8
 8008fda:	4649      	mov	r1, r9
 8008fdc:	f7f7 fa7c 	bl	80004d8 <__aeabi_dmul>
 8008fe0:	a34b      	add	r3, pc, #300	@ (adr r3, 8009110 <__ieee754_pow+0xa10>)
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	460d      	mov	r5, r1
 8008fea:	f7f7 fa75 	bl	80004d8 <__aeabi_dmul>
 8008fee:	a34a      	add	r3, pc, #296	@ (adr r3, 8009118 <__ieee754_pow+0xa18>)
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	f7f7 f8b8 	bl	8000168 <__aeabi_dsub>
 8008ff8:	4622      	mov	r2, r4
 8008ffa:	462b      	mov	r3, r5
 8008ffc:	f7f7 fa6c 	bl	80004d8 <__aeabi_dmul>
 8009000:	a347      	add	r3, pc, #284	@ (adr r3, 8009120 <__ieee754_pow+0xa20>)
 8009002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009006:	f7f7 f8b1 	bl	800016c <__adddf3>
 800900a:	4622      	mov	r2, r4
 800900c:	462b      	mov	r3, r5
 800900e:	f7f7 fa63 	bl	80004d8 <__aeabi_dmul>
 8009012:	a345      	add	r3, pc, #276	@ (adr r3, 8009128 <__ieee754_pow+0xa28>)
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	f7f7 f8a6 	bl	8000168 <__aeabi_dsub>
 800901c:	4622      	mov	r2, r4
 800901e:	462b      	mov	r3, r5
 8009020:	f7f7 fa5a 	bl	80004d8 <__aeabi_dmul>
 8009024:	a342      	add	r3, pc, #264	@ (adr r3, 8009130 <__ieee754_pow+0xa30>)
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	f7f7 f89f 	bl	800016c <__adddf3>
 800902e:	4622      	mov	r2, r4
 8009030:	462b      	mov	r3, r5
 8009032:	f7f7 fa51 	bl	80004d8 <__aeabi_dmul>
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	4640      	mov	r0, r8
 800903c:	4649      	mov	r1, r9
 800903e:	f7f7 f893 	bl	8000168 <__aeabi_dsub>
 8009042:	4604      	mov	r4, r0
 8009044:	460d      	mov	r5, r1
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4640      	mov	r0, r8
 800904c:	4649      	mov	r1, r9
 800904e:	f7f7 fa43 	bl	80004d8 <__aeabi_dmul>
 8009052:	2200      	movs	r2, #0
 8009054:	e9cd 0100 	strd	r0, r1, [sp]
 8009058:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800905c:	4620      	mov	r0, r4
 800905e:	4629      	mov	r1, r5
 8009060:	f7f7 f882 	bl	8000168 <__aeabi_dsub>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	e9dd 0100 	ldrd	r0, r1, [sp]
 800906c:	f7f7 fb5e 	bl	800072c <__aeabi_ddiv>
 8009070:	4632      	mov	r2, r6
 8009072:	4604      	mov	r4, r0
 8009074:	460d      	mov	r5, r1
 8009076:	463b      	mov	r3, r7
 8009078:	4640      	mov	r0, r8
 800907a:	4649      	mov	r1, r9
 800907c:	f7f7 fa2c 	bl	80004d8 <__aeabi_dmul>
 8009080:	4632      	mov	r2, r6
 8009082:	463b      	mov	r3, r7
 8009084:	f7f7 f872 	bl	800016c <__adddf3>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	4620      	mov	r0, r4
 800908e:	4629      	mov	r1, r5
 8009090:	f7f7 f86a 	bl	8000168 <__aeabi_dsub>
 8009094:	4642      	mov	r2, r8
 8009096:	464b      	mov	r3, r9
 8009098:	f7f7 f866 	bl	8000168 <__aeabi_dsub>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	2000      	movs	r0, #0
 80090a2:	492b      	ldr	r1, [pc, #172]	@ (8009150 <__ieee754_pow+0xa50>)
 80090a4:	f7f7 f860 	bl	8000168 <__aeabi_dsub>
 80090a8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80090ac:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80090b0:	da09      	bge.n	80090c6 <__ieee754_pow+0x9c6>
 80090b2:	4652      	mov	r2, sl
 80090b4:	f000 f854 	bl	8009160 <scalbn>
 80090b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090bc:	f7ff bb89 	b.w	80087d2 <__ieee754_pow+0xd2>
 80090c0:	f8dd a010 	ldr.w	sl, [sp, #16]
 80090c4:	e740      	b.n	8008f48 <__ieee754_pow+0x848>
 80090c6:	4621      	mov	r1, r4
 80090c8:	e7f6      	b.n	80090b8 <__ieee754_pow+0x9b8>
 80090ca:	2000      	movs	r0, #0
 80090cc:	4920      	ldr	r1, [pc, #128]	@ (8009150 <__ieee754_pow+0xa50>)
 80090ce:	f7ff bb35 	b.w	800873c <__ieee754_pow+0x3c>
 80090d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090d6:	f7ff bb31 	b.w	800873c <__ieee754_pow+0x3c>
 80090da:	4650      	mov	r0, sl
 80090dc:	4659      	mov	r1, fp
 80090de:	f7ff bb2d 	b.w	800873c <__ieee754_pow+0x3c>
 80090e2:	460c      	mov	r4, r1
 80090e4:	f7ff bb87 	b.w	80087f6 <__ieee754_pow+0xf6>
 80090e8:	2400      	movs	r4, #0
 80090ea:	f7ff bb69 	b.w	80087c0 <__ieee754_pow+0xc0>
 80090ee:	bf00      	nop
 80090f0:	652b82fe 	.word	0x652b82fe
 80090f4:	3c971547 	.word	0x3c971547
 80090f8:	00000000 	.word	0x00000000
 80090fc:	3fe62e43 	.word	0x3fe62e43
 8009100:	fefa39ef 	.word	0xfefa39ef
 8009104:	3fe62e42 	.word	0x3fe62e42
 8009108:	0ca86c39 	.word	0x0ca86c39
 800910c:	be205c61 	.word	0xbe205c61
 8009110:	72bea4d0 	.word	0x72bea4d0
 8009114:	3e663769 	.word	0x3e663769
 8009118:	c5d26bf1 	.word	0xc5d26bf1
 800911c:	3ebbbd41 	.word	0x3ebbbd41
 8009120:	af25de2c 	.word	0xaf25de2c
 8009124:	3f11566a 	.word	0x3f11566a
 8009128:	16bebd93 	.word	0x16bebd93
 800912c:	3f66c16c 	.word	0x3f66c16c
 8009130:	5555553e 	.word	0x5555553e
 8009134:	3fc55555 	.word	0x3fc55555
 8009138:	40900000 	.word	0x40900000
 800913c:	4090cbff 	.word	0x4090cbff
 8009140:	3f6f3400 	.word	0x3f6f3400
 8009144:	4090cc00 	.word	0x4090cc00
 8009148:	3fe00000 	.word	0x3fe00000
 800914c:	fff00000 	.word	0xfff00000
 8009150:	3ff00000 	.word	0x3ff00000

08009154 <fabs>:
 8009154:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009158:	4619      	mov	r1, r3
 800915a:	4770      	bx	lr
 800915c:	0000      	movs	r0, r0
	...

08009160 <scalbn>:
 8009160:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8009164:	4616      	mov	r6, r2
 8009166:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800916a:	4683      	mov	fp, r0
 800916c:	468c      	mov	ip, r1
 800916e:	460b      	mov	r3, r1
 8009170:	b982      	cbnz	r2, 8009194 <scalbn+0x34>
 8009172:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009176:	4303      	orrs	r3, r0
 8009178:	d035      	beq.n	80091e6 <scalbn+0x86>
 800917a:	4b2d      	ldr	r3, [pc, #180]	@ (8009230 <scalbn+0xd0>)
 800917c:	2200      	movs	r2, #0
 800917e:	f7f7 f9ab 	bl	80004d8 <__aeabi_dmul>
 8009182:	4b2c      	ldr	r3, [pc, #176]	@ (8009234 <scalbn+0xd4>)
 8009184:	4683      	mov	fp, r0
 8009186:	429e      	cmp	r6, r3
 8009188:	468c      	mov	ip, r1
 800918a:	da0d      	bge.n	80091a8 <scalbn+0x48>
 800918c:	a324      	add	r3, pc, #144	@ (adr r3, 8009220 <scalbn+0xc0>)
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	e019      	b.n	80091c8 <scalbn+0x68>
 8009194:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8009198:	42ba      	cmp	r2, r7
 800919a:	d109      	bne.n	80091b0 <scalbn+0x50>
 800919c:	4602      	mov	r2, r0
 800919e:	f7f6 ffe5 	bl	800016c <__adddf3>
 80091a2:	4683      	mov	fp, r0
 80091a4:	468c      	mov	ip, r1
 80091a6:	e01e      	b.n	80091e6 <scalbn+0x86>
 80091a8:	460b      	mov	r3, r1
 80091aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80091ae:	3a36      	subs	r2, #54	@ 0x36
 80091b0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80091b4:	428e      	cmp	r6, r1
 80091b6:	dd0a      	ble.n	80091ce <scalbn+0x6e>
 80091b8:	a31b      	add	r3, pc, #108	@ (adr r3, 8009228 <scalbn+0xc8>)
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	4665      	mov	r5, ip
 80091c0:	f363 051e 	bfi	r5, r3, #0, #31
 80091c4:	4629      	mov	r1, r5
 80091c6:	481c      	ldr	r0, [pc, #112]	@ (8009238 <scalbn+0xd8>)
 80091c8:	f7f7 f986 	bl	80004d8 <__aeabi_dmul>
 80091cc:	e7e9      	b.n	80091a2 <scalbn+0x42>
 80091ce:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80091d2:	4432      	add	r2, r6
 80091d4:	428a      	cmp	r2, r1
 80091d6:	dcef      	bgt.n	80091b8 <scalbn+0x58>
 80091d8:	2a00      	cmp	r2, #0
 80091da:	dd08      	ble.n	80091ee <scalbn+0x8e>
 80091dc:	f36f 531e 	bfc	r3, #20, #11
 80091e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80091e4:	46ac      	mov	ip, r5
 80091e6:	4658      	mov	r0, fp
 80091e8:	4661      	mov	r1, ip
 80091ea:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80091ee:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80091f2:	da09      	bge.n	8009208 <scalbn+0xa8>
 80091f4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80091f8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80091fc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8009200:	480e      	ldr	r0, [pc, #56]	@ (800923c <scalbn+0xdc>)
 8009202:	f041 011f 	orr.w	r1, r1, #31
 8009206:	e7c1      	b.n	800918c <scalbn+0x2c>
 8009208:	3236      	adds	r2, #54	@ 0x36
 800920a:	f36f 531e 	bfc	r3, #20, #11
 800920e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009212:	4658      	mov	r0, fp
 8009214:	4629      	mov	r1, r5
 8009216:	2200      	movs	r2, #0
 8009218:	4b09      	ldr	r3, [pc, #36]	@ (8009240 <scalbn+0xe0>)
 800921a:	e7d5      	b.n	80091c8 <scalbn+0x68>
 800921c:	f3af 8000 	nop.w
 8009220:	c2f8f359 	.word	0xc2f8f359
 8009224:	01a56e1f 	.word	0x01a56e1f
 8009228:	8800759c 	.word	0x8800759c
 800922c:	7e37e43c 	.word	0x7e37e43c
 8009230:	43500000 	.word	0x43500000
 8009234:	ffff3cb0 	.word	0xffff3cb0
 8009238:	8800759c 	.word	0x8800759c
 800923c:	c2f8f359 	.word	0xc2f8f359
 8009240:	3c900000 	.word	0x3c900000

08009244 <with_errno>:
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	4604      	mov	r4, r0
 8009248:	460d      	mov	r5, r1
 800924a:	4616      	mov	r6, r2
 800924c:	f7fd f966 	bl	800651c <__errno>
 8009250:	4629      	mov	r1, r5
 8009252:	6006      	str	r6, [r0, #0]
 8009254:	4620      	mov	r0, r4
 8009256:	bd70      	pop	{r4, r5, r6, pc}

08009258 <xflow>:
 8009258:	b513      	push	{r0, r1, r4, lr}
 800925a:	4604      	mov	r4, r0
 800925c:	4619      	mov	r1, r3
 800925e:	4610      	mov	r0, r2
 8009260:	b10c      	cbz	r4, 8009266 <xflow+0xe>
 8009262:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009266:	e9cd 2300 	strd	r2, r3, [sp]
 800926a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800926e:	f7f7 f933 	bl	80004d8 <__aeabi_dmul>
 8009272:	2222      	movs	r2, #34	@ 0x22
 8009274:	b002      	add	sp, #8
 8009276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800927a:	f7ff bfe3 	b.w	8009244 <with_errno>

0800927e <__math_uflow>:
 800927e:	2200      	movs	r2, #0
 8009280:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009284:	f7ff bfe8 	b.w	8009258 <xflow>

08009288 <__math_oflow>:
 8009288:	2200      	movs	r2, #0
 800928a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800928e:	f7ff bfe3 	b.w	8009258 <xflow>
	...

08009294 <__ieee754_sqrt>:
 8009294:	4a65      	ldr	r2, [pc, #404]	@ (800942c <__ieee754_sqrt+0x198>)
 8009296:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929a:	438a      	bics	r2, r1
 800929c:	4606      	mov	r6, r0
 800929e:	460f      	mov	r7, r1
 80092a0:	460b      	mov	r3, r1
 80092a2:	4604      	mov	r4, r0
 80092a4:	d10e      	bne.n	80092c4 <__ieee754_sqrt+0x30>
 80092a6:	4602      	mov	r2, r0
 80092a8:	f7f7 f916 	bl	80004d8 <__aeabi_dmul>
 80092ac:	4602      	mov	r2, r0
 80092ae:	460b      	mov	r3, r1
 80092b0:	4630      	mov	r0, r6
 80092b2:	4639      	mov	r1, r7
 80092b4:	f7f6 ff5a 	bl	800016c <__adddf3>
 80092b8:	4606      	mov	r6, r0
 80092ba:	460f      	mov	r7, r1
 80092bc:	4630      	mov	r0, r6
 80092be:	4639      	mov	r1, r7
 80092c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c4:	2900      	cmp	r1, #0
 80092c6:	dc0c      	bgt.n	80092e2 <__ieee754_sqrt+0x4e>
 80092c8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80092cc:	4302      	orrs	r2, r0
 80092ce:	d0f5      	beq.n	80092bc <__ieee754_sqrt+0x28>
 80092d0:	b189      	cbz	r1, 80092f6 <__ieee754_sqrt+0x62>
 80092d2:	4602      	mov	r2, r0
 80092d4:	f7f6 ff48 	bl	8000168 <__aeabi_dsub>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	f7f7 fa26 	bl	800072c <__aeabi_ddiv>
 80092e0:	e7ea      	b.n	80092b8 <__ieee754_sqrt+0x24>
 80092e2:	150a      	asrs	r2, r1, #20
 80092e4:	d115      	bne.n	8009312 <__ieee754_sqrt+0x7e>
 80092e6:	2100      	movs	r1, #0
 80092e8:	e009      	b.n	80092fe <__ieee754_sqrt+0x6a>
 80092ea:	0ae3      	lsrs	r3, r4, #11
 80092ec:	3a15      	subs	r2, #21
 80092ee:	0564      	lsls	r4, r4, #21
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d0fa      	beq.n	80092ea <__ieee754_sqrt+0x56>
 80092f4:	e7f7      	b.n	80092e6 <__ieee754_sqrt+0x52>
 80092f6:	460a      	mov	r2, r1
 80092f8:	e7fa      	b.n	80092f0 <__ieee754_sqrt+0x5c>
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	3101      	adds	r1, #1
 80092fe:	02d8      	lsls	r0, r3, #11
 8009300:	d5fb      	bpl.n	80092fa <__ieee754_sqrt+0x66>
 8009302:	1e48      	subs	r0, r1, #1
 8009304:	1a12      	subs	r2, r2, r0
 8009306:	f1c1 0020 	rsb	r0, r1, #32
 800930a:	fa24 f000 	lsr.w	r0, r4, r0
 800930e:	4303      	orrs	r3, r0
 8009310:	408c      	lsls	r4, r1
 8009312:	2700      	movs	r7, #0
 8009314:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8009318:	2116      	movs	r1, #22
 800931a:	07d2      	lsls	r2, r2, #31
 800931c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009320:	463a      	mov	r2, r7
 8009322:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800932a:	bf5c      	itt	pl
 800932c:	005b      	lslpl	r3, r3, #1
 800932e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009332:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009336:	bf58      	it	pl
 8009338:	0064      	lslpl	r4, r4, #1
 800933a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800933e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009342:	0064      	lsls	r4, r4, #1
 8009344:	1815      	adds	r5, r2, r0
 8009346:	429d      	cmp	r5, r3
 8009348:	bfde      	ittt	le
 800934a:	182a      	addle	r2, r5, r0
 800934c:	1b5b      	suble	r3, r3, r5
 800934e:	183f      	addle	r7, r7, r0
 8009350:	0fe5      	lsrs	r5, r4, #31
 8009352:	3901      	subs	r1, #1
 8009354:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009358:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800935c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009360:	d1f0      	bne.n	8009344 <__ieee754_sqrt+0xb0>
 8009362:	460d      	mov	r5, r1
 8009364:	2620      	movs	r6, #32
 8009366:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800936a:	4293      	cmp	r3, r2
 800936c:	eb00 0c01 	add.w	ip, r0, r1
 8009370:	dc02      	bgt.n	8009378 <__ieee754_sqrt+0xe4>
 8009372:	d113      	bne.n	800939c <__ieee754_sqrt+0x108>
 8009374:	45a4      	cmp	ip, r4
 8009376:	d811      	bhi.n	800939c <__ieee754_sqrt+0x108>
 8009378:	f1bc 0f00 	cmp.w	ip, #0
 800937c:	eb0c 0100 	add.w	r1, ip, r0
 8009380:	da3e      	bge.n	8009400 <__ieee754_sqrt+0x16c>
 8009382:	2900      	cmp	r1, #0
 8009384:	db3c      	blt.n	8009400 <__ieee754_sqrt+0x16c>
 8009386:	f102 0e01 	add.w	lr, r2, #1
 800938a:	1a9b      	subs	r3, r3, r2
 800938c:	4672      	mov	r2, lr
 800938e:	45a4      	cmp	ip, r4
 8009390:	bf88      	it	hi
 8009392:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009396:	eba4 040c 	sub.w	r4, r4, ip
 800939a:	4405      	add	r5, r0
 800939c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80093a0:	3e01      	subs	r6, #1
 80093a2:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80093a6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80093aa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80093ae:	d1dc      	bne.n	800936a <__ieee754_sqrt+0xd6>
 80093b0:	431c      	orrs	r4, r3
 80093b2:	d01a      	beq.n	80093ea <__ieee754_sqrt+0x156>
 80093b4:	4c1e      	ldr	r4, [pc, #120]	@ (8009430 <__ieee754_sqrt+0x19c>)
 80093b6:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8009434 <__ieee754_sqrt+0x1a0>
 80093ba:	e9d4 0100 	ldrd	r0, r1, [r4]
 80093be:	e9d9 2300 	ldrd	r2, r3, [r9]
 80093c2:	f7f6 fed1 	bl	8000168 <__aeabi_dsub>
 80093c6:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	4650      	mov	r0, sl
 80093d0:	4659      	mov	r1, fp
 80093d2:	f7f7 fafd 	bl	80009d0 <__aeabi_dcmple>
 80093d6:	b140      	cbz	r0, 80093ea <__ieee754_sqrt+0x156>
 80093d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80093dc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80093e0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80093e4:	d10e      	bne.n	8009404 <__ieee754_sqrt+0x170>
 80093e6:	4635      	mov	r5, r6
 80093e8:	3701      	adds	r7, #1
 80093ea:	107b      	asrs	r3, r7, #1
 80093ec:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80093f0:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80093f4:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 80093f8:	086b      	lsrs	r3, r5, #1
 80093fa:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 80093fe:	e75b      	b.n	80092b8 <__ieee754_sqrt+0x24>
 8009400:	4696      	mov	lr, r2
 8009402:	e7c2      	b.n	800938a <__ieee754_sqrt+0xf6>
 8009404:	f7f6 feb2 	bl	800016c <__adddf3>
 8009408:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4650      	mov	r0, sl
 8009412:	4659      	mov	r1, fp
 8009414:	f7f7 fad2 	bl	80009bc <__aeabi_dcmplt>
 8009418:	b120      	cbz	r0, 8009424 <__ieee754_sqrt+0x190>
 800941a:	1cab      	adds	r3, r5, #2
 800941c:	bf08      	it	eq
 800941e:	3701      	addeq	r7, #1
 8009420:	3502      	adds	r5, #2
 8009422:	e7e2      	b.n	80093ea <__ieee754_sqrt+0x156>
 8009424:	1c6b      	adds	r3, r5, #1
 8009426:	f023 0501 	bic.w	r5, r3, #1
 800942a:	e7de      	b.n	80093ea <__ieee754_sqrt+0x156>
 800942c:	7ff00000 	.word	0x7ff00000
 8009430:	08009848 	.word	0x08009848
 8009434:	08009840 	.word	0x08009840

08009438 <_init>:
 8009438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943a:	bf00      	nop
 800943c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800943e:	bc08      	pop	{r3}
 8009440:	469e      	mov	lr, r3
 8009442:	4770      	bx	lr

08009444 <_fini>:
 8009444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009446:	bf00      	nop
 8009448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800944a:	bc08      	pop	{r3}
 800944c:	469e      	mov	lr, r3
 800944e:	4770      	bx	lr
