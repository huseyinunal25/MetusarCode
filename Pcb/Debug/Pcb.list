
Pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800a4e8  0800a4e8  0000b4e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a968  0800a968  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a968  0800a968  0000b968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a970  0800a970  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a970  0800a970  0000b970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a974  0800a974  0000b974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a978  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  200001d8  0800ab4c  0000c1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  0800ab4c  0000c5e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db4e  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232e  00000000  00000000  00019d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0001c080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a45  00000000  00000000  0001cd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018edf  00000000  00000000  0001d7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010653  00000000  00000000  000366b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089c17  00000000  00000000  00046d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d091e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf8  00000000  00000000  000d0964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d565c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a4cc 	.word	0x0800a4cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800a4cc 	.word	0x0800a4cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_ldivmod>:
 800111c:	b97b      	cbnz	r3, 800113e <__aeabi_ldivmod+0x22>
 800111e:	b972      	cbnz	r2, 800113e <__aeabi_ldivmod+0x22>
 8001120:	2900      	cmp	r1, #0
 8001122:	bfbe      	ittt	lt
 8001124:	2000      	movlt	r0, #0
 8001126:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800112a:	e006      	blt.n	800113a <__aeabi_ldivmod+0x1e>
 800112c:	bf08      	it	eq
 800112e:	2800      	cmpeq	r0, #0
 8001130:	bf1c      	itt	ne
 8001132:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8001136:	f04f 30ff 	movne.w	r0, #4294967295
 800113a:	f000 b9bf 	b.w	80014bc <__aeabi_idiv0>
 800113e:	f1ad 0c08 	sub.w	ip, sp, #8
 8001142:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001146:	2900      	cmp	r1, #0
 8001148:	db09      	blt.n	800115e <__aeabi_ldivmod+0x42>
 800114a:	2b00      	cmp	r3, #0
 800114c:	db1a      	blt.n	8001184 <__aeabi_ldivmod+0x68>
 800114e:	f000 f835 	bl	80011bc <__udivmoddi4>
 8001152:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800115a:	b004      	add	sp, #16
 800115c:	4770      	bx	lr
 800115e:	4240      	negs	r0, r0
 8001160:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001164:	2b00      	cmp	r3, #0
 8001166:	db1b      	blt.n	80011a0 <__aeabi_ldivmod+0x84>
 8001168:	f000 f828 	bl	80011bc <__udivmoddi4>
 800116c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001170:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001174:	b004      	add	sp, #16
 8001176:	4240      	negs	r0, r0
 8001178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800117c:	4252      	negs	r2, r2
 800117e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001182:	4770      	bx	lr
 8001184:	4252      	negs	r2, r2
 8001186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800118a:	f000 f817 	bl	80011bc <__udivmoddi4>
 800118e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001196:	b004      	add	sp, #16
 8001198:	4240      	negs	r0, r0
 800119a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800119e:	4770      	bx	lr
 80011a0:	4252      	negs	r2, r2
 80011a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011a6:	f000 f809 	bl	80011bc <__udivmoddi4>
 80011aa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b2:	b004      	add	sp, #16
 80011b4:	4252      	negs	r2, r2
 80011b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ba:	4770      	bx	lr

080011bc <__udivmoddi4>:
 80011bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011c0:	9d08      	ldr	r5, [sp, #32]
 80011c2:	468e      	mov	lr, r1
 80011c4:	4604      	mov	r4, r0
 80011c6:	4688      	mov	r8, r1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d14a      	bne.n	8001262 <__udivmoddi4+0xa6>
 80011cc:	428a      	cmp	r2, r1
 80011ce:	4617      	mov	r7, r2
 80011d0:	d962      	bls.n	8001298 <__udivmoddi4+0xdc>
 80011d2:	fab2 f682 	clz	r6, r2
 80011d6:	b14e      	cbz	r6, 80011ec <__udivmoddi4+0x30>
 80011d8:	f1c6 0320 	rsb	r3, r6, #32
 80011dc:	fa01 f806 	lsl.w	r8, r1, r6
 80011e0:	fa20 f303 	lsr.w	r3, r0, r3
 80011e4:	40b7      	lsls	r7, r6
 80011e6:	ea43 0808 	orr.w	r8, r3, r8
 80011ea:	40b4      	lsls	r4, r6
 80011ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011f0:	fbb8 f1fe 	udiv	r1, r8, lr
 80011f4:	fa1f fc87 	uxth.w	ip, r7
 80011f8:	fb0e 8811 	mls	r8, lr, r1, r8
 80011fc:	fb01 f20c 	mul.w	r2, r1, ip
 8001200:	0c23      	lsrs	r3, r4, #16
 8001202:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001206:	429a      	cmp	r2, r3
 8001208:	d909      	bls.n	800121e <__udivmoddi4+0x62>
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	f101 30ff 	add.w	r0, r1, #4294967295
 8001210:	f080 80eb 	bcs.w	80013ea <__udivmoddi4+0x22e>
 8001214:	429a      	cmp	r2, r3
 8001216:	f240 80e8 	bls.w	80013ea <__udivmoddi4+0x22e>
 800121a:	3902      	subs	r1, #2
 800121c:	443b      	add	r3, r7
 800121e:	1a9a      	subs	r2, r3, r2
 8001220:	fbb2 f0fe 	udiv	r0, r2, lr
 8001224:	fb0e 2210 	mls	r2, lr, r0, r2
 8001228:	fb00 fc0c 	mul.w	ip, r0, ip
 800122c:	b2a3      	uxth	r3, r4
 800122e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001232:	459c      	cmp	ip, r3
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x8e>
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	f100 32ff 	add.w	r2, r0, #4294967295
 800123c:	f080 80d7 	bcs.w	80013ee <__udivmoddi4+0x232>
 8001240:	459c      	cmp	ip, r3
 8001242:	f240 80d4 	bls.w	80013ee <__udivmoddi4+0x232>
 8001246:	443b      	add	r3, r7
 8001248:	3802      	subs	r0, #2
 800124a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800124e:	2100      	movs	r1, #0
 8001250:	eba3 030c 	sub.w	r3, r3, ip
 8001254:	b11d      	cbz	r5, 800125e <__udivmoddi4+0xa2>
 8001256:	2200      	movs	r2, #0
 8001258:	40f3      	lsrs	r3, r6
 800125a:	e9c5 3200 	strd	r3, r2, [r5]
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	428b      	cmp	r3, r1
 8001264:	d905      	bls.n	8001272 <__udivmoddi4+0xb6>
 8001266:	b10d      	cbz	r5, 800126c <__udivmoddi4+0xb0>
 8001268:	e9c5 0100 	strd	r0, r1, [r5]
 800126c:	2100      	movs	r1, #0
 800126e:	4608      	mov	r0, r1
 8001270:	e7f5      	b.n	800125e <__udivmoddi4+0xa2>
 8001272:	fab3 f183 	clz	r1, r3
 8001276:	2900      	cmp	r1, #0
 8001278:	d146      	bne.n	8001308 <__udivmoddi4+0x14c>
 800127a:	4573      	cmp	r3, lr
 800127c:	d302      	bcc.n	8001284 <__udivmoddi4+0xc8>
 800127e:	4282      	cmp	r2, r0
 8001280:	f200 8108 	bhi.w	8001494 <__udivmoddi4+0x2d8>
 8001284:	1a84      	subs	r4, r0, r2
 8001286:	eb6e 0203 	sbc.w	r2, lr, r3
 800128a:	2001      	movs	r0, #1
 800128c:	4690      	mov	r8, r2
 800128e:	2d00      	cmp	r5, #0
 8001290:	d0e5      	beq.n	800125e <__udivmoddi4+0xa2>
 8001292:	e9c5 4800 	strd	r4, r8, [r5]
 8001296:	e7e2      	b.n	800125e <__udivmoddi4+0xa2>
 8001298:	2a00      	cmp	r2, #0
 800129a:	f000 8091 	beq.w	80013c0 <__udivmoddi4+0x204>
 800129e:	fab2 f682 	clz	r6, r2
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	f040 80a5 	bne.w	80013f2 <__udivmoddi4+0x236>
 80012a8:	1a8a      	subs	r2, r1, r2
 80012aa:	2101      	movs	r1, #1
 80012ac:	0c03      	lsrs	r3, r0, #16
 80012ae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012b2:	b280      	uxth	r0, r0
 80012b4:	b2bc      	uxth	r4, r7
 80012b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80012ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80012be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012c2:	fb04 f20c 	mul.w	r2, r4, ip
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d907      	bls.n	80012da <__udivmoddi4+0x11e>
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80012d0:	d202      	bcs.n	80012d8 <__udivmoddi4+0x11c>
 80012d2:	429a      	cmp	r2, r3
 80012d4:	f200 80e3 	bhi.w	800149e <__udivmoddi4+0x2e2>
 80012d8:	46c4      	mov	ip, r8
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80012e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80012e4:	fb02 f404 	mul.w	r4, r2, r4
 80012e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80012ec:	429c      	cmp	r4, r3
 80012ee:	d907      	bls.n	8001300 <__udivmoddi4+0x144>
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80012f6:	d202      	bcs.n	80012fe <__udivmoddi4+0x142>
 80012f8:	429c      	cmp	r4, r3
 80012fa:	f200 80cd 	bhi.w	8001498 <__udivmoddi4+0x2dc>
 80012fe:	4602      	mov	r2, r0
 8001300:	1b1b      	subs	r3, r3, r4
 8001302:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001306:	e7a5      	b.n	8001254 <__udivmoddi4+0x98>
 8001308:	f1c1 0620 	rsb	r6, r1, #32
 800130c:	408b      	lsls	r3, r1
 800130e:	fa22 f706 	lsr.w	r7, r2, r6
 8001312:	431f      	orrs	r7, r3
 8001314:	fa2e fa06 	lsr.w	sl, lr, r6
 8001318:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800131c:	fbba f8f9 	udiv	r8, sl, r9
 8001320:	fa0e fe01 	lsl.w	lr, lr, r1
 8001324:	fa20 f306 	lsr.w	r3, r0, r6
 8001328:	fb09 aa18 	mls	sl, r9, r8, sl
 800132c:	fa1f fc87 	uxth.w	ip, r7
 8001330:	ea43 030e 	orr.w	r3, r3, lr
 8001334:	fa00 fe01 	lsl.w	lr, r0, r1
 8001338:	fb08 f00c 	mul.w	r0, r8, ip
 800133c:	0c1c      	lsrs	r4, r3, #16
 800133e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001342:	42a0      	cmp	r0, r4
 8001344:	fa02 f201 	lsl.w	r2, r2, r1
 8001348:	d90a      	bls.n	8001360 <__udivmoddi4+0x1a4>
 800134a:	193c      	adds	r4, r7, r4
 800134c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001350:	f080 809e 	bcs.w	8001490 <__udivmoddi4+0x2d4>
 8001354:	42a0      	cmp	r0, r4
 8001356:	f240 809b 	bls.w	8001490 <__udivmoddi4+0x2d4>
 800135a:	f1a8 0802 	sub.w	r8, r8, #2
 800135e:	443c      	add	r4, r7
 8001360:	1a24      	subs	r4, r4, r0
 8001362:	b298      	uxth	r0, r3
 8001364:	fbb4 f3f9 	udiv	r3, r4, r9
 8001368:	fb09 4413 	mls	r4, r9, r3, r4
 800136c:	fb03 fc0c 	mul.w	ip, r3, ip
 8001370:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001374:	45a4      	cmp	ip, r4
 8001376:	d909      	bls.n	800138c <__udivmoddi4+0x1d0>
 8001378:	193c      	adds	r4, r7, r4
 800137a:	f103 30ff 	add.w	r0, r3, #4294967295
 800137e:	f080 8085 	bcs.w	800148c <__udivmoddi4+0x2d0>
 8001382:	45a4      	cmp	ip, r4
 8001384:	f240 8082 	bls.w	800148c <__udivmoddi4+0x2d0>
 8001388:	3b02      	subs	r3, #2
 800138a:	443c      	add	r4, r7
 800138c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001390:	eba4 040c 	sub.w	r4, r4, ip
 8001394:	fba0 8c02 	umull	r8, ip, r0, r2
 8001398:	4564      	cmp	r4, ip
 800139a:	4643      	mov	r3, r8
 800139c:	46e1      	mov	r9, ip
 800139e:	d364      	bcc.n	800146a <__udivmoddi4+0x2ae>
 80013a0:	d061      	beq.n	8001466 <__udivmoddi4+0x2aa>
 80013a2:	b15d      	cbz	r5, 80013bc <__udivmoddi4+0x200>
 80013a4:	ebbe 0203 	subs.w	r2, lr, r3
 80013a8:	eb64 0409 	sbc.w	r4, r4, r9
 80013ac:	fa04 f606 	lsl.w	r6, r4, r6
 80013b0:	fa22 f301 	lsr.w	r3, r2, r1
 80013b4:	431e      	orrs	r6, r3
 80013b6:	40cc      	lsrs	r4, r1
 80013b8:	e9c5 6400 	strd	r6, r4, [r5]
 80013bc:	2100      	movs	r1, #0
 80013be:	e74e      	b.n	800125e <__udivmoddi4+0xa2>
 80013c0:	fbb1 fcf2 	udiv	ip, r1, r2
 80013c4:	0c01      	lsrs	r1, r0, #16
 80013c6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80013ca:	b280      	uxth	r0, r0
 80013cc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80013d0:	463b      	mov	r3, r7
 80013d2:	fbb1 f1f7 	udiv	r1, r1, r7
 80013d6:	4638      	mov	r0, r7
 80013d8:	463c      	mov	r4, r7
 80013da:	46b8      	mov	r8, r7
 80013dc:	46be      	mov	lr, r7
 80013de:	2620      	movs	r6, #32
 80013e0:	eba2 0208 	sub.w	r2, r2, r8
 80013e4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013e8:	e765      	b.n	80012b6 <__udivmoddi4+0xfa>
 80013ea:	4601      	mov	r1, r0
 80013ec:	e717      	b.n	800121e <__udivmoddi4+0x62>
 80013ee:	4610      	mov	r0, r2
 80013f0:	e72b      	b.n	800124a <__udivmoddi4+0x8e>
 80013f2:	f1c6 0120 	rsb	r1, r6, #32
 80013f6:	fa2e fc01 	lsr.w	ip, lr, r1
 80013fa:	40b7      	lsls	r7, r6
 80013fc:	fa0e fe06 	lsl.w	lr, lr, r6
 8001400:	fa20 f101 	lsr.w	r1, r0, r1
 8001404:	ea41 010e 	orr.w	r1, r1, lr
 8001408:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800140c:	fbbc f8fe 	udiv	r8, ip, lr
 8001410:	b2bc      	uxth	r4, r7
 8001412:	fb0e cc18 	mls	ip, lr, r8, ip
 8001416:	fb08 f904 	mul.w	r9, r8, r4
 800141a:	0c0a      	lsrs	r2, r1, #16
 800141c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001420:	40b0      	lsls	r0, r6
 8001422:	4591      	cmp	r9, r2
 8001424:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001428:	b280      	uxth	r0, r0
 800142a:	d93e      	bls.n	80014aa <__udivmoddi4+0x2ee>
 800142c:	18ba      	adds	r2, r7, r2
 800142e:	f108 3cff 	add.w	ip, r8, #4294967295
 8001432:	d201      	bcs.n	8001438 <__udivmoddi4+0x27c>
 8001434:	4591      	cmp	r9, r2
 8001436:	d81f      	bhi.n	8001478 <__udivmoddi4+0x2bc>
 8001438:	eba2 0209 	sub.w	r2, r2, r9
 800143c:	fbb2 f9fe 	udiv	r9, r2, lr
 8001440:	fb09 f804 	mul.w	r8, r9, r4
 8001444:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001448:	b28a      	uxth	r2, r1
 800144a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800144e:	4542      	cmp	r2, r8
 8001450:	d229      	bcs.n	80014a6 <__udivmoddi4+0x2ea>
 8001452:	18ba      	adds	r2, r7, r2
 8001454:	f109 31ff 	add.w	r1, r9, #4294967295
 8001458:	d2c2      	bcs.n	80013e0 <__udivmoddi4+0x224>
 800145a:	4542      	cmp	r2, r8
 800145c:	d2c0      	bcs.n	80013e0 <__udivmoddi4+0x224>
 800145e:	f1a9 0102 	sub.w	r1, r9, #2
 8001462:	443a      	add	r2, r7
 8001464:	e7bc      	b.n	80013e0 <__udivmoddi4+0x224>
 8001466:	45c6      	cmp	lr, r8
 8001468:	d29b      	bcs.n	80013a2 <__udivmoddi4+0x1e6>
 800146a:	ebb8 0302 	subs.w	r3, r8, r2
 800146e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001472:	3801      	subs	r0, #1
 8001474:	46e1      	mov	r9, ip
 8001476:	e794      	b.n	80013a2 <__udivmoddi4+0x1e6>
 8001478:	eba7 0909 	sub.w	r9, r7, r9
 800147c:	444a      	add	r2, r9
 800147e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001482:	f1a8 0c02 	sub.w	ip, r8, #2
 8001486:	fb09 f804 	mul.w	r8, r9, r4
 800148a:	e7db      	b.n	8001444 <__udivmoddi4+0x288>
 800148c:	4603      	mov	r3, r0
 800148e:	e77d      	b.n	800138c <__udivmoddi4+0x1d0>
 8001490:	46d0      	mov	r8, sl
 8001492:	e765      	b.n	8001360 <__udivmoddi4+0x1a4>
 8001494:	4608      	mov	r0, r1
 8001496:	e6fa      	b.n	800128e <__udivmoddi4+0xd2>
 8001498:	443b      	add	r3, r7
 800149a:	3a02      	subs	r2, #2
 800149c:	e730      	b.n	8001300 <__udivmoddi4+0x144>
 800149e:	f1ac 0c02 	sub.w	ip, ip, #2
 80014a2:	443b      	add	r3, r7
 80014a4:	e719      	b.n	80012da <__udivmoddi4+0x11e>
 80014a6:	4649      	mov	r1, r9
 80014a8:	e79a      	b.n	80013e0 <__udivmoddi4+0x224>
 80014aa:	eba2 0209 	sub.w	r2, r2, r9
 80014ae:	fbb2 f9fe 	udiv	r9, r2, lr
 80014b2:	46c4      	mov	ip, r8
 80014b4:	fb09 f804 	mul.w	r8, r9, r4
 80014b8:	e7c4      	b.n	8001444 <__udivmoddi4+0x288>
 80014ba:	bf00      	nop

080014bc <__aeabi_idiv0>:
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop

080014c0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	@ 0x30
 80014c4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	2319      	movs	r3, #25
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	463b      	mov	r3, r7
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2301      	movs	r3, #1
 80014d6:	2288      	movs	r2, #136	@ 0x88
 80014d8:	21ec      	movs	r1, #236	@ 0xec
 80014da:	485f      	ldr	r0, [pc, #380]	@ (8001658 <TrimRead+0x198>)
 80014dc:	f002 fcb4 	bl	8003e48 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80014e0:	463b      	mov	r3, r7
 80014e2:	3319      	adds	r3, #25
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	9202      	str	r2, [sp, #8]
 80014ea:	2207      	movs	r2, #7
 80014ec:	9201      	str	r2, [sp, #4]
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	22e1      	movs	r2, #225	@ 0xe1
 80014f4:	21ec      	movs	r1, #236	@ 0xec
 80014f6:	4858      	ldr	r0, [pc, #352]	@ (8001658 <TrimRead+0x198>)
 80014f8:	f002 fca6 	bl	8003e48 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80014fc:	787b      	ldrb	r3, [r7, #1]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b21a      	sxth	r2, r3
 8001504:	783b      	ldrb	r3, [r7, #0]
 8001506:	b21b      	sxth	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b21b      	sxth	r3, r3
 800150c:	b29a      	uxth	r2, r3
 800150e:	4b53      	ldr	r3, [pc, #332]	@ (800165c <TrimRead+0x19c>)
 8001510:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	b21b      	sxth	r3, r3
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	b21a      	sxth	r2, r3
 800151a:	78bb      	ldrb	r3, [r7, #2]
 800151c:	b21b      	sxth	r3, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	b21a      	sxth	r2, r3
 8001522:	4b4f      	ldr	r3, [pc, #316]	@ (8001660 <TrimRead+0x1a0>)
 8001524:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001526:	797b      	ldrb	r3, [r7, #5]
 8001528:	b21b      	sxth	r3, r3
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21a      	sxth	r2, r3
 800152e:	793b      	ldrb	r3, [r7, #4]
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21a      	sxth	r2, r3
 8001536:	4b4b      	ldr	r3, [pc, #300]	@ (8001664 <TrimRead+0x1a4>)
 8001538:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	b21b      	sxth	r3, r3
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	797b      	ldrb	r3, [r7, #5]
 8001544:	b21b      	sxth	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b21b      	sxth	r3, r3
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b46      	ldr	r3, [pc, #280]	@ (8001668 <TrimRead+0x1a8>)
 800154e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001550:	7a7b      	ldrb	r3, [r7, #9]
 8001552:	b21b      	sxth	r3, r3
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21a      	sxth	r2, r3
 8001560:	4b42      	ldr	r3, [pc, #264]	@ (800166c <TrimRead+0x1ac>)
 8001562:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001564:	7afb      	ldrb	r3, [r7, #11]
 8001566:	b21b      	sxth	r3, r3
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b21a      	sxth	r2, r3
 800156c:	7abb      	ldrb	r3, [r7, #10]
 800156e:	b21b      	sxth	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b21a      	sxth	r2, r3
 8001574:	4b3e      	ldr	r3, [pc, #248]	@ (8001670 <TrimRead+0x1b0>)
 8001576:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001578:	7b7b      	ldrb	r3, [r7, #13]
 800157a:	b21b      	sxth	r3, r3
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	7b3b      	ldrb	r3, [r7, #12]
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b21a      	sxth	r2, r3
 8001588:	4b3a      	ldr	r3, [pc, #232]	@ (8001674 <TrimRead+0x1b4>)
 800158a:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	b21b      	sxth	r3, r3
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	b21a      	sxth	r2, r3
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	b21b      	sxth	r3, r3
 8001598:	4313      	orrs	r3, r2
 800159a:	b21a      	sxth	r2, r3
 800159c:	4b36      	ldr	r3, [pc, #216]	@ (8001678 <TrimRead+0x1b8>)
 800159e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80015a0:	7c7b      	ldrb	r3, [r7, #17]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	021b      	lsls	r3, r3, #8
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	7c3b      	ldrb	r3, [r7, #16]
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	4b32      	ldr	r3, [pc, #200]	@ (800167c <TrimRead+0x1bc>)
 80015b2:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80015b4:	7cfb      	ldrb	r3, [r7, #19]
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7cbb      	ldrb	r3, [r7, #18]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <TrimRead+0x1c0>)
 80015c6:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80015c8:	7d7b      	ldrb	r3, [r7, #21]
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	7d3b      	ldrb	r3, [r7, #20]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001684 <TrimRead+0x1c4>)
 80015da:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	b21b      	sxth	r3, r3
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	7dbb      	ldrb	r3, [r7, #22]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	4b26      	ldr	r3, [pc, #152]	@ (8001688 <TrimRead+0x1c8>)
 80015ee:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80015f0:	7e3b      	ldrb	r3, [r7, #24]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b25      	ldr	r3, [pc, #148]	@ (800168c <TrimRead+0x1cc>)
 80015f6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80015f8:	7ebb      	ldrb	r3, [r7, #26]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21a      	sxth	r2, r3
 8001600:	7e7b      	ldrb	r3, [r7, #25]
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21a      	sxth	r2, r3
 8001608:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <TrimRead+0x1d0>)
 800160a:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 800160c:	7efb      	ldrb	r3, [r7, #27]
 800160e:	461a      	mov	r2, r3
 8001610:	4b20      	ldr	r3, [pc, #128]	@ (8001694 <TrimRead+0x1d4>)
 8001612:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001614:	7f3b      	ldrb	r3, [r7, #28]
 8001616:	b21b      	sxth	r3, r3
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	b21a      	sxth	r2, r3
 800161c:	7f7b      	ldrb	r3, [r7, #29]
 800161e:	b21b      	sxth	r3, r3
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21a      	sxth	r2, r3
 800162a:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <TrimRead+0x1d8>)
 800162c:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800162e:	7fbb      	ldrb	r3, [r7, #30]
 8001630:	b21b      	sxth	r3, r3
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	b21a      	sxth	r2, r3
 8001636:	7f7b      	ldrb	r3, [r7, #29]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	b2db      	uxtb	r3, r3
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21a      	sxth	r2, r3
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <TrimRead+0x1dc>)
 8001644:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001646:	7ffb      	ldrb	r3, [r7, #31]
 8001648:	b21a      	sxth	r2, r3
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <TrimRead+0x1e0>)
 800164c:	801a      	strh	r2, [r3, #0]
}
 800164e:	bf00      	nop
 8001650:	3720      	adds	r7, #32
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000238 	.word	0x20000238
 800165c:	20000200 	.word	0x20000200
 8001660:	20000208 	.word	0x20000208
 8001664:	2000020a 	.word	0x2000020a
 8001668:	20000202 	.word	0x20000202
 800166c:	2000020c 	.word	0x2000020c
 8001670:	2000020e 	.word	0x2000020e
 8001674:	20000210 	.word	0x20000210
 8001678:	20000212 	.word	0x20000212
 800167c:	20000214 	.word	0x20000214
 8001680:	20000216 	.word	0x20000216
 8001684:	20000218 	.word	0x20000218
 8001688:	2000021a 	.word	0x2000021a
 800168c:	20000204 	.word	0x20000204
 8001690:	2000021c 	.word	0x2000021c
 8001694:	20000206 	.word	0x20000206
 8001698:	2000021e 	.word	0x2000021e
 800169c:	20000220 	.word	0x20000220
 80016a0:	20000222 	.word	0x20000222

080016a4 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b089      	sub	sp, #36	@ 0x24
 80016a8:	af04      	add	r7, sp, #16
 80016aa:	4604      	mov	r4, r0
 80016ac:	4608      	mov	r0, r1
 80016ae:	4611      	mov	r1, r2
 80016b0:	461a      	mov	r2, r3
 80016b2:	4623      	mov	r3, r4
 80016b4:	71fb      	strb	r3, [r7, #7]
 80016b6:	4603      	mov	r3, r0
 80016b8:	71bb      	strb	r3, [r7, #6]
 80016ba:	460b      	mov	r3, r1
 80016bc:	717b      	strb	r3, [r7, #5]
 80016be:	4613      	mov	r3, r2
 80016c0:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80016c2:	f7ff fefd 	bl	80014c0 <TrimRead>


	uint8_t datatowrite = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80016ce:	23b6      	movs	r3, #182	@ 0xb6
 80016d0:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80016d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	2301      	movs	r3, #1
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	f107 030f 	add.w	r3, r7, #15
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2301      	movs	r3, #1
 80016e4:	22e0      	movs	r2, #224	@ 0xe0
 80016e6:	21ec      	movs	r1, #236	@ 0xec
 80016e8:	4842      	ldr	r0, [pc, #264]	@ (80017f4 <BME280_Config+0x150>)
 80016ea:	f002 fab3 	bl	8003c54 <HAL_I2C_Mem_Write>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <BME280_Config+0x56>
	{
		return -1;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
 80016f8:	e077      	b.n	80017ea <BME280_Config+0x146>
	}

	HAL_Delay (100);
 80016fa:	2064      	movs	r0, #100	@ 0x64
 80016fc:	f001 fe20 	bl	8003340 <HAL_Delay>
	// write the humidity oversampling to 0xF2



	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001700:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001704:	015b      	lsls	r3, r3, #5
 8001706:	b25a      	sxtb	r2, r3
 8001708:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	b25b      	sxtb	r3, r3
 8001710:	4313      	orrs	r3, r2
 8001712:	b25b      	sxtb	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171c:	9302      	str	r3, [sp, #8]
 800171e:	2301      	movs	r3, #1
 8001720:	9301      	str	r3, [sp, #4]
 8001722:	f107 030f 	add.w	r3, r7, #15
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2301      	movs	r3, #1
 800172a:	22f5      	movs	r2, #245	@ 0xf5
 800172c:	21ec      	movs	r1, #236	@ 0xec
 800172e:	4831      	ldr	r0, [pc, #196]	@ (80017f4 <BME280_Config+0x150>)
 8001730:	f002 fa90 	bl	8003c54 <HAL_I2C_Mem_Write>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <BME280_Config+0x9c>
	{
		return -1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e054      	b.n	80017ea <BME280_Config+0x146>
	}
	HAL_Delay (100);
 8001740:	2064      	movs	r0, #100	@ 0x64
 8001742:	f001 fdfd 	bl	8003340 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174a:	9302      	str	r3, [sp, #8]
 800174c:	2301      	movs	r3, #1
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	f107 030e 	add.w	r3, r7, #14
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2301      	movs	r3, #1
 8001758:	22f5      	movs	r2, #245	@ 0xf5
 800175a:	21ec      	movs	r1, #236	@ 0xec
 800175c:	4825      	ldr	r0, [pc, #148]	@ (80017f4 <BME280_Config+0x150>)
 800175e:	f002 fb73 	bl	8003e48 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001762:	7bba      	ldrb	r2, [r7, #14]
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	429a      	cmp	r2, r3
 8001768:	d002      	beq.n	8001770 <BME280_Config+0xcc>
	{
		return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e03c      	b.n	80017ea <BME280_Config+0x146>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	015b      	lsls	r3, r3, #5
 8001776:	b25a      	sxtb	r2, r3
 8001778:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	b25b      	sxtb	r3, r3
 8001780:	4313      	orrs	r3, r2
 8001782:	b25a      	sxtb	r2, r3
 8001784:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001788:	4313      	orrs	r3, r2
 800178a:	b25b      	sxtb	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001790:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001794:	9302      	str	r3, [sp, #8]
 8001796:	2301      	movs	r3, #1
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	f107 030f 	add.w	r3, r7, #15
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2301      	movs	r3, #1
 80017a2:	22f4      	movs	r2, #244	@ 0xf4
 80017a4:	21ec      	movs	r1, #236	@ 0xec
 80017a6:	4813      	ldr	r0, [pc, #76]	@ (80017f4 <BME280_Config+0x150>)
 80017a8:	f002 fa54 	bl	8003c54 <HAL_I2C_Mem_Write>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <BME280_Config+0x114>
	{
		return -1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	e018      	b.n	80017ea <BME280_Config+0x146>
	}
	HAL_Delay (100);
 80017b8:	2064      	movs	r0, #100	@ 0x64
 80017ba:	f001 fdc1 	bl	8003340 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80017be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	2301      	movs	r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	f107 030e 	add.w	r3, r7, #14
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2301      	movs	r3, #1
 80017d0:	22f4      	movs	r2, #244	@ 0xf4
 80017d2:	21ec      	movs	r1, #236	@ 0xec
 80017d4:	4807      	ldr	r0, [pc, #28]	@ (80017f4 <BME280_Config+0x150>)
 80017d6:	f002 fb37 	bl	8003e48 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80017da:	7bba      	ldrb	r2, [r7, #14]
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d002      	beq.n	80017e8 <BME280_Config+0x144>
	{
		return -1;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	e000      	b.n	80017ea <BME280_Config+0x146>
	}

	return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000238 	.word	0x20000238

080017f8 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80017fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	2301      	movs	r3, #1
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <BMEReadRaw+0x80>)
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2301      	movs	r3, #1
 800180e:	22d0      	movs	r2, #208	@ 0xd0
 8001810:	21ec      	movs	r1, #236	@ 0xec
 8001812:	481a      	ldr	r0, [pc, #104]	@ (800187c <BMEReadRaw+0x84>)
 8001814:	f002 fb18 	bl	8003e48 <HAL_I2C_Mem_Read>

	if (chipID == 0x58)
 8001818:	4b17      	ldr	r3, [pc, #92]	@ (8001878 <BMEReadRaw+0x80>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b58      	cmp	r3, #88	@ 0x58
 800181e:	d124      	bne.n	800186a <BMEReadRaw+0x72>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	2308      	movs	r3, #8
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	463b      	mov	r3, r7
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2301      	movs	r3, #1
 8001830:	22f7      	movs	r2, #247	@ 0xf7
 8001832:	21ec      	movs	r1, #236	@ 0xec
 8001834:	4811      	ldr	r0, [pc, #68]	@ (800187c <BMEReadRaw+0x84>)
 8001836:	f002 fb07 	bl	8003e48 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800183a:	783b      	ldrb	r3, [r7, #0]
 800183c:	031a      	lsls	r2, r3, #12
 800183e:	787b      	ldrb	r3, [r7, #1]
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	4313      	orrs	r3, r2
 8001844:	78ba      	ldrb	r2, [r7, #2]
 8001846:	0912      	lsrs	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	4313      	orrs	r3, r2
 800184c:	4a0c      	ldr	r2, [pc, #48]	@ (8001880 <BMEReadRaw+0x88>)
 800184e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	031a      	lsls	r2, r3, #12
 8001854:	793b      	ldrb	r3, [r7, #4]
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4313      	orrs	r3, r2
 800185a:	797a      	ldrb	r2, [r7, #5]
 800185c:	0912      	lsrs	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	4313      	orrs	r3, r2
 8001862:	4a08      	ldr	r2, [pc, #32]	@ (8001884 <BMEReadRaw+0x8c>)
 8001864:	6013      	str	r3, [r2, #0]


		return 0;
 8001866:	2300      	movs	r3, #0
 8001868:	e001      	b.n	800186e <BMEReadRaw+0x76>
	}

	else return -1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200001f4 	.word	0x200001f4
 800187c:	20000238 	.word	0x20000238
 8001880:	200001fc 	.word	0x200001fc
 8001884:	200001f8 	.word	0x200001f8

08001888 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	10da      	asrs	r2, r3, #3
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <BME280_compensate_T_int32+0x70>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4a17      	ldr	r2, [pc, #92]	@ (80018fc <BME280_compensate_T_int32+0x74>)
 800189e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	12db      	asrs	r3, r3, #11
 80018a8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	111b      	asrs	r3, r3, #4
 80018ae:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <BME280_compensate_T_int32+0x70>)
 80018b0:	8812      	ldrh	r2, [r2, #0]
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	1112      	asrs	r2, r2, #4
 80018b8:	490f      	ldr	r1, [pc, #60]	@ (80018f8 <BME280_compensate_T_int32+0x70>)
 80018ba:	8809      	ldrh	r1, [r1, #0]
 80018bc:	1a52      	subs	r2, r2, r1
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	131b      	asrs	r3, r3, #12
 80018c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001900 <BME280_compensate_T_int32+0x78>)
 80018c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	139b      	asrs	r3, r3, #14
 80018d0:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <BME280_compensate_T_int32+0x7c>)
 80018da:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <BME280_compensate_T_int32+0x7c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	3380      	adds	r3, #128	@ 0x80
 80018e8:	121b      	asrs	r3, r3, #8
 80018ea:	60fb      	str	r3, [r7, #12]
	return T;
 80018ec:	68fb      	ldr	r3, [r7, #12]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	371c      	adds	r7, #28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	20000200 	.word	0x20000200
 80018fc:	20000208 	.word	0x20000208
 8001900:	2000020a 	.word	0x2000020a
 8001904:	20000224 	.word	0x20000224

08001908 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800190c:	b0ca      	sub	sp, #296	@ 0x128
 800190e:	af00      	add	r7, sp, #0
 8001910:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001914:	4bae      	ldr	r3, [pc, #696]	@ (8001bd0 <BME280_compensate_P_int64+0x2c8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	17da      	asrs	r2, r3, #31
 800191a:	461c      	mov	r4, r3
 800191c:	4615      	mov	r5, r2
 800191e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001922:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001926:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800192a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800192e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001932:	fb03 f102 	mul.w	r1, r3, r2
 8001936:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800193a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	18ca      	adds	r2, r1, r3
 8001944:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001948:	fba3 8903 	umull	r8, r9, r3, r3
 800194c:	eb02 0309 	add.w	r3, r2, r9
 8001950:	4699      	mov	r9, r3
 8001952:	4ba0      	ldr	r3, [pc, #640]	@ (8001bd4 <BME280_compensate_P_int64+0x2cc>)
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	b21b      	sxth	r3, r3
 800195a:	17da      	asrs	r2, r3, #31
 800195c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001960:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001964:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001968:	4603      	mov	r3, r0
 800196a:	fb03 f209 	mul.w	r2, r3, r9
 800196e:	460b      	mov	r3, r1
 8001970:	fb08 f303 	mul.w	r3, r8, r3
 8001974:	4413      	add	r3, r2
 8001976:	4602      	mov	r2, r0
 8001978:	fba8 2102 	umull	r2, r1, r8, r2
 800197c:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001980:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001984:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001988:	4413      	add	r3, r2
 800198a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800198e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001992:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001996:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 800199a:	4b8f      	ldr	r3, [pc, #572]	@ (8001bd8 <BME280_compensate_P_int64+0x2d0>)
 800199c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	17da      	asrs	r2, r3, #31
 80019a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019a8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80019ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80019b0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80019b4:	462a      	mov	r2, r5
 80019b6:	fb02 f203 	mul.w	r2, r2, r3
 80019ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80019be:	4621      	mov	r1, r4
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	441a      	add	r2, r3
 80019c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80019ca:	4621      	mov	r1, r4
 80019cc:	fba3 3101 	umull	r3, r1, r3, r1
 80019d0:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80019d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80019d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80019dc:	18d3      	adds	r3, r2, r3
 80019de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80019e2:	f04f 0000 	mov.w	r0, #0
 80019e6:	f04f 0100 	mov.w	r1, #0
 80019ea:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80019ee:	462b      	mov	r3, r5
 80019f0:	0459      	lsls	r1, r3, #17
 80019f2:	4622      	mov	r2, r4
 80019f4:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80019f8:	4623      	mov	r3, r4
 80019fa:	0458      	lsls	r0, r3, #17
 80019fc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a00:	1814      	adds	r4, r2, r0
 8001a02:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a04:	414b      	adcs	r3, r1
 8001a06:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a08:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a0c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001a10:	4b72      	ldr	r3, [pc, #456]	@ (8001bdc <BME280_compensate_P_int64+0x2d4>)
 8001a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	17da      	asrs	r2, r3, #31
 8001a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a1e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a22:	f04f 0000 	mov.w	r0, #0
 8001a26:	f04f 0100 	mov.w	r1, #0
 8001a2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a2e:	00d9      	lsls	r1, r3, #3
 8001a30:	2000      	movs	r0, #0
 8001a32:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a36:	1814      	adds	r4, r2, r0
 8001a38:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001a3a:	414b      	adcs	r3, r1
 8001a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a3e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a42:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001a46:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001a4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a4e:	fb03 f102 	mul.w	r1, r3, r2
 8001a52:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001a56:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	18ca      	adds	r2, r1, r3
 8001a60:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a64:	fba3 3103 	umull	r3, r1, r3, r3
 8001a68:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a74:	18d3      	adds	r3, r2, r3
 8001a76:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001a7a:	4b59      	ldr	r3, [pc, #356]	@ (8001be0 <BME280_compensate_P_int64+0x2d8>)
 8001a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	17da      	asrs	r2, r3, #31
 8001a84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001a88:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001a8c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8001a90:	4622      	mov	r2, r4
 8001a92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001a96:	4641      	mov	r1, r8
 8001a98:	fb01 f202 	mul.w	r2, r1, r2
 8001a9c:	464d      	mov	r5, r9
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	fb03 f305 	mul.w	r3, r3, r5
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4641      	mov	r1, r8
 8001aae:	fba2 2101 	umull	r2, r1, r2, r1
 8001ab2:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8001ab6:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001aba:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001abe:	4413      	add	r3, r2
 8001ac0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001ac4:	f04f 0000 	mov.w	r0, #0
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001ad0:	4623      	mov	r3, r4
 8001ad2:	0a18      	lsrs	r0, r3, #8
 8001ad4:	462a      	mov	r2, r5
 8001ad6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001ada:	462b      	mov	r3, r5
 8001adc:	1219      	asrs	r1, r3, #8
 8001ade:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <BME280_compensate_P_int64+0x2dc>)
 8001ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae4:	b21b      	sxth	r3, r3
 8001ae6:	17da      	asrs	r2, r3, #31
 8001ae8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001aec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001af0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001af4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001af8:	464a      	mov	r2, r9
 8001afa:	fb02 f203 	mul.w	r2, r2, r3
 8001afe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001b02:	4644      	mov	r4, r8
 8001b04:	fb04 f303 	mul.w	r3, r4, r3
 8001b08:	441a      	add	r2, r3
 8001b0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001b0e:	4644      	mov	r4, r8
 8001b10:	fba3 3404 	umull	r3, r4, r3, r4
 8001b14:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001b18:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001b1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001b20:	18d3      	adds	r3, r2, r3
 8001b22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001b32:	464c      	mov	r4, r9
 8001b34:	0323      	lsls	r3, r4, #12
 8001b36:	46c4      	mov	ip, r8
 8001b38:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001b3c:	4644      	mov	r4, r8
 8001b3e:	0322      	lsls	r2, r4, #12
 8001b40:	1884      	adds	r4, r0, r2
 8001b42:	633c      	str	r4, [r7, #48]	@ 0x30
 8001b44:	eb41 0303 	adc.w	r3, r1, r3
 8001b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b4a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b4e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001b52:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b56:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b5a:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001b5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001b62:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <BME280_compensate_P_int64+0x2e0>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b6e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b72:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001b76:	4622      	mov	r2, r4
 8001b78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001b7c:	4641      	mov	r1, r8
 8001b7e:	fb01 f202 	mul.w	r2, r1, r2
 8001b82:	464d      	mov	r5, r9
 8001b84:	4618      	mov	r0, r3
 8001b86:	4621      	mov	r1, r4
 8001b88:	4603      	mov	r3, r0
 8001b8a:	fb03 f305 	mul.w	r3, r3, r5
 8001b8e:	4413      	add	r3, r2
 8001b90:	4602      	mov	r2, r0
 8001b92:	4641      	mov	r1, r8
 8001b94:	fba2 2101 	umull	r2, r1, r2, r1
 8001b98:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001b9c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001ba0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	104a      	asrs	r2, r1, #1
 8001bba:	4629      	mov	r1, r5
 8001bbc:	17cb      	asrs	r3, r1, #31
 8001bbe:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001bc2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	d110      	bne.n	8001bec <BME280_compensate_P_int64+0x2e4>
	{
		return 0; // avoid exception caused by division by zero
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e152      	b.n	8001e74 <BME280_compensate_P_int64+0x56c>
 8001bce:	bf00      	nop
 8001bd0:	20000224 	.word	0x20000224
 8001bd4:	20000214 	.word	0x20000214
 8001bd8:	20000212 	.word	0x20000212
 8001bdc:	20000210 	.word	0x20000210
 8001be0:	2000020e 	.word	0x2000020e
 8001be4:	2000020c 	.word	0x2000020c
 8001be8:	20000202 	.word	0x20000202
	}
	p = 1048576-adc_P;
 8001bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001bf0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001bf4:	17da      	asrs	r2, r3, #31
 8001bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bfa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001bfe:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001c02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001c06:	105b      	asrs	r3, r3, #1
 8001c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001c10:	07db      	lsls	r3, r3, #31
 8001c12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c16:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001c1e:	4604      	mov	r4, r0
 8001c20:	1aa4      	subs	r4, r4, r2
 8001c22:	67bc      	str	r4, [r7, #120]	@ 0x78
 8001c24:	eb61 0303 	sbc.w	r3, r1, r3
 8001c28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c2a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001c2e:	4622      	mov	r2, r4
 8001c30:	462b      	mov	r3, r5
 8001c32:	1891      	adds	r1, r2, r2
 8001c34:	6239      	str	r1, [r7, #32]
 8001c36:	415b      	adcs	r3, r3
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c3e:	4621      	mov	r1, r4
 8001c40:	1851      	adds	r1, r2, r1
 8001c42:	61b9      	str	r1, [r7, #24]
 8001c44:	4629      	mov	r1, r5
 8001c46:	414b      	adcs	r3, r1
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c56:	4649      	mov	r1, r9
 8001c58:	018b      	lsls	r3, r1, #6
 8001c5a:	4641      	mov	r1, r8
 8001c5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c60:	4641      	mov	r1, r8
 8001c62:	018a      	lsls	r2, r1, #6
 8001c64:	4641      	mov	r1, r8
 8001c66:	1889      	adds	r1, r1, r2
 8001c68:	6139      	str	r1, [r7, #16]
 8001c6a:	4649      	mov	r1, r9
 8001c6c:	eb43 0101 	adc.w	r1, r3, r1
 8001c70:	6179      	str	r1, [r7, #20]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c7e:	4649      	mov	r1, r9
 8001c80:	008b      	lsls	r3, r1, #2
 8001c82:	46c4      	mov	ip, r8
 8001c84:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c88:	4641      	mov	r1, r8
 8001c8a:	008a      	lsls	r2, r1, #2
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4603      	mov	r3, r0
 8001c92:	4622      	mov	r2, r4
 8001c94:	189b      	adds	r3, r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	462a      	mov	r2, r5
 8001c9c:	eb42 0303 	adc.w	r3, r2, r3
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001cae:	4649      	mov	r1, r9
 8001cb0:	008b      	lsls	r3, r1, #2
 8001cb2:	46c4      	mov	ip, r8
 8001cb4:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001cb8:	4641      	mov	r1, r8
 8001cba:	008a      	lsls	r2, r1, #2
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4622      	mov	r2, r4
 8001cc4:	189b      	adds	r3, r3, r2
 8001cc6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001cc8:	462b      	mov	r3, r5
 8001cca:	460a      	mov	r2, r1
 8001ccc:	eb42 0303 	adc.w	r3, r2, r3
 8001cd0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001cd2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001cd6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001cda:	f7ff fa1f 	bl	800111c <__aeabi_ldivmod>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001ce6:	4b66      	ldr	r3, [pc, #408]	@ (8001e80 <BME280_compensate_P_int64+0x578>)
 8001ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	17da      	asrs	r2, r3, #31
 8001cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001cf2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001cf4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001cf8:	f04f 0000 	mov.w	r0, #0
 8001cfc:	f04f 0100 	mov.w	r1, #0
 8001d00:	0b50      	lsrs	r0, r2, #13
 8001d02:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d06:	1359      	asrs	r1, r3, #13
 8001d08:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001d0c:	462b      	mov	r3, r5
 8001d0e:	fb00 f203 	mul.w	r2, r0, r3
 8001d12:	4623      	mov	r3, r4
 8001d14:	fb03 f301 	mul.w	r3, r3, r1
 8001d18:	4413      	add	r3, r2
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	fba2 2100 	umull	r2, r1, r2, r0
 8001d20:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001d24:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001d32:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001d36:	f04f 0000 	mov.w	r0, #0
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	0b50      	lsrs	r0, r2, #13
 8001d40:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d44:	1359      	asrs	r1, r3, #13
 8001d46:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001d4a:	462b      	mov	r3, r5
 8001d4c:	fb00 f203 	mul.w	r2, r0, r3
 8001d50:	4623      	mov	r3, r4
 8001d52:	fb03 f301 	mul.w	r3, r3, r1
 8001d56:	4413      	add	r3, r2
 8001d58:	4622      	mov	r2, r4
 8001d5a:	fba2 2100 	umull	r2, r1, r2, r0
 8001d5e:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001d62:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001d66:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	0e4a      	lsrs	r2, r1, #25
 8001d80:	4620      	mov	r0, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	460c      	mov	r4, r1
 8001d86:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001d8a:	164b      	asrs	r3, r1, #25
 8001d8c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001d90:	4b3c      	ldr	r3, [pc, #240]	@ (8001e84 <BME280_compensate_P_int64+0x57c>)
 8001d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	17da      	asrs	r2, r3, #31
 8001d9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d9c:	667a      	str	r2, [r7, #100]	@ 0x64
 8001d9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001da2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001da6:	462a      	mov	r2, r5
 8001da8:	fb02 f203 	mul.w	r2, r2, r3
 8001dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001db0:	4621      	mov	r1, r4
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	fba2 2101 	umull	r2, r1, r2, r1
 8001dc2:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001dc6:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001dca:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001dce:	4413      	add	r3, r2
 8001dd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001de0:	4621      	mov	r1, r4
 8001de2:	0cca      	lsrs	r2, r1, #19
 8001de4:	4620      	mov	r0, r4
 8001de6:	4629      	mov	r1, r5
 8001de8:	460c      	mov	r4, r1
 8001dea:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001dee:	14cb      	asrs	r3, r1, #19
 8001df0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001df4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001df8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001dfc:	1884      	adds	r4, r0, r2
 8001dfe:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001e00:	eb41 0303 	adc.w	r3, r1, r3
 8001e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e06:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e0a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001e0e:	4621      	mov	r1, r4
 8001e10:	1889      	adds	r1, r1, r2
 8001e12:	6539      	str	r1, [r7, #80]	@ 0x50
 8001e14:	4629      	mov	r1, r5
 8001e16:	eb43 0101 	adc.w	r1, r3, r1
 8001e1a:	6579      	str	r1, [r7, #84]	@ 0x54
 8001e1c:	f04f 0000 	mov.w	r0, #0
 8001e20:	f04f 0100 	mov.w	r1, #0
 8001e24:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001e28:	4623      	mov	r3, r4
 8001e2a:	0a18      	lsrs	r0, r3, #8
 8001e2c:	462a      	mov	r2, r5
 8001e2e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001e32:	462b      	mov	r3, r5
 8001e34:	1219      	asrs	r1, r3, #8
 8001e36:	4b14      	ldr	r3, [pc, #80]	@ (8001e88 <BME280_compensate_P_int64+0x580>)
 8001e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	17da      	asrs	r2, r3, #31
 8001e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e42:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001e50:	464c      	mov	r4, r9
 8001e52:	0123      	lsls	r3, r4, #4
 8001e54:	46c4      	mov	ip, r8
 8001e56:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001e5a:	4644      	mov	r4, r8
 8001e5c:	0122      	lsls	r2, r4, #4
 8001e5e:	1884      	adds	r4, r0, r2
 8001e60:	603c      	str	r4, [r7, #0]
 8001e62:	eb41 0303 	adc.w	r3, r1, r3
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e6c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001e70:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e80:	2000021a 	.word	0x2000021a
 8001e84:	20000218 	.word	0x20000218
 8001e88:	20000216 	.word	0x20000216

08001e8c <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001e90:	f7ff fcb2 	bl	80017f8 <BMEReadRaw>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d142      	bne.n	8001f20 <BME280_Measure+0x94>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001e9a:	4b26      	ldr	r3, [pc, #152]	@ (8001f34 <BME280_Measure+0xa8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ea2:	d104      	bne.n	8001eae <BME280_Measure+0x22>
 8001ea4:	4b24      	ldr	r3, [pc, #144]	@ (8001f38 <BME280_Measure+0xac>)
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e016      	b.n	8001edc <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001eae:	4b21      	ldr	r3, [pc, #132]	@ (8001f34 <BME280_Measure+0xa8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fce8 	bl	8001888 <BME280_compensate_T_int32>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe faa2 	bl	8000404 <__aeabi_i2d>
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <BME280_Measure+0xb0>)
 8001ec6:	f7fe fc31 	bl	800072c <__aeabi_ddiv>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fdd9 	bl	8000a88 <__aeabi_d2f>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4a17      	ldr	r2, [pc, #92]	@ (8001f38 <BME280_Measure+0xac>)
 8001eda:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001edc:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <BME280_Measure+0xb4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ee4:	d104      	bne.n	8001ef0 <BME280_Measure+0x64>
 8001ee6:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <BME280_Measure+0xb8>)
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = 0;
	}
}
 8001eee:	e01f      	b.n	8001f30 <BME280_Measure+0xa4>
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001ef0:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <BME280_Measure+0xb4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fd07 	bl	8001908 <BME280_compensate_P_int64>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fa71 	bl	80003e4 <__aeabi_ui2d>
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <BME280_Measure+0xbc>)
 8001f08:	f7fe fc10 	bl	800072c <__aeabi_ddiv>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fdb8 	bl	8000a88 <__aeabi_d2f>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <BME280_Measure+0xb8>)
 8001f1c:	6013      	str	r3, [r2, #0]
}
 8001f1e:	e007      	b.n	8001f30 <BME280_Measure+0xa4>
		Temperature = Pressure = 0;
 8001f20:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <BME280_Measure+0xb8>)
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <BME280_Measure+0xb8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a02      	ldr	r2, [pc, #8]	@ (8001f38 <BME280_Measure+0xac>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200001f8 	.word	0x200001f8
 8001f38:	200003bc 	.word	0x200003bc
 8001f3c:	40590000 	.word	0x40590000
 8001f40:	200001fc 	.word	0x200001fc
 8001f44:	200003c0 	.word	0x200003c0
 8001f48:	40700000 	.word	0x40700000

08001f4c <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh)); /* Reset structure */
 8001f54:	22b0      	movs	r2, #176	@ 0xb0
 8001f56:	2100      	movs	r1, #0
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f005 f84a 	bl	8006ff2 <memset>
    return 1;
 8001f5e:	2301      	movs	r3, #1
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f6c:	b08d      	sub	sp, #52	@ 0x34
 8001f6e:	af06      	add	r7, sp, #24
    /* MCU Configuration */
    HAL_Init();
 8001f70:	f001 f984 	bl	800327c <HAL_Init>
    SystemClock_Config();
 8001f74:	f000 fa00 	bl	8002378 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001f78:	f000 fb1c 	bl	80025b4 <MX_GPIO_Init>
    MX_I2C1_Init();
 8001f7c:	f000 fa38 	bl	80023f0 <MX_I2C1_Init>
    MX_SPI1_Init();
 8001f80:	f000 fa64 	bl	800244c <MX_SPI1_Init>
    MX_USART1_UART_Init();
 8001f84:	f000 fa98 	bl	80024b8 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 8001f88:	f000 fac0 	bl	800250c <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 8001f8c:	f000 fae8 	bl	8002560 <MX_USART3_UART_Init>

    /* Initialize sensors */
    initialize_sensors();
 8001f90:	f000 f86c 	bl	800206c <initialize_sensors>

    /* Variables for sensor data */
    sensor_data_t accel_data;
    sensor_data_t gyro_data;

    lwgps_init(&gps);
 8001f94:	482a      	ldr	r0, [pc, #168]	@ (8002040 <main+0xd8>)
 8001f96:	f7ff ffd9 	bl	8001f4c <lwgps_init>
    HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4929      	ldr	r1, [pc, #164]	@ (8002044 <main+0xdc>)
 8001f9e:	482a      	ldr	r0, [pc, #168]	@ (8002048 <main+0xe0>)
 8001fa0:	f004 f8fe 	bl	80061a0 <HAL_UART_Receive_IT>
    HAL_Delay(200);
 8001fa4:	20c8      	movs	r0, #200	@ 0xc8
 8001fa6:	f001 f9cb 	bl	8003340 <HAL_Delay>
    /* Infinite loop */
    while (1)
    {
        // Read BME280 environmental data
        read_bme280_data();
 8001faa:	f000 f871 	bl	8002090 <read_bme280_data>

        // Read IMU data
        read_accelerometer_data(&accel_data);
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f8ac 	bl	8002110 <read_accelerometer_data>
        read_gyroscope_data(&gyro_data);
 8001fb8:	f107 0308 	add.w	r3, r7, #8
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 f8d1 	bl	8002164 <read_gyroscope_data>

        transmit_sensor_packet(altitude, accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z,
 8001fc2:	4b22      	ldr	r3, [pc, #136]	@ (800204c <main+0xe4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff f882 	bl	80010d0 <__aeabi_f2iz>
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	4b20      	ldr	r3, [pc, #128]	@ (8002050 <main+0xe8>)
 8001fd0:	f8d3 8000 	ldr.w	r8, [r3]
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002054 <main+0xec>)
 8001fd6:	f8d3 9000 	ldr.w	r9, [r3]
 8001fda:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <main+0xf0>)
 8001fdc:	f8d3 a000 	ldr.w	sl, [r3]
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800205c <main+0xf4>)
 8001fe2:	681c      	ldr	r4, [r3, #0]
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8002060 <main+0xf8>)
 8001fe6:	681d      	ldr	r5, [r3, #0]
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <main+0xfc>)
 8001fea:	681e      	ldr	r6, [r3, #0]
                              gps.latitude, gps.longitude);
 8001fec:	4b14      	ldr	r3, [pc, #80]	@ (8002040 <main+0xd8>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
        transmit_sensor_packet(altitude, accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z,
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fd47 	bl	8000a88 <__aeabi_d2f>
 8001ffa:	4683      	mov	fp, r0
                              gps.latitude, gps.longitude);
 8001ffc:	4b10      	ldr	r3, [pc, #64]	@ (8002040 <main+0xd8>)
 8001ffe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        transmit_sensor_packet(altitude, accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z,
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	f7fe fd3f 	bl	8000a88 <__aeabi_d2f>
 800200a:	4603      	mov	r3, r0
 800200c:	9304      	str	r3, [sp, #16]
 800200e:	f8cd b00c 	str.w	fp, [sp, #12]
 8002012:	9602      	str	r6, [sp, #8]
 8002014:	9501      	str	r5, [sp, #4]
 8002016:	9400      	str	r4, [sp, #0]
 8002018:	4653      	mov	r3, sl
 800201a:	464a      	mov	r2, r9
 800201c:	4641      	mov	r1, r8
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f8ca 	bl	80021b8 <transmit_sensor_packet>

        // Wait before next measurement
        HAL_Delay(MEASUREMENT_DELAY);
 8002024:	20c8      	movs	r0, #200	@ 0xc8
 8002026:	f001 f98b 	bl	8003340 <HAL_Delay>

        // Add this after reading sensor data in your main loop:
        calculate_orientation(&accel_data, &gyro_data, &orientation);
 800202a:	f107 0108 	add.w	r1, r7, #8
 800202e:	f107 0310 	add.w	r3, r7, #16
 8002032:	4a0d      	ldr	r2, [pc, #52]	@ (8002068 <main+0x100>)
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fafb 	bl	8002630 <calculate_orientation>
        read_bme280_data();
 800203a:	bf00      	nop
 800203c:	e7b5      	b.n	8001faa <main+0x42>
 800203e:	bf00      	nop
 8002040:	200003e0 	.word	0x200003e0
 8002044:	20000490 	.word	0x20000490
 8002048:	2000032c 	.word	0x2000032c
 800204c:	200003c4 	.word	0x200003c4
 8002050:	200003d4 	.word	0x200003d4
 8002054:	200003d8 	.word	0x200003d8
 8002058:	200003dc 	.word	0x200003dc
 800205c:	200003c8 	.word	0x200003c8
 8002060:	200003cc 	.word	0x200003cc
 8002064:	200003d0 	.word	0x200003d0
 8002068:	20000228 	.word	0x20000228

0800206c <initialize_sensors>:
  * @brief Initialize sensors
  * @param None
  * @retval None
  */
void initialize_sensors(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af02      	add	r7, sp, #8
    // Configure BME280 sensor
    BME280_Config(OSRS_2, OSRS_2, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8002072:	2304      	movs	r3, #4
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	2300      	movs	r3, #0
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2303      	movs	r3, #3
 800207c:	2201      	movs	r2, #1
 800207e:	2102      	movs	r1, #2
 8002080:	2002      	movs	r0, #2
 8002082:	f7ff fb0f 	bl	80016a4 <BME280_Config>
}
 8002086:	bf00      	nop
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	0000      	movs	r0, r0
	...

08002090 <read_bme280_data>:
  * @brief Read BME280 environmental data
  * @param None
  * @retval None
  */
void read_bme280_data(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
    BME280_Measure();
 8002094:	f7ff fefa 	bl	8001e8c <BME280_Measure>
    altitude = 44330 * (1 - pow((Pressure/101325), (1/5.225)));
 8002098:	4b19      	ldr	r3, [pc, #100]	@ (8002100 <read_bme280_data+0x70>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4919      	ldr	r1, [pc, #100]	@ (8002104 <read_bme280_data+0x74>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe ff04 	bl	8000eac <__aeabi_fdiv>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe f9be 	bl	8000428 <__aeabi_f2d>
 80020ac:	a310      	add	r3, pc, #64	@ (adr r3, 80020f0 <read_bme280_data+0x60>)
 80020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b2:	f007 f879 	bl	80091a8 <pow>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	f04f 0000 	mov.w	r0, #0
 80020be:	4912      	ldr	r1, [pc, #72]	@ (8002108 <read_bme280_data+0x78>)
 80020c0:	f7fe f852 	bl	8000168 <__aeabi_dsub>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	a30a      	add	r3, pc, #40	@ (adr r3, 80020f8 <read_bme280_data+0x68>)
 80020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d2:	f7fe fa01 	bl	80004d8 <__aeabi_dmul>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe fcd3 	bl	8000a88 <__aeabi_d2f>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4a09      	ldr	r2, [pc, #36]	@ (800210c <read_bme280_data+0x7c>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	f3af 8000 	nop.w
 80020f0:	371e9f3c 	.word	0x371e9f3c
 80020f4:	3fc87f63 	.word	0x3fc87f63
 80020f8:	00000000 	.word	0x00000000
 80020fc:	40e5a540 	.word	0x40e5a540
 8002100:	200003c0 	.word	0x200003c0
 8002104:	47c5e680 	.word	0x47c5e680
 8002108:	3ff00000 	.word	0x3ff00000
 800210c:	200003c4 	.word	0x200003c4

08002110 <read_accelerometer_data>:
  * @brief Read accelerometer data from MPU9250
  * @param accel_data: Pointer to accelerometer data structure
  * @retval None
  */
void read_accelerometer_data(sensor_data_t *accel_data)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    uint8_t imu_data[IMU_DATA_SIZE];

    mpu9250_read_data(MPU9250_ACCEL_XOUT_H, imu_data, sizeof(imu_data));
 8002118:	f107 0308 	add.w	r3, r7, #8
 800211c:	220e      	movs	r2, #14
 800211e:	4619      	mov	r1, r3
 8002120:	203b      	movs	r0, #59	@ 0x3b
 8002122:	f000 f8fb 	bl	800231c <mpu9250_read_data>

    accel_data->x = ((int16_t)imu_data[0] << 8) + imu_data[1];
 8002126:	7a3b      	ldrb	r3, [r7, #8]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	b29b      	uxth	r3, r3
 800212c:	7a7a      	ldrb	r2, [r7, #9]
 800212e:	4413      	add	r3, r2
 8002130:	b29b      	uxth	r3, r3
 8002132:	b21a      	sxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	801a      	strh	r2, [r3, #0]
    accel_data->y = ((int16_t)imu_data[2] << 8) + imu_data[3];
 8002138:	7abb      	ldrb	r3, [r7, #10]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	b29b      	uxth	r3, r3
 800213e:	7afa      	ldrb	r2, [r7, #11]
 8002140:	4413      	add	r3, r2
 8002142:	b29b      	uxth	r3, r3
 8002144:	b21a      	sxth	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	805a      	strh	r2, [r3, #2]
    accel_data->z = ((int16_t)imu_data[4] << 8) + imu_data[5];
 800214a:	7b3b      	ldrb	r3, [r7, #12]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b29b      	uxth	r3, r3
 8002150:	7b7a      	ldrb	r2, [r7, #13]
 8002152:	4413      	add	r3, r2
 8002154:	b29b      	uxth	r3, r3
 8002156:	b21a      	sxth	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	809a      	strh	r2, [r3, #4]
}
 800215c:	bf00      	nop
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <read_gyroscope_data>:
  * @brief Read gyroscope data from MPU9250
  * @param gyro_data: Pointer to gyroscope data structure
  * @retval None
  */
void read_gyroscope_data(sensor_data_t *gyro_data)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    uint8_t imu_data[IMU_DATA_SIZE];

    mpu9250_read_data(MPU9250_GYRO_XOUT_H, imu_data, sizeof(imu_data));
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	220e      	movs	r2, #14
 8002172:	4619      	mov	r1, r3
 8002174:	2043      	movs	r0, #67	@ 0x43
 8002176:	f000 f8d1 	bl	800231c <mpu9250_read_data>

    gyro_data->x = ((int16_t)imu_data[0] << 8) + imu_data[1];
 800217a:	7a3b      	ldrb	r3, [r7, #8]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b29b      	uxth	r3, r3
 8002180:	7a7a      	ldrb	r2, [r7, #9]
 8002182:	4413      	add	r3, r2
 8002184:	b29b      	uxth	r3, r3
 8002186:	b21a      	sxth	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	801a      	strh	r2, [r3, #0]
    gyro_data->y = ((int16_t)imu_data[2] << 8) + imu_data[3];
 800218c:	7abb      	ldrb	r3, [r7, #10]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	b29b      	uxth	r3, r3
 8002192:	7afa      	ldrb	r2, [r7, #11]
 8002194:	4413      	add	r3, r2
 8002196:	b29b      	uxth	r3, r3
 8002198:	b21a      	sxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	805a      	strh	r2, [r3, #2]
    gyro_data->z = ((int16_t)imu_data[4] << 8) + imu_data[5];
 800219e:	7b3b      	ldrb	r3, [r7, #12]
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	7b7a      	ldrb	r2, [r7, #13]
 80021a6:	4413      	add	r3, r2
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	809a      	strh	r2, [r3, #4]
}
 80021b0:	bf00      	nop
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <transmit_sensor_packet>:
  * @brief Transmit sensor data packet via UART
  * @param accel_data: Pointer to accelerometer data structure
  * @retval None
  */
void transmit_sensor_packet(int altitude, float accel_x, float accel_y, float accel_z, float gyro_x, float gyro_y, float gyro_z, float latitude, float longitude)
{
 80021b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021bc:	b0bd      	sub	sp, #244	@ 0xf4
 80021be:	af10      	add	r7, sp, #64	@ 0x40
 80021c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80021c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021c4:	637a      	str	r2, [r7, #52]	@ 0x34
 80021c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80021c8:	466b      	mov	r3, sp
 80021ca:	607b      	str	r3, [r7, #4]
    char buffer[BUFFER_SIZE];
    uint16_t len;

    // Format sensor data string
    len = sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%f,%f\r\n",
 80021cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80021ce:	f7fe f92b 	bl	8000428 <__aeabi_f2d>
 80021d2:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80021d6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80021d8:	f7fe f926 	bl	8000428 <__aeabi_f2d>
 80021dc:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80021e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021e2:	f7fe f921 	bl	8000428 <__aeabi_f2d>
 80021e6:	e9c7 0106 	strd	r0, r1, [r7, #24]

        altitude,
        accel_x, accel_y, accel_z,
        orientation.roll, orientation.pitch, orientation.yaw,
 80021ea:	4b48      	ldr	r3, [pc, #288]	@ (800230c <transmit_sensor_packet+0x154>)
 80021ec:	681b      	ldr	r3, [r3, #0]
    len = sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%f,%f\r\n",
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f91a 	bl	8000428 <__aeabi_f2d>
 80021f4:	e9c7 0104 	strd	r0, r1, [r7, #16]
        orientation.roll, orientation.pitch, orientation.yaw,
 80021f8:	4b44      	ldr	r3, [pc, #272]	@ (800230c <transmit_sensor_packet+0x154>)
 80021fa:	685b      	ldr	r3, [r3, #4]
    len = sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%f,%f\r\n",
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f913 	bl	8000428 <__aeabi_f2d>
 8002202:	e9c7 0102 	strd	r0, r1, [r7, #8]
        orientation.roll, orientation.pitch, orientation.yaw,
 8002206:	4b41      	ldr	r3, [pc, #260]	@ (800230c <transmit_sensor_packet+0x154>)
 8002208:	689b      	ldr	r3, [r3, #8]
    len = sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%f,%f\r\n",
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f90c 	bl	8000428 <__aeabi_f2d>
 8002210:	4682      	mov	sl, r0
 8002212:	468b      	mov	fp, r1
 8002214:	4b3e      	ldr	r3, [pc, #248]	@ (8002310 <transmit_sensor_packet+0x158>)
 8002216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800221a:	4b3d      	ldr	r3, [pc, #244]	@ (8002310 <transmit_sensor_packet+0x158>)
 800221c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002220:	f107 0640 	add.w	r6, r7, #64	@ 0x40
 8002224:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8002228:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800222c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8002230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002234:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002238:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800223c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002244:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002248:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800224c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002250:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002254:	e9cd 2300 	strd	r2, r3, [sp]
 8002258:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800225a:	492e      	ldr	r1, [pc, #184]	@ (8002314 <transmit_sensor_packet+0x15c>)
 800225c:	4630      	mov	r0, r6
 800225e:	f004 fe63 	bl	8006f28 <siprintf>
 8002262:	4603      	mov	r3, r0
 8002264:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
       gps.latitude, gps.longitude
    );

    //orientation.roll, orientation.pitch, orientation.yaw
    // Create packet with header
    uint8_t packet[PACKET_HEADER_SIZE + len];
 8002268:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800226c:	1cd9      	adds	r1, r3, #3
 800226e:	1e4b      	subs	r3, r1, #1
 8002270:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002274:	460a      	mov	r2, r1
 8002276:	2300      	movs	r3, #0
 8002278:	4690      	mov	r8, r2
 800227a:	4699      	mov	r9, r3
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002288:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800228c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002290:	460a      	mov	r2, r1
 8002292:	2300      	movs	r3, #0
 8002294:	4614      	mov	r4, r2
 8002296:	461d      	mov	r5, r3
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	00eb      	lsls	r3, r5, #3
 80022a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022a6:	00e2      	lsls	r2, r4, #3
 80022a8:	460b      	mov	r3, r1
 80022aa:	3307      	adds	r3, #7
 80022ac:	08db      	lsrs	r3, r3, #3
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	ebad 0d03 	sub.w	sp, sp, r3
 80022b4:	ab10      	add	r3, sp, #64	@ 0x40
 80022b6:	3300      	adds	r3, #0
 80022b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    packet[0] = TARGET_ADDR_HIGH;
 80022bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
    packet[1] = TARGET_ADDR_LOW;
 80022c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022c8:	2202      	movs	r2, #2
 80022ca:	705a      	strb	r2, [r3, #1]
    packet[2] = CHANNEL;
 80022cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022d0:	2217      	movs	r2, #23
 80022d2:	709a      	strb	r2, [r3, #2]
    memcpy(&packet[PACKET_HEADER_SIZE], buffer, len);
 80022d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022d8:	3303      	adds	r3, #3
 80022da:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 80022de:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80022e2:	4618      	mov	r0, r3
 80022e4:	f004 ff13 	bl	800710e <memcpy>

    // Transmit packet
    HAL_UART_Transmit(&huart3, packet, PACKET_HEADER_SIZE + len, HAL_MAX_DELAY);
 80022e8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80022ec:	3303      	adds	r3, #3
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
 80022f4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80022f8:	4807      	ldr	r0, [pc, #28]	@ (8002318 <transmit_sensor_packet+0x160>)
 80022fa:	f003 fec6 	bl	800608a <HAL_UART_Transmit>
 80022fe:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8002302:	bf00      	nop
 8002304:	37b4      	adds	r7, #180	@ 0xb4
 8002306:	46bd      	mov	sp, r7
 8002308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800230c:	20000228 	.word	0x20000228
 8002310:	200003e0 	.word	0x200003e0
 8002314:	0800a4e8 	.word	0x0800a4e8
 8002318:	20000374 	.word	0x20000374

0800231c <mpu9250_read_data>:
  * @param data: Pointer to data buffer
  * @param data_length: Number of bytes to read
  * @retval None
  */
void mpu9250_read_data(uint8_t reg, uint8_t *data, uint8_t data_length)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
 8002328:	4613      	mov	r3, r2
 800232a:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buffer[1];
    tx_buffer[0] = 0x80 | reg;  // Read command with register address
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002332:	b2db      	uxtb	r3, r3
 8002334:	733b      	strb	r3, [r7, #12]

    // Assert CS (Chip Select)
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	2110      	movs	r1, #16
 800233a:	480d      	ldr	r0, [pc, #52]	@ (8002370 <mpu9250_read_data+0x54>)
 800233c:	f001 fb2e 	bl	800399c <HAL_GPIO_WritePin>

    // Send register address and read data
    HAL_SPI_Transmit(&hspi1, tx_buffer, 1, 100);
 8002340:	f107 010c 	add.w	r1, r7, #12
 8002344:	2364      	movs	r3, #100	@ 0x64
 8002346:	2201      	movs	r2, #1
 8002348:	480a      	ldr	r0, [pc, #40]	@ (8002374 <mpu9250_read_data+0x58>)
 800234a:	f003 f839 	bl	80053c0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, data_length, 100);
 800234e:	79bb      	ldrb	r3, [r7, #6]
 8002350:	b29a      	uxth	r2, r3
 8002352:	2364      	movs	r3, #100	@ 0x64
 8002354:	6839      	ldr	r1, [r7, #0]
 8002356:	4807      	ldr	r0, [pc, #28]	@ (8002374 <mpu9250_read_data+0x58>)
 8002358:	f003 f976 	bl	8005648 <HAL_SPI_Receive>

    // Deassert CS
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800235c:	2201      	movs	r2, #1
 800235e:	2110      	movs	r1, #16
 8002360:	4803      	ldr	r0, [pc, #12]	@ (8002370 <mpu9250_read_data+0x54>)
 8002362:	f001 fb1b 	bl	800399c <HAL_GPIO_WritePin>
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40010800 	.word	0x40010800
 8002374:	2000028c 	.word	0x2000028c

08002378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b090      	sub	sp, #64	@ 0x40
 800237c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800237e:	f107 0318 	add.w	r3, r7, #24
 8002382:	2228      	movs	r2, #40	@ 0x28
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f004 fe33 	bl	8006ff2 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
 8002398:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800239a:	2302      	movs	r3, #2
 800239c:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800239e:	2301      	movs	r3, #1
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023a2:	2310      	movs	r3, #16
 80023a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023aa:	f107 0318 	add.w	r3, r7, #24
 80023ae:	4618      	mov	r0, r3
 80023b0:	f002 fb72 	bl	8004a98 <HAL_RCC_OscConfig>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <SystemClock_Config+0x46>
    {
        Error_Handler();
 80023ba:	f000 fcb3 	bl	8002d24 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023be:	230f      	movs	r3, #15
 80023c0:	607b      	str	r3, [r7, #4]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 fde0 	bl	8004f9c <HAL_RCC_ClockConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <SystemClock_Config+0x6e>
    {
        Error_Handler();
 80023e2:	f000 fc9f 	bl	8002d24 <Error_Handler>
    }
}
 80023e6:	bf00      	nop
 80023e8:	3740      	adds	r7, #64	@ 0x40
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <MX_I2C1_Init>:
  * @param None
  * @retval None
  */

static void MX_I2C1_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80023f4:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <MX_I2C1_Init+0x50>)
 80023f6:	4a13      	ldr	r2, [pc, #76]	@ (8002444 <MX_I2C1_Init+0x54>)
 80023f8:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80023fa:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <MX_I2C1_Init+0x50>)
 80023fc:	4a12      	ldr	r2, [pc, #72]	@ (8002448 <MX_I2C1_Init+0x58>)
 80023fe:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002400:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <MX_I2C1_Init+0x50>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <MX_I2C1_Init+0x50>)
 8002408:	2200      	movs	r2, #0
 800240a:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800240c:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <MX_I2C1_Init+0x50>)
 800240e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002412:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002414:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <MX_I2C1_Init+0x50>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800241a:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <MX_I2C1_Init+0x50>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002420:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <MX_I2C1_Init+0x50>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002426:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <MX_I2C1_Init+0x50>)
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800242c:	4804      	ldr	r0, [pc, #16]	@ (8002440 <MX_I2C1_Init+0x50>)
 800242e:	f001 facd 	bl	80039cc <HAL_I2C_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8002438:	f000 fc74 	bl	8002d24 <Error_Handler>
    }
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000238 	.word	0x20000238
 8002444:	40005400 	.word	0x40005400
 8002448:	000186a0 	.word	0x000186a0

0800244c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8002450:	4b17      	ldr	r3, [pc, #92]	@ (80024b0 <MX_SPI1_Init+0x64>)
 8002452:	4a18      	ldr	r2, [pc, #96]	@ (80024b4 <MX_SPI1_Init+0x68>)
 8002454:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8002456:	4b16      	ldr	r3, [pc, #88]	@ (80024b0 <MX_SPI1_Init+0x64>)
 8002458:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800245c:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800245e:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <MX_SPI1_Init+0x64>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002464:	4b12      	ldr	r3, [pc, #72]	@ (80024b0 <MX_SPI1_Init+0x64>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800246a:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <MX_SPI1_Init+0x64>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002470:	4b0f      	ldr	r3, [pc, #60]	@ (80024b0 <MX_SPI1_Init+0x64>)
 8002472:	2200      	movs	r2, #0
 8002474:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8002476:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <MX_SPI1_Init+0x64>)
 8002478:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800247c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800247e:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <MX_SPI1_Init+0x64>)
 8002480:	2200      	movs	r2, #0
 8002482:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002484:	4b0a      	ldr	r3, [pc, #40]	@ (80024b0 <MX_SPI1_Init+0x64>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800248a:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <MX_SPI1_Init+0x64>)
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002490:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <MX_SPI1_Init+0x64>)
 8002492:	2200      	movs	r2, #0
 8002494:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8002496:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <MX_SPI1_Init+0x64>)
 8002498:	220a      	movs	r2, #10
 800249a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800249c:	4804      	ldr	r0, [pc, #16]	@ (80024b0 <MX_SPI1_Init+0x64>)
 800249e:	f002 ff0b 	bl	80052b8 <HAL_SPI_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 80024a8:	f000 fc3c 	bl	8002d24 <Error_Handler>
    }
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	2000028c 	.word	0x2000028c
 80024b4:	40013000 	.word	0x40013000

080024b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024be:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <MX_USART1_UART_Init+0x50>)
 80024c0:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80024c2:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024c8:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80024d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80024d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80024dc:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024de:	220c      	movs	r2, #12
 80024e0:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e2:	4b08      	ldr	r3, [pc, #32]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ee:	4805      	ldr	r0, [pc, #20]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024f0:	f003 fd7b 	bl	8005fea <HAL_UART_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 80024fa:	f000 fc13 	bl	8002d24 <Error_Handler>
    }
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200002e4 	.word	0x200002e4
 8002508:	40013800 	.word	0x40013800

0800250c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8002510:	4b11      	ldr	r3, [pc, #68]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002512:	4a12      	ldr	r2, [pc, #72]	@ (800255c <MX_USART2_UART_Init+0x50>)
 8002514:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 8002516:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002518:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800251c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800251e:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002526:	2200      	movs	r2, #0
 8002528:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800252a:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 800252c:	2200      	movs	r2, #0
 800252e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8002530:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002532:	220c      	movs	r2, #12
 8002534:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002536:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 800253e:	2200      	movs	r2, #0
 8002540:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8002542:	4805      	ldr	r0, [pc, #20]	@ (8002558 <MX_USART2_UART_Init+0x4c>)
 8002544:	f003 fd51 	bl	8005fea <HAL_UART_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 800254e:	f000 fbe9 	bl	8002d24 <Error_Handler>
    }
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2000032c 	.word	0x2000032c
 800255c:	40004400 	.word	0x40004400

08002560 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
    huart3.Instance = USART3;
 8002564:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 8002566:	4a12      	ldr	r2, [pc, #72]	@ (80025b0 <MX_USART3_UART_Init+0x50>)
 8002568:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 800256a:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 800256c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002570:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002572:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8002578:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 800257e:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 8002586:	220c      	movs	r2, #12
 8002588:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258a:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 8002596:	4805      	ldr	r0, [pc, #20]	@ (80025ac <MX_USART3_UART_Init+0x4c>)
 8002598:	f003 fd27 	bl	8005fea <HAL_UART_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_USART3_UART_Init+0x46>
    {
        Error_Handler();
 80025a2:	f000 fbbf 	bl	8002d24 <Error_Handler>
    }
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000374 	.word	0x20000374
 80025b0:	40004800 	.word	0x40004800

080025b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c8:	4b17      	ldr	r3, [pc, #92]	@ (8002628 <MX_GPIO_Init+0x74>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4a16      	ldr	r2, [pc, #88]	@ (8002628 <MX_GPIO_Init+0x74>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	6193      	str	r3, [r2, #24]
 80025d4:	4b14      	ldr	r3, [pc, #80]	@ (8002628 <MX_GPIO_Init+0x74>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <MX_GPIO_Init+0x74>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4a10      	ldr	r2, [pc, #64]	@ (8002628 <MX_GPIO_Init+0x74>)
 80025e6:	f043 0308 	orr.w	r3, r3, #8
 80025ea:	6193      	str	r3, [r2, #24]
 80025ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002628 <MX_GPIO_Init+0x74>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80025f8:	2200      	movs	r2, #0
 80025fa:	2110      	movs	r1, #16
 80025fc:	480b      	ldr	r0, [pc, #44]	@ (800262c <MX_GPIO_Init+0x78>)
 80025fe:	f001 f9cd 	bl	800399c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PA4 */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002602:	2310      	movs	r3, #16
 8002604:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002606:	2301      	movs	r3, #1
 8002608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2302      	movs	r3, #2
 8002610:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	4619      	mov	r1, r3
 8002618:	4804      	ldr	r0, [pc, #16]	@ (800262c <MX_GPIO_Init+0x78>)
 800261a:	f001 f83b 	bl	8003694 <HAL_GPIO_Init>
}
 800261e:	bf00      	nop
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	40010800 	.word	0x40010800

08002630 <calculate_orientation>:

//////////////////////

void calculate_orientation(sensor_data_t *accel_data, sensor_data_t *gyro_data, orientation_t *orientation)
{
 8002630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002632:	b093      	sub	sp, #76	@ 0x4c
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
    // Convert raw accelerometer data to g-force
    accel_x = (float)accel_data->x / ACCEL_SCALE_FACTOR;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fb2a 	bl	8000c9c <__aeabi_i2f>
 8002648:	4603      	mov	r3, r0
 800264a:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fc2c 	bl	8000eac <__aeabi_fdiv>
 8002654:	4603      	mov	r3, r0
 8002656:	461a      	mov	r2, r3
 8002658:	4baf      	ldr	r3, [pc, #700]	@ (8002918 <calculate_orientation+0x2e8>)
 800265a:	601a      	str	r2, [r3, #0]
    accel_y = (float)accel_data->y / ACCEL_SCALE_FACTOR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fb1a 	bl	8000c9c <__aeabi_i2f>
 8002668:	4603      	mov	r3, r0
 800266a:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fc1c 	bl	8000eac <__aeabi_fdiv>
 8002674:	4603      	mov	r3, r0
 8002676:	461a      	mov	r2, r3
 8002678:	4ba8      	ldr	r3, [pc, #672]	@ (800291c <calculate_orientation+0x2ec>)
 800267a:	601a      	str	r2, [r3, #0]
    accel_z = (float)accel_data->z / ACCEL_SCALE_FACTOR;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fb0a 	bl	8000c9c <__aeabi_i2f>
 8002688:	4603      	mov	r3, r0
 800268a:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fc0c 	bl	8000eac <__aeabi_fdiv>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	4ba1      	ldr	r3, [pc, #644]	@ (8002920 <calculate_orientation+0x2f0>)
 800269a:	601a      	str	r2, [r3, #0]

    // Convert raw gyroscope data to degrees per second
    gyro_x = (float)gyro_data->x / GYRO_SCALE_FACTOR + 1.3;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fafa 	bl	8000c9c <__aeabi_i2f>
 80026a8:	4603      	mov	r3, r0
 80026aa:	499e      	ldr	r1, [pc, #632]	@ (8002924 <calculate_orientation+0x2f4>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fbfd 	bl	8000eac <__aeabi_fdiv>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd feb7 	bl	8000428 <__aeabi_f2d>
 80026ba:	a391      	add	r3, pc, #580	@ (adr r3, 8002900 <calculate_orientation+0x2d0>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f7fd fd54 	bl	800016c <__adddf3>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	f7fe f9dc 	bl	8000a88 <__aeabi_d2f>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4a95      	ldr	r2, [pc, #596]	@ (8002928 <calculate_orientation+0x2f8>)
 80026d4:	6013      	str	r3, [r2, #0]
    gyro_y = (float)gyro_data->y / GYRO_SCALE_FACTOR + 3.3;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fadd 	bl	8000c9c <__aeabi_i2f>
 80026e2:	4603      	mov	r3, r0
 80026e4:	498f      	ldr	r1, [pc, #572]	@ (8002924 <calculate_orientation+0x2f4>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fbe0 	bl	8000eac <__aeabi_fdiv>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd fe9a 	bl	8000428 <__aeabi_f2d>
 80026f4:	a384      	add	r3, pc, #528	@ (adr r3, 8002908 <calculate_orientation+0x2d8>)
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	f7fd fd37 	bl	800016c <__adddf3>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f7fe f9bf 	bl	8000a88 <__aeabi_d2f>
 800270a:	4603      	mov	r3, r0
 800270c:	4a87      	ldr	r2, [pc, #540]	@ (800292c <calculate_orientation+0x2fc>)
 800270e:	6013      	str	r3, [r2, #0]
    gyro_z = (float)gyro_data->z / GYRO_SCALE_FACTOR - 0.3;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fac0 	bl	8000c9c <__aeabi_i2f>
 800271c:	4603      	mov	r3, r0
 800271e:	4981      	ldr	r1, [pc, #516]	@ (8002924 <calculate_orientation+0x2f4>)
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe fbc3 	bl	8000eac <__aeabi_fdiv>
 8002726:	4603      	mov	r3, r0
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd fe7d 	bl	8000428 <__aeabi_f2d>
 800272e:	a378      	add	r3, pc, #480	@ (adr r3, 8002910 <calculate_orientation+0x2e0>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fd fd18 	bl	8000168 <__aeabi_dsub>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	f7fe f9a2 	bl	8000a88 <__aeabi_d2f>
 8002744:	4603      	mov	r3, r0
 8002746:	4a7a      	ldr	r2, [pc, #488]	@ (8002930 <calculate_orientation+0x300>)
 8002748:	6013      	str	r3, [r2, #0]

    if (-0.5 <= gyro_x && gyro_x <= 0.5){
 800274a:	4b77      	ldr	r3, [pc, #476]	@ (8002928 <calculate_orientation+0x2f8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f04f 413f 	mov.w	r1, #3204448256	@ 0xbf000000
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fca8 	bl	80010a8 <__aeabi_fcmpge>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00d      	beq.n	800277a <calculate_orientation+0x14a>
 800275e:	4b72      	ldr	r3, [pc, #456]	@ (8002928 <calculate_orientation+0x2f8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fc94 	bl	8001094 <__aeabi_fcmple>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <calculate_orientation+0x14a>
    	gyro_x = 0;
 8002772:	4b6d      	ldr	r3, [pc, #436]	@ (8002928 <calculate_orientation+0x2f8>)
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
    }
    if (-0.5 <= gyro_y && gyro_y <= 0.5){
 800277a:	4b6c      	ldr	r3, [pc, #432]	@ (800292c <calculate_orientation+0x2fc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f04f 413f 	mov.w	r1, #3204448256	@ 0xbf000000
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fc90 	bl	80010a8 <__aeabi_fcmpge>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00d      	beq.n	80027aa <calculate_orientation+0x17a>
 800278e:	4b67      	ldr	r3, [pc, #412]	@ (800292c <calculate_orientation+0x2fc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fc7c 	bl	8001094 <__aeabi_fcmple>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <calculate_orientation+0x17a>
    	gyro_y = 0;
 80027a2:	4b62      	ldr	r3, [pc, #392]	@ (800292c <calculate_orientation+0x2fc>)
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
    }
    if (-0.5 <= gyro_z && gyro_z <= 0.5){
 80027aa:	4b61      	ldr	r3, [pc, #388]	@ (8002930 <calculate_orientation+0x300>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f04f 413f 	mov.w	r1, #3204448256	@ 0xbf000000
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fc78 	bl	80010a8 <__aeabi_fcmpge>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00d      	beq.n	80027da <calculate_orientation+0x1aa>
 80027be:	4b5c      	ldr	r3, [pc, #368]	@ (8002930 <calculate_orientation+0x300>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fc64 	bl	8001094 <__aeabi_fcmple>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <calculate_orientation+0x1aa>
    	gyro_z = 0;
 80027d2:	4b57      	ldr	r3, [pc, #348]	@ (8002930 <calculate_orientation+0x300>)
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
    }

    // Calculate time difference
    uint32_t current_time = HAL_GetTick();
 80027da:	f000 fda7 	bl	800332c <HAL_GetTick>
 80027de:	6438      	str	r0, [r7, #64]	@ 0x40
    float dt = (current_time - last_time) / 1000.0f; // Convert to seconds
 80027e0:	4b54      	ldr	r3, [pc, #336]	@ (8002934 <calculate_orientation+0x304>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fa53 	bl	8000c94 <__aeabi_ui2f>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4951      	ldr	r1, [pc, #324]	@ (8002938 <calculate_orientation+0x308>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fb5a 	bl	8000eac <__aeabi_fdiv>
 80027f8:	4603      	mov	r3, r0
 80027fa:	647b      	str	r3, [r7, #68]	@ 0x44
    last_time = current_time;
 80027fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002934 <calculate_orientation+0x304>)
 80027fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002800:	6013      	str	r3, [r2, #0]

    // Skip first calculation (dt would be invalid)
    if (dt > 1.0f || dt <= 0) {
 8002802:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002806:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002808:	f7fe fc58 	bl	80010bc <__aeabi_fcmpgt>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d107      	bne.n	8002822 <calculate_orientation+0x1f2>
 8002812:	f04f 0100 	mov.w	r1, #0
 8002816:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002818:	f7fe fc3c 	bl	8001094 <__aeabi_fcmple>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <calculate_orientation+0x1f6>
        dt = 0.001f; // Use small default value
 8002822:	4b46      	ldr	r3, [pc, #280]	@ (800293c <calculate_orientation+0x30c>)
 8002824:	647b      	str	r3, [r7, #68]	@ 0x44

    orientation->roll = alpha * gyro_roll + (1.0f - alpha) * accel_roll;
    orientation->pitch = alpha * gyro_pitch + (1.0f - alpha) * accel_pitch;
    orientation->yaw = gyro_yaw; // Only gyro for yaw (needs magnetometer for absolute)*/

    float accel_magnitude = sqrt(accel_x*accel_x + accel_y*accel_y + accel_z*accel_z);
 8002826:	4b3c      	ldr	r3, [pc, #240]	@ (8002918 <calculate_orientation+0x2e8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a3b      	ldr	r2, [pc, #236]	@ (8002918 <calculate_orientation+0x2e8>)
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe fa87 	bl	8000d44 <__aeabi_fmul>
 8002836:	4603      	mov	r3, r0
 8002838:	461c      	mov	r4, r3
 800283a:	4b38      	ldr	r3, [pc, #224]	@ (800291c <calculate_orientation+0x2ec>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a37      	ldr	r2, [pc, #220]	@ (800291c <calculate_orientation+0x2ec>)
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fa7d 	bl	8000d44 <__aeabi_fmul>
 800284a:	4603      	mov	r3, r0
 800284c:	4619      	mov	r1, r3
 800284e:	4620      	mov	r0, r4
 8002850:	f7fe f970 	bl	8000b34 <__addsf3>
 8002854:	4603      	mov	r3, r0
 8002856:	461c      	mov	r4, r3
 8002858:	4b31      	ldr	r3, [pc, #196]	@ (8002920 <calculate_orientation+0x2f0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a30      	ldr	r2, [pc, #192]	@ (8002920 <calculate_orientation+0x2f0>)
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fa6e 	bl	8000d44 <__aeabi_fmul>
 8002868:	4603      	mov	r3, r0
 800286a:	4619      	mov	r1, r3
 800286c:	4620      	mov	r0, r4
 800286e:	f7fe f961 	bl	8000b34 <__addsf3>
 8002872:	4603      	mov	r3, r0
 8002874:	4618      	mov	r0, r3
 8002876:	f7fd fdd7 	bl	8000428 <__aeabi_f2d>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f006 fcf9 	bl	8009278 <sqrt>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	f7fe f8fb 	bl	8000a88 <__aeabi_d2f>
 8002892:	4603      	mov	r3, r0
 8002894:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t is_stationary = (fabs(accel_magnitude - 1.0f) < 0.15f); // Within 0.15g of 1g
 8002896:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800289a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800289c:	f7fe f948 	bl	8000b30 <__aeabi_fsub>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80028a6:	2201      	movs	r2, #1
 80028a8:	4614      	mov	r4, r2
 80028aa:	4925      	ldr	r1, [pc, #148]	@ (8002940 <calculate_orientation+0x310>)
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe fbe7 	bl	8001080 <__aeabi_fcmplt>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <calculate_orientation+0x28c>
 80028b8:	2300      	movs	r3, #0
 80028ba:	461c      	mov	r4, r3
 80028bc:	b2e3      	uxtb	r3, r4
 80028be:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	// FIX 3: Only integrate gyro when there's significant movement OR use stronger accel filter when stationary
	if (is_stationary) {
 80028c2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 813a 	beq.w	8002b40 <calculate_orientation+0x510>
		// When stationary, trust accelerometer more and reduce gyro integration
		float accel_roll = atan2(accel_y, sqrt(accel_x*accel_x + accel_z*accel_z)) * RAD_TO_DEG;
 80028cc:	4b13      	ldr	r3, [pc, #76]	@ (800291c <calculate_orientation+0x2ec>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fda9 	bl	8000428 <__aeabi_f2d>
 80028d6:	4604      	mov	r4, r0
 80028d8:	460d      	mov	r5, r1
 80028da:	4b0f      	ldr	r3, [pc, #60]	@ (8002918 <calculate_orientation+0x2e8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a0e      	ldr	r2, [pc, #56]	@ (8002918 <calculate_orientation+0x2e8>)
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe fa2d 	bl	8000d44 <__aeabi_fmul>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461e      	mov	r6, r3
 80028ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <calculate_orientation+0x2f0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002920 <calculate_orientation+0x2f0>)
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	4611      	mov	r1, r2
 80028f8:	e024      	b.n	8002944 <calculate_orientation+0x314>
 80028fa:	bf00      	nop
 80028fc:	f3af 8000 	nop.w
 8002900:	cccccccd 	.word	0xcccccccd
 8002904:	3ff4cccc 	.word	0x3ff4cccc
 8002908:	66666666 	.word	0x66666666
 800290c:	400a6666 	.word	0x400a6666
 8002910:	33333333 	.word	0x33333333
 8002914:	3fd33333 	.word	0x3fd33333
 8002918:	200003d4 	.word	0x200003d4
 800291c:	200003d8 	.word	0x200003d8
 8002920:	200003dc 	.word	0x200003dc
 8002924:	43030000 	.word	0x43030000
 8002928:	200003c8 	.word	0x200003c8
 800292c:	200003cc 	.word	0x200003cc
 8002930:	200003d0 	.word	0x200003d0
 8002934:	20000234 	.word	0x20000234
 8002938:	447a0000 	.word	0x447a0000
 800293c:	3a83126f 	.word	0x3a83126f
 8002940:	3e19999a 	.word	0x3e19999a
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe f9fd 	bl	8000d44 <__aeabi_fmul>
 800294a:	4603      	mov	r3, r0
 800294c:	4619      	mov	r1, r3
 800294e:	4630      	mov	r0, r6
 8002950:	f7fe f8f0 	bl	8000b34 <__addsf3>
 8002954:	4603      	mov	r3, r0
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fd66 	bl	8000428 <__aeabi_f2d>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4610      	mov	r0, r2
 8002962:	4619      	mov	r1, r3
 8002964:	f006 fc88 	bl	8009278 <sqrt>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4620      	mov	r0, r4
 800296e:	4629      	mov	r1, r5
 8002970:	f006 fc18 	bl	80091a4 <atan2>
 8002974:	a368      	add	r3, pc, #416	@ (adr r3, 8002b18 <calculate_orientation+0x4e8>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fdad 	bl	80004d8 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f7fe f87f 	bl	8000a88 <__aeabi_d2f>
 800298a:	4603      	mov	r3, r0
 800298c:	623b      	str	r3, [r7, #32]
		float accel_pitch = atan2(-accel_x, sqrt(accel_y*accel_y + accel_z*accel_z)) * RAD_TO_DEG;
 800298e:	4b64      	ldr	r3, [pc, #400]	@ (8002b20 <calculate_orientation+0x4f0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fd46 	bl	8000428 <__aeabi_f2d>
 800299c:	4604      	mov	r4, r0
 800299e:	460d      	mov	r5, r1
 80029a0:	4b60      	ldr	r3, [pc, #384]	@ (8002b24 <calculate_orientation+0x4f4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002b24 <calculate_orientation+0x4f4>)
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe f9ca 	bl	8000d44 <__aeabi_fmul>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461e      	mov	r6, r3
 80029b4:	4b5c      	ldr	r3, [pc, #368]	@ (8002b28 <calculate_orientation+0x4f8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a5b      	ldr	r2, [pc, #364]	@ (8002b28 <calculate_orientation+0x4f8>)
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe f9c0 	bl	8000d44 <__aeabi_fmul>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4619      	mov	r1, r3
 80029c8:	4630      	mov	r0, r6
 80029ca:	f7fe f8b3 	bl	8000b34 <__addsf3>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fd29 	bl	8000428 <__aeabi_f2d>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	f006 fc4b 	bl	8009278 <sqrt>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4620      	mov	r0, r4
 80029e8:	4629      	mov	r1, r5
 80029ea:	f006 fbdb 	bl	80091a4 <atan2>
 80029ee:	a34a      	add	r3, pc, #296	@ (adr r3, 8002b18 <calculate_orientation+0x4e8>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f7fd fd70 	bl	80004d8 <__aeabi_dmul>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f7fe f842 	bl	8000a88 <__aeabi_d2f>
 8002a04:	4603      	mov	r3, r0
 8002a06:	61fb      	str	r3, [r7, #28]

		// Use strong accelerometer bias when stationary
		float alpha = 0.90f; // 90% gyro, 10% accel (less gyro influence)
 8002a08:	4b48      	ldr	r3, [pc, #288]	@ (8002b2c <calculate_orientation+0x4fc>)
 8002a0a:	61bb      	str	r3, [r7, #24]

		float gyro_roll = orientation->roll + gyro_x * dt;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681c      	ldr	r4, [r3, #0]
 8002a10:	4b47      	ldr	r3, [pc, #284]	@ (8002b30 <calculate_orientation+0x500>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f994 	bl	8000d44 <__aeabi_fmul>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7fe f887 	bl	8000b34 <__addsf3>
 8002a26:	4603      	mov	r3, r0
 8002a28:	617b      	str	r3, [r7, #20]
		float gyro_pitch = orientation->pitch + gyro_y * dt;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685c      	ldr	r4, [r3, #4]
 8002a2e:	4b41      	ldr	r3, [pc, #260]	@ (8002b34 <calculate_orientation+0x504>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe f985 	bl	8000d44 <__aeabi_fmul>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7fe f878 	bl	8000b34 <__addsf3>
 8002a44:	4603      	mov	r3, r0
 8002a46:	613b      	str	r3, [r7, #16]

		orientation->roll = alpha * gyro_roll + (1.0f - alpha) * accel_roll;
 8002a48:	6979      	ldr	r1, [r7, #20]
 8002a4a:	69b8      	ldr	r0, [r7, #24]
 8002a4c:	f7fe f97a 	bl	8000d44 <__aeabi_fmul>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461c      	mov	r4, r3
 8002a54:	69b9      	ldr	r1, [r7, #24]
 8002a56:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002a5a:	f7fe f869 	bl	8000b30 <__aeabi_fsub>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6a39      	ldr	r1, [r7, #32]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe f96e 	bl	8000d44 <__aeabi_fmul>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f7fe f861 	bl	8000b34 <__addsf3>
 8002a72:	4603      	mov	r3, r0
 8002a74:	461a      	mov	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	601a      	str	r2, [r3, #0]
		orientation->pitch = alpha * gyro_pitch + (1.0f - alpha) * accel_pitch;
 8002a7a:	6939      	ldr	r1, [r7, #16]
 8002a7c:	69b8      	ldr	r0, [r7, #24]
 8002a7e:	f7fe f961 	bl	8000d44 <__aeabi_fmul>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461c      	mov	r4, r3
 8002a86:	69b9      	ldr	r1, [r7, #24]
 8002a88:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002a8c:	f7fe f850 	bl	8000b30 <__aeabi_fsub>
 8002a90:	4603      	mov	r3, r0
 8002a92:	69f9      	ldr	r1, [r7, #28]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe f955 	bl	8000d44 <__aeabi_fmul>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7fe f848 	bl	8000b34 <__addsf3>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	605a      	str	r2, [r3, #4]

		// FIX 4: Reduce yaw drift when stationary
		if (fabs(gyro_z) < 0.3f) {
 8002aac:	4b22      	ldr	r3, [pc, #136]	@ (8002b38 <calculate_orientation+0x508>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ab4:	4921      	ldr	r1, [pc, #132]	@ (8002b3c <calculate_orientation+0x50c>)
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fae2 	bl	8001080 <__aeabi_fcmplt>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d017      	beq.n	8002af2 <calculate_orientation+0x4c2>
			orientation->yaw += gyro_z * dt * 0.5f; // Reduce yaw integration when barely moving
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689c      	ldr	r4, [r3, #8]
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b38 <calculate_orientation+0x508>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe f939 	bl	8000d44 <__aeabi_fmul>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe f933 	bl	8000d44 <__aeabi_fmul>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7fe f826 	bl	8000b34 <__addsf3>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461a      	mov	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	609a      	str	r2, [r3, #8]
		orientation->roll = alpha * gyro_roll + (1.0f - alpha) * accel_roll;
		orientation->pitch = alpha * gyro_pitch + (1.0f - alpha) * accel_pitch;
		orientation->yaw += gyro_z * dt;
	}

}
 8002af0:	e101      	b.n	8002cf6 <calculate_orientation+0x6c6>
			orientation->yaw += gyro_z * dt;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689c      	ldr	r4, [r3, #8]
 8002af6:	4b10      	ldr	r3, [pc, #64]	@ (8002b38 <calculate_orientation+0x508>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe f921 	bl	8000d44 <__aeabi_fmul>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4619      	mov	r1, r3
 8002b06:	4620      	mov	r0, r4
 8002b08:	f7fe f814 	bl	8000b34 <__addsf3>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	609a      	str	r2, [r3, #8]
}
 8002b14:	e0ef      	b.n	8002cf6 <calculate_orientation+0x6c6>
 8002b16:	bf00      	nop
 8002b18:	c0000000 	.word	0xc0000000
 8002b1c:	404ca5dc 	.word	0x404ca5dc
 8002b20:	200003d4 	.word	0x200003d4
 8002b24:	200003d8 	.word	0x200003d8
 8002b28:	200003dc 	.word	0x200003dc
 8002b2c:	3f666666 	.word	0x3f666666
 8002b30:	200003c8 	.word	0x200003c8
 8002b34:	200003cc 	.word	0x200003cc
 8002b38:	200003d0 	.word	0x200003d0
 8002b3c:	3e99999a 	.word	0x3e99999a
		float accel_roll = atan2(accel_y, sqrt(accel_x*accel_x + accel_z*accel_z)) * RAD_TO_DEG;
 8002b40:	4b71      	ldr	r3, [pc, #452]	@ (8002d08 <calculate_orientation+0x6d8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fc6f 	bl	8000428 <__aeabi_f2d>
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	460d      	mov	r5, r1
 8002b4e:	4b6f      	ldr	r3, [pc, #444]	@ (8002d0c <calculate_orientation+0x6dc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a6e      	ldr	r2, [pc, #440]	@ (8002d0c <calculate_orientation+0x6dc>)
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe f8f3 	bl	8000d44 <__aeabi_fmul>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	461e      	mov	r6, r3
 8002b62:	4b6b      	ldr	r3, [pc, #428]	@ (8002d10 <calculate_orientation+0x6e0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a6a      	ldr	r2, [pc, #424]	@ (8002d10 <calculate_orientation+0x6e0>)
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe f8e9 	bl	8000d44 <__aeabi_fmul>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4619      	mov	r1, r3
 8002b76:	4630      	mov	r0, r6
 8002b78:	f7fd ffdc 	bl	8000b34 <__addsf3>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fc52 	bl	8000428 <__aeabi_f2d>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f006 fb74 	bl	8009278 <sqrt>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4620      	mov	r0, r4
 8002b96:	4629      	mov	r1, r5
 8002b98:	f006 fb04 	bl	80091a4 <atan2>
 8002b9c:	a358      	add	r3, pc, #352	@ (adr r3, 8002d00 <calculate_orientation+0x6d0>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f7fd fc99 	bl	80004d8 <__aeabi_dmul>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f7fd ff6b 	bl	8000a88 <__aeabi_d2f>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	637b      	str	r3, [r7, #52]	@ 0x34
		float accel_pitch = atan2(-accel_x, sqrt(accel_y*accel_y + accel_z*accel_z)) * RAD_TO_DEG;
 8002bb6:	4b55      	ldr	r3, [pc, #340]	@ (8002d0c <calculate_orientation+0x6dc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fc32 	bl	8000428 <__aeabi_f2d>
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	460d      	mov	r5, r1
 8002bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8002d08 <calculate_orientation+0x6d8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a4e      	ldr	r2, [pc, #312]	@ (8002d08 <calculate_orientation+0x6d8>)
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe f8b6 	bl	8000d44 <__aeabi_fmul>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461e      	mov	r6, r3
 8002bdc:	4b4c      	ldr	r3, [pc, #304]	@ (8002d10 <calculate_orientation+0x6e0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a4b      	ldr	r2, [pc, #300]	@ (8002d10 <calculate_orientation+0x6e0>)
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe f8ac 	bl	8000d44 <__aeabi_fmul>
 8002bec:	4603      	mov	r3, r0
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4630      	mov	r0, r6
 8002bf2:	f7fd ff9f 	bl	8000b34 <__addsf3>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fc15 	bl	8000428 <__aeabi_f2d>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4610      	mov	r0, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	f006 fb37 	bl	8009278 <sqrt>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4620      	mov	r0, r4
 8002c10:	4629      	mov	r1, r5
 8002c12:	f006 fac7 	bl	80091a4 <atan2>
 8002c16:	a33a      	add	r3, pc, #232	@ (adr r3, 8002d00 <calculate_orientation+0x6d0>)
 8002c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1c:	f7fd fc5c 	bl	80004d8 <__aeabi_dmul>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7fd ff2e 	bl	8000a88 <__aeabi_d2f>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	633b      	str	r3, [r7, #48]	@ 0x30
		float alpha = 0.98f; // 98% gyro, 2% accel
 8002c30:	4b38      	ldr	r3, [pc, #224]	@ (8002d14 <calculate_orientation+0x6e4>)
 8002c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
		float gyro_roll = orientation->roll + gyro_x * dt;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681c      	ldr	r4, [r3, #0]
 8002c38:	4b37      	ldr	r3, [pc, #220]	@ (8002d18 <calculate_orientation+0x6e8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe f880 	bl	8000d44 <__aeabi_fmul>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4619      	mov	r1, r3
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7fd ff73 	bl	8000b34 <__addsf3>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	62bb      	str	r3, [r7, #40]	@ 0x28
		float gyro_pitch = orientation->pitch + gyro_y * dt;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685c      	ldr	r4, [r3, #4]
 8002c56:	4b31      	ldr	r3, [pc, #196]	@ (8002d1c <calculate_orientation+0x6ec>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe f871 	bl	8000d44 <__aeabi_fmul>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4619      	mov	r1, r3
 8002c66:	4620      	mov	r0, r4
 8002c68:	f7fd ff64 	bl	8000b34 <__addsf3>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
		orientation->roll = alpha * gyro_roll + (1.0f - alpha) * accel_roll;
 8002c70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c74:	f7fe f866 	bl	8000d44 <__aeabi_fmul>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461c      	mov	r4, r3
 8002c7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c7e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002c82:	f7fd ff55 	bl	8000b30 <__aeabi_fsub>
 8002c86:	4603      	mov	r3, r0
 8002c88:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe f85a 	bl	8000d44 <__aeabi_fmul>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4619      	mov	r1, r3
 8002c94:	4620      	mov	r0, r4
 8002c96:	f7fd ff4d 	bl	8000b34 <__addsf3>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	601a      	str	r2, [r3, #0]
		orientation->pitch = alpha * gyro_pitch + (1.0f - alpha) * accel_pitch;
 8002ca2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ca4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ca6:	f7fe f84d 	bl	8000d44 <__aeabi_fmul>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461c      	mov	r4, r3
 8002cae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cb0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002cb4:	f7fd ff3c 	bl	8000b30 <__aeabi_fsub>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe f841 	bl	8000d44 <__aeabi_fmul>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f7fd ff34 	bl	8000b34 <__addsf3>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	605a      	str	r2, [r3, #4]
		orientation->yaw += gyro_z * dt;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689c      	ldr	r4, [r3, #8]
 8002cd8:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <calculate_orientation+0x6f0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe f830 	bl	8000d44 <__aeabi_fmul>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f7fd ff23 	bl	8000b34 <__addsf3>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
}
 8002cf6:	bf00      	nop
 8002cf8:	374c      	adds	r7, #76	@ 0x4c
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	c0000000 	.word	0xc0000000
 8002d04:	404ca5dc 	.word	0x404ca5dc
 8002d08:	200003d8 	.word	0x200003d8
 8002d0c:	200003d4 	.word	0x200003d4
 8002d10:	200003dc 	.word	0x200003dc
 8002d14:	3f7ae148 	.word	0x3f7ae148
 8002d18:	200003c8 	.word	0x200003c8
 8002d1c:	200003cc 	.word	0x200003cc
 8002d20:	200003d0 	.word	0x200003d0

08002d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d28:	b672      	cpsid	i
}
 8002d2a:	bf00      	nop
    __disable_irq();
    while (1)
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <Error_Handler+0x8>

08002d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <HAL_MspInit+0x5c>)
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	4a14      	ldr	r2, [pc, #80]	@ (8002d8c <HAL_MspInit+0x5c>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6193      	str	r3, [r2, #24]
 8002d42:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <HAL_MspInit+0x5c>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d8c <HAL_MspInit+0x5c>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4a0e      	ldr	r2, [pc, #56]	@ (8002d8c <HAL_MspInit+0x5c>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	61d3      	str	r3, [r2, #28]
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d8c <HAL_MspInit+0x5c>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002d66:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <HAL_MspInit+0x60>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <HAL_MspInit+0x60>)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40010000 	.word	0x40010000

08002d94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 0310 	add.w	r3, r7, #16
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a15      	ldr	r2, [pc, #84]	@ (8002e04 <HAL_I2C_MspInit+0x70>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d123      	bne.n	8002dfc <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db4:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <HAL_I2C_MspInit+0x74>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	4a13      	ldr	r2, [pc, #76]	@ (8002e08 <HAL_I2C_MspInit+0x74>)
 8002dba:	f043 0308 	orr.w	r3, r3, #8
 8002dbe:	6193      	str	r3, [r2, #24]
 8002dc0:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <HAL_I2C_MspInit+0x74>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dcc:	23c0      	movs	r3, #192	@ 0xc0
 8002dce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd0:	2312      	movs	r3, #18
 8002dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd8:	f107 0310 	add.w	r3, r7, #16
 8002ddc:	4619      	mov	r1, r3
 8002dde:	480b      	ldr	r0, [pc, #44]	@ (8002e0c <HAL_I2C_MspInit+0x78>)
 8002de0:	f000 fc58 	bl	8003694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002de4:	4b08      	ldr	r3, [pc, #32]	@ (8002e08 <HAL_I2C_MspInit+0x74>)
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	4a07      	ldr	r2, [pc, #28]	@ (8002e08 <HAL_I2C_MspInit+0x74>)
 8002dea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002dee:	61d3      	str	r3, [r2, #28]
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <HAL_I2C_MspInit+0x74>)
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002dfc:	bf00      	nop
 8002dfe:	3720      	adds	r7, #32
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40005400 	.word	0x40005400
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40010c00 	.word	0x40010c00

08002e10 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 0310 	add.w	r3, r7, #16
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea8 <HAL_SPI_MspInit+0x98>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d137      	bne.n	8002ea0 <HAL_SPI_MspInit+0x90>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e30:	4b1e      	ldr	r3, [pc, #120]	@ (8002eac <HAL_SPI_MspInit+0x9c>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	4a1d      	ldr	r2, [pc, #116]	@ (8002eac <HAL_SPI_MspInit+0x9c>)
 8002e36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e3a:	6193      	str	r3, [r2, #24]
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <HAL_SPI_MspInit+0x9c>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e48:	4b18      	ldr	r3, [pc, #96]	@ (8002eac <HAL_SPI_MspInit+0x9c>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	4a17      	ldr	r2, [pc, #92]	@ (8002eac <HAL_SPI_MspInit+0x9c>)
 8002e4e:	f043 0304 	orr.w	r3, r3, #4
 8002e52:	6193      	str	r3, [r2, #24]
 8002e54:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <HAL_SPI_MspInit+0x9c>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002e60:	23a0      	movs	r3, #160	@ 0xa0
 8002e62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6c:	f107 0310 	add.w	r3, r7, #16
 8002e70:	4619      	mov	r1, r3
 8002e72:	480f      	ldr	r0, [pc, #60]	@ (8002eb0 <HAL_SPI_MspInit+0xa0>)
 8002e74:	f000 fc0e 	bl	8003694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e78:	2340      	movs	r3, #64	@ 0x40
 8002e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e84:	f107 0310 	add.w	r3, r7, #16
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4809      	ldr	r0, [pc, #36]	@ (8002eb0 <HAL_SPI_MspInit+0xa0>)
 8002e8c:	f000 fc02 	bl	8003694 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002e90:	2200      	movs	r2, #0
 8002e92:	2100      	movs	r1, #0
 8002e94:	2023      	movs	r0, #35	@ 0x23
 8002e96:	f000 fb4e 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002e9a:	2023      	movs	r0, #35	@ 0x23
 8002e9c:	f000 fb67 	bl	800356e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002ea0:	bf00      	nop
 8002ea2:	3720      	adds	r7, #32
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40013000 	.word	0x40013000
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40010800 	.word	0x40010800

08002eb4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08c      	sub	sp, #48	@ 0x30
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 0320 	add.w	r3, r7, #32
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a53      	ldr	r2, [pc, #332]	@ (800301c <HAL_UART_MspInit+0x168>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d132      	bne.n	8002f3a <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ed4:	4b52      	ldr	r3, [pc, #328]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	4a51      	ldr	r2, [pc, #324]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002eda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ede:	6193      	str	r3, [r2, #24]
 8002ee0:	4b4f      	ldr	r3, [pc, #316]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eec:	4b4c      	ldr	r3, [pc, #304]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	6193      	str	r3, [r2, #24]
 8002ef8:	4b49      	ldr	r3, [pc, #292]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f12:	f107 0320 	add.w	r3, r7, #32
 8002f16:	4619      	mov	r1, r3
 8002f18:	4842      	ldr	r0, [pc, #264]	@ (8003024 <HAL_UART_MspInit+0x170>)
 8002f1a:	f000 fbbb 	bl	8003694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f24:	2300      	movs	r3, #0
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2c:	f107 0320 	add.w	r3, r7, #32
 8002f30:	4619      	mov	r1, r3
 8002f32:	483c      	ldr	r0, [pc, #240]	@ (8003024 <HAL_UART_MspInit+0x170>)
 8002f34:	f000 fbae 	bl	8003694 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f38:	e06c      	b.n	8003014 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a3a      	ldr	r2, [pc, #232]	@ (8003028 <HAL_UART_MspInit+0x174>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d130      	bne.n	8002fa6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f44:	4b36      	ldr	r3, [pc, #216]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4a35      	ldr	r2, [pc, #212]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f4e:	61d3      	str	r3, [r2, #28]
 8002f50:	4b33      	ldr	r3, [pc, #204]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5c:	4b30      	ldr	r3, [pc, #192]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	4a2f      	ldr	r2, [pc, #188]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	6193      	str	r3, [r2, #24]
 8002f68:	4b2d      	ldr	r3, [pc, #180]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f74:	2304      	movs	r3, #4
 8002f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f80:	f107 0320 	add.w	r3, r7, #32
 8002f84:	4619      	mov	r1, r3
 8002f86:	4827      	ldr	r0, [pc, #156]	@ (8003024 <HAL_UART_MspInit+0x170>)
 8002f88:	f000 fb84 	bl	8003694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f98:	f107 0320 	add.w	r3, r7, #32
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4821      	ldr	r0, [pc, #132]	@ (8003024 <HAL_UART_MspInit+0x170>)
 8002fa0:	f000 fb78 	bl	8003694 <HAL_GPIO_Init>
}
 8002fa4:	e036      	b.n	8003014 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a20      	ldr	r2, [pc, #128]	@ (800302c <HAL_UART_MspInit+0x178>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d131      	bne.n	8003014 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002fb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fba:	61d3      	str	r3, [r2, #28]
 8002fbc:	4b18      	ldr	r3, [pc, #96]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc8:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	4a14      	ldr	r2, [pc, #80]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002fce:	f043 0308 	orr.w	r3, r3, #8
 8002fd2:	6193      	str	r3, [r2, #24]
 8002fd4:	4b12      	ldr	r3, [pc, #72]	@ (8003020 <HAL_UART_MspInit+0x16c>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fea:	2303      	movs	r3, #3
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fee:	f107 0320 	add.w	r3, r7, #32
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	480e      	ldr	r0, [pc, #56]	@ (8003030 <HAL_UART_MspInit+0x17c>)
 8002ff6:	f000 fb4d 	bl	8003694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ffa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003000:	2300      	movs	r3, #0
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003008:	f107 0320 	add.w	r3, r7, #32
 800300c:	4619      	mov	r1, r3
 800300e:	4808      	ldr	r0, [pc, #32]	@ (8003030 <HAL_UART_MspInit+0x17c>)
 8003010:	f000 fb40 	bl	8003694 <HAL_GPIO_Init>
}
 8003014:	bf00      	nop
 8003016:	3730      	adds	r7, #48	@ 0x30
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40013800 	.word	0x40013800
 8003020:	40021000 	.word	0x40021000
 8003024:	40010800 	.word	0x40010800
 8003028:	40004400 	.word	0x40004400
 800302c:	40004800 	.word	0x40004800
 8003030:	40010c00 	.word	0x40010c00

08003034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <NMI_Handler+0x4>

0800303c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003040:	bf00      	nop
 8003042:	e7fd      	b.n	8003040 <HardFault_Handler+0x4>

08003044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <MemManage_Handler+0x4>

0800304c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003050:	bf00      	nop
 8003052:	e7fd      	b.n	8003050 <BusFault_Handler+0x4>

08003054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <UsageFault_Handler+0x4>

0800305c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003084:	f000 f940 	bl	8003308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003090:	4802      	ldr	r0, [pc, #8]	@ (800309c <SPI1_IRQHandler+0x10>)
 8003092:	f002 fd9b 	bl	8005bcc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	2000028c 	.word	0x2000028c

080030a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return 1;
 80030a4:	2301      	movs	r3, #1
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <_kill>:

int _kill(int pid, int sig)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030b8:	f003 ffee 	bl	8007098 <__errno>
 80030bc:	4603      	mov	r3, r0
 80030be:	2216      	movs	r2, #22
 80030c0:	601a      	str	r2, [r3, #0]
  return -1;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <_exit>:

void _exit (int status)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030d6:	f04f 31ff 	mov.w	r1, #4294967295
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff ffe7 	bl	80030ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <_exit+0x12>

080030e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e00a      	b.n	800310c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030f6:	f3af 8000 	nop.w
 80030fa:	4601      	mov	r1, r0
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	60ba      	str	r2, [r7, #8]
 8003102:	b2ca      	uxtb	r2, r1
 8003104:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3301      	adds	r3, #1
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	dbf0      	blt.n	80030f6 <_read+0x12>
  }

  return len;
 8003114:	687b      	ldr	r3, [r7, #4]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	e009      	b.n	8003144 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	60ba      	str	r2, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3301      	adds	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	dbf1      	blt.n	8003130 <_write+0x12>
  }
  return len;
 800314c:	687b      	ldr	r3, [r7, #4]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <_close>:

int _close(int file)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800317c:	605a      	str	r2, [r3, #4]
  return 0;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <_isatty>:

int _isatty(int file)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003192:	2301      	movs	r3, #1
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
	...

080031b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031c0:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <_sbrk+0x5c>)
 80031c2:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <_sbrk+0x60>)
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031cc:	4b13      	ldr	r3, [pc, #76]	@ (800321c <_sbrk+0x64>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <_sbrk+0x64>)
 80031d6:	4a12      	ldr	r2, [pc, #72]	@ (8003220 <_sbrk+0x68>)
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d207      	bcs.n	80031f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031e8:	f003 ff56 	bl	8007098 <__errno>
 80031ec:	4603      	mov	r3, r0
 80031ee:	220c      	movs	r2, #12
 80031f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	e009      	b.n	800320c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f8:	4b08      	ldr	r3, [pc, #32]	@ (800321c <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031fe:	4b07      	ldr	r3, [pc, #28]	@ (800321c <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	4a05      	ldr	r2, [pc, #20]	@ (800321c <_sbrk+0x64>)
 8003208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20005000 	.word	0x20005000
 8003218:	00000400 	.word	0x00000400
 800321c:	20000494 	.word	0x20000494
 8003220:	200005e8 	.word	0x200005e8

08003224 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003228:	bf00      	nop
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003230:	f7ff fff8 	bl	8003224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003234:	480b      	ldr	r0, [pc, #44]	@ (8003264 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003236:	490c      	ldr	r1, [pc, #48]	@ (8003268 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003238:	4a0c      	ldr	r2, [pc, #48]	@ (800326c <LoopFillZerobss+0x16>)
  movs r3, #0
 800323a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800323c:	e002      	b.n	8003244 <LoopCopyDataInit>

0800323e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800323e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003242:	3304      	adds	r3, #4

08003244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003248:	d3f9      	bcc.n	800323e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800324a:	4a09      	ldr	r2, [pc, #36]	@ (8003270 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800324c:	4c09      	ldr	r4, [pc, #36]	@ (8003274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800324e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003250:	e001      	b.n	8003256 <LoopFillZerobss>

08003252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003254:	3204      	adds	r2, #4

08003256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003258:	d3fb      	bcc.n	8003252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800325a:	f003 ff23 	bl	80070a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800325e:	f7fe fe83 	bl	8001f68 <main>
  bx lr
 8003262:	4770      	bx	lr
  ldr r0, =_sdata
 8003264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003268:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800326c:	0800a978 	.word	0x0800a978
  ldr r2, =_sbss
 8003270:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003274:	200005e8 	.word	0x200005e8

08003278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003278:	e7fe      	b.n	8003278 <ADC1_2_IRQHandler>
	...

0800327c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003280:	4b08      	ldr	r3, [pc, #32]	@ (80032a4 <HAL_Init+0x28>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a07      	ldr	r2, [pc, #28]	@ (80032a4 <HAL_Init+0x28>)
 8003286:	f043 0310 	orr.w	r3, r3, #16
 800328a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800328c:	2003      	movs	r0, #3
 800328e:	f000 f947 	bl	8003520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003292:	200f      	movs	r0, #15
 8003294:	f000 f808 	bl	80032a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003298:	f7ff fd4a 	bl	8002d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40022000 	.word	0x40022000

080032a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032b0:	4b12      	ldr	r3, [pc, #72]	@ (80032fc <HAL_InitTick+0x54>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b12      	ldr	r3, [pc, #72]	@ (8003300 <HAL_InitTick+0x58>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	4619      	mov	r1, r3
 80032ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032be:	fbb3 f3f1 	udiv	r3, r3, r1
 80032c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f95f 	bl	800358a <HAL_SYSTICK_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00e      	b.n	80032f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b0f      	cmp	r3, #15
 80032da:	d80a      	bhi.n	80032f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032dc:	2200      	movs	r2, #0
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	f000 f927 	bl	8003536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032e8:	4a06      	ldr	r2, [pc, #24]	@ (8003304 <HAL_InitTick+0x5c>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e000      	b.n	80032f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000008 	.word	0x20000008
 8003304:	20000004 	.word	0x20000004

08003308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800330c:	4b05      	ldr	r3, [pc, #20]	@ (8003324 <HAL_IncTick+0x1c>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_IncTick+0x20>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4413      	add	r3, r2
 8003318:	4a03      	ldr	r2, [pc, #12]	@ (8003328 <HAL_IncTick+0x20>)
 800331a:	6013      	str	r3, [r2, #0]
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	20000008 	.word	0x20000008
 8003328:	20000498 	.word	0x20000498

0800332c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return uwTick;
 8003330:	4b02      	ldr	r3, [pc, #8]	@ (800333c <HAL_GetTick+0x10>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	20000498 	.word	0x20000498

08003340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003348:	f7ff fff0 	bl	800332c <HAL_GetTick>
 800334c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d005      	beq.n	8003366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800335a:	4b0a      	ldr	r3, [pc, #40]	@ (8003384 <HAL_Delay+0x44>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003366:	bf00      	nop
 8003368:	f7ff ffe0 	bl	800332c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	429a      	cmp	r2, r3
 8003376:	d8f7      	bhi.n	8003368 <HAL_Delay+0x28>
  {
  }
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000008 	.word	0x20000008

08003388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <__NVIC_SetPriorityGrouping+0x44>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033a4:	4013      	ands	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ba:	4a04      	ldr	r2, [pc, #16]	@ (80033cc <__NVIC_SetPriorityGrouping+0x44>)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	60d3      	str	r3, [r2, #12]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d4:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <__NVIC_GetPriorityGrouping+0x18>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	f003 0307 	and.w	r3, r3, #7
}
 80033de:	4618      	mov	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	db0b      	blt.n	8003416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	4906      	ldr	r1, [pc, #24]	@ (8003420 <__NVIC_EnableIRQ+0x34>)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2001      	movs	r0, #1
 800340e:	fa00 f202 	lsl.w	r2, r0, r2
 8003412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	e000e100 	.word	0xe000e100

08003424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	db0a      	blt.n	800344e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	490c      	ldr	r1, [pc, #48]	@ (8003470 <__NVIC_SetPriority+0x4c>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	440b      	add	r3, r1
 8003448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800344c:	e00a      	b.n	8003464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4908      	ldr	r1, [pc, #32]	@ (8003474 <__NVIC_SetPriority+0x50>)
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3b04      	subs	r3, #4
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	440b      	add	r3, r1
 8003462:	761a      	strb	r2, [r3, #24]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	e000e100 	.word	0xe000e100
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	@ 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f1c3 0307 	rsb	r3, r3, #7
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf28      	it	cs
 8003496:	2304      	movcs	r3, #4
 8003498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3304      	adds	r3, #4
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d902      	bls.n	80034a8 <NVIC_EncodePriority+0x30>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3b03      	subs	r3, #3
 80034a6:	e000      	b.n	80034aa <NVIC_EncodePriority+0x32>
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	401a      	ands	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43d9      	mvns	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	4313      	orrs	r3, r2
         );
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	@ 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034ec:	d301      	bcc.n	80034f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00f      	b.n	8003512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f2:	4a0a      	ldr	r2, [pc, #40]	@ (800351c <SysTick_Config+0x40>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fa:	210f      	movs	r1, #15
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f7ff ff90 	bl	8003424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003504:	4b05      	ldr	r3, [pc, #20]	@ (800351c <SysTick_Config+0x40>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350a:	4b04      	ldr	r3, [pc, #16]	@ (800351c <SysTick_Config+0x40>)
 800350c:	2207      	movs	r2, #7
 800350e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	e000e010 	.word	0xe000e010

08003520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ff2d 	bl	8003388 <__NVIC_SetPriorityGrouping>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003548:	f7ff ff42 	bl	80033d0 <__NVIC_GetPriorityGrouping>
 800354c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	6978      	ldr	r0, [r7, #20]
 8003554:	f7ff ff90 	bl	8003478 <NVIC_EncodePriority>
 8003558:	4602      	mov	r2, r0
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff5f 	bl	8003424 <__NVIC_SetPriority>
}
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff35 	bl	80033ec <__NVIC_EnableIRQ>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ffa2 	bl	80034dc <SysTick_Config>
 8003598:	4603      	mov	r3, r0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d005      	beq.n	80035c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2204      	movs	r2, #4
 80035c0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
 80035c6:	e051      	b.n	800366c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 020e 	bic.w	r2, r2, #14
 80035d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a22      	ldr	r2, [pc, #136]	@ (8003678 <HAL_DMA_Abort_IT+0xd4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d029      	beq.n	8003646 <HAL_DMA_Abort_IT+0xa2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a21      	ldr	r2, [pc, #132]	@ (800367c <HAL_DMA_Abort_IT+0xd8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d022      	beq.n	8003642 <HAL_DMA_Abort_IT+0x9e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1f      	ldr	r2, [pc, #124]	@ (8003680 <HAL_DMA_Abort_IT+0xdc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d01a      	beq.n	800363c <HAL_DMA_Abort_IT+0x98>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1e      	ldr	r2, [pc, #120]	@ (8003684 <HAL_DMA_Abort_IT+0xe0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d012      	beq.n	8003636 <HAL_DMA_Abort_IT+0x92>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1c      	ldr	r2, [pc, #112]	@ (8003688 <HAL_DMA_Abort_IT+0xe4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00a      	beq.n	8003630 <HAL_DMA_Abort_IT+0x8c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1b      	ldr	r2, [pc, #108]	@ (800368c <HAL_DMA_Abort_IT+0xe8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d102      	bne.n	800362a <HAL_DMA_Abort_IT+0x86>
 8003624:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003628:	e00e      	b.n	8003648 <HAL_DMA_Abort_IT+0xa4>
 800362a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800362e:	e00b      	b.n	8003648 <HAL_DMA_Abort_IT+0xa4>
 8003630:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003634:	e008      	b.n	8003648 <HAL_DMA_Abort_IT+0xa4>
 8003636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800363a:	e005      	b.n	8003648 <HAL_DMA_Abort_IT+0xa4>
 800363c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003640:	e002      	b.n	8003648 <HAL_DMA_Abort_IT+0xa4>
 8003642:	2310      	movs	r3, #16
 8003644:	e000      	b.n	8003648 <HAL_DMA_Abort_IT+0xa4>
 8003646:	2301      	movs	r3, #1
 8003648:	4a11      	ldr	r2, [pc, #68]	@ (8003690 <HAL_DMA_Abort_IT+0xec>)
 800364a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	4798      	blx	r3
    } 
  }
  return status;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40020008 	.word	0x40020008
 800367c:	4002001c 	.word	0x4002001c
 8003680:	40020030 	.word	0x40020030
 8003684:	40020044 	.word	0x40020044
 8003688:	40020058 	.word	0x40020058
 800368c:	4002006c 	.word	0x4002006c
 8003690:	40020000 	.word	0x40020000

08003694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003694:	b480      	push	{r7}
 8003696:	b08b      	sub	sp, #44	@ 0x2c
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036a2:	2300      	movs	r3, #0
 80036a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036a6:	e169      	b.n	800397c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036a8:	2201      	movs	r2, #1
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	f040 8158 	bne.w	8003976 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4a9a      	ldr	r2, [pc, #616]	@ (8003934 <HAL_GPIO_Init+0x2a0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d05e      	beq.n	800378e <HAL_GPIO_Init+0xfa>
 80036d0:	4a98      	ldr	r2, [pc, #608]	@ (8003934 <HAL_GPIO_Init+0x2a0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d875      	bhi.n	80037c2 <HAL_GPIO_Init+0x12e>
 80036d6:	4a98      	ldr	r2, [pc, #608]	@ (8003938 <HAL_GPIO_Init+0x2a4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d058      	beq.n	800378e <HAL_GPIO_Init+0xfa>
 80036dc:	4a96      	ldr	r2, [pc, #600]	@ (8003938 <HAL_GPIO_Init+0x2a4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d86f      	bhi.n	80037c2 <HAL_GPIO_Init+0x12e>
 80036e2:	4a96      	ldr	r2, [pc, #600]	@ (800393c <HAL_GPIO_Init+0x2a8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d052      	beq.n	800378e <HAL_GPIO_Init+0xfa>
 80036e8:	4a94      	ldr	r2, [pc, #592]	@ (800393c <HAL_GPIO_Init+0x2a8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d869      	bhi.n	80037c2 <HAL_GPIO_Init+0x12e>
 80036ee:	4a94      	ldr	r2, [pc, #592]	@ (8003940 <HAL_GPIO_Init+0x2ac>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d04c      	beq.n	800378e <HAL_GPIO_Init+0xfa>
 80036f4:	4a92      	ldr	r2, [pc, #584]	@ (8003940 <HAL_GPIO_Init+0x2ac>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d863      	bhi.n	80037c2 <HAL_GPIO_Init+0x12e>
 80036fa:	4a92      	ldr	r2, [pc, #584]	@ (8003944 <HAL_GPIO_Init+0x2b0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d046      	beq.n	800378e <HAL_GPIO_Init+0xfa>
 8003700:	4a90      	ldr	r2, [pc, #576]	@ (8003944 <HAL_GPIO_Init+0x2b0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d85d      	bhi.n	80037c2 <HAL_GPIO_Init+0x12e>
 8003706:	2b12      	cmp	r3, #18
 8003708:	d82a      	bhi.n	8003760 <HAL_GPIO_Init+0xcc>
 800370a:	2b12      	cmp	r3, #18
 800370c:	d859      	bhi.n	80037c2 <HAL_GPIO_Init+0x12e>
 800370e:	a201      	add	r2, pc, #4	@ (adr r2, 8003714 <HAL_GPIO_Init+0x80>)
 8003710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003714:	0800378f 	.word	0x0800378f
 8003718:	08003769 	.word	0x08003769
 800371c:	0800377b 	.word	0x0800377b
 8003720:	080037bd 	.word	0x080037bd
 8003724:	080037c3 	.word	0x080037c3
 8003728:	080037c3 	.word	0x080037c3
 800372c:	080037c3 	.word	0x080037c3
 8003730:	080037c3 	.word	0x080037c3
 8003734:	080037c3 	.word	0x080037c3
 8003738:	080037c3 	.word	0x080037c3
 800373c:	080037c3 	.word	0x080037c3
 8003740:	080037c3 	.word	0x080037c3
 8003744:	080037c3 	.word	0x080037c3
 8003748:	080037c3 	.word	0x080037c3
 800374c:	080037c3 	.word	0x080037c3
 8003750:	080037c3 	.word	0x080037c3
 8003754:	080037c3 	.word	0x080037c3
 8003758:	08003771 	.word	0x08003771
 800375c:	08003785 	.word	0x08003785
 8003760:	4a79      	ldr	r2, [pc, #484]	@ (8003948 <HAL_GPIO_Init+0x2b4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d013      	beq.n	800378e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003766:	e02c      	b.n	80037c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	623b      	str	r3, [r7, #32]
          break;
 800376e:	e029      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	3304      	adds	r3, #4
 8003776:	623b      	str	r3, [r7, #32]
          break;
 8003778:	e024      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	3308      	adds	r3, #8
 8003780:	623b      	str	r3, [r7, #32]
          break;
 8003782:	e01f      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	330c      	adds	r3, #12
 800378a:	623b      	str	r3, [r7, #32]
          break;
 800378c:	e01a      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d102      	bne.n	800379c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003796:	2304      	movs	r3, #4
 8003798:	623b      	str	r3, [r7, #32]
          break;
 800379a:	e013      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d105      	bne.n	80037b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037a4:	2308      	movs	r3, #8
 80037a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	611a      	str	r2, [r3, #16]
          break;
 80037ae:	e009      	b.n	80037c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037b0:	2308      	movs	r3, #8
 80037b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	615a      	str	r2, [r3, #20]
          break;
 80037ba:	e003      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037bc:	2300      	movs	r3, #0
 80037be:	623b      	str	r3, [r7, #32]
          break;
 80037c0:	e000      	b.n	80037c4 <HAL_GPIO_Init+0x130>
          break;
 80037c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2bff      	cmp	r3, #255	@ 0xff
 80037c8:	d801      	bhi.n	80037ce <HAL_GPIO_Init+0x13a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	e001      	b.n	80037d2 <HAL_GPIO_Init+0x13e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2bff      	cmp	r3, #255	@ 0xff
 80037d8:	d802      	bhi.n	80037e0 <HAL_GPIO_Init+0x14c>
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	e002      	b.n	80037e6 <HAL_GPIO_Init+0x152>
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	3b08      	subs	r3, #8
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	210f      	movs	r1, #15
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	401a      	ands	r2, r3
 80037f8:	6a39      	ldr	r1, [r7, #32]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	431a      	orrs	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80b1 	beq.w	8003976 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003814:	4b4d      	ldr	r3, [pc, #308]	@ (800394c <HAL_GPIO_Init+0x2b8>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	4a4c      	ldr	r2, [pc, #304]	@ (800394c <HAL_GPIO_Init+0x2b8>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6193      	str	r3, [r2, #24]
 8003820:	4b4a      	ldr	r3, [pc, #296]	@ (800394c <HAL_GPIO_Init+0x2b8>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800382c:	4a48      	ldr	r2, [pc, #288]	@ (8003950 <HAL_GPIO_Init+0x2bc>)
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	3302      	adds	r3, #2
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	220f      	movs	r2, #15
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4013      	ands	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a40      	ldr	r2, [pc, #256]	@ (8003954 <HAL_GPIO_Init+0x2c0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d013      	beq.n	8003880 <HAL_GPIO_Init+0x1ec>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a3f      	ldr	r2, [pc, #252]	@ (8003958 <HAL_GPIO_Init+0x2c4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00d      	beq.n	800387c <HAL_GPIO_Init+0x1e8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a3e      	ldr	r2, [pc, #248]	@ (800395c <HAL_GPIO_Init+0x2c8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d007      	beq.n	8003878 <HAL_GPIO_Init+0x1e4>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a3d      	ldr	r2, [pc, #244]	@ (8003960 <HAL_GPIO_Init+0x2cc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d101      	bne.n	8003874 <HAL_GPIO_Init+0x1e0>
 8003870:	2303      	movs	r3, #3
 8003872:	e006      	b.n	8003882 <HAL_GPIO_Init+0x1ee>
 8003874:	2304      	movs	r3, #4
 8003876:	e004      	b.n	8003882 <HAL_GPIO_Init+0x1ee>
 8003878:	2302      	movs	r3, #2
 800387a:	e002      	b.n	8003882 <HAL_GPIO_Init+0x1ee>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_GPIO_Init+0x1ee>
 8003880:	2300      	movs	r3, #0
 8003882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003884:	f002 0203 	and.w	r2, r2, #3
 8003888:	0092      	lsls	r2, r2, #2
 800388a:	4093      	lsls	r3, r2
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003892:	492f      	ldr	r1, [pc, #188]	@ (8003950 <HAL_GPIO_Init+0x2bc>)
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	3302      	adds	r3, #2
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d006      	beq.n	80038ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	492c      	ldr	r1, [pc, #176]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	608b      	str	r3, [r1, #8]
 80038b8:	e006      	b.n	80038c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	4928      	ldr	r1, [pc, #160]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d006      	beq.n	80038e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038d4:	4b23      	ldr	r3, [pc, #140]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	4922      	ldr	r1, [pc, #136]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	4313      	orrs	r3, r2
 80038de:	60cb      	str	r3, [r1, #12]
 80038e0:	e006      	b.n	80038f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038e2:	4b20      	ldr	r3, [pc, #128]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	43db      	mvns	r3, r3
 80038ea:	491e      	ldr	r1, [pc, #120]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038fc:	4b19      	ldr	r3, [pc, #100]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	4918      	ldr	r1, [pc, #96]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]
 8003908:	e006      	b.n	8003918 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800390a:	4b16      	ldr	r3, [pc, #88]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	43db      	mvns	r3, r3
 8003912:	4914      	ldr	r1, [pc, #80]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 8003914:	4013      	ands	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d021      	beq.n	8003968 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003924:	4b0f      	ldr	r3, [pc, #60]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	490e      	ldr	r1, [pc, #56]	@ (8003964 <HAL_GPIO_Init+0x2d0>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]
 8003930:	e021      	b.n	8003976 <HAL_GPIO_Init+0x2e2>
 8003932:	bf00      	nop
 8003934:	10320000 	.word	0x10320000
 8003938:	10310000 	.word	0x10310000
 800393c:	10220000 	.word	0x10220000
 8003940:	10210000 	.word	0x10210000
 8003944:	10120000 	.word	0x10120000
 8003948:	10110000 	.word	0x10110000
 800394c:	40021000 	.word	0x40021000
 8003950:	40010000 	.word	0x40010000
 8003954:	40010800 	.word	0x40010800
 8003958:	40010c00 	.word	0x40010c00
 800395c:	40011000 	.word	0x40011000
 8003960:	40011400 	.word	0x40011400
 8003964:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003968:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_GPIO_Init+0x304>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	43db      	mvns	r3, r3
 8003970:	4909      	ldr	r1, [pc, #36]	@ (8003998 <HAL_GPIO_Init+0x304>)
 8003972:	4013      	ands	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	3301      	adds	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	fa22 f303 	lsr.w	r3, r2, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	f47f ae8e 	bne.w	80036a8 <HAL_GPIO_Init+0x14>
  }
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	372c      	adds	r7, #44	@ 0x2c
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	40010400 	.word	0x40010400

0800399c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	807b      	strh	r3, [r7, #2]
 80039a8:	4613      	mov	r3, r2
 80039aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039ac:	787b      	ldrb	r3, [r7, #1]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039b2:	887a      	ldrh	r2, [r7, #2]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039b8:	e003      	b.n	80039c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039ba:	887b      	ldrh	r3, [r7, #2]
 80039bc:	041a      	lsls	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	611a      	str	r2, [r3, #16]
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr

080039cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e12b      	b.n	8003c36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff f9ce 	bl	8002d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2224      	movs	r2, #36	@ 0x24
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a30:	f001 fbfc 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 8003a34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4a81      	ldr	r2, [pc, #516]	@ (8003c40 <HAL_I2C_Init+0x274>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d807      	bhi.n	8003a50 <HAL_I2C_Init+0x84>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a80      	ldr	r2, [pc, #512]	@ (8003c44 <HAL_I2C_Init+0x278>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	bf94      	ite	ls
 8003a48:	2301      	movls	r3, #1
 8003a4a:	2300      	movhi	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e006      	b.n	8003a5e <HAL_I2C_Init+0x92>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4a7d      	ldr	r2, [pc, #500]	@ (8003c48 <HAL_I2C_Init+0x27c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	bf94      	ite	ls
 8003a58:	2301      	movls	r3, #1
 8003a5a:	2300      	movhi	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0e7      	b.n	8003c36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a78      	ldr	r2, [pc, #480]	@ (8003c4c <HAL_I2C_Init+0x280>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	0c9b      	lsrs	r3, r3, #18
 8003a70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4a6a      	ldr	r2, [pc, #424]	@ (8003c40 <HAL_I2C_Init+0x274>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d802      	bhi.n	8003aa0 <HAL_I2C_Init+0xd4>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	e009      	b.n	8003ab4 <HAL_I2C_Init+0xe8>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	4a69      	ldr	r2, [pc, #420]	@ (8003c50 <HAL_I2C_Init+0x284>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	099b      	lsrs	r3, r3, #6
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ac6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	495c      	ldr	r1, [pc, #368]	@ (8003c40 <HAL_I2C_Init+0x274>)
 8003ad0:	428b      	cmp	r3, r1
 8003ad2:	d819      	bhi.n	8003b08 <HAL_I2C_Init+0x13c>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1e59      	subs	r1, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ae2:	1c59      	adds	r1, r3, #1
 8003ae4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ae8:	400b      	ands	r3, r1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_I2C_Init+0x138>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1e59      	subs	r1, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b02:	e051      	b.n	8003ba8 <HAL_I2C_Init+0x1dc>
 8003b04:	2304      	movs	r3, #4
 8003b06:	e04f      	b.n	8003ba8 <HAL_I2C_Init+0x1dc>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d111      	bne.n	8003b34 <HAL_I2C_Init+0x168>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1e58      	subs	r0, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	440b      	add	r3, r1
 8003b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b22:	3301      	adds	r3, #1
 8003b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	e012      	b.n	8003b5a <HAL_I2C_Init+0x18e>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1e58      	subs	r0, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	0099      	lsls	r1, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_Init+0x196>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e022      	b.n	8003ba8 <HAL_I2C_Init+0x1dc>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10e      	bne.n	8003b88 <HAL_I2C_Init+0x1bc>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1e58      	subs	r0, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6859      	ldr	r1, [r3, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	440b      	add	r3, r1
 8003b78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b86:	e00f      	b.n	8003ba8 <HAL_I2C_Init+0x1dc>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1e58      	subs	r0, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6859      	ldr	r1, [r3, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	0099      	lsls	r1, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	6809      	ldr	r1, [r1, #0]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69da      	ldr	r2, [r3, #28]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6911      	ldr	r1, [r2, #16]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68d2      	ldr	r2, [r2, #12]
 8003be2:	4311      	orrs	r1, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	000186a0 	.word	0x000186a0
 8003c44:	001e847f 	.word	0x001e847f
 8003c48:	003d08ff 	.word	0x003d08ff
 8003c4c:	431bde83 	.word	0x431bde83
 8003c50:	10624dd3 	.word	0x10624dd3

08003c54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	4611      	mov	r1, r2
 8003c60:	461a      	mov	r2, r3
 8003c62:	4603      	mov	r3, r0
 8003c64:	817b      	strh	r3, [r7, #10]
 8003c66:	460b      	mov	r3, r1
 8003c68:	813b      	strh	r3, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c6e:	f7ff fb5d 	bl	800332c <HAL_GetTick>
 8003c72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	f040 80d9 	bne.w	8003e34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	2319      	movs	r3, #25
 8003c88:	2201      	movs	r2, #1
 8003c8a:	496d      	ldr	r1, [pc, #436]	@ (8003e40 <HAL_I2C_Mem_Write+0x1ec>)
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fccd 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e0cc      	b.n	8003e36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_I2C_Mem_Write+0x56>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e0c5      	b.n	8003e36 <HAL_I2C_Mem_Write+0x1e2>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d007      	beq.n	8003cd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2221      	movs	r2, #33	@ 0x21
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2240      	movs	r2, #64	@ 0x40
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a3a      	ldr	r2, [r7, #32]
 8003cfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a4d      	ldr	r2, [pc, #308]	@ (8003e44 <HAL_I2C_Mem_Write+0x1f0>)
 8003d10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d12:	88f8      	ldrh	r0, [r7, #6]
 8003d14:	893a      	ldrh	r2, [r7, #8]
 8003d16:	8979      	ldrh	r1, [r7, #10]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	4603      	mov	r3, r0
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fb04 	bl	8004330 <I2C_RequestMemoryWrite>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d052      	beq.n	8003dd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e081      	b.n	8003e36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fd92 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00d      	beq.n	8003d5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d107      	bne.n	8003d5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e06b      	b.n	8003e36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d62:	781a      	ldrb	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_I2C_Mem_Write+0x180>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d017      	beq.n	8003dd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	781a      	ldrb	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1aa      	bne.n	8003d32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fd85 	bl	80048f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00d      	beq.n	8003e08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d107      	bne.n	8003e04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e016      	b.n	8003e36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e000      	b.n	8003e36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
  }
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	00100002 	.word	0x00100002
 8003e44:	ffff0000 	.word	0xffff0000

08003e48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	@ 0x30
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	4608      	mov	r0, r1
 8003e52:	4611      	mov	r1, r2
 8003e54:	461a      	mov	r2, r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	817b      	strh	r3, [r7, #10]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	813b      	strh	r3, [r7, #8]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e66:	f7ff fa61 	bl	800332c <HAL_GetTick>
 8003e6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	f040 8250 	bne.w	800431a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	2319      	movs	r3, #25
 8003e80:	2201      	movs	r2, #1
 8003e82:	4982      	ldr	r1, [pc, #520]	@ (800408c <HAL_I2C_Mem_Read+0x244>)
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fbd1 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003e90:	2302      	movs	r3, #2
 8003e92:	e243      	b.n	800431c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_I2C_Mem_Read+0x5a>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e23c      	b.n	800431c <HAL_I2C_Mem_Read+0x4d4>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d007      	beq.n	8003ec8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ed6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2222      	movs	r2, #34	@ 0x22
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2240      	movs	r2, #64	@ 0x40
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a62      	ldr	r2, [pc, #392]	@ (8004090 <HAL_I2C_Mem_Read+0x248>)
 8003f08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f0a:	88f8      	ldrh	r0, [r7, #6]
 8003f0c:	893a      	ldrh	r2, [r7, #8]
 8003f0e:	8979      	ldrh	r1, [r7, #10]
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	4603      	mov	r3, r0
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fa9e 	bl	800445c <I2C_RequestMemoryRead>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e1f8      	b.n	800431c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d113      	bne.n	8003f5a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	e1cc      	b.n	80042f4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d11e      	bne.n	8003fa0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f72:	b672      	cpsid	i
}
 8003f74:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f76:	2300      	movs	r3, #0
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f9c:	b662      	cpsie	i
}
 8003f9e:	e035      	b.n	800400c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d11e      	bne.n	8003fe6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb8:	b672      	cpsid	i
}
 8003fba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fe2:	b662      	cpsie	i
}
 8003fe4:	e012      	b.n	800400c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ff4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800400c:	e172      	b.n	80042f4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004012:	2b03      	cmp	r3, #3
 8004014:	f200 811f 	bhi.w	8004256 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401c:	2b01      	cmp	r3, #1
 800401e:	d123      	bne.n	8004068 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004022:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fcab 	bl	8004980 <I2C_WaitOnRXNEFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e173      	b.n	800431c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004066:	e145      	b.n	80042f4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406c:	2b02      	cmp	r3, #2
 800406e:	d152      	bne.n	8004116 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004076:	2200      	movs	r2, #0
 8004078:	4906      	ldr	r1, [pc, #24]	@ (8004094 <HAL_I2C_Mem_Read+0x24c>)
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fad6 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e148      	b.n	800431c <HAL_I2C_Mem_Read+0x4d4>
 800408a:	bf00      	nop
 800408c:	00100002 	.word	0x00100002
 8004090:	ffff0000 	.word	0xffff0000
 8004094:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004098:	b672      	cpsid	i
}
 800409a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040de:	b662      	cpsie	i
}
 80040e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004114:	e0ee      	b.n	80042f4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800411c:	2200      	movs	r2, #0
 800411e:	4981      	ldr	r1, [pc, #516]	@ (8004324 <HAL_I2C_Mem_Read+0x4dc>)
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fa83 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0f5      	b.n	800431c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800413e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004140:	b672      	cpsid	i
}
 8004142:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004176:	4b6c      	ldr	r3, [pc, #432]	@ (8004328 <HAL_I2C_Mem_Read+0x4e0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	08db      	lsrs	r3, r3, #3
 800417c:	4a6b      	ldr	r2, [pc, #428]	@ (800432c <HAL_I2C_Mem_Read+0x4e4>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	0a1a      	lsrs	r2, r3, #8
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	00da      	lsls	r2, r3, #3
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	3b01      	subs	r3, #1
 8004194:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d118      	bne.n	80041ce <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80041be:	b662      	cpsie	i
}
 80041c0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e0a6      	b.n	800431c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d1d9      	bne.n	8004190 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800421e:	b662      	cpsie	i
}
 8004220:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004254:	e04e      	b.n	80042f4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004258:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fb90 	bl	8004980 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e058      	b.n	800431c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d124      	bne.n	80042f4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d107      	bne.n	80042c2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f47f ae88 	bne.w	800400e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	e000      	b.n	800431c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800431a:	2302      	movs	r3, #2
  }
}
 800431c:	4618      	mov	r0, r3
 800431e:	3728      	adds	r7, #40	@ 0x28
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	00010004 	.word	0x00010004
 8004328:	20000000 	.word	0x20000000
 800432c:	14f8b589 	.word	0x14f8b589

08004330 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	461a      	mov	r2, r3
 800433e:	4603      	mov	r3, r0
 8004340:	817b      	strh	r3, [r7, #10]
 8004342:	460b      	mov	r3, r1
 8004344:	813b      	strh	r3, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	2200      	movs	r2, #0
 8004362:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f960 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004380:	d103      	bne.n	800438a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004388:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e05f      	b.n	800444e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800438e:	897b      	ldrh	r3, [r7, #10]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800439c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	492d      	ldr	r1, [pc, #180]	@ (8004458 <I2C_RequestMemoryWrite+0x128>)
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f9bb 	bl	8004720 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e04c      	b.n	800444e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043cc:	6a39      	ldr	r1, [r7, #32]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fa46 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00d      	beq.n	80043f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d107      	bne.n	80043f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e02b      	b.n	800444e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d105      	bne.n	8004408 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043fc:	893b      	ldrh	r3, [r7, #8]
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	611a      	str	r2, [r3, #16]
 8004406:	e021      	b.n	800444c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004408:	893b      	ldrh	r3, [r7, #8]
 800440a:	0a1b      	lsrs	r3, r3, #8
 800440c:	b29b      	uxth	r3, r3
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004418:	6a39      	ldr	r1, [r7, #32]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 fa20 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	2b04      	cmp	r3, #4
 800442c:	d107      	bne.n	800443e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800443c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e005      	b.n	800444e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004442:	893b      	ldrh	r3, [r7, #8]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	00010002 	.word	0x00010002

0800445c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	4608      	mov	r0, r1
 8004466:	4611      	mov	r1, r2
 8004468:	461a      	mov	r2, r3
 800446a:	4603      	mov	r3, r0
 800446c:	817b      	strh	r3, [r7, #10]
 800446e:	460b      	mov	r3, r1
 8004470:	813b      	strh	r3, [r7, #8]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004484:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004494:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	2200      	movs	r2, #0
 800449e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 f8c2 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044bc:	d103      	bne.n	80044c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e0aa      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ca:	897b      	ldrh	r3, [r7, #10]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044dc:	6a3a      	ldr	r2, [r7, #32]
 80044de:	4952      	ldr	r1, [pc, #328]	@ (8004628 <I2C_RequestMemoryRead+0x1cc>)
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f91d 	bl	8004720 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e097      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004508:	6a39      	ldr	r1, [r7, #32]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f9a8 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00d      	beq.n	8004532 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	2b04      	cmp	r3, #4
 800451c:	d107      	bne.n	800452e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800452c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e076      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d105      	bne.n	8004544 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004538:	893b      	ldrh	r3, [r7, #8]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	611a      	str	r2, [r3, #16]
 8004542:	e021      	b.n	8004588 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004544:	893b      	ldrh	r3, [r7, #8]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	b29b      	uxth	r3, r3
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004554:	6a39      	ldr	r1, [r7, #32]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f982 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00d      	beq.n	800457e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004566:	2b04      	cmp	r3, #4
 8004568:	d107      	bne.n	800457a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004578:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e050      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800457e:	893b      	ldrh	r3, [r7, #8]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800458a:	6a39      	ldr	r1, [r7, #32]
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f967 	bl	8004860 <I2C_WaitOnTXEFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00d      	beq.n	80045b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	2b04      	cmp	r3, #4
 800459e:	d107      	bne.n	80045b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e035      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f82b 	bl	800462c <I2C_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00d      	beq.n	80045f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ea:	d103      	bne.n	80045f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e013      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045f8:	897b      	ldrh	r3, [r7, #10]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460a:	6a3a      	ldr	r2, [r7, #32]
 800460c:	4906      	ldr	r1, [pc, #24]	@ (8004628 <I2C_RequestMemoryRead+0x1cc>)
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f886 	bl	8004720 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	00010002 	.word	0x00010002

0800462c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800463c:	e048      	b.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d044      	beq.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7fe fe71 	bl	800332c <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d139      	bne.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	0c1b      	lsrs	r3, r3, #16
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b01      	cmp	r3, #1
 8004664:	d10d      	bne.n	8004682 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	43da      	mvns	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4013      	ands	r3, r2
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	bf0c      	ite	eq
 8004678:	2301      	moveq	r3, #1
 800467a:	2300      	movne	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	e00c      	b.n	800469c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	43da      	mvns	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4013      	ands	r3, r2
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	461a      	mov	r2, r3
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d116      	bne.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	f043 0220 	orr.w	r2, r3, #32
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e023      	b.n	8004718 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	0c1b      	lsrs	r3, r3, #16
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d10d      	bne.n	80046f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	43da      	mvns	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4013      	ands	r3, r2
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	e00c      	b.n	8004710 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	43da      	mvns	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4013      	ands	r3, r2
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	429a      	cmp	r2, r3
 8004714:	d093      	beq.n	800463e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800472e:	e071      	b.n	8004814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473e:	d123      	bne.n	8004788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800474e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004758:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004774:	f043 0204 	orr.w	r2, r3, #4
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e067      	b.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478e:	d041      	beq.n	8004814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004790:	f7fe fdcc 	bl	800332c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	429a      	cmp	r2, r3
 800479e:	d302      	bcc.n	80047a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d136      	bne.n	8004814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d10c      	bne.n	80047ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	43da      	mvns	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4013      	ands	r3, r2
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	bf14      	ite	ne
 80047c2:	2301      	movne	r3, #1
 80047c4:	2300      	moveq	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	e00b      	b.n	80047e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	43da      	mvns	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4013      	ands	r3, r2
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d016      	beq.n	8004814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	f043 0220 	orr.w	r2, r3, #32
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e021      	b.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	0c1b      	lsrs	r3, r3, #16
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b01      	cmp	r3, #1
 800481c:	d10c      	bne.n	8004838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	43da      	mvns	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4013      	ands	r3, r2
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	e00b      	b.n	8004850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	43da      	mvns	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4013      	ands	r3, r2
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	bf14      	ite	ne
 800484a:	2301      	movne	r3, #1
 800484c:	2300      	moveq	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	f47f af6d 	bne.w	8004730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800486c:	e034      	b.n	80048d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f8e3 	bl	8004a3a <I2C_IsAcknowledgeFailed>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e034      	b.n	80048e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d028      	beq.n	80048d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004886:	f7fe fd51 	bl	800332c <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	429a      	cmp	r2, r3
 8004894:	d302      	bcc.n	800489c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d11d      	bne.n	80048d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a6:	2b80      	cmp	r3, #128	@ 0x80
 80048a8:	d016      	beq.n	80048d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c4:	f043 0220 	orr.w	r2, r3, #32
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e007      	b.n	80048e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e2:	2b80      	cmp	r3, #128	@ 0x80
 80048e4:	d1c3      	bne.n	800486e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048fc:	e034      	b.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f89b 	bl	8004a3a <I2C_IsAcknowledgeFailed>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e034      	b.n	8004978 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d028      	beq.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004916:	f7fe fd09 	bl	800332c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	d302      	bcc.n	800492c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d11d      	bne.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b04      	cmp	r3, #4
 8004938:	d016      	beq.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e007      	b.n	8004978 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b04      	cmp	r3, #4
 8004974:	d1c3      	bne.n	80048fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800498c:	e049      	b.n	8004a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b10      	cmp	r3, #16
 800499a:	d119      	bne.n	80049d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0210 	mvn.w	r2, #16
 80049a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e030      	b.n	8004a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d0:	f7fe fcac 	bl	800332c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d302      	bcc.n	80049e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d11d      	bne.n	8004a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f0:	2b40      	cmp	r3, #64	@ 0x40
 80049f2:	d016      	beq.n	8004a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	f043 0220 	orr.w	r2, r3, #32
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e007      	b.n	8004a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2c:	2b40      	cmp	r3, #64	@ 0x40
 8004a2e:	d1ae      	bne.n	800498e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a50:	d11b      	bne.n	8004a8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	f043 0204 	orr.w	r2, r3, #4
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr
	...

08004a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e272      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8087 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ab8:	4b92      	ldr	r3, [pc, #584]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d00c      	beq.n	8004ade <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ac4:	4b8f      	ldr	r3, [pc, #572]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d112      	bne.n	8004af6 <HAL_RCC_OscConfig+0x5e>
 8004ad0:	4b8c      	ldr	r3, [pc, #560]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004adc:	d10b      	bne.n	8004af6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ade:	4b89      	ldr	r3, [pc, #548]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d06c      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x12c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d168      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e24c      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004afe:	d106      	bne.n	8004b0e <HAL_RCC_OscConfig+0x76>
 8004b00:	4b80      	ldr	r3, [pc, #512]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a7f      	ldr	r2, [pc, #508]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	e02e      	b.n	8004b6c <HAL_RCC_OscConfig+0xd4>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCC_OscConfig+0x98>
 8004b16:	4b7b      	ldr	r3, [pc, #492]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7a      	ldr	r2, [pc, #488]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	4b78      	ldr	r3, [pc, #480]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a77      	ldr	r2, [pc, #476]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e01d      	b.n	8004b6c <HAL_RCC_OscConfig+0xd4>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b38:	d10c      	bne.n	8004b54 <HAL_RCC_OscConfig+0xbc>
 8004b3a:	4b72      	ldr	r3, [pc, #456]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a71      	ldr	r2, [pc, #452]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	4b6f      	ldr	r3, [pc, #444]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a6e      	ldr	r2, [pc, #440]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e00b      	b.n	8004b6c <HAL_RCC_OscConfig+0xd4>
 8004b54:	4b6b      	ldr	r3, [pc, #428]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a6a      	ldr	r2, [pc, #424]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	4b68      	ldr	r3, [pc, #416]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a67      	ldr	r2, [pc, #412]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b74:	f7fe fbda 	bl	800332c <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b7c:	f7fe fbd6 	bl	800332c <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	@ 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e200      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0xe4>
 8004b9a:	e014      	b.n	8004bc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fe fbc6 	bl	800332c <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fe fbc2 	bl	800332c <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	@ 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e1ec      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb6:	4b53      	ldr	r3, [pc, #332]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x10c>
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d063      	beq.n	8004c9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bd2:	4b4c      	ldr	r3, [pc, #304]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004bde:	4b49      	ldr	r3, [pc, #292]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d11c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x18c>
 8004bea:	4b46      	ldr	r3, [pc, #280]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d116      	bne.n	8004c24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf6:	4b43      	ldr	r3, [pc, #268]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <HAL_RCC_OscConfig+0x176>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d001      	beq.n	8004c0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e1c0      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4939      	ldr	r1, [pc, #228]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c22:	e03a      	b.n	8004c9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d020      	beq.n	8004c6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c2c:	4b36      	ldr	r3, [pc, #216]	@ (8004d08 <HAL_RCC_OscConfig+0x270>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c32:	f7fe fb7b 	bl	800332c <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3a:	f7fe fb77 	bl	800332c <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e1a1      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c58:	4b2a      	ldr	r3, [pc, #168]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4927      	ldr	r1, [pc, #156]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	600b      	str	r3, [r1, #0]
 8004c6c:	e015      	b.n	8004c9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c6e:	4b26      	ldr	r3, [pc, #152]	@ (8004d08 <HAL_RCC_OscConfig+0x270>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fe fb5a 	bl	800332c <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fe fb56 	bl	800332c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e180      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d03a      	beq.n	8004d1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d019      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cae:	4b17      	ldr	r3, [pc, #92]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb4:	f7fe fb3a 	bl	800332c <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cbc:	f7fe fb36 	bl	800332c <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e160      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cce:	4b0d      	ldr	r3, [pc, #52]	@ (8004d04 <HAL_RCC_OscConfig+0x26c>)
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004cda:	2001      	movs	r0, #1
 8004cdc:	f000 face 	bl	800527c <RCC_Delay>
 8004ce0:	e01c      	b.n	8004d1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce8:	f7fe fb20 	bl	800332c <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cee:	e00f      	b.n	8004d10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf0:	f7fe fb1c 	bl	800332c <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d908      	bls.n	8004d10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e146      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
 8004d02:	bf00      	nop
 8004d04:	40021000 	.word	0x40021000
 8004d08:	42420000 	.word	0x42420000
 8004d0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d10:	4b92      	ldr	r3, [pc, #584]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e9      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80a6 	beq.w	8004e76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d2e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10d      	bne.n	8004d56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3a:	4b88      	ldr	r3, [pc, #544]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	4a87      	ldr	r2, [pc, #540]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	61d3      	str	r3, [r2, #28]
 8004d46:	4b85      	ldr	r3, [pc, #532]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d52:	2301      	movs	r3, #1
 8004d54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d56:	4b82      	ldr	r3, [pc, #520]	@ (8004f60 <HAL_RCC_OscConfig+0x4c8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d118      	bne.n	8004d94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d62:	4b7f      	ldr	r3, [pc, #508]	@ (8004f60 <HAL_RCC_OscConfig+0x4c8>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a7e      	ldr	r2, [pc, #504]	@ (8004f60 <HAL_RCC_OscConfig+0x4c8>)
 8004d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6e:	f7fe fadd 	bl	800332c <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d76:	f7fe fad9 	bl	800332c <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b64      	cmp	r3, #100	@ 0x64
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e103      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d88:	4b75      	ldr	r3, [pc, #468]	@ (8004f60 <HAL_RCC_OscConfig+0x4c8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d106      	bne.n	8004daa <HAL_RCC_OscConfig+0x312>
 8004d9c:	4b6f      	ldr	r3, [pc, #444]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	4a6e      	ldr	r2, [pc, #440]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	6213      	str	r3, [r2, #32]
 8004da8:	e02d      	b.n	8004e06 <HAL_RCC_OscConfig+0x36e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10c      	bne.n	8004dcc <HAL_RCC_OscConfig+0x334>
 8004db2:	4b6a      	ldr	r3, [pc, #424]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	4a69      	ldr	r2, [pc, #420]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004db8:	f023 0301 	bic.w	r3, r3, #1
 8004dbc:	6213      	str	r3, [r2, #32]
 8004dbe:	4b67      	ldr	r3, [pc, #412]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	4a66      	ldr	r2, [pc, #408]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	f023 0304 	bic.w	r3, r3, #4
 8004dc8:	6213      	str	r3, [r2, #32]
 8004dca:	e01c      	b.n	8004e06 <HAL_RCC_OscConfig+0x36e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	2b05      	cmp	r3, #5
 8004dd2:	d10c      	bne.n	8004dee <HAL_RCC_OscConfig+0x356>
 8004dd4:	4b61      	ldr	r3, [pc, #388]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	4a60      	ldr	r2, [pc, #384]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004dda:	f043 0304 	orr.w	r3, r3, #4
 8004dde:	6213      	str	r3, [r2, #32]
 8004de0:	4b5e      	ldr	r3, [pc, #376]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	4a5d      	ldr	r2, [pc, #372]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	6213      	str	r3, [r2, #32]
 8004dec:	e00b      	b.n	8004e06 <HAL_RCC_OscConfig+0x36e>
 8004dee:	4b5b      	ldr	r3, [pc, #364]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	4a5a      	ldr	r2, [pc, #360]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	6213      	str	r3, [r2, #32]
 8004dfa:	4b58      	ldr	r3, [pc, #352]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	4a57      	ldr	r2, [pc, #348]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004e00:	f023 0304 	bic.w	r3, r3, #4
 8004e04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d015      	beq.n	8004e3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0e:	f7fe fa8d 	bl	800332c <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e14:	e00a      	b.n	8004e2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e16:	f7fe fa89 	bl	800332c <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e0b1      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2c:	4b4b      	ldr	r3, [pc, #300]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0ee      	beq.n	8004e16 <HAL_RCC_OscConfig+0x37e>
 8004e38:	e014      	b.n	8004e64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3a:	f7fe fa77 	bl	800332c <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e40:	e00a      	b.n	8004e58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e42:	f7fe fa73 	bl	800332c <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e09b      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e58:	4b40      	ldr	r3, [pc, #256]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ee      	bne.n	8004e42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d105      	bne.n	8004e76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	4a3b      	ldr	r2, [pc, #236]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004e70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 8087 	beq.w	8004f8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e80:	4b36      	ldr	r3, [pc, #216]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 030c 	and.w	r3, r3, #12
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d061      	beq.n	8004f50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d146      	bne.n	8004f22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e94:	4b33      	ldr	r3, [pc, #204]	@ (8004f64 <HAL_RCC_OscConfig+0x4cc>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9a:	f7fe fa47 	bl	800332c <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea2:	f7fe fa43 	bl	800332c <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e06d      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb4:	4b29      	ldr	r3, [pc, #164]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec8:	d108      	bne.n	8004edc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004eca:	4b24      	ldr	r3, [pc, #144]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	4921      	ldr	r1, [pc, #132]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004edc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a19      	ldr	r1, [r3, #32]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	430b      	orrs	r3, r1
 8004eee:	491b      	ldr	r1, [pc, #108]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f64 <HAL_RCC_OscConfig+0x4cc>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efa:	f7fe fa17 	bl	800332c <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f02:	f7fe fa13 	bl	800332c <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e03d      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f14:	4b11      	ldr	r3, [pc, #68]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0f0      	beq.n	8004f02 <HAL_RCC_OscConfig+0x46a>
 8004f20:	e035      	b.n	8004f8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f22:	4b10      	ldr	r3, [pc, #64]	@ (8004f64 <HAL_RCC_OscConfig+0x4cc>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f28:	f7fe fa00 	bl	800332c <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f30:	f7fe f9fc 	bl	800332c <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e026      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f42:	4b06      	ldr	r3, [pc, #24]	@ (8004f5c <HAL_RCC_OscConfig+0x4c4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x498>
 8004f4e:	e01e      	b.n	8004f8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d107      	bne.n	8004f68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e019      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	40007000 	.word	0x40007000
 8004f64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f68:	4b0b      	ldr	r3, [pc, #44]	@ (8004f98 <HAL_RCC_OscConfig+0x500>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d106      	bne.n	8004f8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d001      	beq.n	8004f8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40021000 	.word	0x40021000

08004f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0d0      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800515c <HAL_RCC_ClockConfig+0x1c0>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d910      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fbe:	4b67      	ldr	r3, [pc, #412]	@ (800515c <HAL_RCC_ClockConfig+0x1c0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f023 0207 	bic.w	r2, r3, #7
 8004fc6:	4965      	ldr	r1, [pc, #404]	@ (800515c <HAL_RCC_ClockConfig+0x1c0>)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b63      	ldr	r3, [pc, #396]	@ (800515c <HAL_RCC_ClockConfig+0x1c0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0b8      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d020      	beq.n	800502e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff8:	4b59      	ldr	r3, [pc, #356]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4a58      	ldr	r2, [pc, #352]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005002:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005010:	4b53      	ldr	r3, [pc, #332]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	4a52      	ldr	r2, [pc, #328]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005016:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800501a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800501c:	4b50      	ldr	r3, [pc, #320]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	494d      	ldr	r1, [pc, #308]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 800502a:	4313      	orrs	r3, r2
 800502c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d040      	beq.n	80050bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d107      	bne.n	8005052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005042:	4b47      	ldr	r3, [pc, #284]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d115      	bne.n	800507a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e07f      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505a:	4b41      	ldr	r3, [pc, #260]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e073      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506a:	4b3d      	ldr	r3, [pc, #244]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e06b      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800507a:	4b39      	ldr	r3, [pc, #228]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f023 0203 	bic.w	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4936      	ldr	r1, [pc, #216]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005088:	4313      	orrs	r3, r2
 800508a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800508c:	f7fe f94e 	bl	800332c <HAL_GetTick>
 8005090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005092:	e00a      	b.n	80050aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005094:	f7fe f94a 	bl	800332c <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e053      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f003 020c 	and.w	r2, r3, #12
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d1eb      	bne.n	8005094 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050bc:	4b27      	ldr	r3, [pc, #156]	@ (800515c <HAL_RCC_ClockConfig+0x1c0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d210      	bcs.n	80050ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ca:	4b24      	ldr	r3, [pc, #144]	@ (800515c <HAL_RCC_ClockConfig+0x1c0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 0207 	bic.w	r2, r3, #7
 80050d2:	4922      	ldr	r1, [pc, #136]	@ (800515c <HAL_RCC_ClockConfig+0x1c0>)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050da:	4b20      	ldr	r3, [pc, #128]	@ (800515c <HAL_RCC_ClockConfig+0x1c0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e032      	b.n	8005152 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f8:	4b19      	ldr	r3, [pc, #100]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4916      	ldr	r1, [pc, #88]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005106:	4313      	orrs	r3, r2
 8005108:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005116:	4b12      	ldr	r3, [pc, #72]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	490e      	ldr	r1, [pc, #56]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005126:	4313      	orrs	r3, r2
 8005128:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800512a:	f000 f821 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800512e:	4602      	mov	r2, r0
 8005130:	4b0b      	ldr	r3, [pc, #44]	@ (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	490a      	ldr	r1, [pc, #40]	@ (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 800513c:	5ccb      	ldrb	r3, [r1, r3]
 800513e:	fa22 f303 	lsr.w	r3, r2, r3
 8005142:	4a09      	ldr	r2, [pc, #36]	@ (8005168 <HAL_RCC_ClockConfig+0x1cc>)
 8005144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005146:	4b09      	ldr	r3, [pc, #36]	@ (800516c <HAL_RCC_ClockConfig+0x1d0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe f8ac 	bl	80032a8 <HAL_InitTick>

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40022000 	.word	0x40022000
 8005160:	40021000 	.word	0x40021000
 8005164:	0800a514 	.word	0x0800a514
 8005168:	20000000 	.word	0x20000000
 800516c:	20000004 	.word	0x20000004

08005170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	2300      	movs	r3, #0
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	2300      	movs	r3, #0
 8005184:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800518a:	4b1e      	ldr	r3, [pc, #120]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x94>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b04      	cmp	r3, #4
 8005198:	d002      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0x30>
 800519a:	2b08      	cmp	r3, #8
 800519c:	d003      	beq.n	80051a6 <HAL_RCC_GetSysClockFreq+0x36>
 800519e:	e027      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051a0:	4b19      	ldr	r3, [pc, #100]	@ (8005208 <HAL_RCC_GetSysClockFreq+0x98>)
 80051a2:	613b      	str	r3, [r7, #16]
      break;
 80051a4:	e027      	b.n	80051f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	0c9b      	lsrs	r3, r3, #18
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	4a17      	ldr	r2, [pc, #92]	@ (800520c <HAL_RCC_GetSysClockFreq+0x9c>)
 80051b0:	5cd3      	ldrb	r3, [r2, r3]
 80051b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d010      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051be:	4b11      	ldr	r3, [pc, #68]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x94>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	0c5b      	lsrs	r3, r3, #17
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	4a11      	ldr	r2, [pc, #68]	@ (8005210 <HAL_RCC_GetSysClockFreq+0xa0>)
 80051ca:	5cd3      	ldrb	r3, [r2, r3]
 80051cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005208 <HAL_RCC_GetSysClockFreq+0x98>)
 80051d2:	fb03 f202 	mul.w	r2, r3, r2
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	617b      	str	r3, [r7, #20]
 80051de:	e004      	b.n	80051ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005214 <HAL_RCC_GetSysClockFreq+0xa4>)
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	613b      	str	r3, [r7, #16]
      break;
 80051ee:	e002      	b.n	80051f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051f0:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <HAL_RCC_GetSysClockFreq+0x98>)
 80051f2:	613b      	str	r3, [r7, #16]
      break;
 80051f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051f6:	693b      	ldr	r3, [r7, #16]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
 8005208:	007a1200 	.word	0x007a1200
 800520c:	0800a52c 	.word	0x0800a52c
 8005210:	0800a53c 	.word	0x0800a53c
 8005214:	003d0900 	.word	0x003d0900

08005218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800521c:	4b02      	ldr	r3, [pc, #8]	@ (8005228 <HAL_RCC_GetHCLKFreq+0x10>)
 800521e:	681b      	ldr	r3, [r3, #0]
}
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr
 8005228:	20000000 	.word	0x20000000

0800522c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005230:	f7ff fff2 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005234:	4602      	mov	r2, r0
 8005236:	4b05      	ldr	r3, [pc, #20]	@ (800524c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	0a1b      	lsrs	r3, r3, #8
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	4903      	ldr	r1, [pc, #12]	@ (8005250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005242:	5ccb      	ldrb	r3, [r1, r3]
 8005244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005248:	4618      	mov	r0, r3
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40021000 	.word	0x40021000
 8005250:	0800a524 	.word	0x0800a524

08005254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005258:	f7ff ffde 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 800525c:	4602      	mov	r2, r0
 800525e:	4b05      	ldr	r3, [pc, #20]	@ (8005274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	0adb      	lsrs	r3, r3, #11
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	4903      	ldr	r1, [pc, #12]	@ (8005278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800526a:	5ccb      	ldrb	r3, [r1, r3]
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40021000 	.word	0x40021000
 8005278:	0800a524 	.word	0x0800a524

0800527c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005284:	4b0a      	ldr	r3, [pc, #40]	@ (80052b0 <RCC_Delay+0x34>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a0a      	ldr	r2, [pc, #40]	@ (80052b4 <RCC_Delay+0x38>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	0a5b      	lsrs	r3, r3, #9
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005298:	bf00      	nop
  }
  while (Delay --);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1e5a      	subs	r2, r3, #1
 800529e:	60fa      	str	r2, [r7, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1f9      	bne.n	8005298 <RCC_Delay+0x1c>
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr
 80052b0:	20000000 	.word	0x20000000
 80052b4:	10624dd3 	.word	0x10624dd3

080052b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e076      	b.n	80053b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d108      	bne.n	80052e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052da:	d009      	beq.n	80052f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	61da      	str	r2, [r3, #28]
 80052e2:	e005      	b.n	80052f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fd fd80 	bl	8002e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005326:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005374:	ea42 0103 	orr.w	r1, r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	0c1a      	lsrs	r2, r3, #16
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f002 0204 	and.w	r2, r2, #4
 8005396:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69da      	ldr	r2, [r3, #28]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	4613      	mov	r3, r2
 80053ce:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053d0:	f7fd ffac 	bl	800332c <HAL_GetTick>
 80053d4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80053d6:	88fb      	ldrh	r3, [r7, #6]
 80053d8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d001      	beq.n	80053ea <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80053e6:	2302      	movs	r3, #2
 80053e8:	e12a      	b.n	8005640 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <HAL_SPI_Transmit+0x36>
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e122      	b.n	8005640 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_SPI_Transmit+0x48>
 8005404:	2302      	movs	r3, #2
 8005406:	e11b      	b.n	8005640 <HAL_SPI_Transmit+0x280>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2203      	movs	r2, #3
 8005414:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	88fa      	ldrh	r2, [r7, #6]
 8005428:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	88fa      	ldrh	r2, [r7, #6]
 800542e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005456:	d10f      	bne.n	8005478 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005466:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005476:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005482:	2b40      	cmp	r3, #64	@ 0x40
 8005484:	d007      	beq.n	8005496 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005494:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800549e:	d152      	bne.n	8005546 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_SPI_Transmit+0xee>
 80054a8:	8b7b      	ldrh	r3, [r7, #26]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d145      	bne.n	800553a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b2:	881a      	ldrh	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054be:	1c9a      	adds	r2, r3, #2
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054d2:	e032      	b.n	800553a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d112      	bne.n	8005508 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e6:	881a      	ldrh	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f2:	1c9a      	adds	r2, r3, #2
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005506:	e018      	b.n	800553a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005508:	f7fd ff10 	bl	800332c <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d803      	bhi.n	8005520 <HAL_SPI_Transmit+0x160>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d102      	bne.n	8005526 <HAL_SPI_Transmit+0x166>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e082      	b.n	8005640 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1c7      	bne.n	80054d4 <HAL_SPI_Transmit+0x114>
 8005544:	e053      	b.n	80055ee <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_SPI_Transmit+0x194>
 800554e:	8b7b      	ldrh	r3, [r7, #26]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d147      	bne.n	80055e4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	330c      	adds	r3, #12
 800555e:	7812      	ldrb	r2, [r2, #0]
 8005560:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800557a:	e033      	b.n	80055e4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b02      	cmp	r3, #2
 8005588:	d113      	bne.n	80055b2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	330c      	adds	r3, #12
 8005594:	7812      	ldrb	r2, [r2, #0]
 8005596:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	86da      	strh	r2, [r3, #54]	@ 0x36
 80055b0:	e018      	b.n	80055e4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055b2:	f7fd febb 	bl	800332c <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d803      	bhi.n	80055ca <HAL_SPI_Transmit+0x20a>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d102      	bne.n	80055d0 <HAL_SPI_Transmit+0x210>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d109      	bne.n	80055e4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e02d      	b.n	8005640 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1c6      	bne.n	800557c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 fcc8 	bl	8005f88 <SPI_EndRxTxTransaction>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10a      	bne.n	8005622 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800563e:	2300      	movs	r3, #0
  }
}
 8005640:	4618      	mov	r0, r3
 8005642:	3720      	adds	r7, #32
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	d001      	beq.n	8005668 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
 8005666:	e104      	b.n	8005872 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005670:	d112      	bne.n	8005698 <HAL_SPI_Receive+0x50>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10e      	bne.n	8005698 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2204      	movs	r2, #4
 800567e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 f8f3 	bl	800587a <HAL_SPI_TransmitReceive>
 8005694:	4603      	mov	r3, r0
 8005696:	e0ec      	b.n	8005872 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005698:	f7fd fe48 	bl	800332c <HAL_GetTick>
 800569c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <HAL_SPI_Receive+0x62>
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e0e1      	b.n	8005872 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_SPI_Receive+0x74>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e0da      	b.n	8005872 <HAL_SPI_Receive+0x22a>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2204      	movs	r2, #4
 80056c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	88fa      	ldrh	r2, [r7, #6]
 80056e2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800570a:	d10f      	bne.n	800572c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800571a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800572a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005736:	2b40      	cmp	r3, #64	@ 0x40
 8005738:	d007      	beq.n	800574a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005748:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d170      	bne.n	8005834 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005752:	e035      	b.n	80057c0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b01      	cmp	r3, #1
 8005760:	d115      	bne.n	800578e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f103 020c 	add.w	r2, r3, #12
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576e:	7812      	ldrb	r2, [r2, #0]
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800578c:	e018      	b.n	80057c0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800578e:	f7fd fdcd 	bl	800332c <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d803      	bhi.n	80057a6 <HAL_SPI_Receive+0x15e>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a4:	d102      	bne.n	80057ac <HAL_SPI_Receive+0x164>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d109      	bne.n	80057c0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e058      	b.n	8005872 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1c4      	bne.n	8005754 <HAL_SPI_Receive+0x10c>
 80057ca:	e038      	b.n	800583e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d113      	bne.n	8005802 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e4:	b292      	uxth	r2, r2
 80057e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ec:	1c9a      	adds	r2, r3, #2
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005800:	e018      	b.n	8005834 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005802:	f7fd fd93 	bl	800332c <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d803      	bhi.n	800581a <HAL_SPI_Receive+0x1d2>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005818:	d102      	bne.n	8005820 <HAL_SPI_Receive+0x1d8>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e01e      	b.n	8005872 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1c6      	bne.n	80057cc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fb4e 	bl	8005ee4 <SPI_EndRxTransaction>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005870:	2300      	movs	r3, #0
  }
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b08a      	sub	sp, #40	@ 0x28
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005888:	2301      	movs	r3, #1
 800588a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800588c:	f7fd fd4e 	bl	800332c <HAL_GetTick>
 8005890:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005898:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80058a0:	887b      	ldrh	r3, [r7, #2]
 80058a2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058a4:	7ffb      	ldrb	r3, [r7, #31]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d00c      	beq.n	80058c4 <HAL_SPI_TransmitReceive+0x4a>
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058b0:	d106      	bne.n	80058c0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <HAL_SPI_TransmitReceive+0x46>
 80058ba:	7ffb      	ldrb	r3, [r7, #31]
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d001      	beq.n	80058c4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80058c0:	2302      	movs	r3, #2
 80058c2:	e17f      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0x5c>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0x5c>
 80058d0:	887b      	ldrh	r3, [r7, #2]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e174      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_SPI_TransmitReceive+0x6e>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e16d      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x34a>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d003      	beq.n	8005904 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2205      	movs	r2, #5
 8005900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	887a      	ldrh	r2, [r7, #2]
 8005914:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	887a      	ldrh	r2, [r7, #2]
 800591a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	887a      	ldrh	r2, [r7, #2]
 8005926:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	887a      	ldrh	r2, [r7, #2]
 800592c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d007      	beq.n	8005958 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005956:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005960:	d17e      	bne.n	8005a60 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <HAL_SPI_TransmitReceive+0xf6>
 800596a:	8afb      	ldrh	r3, [r7, #22]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d16c      	bne.n	8005a4a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005974:	881a      	ldrh	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005980:	1c9a      	adds	r2, r3, #2
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005994:	e059      	b.n	8005a4a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d11b      	bne.n	80059dc <HAL_SPI_TransmitReceive+0x162>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d016      	beq.n	80059dc <HAL_SPI_TransmitReceive+0x162>
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d113      	bne.n	80059dc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b8:	881a      	ldrh	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c4:	1c9a      	adds	r2, r3, #2
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d119      	bne.n	8005a1e <HAL_SPI_TransmitReceive+0x1a4>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d014      	beq.n	8005a1e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fe:	b292      	uxth	r2, r2
 8005a00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a06:	1c9a      	adds	r2, r3, #2
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a1e:	f7fd fc85 	bl	800332c <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d80d      	bhi.n	8005a4a <HAL_SPI_TransmitReceive+0x1d0>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d009      	beq.n	8005a4a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e0bc      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1a0      	bne.n	8005996 <HAL_SPI_TransmitReceive+0x11c>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d19b      	bne.n	8005996 <HAL_SPI_TransmitReceive+0x11c>
 8005a5e:	e082      	b.n	8005b66 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_SPI_TransmitReceive+0x1f4>
 8005a68:	8afb      	ldrh	r3, [r7, #22]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d171      	bne.n	8005b52 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	7812      	ldrb	r2, [r2, #0]
 8005a7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a94:	e05d      	b.n	8005b52 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d11c      	bne.n	8005ade <HAL_SPI_TransmitReceive+0x264>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d017      	beq.n	8005ade <HAL_SPI_TransmitReceive+0x264>
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d114      	bne.n	8005ade <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	7812      	ldrb	r2, [r2, #0]
 8005ac0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d119      	bne.n	8005b20 <HAL_SPI_TransmitReceive+0x2a6>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d014      	beq.n	8005b20 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b20:	f7fd fc04 	bl	800332c <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d803      	bhi.n	8005b38 <HAL_SPI_TransmitReceive+0x2be>
 8005b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	d102      	bne.n	8005b3e <HAL_SPI_TransmitReceive+0x2c4>
 8005b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e038      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d19c      	bne.n	8005a96 <HAL_SPI_TransmitReceive+0x21c>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d197      	bne.n	8005a96 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b66:	6a3a      	ldr	r2, [r7, #32]
 8005b68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fa0c 	bl	8005f88 <SPI_EndRxTxTransaction>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d008      	beq.n	8005b88 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e01d      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b90:	2300      	movs	r3, #0
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	613b      	str	r3, [r7, #16]
 8005ba4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e000      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
  }
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3728      	adds	r7, #40	@ 0x28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	099b      	lsrs	r3, r3, #6
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10f      	bne.n	8005c10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	099b      	lsrs	r3, r3, #6
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d004      	beq.n	8005c10 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
    return;
 8005c0e:	e0be      	b.n	8005d8e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	085b      	lsrs	r3, r3, #1
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <HAL_SPI_IRQHandler+0x66>
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	09db      	lsrs	r3, r3, #7
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d004      	beq.n	8005c32 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	4798      	blx	r3
    return;
 8005c30:	e0ad      	b.n	8005d8e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d106      	bne.n	8005c4c <HAL_SPI_IRQHandler+0x80>
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	099b      	lsrs	r3, r3, #6
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 80a1 	beq.w	8005d8e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 809a 	beq.w	8005d8e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	099b      	lsrs	r3, r3, #6
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d023      	beq.n	8005cae <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d011      	beq.n	8005c96 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c76:	f043 0204 	orr.w	r2, r3, #4
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c7e:	2300      	movs	r3, #0
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	e00b      	b.n	8005cae <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c96:	2300      	movs	r3, #0
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	693b      	ldr	r3, [r7, #16]
        return;
 8005cac:	e06f      	b.n	8005d8e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d014      	beq.n	8005ce4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cbe:	f043 0201 	orr.w	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d04f      	beq.n	8005d8c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005cfa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d104      	bne.n	8005d18 <HAL_SPI_IRQHandler+0x14c>
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d034      	beq.n	8005d82 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0203 	bic.w	r2, r2, #3
 8005d26:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d011      	beq.n	8005d54 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d34:	4a17      	ldr	r2, [pc, #92]	@ (8005d94 <HAL_SPI_IRQHandler+0x1c8>)
 8005d36:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fd fc31 	bl	80035a4 <HAL_DMA_Abort_IT>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d016      	beq.n	8005d8a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d60:	4a0c      	ldr	r2, [pc, #48]	@ (8005d94 <HAL_SPI_IRQHandler+0x1c8>)
 8005d62:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fd fc1b 	bl	80035a4 <HAL_DMA_Abort_IT>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005d80:	e003      	b.n	8005d8a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f808 	bl	8005d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d88:	e000      	b.n	8005d8c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005d8a:	bf00      	nop
    return;
 8005d8c:	bf00      	nop
  }
}
 8005d8e:	3720      	adds	r7, #32
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	08005dab 	.word	0x08005dab

08005d98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bc80      	pop	{r7}
 8005da8:	4770      	bx	lr

08005daa <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff ffe7 	bl	8005d98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dca:	bf00      	nop
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	4613      	mov	r3, r2
 8005de2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005de4:	f7fd faa2 	bl	800332c <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dec:	1a9b      	subs	r3, r3, r2
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	4413      	add	r3, r2
 8005df2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005df4:	f7fd fa9a 	bl	800332c <HAL_GetTick>
 8005df8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dfa:	4b39      	ldr	r3, [pc, #228]	@ (8005ee0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	015b      	lsls	r3, r3, #5
 8005e00:	0d1b      	lsrs	r3, r3, #20
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	fb02 f303 	mul.w	r3, r2, r3
 8005e08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e0a:	e054      	b.n	8005eb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e12:	d050      	beq.n	8005eb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e14:	f7fd fa8a 	bl	800332c <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d902      	bls.n	8005e2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d13d      	bne.n	8005ea6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e42:	d111      	bne.n	8005e68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e4c:	d004      	beq.n	8005e58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e56:	d107      	bne.n	8005e68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e70:	d10f      	bne.n	8005e92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e017      	b.n	8005ed6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	bf0c      	ite	eq
 8005ec6:	2301      	moveq	r3, #1
 8005ec8:	2300      	movne	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d19b      	bne.n	8005e0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3720      	adds	r7, #32
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000000 	.word	0x20000000

08005ee4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ef8:	d111      	bne.n	8005f1e <SPI_EndRxTransaction+0x3a>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f02:	d004      	beq.n	8005f0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f0c:	d107      	bne.n	8005f1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f1c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f26:	d117      	bne.n	8005f58 <SPI_EndRxTransaction+0x74>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f30:	d112      	bne.n	8005f58 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff ff49 	bl	8005dd4 <SPI_WaitFlagStateUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01a      	beq.n	8005f7e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4c:	f043 0220 	orr.w	r2, r3, #32
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e013      	b.n	8005f80 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2180      	movs	r1, #128	@ 0x80
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f7ff ff36 	bl	8005dd4 <SPI_WaitFlagStateUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d007      	beq.n	8005f7e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f72:	f043 0220 	orr.w	r2, r3, #32
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e000      	b.n	8005f80 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	2102      	movs	r1, #2
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f7ff ff18 	bl	8005dd4 <SPI_WaitFlagStateUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fae:	f043 0220 	orr.w	r2, r3, #32
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e013      	b.n	8005fe2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2180      	movs	r1, #128	@ 0x80
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f7ff ff05 	bl	8005dd4 <SPI_WaitFlagStateUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd4:	f043 0220 	orr.w	r2, r3, #32
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e000      	b.n	8005fe2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e042      	b.n	8006082 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	d106      	bne.n	8006016 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7fc ff4f 	bl	8002eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2224      	movs	r2, #36	@ 0x24
 800601a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800602c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f9d0 	bl	80063d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006042:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695a      	ldr	r2, [r3, #20]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006052:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006062:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b08a      	sub	sp, #40	@ 0x28
 800608e:	af02      	add	r7, sp, #8
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	603b      	str	r3, [r7, #0]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d175      	bne.n	8006196 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <HAL_UART_Transmit+0x2c>
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e06e      	b.n	8006198 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2221      	movs	r2, #33	@ 0x21
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060c8:	f7fd f930 	bl	800332c <HAL_GetTick>
 80060cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	88fa      	ldrh	r2, [r7, #6]
 80060d2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	88fa      	ldrh	r2, [r7, #6]
 80060d8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060e2:	d108      	bne.n	80060f6 <HAL_UART_Transmit+0x6c>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d104      	bne.n	80060f6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	61bb      	str	r3, [r7, #24]
 80060f4:	e003      	b.n	80060fe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060fe:	e02e      	b.n	800615e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2200      	movs	r2, #0
 8006108:	2180      	movs	r1, #128	@ 0x80
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f86d 	bl	80061ea <UART_WaitOnFlagUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e03a      	b.n	8006198 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006136:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	3302      	adds	r3, #2
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	e007      	b.n	8006150 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	781a      	ldrb	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	3301      	adds	r3, #1
 800614e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1cb      	bne.n	8006100 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2200      	movs	r2, #0
 8006170:	2140      	movs	r1, #64	@ 0x40
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f839 	bl	80061ea <UART_WaitOnFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e006      	b.n	8006198 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2220      	movs	r2, #32
 800618e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	e000      	b.n	8006198 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006196:	2302      	movs	r3, #2
  }
}
 8006198:	4618      	mov	r0, r3
 800619a:	3720      	adds	r7, #32
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d112      	bne.n	80061e0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <HAL_UART_Receive_IT+0x26>
 80061c0:	88fb      	ldrh	r3, [r7, #6]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e00b      	b.n	80061e2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	461a      	mov	r2, r3
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f860 	bl	800629c <UART_Start_Receive_IT>
 80061dc:	4603      	mov	r3, r0
 80061de:	e000      	b.n	80061e2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80061e0:	2302      	movs	r3, #2
  }
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b086      	sub	sp, #24
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	603b      	str	r3, [r7, #0]
 80061f6:	4613      	mov	r3, r2
 80061f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061fa:	e03b      	b.n	8006274 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d037      	beq.n	8006274 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006204:	f7fd f892 	bl	800332c <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	6a3a      	ldr	r2, [r7, #32]
 8006210:	429a      	cmp	r2, r3
 8006212:	d302      	bcc.n	800621a <UART_WaitOnFlagUntilTimeout+0x30>
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e03a      	b.n	8006294 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b00      	cmp	r3, #0
 800622a:	d023      	beq.n	8006274 <UART_WaitOnFlagUntilTimeout+0x8a>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b80      	cmp	r3, #128	@ 0x80
 8006230:	d020      	beq.n	8006274 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b40      	cmp	r3, #64	@ 0x40
 8006236:	d01d      	beq.n	8006274 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0308 	and.w	r3, r3, #8
 8006242:	2b08      	cmp	r3, #8
 8006244:	d116      	bne.n	8006274 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f856 	bl	800630e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2208      	movs	r2, #8
 8006266:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e00f      	b.n	8006294 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4013      	ands	r3, r2
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	429a      	cmp	r2, r3
 8006282:	bf0c      	ite	eq
 8006284:	2301      	moveq	r3, #1
 8006286:	2300      	movne	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	429a      	cmp	r2, r3
 8006290:	d0b4      	beq.n	80061fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	4613      	mov	r3, r2
 80062a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	88fa      	ldrh	r2, [r7, #6]
 80062b4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	88fa      	ldrh	r2, [r7, #6]
 80062ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2222      	movs	r2, #34	@ 0x22
 80062c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d007      	beq.n	80062e2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	695a      	ldr	r2, [r3, #20]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0201 	orr.w	r2, r2, #1
 80062f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0220 	orr.w	r2, r2, #32
 8006300:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr

0800630e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800630e:	b480      	push	{r7}
 8006310:	b095      	sub	sp, #84	@ 0x54
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	330c      	adds	r3, #12
 800631c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006328:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800632c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	330c      	adds	r3, #12
 8006334:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006336:	643a      	str	r2, [r7, #64]	@ 0x40
 8006338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800633c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e5      	bne.n	8006316 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3314      	adds	r3, #20
 8006350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	61fb      	str	r3, [r7, #28]
   return(result);
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	f023 0301 	bic.w	r3, r3, #1
 8006360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3314      	adds	r3, #20
 8006368:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800636a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800636c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006370:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e5      	bne.n	800634a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006382:	2b01      	cmp	r3, #1
 8006384:	d119      	bne.n	80063ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	330c      	adds	r3, #12
 800638c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	60bb      	str	r3, [r7, #8]
   return(result);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f023 0310 	bic.w	r3, r3, #16
 800639c:	647b      	str	r3, [r7, #68]	@ 0x44
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	330c      	adds	r3, #12
 80063a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063a6:	61ba      	str	r2, [r7, #24]
 80063a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	6979      	ldr	r1, [r7, #20]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	613b      	str	r3, [r7, #16]
   return(result);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e5      	bne.n	8006386 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80063c8:	bf00      	nop
 80063ca:	3754      	adds	r7, #84	@ 0x54
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr
	...

080063d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800640e:	f023 030c 	bic.w	r3, r3, #12
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6812      	ldr	r2, [r2, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	430b      	orrs	r3, r1
 800641a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a2c      	ldr	r2, [pc, #176]	@ (80064e8 <UART_SetConfig+0x114>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d103      	bne.n	8006444 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800643c:	f7fe ff0a 	bl	8005254 <HAL_RCC_GetPCLK2Freq>
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	e002      	b.n	800644a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006444:	f7fe fef2 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 8006448:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	009a      	lsls	r2, r3, #2
 8006454:	441a      	add	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006460:	4a22      	ldr	r2, [pc, #136]	@ (80064ec <UART_SetConfig+0x118>)
 8006462:	fba2 2303 	umull	r2, r3, r2, r3
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	0119      	lsls	r1, r3, #4
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009a      	lsls	r2, r3, #2
 8006474:	441a      	add	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006480:	4b1a      	ldr	r3, [pc, #104]	@ (80064ec <UART_SetConfig+0x118>)
 8006482:	fba3 0302 	umull	r0, r3, r3, r2
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	2064      	movs	r0, #100	@ 0x64
 800648a:	fb00 f303 	mul.w	r3, r0, r3
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	3332      	adds	r3, #50	@ 0x32
 8006494:	4a15      	ldr	r2, [pc, #84]	@ (80064ec <UART_SetConfig+0x118>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064a0:	4419      	add	r1, r3
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	009a      	lsls	r2, r3, #2
 80064ac:	441a      	add	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80064b8:	4b0c      	ldr	r3, [pc, #48]	@ (80064ec <UART_SetConfig+0x118>)
 80064ba:	fba3 0302 	umull	r0, r3, r3, r2
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	2064      	movs	r0, #100	@ 0x64
 80064c2:	fb00 f303 	mul.w	r3, r0, r3
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	3332      	adds	r3, #50	@ 0x32
 80064cc:	4a07      	ldr	r2, [pc, #28]	@ (80064ec <UART_SetConfig+0x118>)
 80064ce:	fba2 2303 	umull	r2, r3, r2, r3
 80064d2:	095b      	lsrs	r3, r3, #5
 80064d4:	f003 020f 	and.w	r2, r3, #15
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	440a      	add	r2, r1
 80064de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80064e0:	bf00      	nop
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	40013800 	.word	0x40013800
 80064ec:	51eb851f 	.word	0x51eb851f

080064f0 <__cvt>:
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f6:	461d      	mov	r5, r3
 80064f8:	bfbb      	ittet	lt
 80064fa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80064fe:	461d      	movlt	r5, r3
 8006500:	2300      	movge	r3, #0
 8006502:	232d      	movlt	r3, #45	@ 0x2d
 8006504:	b088      	sub	sp, #32
 8006506:	4614      	mov	r4, r2
 8006508:	bfb8      	it	lt
 800650a:	4614      	movlt	r4, r2
 800650c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800650e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006510:	7013      	strb	r3, [r2, #0]
 8006512:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006514:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006518:	f023 0820 	bic.w	r8, r3, #32
 800651c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006520:	d005      	beq.n	800652e <__cvt+0x3e>
 8006522:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006526:	d100      	bne.n	800652a <__cvt+0x3a>
 8006528:	3601      	adds	r6, #1
 800652a:	2302      	movs	r3, #2
 800652c:	e000      	b.n	8006530 <__cvt+0x40>
 800652e:	2303      	movs	r3, #3
 8006530:	aa07      	add	r2, sp, #28
 8006532:	9204      	str	r2, [sp, #16]
 8006534:	aa06      	add	r2, sp, #24
 8006536:	e9cd a202 	strd	sl, r2, [sp, #8]
 800653a:	e9cd 3600 	strd	r3, r6, [sp]
 800653e:	4622      	mov	r2, r4
 8006540:	462b      	mov	r3, r5
 8006542:	f000 fe7d 	bl	8007240 <_dtoa_r>
 8006546:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800654a:	4607      	mov	r7, r0
 800654c:	d119      	bne.n	8006582 <__cvt+0x92>
 800654e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006550:	07db      	lsls	r3, r3, #31
 8006552:	d50e      	bpl.n	8006572 <__cvt+0x82>
 8006554:	eb00 0906 	add.w	r9, r0, r6
 8006558:	2200      	movs	r2, #0
 800655a:	2300      	movs	r3, #0
 800655c:	4620      	mov	r0, r4
 800655e:	4629      	mov	r1, r5
 8006560:	f7fa fa22 	bl	80009a8 <__aeabi_dcmpeq>
 8006564:	b108      	cbz	r0, 800656a <__cvt+0x7a>
 8006566:	f8cd 901c 	str.w	r9, [sp, #28]
 800656a:	2230      	movs	r2, #48	@ 0x30
 800656c:	9b07      	ldr	r3, [sp, #28]
 800656e:	454b      	cmp	r3, r9
 8006570:	d31e      	bcc.n	80065b0 <__cvt+0xc0>
 8006572:	4638      	mov	r0, r7
 8006574:	9b07      	ldr	r3, [sp, #28]
 8006576:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006578:	1bdb      	subs	r3, r3, r7
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	b008      	add	sp, #32
 800657e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006582:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006586:	eb00 0906 	add.w	r9, r0, r6
 800658a:	d1e5      	bne.n	8006558 <__cvt+0x68>
 800658c:	7803      	ldrb	r3, [r0, #0]
 800658e:	2b30      	cmp	r3, #48	@ 0x30
 8006590:	d10a      	bne.n	80065a8 <__cvt+0xb8>
 8006592:	2200      	movs	r2, #0
 8006594:	2300      	movs	r3, #0
 8006596:	4620      	mov	r0, r4
 8006598:	4629      	mov	r1, r5
 800659a:	f7fa fa05 	bl	80009a8 <__aeabi_dcmpeq>
 800659e:	b918      	cbnz	r0, 80065a8 <__cvt+0xb8>
 80065a0:	f1c6 0601 	rsb	r6, r6, #1
 80065a4:	f8ca 6000 	str.w	r6, [sl]
 80065a8:	f8da 3000 	ldr.w	r3, [sl]
 80065ac:	4499      	add	r9, r3
 80065ae:	e7d3      	b.n	8006558 <__cvt+0x68>
 80065b0:	1c59      	adds	r1, r3, #1
 80065b2:	9107      	str	r1, [sp, #28]
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	e7d9      	b.n	800656c <__cvt+0x7c>

080065b8 <__exponent>:
 80065b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ba:	2900      	cmp	r1, #0
 80065bc:	bfb6      	itet	lt
 80065be:	232d      	movlt	r3, #45	@ 0x2d
 80065c0:	232b      	movge	r3, #43	@ 0x2b
 80065c2:	4249      	neglt	r1, r1
 80065c4:	2909      	cmp	r1, #9
 80065c6:	7002      	strb	r2, [r0, #0]
 80065c8:	7043      	strb	r3, [r0, #1]
 80065ca:	dd29      	ble.n	8006620 <__exponent+0x68>
 80065cc:	f10d 0307 	add.w	r3, sp, #7
 80065d0:	461d      	mov	r5, r3
 80065d2:	270a      	movs	r7, #10
 80065d4:	fbb1 f6f7 	udiv	r6, r1, r7
 80065d8:	461a      	mov	r2, r3
 80065da:	fb07 1416 	mls	r4, r7, r6, r1
 80065de:	3430      	adds	r4, #48	@ 0x30
 80065e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80065e4:	460c      	mov	r4, r1
 80065e6:	2c63      	cmp	r4, #99	@ 0x63
 80065e8:	4631      	mov	r1, r6
 80065ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80065ee:	dcf1      	bgt.n	80065d4 <__exponent+0x1c>
 80065f0:	3130      	adds	r1, #48	@ 0x30
 80065f2:	1e94      	subs	r4, r2, #2
 80065f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065f8:	4623      	mov	r3, r4
 80065fa:	1c41      	adds	r1, r0, #1
 80065fc:	42ab      	cmp	r3, r5
 80065fe:	d30a      	bcc.n	8006616 <__exponent+0x5e>
 8006600:	f10d 0309 	add.w	r3, sp, #9
 8006604:	1a9b      	subs	r3, r3, r2
 8006606:	42ac      	cmp	r4, r5
 8006608:	bf88      	it	hi
 800660a:	2300      	movhi	r3, #0
 800660c:	3302      	adds	r3, #2
 800660e:	4403      	add	r3, r0
 8006610:	1a18      	subs	r0, r3, r0
 8006612:	b003      	add	sp, #12
 8006614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006616:	f813 6b01 	ldrb.w	r6, [r3], #1
 800661a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800661e:	e7ed      	b.n	80065fc <__exponent+0x44>
 8006620:	2330      	movs	r3, #48	@ 0x30
 8006622:	3130      	adds	r1, #48	@ 0x30
 8006624:	7083      	strb	r3, [r0, #2]
 8006626:	70c1      	strb	r1, [r0, #3]
 8006628:	1d03      	adds	r3, r0, #4
 800662a:	e7f1      	b.n	8006610 <__exponent+0x58>

0800662c <_printf_float>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	b091      	sub	sp, #68	@ 0x44
 8006632:	460c      	mov	r4, r1
 8006634:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006638:	4616      	mov	r6, r2
 800663a:	461f      	mov	r7, r3
 800663c:	4605      	mov	r5, r0
 800663e:	f000 fce1 	bl	8007004 <_localeconv_r>
 8006642:	6803      	ldr	r3, [r0, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	9308      	str	r3, [sp, #32]
 8006648:	f7f9 fd82 	bl	8000150 <strlen>
 800664c:	2300      	movs	r3, #0
 800664e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006650:	f8d8 3000 	ldr.w	r3, [r8]
 8006654:	9009      	str	r0, [sp, #36]	@ 0x24
 8006656:	3307      	adds	r3, #7
 8006658:	f023 0307 	bic.w	r3, r3, #7
 800665c:	f103 0208 	add.w	r2, r3, #8
 8006660:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006664:	f8d4 b000 	ldr.w	fp, [r4]
 8006668:	f8c8 2000 	str.w	r2, [r8]
 800666c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006670:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006674:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006676:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800667a:	f04f 32ff 	mov.w	r2, #4294967295
 800667e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006682:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006686:	4b9c      	ldr	r3, [pc, #624]	@ (80068f8 <_printf_float+0x2cc>)
 8006688:	f7fa f9c0 	bl	8000a0c <__aeabi_dcmpun>
 800668c:	bb70      	cbnz	r0, 80066ec <_printf_float+0xc0>
 800668e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006692:	f04f 32ff 	mov.w	r2, #4294967295
 8006696:	4b98      	ldr	r3, [pc, #608]	@ (80068f8 <_printf_float+0x2cc>)
 8006698:	f7fa f99a 	bl	80009d0 <__aeabi_dcmple>
 800669c:	bb30      	cbnz	r0, 80066ec <_printf_float+0xc0>
 800669e:	2200      	movs	r2, #0
 80066a0:	2300      	movs	r3, #0
 80066a2:	4640      	mov	r0, r8
 80066a4:	4649      	mov	r1, r9
 80066a6:	f7fa f989 	bl	80009bc <__aeabi_dcmplt>
 80066aa:	b110      	cbz	r0, 80066b2 <_printf_float+0x86>
 80066ac:	232d      	movs	r3, #45	@ 0x2d
 80066ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066b2:	4a92      	ldr	r2, [pc, #584]	@ (80068fc <_printf_float+0x2d0>)
 80066b4:	4b92      	ldr	r3, [pc, #584]	@ (8006900 <_printf_float+0x2d4>)
 80066b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80066ba:	bf8c      	ite	hi
 80066bc:	4690      	movhi	r8, r2
 80066be:	4698      	movls	r8, r3
 80066c0:	2303      	movs	r3, #3
 80066c2:	f04f 0900 	mov.w	r9, #0
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	f02b 0304 	bic.w	r3, fp, #4
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	4633      	mov	r3, r6
 80066d0:	4621      	mov	r1, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	9700      	str	r7, [sp, #0]
 80066d6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80066d8:	f000 f9d4 	bl	8006a84 <_printf_common>
 80066dc:	3001      	adds	r0, #1
 80066de:	f040 8090 	bne.w	8006802 <_printf_float+0x1d6>
 80066e2:	f04f 30ff 	mov.w	r0, #4294967295
 80066e6:	b011      	add	sp, #68	@ 0x44
 80066e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	4640      	mov	r0, r8
 80066f2:	4649      	mov	r1, r9
 80066f4:	f7fa f98a 	bl	8000a0c <__aeabi_dcmpun>
 80066f8:	b148      	cbz	r0, 800670e <_printf_float+0xe2>
 80066fa:	464b      	mov	r3, r9
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bfb8      	it	lt
 8006700:	232d      	movlt	r3, #45	@ 0x2d
 8006702:	4a80      	ldr	r2, [pc, #512]	@ (8006904 <_printf_float+0x2d8>)
 8006704:	bfb8      	it	lt
 8006706:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800670a:	4b7f      	ldr	r3, [pc, #508]	@ (8006908 <_printf_float+0x2dc>)
 800670c:	e7d3      	b.n	80066b6 <_printf_float+0x8a>
 800670e:	6863      	ldr	r3, [r4, #4]
 8006710:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	d13f      	bne.n	8006798 <_printf_float+0x16c>
 8006718:	2306      	movs	r3, #6
 800671a:	6063      	str	r3, [r4, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	9206      	str	r2, [sp, #24]
 8006726:	aa0e      	add	r2, sp, #56	@ 0x38
 8006728:	e9cd a204 	strd	sl, r2, [sp, #16]
 800672c:	aa0d      	add	r2, sp, #52	@ 0x34
 800672e:	9203      	str	r2, [sp, #12]
 8006730:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006734:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006738:	6863      	ldr	r3, [r4, #4]
 800673a:	4642      	mov	r2, r8
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	4628      	mov	r0, r5
 8006740:	464b      	mov	r3, r9
 8006742:	910a      	str	r1, [sp, #40]	@ 0x28
 8006744:	f7ff fed4 	bl	80064f0 <__cvt>
 8006748:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800674a:	4680      	mov	r8, r0
 800674c:	2947      	cmp	r1, #71	@ 0x47
 800674e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006750:	d128      	bne.n	80067a4 <_printf_float+0x178>
 8006752:	1cc8      	adds	r0, r1, #3
 8006754:	db02      	blt.n	800675c <_printf_float+0x130>
 8006756:	6863      	ldr	r3, [r4, #4]
 8006758:	4299      	cmp	r1, r3
 800675a:	dd40      	ble.n	80067de <_printf_float+0x1b2>
 800675c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006760:	fa5f fa8a 	uxtb.w	sl, sl
 8006764:	4652      	mov	r2, sl
 8006766:	3901      	subs	r1, #1
 8006768:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800676c:	910d      	str	r1, [sp, #52]	@ 0x34
 800676e:	f7ff ff23 	bl	80065b8 <__exponent>
 8006772:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006774:	4681      	mov	r9, r0
 8006776:	1813      	adds	r3, r2, r0
 8006778:	2a01      	cmp	r2, #1
 800677a:	6123      	str	r3, [r4, #16]
 800677c:	dc02      	bgt.n	8006784 <_printf_float+0x158>
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	07d2      	lsls	r2, r2, #31
 8006782:	d501      	bpl.n	8006788 <_printf_float+0x15c>
 8006784:	3301      	adds	r3, #1
 8006786:	6123      	str	r3, [r4, #16]
 8006788:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800678c:	2b00      	cmp	r3, #0
 800678e:	d09e      	beq.n	80066ce <_printf_float+0xa2>
 8006790:	232d      	movs	r3, #45	@ 0x2d
 8006792:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006796:	e79a      	b.n	80066ce <_printf_float+0xa2>
 8006798:	2947      	cmp	r1, #71	@ 0x47
 800679a:	d1bf      	bne.n	800671c <_printf_float+0xf0>
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1bd      	bne.n	800671c <_printf_float+0xf0>
 80067a0:	2301      	movs	r3, #1
 80067a2:	e7ba      	b.n	800671a <_printf_float+0xee>
 80067a4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067a8:	d9dc      	bls.n	8006764 <_printf_float+0x138>
 80067aa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80067ae:	d118      	bne.n	80067e2 <_printf_float+0x1b6>
 80067b0:	2900      	cmp	r1, #0
 80067b2:	6863      	ldr	r3, [r4, #4]
 80067b4:	dd0b      	ble.n	80067ce <_printf_float+0x1a2>
 80067b6:	6121      	str	r1, [r4, #16]
 80067b8:	b913      	cbnz	r3, 80067c0 <_printf_float+0x194>
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	07d0      	lsls	r0, r2, #31
 80067be:	d502      	bpl.n	80067c6 <_printf_float+0x19a>
 80067c0:	3301      	adds	r3, #1
 80067c2:	440b      	add	r3, r1
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	f04f 0900 	mov.w	r9, #0
 80067ca:	65a1      	str	r1, [r4, #88]	@ 0x58
 80067cc:	e7dc      	b.n	8006788 <_printf_float+0x15c>
 80067ce:	b913      	cbnz	r3, 80067d6 <_printf_float+0x1aa>
 80067d0:	6822      	ldr	r2, [r4, #0]
 80067d2:	07d2      	lsls	r2, r2, #31
 80067d4:	d501      	bpl.n	80067da <_printf_float+0x1ae>
 80067d6:	3302      	adds	r3, #2
 80067d8:	e7f4      	b.n	80067c4 <_printf_float+0x198>
 80067da:	2301      	movs	r3, #1
 80067dc:	e7f2      	b.n	80067c4 <_printf_float+0x198>
 80067de:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80067e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067e4:	4299      	cmp	r1, r3
 80067e6:	db05      	blt.n	80067f4 <_printf_float+0x1c8>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	6121      	str	r1, [r4, #16]
 80067ec:	07d8      	lsls	r0, r3, #31
 80067ee:	d5ea      	bpl.n	80067c6 <_printf_float+0x19a>
 80067f0:	1c4b      	adds	r3, r1, #1
 80067f2:	e7e7      	b.n	80067c4 <_printf_float+0x198>
 80067f4:	2900      	cmp	r1, #0
 80067f6:	bfcc      	ite	gt
 80067f8:	2201      	movgt	r2, #1
 80067fa:	f1c1 0202 	rsble	r2, r1, #2
 80067fe:	4413      	add	r3, r2
 8006800:	e7e0      	b.n	80067c4 <_printf_float+0x198>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	055a      	lsls	r2, r3, #21
 8006806:	d407      	bmi.n	8006818 <_printf_float+0x1ec>
 8006808:	6923      	ldr	r3, [r4, #16]
 800680a:	4642      	mov	r2, r8
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	47b8      	blx	r7
 8006812:	3001      	adds	r0, #1
 8006814:	d12b      	bne.n	800686e <_printf_float+0x242>
 8006816:	e764      	b.n	80066e2 <_printf_float+0xb6>
 8006818:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800681c:	f240 80dc 	bls.w	80069d8 <_printf_float+0x3ac>
 8006820:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006824:	2200      	movs	r2, #0
 8006826:	2300      	movs	r3, #0
 8006828:	f7fa f8be 	bl	80009a8 <__aeabi_dcmpeq>
 800682c:	2800      	cmp	r0, #0
 800682e:	d033      	beq.n	8006898 <_printf_float+0x26c>
 8006830:	2301      	movs	r3, #1
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	4a35      	ldr	r2, [pc, #212]	@ (800690c <_printf_float+0x2e0>)
 8006838:	47b8      	blx	r7
 800683a:	3001      	adds	r0, #1
 800683c:	f43f af51 	beq.w	80066e2 <_printf_float+0xb6>
 8006840:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006844:	4543      	cmp	r3, r8
 8006846:	db02      	blt.n	800684e <_printf_float+0x222>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	07d8      	lsls	r0, r3, #31
 800684c:	d50f      	bpl.n	800686e <_printf_float+0x242>
 800684e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f af42 	beq.w	80066e2 <_printf_float+0xb6>
 800685e:	f04f 0900 	mov.w	r9, #0
 8006862:	f108 38ff 	add.w	r8, r8, #4294967295
 8006866:	f104 0a1a 	add.w	sl, r4, #26
 800686a:	45c8      	cmp	r8, r9
 800686c:	dc09      	bgt.n	8006882 <_printf_float+0x256>
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	079b      	lsls	r3, r3, #30
 8006872:	f100 8102 	bmi.w	8006a7a <_printf_float+0x44e>
 8006876:	68e0      	ldr	r0, [r4, #12]
 8006878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800687a:	4298      	cmp	r0, r3
 800687c:	bfb8      	it	lt
 800687e:	4618      	movlt	r0, r3
 8006880:	e731      	b.n	80066e6 <_printf_float+0xba>
 8006882:	2301      	movs	r3, #1
 8006884:	4652      	mov	r2, sl
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	f43f af28 	beq.w	80066e2 <_printf_float+0xb6>
 8006892:	f109 0901 	add.w	r9, r9, #1
 8006896:	e7e8      	b.n	800686a <_printf_float+0x23e>
 8006898:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800689a:	2b00      	cmp	r3, #0
 800689c:	dc38      	bgt.n	8006910 <_printf_float+0x2e4>
 800689e:	2301      	movs	r3, #1
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	4a19      	ldr	r2, [pc, #100]	@ (800690c <_printf_float+0x2e0>)
 80068a6:	47b8      	blx	r7
 80068a8:	3001      	adds	r0, #1
 80068aa:	f43f af1a 	beq.w	80066e2 <_printf_float+0xb6>
 80068ae:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80068b2:	ea59 0303 	orrs.w	r3, r9, r3
 80068b6:	d102      	bne.n	80068be <_printf_float+0x292>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	07d9      	lsls	r1, r3, #31
 80068bc:	d5d7      	bpl.n	800686e <_printf_float+0x242>
 80068be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	f43f af0a 	beq.w	80066e2 <_printf_float+0xb6>
 80068ce:	f04f 0a00 	mov.w	sl, #0
 80068d2:	f104 0b1a 	add.w	fp, r4, #26
 80068d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068d8:	425b      	negs	r3, r3
 80068da:	4553      	cmp	r3, sl
 80068dc:	dc01      	bgt.n	80068e2 <_printf_float+0x2b6>
 80068de:	464b      	mov	r3, r9
 80068e0:	e793      	b.n	800680a <_printf_float+0x1de>
 80068e2:	2301      	movs	r3, #1
 80068e4:	465a      	mov	r2, fp
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	f43f aef8 	beq.w	80066e2 <_printf_float+0xb6>
 80068f2:	f10a 0a01 	add.w	sl, sl, #1
 80068f6:	e7ee      	b.n	80068d6 <_printf_float+0x2aa>
 80068f8:	7fefffff 	.word	0x7fefffff
 80068fc:	0800a542 	.word	0x0800a542
 8006900:	0800a53e 	.word	0x0800a53e
 8006904:	0800a54a 	.word	0x0800a54a
 8006908:	0800a546 	.word	0x0800a546
 800690c:	0800a54e 	.word	0x0800a54e
 8006910:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006912:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006916:	4553      	cmp	r3, sl
 8006918:	bfa8      	it	ge
 800691a:	4653      	movge	r3, sl
 800691c:	2b00      	cmp	r3, #0
 800691e:	4699      	mov	r9, r3
 8006920:	dc36      	bgt.n	8006990 <_printf_float+0x364>
 8006922:	f04f 0b00 	mov.w	fp, #0
 8006926:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800692a:	f104 021a 	add.w	r2, r4, #26
 800692e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006930:	930a      	str	r3, [sp, #40]	@ 0x28
 8006932:	eba3 0309 	sub.w	r3, r3, r9
 8006936:	455b      	cmp	r3, fp
 8006938:	dc31      	bgt.n	800699e <_printf_float+0x372>
 800693a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800693c:	459a      	cmp	sl, r3
 800693e:	dc3a      	bgt.n	80069b6 <_printf_float+0x38a>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	07da      	lsls	r2, r3, #31
 8006944:	d437      	bmi.n	80069b6 <_printf_float+0x38a>
 8006946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006948:	ebaa 0903 	sub.w	r9, sl, r3
 800694c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800694e:	ebaa 0303 	sub.w	r3, sl, r3
 8006952:	4599      	cmp	r9, r3
 8006954:	bfa8      	it	ge
 8006956:	4699      	movge	r9, r3
 8006958:	f1b9 0f00 	cmp.w	r9, #0
 800695c:	dc33      	bgt.n	80069c6 <_printf_float+0x39a>
 800695e:	f04f 0800 	mov.w	r8, #0
 8006962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006966:	f104 0b1a 	add.w	fp, r4, #26
 800696a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800696c:	ebaa 0303 	sub.w	r3, sl, r3
 8006970:	eba3 0309 	sub.w	r3, r3, r9
 8006974:	4543      	cmp	r3, r8
 8006976:	f77f af7a 	ble.w	800686e <_printf_float+0x242>
 800697a:	2301      	movs	r3, #1
 800697c:	465a      	mov	r2, fp
 800697e:	4631      	mov	r1, r6
 8006980:	4628      	mov	r0, r5
 8006982:	47b8      	blx	r7
 8006984:	3001      	adds	r0, #1
 8006986:	f43f aeac 	beq.w	80066e2 <_printf_float+0xb6>
 800698a:	f108 0801 	add.w	r8, r8, #1
 800698e:	e7ec      	b.n	800696a <_printf_float+0x33e>
 8006990:	4642      	mov	r2, r8
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	d1c2      	bne.n	8006922 <_printf_float+0x2f6>
 800699c:	e6a1      	b.n	80066e2 <_printf_float+0xb6>
 800699e:	2301      	movs	r3, #1
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	f43f ae9a 	beq.w	80066e2 <_printf_float+0xb6>
 80069ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069b0:	f10b 0b01 	add.w	fp, fp, #1
 80069b4:	e7bb      	b.n	800692e <_printf_float+0x302>
 80069b6:	4631      	mov	r1, r6
 80069b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069bc:	4628      	mov	r0, r5
 80069be:	47b8      	blx	r7
 80069c0:	3001      	adds	r0, #1
 80069c2:	d1c0      	bne.n	8006946 <_printf_float+0x31a>
 80069c4:	e68d      	b.n	80066e2 <_printf_float+0xb6>
 80069c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069c8:	464b      	mov	r3, r9
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	4442      	add	r2, r8
 80069d0:	47b8      	blx	r7
 80069d2:	3001      	adds	r0, #1
 80069d4:	d1c3      	bne.n	800695e <_printf_float+0x332>
 80069d6:	e684      	b.n	80066e2 <_printf_float+0xb6>
 80069d8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80069dc:	f1ba 0f01 	cmp.w	sl, #1
 80069e0:	dc01      	bgt.n	80069e6 <_printf_float+0x3ba>
 80069e2:	07db      	lsls	r3, r3, #31
 80069e4:	d536      	bpl.n	8006a54 <_printf_float+0x428>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4642      	mov	r2, r8
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	f43f ae76 	beq.w	80066e2 <_printf_float+0xb6>
 80069f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069fa:	4631      	mov	r1, r6
 80069fc:	4628      	mov	r0, r5
 80069fe:	47b8      	blx	r7
 8006a00:	3001      	adds	r0, #1
 8006a02:	f43f ae6e 	beq.w	80066e2 <_printf_float+0xb6>
 8006a06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a12:	f7f9 ffc9 	bl	80009a8 <__aeabi_dcmpeq>
 8006a16:	b9c0      	cbnz	r0, 8006a4a <_printf_float+0x41e>
 8006a18:	4653      	mov	r3, sl
 8006a1a:	f108 0201 	add.w	r2, r8, #1
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4628      	mov	r0, r5
 8006a22:	47b8      	blx	r7
 8006a24:	3001      	adds	r0, #1
 8006a26:	d10c      	bne.n	8006a42 <_printf_float+0x416>
 8006a28:	e65b      	b.n	80066e2 <_printf_float+0xb6>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	465a      	mov	r2, fp
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4628      	mov	r0, r5
 8006a32:	47b8      	blx	r7
 8006a34:	3001      	adds	r0, #1
 8006a36:	f43f ae54 	beq.w	80066e2 <_printf_float+0xb6>
 8006a3a:	f108 0801 	add.w	r8, r8, #1
 8006a3e:	45d0      	cmp	r8, sl
 8006a40:	dbf3      	blt.n	8006a2a <_printf_float+0x3fe>
 8006a42:	464b      	mov	r3, r9
 8006a44:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a48:	e6e0      	b.n	800680c <_printf_float+0x1e0>
 8006a4a:	f04f 0800 	mov.w	r8, #0
 8006a4e:	f104 0b1a 	add.w	fp, r4, #26
 8006a52:	e7f4      	b.n	8006a3e <_printf_float+0x412>
 8006a54:	2301      	movs	r3, #1
 8006a56:	4642      	mov	r2, r8
 8006a58:	e7e1      	b.n	8006a1e <_printf_float+0x3f2>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	464a      	mov	r2, r9
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	f43f ae3c 	beq.w	80066e2 <_printf_float+0xb6>
 8006a6a:	f108 0801 	add.w	r8, r8, #1
 8006a6e:	68e3      	ldr	r3, [r4, #12]
 8006a70:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006a72:	1a5b      	subs	r3, r3, r1
 8006a74:	4543      	cmp	r3, r8
 8006a76:	dcf0      	bgt.n	8006a5a <_printf_float+0x42e>
 8006a78:	e6fd      	b.n	8006876 <_printf_float+0x24a>
 8006a7a:	f04f 0800 	mov.w	r8, #0
 8006a7e:	f104 0919 	add.w	r9, r4, #25
 8006a82:	e7f4      	b.n	8006a6e <_printf_float+0x442>

08006a84 <_printf_common>:
 8006a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a88:	4616      	mov	r6, r2
 8006a8a:	4698      	mov	r8, r3
 8006a8c:	688a      	ldr	r2, [r1, #8]
 8006a8e:	690b      	ldr	r3, [r1, #16]
 8006a90:	4607      	mov	r7, r0
 8006a92:	4293      	cmp	r3, r2
 8006a94:	bfb8      	it	lt
 8006a96:	4613      	movlt	r3, r2
 8006a98:	6033      	str	r3, [r6, #0]
 8006a9a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006aa4:	b10a      	cbz	r2, 8006aaa <_printf_common+0x26>
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	6033      	str	r3, [r6, #0]
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	0699      	lsls	r1, r3, #26
 8006aae:	bf42      	ittt	mi
 8006ab0:	6833      	ldrmi	r3, [r6, #0]
 8006ab2:	3302      	addmi	r3, #2
 8006ab4:	6033      	strmi	r3, [r6, #0]
 8006ab6:	6825      	ldr	r5, [r4, #0]
 8006ab8:	f015 0506 	ands.w	r5, r5, #6
 8006abc:	d106      	bne.n	8006acc <_printf_common+0x48>
 8006abe:	f104 0a19 	add.w	sl, r4, #25
 8006ac2:	68e3      	ldr	r3, [r4, #12]
 8006ac4:	6832      	ldr	r2, [r6, #0]
 8006ac6:	1a9b      	subs	r3, r3, r2
 8006ac8:	42ab      	cmp	r3, r5
 8006aca:	dc2b      	bgt.n	8006b24 <_printf_common+0xa0>
 8006acc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ad0:	6822      	ldr	r2, [r4, #0]
 8006ad2:	3b00      	subs	r3, #0
 8006ad4:	bf18      	it	ne
 8006ad6:	2301      	movne	r3, #1
 8006ad8:	0692      	lsls	r2, r2, #26
 8006ada:	d430      	bmi.n	8006b3e <_printf_common+0xba>
 8006adc:	4641      	mov	r1, r8
 8006ade:	4638      	mov	r0, r7
 8006ae0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ae4:	47c8      	blx	r9
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d023      	beq.n	8006b32 <_printf_common+0xae>
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	6922      	ldr	r2, [r4, #16]
 8006aee:	f003 0306 	and.w	r3, r3, #6
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	bf14      	ite	ne
 8006af6:	2500      	movne	r5, #0
 8006af8:	6833      	ldreq	r3, [r6, #0]
 8006afa:	f04f 0600 	mov.w	r6, #0
 8006afe:	bf08      	it	eq
 8006b00:	68e5      	ldreq	r5, [r4, #12]
 8006b02:	f104 041a 	add.w	r4, r4, #26
 8006b06:	bf08      	it	eq
 8006b08:	1aed      	subeq	r5, r5, r3
 8006b0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006b0e:	bf08      	it	eq
 8006b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b14:	4293      	cmp	r3, r2
 8006b16:	bfc4      	itt	gt
 8006b18:	1a9b      	subgt	r3, r3, r2
 8006b1a:	18ed      	addgt	r5, r5, r3
 8006b1c:	42b5      	cmp	r5, r6
 8006b1e:	d11a      	bne.n	8006b56 <_printf_common+0xd2>
 8006b20:	2000      	movs	r0, #0
 8006b22:	e008      	b.n	8006b36 <_printf_common+0xb2>
 8006b24:	2301      	movs	r3, #1
 8006b26:	4652      	mov	r2, sl
 8006b28:	4641      	mov	r1, r8
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	47c8      	blx	r9
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d103      	bne.n	8006b3a <_printf_common+0xb6>
 8006b32:	f04f 30ff 	mov.w	r0, #4294967295
 8006b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b3a:	3501      	adds	r5, #1
 8006b3c:	e7c1      	b.n	8006ac2 <_printf_common+0x3e>
 8006b3e:	2030      	movs	r0, #48	@ 0x30
 8006b40:	18e1      	adds	r1, r4, r3
 8006b42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b4c:	4422      	add	r2, r4
 8006b4e:	3302      	adds	r3, #2
 8006b50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b54:	e7c2      	b.n	8006adc <_printf_common+0x58>
 8006b56:	2301      	movs	r3, #1
 8006b58:	4622      	mov	r2, r4
 8006b5a:	4641      	mov	r1, r8
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	47c8      	blx	r9
 8006b60:	3001      	adds	r0, #1
 8006b62:	d0e6      	beq.n	8006b32 <_printf_common+0xae>
 8006b64:	3601      	adds	r6, #1
 8006b66:	e7d9      	b.n	8006b1c <_printf_common+0x98>

08006b68 <_printf_i>:
 8006b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	7e0f      	ldrb	r7, [r1, #24]
 8006b6e:	4691      	mov	r9, r2
 8006b70:	2f78      	cmp	r7, #120	@ 0x78
 8006b72:	4680      	mov	r8, r0
 8006b74:	460c      	mov	r4, r1
 8006b76:	469a      	mov	sl, r3
 8006b78:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b7e:	d807      	bhi.n	8006b90 <_printf_i+0x28>
 8006b80:	2f62      	cmp	r7, #98	@ 0x62
 8006b82:	d80a      	bhi.n	8006b9a <_printf_i+0x32>
 8006b84:	2f00      	cmp	r7, #0
 8006b86:	f000 80d1 	beq.w	8006d2c <_printf_i+0x1c4>
 8006b8a:	2f58      	cmp	r7, #88	@ 0x58
 8006b8c:	f000 80b8 	beq.w	8006d00 <_printf_i+0x198>
 8006b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b98:	e03a      	b.n	8006c10 <_printf_i+0xa8>
 8006b9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b9e:	2b15      	cmp	r3, #21
 8006ba0:	d8f6      	bhi.n	8006b90 <_printf_i+0x28>
 8006ba2:	a101      	add	r1, pc, #4	@ (adr r1, 8006ba8 <_printf_i+0x40>)
 8006ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006c15 	.word	0x08006c15
 8006bb0:	08006b91 	.word	0x08006b91
 8006bb4:	08006b91 	.word	0x08006b91
 8006bb8:	08006b91 	.word	0x08006b91
 8006bbc:	08006b91 	.word	0x08006b91
 8006bc0:	08006c15 	.word	0x08006c15
 8006bc4:	08006b91 	.word	0x08006b91
 8006bc8:	08006b91 	.word	0x08006b91
 8006bcc:	08006b91 	.word	0x08006b91
 8006bd0:	08006b91 	.word	0x08006b91
 8006bd4:	08006d13 	.word	0x08006d13
 8006bd8:	08006c3f 	.word	0x08006c3f
 8006bdc:	08006ccd 	.word	0x08006ccd
 8006be0:	08006b91 	.word	0x08006b91
 8006be4:	08006b91 	.word	0x08006b91
 8006be8:	08006d35 	.word	0x08006d35
 8006bec:	08006b91 	.word	0x08006b91
 8006bf0:	08006c3f 	.word	0x08006c3f
 8006bf4:	08006b91 	.word	0x08006b91
 8006bf8:	08006b91 	.word	0x08006b91
 8006bfc:	08006cd5 	.word	0x08006cd5
 8006c00:	6833      	ldr	r3, [r6, #0]
 8006c02:	1d1a      	adds	r2, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6032      	str	r2, [r6, #0]
 8006c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c10:	2301      	movs	r3, #1
 8006c12:	e09c      	b.n	8006d4e <_printf_i+0x1e6>
 8006c14:	6833      	ldr	r3, [r6, #0]
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	1d19      	adds	r1, r3, #4
 8006c1a:	6031      	str	r1, [r6, #0]
 8006c1c:	0606      	lsls	r6, r0, #24
 8006c1e:	d501      	bpl.n	8006c24 <_printf_i+0xbc>
 8006c20:	681d      	ldr	r5, [r3, #0]
 8006c22:	e003      	b.n	8006c2c <_printf_i+0xc4>
 8006c24:	0645      	lsls	r5, r0, #25
 8006c26:	d5fb      	bpl.n	8006c20 <_printf_i+0xb8>
 8006c28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c2c:	2d00      	cmp	r5, #0
 8006c2e:	da03      	bge.n	8006c38 <_printf_i+0xd0>
 8006c30:	232d      	movs	r3, #45	@ 0x2d
 8006c32:	426d      	negs	r5, r5
 8006c34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c38:	230a      	movs	r3, #10
 8006c3a:	4858      	ldr	r0, [pc, #352]	@ (8006d9c <_printf_i+0x234>)
 8006c3c:	e011      	b.n	8006c62 <_printf_i+0xfa>
 8006c3e:	6821      	ldr	r1, [r4, #0]
 8006c40:	6833      	ldr	r3, [r6, #0]
 8006c42:	0608      	lsls	r0, r1, #24
 8006c44:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c48:	d402      	bmi.n	8006c50 <_printf_i+0xe8>
 8006c4a:	0649      	lsls	r1, r1, #25
 8006c4c:	bf48      	it	mi
 8006c4e:	b2ad      	uxthmi	r5, r5
 8006c50:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c52:	6033      	str	r3, [r6, #0]
 8006c54:	bf14      	ite	ne
 8006c56:	230a      	movne	r3, #10
 8006c58:	2308      	moveq	r3, #8
 8006c5a:	4850      	ldr	r0, [pc, #320]	@ (8006d9c <_printf_i+0x234>)
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c62:	6866      	ldr	r6, [r4, #4]
 8006c64:	2e00      	cmp	r6, #0
 8006c66:	60a6      	str	r6, [r4, #8]
 8006c68:	db05      	blt.n	8006c76 <_printf_i+0x10e>
 8006c6a:	6821      	ldr	r1, [r4, #0]
 8006c6c:	432e      	orrs	r6, r5
 8006c6e:	f021 0104 	bic.w	r1, r1, #4
 8006c72:	6021      	str	r1, [r4, #0]
 8006c74:	d04b      	beq.n	8006d0e <_printf_i+0x1a6>
 8006c76:	4616      	mov	r6, r2
 8006c78:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c7c:	fb03 5711 	mls	r7, r3, r1, r5
 8006c80:	5dc7      	ldrb	r7, [r0, r7]
 8006c82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c86:	462f      	mov	r7, r5
 8006c88:	42bb      	cmp	r3, r7
 8006c8a:	460d      	mov	r5, r1
 8006c8c:	d9f4      	bls.n	8006c78 <_printf_i+0x110>
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d10b      	bne.n	8006caa <_printf_i+0x142>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	07df      	lsls	r7, r3, #31
 8006c96:	d508      	bpl.n	8006caa <_printf_i+0x142>
 8006c98:	6923      	ldr	r3, [r4, #16]
 8006c9a:	6861      	ldr	r1, [r4, #4]
 8006c9c:	4299      	cmp	r1, r3
 8006c9e:	bfde      	ittt	le
 8006ca0:	2330      	movle	r3, #48	@ 0x30
 8006ca2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ca6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006caa:	1b92      	subs	r2, r2, r6
 8006cac:	6122      	str	r2, [r4, #16]
 8006cae:	464b      	mov	r3, r9
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	f8cd a000 	str.w	sl, [sp]
 8006cb8:	aa03      	add	r2, sp, #12
 8006cba:	f7ff fee3 	bl	8006a84 <_printf_common>
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	d14a      	bne.n	8006d58 <_printf_i+0x1f0>
 8006cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc6:	b004      	add	sp, #16
 8006cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	f043 0320 	orr.w	r3, r3, #32
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	2778      	movs	r7, #120	@ 0x78
 8006cd6:	4832      	ldr	r0, [pc, #200]	@ (8006da0 <_printf_i+0x238>)
 8006cd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	6831      	ldr	r1, [r6, #0]
 8006ce0:	061f      	lsls	r7, r3, #24
 8006ce2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ce6:	d402      	bmi.n	8006cee <_printf_i+0x186>
 8006ce8:	065f      	lsls	r7, r3, #25
 8006cea:	bf48      	it	mi
 8006cec:	b2ad      	uxthmi	r5, r5
 8006cee:	6031      	str	r1, [r6, #0]
 8006cf0:	07d9      	lsls	r1, r3, #31
 8006cf2:	bf44      	itt	mi
 8006cf4:	f043 0320 	orrmi.w	r3, r3, #32
 8006cf8:	6023      	strmi	r3, [r4, #0]
 8006cfa:	b11d      	cbz	r5, 8006d04 <_printf_i+0x19c>
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	e7ad      	b.n	8006c5c <_printf_i+0xf4>
 8006d00:	4826      	ldr	r0, [pc, #152]	@ (8006d9c <_printf_i+0x234>)
 8006d02:	e7e9      	b.n	8006cd8 <_printf_i+0x170>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	f023 0320 	bic.w	r3, r3, #32
 8006d0a:	6023      	str	r3, [r4, #0]
 8006d0c:	e7f6      	b.n	8006cfc <_printf_i+0x194>
 8006d0e:	4616      	mov	r6, r2
 8006d10:	e7bd      	b.n	8006c8e <_printf_i+0x126>
 8006d12:	6833      	ldr	r3, [r6, #0]
 8006d14:	6825      	ldr	r5, [r4, #0]
 8006d16:	1d18      	adds	r0, r3, #4
 8006d18:	6961      	ldr	r1, [r4, #20]
 8006d1a:	6030      	str	r0, [r6, #0]
 8006d1c:	062e      	lsls	r6, r5, #24
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	d501      	bpl.n	8006d26 <_printf_i+0x1be>
 8006d22:	6019      	str	r1, [r3, #0]
 8006d24:	e002      	b.n	8006d2c <_printf_i+0x1c4>
 8006d26:	0668      	lsls	r0, r5, #25
 8006d28:	d5fb      	bpl.n	8006d22 <_printf_i+0x1ba>
 8006d2a:	8019      	strh	r1, [r3, #0]
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4616      	mov	r6, r2
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	e7bc      	b.n	8006cae <_printf_i+0x146>
 8006d34:	6833      	ldr	r3, [r6, #0]
 8006d36:	2100      	movs	r1, #0
 8006d38:	1d1a      	adds	r2, r3, #4
 8006d3a:	6032      	str	r2, [r6, #0]
 8006d3c:	681e      	ldr	r6, [r3, #0]
 8006d3e:	6862      	ldr	r2, [r4, #4]
 8006d40:	4630      	mov	r0, r6
 8006d42:	f000 f9d6 	bl	80070f2 <memchr>
 8006d46:	b108      	cbz	r0, 8006d4c <_printf_i+0x1e4>
 8006d48:	1b80      	subs	r0, r0, r6
 8006d4a:	6060      	str	r0, [r4, #4]
 8006d4c:	6863      	ldr	r3, [r4, #4]
 8006d4e:	6123      	str	r3, [r4, #16]
 8006d50:	2300      	movs	r3, #0
 8006d52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d56:	e7aa      	b.n	8006cae <_printf_i+0x146>
 8006d58:	4632      	mov	r2, r6
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	6923      	ldr	r3, [r4, #16]
 8006d60:	47d0      	blx	sl
 8006d62:	3001      	adds	r0, #1
 8006d64:	d0ad      	beq.n	8006cc2 <_printf_i+0x15a>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	079b      	lsls	r3, r3, #30
 8006d6a:	d413      	bmi.n	8006d94 <_printf_i+0x22c>
 8006d6c:	68e0      	ldr	r0, [r4, #12]
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	4298      	cmp	r0, r3
 8006d72:	bfb8      	it	lt
 8006d74:	4618      	movlt	r0, r3
 8006d76:	e7a6      	b.n	8006cc6 <_printf_i+0x15e>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	4632      	mov	r2, r6
 8006d7c:	4649      	mov	r1, r9
 8006d7e:	4640      	mov	r0, r8
 8006d80:	47d0      	blx	sl
 8006d82:	3001      	adds	r0, #1
 8006d84:	d09d      	beq.n	8006cc2 <_printf_i+0x15a>
 8006d86:	3501      	adds	r5, #1
 8006d88:	68e3      	ldr	r3, [r4, #12]
 8006d8a:	9903      	ldr	r1, [sp, #12]
 8006d8c:	1a5b      	subs	r3, r3, r1
 8006d8e:	42ab      	cmp	r3, r5
 8006d90:	dcf2      	bgt.n	8006d78 <_printf_i+0x210>
 8006d92:	e7eb      	b.n	8006d6c <_printf_i+0x204>
 8006d94:	2500      	movs	r5, #0
 8006d96:	f104 0619 	add.w	r6, r4, #25
 8006d9a:	e7f5      	b.n	8006d88 <_printf_i+0x220>
 8006d9c:	0800a550 	.word	0x0800a550
 8006da0:	0800a561 	.word	0x0800a561

08006da4 <std>:
 8006da4:	2300      	movs	r3, #0
 8006da6:	b510      	push	{r4, lr}
 8006da8:	4604      	mov	r4, r0
 8006daa:	e9c0 3300 	strd	r3, r3, [r0]
 8006dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006db2:	6083      	str	r3, [r0, #8]
 8006db4:	8181      	strh	r1, [r0, #12]
 8006db6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006db8:	81c2      	strh	r2, [r0, #14]
 8006dba:	6183      	str	r3, [r0, #24]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	2208      	movs	r2, #8
 8006dc0:	305c      	adds	r0, #92	@ 0x5c
 8006dc2:	f000 f916 	bl	8006ff2 <memset>
 8006dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dfc <std+0x58>)
 8006dc8:	6224      	str	r4, [r4, #32]
 8006dca:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006e00 <std+0x5c>)
 8006dce:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8006e04 <std+0x60>)
 8006dd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e08 <std+0x64>)
 8006dd6:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8006e0c <std+0x68>)
 8006dda:	429c      	cmp	r4, r3
 8006ddc:	d006      	beq.n	8006dec <std+0x48>
 8006dde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006de2:	4294      	cmp	r4, r2
 8006de4:	d002      	beq.n	8006dec <std+0x48>
 8006de6:	33d0      	adds	r3, #208	@ 0xd0
 8006de8:	429c      	cmp	r4, r3
 8006dea:	d105      	bne.n	8006df8 <std+0x54>
 8006dec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df4:	f000 b97a 	b.w	80070ec <__retarget_lock_init_recursive>
 8006df8:	bd10      	pop	{r4, pc}
 8006dfa:	bf00      	nop
 8006dfc:	08006f6d 	.word	0x08006f6d
 8006e00:	08006f8f 	.word	0x08006f8f
 8006e04:	08006fc7 	.word	0x08006fc7
 8006e08:	08006feb 	.word	0x08006feb
 8006e0c:	2000049c 	.word	0x2000049c

08006e10 <stdio_exit_handler>:
 8006e10:	4a02      	ldr	r2, [pc, #8]	@ (8006e1c <stdio_exit_handler+0xc>)
 8006e12:	4903      	ldr	r1, [pc, #12]	@ (8006e20 <stdio_exit_handler+0x10>)
 8006e14:	4803      	ldr	r0, [pc, #12]	@ (8006e24 <stdio_exit_handler+0x14>)
 8006e16:	f000 b869 	b.w	8006eec <_fwalk_sglue>
 8006e1a:	bf00      	nop
 8006e1c:	2000000c 	.word	0x2000000c
 8006e20:	08008a89 	.word	0x08008a89
 8006e24:	2000001c 	.word	0x2000001c

08006e28 <cleanup_stdio>:
 8006e28:	6841      	ldr	r1, [r0, #4]
 8006e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e5c <cleanup_stdio+0x34>)
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	4299      	cmp	r1, r3
 8006e30:	4604      	mov	r4, r0
 8006e32:	d001      	beq.n	8006e38 <cleanup_stdio+0x10>
 8006e34:	f001 fe28 	bl	8008a88 <_fflush_r>
 8006e38:	68a1      	ldr	r1, [r4, #8]
 8006e3a:	4b09      	ldr	r3, [pc, #36]	@ (8006e60 <cleanup_stdio+0x38>)
 8006e3c:	4299      	cmp	r1, r3
 8006e3e:	d002      	beq.n	8006e46 <cleanup_stdio+0x1e>
 8006e40:	4620      	mov	r0, r4
 8006e42:	f001 fe21 	bl	8008a88 <_fflush_r>
 8006e46:	68e1      	ldr	r1, [r4, #12]
 8006e48:	4b06      	ldr	r3, [pc, #24]	@ (8006e64 <cleanup_stdio+0x3c>)
 8006e4a:	4299      	cmp	r1, r3
 8006e4c:	d004      	beq.n	8006e58 <cleanup_stdio+0x30>
 8006e4e:	4620      	mov	r0, r4
 8006e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e54:	f001 be18 	b.w	8008a88 <_fflush_r>
 8006e58:	bd10      	pop	{r4, pc}
 8006e5a:	bf00      	nop
 8006e5c:	2000049c 	.word	0x2000049c
 8006e60:	20000504 	.word	0x20000504
 8006e64:	2000056c 	.word	0x2000056c

08006e68 <global_stdio_init.part.0>:
 8006e68:	b510      	push	{r4, lr}
 8006e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e98 <global_stdio_init.part.0+0x30>)
 8006e6c:	4c0b      	ldr	r4, [pc, #44]	@ (8006e9c <global_stdio_init.part.0+0x34>)
 8006e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ea0 <global_stdio_init.part.0+0x38>)
 8006e70:	4620      	mov	r0, r4
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	2104      	movs	r1, #4
 8006e76:	2200      	movs	r2, #0
 8006e78:	f7ff ff94 	bl	8006da4 <std>
 8006e7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e80:	2201      	movs	r2, #1
 8006e82:	2109      	movs	r1, #9
 8006e84:	f7ff ff8e 	bl	8006da4 <std>
 8006e88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e92:	2112      	movs	r1, #18
 8006e94:	f7ff bf86 	b.w	8006da4 <std>
 8006e98:	200005d4 	.word	0x200005d4
 8006e9c:	2000049c 	.word	0x2000049c
 8006ea0:	08006e11 	.word	0x08006e11

08006ea4 <__sfp_lock_acquire>:
 8006ea4:	4801      	ldr	r0, [pc, #4]	@ (8006eac <__sfp_lock_acquire+0x8>)
 8006ea6:	f000 b922 	b.w	80070ee <__retarget_lock_acquire_recursive>
 8006eaa:	bf00      	nop
 8006eac:	200005dd 	.word	0x200005dd

08006eb0 <__sfp_lock_release>:
 8006eb0:	4801      	ldr	r0, [pc, #4]	@ (8006eb8 <__sfp_lock_release+0x8>)
 8006eb2:	f000 b91d 	b.w	80070f0 <__retarget_lock_release_recursive>
 8006eb6:	bf00      	nop
 8006eb8:	200005dd 	.word	0x200005dd

08006ebc <__sinit>:
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	f7ff fff0 	bl	8006ea4 <__sfp_lock_acquire>
 8006ec4:	6a23      	ldr	r3, [r4, #32]
 8006ec6:	b11b      	cbz	r3, 8006ed0 <__sinit+0x14>
 8006ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ecc:	f7ff bff0 	b.w	8006eb0 <__sfp_lock_release>
 8006ed0:	4b04      	ldr	r3, [pc, #16]	@ (8006ee4 <__sinit+0x28>)
 8006ed2:	6223      	str	r3, [r4, #32]
 8006ed4:	4b04      	ldr	r3, [pc, #16]	@ (8006ee8 <__sinit+0x2c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1f5      	bne.n	8006ec8 <__sinit+0xc>
 8006edc:	f7ff ffc4 	bl	8006e68 <global_stdio_init.part.0>
 8006ee0:	e7f2      	b.n	8006ec8 <__sinit+0xc>
 8006ee2:	bf00      	nop
 8006ee4:	08006e29 	.word	0x08006e29
 8006ee8:	200005d4 	.word	0x200005d4

08006eec <_fwalk_sglue>:
 8006eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	4688      	mov	r8, r1
 8006ef4:	4614      	mov	r4, r2
 8006ef6:	2600      	movs	r6, #0
 8006ef8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006efc:	f1b9 0901 	subs.w	r9, r9, #1
 8006f00:	d505      	bpl.n	8006f0e <_fwalk_sglue+0x22>
 8006f02:	6824      	ldr	r4, [r4, #0]
 8006f04:	2c00      	cmp	r4, #0
 8006f06:	d1f7      	bne.n	8006ef8 <_fwalk_sglue+0xc>
 8006f08:	4630      	mov	r0, r6
 8006f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f0e:	89ab      	ldrh	r3, [r5, #12]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d907      	bls.n	8006f24 <_fwalk_sglue+0x38>
 8006f14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	d003      	beq.n	8006f24 <_fwalk_sglue+0x38>
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	4638      	mov	r0, r7
 8006f20:	47c0      	blx	r8
 8006f22:	4306      	orrs	r6, r0
 8006f24:	3568      	adds	r5, #104	@ 0x68
 8006f26:	e7e9      	b.n	8006efc <_fwalk_sglue+0x10>

08006f28 <siprintf>:
 8006f28:	b40e      	push	{r1, r2, r3}
 8006f2a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f2e:	b510      	push	{r4, lr}
 8006f30:	2400      	movs	r4, #0
 8006f32:	b09d      	sub	sp, #116	@ 0x74
 8006f34:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006f36:	9002      	str	r0, [sp, #8]
 8006f38:	9006      	str	r0, [sp, #24]
 8006f3a:	9107      	str	r1, [sp, #28]
 8006f3c:	9104      	str	r1, [sp, #16]
 8006f3e:	4809      	ldr	r0, [pc, #36]	@ (8006f64 <siprintf+0x3c>)
 8006f40:	4909      	ldr	r1, [pc, #36]	@ (8006f68 <siprintf+0x40>)
 8006f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f46:	9105      	str	r1, [sp, #20]
 8006f48:	6800      	ldr	r0, [r0, #0]
 8006f4a:	a902      	add	r1, sp, #8
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006f50:	f001 fc1e 	bl	8008790 <_svfiprintf_r>
 8006f54:	9b02      	ldr	r3, [sp, #8]
 8006f56:	701c      	strb	r4, [r3, #0]
 8006f58:	b01d      	add	sp, #116	@ 0x74
 8006f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f5e:	b003      	add	sp, #12
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20000018 	.word	0x20000018
 8006f68:	ffff0208 	.word	0xffff0208

08006f6c <__sread>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	460c      	mov	r4, r1
 8006f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f74:	f000 f86c 	bl	8007050 <_read_r>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	bfab      	itete	ge
 8006f7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f80:	181b      	addge	r3, r3, r0
 8006f82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f86:	bfac      	ite	ge
 8006f88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f8a:	81a3      	strhlt	r3, [r4, #12]
 8006f8c:	bd10      	pop	{r4, pc}

08006f8e <__swrite>:
 8006f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f92:	461f      	mov	r7, r3
 8006f94:	898b      	ldrh	r3, [r1, #12]
 8006f96:	4605      	mov	r5, r0
 8006f98:	05db      	lsls	r3, r3, #23
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	4616      	mov	r6, r2
 8006f9e:	d505      	bpl.n	8006fac <__swrite+0x1e>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa8:	f000 f840 	bl	800702c <_lseek_r>
 8006fac:	89a3      	ldrh	r3, [r4, #12]
 8006fae:	4632      	mov	r2, r6
 8006fb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fb4:	81a3      	strh	r3, [r4, #12]
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	463b      	mov	r3, r7
 8006fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc2:	f000 b857 	b.w	8007074 <_write_r>

08006fc6 <__sseek>:
 8006fc6:	b510      	push	{r4, lr}
 8006fc8:	460c      	mov	r4, r1
 8006fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fce:	f000 f82d 	bl	800702c <_lseek_r>
 8006fd2:	1c43      	adds	r3, r0, #1
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	bf15      	itete	ne
 8006fd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006fde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fe2:	81a3      	strheq	r3, [r4, #12]
 8006fe4:	bf18      	it	ne
 8006fe6:	81a3      	strhne	r3, [r4, #12]
 8006fe8:	bd10      	pop	{r4, pc}

08006fea <__sclose>:
 8006fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fee:	f000 b80d 	b.w	800700c <_close_r>

08006ff2 <memset>:
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	4402      	add	r2, r0
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d100      	bne.n	8006ffc <memset+0xa>
 8006ffa:	4770      	bx	lr
 8006ffc:	f803 1b01 	strb.w	r1, [r3], #1
 8007000:	e7f9      	b.n	8006ff6 <memset+0x4>
	...

08007004 <_localeconv_r>:
 8007004:	4800      	ldr	r0, [pc, #0]	@ (8007008 <_localeconv_r+0x4>)
 8007006:	4770      	bx	lr
 8007008:	20000158 	.word	0x20000158

0800700c <_close_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	2300      	movs	r3, #0
 8007010:	4d05      	ldr	r5, [pc, #20]	@ (8007028 <_close_r+0x1c>)
 8007012:	4604      	mov	r4, r0
 8007014:	4608      	mov	r0, r1
 8007016:	602b      	str	r3, [r5, #0]
 8007018:	f7fc f89d 	bl	8003156 <_close>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_close_r+0x1a>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	b103      	cbz	r3, 8007026 <_close_r+0x1a>
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	200005d8 	.word	0x200005d8

0800702c <_lseek_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	4611      	mov	r1, r2
 8007034:	2200      	movs	r2, #0
 8007036:	4d05      	ldr	r5, [pc, #20]	@ (800704c <_lseek_r+0x20>)
 8007038:	602a      	str	r2, [r5, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	f7fc f8af 	bl	800319e <_lseek>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_lseek_r+0x1e>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_lseek_r+0x1e>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	200005d8 	.word	0x200005d8

08007050 <_read_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4604      	mov	r4, r0
 8007054:	4608      	mov	r0, r1
 8007056:	4611      	mov	r1, r2
 8007058:	2200      	movs	r2, #0
 800705a:	4d05      	ldr	r5, [pc, #20]	@ (8007070 <_read_r+0x20>)
 800705c:	602a      	str	r2, [r5, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	f7fc f840 	bl	80030e4 <_read>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_read_r+0x1e>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b103      	cbz	r3, 800706e <_read_r+0x1e>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	200005d8 	.word	0x200005d8

08007074 <_write_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4604      	mov	r4, r0
 8007078:	4608      	mov	r0, r1
 800707a:	4611      	mov	r1, r2
 800707c:	2200      	movs	r2, #0
 800707e:	4d05      	ldr	r5, [pc, #20]	@ (8007094 <_write_r+0x20>)
 8007080:	602a      	str	r2, [r5, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	f7fc f84b 	bl	800311e <_write>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_write_r+0x1e>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_write_r+0x1e>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	200005d8 	.word	0x200005d8

08007098 <__errno>:
 8007098:	4b01      	ldr	r3, [pc, #4]	@ (80070a0 <__errno+0x8>)
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	20000018 	.word	0x20000018

080070a4 <__libc_init_array>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	2600      	movs	r6, #0
 80070a8:	4d0c      	ldr	r5, [pc, #48]	@ (80070dc <__libc_init_array+0x38>)
 80070aa:	4c0d      	ldr	r4, [pc, #52]	@ (80070e0 <__libc_init_array+0x3c>)
 80070ac:	1b64      	subs	r4, r4, r5
 80070ae:	10a4      	asrs	r4, r4, #2
 80070b0:	42a6      	cmp	r6, r4
 80070b2:	d109      	bne.n	80070c8 <__libc_init_array+0x24>
 80070b4:	f003 fa0a 	bl	800a4cc <_init>
 80070b8:	2600      	movs	r6, #0
 80070ba:	4d0a      	ldr	r5, [pc, #40]	@ (80070e4 <__libc_init_array+0x40>)
 80070bc:	4c0a      	ldr	r4, [pc, #40]	@ (80070e8 <__libc_init_array+0x44>)
 80070be:	1b64      	subs	r4, r4, r5
 80070c0:	10a4      	asrs	r4, r4, #2
 80070c2:	42a6      	cmp	r6, r4
 80070c4:	d105      	bne.n	80070d2 <__libc_init_array+0x2e>
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070cc:	4798      	blx	r3
 80070ce:	3601      	adds	r6, #1
 80070d0:	e7ee      	b.n	80070b0 <__libc_init_array+0xc>
 80070d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d6:	4798      	blx	r3
 80070d8:	3601      	adds	r6, #1
 80070da:	e7f2      	b.n	80070c2 <__libc_init_array+0x1e>
 80070dc:	0800a970 	.word	0x0800a970
 80070e0:	0800a970 	.word	0x0800a970
 80070e4:	0800a970 	.word	0x0800a970
 80070e8:	0800a974 	.word	0x0800a974

080070ec <__retarget_lock_init_recursive>:
 80070ec:	4770      	bx	lr

080070ee <__retarget_lock_acquire_recursive>:
 80070ee:	4770      	bx	lr

080070f0 <__retarget_lock_release_recursive>:
 80070f0:	4770      	bx	lr

080070f2 <memchr>:
 80070f2:	4603      	mov	r3, r0
 80070f4:	b510      	push	{r4, lr}
 80070f6:	b2c9      	uxtb	r1, r1
 80070f8:	4402      	add	r2, r0
 80070fa:	4293      	cmp	r3, r2
 80070fc:	4618      	mov	r0, r3
 80070fe:	d101      	bne.n	8007104 <memchr+0x12>
 8007100:	2000      	movs	r0, #0
 8007102:	e003      	b.n	800710c <memchr+0x1a>
 8007104:	7804      	ldrb	r4, [r0, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	428c      	cmp	r4, r1
 800710a:	d1f6      	bne.n	80070fa <memchr+0x8>
 800710c:	bd10      	pop	{r4, pc}

0800710e <memcpy>:
 800710e:	440a      	add	r2, r1
 8007110:	4291      	cmp	r1, r2
 8007112:	f100 33ff 	add.w	r3, r0, #4294967295
 8007116:	d100      	bne.n	800711a <memcpy+0xc>
 8007118:	4770      	bx	lr
 800711a:	b510      	push	{r4, lr}
 800711c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007120:	4291      	cmp	r1, r2
 8007122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007126:	d1f9      	bne.n	800711c <memcpy+0xe>
 8007128:	bd10      	pop	{r4, pc}

0800712a <quorem>:
 800712a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712e:	6903      	ldr	r3, [r0, #16]
 8007130:	690c      	ldr	r4, [r1, #16]
 8007132:	4607      	mov	r7, r0
 8007134:	42a3      	cmp	r3, r4
 8007136:	db7e      	blt.n	8007236 <quorem+0x10c>
 8007138:	3c01      	subs	r4, #1
 800713a:	00a3      	lsls	r3, r4, #2
 800713c:	f100 0514 	add.w	r5, r0, #20
 8007140:	f101 0814 	add.w	r8, r1, #20
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007154:	3301      	adds	r3, #1
 8007156:	429a      	cmp	r2, r3
 8007158:	fbb2 f6f3 	udiv	r6, r2, r3
 800715c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007160:	d32e      	bcc.n	80071c0 <quorem+0x96>
 8007162:	f04f 0a00 	mov.w	sl, #0
 8007166:	46c4      	mov	ip, r8
 8007168:	46ae      	mov	lr, r5
 800716a:	46d3      	mov	fp, sl
 800716c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007170:	b298      	uxth	r0, r3
 8007172:	fb06 a000 	mla	r0, r6, r0, sl
 8007176:	0c1b      	lsrs	r3, r3, #16
 8007178:	0c02      	lsrs	r2, r0, #16
 800717a:	fb06 2303 	mla	r3, r6, r3, r2
 800717e:	f8de 2000 	ldr.w	r2, [lr]
 8007182:	b280      	uxth	r0, r0
 8007184:	b292      	uxth	r2, r2
 8007186:	1a12      	subs	r2, r2, r0
 8007188:	445a      	add	r2, fp
 800718a:	f8de 0000 	ldr.w	r0, [lr]
 800718e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007192:	b29b      	uxth	r3, r3
 8007194:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007198:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800719c:	b292      	uxth	r2, r2
 800719e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071a2:	45e1      	cmp	r9, ip
 80071a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071a8:	f84e 2b04 	str.w	r2, [lr], #4
 80071ac:	d2de      	bcs.n	800716c <quorem+0x42>
 80071ae:	9b00      	ldr	r3, [sp, #0]
 80071b0:	58eb      	ldr	r3, [r5, r3]
 80071b2:	b92b      	cbnz	r3, 80071c0 <quorem+0x96>
 80071b4:	9b01      	ldr	r3, [sp, #4]
 80071b6:	3b04      	subs	r3, #4
 80071b8:	429d      	cmp	r5, r3
 80071ba:	461a      	mov	r2, r3
 80071bc:	d32f      	bcc.n	800721e <quorem+0xf4>
 80071be:	613c      	str	r4, [r7, #16]
 80071c0:	4638      	mov	r0, r7
 80071c2:	f001 f981 	bl	80084c8 <__mcmp>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	db25      	blt.n	8007216 <quorem+0xec>
 80071ca:	4629      	mov	r1, r5
 80071cc:	2000      	movs	r0, #0
 80071ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80071d2:	f8d1 c000 	ldr.w	ip, [r1]
 80071d6:	fa1f fe82 	uxth.w	lr, r2
 80071da:	fa1f f38c 	uxth.w	r3, ip
 80071de:	eba3 030e 	sub.w	r3, r3, lr
 80071e2:	4403      	add	r3, r0
 80071e4:	0c12      	lsrs	r2, r2, #16
 80071e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071f4:	45c1      	cmp	r9, r8
 80071f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071fa:	f841 3b04 	str.w	r3, [r1], #4
 80071fe:	d2e6      	bcs.n	80071ce <quorem+0xa4>
 8007200:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007204:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007208:	b922      	cbnz	r2, 8007214 <quorem+0xea>
 800720a:	3b04      	subs	r3, #4
 800720c:	429d      	cmp	r5, r3
 800720e:	461a      	mov	r2, r3
 8007210:	d30b      	bcc.n	800722a <quorem+0x100>
 8007212:	613c      	str	r4, [r7, #16]
 8007214:	3601      	adds	r6, #1
 8007216:	4630      	mov	r0, r6
 8007218:	b003      	add	sp, #12
 800721a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721e:	6812      	ldr	r2, [r2, #0]
 8007220:	3b04      	subs	r3, #4
 8007222:	2a00      	cmp	r2, #0
 8007224:	d1cb      	bne.n	80071be <quorem+0x94>
 8007226:	3c01      	subs	r4, #1
 8007228:	e7c6      	b.n	80071b8 <quorem+0x8e>
 800722a:	6812      	ldr	r2, [r2, #0]
 800722c:	3b04      	subs	r3, #4
 800722e:	2a00      	cmp	r2, #0
 8007230:	d1ef      	bne.n	8007212 <quorem+0xe8>
 8007232:	3c01      	subs	r4, #1
 8007234:	e7ea      	b.n	800720c <quorem+0xe2>
 8007236:	2000      	movs	r0, #0
 8007238:	e7ee      	b.n	8007218 <quorem+0xee>
 800723a:	0000      	movs	r0, r0
 800723c:	0000      	movs	r0, r0
	...

08007240 <_dtoa_r>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	4614      	mov	r4, r2
 8007246:	461d      	mov	r5, r3
 8007248:	69c7      	ldr	r7, [r0, #28]
 800724a:	b097      	sub	sp, #92	@ 0x5c
 800724c:	4681      	mov	r9, r0
 800724e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007252:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007254:	b97f      	cbnz	r7, 8007276 <_dtoa_r+0x36>
 8007256:	2010      	movs	r0, #16
 8007258:	f000 fe0e 	bl	8007e78 <malloc>
 800725c:	4602      	mov	r2, r0
 800725e:	f8c9 001c 	str.w	r0, [r9, #28]
 8007262:	b920      	cbnz	r0, 800726e <_dtoa_r+0x2e>
 8007264:	21ef      	movs	r1, #239	@ 0xef
 8007266:	4bac      	ldr	r3, [pc, #688]	@ (8007518 <_dtoa_r+0x2d8>)
 8007268:	48ac      	ldr	r0, [pc, #688]	@ (800751c <_dtoa_r+0x2dc>)
 800726a:	f001 fc5f 	bl	8008b2c <__assert_func>
 800726e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007272:	6007      	str	r7, [r0, #0]
 8007274:	60c7      	str	r7, [r0, #12]
 8007276:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800727a:	6819      	ldr	r1, [r3, #0]
 800727c:	b159      	cbz	r1, 8007296 <_dtoa_r+0x56>
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	2301      	movs	r3, #1
 8007282:	4093      	lsls	r3, r2
 8007284:	604a      	str	r2, [r1, #4]
 8007286:	608b      	str	r3, [r1, #8]
 8007288:	4648      	mov	r0, r9
 800728a:	f000 feeb 	bl	8008064 <_Bfree>
 800728e:	2200      	movs	r2, #0
 8007290:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	1e2b      	subs	r3, r5, #0
 8007298:	bfaf      	iteee	ge
 800729a:	2300      	movge	r3, #0
 800729c:	2201      	movlt	r2, #1
 800729e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072a2:	9307      	strlt	r3, [sp, #28]
 80072a4:	bfa8      	it	ge
 80072a6:	6033      	strge	r3, [r6, #0]
 80072a8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80072ac:	4b9c      	ldr	r3, [pc, #624]	@ (8007520 <_dtoa_r+0x2e0>)
 80072ae:	bfb8      	it	lt
 80072b0:	6032      	strlt	r2, [r6, #0]
 80072b2:	ea33 0308 	bics.w	r3, r3, r8
 80072b6:	d112      	bne.n	80072de <_dtoa_r+0x9e>
 80072b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80072c4:	4323      	orrs	r3, r4
 80072c6:	f000 855e 	beq.w	8007d86 <_dtoa_r+0xb46>
 80072ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007524 <_dtoa_r+0x2e4>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8560 	beq.w	8007d96 <_dtoa_r+0xb56>
 80072d6:	f10a 0303 	add.w	r3, sl, #3
 80072da:	f000 bd5a 	b.w	8007d92 <_dtoa_r+0xb52>
 80072de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80072e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072ea:	2200      	movs	r2, #0
 80072ec:	2300      	movs	r3, #0
 80072ee:	f7f9 fb5b 	bl	80009a8 <__aeabi_dcmpeq>
 80072f2:	4607      	mov	r7, r0
 80072f4:	b158      	cbz	r0, 800730e <_dtoa_r+0xce>
 80072f6:	2301      	movs	r3, #1
 80072f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072fe:	b113      	cbz	r3, 8007306 <_dtoa_r+0xc6>
 8007300:	4b89      	ldr	r3, [pc, #548]	@ (8007528 <_dtoa_r+0x2e8>)
 8007302:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800752c <_dtoa_r+0x2ec>
 800730a:	f000 bd44 	b.w	8007d96 <_dtoa_r+0xb56>
 800730e:	ab14      	add	r3, sp, #80	@ 0x50
 8007310:	9301      	str	r3, [sp, #4]
 8007312:	ab15      	add	r3, sp, #84	@ 0x54
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	4648      	mov	r0, r9
 8007318:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800731c:	f001 f984 	bl	8008628 <__d2b>
 8007320:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007324:	9003      	str	r0, [sp, #12]
 8007326:	2e00      	cmp	r6, #0
 8007328:	d078      	beq.n	800741c <_dtoa_r+0x1dc>
 800732a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800732e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007330:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007338:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800733c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007340:	9712      	str	r7, [sp, #72]	@ 0x48
 8007342:	4619      	mov	r1, r3
 8007344:	2200      	movs	r2, #0
 8007346:	4b7a      	ldr	r3, [pc, #488]	@ (8007530 <_dtoa_r+0x2f0>)
 8007348:	f7f8 ff0e 	bl	8000168 <__aeabi_dsub>
 800734c:	a36c      	add	r3, pc, #432	@ (adr r3, 8007500 <_dtoa_r+0x2c0>)
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	f7f9 f8c1 	bl	80004d8 <__aeabi_dmul>
 8007356:	a36c      	add	r3, pc, #432	@ (adr r3, 8007508 <_dtoa_r+0x2c8>)
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f7f8 ff06 	bl	800016c <__adddf3>
 8007360:	4604      	mov	r4, r0
 8007362:	4630      	mov	r0, r6
 8007364:	460d      	mov	r5, r1
 8007366:	f7f9 f84d 	bl	8000404 <__aeabi_i2d>
 800736a:	a369      	add	r3, pc, #420	@ (adr r3, 8007510 <_dtoa_r+0x2d0>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f7f9 f8b2 	bl	80004d8 <__aeabi_dmul>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4620      	mov	r0, r4
 800737a:	4629      	mov	r1, r5
 800737c:	f7f8 fef6 	bl	800016c <__adddf3>
 8007380:	4604      	mov	r4, r0
 8007382:	460d      	mov	r5, r1
 8007384:	f7f9 fb58 	bl	8000a38 <__aeabi_d2iz>
 8007388:	2200      	movs	r2, #0
 800738a:	4607      	mov	r7, r0
 800738c:	2300      	movs	r3, #0
 800738e:	4620      	mov	r0, r4
 8007390:	4629      	mov	r1, r5
 8007392:	f7f9 fb13 	bl	80009bc <__aeabi_dcmplt>
 8007396:	b140      	cbz	r0, 80073aa <_dtoa_r+0x16a>
 8007398:	4638      	mov	r0, r7
 800739a:	f7f9 f833 	bl	8000404 <__aeabi_i2d>
 800739e:	4622      	mov	r2, r4
 80073a0:	462b      	mov	r3, r5
 80073a2:	f7f9 fb01 	bl	80009a8 <__aeabi_dcmpeq>
 80073a6:	b900      	cbnz	r0, 80073aa <_dtoa_r+0x16a>
 80073a8:	3f01      	subs	r7, #1
 80073aa:	2f16      	cmp	r7, #22
 80073ac:	d854      	bhi.n	8007458 <_dtoa_r+0x218>
 80073ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073b2:	4b60      	ldr	r3, [pc, #384]	@ (8007534 <_dtoa_r+0x2f4>)
 80073b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	f7f9 fafe 	bl	80009bc <__aeabi_dcmplt>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d04b      	beq.n	800745c <_dtoa_r+0x21c>
 80073c4:	2300      	movs	r3, #0
 80073c6:	3f01      	subs	r7, #1
 80073c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80073cc:	1b9b      	subs	r3, r3, r6
 80073ce:	1e5a      	subs	r2, r3, #1
 80073d0:	bf49      	itett	mi
 80073d2:	f1c3 0301 	rsbmi	r3, r3, #1
 80073d6:	2300      	movpl	r3, #0
 80073d8:	9304      	strmi	r3, [sp, #16]
 80073da:	2300      	movmi	r3, #0
 80073dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80073de:	bf54      	ite	pl
 80073e0:	9304      	strpl	r3, [sp, #16]
 80073e2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80073e4:	2f00      	cmp	r7, #0
 80073e6:	db3b      	blt.n	8007460 <_dtoa_r+0x220>
 80073e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ea:	970e      	str	r7, [sp, #56]	@ 0x38
 80073ec:	443b      	add	r3, r7
 80073ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80073f0:	2300      	movs	r3, #0
 80073f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80073f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073f6:	2b09      	cmp	r3, #9
 80073f8:	d865      	bhi.n	80074c6 <_dtoa_r+0x286>
 80073fa:	2b05      	cmp	r3, #5
 80073fc:	bfc4      	itt	gt
 80073fe:	3b04      	subgt	r3, #4
 8007400:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007402:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007404:	bfc8      	it	gt
 8007406:	2400      	movgt	r4, #0
 8007408:	f1a3 0302 	sub.w	r3, r3, #2
 800740c:	bfd8      	it	le
 800740e:	2401      	movle	r4, #1
 8007410:	2b03      	cmp	r3, #3
 8007412:	d864      	bhi.n	80074de <_dtoa_r+0x29e>
 8007414:	e8df f003 	tbb	[pc, r3]
 8007418:	2c385553 	.word	0x2c385553
 800741c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007420:	441e      	add	r6, r3
 8007422:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007426:	2b20      	cmp	r3, #32
 8007428:	bfc1      	itttt	gt
 800742a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800742e:	fa08 f803 	lslgt.w	r8, r8, r3
 8007432:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007436:	fa24 f303 	lsrgt.w	r3, r4, r3
 800743a:	bfd6      	itet	le
 800743c:	f1c3 0320 	rsble	r3, r3, #32
 8007440:	ea48 0003 	orrgt.w	r0, r8, r3
 8007444:	fa04 f003 	lslle.w	r0, r4, r3
 8007448:	f7f8 ffcc 	bl	80003e4 <__aeabi_ui2d>
 800744c:	2201      	movs	r2, #1
 800744e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007452:	3e01      	subs	r6, #1
 8007454:	9212      	str	r2, [sp, #72]	@ 0x48
 8007456:	e774      	b.n	8007342 <_dtoa_r+0x102>
 8007458:	2301      	movs	r3, #1
 800745a:	e7b5      	b.n	80073c8 <_dtoa_r+0x188>
 800745c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800745e:	e7b4      	b.n	80073ca <_dtoa_r+0x18a>
 8007460:	9b04      	ldr	r3, [sp, #16]
 8007462:	1bdb      	subs	r3, r3, r7
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	427b      	negs	r3, r7
 8007468:	930a      	str	r3, [sp, #40]	@ 0x28
 800746a:	2300      	movs	r3, #0
 800746c:	930e      	str	r3, [sp, #56]	@ 0x38
 800746e:	e7c1      	b.n	80073f4 <_dtoa_r+0x1b4>
 8007470:	2301      	movs	r3, #1
 8007472:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007474:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007476:	eb07 0b03 	add.w	fp, r7, r3
 800747a:	f10b 0301 	add.w	r3, fp, #1
 800747e:	2b01      	cmp	r3, #1
 8007480:	9308      	str	r3, [sp, #32]
 8007482:	bfb8      	it	lt
 8007484:	2301      	movlt	r3, #1
 8007486:	e006      	b.n	8007496 <_dtoa_r+0x256>
 8007488:	2301      	movs	r3, #1
 800748a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800748c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800748e:	2b00      	cmp	r3, #0
 8007490:	dd28      	ble.n	80074e4 <_dtoa_r+0x2a4>
 8007492:	469b      	mov	fp, r3
 8007494:	9308      	str	r3, [sp, #32]
 8007496:	2100      	movs	r1, #0
 8007498:	2204      	movs	r2, #4
 800749a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800749e:	f102 0514 	add.w	r5, r2, #20
 80074a2:	429d      	cmp	r5, r3
 80074a4:	d926      	bls.n	80074f4 <_dtoa_r+0x2b4>
 80074a6:	6041      	str	r1, [r0, #4]
 80074a8:	4648      	mov	r0, r9
 80074aa:	f000 fd9b 	bl	8007fe4 <_Balloc>
 80074ae:	4682      	mov	sl, r0
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d143      	bne.n	800753c <_dtoa_r+0x2fc>
 80074b4:	4602      	mov	r2, r0
 80074b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80074ba:	4b1f      	ldr	r3, [pc, #124]	@ (8007538 <_dtoa_r+0x2f8>)
 80074bc:	e6d4      	b.n	8007268 <_dtoa_r+0x28>
 80074be:	2300      	movs	r3, #0
 80074c0:	e7e3      	b.n	800748a <_dtoa_r+0x24a>
 80074c2:	2300      	movs	r3, #0
 80074c4:	e7d5      	b.n	8007472 <_dtoa_r+0x232>
 80074c6:	2401      	movs	r4, #1
 80074c8:	2300      	movs	r3, #0
 80074ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80074ce:	f04f 3bff 	mov.w	fp, #4294967295
 80074d2:	2200      	movs	r2, #0
 80074d4:	2312      	movs	r3, #18
 80074d6:	f8cd b020 	str.w	fp, [sp, #32]
 80074da:	9221      	str	r2, [sp, #132]	@ 0x84
 80074dc:	e7db      	b.n	8007496 <_dtoa_r+0x256>
 80074de:	2301      	movs	r3, #1
 80074e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074e2:	e7f4      	b.n	80074ce <_dtoa_r+0x28e>
 80074e4:	f04f 0b01 	mov.w	fp, #1
 80074e8:	465b      	mov	r3, fp
 80074ea:	f8cd b020 	str.w	fp, [sp, #32]
 80074ee:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80074f2:	e7d0      	b.n	8007496 <_dtoa_r+0x256>
 80074f4:	3101      	adds	r1, #1
 80074f6:	0052      	lsls	r2, r2, #1
 80074f8:	e7d1      	b.n	800749e <_dtoa_r+0x25e>
 80074fa:	bf00      	nop
 80074fc:	f3af 8000 	nop.w
 8007500:	636f4361 	.word	0x636f4361
 8007504:	3fd287a7 	.word	0x3fd287a7
 8007508:	8b60c8b3 	.word	0x8b60c8b3
 800750c:	3fc68a28 	.word	0x3fc68a28
 8007510:	509f79fb 	.word	0x509f79fb
 8007514:	3fd34413 	.word	0x3fd34413
 8007518:	0800a57f 	.word	0x0800a57f
 800751c:	0800a596 	.word	0x0800a596
 8007520:	7ff00000 	.word	0x7ff00000
 8007524:	0800a57b 	.word	0x0800a57b
 8007528:	0800a54f 	.word	0x0800a54f
 800752c:	0800a54e 	.word	0x0800a54e
 8007530:	3ff80000 	.word	0x3ff80000
 8007534:	0800a6e8 	.word	0x0800a6e8
 8007538:	0800a5ee 	.word	0x0800a5ee
 800753c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007540:	6018      	str	r0, [r3, #0]
 8007542:	9b08      	ldr	r3, [sp, #32]
 8007544:	2b0e      	cmp	r3, #14
 8007546:	f200 80a1 	bhi.w	800768c <_dtoa_r+0x44c>
 800754a:	2c00      	cmp	r4, #0
 800754c:	f000 809e 	beq.w	800768c <_dtoa_r+0x44c>
 8007550:	2f00      	cmp	r7, #0
 8007552:	dd33      	ble.n	80075bc <_dtoa_r+0x37c>
 8007554:	4b9c      	ldr	r3, [pc, #624]	@ (80077c8 <_dtoa_r+0x588>)
 8007556:	f007 020f 	and.w	r2, r7, #15
 800755a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800755e:	05f8      	lsls	r0, r7, #23
 8007560:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007564:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800756c:	d516      	bpl.n	800759c <_dtoa_r+0x35c>
 800756e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007572:	4b96      	ldr	r3, [pc, #600]	@ (80077cc <_dtoa_r+0x58c>)
 8007574:	2603      	movs	r6, #3
 8007576:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800757a:	f7f9 f8d7 	bl	800072c <__aeabi_ddiv>
 800757e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007582:	f004 040f 	and.w	r4, r4, #15
 8007586:	4d91      	ldr	r5, [pc, #580]	@ (80077cc <_dtoa_r+0x58c>)
 8007588:	b954      	cbnz	r4, 80075a0 <_dtoa_r+0x360>
 800758a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800758e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007592:	f7f9 f8cb 	bl	800072c <__aeabi_ddiv>
 8007596:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800759a:	e028      	b.n	80075ee <_dtoa_r+0x3ae>
 800759c:	2602      	movs	r6, #2
 800759e:	e7f2      	b.n	8007586 <_dtoa_r+0x346>
 80075a0:	07e1      	lsls	r1, r4, #31
 80075a2:	d508      	bpl.n	80075b6 <_dtoa_r+0x376>
 80075a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075ac:	f7f8 ff94 	bl	80004d8 <__aeabi_dmul>
 80075b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075b4:	3601      	adds	r6, #1
 80075b6:	1064      	asrs	r4, r4, #1
 80075b8:	3508      	adds	r5, #8
 80075ba:	e7e5      	b.n	8007588 <_dtoa_r+0x348>
 80075bc:	f000 80af 	beq.w	800771e <_dtoa_r+0x4de>
 80075c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075c4:	427c      	negs	r4, r7
 80075c6:	4b80      	ldr	r3, [pc, #512]	@ (80077c8 <_dtoa_r+0x588>)
 80075c8:	f004 020f 	and.w	r2, r4, #15
 80075cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f7f8 ff80 	bl	80004d8 <__aeabi_dmul>
 80075d8:	2602      	movs	r6, #2
 80075da:	2300      	movs	r3, #0
 80075dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075e0:	4d7a      	ldr	r5, [pc, #488]	@ (80077cc <_dtoa_r+0x58c>)
 80075e2:	1124      	asrs	r4, r4, #4
 80075e4:	2c00      	cmp	r4, #0
 80075e6:	f040 808f 	bne.w	8007708 <_dtoa_r+0x4c8>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1d3      	bne.n	8007596 <_dtoa_r+0x356>
 80075ee:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80075f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 8094 	beq.w	8007722 <_dtoa_r+0x4e2>
 80075fa:	2200      	movs	r2, #0
 80075fc:	4620      	mov	r0, r4
 80075fe:	4629      	mov	r1, r5
 8007600:	4b73      	ldr	r3, [pc, #460]	@ (80077d0 <_dtoa_r+0x590>)
 8007602:	f7f9 f9db 	bl	80009bc <__aeabi_dcmplt>
 8007606:	2800      	cmp	r0, #0
 8007608:	f000 808b 	beq.w	8007722 <_dtoa_r+0x4e2>
 800760c:	9b08      	ldr	r3, [sp, #32]
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 8087 	beq.w	8007722 <_dtoa_r+0x4e2>
 8007614:	f1bb 0f00 	cmp.w	fp, #0
 8007618:	dd34      	ble.n	8007684 <_dtoa_r+0x444>
 800761a:	4620      	mov	r0, r4
 800761c:	2200      	movs	r2, #0
 800761e:	4629      	mov	r1, r5
 8007620:	4b6c      	ldr	r3, [pc, #432]	@ (80077d4 <_dtoa_r+0x594>)
 8007622:	f7f8 ff59 	bl	80004d8 <__aeabi_dmul>
 8007626:	465c      	mov	r4, fp
 8007628:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800762c:	f107 38ff 	add.w	r8, r7, #4294967295
 8007630:	3601      	adds	r6, #1
 8007632:	4630      	mov	r0, r6
 8007634:	f7f8 fee6 	bl	8000404 <__aeabi_i2d>
 8007638:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800763c:	f7f8 ff4c 	bl	80004d8 <__aeabi_dmul>
 8007640:	2200      	movs	r2, #0
 8007642:	4b65      	ldr	r3, [pc, #404]	@ (80077d8 <_dtoa_r+0x598>)
 8007644:	f7f8 fd92 	bl	800016c <__adddf3>
 8007648:	4605      	mov	r5, r0
 800764a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800764e:	2c00      	cmp	r4, #0
 8007650:	d16a      	bne.n	8007728 <_dtoa_r+0x4e8>
 8007652:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007656:	2200      	movs	r2, #0
 8007658:	4b60      	ldr	r3, [pc, #384]	@ (80077dc <_dtoa_r+0x59c>)
 800765a:	f7f8 fd85 	bl	8000168 <__aeabi_dsub>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007666:	462a      	mov	r2, r5
 8007668:	4633      	mov	r3, r6
 800766a:	f7f9 f9c5 	bl	80009f8 <__aeabi_dcmpgt>
 800766e:	2800      	cmp	r0, #0
 8007670:	f040 8298 	bne.w	8007ba4 <_dtoa_r+0x964>
 8007674:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007678:	462a      	mov	r2, r5
 800767a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800767e:	f7f9 f99d 	bl	80009bc <__aeabi_dcmplt>
 8007682:	bb38      	cbnz	r0, 80076d4 <_dtoa_r+0x494>
 8007684:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007688:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800768c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800768e:	2b00      	cmp	r3, #0
 8007690:	f2c0 8157 	blt.w	8007942 <_dtoa_r+0x702>
 8007694:	2f0e      	cmp	r7, #14
 8007696:	f300 8154 	bgt.w	8007942 <_dtoa_r+0x702>
 800769a:	4b4b      	ldr	r3, [pc, #300]	@ (80077c8 <_dtoa_r+0x588>)
 800769c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f280 80e5 	bge.w	800787a <_dtoa_r+0x63a>
 80076b0:	9b08      	ldr	r3, [sp, #32]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f300 80e1 	bgt.w	800787a <_dtoa_r+0x63a>
 80076b8:	d10c      	bne.n	80076d4 <_dtoa_r+0x494>
 80076ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076be:	2200      	movs	r2, #0
 80076c0:	4b46      	ldr	r3, [pc, #280]	@ (80077dc <_dtoa_r+0x59c>)
 80076c2:	f7f8 ff09 	bl	80004d8 <__aeabi_dmul>
 80076c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076ca:	f7f9 f98b 	bl	80009e4 <__aeabi_dcmpge>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	f000 8266 	beq.w	8007ba0 <_dtoa_r+0x960>
 80076d4:	2400      	movs	r4, #0
 80076d6:	4625      	mov	r5, r4
 80076d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076da:	4656      	mov	r6, sl
 80076dc:	ea6f 0803 	mvn.w	r8, r3
 80076e0:	2700      	movs	r7, #0
 80076e2:	4621      	mov	r1, r4
 80076e4:	4648      	mov	r0, r9
 80076e6:	f000 fcbd 	bl	8008064 <_Bfree>
 80076ea:	2d00      	cmp	r5, #0
 80076ec:	f000 80bd 	beq.w	800786a <_dtoa_r+0x62a>
 80076f0:	b12f      	cbz	r7, 80076fe <_dtoa_r+0x4be>
 80076f2:	42af      	cmp	r7, r5
 80076f4:	d003      	beq.n	80076fe <_dtoa_r+0x4be>
 80076f6:	4639      	mov	r1, r7
 80076f8:	4648      	mov	r0, r9
 80076fa:	f000 fcb3 	bl	8008064 <_Bfree>
 80076fe:	4629      	mov	r1, r5
 8007700:	4648      	mov	r0, r9
 8007702:	f000 fcaf 	bl	8008064 <_Bfree>
 8007706:	e0b0      	b.n	800786a <_dtoa_r+0x62a>
 8007708:	07e2      	lsls	r2, r4, #31
 800770a:	d505      	bpl.n	8007718 <_dtoa_r+0x4d8>
 800770c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007710:	f7f8 fee2 	bl	80004d8 <__aeabi_dmul>
 8007714:	2301      	movs	r3, #1
 8007716:	3601      	adds	r6, #1
 8007718:	1064      	asrs	r4, r4, #1
 800771a:	3508      	adds	r5, #8
 800771c:	e762      	b.n	80075e4 <_dtoa_r+0x3a4>
 800771e:	2602      	movs	r6, #2
 8007720:	e765      	b.n	80075ee <_dtoa_r+0x3ae>
 8007722:	46b8      	mov	r8, r7
 8007724:	9c08      	ldr	r4, [sp, #32]
 8007726:	e784      	b.n	8007632 <_dtoa_r+0x3f2>
 8007728:	4b27      	ldr	r3, [pc, #156]	@ (80077c8 <_dtoa_r+0x588>)
 800772a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800772c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007730:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007734:	4454      	add	r4, sl
 8007736:	2900      	cmp	r1, #0
 8007738:	d054      	beq.n	80077e4 <_dtoa_r+0x5a4>
 800773a:	2000      	movs	r0, #0
 800773c:	4928      	ldr	r1, [pc, #160]	@ (80077e0 <_dtoa_r+0x5a0>)
 800773e:	f7f8 fff5 	bl	800072c <__aeabi_ddiv>
 8007742:	4633      	mov	r3, r6
 8007744:	462a      	mov	r2, r5
 8007746:	f7f8 fd0f 	bl	8000168 <__aeabi_dsub>
 800774a:	4656      	mov	r6, sl
 800774c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007750:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007754:	f7f9 f970 	bl	8000a38 <__aeabi_d2iz>
 8007758:	4605      	mov	r5, r0
 800775a:	f7f8 fe53 	bl	8000404 <__aeabi_i2d>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007766:	f7f8 fcff 	bl	8000168 <__aeabi_dsub>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	3530      	adds	r5, #48	@ 0x30
 8007770:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007774:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007778:	f806 5b01 	strb.w	r5, [r6], #1
 800777c:	f7f9 f91e 	bl	80009bc <__aeabi_dcmplt>
 8007780:	2800      	cmp	r0, #0
 8007782:	d172      	bne.n	800786a <_dtoa_r+0x62a>
 8007784:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007788:	2000      	movs	r0, #0
 800778a:	4911      	ldr	r1, [pc, #68]	@ (80077d0 <_dtoa_r+0x590>)
 800778c:	f7f8 fcec 	bl	8000168 <__aeabi_dsub>
 8007790:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007794:	f7f9 f912 	bl	80009bc <__aeabi_dcmplt>
 8007798:	2800      	cmp	r0, #0
 800779a:	f040 80b4 	bne.w	8007906 <_dtoa_r+0x6c6>
 800779e:	42a6      	cmp	r6, r4
 80077a0:	f43f af70 	beq.w	8007684 <_dtoa_r+0x444>
 80077a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077a8:	2200      	movs	r2, #0
 80077aa:	4b0a      	ldr	r3, [pc, #40]	@ (80077d4 <_dtoa_r+0x594>)
 80077ac:	f7f8 fe94 	bl	80004d8 <__aeabi_dmul>
 80077b0:	2200      	movs	r2, #0
 80077b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077ba:	4b06      	ldr	r3, [pc, #24]	@ (80077d4 <_dtoa_r+0x594>)
 80077bc:	f7f8 fe8c 	bl	80004d8 <__aeabi_dmul>
 80077c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80077c4:	e7c4      	b.n	8007750 <_dtoa_r+0x510>
 80077c6:	bf00      	nop
 80077c8:	0800a6e8 	.word	0x0800a6e8
 80077cc:	0800a6c0 	.word	0x0800a6c0
 80077d0:	3ff00000 	.word	0x3ff00000
 80077d4:	40240000 	.word	0x40240000
 80077d8:	401c0000 	.word	0x401c0000
 80077dc:	40140000 	.word	0x40140000
 80077e0:	3fe00000 	.word	0x3fe00000
 80077e4:	4631      	mov	r1, r6
 80077e6:	4628      	mov	r0, r5
 80077e8:	f7f8 fe76 	bl	80004d8 <__aeabi_dmul>
 80077ec:	4656      	mov	r6, sl
 80077ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077f2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80077f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077f8:	f7f9 f91e 	bl	8000a38 <__aeabi_d2iz>
 80077fc:	4605      	mov	r5, r0
 80077fe:	f7f8 fe01 	bl	8000404 <__aeabi_i2d>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800780a:	f7f8 fcad 	bl	8000168 <__aeabi_dsub>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	3530      	adds	r5, #48	@ 0x30
 8007814:	f806 5b01 	strb.w	r5, [r6], #1
 8007818:	42a6      	cmp	r6, r4
 800781a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800781e:	f04f 0200 	mov.w	r2, #0
 8007822:	d124      	bne.n	800786e <_dtoa_r+0x62e>
 8007824:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007828:	4bae      	ldr	r3, [pc, #696]	@ (8007ae4 <_dtoa_r+0x8a4>)
 800782a:	f7f8 fc9f 	bl	800016c <__adddf3>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007836:	f7f9 f8df 	bl	80009f8 <__aeabi_dcmpgt>
 800783a:	2800      	cmp	r0, #0
 800783c:	d163      	bne.n	8007906 <_dtoa_r+0x6c6>
 800783e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007842:	2000      	movs	r0, #0
 8007844:	49a7      	ldr	r1, [pc, #668]	@ (8007ae4 <_dtoa_r+0x8a4>)
 8007846:	f7f8 fc8f 	bl	8000168 <__aeabi_dsub>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007852:	f7f9 f8b3 	bl	80009bc <__aeabi_dcmplt>
 8007856:	2800      	cmp	r0, #0
 8007858:	f43f af14 	beq.w	8007684 <_dtoa_r+0x444>
 800785c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800785e:	1e73      	subs	r3, r6, #1
 8007860:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007862:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007866:	2b30      	cmp	r3, #48	@ 0x30
 8007868:	d0f8      	beq.n	800785c <_dtoa_r+0x61c>
 800786a:	4647      	mov	r7, r8
 800786c:	e03b      	b.n	80078e6 <_dtoa_r+0x6a6>
 800786e:	4b9e      	ldr	r3, [pc, #632]	@ (8007ae8 <_dtoa_r+0x8a8>)
 8007870:	f7f8 fe32 	bl	80004d8 <__aeabi_dmul>
 8007874:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007878:	e7bc      	b.n	80077f4 <_dtoa_r+0x5b4>
 800787a:	4656      	mov	r6, sl
 800787c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007884:	4620      	mov	r0, r4
 8007886:	4629      	mov	r1, r5
 8007888:	f7f8 ff50 	bl	800072c <__aeabi_ddiv>
 800788c:	f7f9 f8d4 	bl	8000a38 <__aeabi_d2iz>
 8007890:	4680      	mov	r8, r0
 8007892:	f7f8 fdb7 	bl	8000404 <__aeabi_i2d>
 8007896:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800789a:	f7f8 fe1d 	bl	80004d8 <__aeabi_dmul>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4620      	mov	r0, r4
 80078a4:	4629      	mov	r1, r5
 80078a6:	f7f8 fc5f 	bl	8000168 <__aeabi_dsub>
 80078aa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80078ae:	9d08      	ldr	r5, [sp, #32]
 80078b0:	f806 4b01 	strb.w	r4, [r6], #1
 80078b4:	eba6 040a 	sub.w	r4, r6, sl
 80078b8:	42a5      	cmp	r5, r4
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	d133      	bne.n	8007928 <_dtoa_r+0x6e8>
 80078c0:	f7f8 fc54 	bl	800016c <__adddf3>
 80078c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078c8:	4604      	mov	r4, r0
 80078ca:	460d      	mov	r5, r1
 80078cc:	f7f9 f894 	bl	80009f8 <__aeabi_dcmpgt>
 80078d0:	b9c0      	cbnz	r0, 8007904 <_dtoa_r+0x6c4>
 80078d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078d6:	4620      	mov	r0, r4
 80078d8:	4629      	mov	r1, r5
 80078da:	f7f9 f865 	bl	80009a8 <__aeabi_dcmpeq>
 80078de:	b110      	cbz	r0, 80078e6 <_dtoa_r+0x6a6>
 80078e0:	f018 0f01 	tst.w	r8, #1
 80078e4:	d10e      	bne.n	8007904 <_dtoa_r+0x6c4>
 80078e6:	4648      	mov	r0, r9
 80078e8:	9903      	ldr	r1, [sp, #12]
 80078ea:	f000 fbbb 	bl	8008064 <_Bfree>
 80078ee:	2300      	movs	r3, #0
 80078f0:	7033      	strb	r3, [r6, #0]
 80078f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80078f4:	3701      	adds	r7, #1
 80078f6:	601f      	str	r7, [r3, #0]
 80078f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 824b 	beq.w	8007d96 <_dtoa_r+0xb56>
 8007900:	601e      	str	r6, [r3, #0]
 8007902:	e248      	b.n	8007d96 <_dtoa_r+0xb56>
 8007904:	46b8      	mov	r8, r7
 8007906:	4633      	mov	r3, r6
 8007908:	461e      	mov	r6, r3
 800790a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800790e:	2a39      	cmp	r2, #57	@ 0x39
 8007910:	d106      	bne.n	8007920 <_dtoa_r+0x6e0>
 8007912:	459a      	cmp	sl, r3
 8007914:	d1f8      	bne.n	8007908 <_dtoa_r+0x6c8>
 8007916:	2230      	movs	r2, #48	@ 0x30
 8007918:	f108 0801 	add.w	r8, r8, #1
 800791c:	f88a 2000 	strb.w	r2, [sl]
 8007920:	781a      	ldrb	r2, [r3, #0]
 8007922:	3201      	adds	r2, #1
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	e7a0      	b.n	800786a <_dtoa_r+0x62a>
 8007928:	2200      	movs	r2, #0
 800792a:	4b6f      	ldr	r3, [pc, #444]	@ (8007ae8 <_dtoa_r+0x8a8>)
 800792c:	f7f8 fdd4 	bl	80004d8 <__aeabi_dmul>
 8007930:	2200      	movs	r2, #0
 8007932:	2300      	movs	r3, #0
 8007934:	4604      	mov	r4, r0
 8007936:	460d      	mov	r5, r1
 8007938:	f7f9 f836 	bl	80009a8 <__aeabi_dcmpeq>
 800793c:	2800      	cmp	r0, #0
 800793e:	d09f      	beq.n	8007880 <_dtoa_r+0x640>
 8007940:	e7d1      	b.n	80078e6 <_dtoa_r+0x6a6>
 8007942:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007944:	2a00      	cmp	r2, #0
 8007946:	f000 80ea 	beq.w	8007b1e <_dtoa_r+0x8de>
 800794a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800794c:	2a01      	cmp	r2, #1
 800794e:	f300 80cd 	bgt.w	8007aec <_dtoa_r+0x8ac>
 8007952:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007954:	2a00      	cmp	r2, #0
 8007956:	f000 80c1 	beq.w	8007adc <_dtoa_r+0x89c>
 800795a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800795e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007960:	9e04      	ldr	r6, [sp, #16]
 8007962:	9a04      	ldr	r2, [sp, #16]
 8007964:	2101      	movs	r1, #1
 8007966:	441a      	add	r2, r3
 8007968:	9204      	str	r2, [sp, #16]
 800796a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800796c:	4648      	mov	r0, r9
 800796e:	441a      	add	r2, r3
 8007970:	9209      	str	r2, [sp, #36]	@ 0x24
 8007972:	f000 fc2b 	bl	80081cc <__i2b>
 8007976:	4605      	mov	r5, r0
 8007978:	b166      	cbz	r6, 8007994 <_dtoa_r+0x754>
 800797a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800797c:	2b00      	cmp	r3, #0
 800797e:	dd09      	ble.n	8007994 <_dtoa_r+0x754>
 8007980:	42b3      	cmp	r3, r6
 8007982:	bfa8      	it	ge
 8007984:	4633      	movge	r3, r6
 8007986:	9a04      	ldr	r2, [sp, #16]
 8007988:	1af6      	subs	r6, r6, r3
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	9204      	str	r2, [sp, #16]
 800798e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	9309      	str	r3, [sp, #36]	@ 0x24
 8007994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007996:	b30b      	cbz	r3, 80079dc <_dtoa_r+0x79c>
 8007998:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 80c6 	beq.w	8007b2c <_dtoa_r+0x8ec>
 80079a0:	2c00      	cmp	r4, #0
 80079a2:	f000 80c0 	beq.w	8007b26 <_dtoa_r+0x8e6>
 80079a6:	4629      	mov	r1, r5
 80079a8:	4622      	mov	r2, r4
 80079aa:	4648      	mov	r0, r9
 80079ac:	f000 fcc6 	bl	800833c <__pow5mult>
 80079b0:	9a03      	ldr	r2, [sp, #12]
 80079b2:	4601      	mov	r1, r0
 80079b4:	4605      	mov	r5, r0
 80079b6:	4648      	mov	r0, r9
 80079b8:	f000 fc1e 	bl	80081f8 <__multiply>
 80079bc:	9903      	ldr	r1, [sp, #12]
 80079be:	4680      	mov	r8, r0
 80079c0:	4648      	mov	r0, r9
 80079c2:	f000 fb4f 	bl	8008064 <_Bfree>
 80079c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079c8:	1b1b      	subs	r3, r3, r4
 80079ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80079cc:	f000 80b1 	beq.w	8007b32 <_dtoa_r+0x8f2>
 80079d0:	4641      	mov	r1, r8
 80079d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079d4:	4648      	mov	r0, r9
 80079d6:	f000 fcb1 	bl	800833c <__pow5mult>
 80079da:	9003      	str	r0, [sp, #12]
 80079dc:	2101      	movs	r1, #1
 80079de:	4648      	mov	r0, r9
 80079e0:	f000 fbf4 	bl	80081cc <__i2b>
 80079e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079e6:	4604      	mov	r4, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 81d8 	beq.w	8007d9e <_dtoa_r+0xb5e>
 80079ee:	461a      	mov	r2, r3
 80079f0:	4601      	mov	r1, r0
 80079f2:	4648      	mov	r0, r9
 80079f4:	f000 fca2 	bl	800833c <__pow5mult>
 80079f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80079fa:	4604      	mov	r4, r0
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	f300 809f 	bgt.w	8007b40 <_dtoa_r+0x900>
 8007a02:	9b06      	ldr	r3, [sp, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f040 8097 	bne.w	8007b38 <_dtoa_r+0x8f8>
 8007a0a:	9b07      	ldr	r3, [sp, #28]
 8007a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f040 8093 	bne.w	8007b3c <_dtoa_r+0x8fc>
 8007a16:	9b07      	ldr	r3, [sp, #28]
 8007a18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a1c:	0d1b      	lsrs	r3, r3, #20
 8007a1e:	051b      	lsls	r3, r3, #20
 8007a20:	b133      	cbz	r3, 8007a30 <_dtoa_r+0x7f0>
 8007a22:	9b04      	ldr	r3, [sp, #16]
 8007a24:	3301      	adds	r3, #1
 8007a26:	9304      	str	r3, [sp, #16]
 8007a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a2e:	2301      	movs	r3, #1
 8007a30:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 81b8 	beq.w	8007daa <_dtoa_r+0xb6a>
 8007a3a:	6923      	ldr	r3, [r4, #16]
 8007a3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a40:	6918      	ldr	r0, [r3, #16]
 8007a42:	f000 fb77 	bl	8008134 <__hi0bits>
 8007a46:	f1c0 0020 	rsb	r0, r0, #32
 8007a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a4c:	4418      	add	r0, r3
 8007a4e:	f010 001f 	ands.w	r0, r0, #31
 8007a52:	f000 8082 	beq.w	8007b5a <_dtoa_r+0x91a>
 8007a56:	f1c0 0320 	rsb	r3, r0, #32
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	dd73      	ble.n	8007b46 <_dtoa_r+0x906>
 8007a5e:	9b04      	ldr	r3, [sp, #16]
 8007a60:	f1c0 001c 	rsb	r0, r0, #28
 8007a64:	4403      	add	r3, r0
 8007a66:	9304      	str	r3, [sp, #16]
 8007a68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a6a:	4406      	add	r6, r0
 8007a6c:	4403      	add	r3, r0
 8007a6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a70:	9b04      	ldr	r3, [sp, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	dd05      	ble.n	8007a82 <_dtoa_r+0x842>
 8007a76:	461a      	mov	r2, r3
 8007a78:	4648      	mov	r0, r9
 8007a7a:	9903      	ldr	r1, [sp, #12]
 8007a7c:	f000 fcb8 	bl	80083f0 <__lshift>
 8007a80:	9003      	str	r0, [sp, #12]
 8007a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	dd05      	ble.n	8007a94 <_dtoa_r+0x854>
 8007a88:	4621      	mov	r1, r4
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	4648      	mov	r0, r9
 8007a8e:	f000 fcaf 	bl	80083f0 <__lshift>
 8007a92:	4604      	mov	r4, r0
 8007a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d061      	beq.n	8007b5e <_dtoa_r+0x91e>
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	9803      	ldr	r0, [sp, #12]
 8007a9e:	f000 fd13 	bl	80084c8 <__mcmp>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	da5b      	bge.n	8007b5e <_dtoa_r+0x91e>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	220a      	movs	r2, #10
 8007aaa:	4648      	mov	r0, r9
 8007aac:	9903      	ldr	r1, [sp, #12]
 8007aae:	f000 fafb 	bl	80080a8 <__multadd>
 8007ab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ab4:	f107 38ff 	add.w	r8, r7, #4294967295
 8007ab8:	9003      	str	r0, [sp, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 8177 	beq.w	8007dae <_dtoa_r+0xb6e>
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	220a      	movs	r2, #10
 8007ac6:	4648      	mov	r0, r9
 8007ac8:	f000 faee 	bl	80080a8 <__multadd>
 8007acc:	f1bb 0f00 	cmp.w	fp, #0
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	dc6f      	bgt.n	8007bb4 <_dtoa_r+0x974>
 8007ad4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	dc49      	bgt.n	8007b6e <_dtoa_r+0x92e>
 8007ada:	e06b      	b.n	8007bb4 <_dtoa_r+0x974>
 8007adc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ade:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ae2:	e73c      	b.n	800795e <_dtoa_r+0x71e>
 8007ae4:	3fe00000 	.word	0x3fe00000
 8007ae8:	40240000 	.word	0x40240000
 8007aec:	9b08      	ldr	r3, [sp, #32]
 8007aee:	1e5c      	subs	r4, r3, #1
 8007af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007af2:	42a3      	cmp	r3, r4
 8007af4:	db09      	blt.n	8007b0a <_dtoa_r+0x8ca>
 8007af6:	1b1c      	subs	r4, r3, r4
 8007af8:	9b08      	ldr	r3, [sp, #32]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f6bf af30 	bge.w	8007960 <_dtoa_r+0x720>
 8007b00:	9b04      	ldr	r3, [sp, #16]
 8007b02:	9a08      	ldr	r2, [sp, #32]
 8007b04:	1a9e      	subs	r6, r3, r2
 8007b06:	2300      	movs	r3, #0
 8007b08:	e72b      	b.n	8007962 <_dtoa_r+0x722>
 8007b0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b0e:	1ae3      	subs	r3, r4, r3
 8007b10:	441a      	add	r2, r3
 8007b12:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b14:	9e04      	ldr	r6, [sp, #16]
 8007b16:	2400      	movs	r4, #0
 8007b18:	9b08      	ldr	r3, [sp, #32]
 8007b1a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b1c:	e721      	b.n	8007962 <_dtoa_r+0x722>
 8007b1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b20:	9e04      	ldr	r6, [sp, #16]
 8007b22:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b24:	e728      	b.n	8007978 <_dtoa_r+0x738>
 8007b26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b2a:	e751      	b.n	80079d0 <_dtoa_r+0x790>
 8007b2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b2e:	9903      	ldr	r1, [sp, #12]
 8007b30:	e750      	b.n	80079d4 <_dtoa_r+0x794>
 8007b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b36:	e751      	b.n	80079dc <_dtoa_r+0x79c>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	e779      	b.n	8007a30 <_dtoa_r+0x7f0>
 8007b3c:	9b06      	ldr	r3, [sp, #24]
 8007b3e:	e777      	b.n	8007a30 <_dtoa_r+0x7f0>
 8007b40:	2300      	movs	r3, #0
 8007b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b44:	e779      	b.n	8007a3a <_dtoa_r+0x7fa>
 8007b46:	d093      	beq.n	8007a70 <_dtoa_r+0x830>
 8007b48:	9a04      	ldr	r2, [sp, #16]
 8007b4a:	331c      	adds	r3, #28
 8007b4c:	441a      	add	r2, r3
 8007b4e:	9204      	str	r2, [sp, #16]
 8007b50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b52:	441e      	add	r6, r3
 8007b54:	441a      	add	r2, r3
 8007b56:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b58:	e78a      	b.n	8007a70 <_dtoa_r+0x830>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	e7f4      	b.n	8007b48 <_dtoa_r+0x908>
 8007b5e:	9b08      	ldr	r3, [sp, #32]
 8007b60:	46b8      	mov	r8, r7
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	dc20      	bgt.n	8007ba8 <_dtoa_r+0x968>
 8007b66:	469b      	mov	fp, r3
 8007b68:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	dd1e      	ble.n	8007bac <_dtoa_r+0x96c>
 8007b6e:	f1bb 0f00 	cmp.w	fp, #0
 8007b72:	f47f adb1 	bne.w	80076d8 <_dtoa_r+0x498>
 8007b76:	4621      	mov	r1, r4
 8007b78:	465b      	mov	r3, fp
 8007b7a:	2205      	movs	r2, #5
 8007b7c:	4648      	mov	r0, r9
 8007b7e:	f000 fa93 	bl	80080a8 <__multadd>
 8007b82:	4601      	mov	r1, r0
 8007b84:	4604      	mov	r4, r0
 8007b86:	9803      	ldr	r0, [sp, #12]
 8007b88:	f000 fc9e 	bl	80084c8 <__mcmp>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	f77f ada3 	ble.w	80076d8 <_dtoa_r+0x498>
 8007b92:	4656      	mov	r6, sl
 8007b94:	2331      	movs	r3, #49	@ 0x31
 8007b96:	f108 0801 	add.w	r8, r8, #1
 8007b9a:	f806 3b01 	strb.w	r3, [r6], #1
 8007b9e:	e59f      	b.n	80076e0 <_dtoa_r+0x4a0>
 8007ba0:	46b8      	mov	r8, r7
 8007ba2:	9c08      	ldr	r4, [sp, #32]
 8007ba4:	4625      	mov	r5, r4
 8007ba6:	e7f4      	b.n	8007b92 <_dtoa_r+0x952>
 8007ba8:	f8dd b020 	ldr.w	fp, [sp, #32]
 8007bac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 8101 	beq.w	8007db6 <_dtoa_r+0xb76>
 8007bb4:	2e00      	cmp	r6, #0
 8007bb6:	dd05      	ble.n	8007bc4 <_dtoa_r+0x984>
 8007bb8:	4629      	mov	r1, r5
 8007bba:	4632      	mov	r2, r6
 8007bbc:	4648      	mov	r0, r9
 8007bbe:	f000 fc17 	bl	80083f0 <__lshift>
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d05c      	beq.n	8007c84 <_dtoa_r+0xa44>
 8007bca:	4648      	mov	r0, r9
 8007bcc:	6869      	ldr	r1, [r5, #4]
 8007bce:	f000 fa09 	bl	8007fe4 <_Balloc>
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	b928      	cbnz	r0, 8007be2 <_dtoa_r+0x9a2>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007bdc:	4b80      	ldr	r3, [pc, #512]	@ (8007de0 <_dtoa_r+0xba0>)
 8007bde:	f7ff bb43 	b.w	8007268 <_dtoa_r+0x28>
 8007be2:	692a      	ldr	r2, [r5, #16]
 8007be4:	f105 010c 	add.w	r1, r5, #12
 8007be8:	3202      	adds	r2, #2
 8007bea:	0092      	lsls	r2, r2, #2
 8007bec:	300c      	adds	r0, #12
 8007bee:	f7ff fa8e 	bl	800710e <memcpy>
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	4631      	mov	r1, r6
 8007bf6:	4648      	mov	r0, r9
 8007bf8:	f000 fbfa 	bl	80083f0 <__lshift>
 8007bfc:	462f      	mov	r7, r5
 8007bfe:	4605      	mov	r5, r0
 8007c00:	f10a 0301 	add.w	r3, sl, #1
 8007c04:	9304      	str	r3, [sp, #16]
 8007c06:	eb0a 030b 	add.w	r3, sl, fp
 8007c0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c0c:	9b06      	ldr	r3, [sp, #24]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c14:	9b04      	ldr	r3, [sp, #16]
 8007c16:	4621      	mov	r1, r4
 8007c18:	9803      	ldr	r0, [sp, #12]
 8007c1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8007c1e:	f7ff fa84 	bl	800712a <quorem>
 8007c22:	4603      	mov	r3, r0
 8007c24:	4639      	mov	r1, r7
 8007c26:	3330      	adds	r3, #48	@ 0x30
 8007c28:	9006      	str	r0, [sp, #24]
 8007c2a:	9803      	ldr	r0, [sp, #12]
 8007c2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c2e:	f000 fc4b 	bl	80084c8 <__mcmp>
 8007c32:	462a      	mov	r2, r5
 8007c34:	9008      	str	r0, [sp, #32]
 8007c36:	4621      	mov	r1, r4
 8007c38:	4648      	mov	r0, r9
 8007c3a:	f000 fc61 	bl	8008500 <__mdiff>
 8007c3e:	68c2      	ldr	r2, [r0, #12]
 8007c40:	4606      	mov	r6, r0
 8007c42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c44:	bb02      	cbnz	r2, 8007c88 <_dtoa_r+0xa48>
 8007c46:	4601      	mov	r1, r0
 8007c48:	9803      	ldr	r0, [sp, #12]
 8007c4a:	f000 fc3d 	bl	80084c8 <__mcmp>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c52:	4631      	mov	r1, r6
 8007c54:	4648      	mov	r0, r9
 8007c56:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007c5a:	f000 fa03 	bl	8008064 <_Bfree>
 8007c5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c62:	9e04      	ldr	r6, [sp, #16]
 8007c64:	ea42 0103 	orr.w	r1, r2, r3
 8007c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c6a:	4319      	orrs	r1, r3
 8007c6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c6e:	d10d      	bne.n	8007c8c <_dtoa_r+0xa4c>
 8007c70:	2b39      	cmp	r3, #57	@ 0x39
 8007c72:	d027      	beq.n	8007cc4 <_dtoa_r+0xa84>
 8007c74:	9a08      	ldr	r2, [sp, #32]
 8007c76:	2a00      	cmp	r2, #0
 8007c78:	dd01      	ble.n	8007c7e <_dtoa_r+0xa3e>
 8007c7a:	9b06      	ldr	r3, [sp, #24]
 8007c7c:	3331      	adds	r3, #49	@ 0x31
 8007c7e:	f88b 3000 	strb.w	r3, [fp]
 8007c82:	e52e      	b.n	80076e2 <_dtoa_r+0x4a2>
 8007c84:	4628      	mov	r0, r5
 8007c86:	e7b9      	b.n	8007bfc <_dtoa_r+0x9bc>
 8007c88:	2201      	movs	r2, #1
 8007c8a:	e7e2      	b.n	8007c52 <_dtoa_r+0xa12>
 8007c8c:	9908      	ldr	r1, [sp, #32]
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	db04      	blt.n	8007c9c <_dtoa_r+0xa5c>
 8007c92:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007c94:	4301      	orrs	r1, r0
 8007c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c98:	4301      	orrs	r1, r0
 8007c9a:	d120      	bne.n	8007cde <_dtoa_r+0xa9e>
 8007c9c:	2a00      	cmp	r2, #0
 8007c9e:	ddee      	ble.n	8007c7e <_dtoa_r+0xa3e>
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	9903      	ldr	r1, [sp, #12]
 8007ca4:	4648      	mov	r0, r9
 8007ca6:	9304      	str	r3, [sp, #16]
 8007ca8:	f000 fba2 	bl	80083f0 <__lshift>
 8007cac:	4621      	mov	r1, r4
 8007cae:	9003      	str	r0, [sp, #12]
 8007cb0:	f000 fc0a 	bl	80084c8 <__mcmp>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	9b04      	ldr	r3, [sp, #16]
 8007cb8:	dc02      	bgt.n	8007cc0 <_dtoa_r+0xa80>
 8007cba:	d1e0      	bne.n	8007c7e <_dtoa_r+0xa3e>
 8007cbc:	07da      	lsls	r2, r3, #31
 8007cbe:	d5de      	bpl.n	8007c7e <_dtoa_r+0xa3e>
 8007cc0:	2b39      	cmp	r3, #57	@ 0x39
 8007cc2:	d1da      	bne.n	8007c7a <_dtoa_r+0xa3a>
 8007cc4:	2339      	movs	r3, #57	@ 0x39
 8007cc6:	f88b 3000 	strb.w	r3, [fp]
 8007cca:	4633      	mov	r3, r6
 8007ccc:	461e      	mov	r6, r3
 8007cce:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	2a39      	cmp	r2, #57	@ 0x39
 8007cd6:	d04e      	beq.n	8007d76 <_dtoa_r+0xb36>
 8007cd8:	3201      	adds	r2, #1
 8007cda:	701a      	strb	r2, [r3, #0]
 8007cdc:	e501      	b.n	80076e2 <_dtoa_r+0x4a2>
 8007cde:	2a00      	cmp	r2, #0
 8007ce0:	dd03      	ble.n	8007cea <_dtoa_r+0xaaa>
 8007ce2:	2b39      	cmp	r3, #57	@ 0x39
 8007ce4:	d0ee      	beq.n	8007cc4 <_dtoa_r+0xa84>
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	e7c9      	b.n	8007c7e <_dtoa_r+0xa3e>
 8007cea:	9a04      	ldr	r2, [sp, #16]
 8007cec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007cf2:	428a      	cmp	r2, r1
 8007cf4:	d028      	beq.n	8007d48 <_dtoa_r+0xb08>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	220a      	movs	r2, #10
 8007cfa:	9903      	ldr	r1, [sp, #12]
 8007cfc:	4648      	mov	r0, r9
 8007cfe:	f000 f9d3 	bl	80080a8 <__multadd>
 8007d02:	42af      	cmp	r7, r5
 8007d04:	9003      	str	r0, [sp, #12]
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	f04f 020a 	mov.w	r2, #10
 8007d0e:	4639      	mov	r1, r7
 8007d10:	4648      	mov	r0, r9
 8007d12:	d107      	bne.n	8007d24 <_dtoa_r+0xae4>
 8007d14:	f000 f9c8 	bl	80080a8 <__multadd>
 8007d18:	4607      	mov	r7, r0
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	9b04      	ldr	r3, [sp, #16]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	9304      	str	r3, [sp, #16]
 8007d22:	e777      	b.n	8007c14 <_dtoa_r+0x9d4>
 8007d24:	f000 f9c0 	bl	80080a8 <__multadd>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4607      	mov	r7, r0
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	220a      	movs	r2, #10
 8007d30:	4648      	mov	r0, r9
 8007d32:	f000 f9b9 	bl	80080a8 <__multadd>
 8007d36:	4605      	mov	r5, r0
 8007d38:	e7f0      	b.n	8007d1c <_dtoa_r+0xadc>
 8007d3a:	f1bb 0f00 	cmp.w	fp, #0
 8007d3e:	bfcc      	ite	gt
 8007d40:	465e      	movgt	r6, fp
 8007d42:	2601      	movle	r6, #1
 8007d44:	2700      	movs	r7, #0
 8007d46:	4456      	add	r6, sl
 8007d48:	2201      	movs	r2, #1
 8007d4a:	9903      	ldr	r1, [sp, #12]
 8007d4c:	4648      	mov	r0, r9
 8007d4e:	9304      	str	r3, [sp, #16]
 8007d50:	f000 fb4e 	bl	80083f0 <__lshift>
 8007d54:	4621      	mov	r1, r4
 8007d56:	9003      	str	r0, [sp, #12]
 8007d58:	f000 fbb6 	bl	80084c8 <__mcmp>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	dcb4      	bgt.n	8007cca <_dtoa_r+0xa8a>
 8007d60:	d102      	bne.n	8007d68 <_dtoa_r+0xb28>
 8007d62:	9b04      	ldr	r3, [sp, #16]
 8007d64:	07db      	lsls	r3, r3, #31
 8007d66:	d4b0      	bmi.n	8007cca <_dtoa_r+0xa8a>
 8007d68:	4633      	mov	r3, r6
 8007d6a:	461e      	mov	r6, r3
 8007d6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d70:	2a30      	cmp	r2, #48	@ 0x30
 8007d72:	d0fa      	beq.n	8007d6a <_dtoa_r+0xb2a>
 8007d74:	e4b5      	b.n	80076e2 <_dtoa_r+0x4a2>
 8007d76:	459a      	cmp	sl, r3
 8007d78:	d1a8      	bne.n	8007ccc <_dtoa_r+0xa8c>
 8007d7a:	2331      	movs	r3, #49	@ 0x31
 8007d7c:	f108 0801 	add.w	r8, r8, #1
 8007d80:	f88a 3000 	strb.w	r3, [sl]
 8007d84:	e4ad      	b.n	80076e2 <_dtoa_r+0x4a2>
 8007d86:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007de4 <_dtoa_r+0xba4>
 8007d8c:	b11b      	cbz	r3, 8007d96 <_dtoa_r+0xb56>
 8007d8e:	f10a 0308 	add.w	r3, sl, #8
 8007d92:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	4650      	mov	r0, sl
 8007d98:	b017      	add	sp, #92	@ 0x5c
 8007d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	f77f ae2e 	ble.w	8007a02 <_dtoa_r+0x7c2>
 8007da6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007da8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007daa:	2001      	movs	r0, #1
 8007dac:	e64d      	b.n	8007a4a <_dtoa_r+0x80a>
 8007dae:	f1bb 0f00 	cmp.w	fp, #0
 8007db2:	f77f aed9 	ble.w	8007b68 <_dtoa_r+0x928>
 8007db6:	4656      	mov	r6, sl
 8007db8:	4621      	mov	r1, r4
 8007dba:	9803      	ldr	r0, [sp, #12]
 8007dbc:	f7ff f9b5 	bl	800712a <quorem>
 8007dc0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007dc4:	f806 3b01 	strb.w	r3, [r6], #1
 8007dc8:	eba6 020a 	sub.w	r2, r6, sl
 8007dcc:	4593      	cmp	fp, r2
 8007dce:	ddb4      	ble.n	8007d3a <_dtoa_r+0xafa>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	220a      	movs	r2, #10
 8007dd4:	4648      	mov	r0, r9
 8007dd6:	9903      	ldr	r1, [sp, #12]
 8007dd8:	f000 f966 	bl	80080a8 <__multadd>
 8007ddc:	9003      	str	r0, [sp, #12]
 8007dde:	e7eb      	b.n	8007db8 <_dtoa_r+0xb78>
 8007de0:	0800a5ee 	.word	0x0800a5ee
 8007de4:	0800a572 	.word	0x0800a572

08007de8 <_free_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4605      	mov	r5, r0
 8007dec:	2900      	cmp	r1, #0
 8007dee:	d040      	beq.n	8007e72 <_free_r+0x8a>
 8007df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007df4:	1f0c      	subs	r4, r1, #4
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bfb8      	it	lt
 8007dfa:	18e4      	addlt	r4, r4, r3
 8007dfc:	f000 f8e6 	bl	8007fcc <__malloc_lock>
 8007e00:	4a1c      	ldr	r2, [pc, #112]	@ (8007e74 <_free_r+0x8c>)
 8007e02:	6813      	ldr	r3, [r2, #0]
 8007e04:	b933      	cbnz	r3, 8007e14 <_free_r+0x2c>
 8007e06:	6063      	str	r3, [r4, #4]
 8007e08:	6014      	str	r4, [r2, #0]
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e10:	f000 b8e2 	b.w	8007fd8 <__malloc_unlock>
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	d908      	bls.n	8007e2a <_free_r+0x42>
 8007e18:	6820      	ldr	r0, [r4, #0]
 8007e1a:	1821      	adds	r1, r4, r0
 8007e1c:	428b      	cmp	r3, r1
 8007e1e:	bf01      	itttt	eq
 8007e20:	6819      	ldreq	r1, [r3, #0]
 8007e22:	685b      	ldreq	r3, [r3, #4]
 8007e24:	1809      	addeq	r1, r1, r0
 8007e26:	6021      	streq	r1, [r4, #0]
 8007e28:	e7ed      	b.n	8007e06 <_free_r+0x1e>
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	b10b      	cbz	r3, 8007e34 <_free_r+0x4c>
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	d9fa      	bls.n	8007e2a <_free_r+0x42>
 8007e34:	6811      	ldr	r1, [r2, #0]
 8007e36:	1850      	adds	r0, r2, r1
 8007e38:	42a0      	cmp	r0, r4
 8007e3a:	d10b      	bne.n	8007e54 <_free_r+0x6c>
 8007e3c:	6820      	ldr	r0, [r4, #0]
 8007e3e:	4401      	add	r1, r0
 8007e40:	1850      	adds	r0, r2, r1
 8007e42:	4283      	cmp	r3, r0
 8007e44:	6011      	str	r1, [r2, #0]
 8007e46:	d1e0      	bne.n	8007e0a <_free_r+0x22>
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	4408      	add	r0, r1
 8007e4e:	6010      	str	r0, [r2, #0]
 8007e50:	6053      	str	r3, [r2, #4]
 8007e52:	e7da      	b.n	8007e0a <_free_r+0x22>
 8007e54:	d902      	bls.n	8007e5c <_free_r+0x74>
 8007e56:	230c      	movs	r3, #12
 8007e58:	602b      	str	r3, [r5, #0]
 8007e5a:	e7d6      	b.n	8007e0a <_free_r+0x22>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	1821      	adds	r1, r4, r0
 8007e60:	428b      	cmp	r3, r1
 8007e62:	bf01      	itttt	eq
 8007e64:	6819      	ldreq	r1, [r3, #0]
 8007e66:	685b      	ldreq	r3, [r3, #4]
 8007e68:	1809      	addeq	r1, r1, r0
 8007e6a:	6021      	streq	r1, [r4, #0]
 8007e6c:	6063      	str	r3, [r4, #4]
 8007e6e:	6054      	str	r4, [r2, #4]
 8007e70:	e7cb      	b.n	8007e0a <_free_r+0x22>
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	200005e4 	.word	0x200005e4

08007e78 <malloc>:
 8007e78:	4b02      	ldr	r3, [pc, #8]	@ (8007e84 <malloc+0xc>)
 8007e7a:	4601      	mov	r1, r0
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	f000 b825 	b.w	8007ecc <_malloc_r>
 8007e82:	bf00      	nop
 8007e84:	20000018 	.word	0x20000018

08007e88 <sbrk_aligned>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	4e0f      	ldr	r6, [pc, #60]	@ (8007ec8 <sbrk_aligned+0x40>)
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	6831      	ldr	r1, [r6, #0]
 8007e90:	4605      	mov	r5, r0
 8007e92:	b911      	cbnz	r1, 8007e9a <sbrk_aligned+0x12>
 8007e94:	f000 fe3a 	bl	8008b0c <_sbrk_r>
 8007e98:	6030      	str	r0, [r6, #0]
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f000 fe35 	bl	8008b0c <_sbrk_r>
 8007ea2:	1c43      	adds	r3, r0, #1
 8007ea4:	d103      	bne.n	8007eae <sbrk_aligned+0x26>
 8007ea6:	f04f 34ff 	mov.w	r4, #4294967295
 8007eaa:	4620      	mov	r0, r4
 8007eac:	bd70      	pop	{r4, r5, r6, pc}
 8007eae:	1cc4      	adds	r4, r0, #3
 8007eb0:	f024 0403 	bic.w	r4, r4, #3
 8007eb4:	42a0      	cmp	r0, r4
 8007eb6:	d0f8      	beq.n	8007eaa <sbrk_aligned+0x22>
 8007eb8:	1a21      	subs	r1, r4, r0
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f000 fe26 	bl	8008b0c <_sbrk_r>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d1f2      	bne.n	8007eaa <sbrk_aligned+0x22>
 8007ec4:	e7ef      	b.n	8007ea6 <sbrk_aligned+0x1e>
 8007ec6:	bf00      	nop
 8007ec8:	200005e0 	.word	0x200005e0

08007ecc <_malloc_r>:
 8007ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed0:	1ccd      	adds	r5, r1, #3
 8007ed2:	f025 0503 	bic.w	r5, r5, #3
 8007ed6:	3508      	adds	r5, #8
 8007ed8:	2d0c      	cmp	r5, #12
 8007eda:	bf38      	it	cc
 8007edc:	250c      	movcc	r5, #12
 8007ede:	2d00      	cmp	r5, #0
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	db01      	blt.n	8007ee8 <_malloc_r+0x1c>
 8007ee4:	42a9      	cmp	r1, r5
 8007ee6:	d904      	bls.n	8007ef2 <_malloc_r+0x26>
 8007ee8:	230c      	movs	r3, #12
 8007eea:	6033      	str	r3, [r6, #0]
 8007eec:	2000      	movs	r0, #0
 8007eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ef2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fc8 <_malloc_r+0xfc>
 8007ef6:	f000 f869 	bl	8007fcc <__malloc_lock>
 8007efa:	f8d8 3000 	ldr.w	r3, [r8]
 8007efe:	461c      	mov	r4, r3
 8007f00:	bb44      	cbnz	r4, 8007f54 <_malloc_r+0x88>
 8007f02:	4629      	mov	r1, r5
 8007f04:	4630      	mov	r0, r6
 8007f06:	f7ff ffbf 	bl	8007e88 <sbrk_aligned>
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	d158      	bne.n	8007fc2 <_malloc_r+0xf6>
 8007f10:	f8d8 4000 	ldr.w	r4, [r8]
 8007f14:	4627      	mov	r7, r4
 8007f16:	2f00      	cmp	r7, #0
 8007f18:	d143      	bne.n	8007fa2 <_malloc_r+0xd6>
 8007f1a:	2c00      	cmp	r4, #0
 8007f1c:	d04b      	beq.n	8007fb6 <_malloc_r+0xea>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	4639      	mov	r1, r7
 8007f22:	4630      	mov	r0, r6
 8007f24:	eb04 0903 	add.w	r9, r4, r3
 8007f28:	f000 fdf0 	bl	8008b0c <_sbrk_r>
 8007f2c:	4581      	cmp	r9, r0
 8007f2e:	d142      	bne.n	8007fb6 <_malloc_r+0xea>
 8007f30:	6821      	ldr	r1, [r4, #0]
 8007f32:	4630      	mov	r0, r6
 8007f34:	1a6d      	subs	r5, r5, r1
 8007f36:	4629      	mov	r1, r5
 8007f38:	f7ff ffa6 	bl	8007e88 <sbrk_aligned>
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d03a      	beq.n	8007fb6 <_malloc_r+0xea>
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	442b      	add	r3, r5
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	f8d8 3000 	ldr.w	r3, [r8]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	bb62      	cbnz	r2, 8007fa8 <_malloc_r+0xdc>
 8007f4e:	f8c8 7000 	str.w	r7, [r8]
 8007f52:	e00f      	b.n	8007f74 <_malloc_r+0xa8>
 8007f54:	6822      	ldr	r2, [r4, #0]
 8007f56:	1b52      	subs	r2, r2, r5
 8007f58:	d420      	bmi.n	8007f9c <_malloc_r+0xd0>
 8007f5a:	2a0b      	cmp	r2, #11
 8007f5c:	d917      	bls.n	8007f8e <_malloc_r+0xc2>
 8007f5e:	1961      	adds	r1, r4, r5
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	6025      	str	r5, [r4, #0]
 8007f64:	bf18      	it	ne
 8007f66:	6059      	strne	r1, [r3, #4]
 8007f68:	6863      	ldr	r3, [r4, #4]
 8007f6a:	bf08      	it	eq
 8007f6c:	f8c8 1000 	streq.w	r1, [r8]
 8007f70:	5162      	str	r2, [r4, r5]
 8007f72:	604b      	str	r3, [r1, #4]
 8007f74:	4630      	mov	r0, r6
 8007f76:	f000 f82f 	bl	8007fd8 <__malloc_unlock>
 8007f7a:	f104 000b 	add.w	r0, r4, #11
 8007f7e:	1d23      	adds	r3, r4, #4
 8007f80:	f020 0007 	bic.w	r0, r0, #7
 8007f84:	1ac2      	subs	r2, r0, r3
 8007f86:	bf1c      	itt	ne
 8007f88:	1a1b      	subne	r3, r3, r0
 8007f8a:	50a3      	strne	r3, [r4, r2]
 8007f8c:	e7af      	b.n	8007eee <_malloc_r+0x22>
 8007f8e:	6862      	ldr	r2, [r4, #4]
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	bf0c      	ite	eq
 8007f94:	f8c8 2000 	streq.w	r2, [r8]
 8007f98:	605a      	strne	r2, [r3, #4]
 8007f9a:	e7eb      	b.n	8007f74 <_malloc_r+0xa8>
 8007f9c:	4623      	mov	r3, r4
 8007f9e:	6864      	ldr	r4, [r4, #4]
 8007fa0:	e7ae      	b.n	8007f00 <_malloc_r+0x34>
 8007fa2:	463c      	mov	r4, r7
 8007fa4:	687f      	ldr	r7, [r7, #4]
 8007fa6:	e7b6      	b.n	8007f16 <_malloc_r+0x4a>
 8007fa8:	461a      	mov	r2, r3
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	42a3      	cmp	r3, r4
 8007fae:	d1fb      	bne.n	8007fa8 <_malloc_r+0xdc>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	6053      	str	r3, [r2, #4]
 8007fb4:	e7de      	b.n	8007f74 <_malloc_r+0xa8>
 8007fb6:	230c      	movs	r3, #12
 8007fb8:	4630      	mov	r0, r6
 8007fba:	6033      	str	r3, [r6, #0]
 8007fbc:	f000 f80c 	bl	8007fd8 <__malloc_unlock>
 8007fc0:	e794      	b.n	8007eec <_malloc_r+0x20>
 8007fc2:	6005      	str	r5, [r0, #0]
 8007fc4:	e7d6      	b.n	8007f74 <_malloc_r+0xa8>
 8007fc6:	bf00      	nop
 8007fc8:	200005e4 	.word	0x200005e4

08007fcc <__malloc_lock>:
 8007fcc:	4801      	ldr	r0, [pc, #4]	@ (8007fd4 <__malloc_lock+0x8>)
 8007fce:	f7ff b88e 	b.w	80070ee <__retarget_lock_acquire_recursive>
 8007fd2:	bf00      	nop
 8007fd4:	200005dc 	.word	0x200005dc

08007fd8 <__malloc_unlock>:
 8007fd8:	4801      	ldr	r0, [pc, #4]	@ (8007fe0 <__malloc_unlock+0x8>)
 8007fda:	f7ff b889 	b.w	80070f0 <__retarget_lock_release_recursive>
 8007fde:	bf00      	nop
 8007fe0:	200005dc 	.word	0x200005dc

08007fe4 <_Balloc>:
 8007fe4:	b570      	push	{r4, r5, r6, lr}
 8007fe6:	69c6      	ldr	r6, [r0, #28]
 8007fe8:	4604      	mov	r4, r0
 8007fea:	460d      	mov	r5, r1
 8007fec:	b976      	cbnz	r6, 800800c <_Balloc+0x28>
 8007fee:	2010      	movs	r0, #16
 8007ff0:	f7ff ff42 	bl	8007e78 <malloc>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	61e0      	str	r0, [r4, #28]
 8007ff8:	b920      	cbnz	r0, 8008004 <_Balloc+0x20>
 8007ffa:	216b      	movs	r1, #107	@ 0x6b
 8007ffc:	4b17      	ldr	r3, [pc, #92]	@ (800805c <_Balloc+0x78>)
 8007ffe:	4818      	ldr	r0, [pc, #96]	@ (8008060 <_Balloc+0x7c>)
 8008000:	f000 fd94 	bl	8008b2c <__assert_func>
 8008004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008008:	6006      	str	r6, [r0, #0]
 800800a:	60c6      	str	r6, [r0, #12]
 800800c:	69e6      	ldr	r6, [r4, #28]
 800800e:	68f3      	ldr	r3, [r6, #12]
 8008010:	b183      	cbz	r3, 8008034 <_Balloc+0x50>
 8008012:	69e3      	ldr	r3, [r4, #28]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800801a:	b9b8      	cbnz	r0, 800804c <_Balloc+0x68>
 800801c:	2101      	movs	r1, #1
 800801e:	fa01 f605 	lsl.w	r6, r1, r5
 8008022:	1d72      	adds	r2, r6, #5
 8008024:	4620      	mov	r0, r4
 8008026:	0092      	lsls	r2, r2, #2
 8008028:	f000 fd9e 	bl	8008b68 <_calloc_r>
 800802c:	b160      	cbz	r0, 8008048 <_Balloc+0x64>
 800802e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008032:	e00e      	b.n	8008052 <_Balloc+0x6e>
 8008034:	2221      	movs	r2, #33	@ 0x21
 8008036:	2104      	movs	r1, #4
 8008038:	4620      	mov	r0, r4
 800803a:	f000 fd95 	bl	8008b68 <_calloc_r>
 800803e:	69e3      	ldr	r3, [r4, #28]
 8008040:	60f0      	str	r0, [r6, #12]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e4      	bne.n	8008012 <_Balloc+0x2e>
 8008048:	2000      	movs	r0, #0
 800804a:	bd70      	pop	{r4, r5, r6, pc}
 800804c:	6802      	ldr	r2, [r0, #0]
 800804e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008052:	2300      	movs	r3, #0
 8008054:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008058:	e7f7      	b.n	800804a <_Balloc+0x66>
 800805a:	bf00      	nop
 800805c:	0800a57f 	.word	0x0800a57f
 8008060:	0800a5ff 	.word	0x0800a5ff

08008064 <_Bfree>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	69c6      	ldr	r6, [r0, #28]
 8008068:	4605      	mov	r5, r0
 800806a:	460c      	mov	r4, r1
 800806c:	b976      	cbnz	r6, 800808c <_Bfree+0x28>
 800806e:	2010      	movs	r0, #16
 8008070:	f7ff ff02 	bl	8007e78 <malloc>
 8008074:	4602      	mov	r2, r0
 8008076:	61e8      	str	r0, [r5, #28]
 8008078:	b920      	cbnz	r0, 8008084 <_Bfree+0x20>
 800807a:	218f      	movs	r1, #143	@ 0x8f
 800807c:	4b08      	ldr	r3, [pc, #32]	@ (80080a0 <_Bfree+0x3c>)
 800807e:	4809      	ldr	r0, [pc, #36]	@ (80080a4 <_Bfree+0x40>)
 8008080:	f000 fd54 	bl	8008b2c <__assert_func>
 8008084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008088:	6006      	str	r6, [r0, #0]
 800808a:	60c6      	str	r6, [r0, #12]
 800808c:	b13c      	cbz	r4, 800809e <_Bfree+0x3a>
 800808e:	69eb      	ldr	r3, [r5, #28]
 8008090:	6862      	ldr	r2, [r4, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008098:	6021      	str	r1, [r4, #0]
 800809a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	0800a57f 	.word	0x0800a57f
 80080a4:	0800a5ff 	.word	0x0800a5ff

080080a8 <__multadd>:
 80080a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ac:	4607      	mov	r7, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	461e      	mov	r6, r3
 80080b2:	2000      	movs	r0, #0
 80080b4:	690d      	ldr	r5, [r1, #16]
 80080b6:	f101 0c14 	add.w	ip, r1, #20
 80080ba:	f8dc 3000 	ldr.w	r3, [ip]
 80080be:	3001      	adds	r0, #1
 80080c0:	b299      	uxth	r1, r3
 80080c2:	fb02 6101 	mla	r1, r2, r1, r6
 80080c6:	0c1e      	lsrs	r6, r3, #16
 80080c8:	0c0b      	lsrs	r3, r1, #16
 80080ca:	fb02 3306 	mla	r3, r2, r6, r3
 80080ce:	b289      	uxth	r1, r1
 80080d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080d4:	4285      	cmp	r5, r0
 80080d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080da:	f84c 1b04 	str.w	r1, [ip], #4
 80080de:	dcec      	bgt.n	80080ba <__multadd+0x12>
 80080e0:	b30e      	cbz	r6, 8008126 <__multadd+0x7e>
 80080e2:	68a3      	ldr	r3, [r4, #8]
 80080e4:	42ab      	cmp	r3, r5
 80080e6:	dc19      	bgt.n	800811c <__multadd+0x74>
 80080e8:	6861      	ldr	r1, [r4, #4]
 80080ea:	4638      	mov	r0, r7
 80080ec:	3101      	adds	r1, #1
 80080ee:	f7ff ff79 	bl	8007fe4 <_Balloc>
 80080f2:	4680      	mov	r8, r0
 80080f4:	b928      	cbnz	r0, 8008102 <__multadd+0x5a>
 80080f6:	4602      	mov	r2, r0
 80080f8:	21ba      	movs	r1, #186	@ 0xba
 80080fa:	4b0c      	ldr	r3, [pc, #48]	@ (800812c <__multadd+0x84>)
 80080fc:	480c      	ldr	r0, [pc, #48]	@ (8008130 <__multadd+0x88>)
 80080fe:	f000 fd15 	bl	8008b2c <__assert_func>
 8008102:	6922      	ldr	r2, [r4, #16]
 8008104:	f104 010c 	add.w	r1, r4, #12
 8008108:	3202      	adds	r2, #2
 800810a:	0092      	lsls	r2, r2, #2
 800810c:	300c      	adds	r0, #12
 800810e:	f7fe fffe 	bl	800710e <memcpy>
 8008112:	4621      	mov	r1, r4
 8008114:	4638      	mov	r0, r7
 8008116:	f7ff ffa5 	bl	8008064 <_Bfree>
 800811a:	4644      	mov	r4, r8
 800811c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008120:	3501      	adds	r5, #1
 8008122:	615e      	str	r6, [r3, #20]
 8008124:	6125      	str	r5, [r4, #16]
 8008126:	4620      	mov	r0, r4
 8008128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800812c:	0800a5ee 	.word	0x0800a5ee
 8008130:	0800a5ff 	.word	0x0800a5ff

08008134 <__hi0bits>:
 8008134:	4603      	mov	r3, r0
 8008136:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800813a:	bf3a      	itte	cc
 800813c:	0403      	lslcc	r3, r0, #16
 800813e:	2010      	movcc	r0, #16
 8008140:	2000      	movcs	r0, #0
 8008142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008146:	bf3c      	itt	cc
 8008148:	021b      	lslcc	r3, r3, #8
 800814a:	3008      	addcc	r0, #8
 800814c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008150:	bf3c      	itt	cc
 8008152:	011b      	lslcc	r3, r3, #4
 8008154:	3004      	addcc	r0, #4
 8008156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800815a:	bf3c      	itt	cc
 800815c:	009b      	lslcc	r3, r3, #2
 800815e:	3002      	addcc	r0, #2
 8008160:	2b00      	cmp	r3, #0
 8008162:	db05      	blt.n	8008170 <__hi0bits+0x3c>
 8008164:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008168:	f100 0001 	add.w	r0, r0, #1
 800816c:	bf08      	it	eq
 800816e:	2020      	moveq	r0, #32
 8008170:	4770      	bx	lr

08008172 <__lo0bits>:
 8008172:	6803      	ldr	r3, [r0, #0]
 8008174:	4602      	mov	r2, r0
 8008176:	f013 0007 	ands.w	r0, r3, #7
 800817a:	d00b      	beq.n	8008194 <__lo0bits+0x22>
 800817c:	07d9      	lsls	r1, r3, #31
 800817e:	d421      	bmi.n	80081c4 <__lo0bits+0x52>
 8008180:	0798      	lsls	r0, r3, #30
 8008182:	bf49      	itett	mi
 8008184:	085b      	lsrmi	r3, r3, #1
 8008186:	089b      	lsrpl	r3, r3, #2
 8008188:	2001      	movmi	r0, #1
 800818a:	6013      	strmi	r3, [r2, #0]
 800818c:	bf5c      	itt	pl
 800818e:	2002      	movpl	r0, #2
 8008190:	6013      	strpl	r3, [r2, #0]
 8008192:	4770      	bx	lr
 8008194:	b299      	uxth	r1, r3
 8008196:	b909      	cbnz	r1, 800819c <__lo0bits+0x2a>
 8008198:	2010      	movs	r0, #16
 800819a:	0c1b      	lsrs	r3, r3, #16
 800819c:	b2d9      	uxtb	r1, r3
 800819e:	b909      	cbnz	r1, 80081a4 <__lo0bits+0x32>
 80081a0:	3008      	adds	r0, #8
 80081a2:	0a1b      	lsrs	r3, r3, #8
 80081a4:	0719      	lsls	r1, r3, #28
 80081a6:	bf04      	itt	eq
 80081a8:	091b      	lsreq	r3, r3, #4
 80081aa:	3004      	addeq	r0, #4
 80081ac:	0799      	lsls	r1, r3, #30
 80081ae:	bf04      	itt	eq
 80081b0:	089b      	lsreq	r3, r3, #2
 80081b2:	3002      	addeq	r0, #2
 80081b4:	07d9      	lsls	r1, r3, #31
 80081b6:	d403      	bmi.n	80081c0 <__lo0bits+0x4e>
 80081b8:	085b      	lsrs	r3, r3, #1
 80081ba:	f100 0001 	add.w	r0, r0, #1
 80081be:	d003      	beq.n	80081c8 <__lo0bits+0x56>
 80081c0:	6013      	str	r3, [r2, #0]
 80081c2:	4770      	bx	lr
 80081c4:	2000      	movs	r0, #0
 80081c6:	4770      	bx	lr
 80081c8:	2020      	movs	r0, #32
 80081ca:	4770      	bx	lr

080081cc <__i2b>:
 80081cc:	b510      	push	{r4, lr}
 80081ce:	460c      	mov	r4, r1
 80081d0:	2101      	movs	r1, #1
 80081d2:	f7ff ff07 	bl	8007fe4 <_Balloc>
 80081d6:	4602      	mov	r2, r0
 80081d8:	b928      	cbnz	r0, 80081e6 <__i2b+0x1a>
 80081da:	f240 1145 	movw	r1, #325	@ 0x145
 80081de:	4b04      	ldr	r3, [pc, #16]	@ (80081f0 <__i2b+0x24>)
 80081e0:	4804      	ldr	r0, [pc, #16]	@ (80081f4 <__i2b+0x28>)
 80081e2:	f000 fca3 	bl	8008b2c <__assert_func>
 80081e6:	2301      	movs	r3, #1
 80081e8:	6144      	str	r4, [r0, #20]
 80081ea:	6103      	str	r3, [r0, #16]
 80081ec:	bd10      	pop	{r4, pc}
 80081ee:	bf00      	nop
 80081f0:	0800a5ee 	.word	0x0800a5ee
 80081f4:	0800a5ff 	.word	0x0800a5ff

080081f8 <__multiply>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	4617      	mov	r7, r2
 80081fe:	690a      	ldr	r2, [r1, #16]
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	4689      	mov	r9, r1
 8008204:	429a      	cmp	r2, r3
 8008206:	bfa2      	ittt	ge
 8008208:	463b      	movge	r3, r7
 800820a:	460f      	movge	r7, r1
 800820c:	4699      	movge	r9, r3
 800820e:	693d      	ldr	r5, [r7, #16]
 8008210:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	eb05 060a 	add.w	r6, r5, sl
 800821c:	42b3      	cmp	r3, r6
 800821e:	b085      	sub	sp, #20
 8008220:	bfb8      	it	lt
 8008222:	3101      	addlt	r1, #1
 8008224:	f7ff fede 	bl	8007fe4 <_Balloc>
 8008228:	b930      	cbnz	r0, 8008238 <__multiply+0x40>
 800822a:	4602      	mov	r2, r0
 800822c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008230:	4b40      	ldr	r3, [pc, #256]	@ (8008334 <__multiply+0x13c>)
 8008232:	4841      	ldr	r0, [pc, #260]	@ (8008338 <__multiply+0x140>)
 8008234:	f000 fc7a 	bl	8008b2c <__assert_func>
 8008238:	f100 0414 	add.w	r4, r0, #20
 800823c:	4623      	mov	r3, r4
 800823e:	2200      	movs	r2, #0
 8008240:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008244:	4573      	cmp	r3, lr
 8008246:	d320      	bcc.n	800828a <__multiply+0x92>
 8008248:	f107 0814 	add.w	r8, r7, #20
 800824c:	f109 0114 	add.w	r1, r9, #20
 8008250:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008254:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008258:	9302      	str	r3, [sp, #8]
 800825a:	1beb      	subs	r3, r5, r7
 800825c:	3b15      	subs	r3, #21
 800825e:	f023 0303 	bic.w	r3, r3, #3
 8008262:	3304      	adds	r3, #4
 8008264:	3715      	adds	r7, #21
 8008266:	42bd      	cmp	r5, r7
 8008268:	bf38      	it	cc
 800826a:	2304      	movcc	r3, #4
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	9b02      	ldr	r3, [sp, #8]
 8008270:	9103      	str	r1, [sp, #12]
 8008272:	428b      	cmp	r3, r1
 8008274:	d80c      	bhi.n	8008290 <__multiply+0x98>
 8008276:	2e00      	cmp	r6, #0
 8008278:	dd03      	ble.n	8008282 <__multiply+0x8a>
 800827a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800827e:	2b00      	cmp	r3, #0
 8008280:	d055      	beq.n	800832e <__multiply+0x136>
 8008282:	6106      	str	r6, [r0, #16]
 8008284:	b005      	add	sp, #20
 8008286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828a:	f843 2b04 	str.w	r2, [r3], #4
 800828e:	e7d9      	b.n	8008244 <__multiply+0x4c>
 8008290:	f8b1 a000 	ldrh.w	sl, [r1]
 8008294:	f1ba 0f00 	cmp.w	sl, #0
 8008298:	d01f      	beq.n	80082da <__multiply+0xe2>
 800829a:	46c4      	mov	ip, r8
 800829c:	46a1      	mov	r9, r4
 800829e:	2700      	movs	r7, #0
 80082a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80082a4:	f8d9 3000 	ldr.w	r3, [r9]
 80082a8:	fa1f fb82 	uxth.w	fp, r2
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	fb0a 330b 	mla	r3, sl, fp, r3
 80082b2:	443b      	add	r3, r7
 80082b4:	f8d9 7000 	ldr.w	r7, [r9]
 80082b8:	0c12      	lsrs	r2, r2, #16
 80082ba:	0c3f      	lsrs	r7, r7, #16
 80082bc:	fb0a 7202 	mla	r2, sl, r2, r7
 80082c0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082ca:	4565      	cmp	r5, ip
 80082cc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80082d0:	f849 3b04 	str.w	r3, [r9], #4
 80082d4:	d8e4      	bhi.n	80082a0 <__multiply+0xa8>
 80082d6:	9b01      	ldr	r3, [sp, #4]
 80082d8:	50e7      	str	r7, [r4, r3]
 80082da:	9b03      	ldr	r3, [sp, #12]
 80082dc:	3104      	adds	r1, #4
 80082de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082e2:	f1b9 0f00 	cmp.w	r9, #0
 80082e6:	d020      	beq.n	800832a <__multiply+0x132>
 80082e8:	4647      	mov	r7, r8
 80082ea:	46a4      	mov	ip, r4
 80082ec:	f04f 0a00 	mov.w	sl, #0
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	f8b7 b000 	ldrh.w	fp, [r7]
 80082f6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	fb09 220b 	mla	r2, r9, fp, r2
 8008300:	4452      	add	r2, sl
 8008302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008306:	f84c 3b04 	str.w	r3, [ip], #4
 800830a:	f857 3b04 	ldr.w	r3, [r7], #4
 800830e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008312:	f8bc 3000 	ldrh.w	r3, [ip]
 8008316:	42bd      	cmp	r5, r7
 8008318:	fb09 330a 	mla	r3, r9, sl, r3
 800831c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008324:	d8e5      	bhi.n	80082f2 <__multiply+0xfa>
 8008326:	9a01      	ldr	r2, [sp, #4]
 8008328:	50a3      	str	r3, [r4, r2]
 800832a:	3404      	adds	r4, #4
 800832c:	e79f      	b.n	800826e <__multiply+0x76>
 800832e:	3e01      	subs	r6, #1
 8008330:	e7a1      	b.n	8008276 <__multiply+0x7e>
 8008332:	bf00      	nop
 8008334:	0800a5ee 	.word	0x0800a5ee
 8008338:	0800a5ff 	.word	0x0800a5ff

0800833c <__pow5mult>:
 800833c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008340:	4615      	mov	r5, r2
 8008342:	f012 0203 	ands.w	r2, r2, #3
 8008346:	4607      	mov	r7, r0
 8008348:	460e      	mov	r6, r1
 800834a:	d007      	beq.n	800835c <__pow5mult+0x20>
 800834c:	4c25      	ldr	r4, [pc, #148]	@ (80083e4 <__pow5mult+0xa8>)
 800834e:	3a01      	subs	r2, #1
 8008350:	2300      	movs	r3, #0
 8008352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008356:	f7ff fea7 	bl	80080a8 <__multadd>
 800835a:	4606      	mov	r6, r0
 800835c:	10ad      	asrs	r5, r5, #2
 800835e:	d03d      	beq.n	80083dc <__pow5mult+0xa0>
 8008360:	69fc      	ldr	r4, [r7, #28]
 8008362:	b97c      	cbnz	r4, 8008384 <__pow5mult+0x48>
 8008364:	2010      	movs	r0, #16
 8008366:	f7ff fd87 	bl	8007e78 <malloc>
 800836a:	4602      	mov	r2, r0
 800836c:	61f8      	str	r0, [r7, #28]
 800836e:	b928      	cbnz	r0, 800837c <__pow5mult+0x40>
 8008370:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008374:	4b1c      	ldr	r3, [pc, #112]	@ (80083e8 <__pow5mult+0xac>)
 8008376:	481d      	ldr	r0, [pc, #116]	@ (80083ec <__pow5mult+0xb0>)
 8008378:	f000 fbd8 	bl	8008b2c <__assert_func>
 800837c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008380:	6004      	str	r4, [r0, #0]
 8008382:	60c4      	str	r4, [r0, #12]
 8008384:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008388:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800838c:	b94c      	cbnz	r4, 80083a2 <__pow5mult+0x66>
 800838e:	f240 2171 	movw	r1, #625	@ 0x271
 8008392:	4638      	mov	r0, r7
 8008394:	f7ff ff1a 	bl	80081cc <__i2b>
 8008398:	2300      	movs	r3, #0
 800839a:	4604      	mov	r4, r0
 800839c:	f8c8 0008 	str.w	r0, [r8, #8]
 80083a0:	6003      	str	r3, [r0, #0]
 80083a2:	f04f 0900 	mov.w	r9, #0
 80083a6:	07eb      	lsls	r3, r5, #31
 80083a8:	d50a      	bpl.n	80083c0 <__pow5mult+0x84>
 80083aa:	4631      	mov	r1, r6
 80083ac:	4622      	mov	r2, r4
 80083ae:	4638      	mov	r0, r7
 80083b0:	f7ff ff22 	bl	80081f8 <__multiply>
 80083b4:	4680      	mov	r8, r0
 80083b6:	4631      	mov	r1, r6
 80083b8:	4638      	mov	r0, r7
 80083ba:	f7ff fe53 	bl	8008064 <_Bfree>
 80083be:	4646      	mov	r6, r8
 80083c0:	106d      	asrs	r5, r5, #1
 80083c2:	d00b      	beq.n	80083dc <__pow5mult+0xa0>
 80083c4:	6820      	ldr	r0, [r4, #0]
 80083c6:	b938      	cbnz	r0, 80083d8 <__pow5mult+0x9c>
 80083c8:	4622      	mov	r2, r4
 80083ca:	4621      	mov	r1, r4
 80083cc:	4638      	mov	r0, r7
 80083ce:	f7ff ff13 	bl	80081f8 <__multiply>
 80083d2:	6020      	str	r0, [r4, #0]
 80083d4:	f8c0 9000 	str.w	r9, [r0]
 80083d8:	4604      	mov	r4, r0
 80083da:	e7e4      	b.n	80083a6 <__pow5mult+0x6a>
 80083dc:	4630      	mov	r0, r6
 80083de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e2:	bf00      	nop
 80083e4:	0800a6b0 	.word	0x0800a6b0
 80083e8:	0800a57f 	.word	0x0800a57f
 80083ec:	0800a5ff 	.word	0x0800a5ff

080083f0 <__lshift>:
 80083f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f4:	460c      	mov	r4, r1
 80083f6:	4607      	mov	r7, r0
 80083f8:	4691      	mov	r9, r2
 80083fa:	6923      	ldr	r3, [r4, #16]
 80083fc:	6849      	ldr	r1, [r1, #4]
 80083fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008402:	68a3      	ldr	r3, [r4, #8]
 8008404:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008408:	f108 0601 	add.w	r6, r8, #1
 800840c:	42b3      	cmp	r3, r6
 800840e:	db0b      	blt.n	8008428 <__lshift+0x38>
 8008410:	4638      	mov	r0, r7
 8008412:	f7ff fde7 	bl	8007fe4 <_Balloc>
 8008416:	4605      	mov	r5, r0
 8008418:	b948      	cbnz	r0, 800842e <__lshift+0x3e>
 800841a:	4602      	mov	r2, r0
 800841c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008420:	4b27      	ldr	r3, [pc, #156]	@ (80084c0 <__lshift+0xd0>)
 8008422:	4828      	ldr	r0, [pc, #160]	@ (80084c4 <__lshift+0xd4>)
 8008424:	f000 fb82 	bl	8008b2c <__assert_func>
 8008428:	3101      	adds	r1, #1
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	e7ee      	b.n	800840c <__lshift+0x1c>
 800842e:	2300      	movs	r3, #0
 8008430:	f100 0114 	add.w	r1, r0, #20
 8008434:	f100 0210 	add.w	r2, r0, #16
 8008438:	4618      	mov	r0, r3
 800843a:	4553      	cmp	r3, sl
 800843c:	db33      	blt.n	80084a6 <__lshift+0xb6>
 800843e:	6920      	ldr	r0, [r4, #16]
 8008440:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008444:	f104 0314 	add.w	r3, r4, #20
 8008448:	f019 091f 	ands.w	r9, r9, #31
 800844c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008450:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008454:	d02b      	beq.n	80084ae <__lshift+0xbe>
 8008456:	468a      	mov	sl, r1
 8008458:	2200      	movs	r2, #0
 800845a:	f1c9 0e20 	rsb	lr, r9, #32
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	fa00 f009 	lsl.w	r0, r0, r9
 8008464:	4310      	orrs	r0, r2
 8008466:	f84a 0b04 	str.w	r0, [sl], #4
 800846a:	f853 2b04 	ldr.w	r2, [r3], #4
 800846e:	459c      	cmp	ip, r3
 8008470:	fa22 f20e 	lsr.w	r2, r2, lr
 8008474:	d8f3      	bhi.n	800845e <__lshift+0x6e>
 8008476:	ebac 0304 	sub.w	r3, ip, r4
 800847a:	3b15      	subs	r3, #21
 800847c:	f023 0303 	bic.w	r3, r3, #3
 8008480:	3304      	adds	r3, #4
 8008482:	f104 0015 	add.w	r0, r4, #21
 8008486:	4560      	cmp	r0, ip
 8008488:	bf88      	it	hi
 800848a:	2304      	movhi	r3, #4
 800848c:	50ca      	str	r2, [r1, r3]
 800848e:	b10a      	cbz	r2, 8008494 <__lshift+0xa4>
 8008490:	f108 0602 	add.w	r6, r8, #2
 8008494:	3e01      	subs	r6, #1
 8008496:	4638      	mov	r0, r7
 8008498:	4621      	mov	r1, r4
 800849a:	612e      	str	r6, [r5, #16]
 800849c:	f7ff fde2 	bl	8008064 <_Bfree>
 80084a0:	4628      	mov	r0, r5
 80084a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80084aa:	3301      	adds	r3, #1
 80084ac:	e7c5      	b.n	800843a <__lshift+0x4a>
 80084ae:	3904      	subs	r1, #4
 80084b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b4:	459c      	cmp	ip, r3
 80084b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80084ba:	d8f9      	bhi.n	80084b0 <__lshift+0xc0>
 80084bc:	e7ea      	b.n	8008494 <__lshift+0xa4>
 80084be:	bf00      	nop
 80084c0:	0800a5ee 	.word	0x0800a5ee
 80084c4:	0800a5ff 	.word	0x0800a5ff

080084c8 <__mcmp>:
 80084c8:	4603      	mov	r3, r0
 80084ca:	690a      	ldr	r2, [r1, #16]
 80084cc:	6900      	ldr	r0, [r0, #16]
 80084ce:	b530      	push	{r4, r5, lr}
 80084d0:	1a80      	subs	r0, r0, r2
 80084d2:	d10e      	bne.n	80084f2 <__mcmp+0x2a>
 80084d4:	3314      	adds	r3, #20
 80084d6:	3114      	adds	r1, #20
 80084d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084e8:	4295      	cmp	r5, r2
 80084ea:	d003      	beq.n	80084f4 <__mcmp+0x2c>
 80084ec:	d205      	bcs.n	80084fa <__mcmp+0x32>
 80084ee:	f04f 30ff 	mov.w	r0, #4294967295
 80084f2:	bd30      	pop	{r4, r5, pc}
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	d3f3      	bcc.n	80084e0 <__mcmp+0x18>
 80084f8:	e7fb      	b.n	80084f2 <__mcmp+0x2a>
 80084fa:	2001      	movs	r0, #1
 80084fc:	e7f9      	b.n	80084f2 <__mcmp+0x2a>
	...

08008500 <__mdiff>:
 8008500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	4689      	mov	r9, r1
 8008506:	4606      	mov	r6, r0
 8008508:	4611      	mov	r1, r2
 800850a:	4648      	mov	r0, r9
 800850c:	4614      	mov	r4, r2
 800850e:	f7ff ffdb 	bl	80084c8 <__mcmp>
 8008512:	1e05      	subs	r5, r0, #0
 8008514:	d112      	bne.n	800853c <__mdiff+0x3c>
 8008516:	4629      	mov	r1, r5
 8008518:	4630      	mov	r0, r6
 800851a:	f7ff fd63 	bl	8007fe4 <_Balloc>
 800851e:	4602      	mov	r2, r0
 8008520:	b928      	cbnz	r0, 800852e <__mdiff+0x2e>
 8008522:	f240 2137 	movw	r1, #567	@ 0x237
 8008526:	4b3e      	ldr	r3, [pc, #248]	@ (8008620 <__mdiff+0x120>)
 8008528:	483e      	ldr	r0, [pc, #248]	@ (8008624 <__mdiff+0x124>)
 800852a:	f000 faff 	bl	8008b2c <__assert_func>
 800852e:	2301      	movs	r3, #1
 8008530:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008534:	4610      	mov	r0, r2
 8008536:	b003      	add	sp, #12
 8008538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800853c:	bfbc      	itt	lt
 800853e:	464b      	movlt	r3, r9
 8008540:	46a1      	movlt	r9, r4
 8008542:	4630      	mov	r0, r6
 8008544:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008548:	bfba      	itte	lt
 800854a:	461c      	movlt	r4, r3
 800854c:	2501      	movlt	r5, #1
 800854e:	2500      	movge	r5, #0
 8008550:	f7ff fd48 	bl	8007fe4 <_Balloc>
 8008554:	4602      	mov	r2, r0
 8008556:	b918      	cbnz	r0, 8008560 <__mdiff+0x60>
 8008558:	f240 2145 	movw	r1, #581	@ 0x245
 800855c:	4b30      	ldr	r3, [pc, #192]	@ (8008620 <__mdiff+0x120>)
 800855e:	e7e3      	b.n	8008528 <__mdiff+0x28>
 8008560:	f100 0b14 	add.w	fp, r0, #20
 8008564:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008568:	f109 0310 	add.w	r3, r9, #16
 800856c:	60c5      	str	r5, [r0, #12]
 800856e:	f04f 0c00 	mov.w	ip, #0
 8008572:	f109 0514 	add.w	r5, r9, #20
 8008576:	46d9      	mov	r9, fp
 8008578:	6926      	ldr	r6, [r4, #16]
 800857a:	f104 0e14 	add.w	lr, r4, #20
 800857e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008582:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	9b01      	ldr	r3, [sp, #4]
 800858a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800858e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008592:	b281      	uxth	r1, r0
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	fa1f f38a 	uxth.w	r3, sl
 800859a:	1a5b      	subs	r3, r3, r1
 800859c:	0c00      	lsrs	r0, r0, #16
 800859e:	4463      	add	r3, ip
 80085a0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085a4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085ae:	4576      	cmp	r6, lr
 80085b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085b4:	f849 3b04 	str.w	r3, [r9], #4
 80085b8:	d8e6      	bhi.n	8008588 <__mdiff+0x88>
 80085ba:	1b33      	subs	r3, r6, r4
 80085bc:	3b15      	subs	r3, #21
 80085be:	f023 0303 	bic.w	r3, r3, #3
 80085c2:	3415      	adds	r4, #21
 80085c4:	3304      	adds	r3, #4
 80085c6:	42a6      	cmp	r6, r4
 80085c8:	bf38      	it	cc
 80085ca:	2304      	movcc	r3, #4
 80085cc:	441d      	add	r5, r3
 80085ce:	445b      	add	r3, fp
 80085d0:	461e      	mov	r6, r3
 80085d2:	462c      	mov	r4, r5
 80085d4:	4544      	cmp	r4, r8
 80085d6:	d30e      	bcc.n	80085f6 <__mdiff+0xf6>
 80085d8:	f108 0103 	add.w	r1, r8, #3
 80085dc:	1b49      	subs	r1, r1, r5
 80085de:	f021 0103 	bic.w	r1, r1, #3
 80085e2:	3d03      	subs	r5, #3
 80085e4:	45a8      	cmp	r8, r5
 80085e6:	bf38      	it	cc
 80085e8:	2100      	movcc	r1, #0
 80085ea:	440b      	add	r3, r1
 80085ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085f0:	b199      	cbz	r1, 800861a <__mdiff+0x11a>
 80085f2:	6117      	str	r7, [r2, #16]
 80085f4:	e79e      	b.n	8008534 <__mdiff+0x34>
 80085f6:	46e6      	mov	lr, ip
 80085f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80085fc:	fa1f fc81 	uxth.w	ip, r1
 8008600:	44f4      	add	ip, lr
 8008602:	0c08      	lsrs	r0, r1, #16
 8008604:	4471      	add	r1, lr
 8008606:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800860a:	b289      	uxth	r1, r1
 800860c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008610:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008614:	f846 1b04 	str.w	r1, [r6], #4
 8008618:	e7dc      	b.n	80085d4 <__mdiff+0xd4>
 800861a:	3f01      	subs	r7, #1
 800861c:	e7e6      	b.n	80085ec <__mdiff+0xec>
 800861e:	bf00      	nop
 8008620:	0800a5ee 	.word	0x0800a5ee
 8008624:	0800a5ff 	.word	0x0800a5ff

08008628 <__d2b>:
 8008628:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800862c:	2101      	movs	r1, #1
 800862e:	4690      	mov	r8, r2
 8008630:	4699      	mov	r9, r3
 8008632:	9e08      	ldr	r6, [sp, #32]
 8008634:	f7ff fcd6 	bl	8007fe4 <_Balloc>
 8008638:	4604      	mov	r4, r0
 800863a:	b930      	cbnz	r0, 800864a <__d2b+0x22>
 800863c:	4602      	mov	r2, r0
 800863e:	f240 310f 	movw	r1, #783	@ 0x30f
 8008642:	4b23      	ldr	r3, [pc, #140]	@ (80086d0 <__d2b+0xa8>)
 8008644:	4823      	ldr	r0, [pc, #140]	@ (80086d4 <__d2b+0xac>)
 8008646:	f000 fa71 	bl	8008b2c <__assert_func>
 800864a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800864e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008652:	b10d      	cbz	r5, 8008658 <__d2b+0x30>
 8008654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	f1b8 0300 	subs.w	r3, r8, #0
 800865e:	d024      	beq.n	80086aa <__d2b+0x82>
 8008660:	4668      	mov	r0, sp
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	f7ff fd85 	bl	8008172 <__lo0bits>
 8008668:	e9dd 1200 	ldrd	r1, r2, [sp]
 800866c:	b1d8      	cbz	r0, 80086a6 <__d2b+0x7e>
 800866e:	f1c0 0320 	rsb	r3, r0, #32
 8008672:	fa02 f303 	lsl.w	r3, r2, r3
 8008676:	430b      	orrs	r3, r1
 8008678:	40c2      	lsrs	r2, r0
 800867a:	6163      	str	r3, [r4, #20]
 800867c:	9201      	str	r2, [sp, #4]
 800867e:	9b01      	ldr	r3, [sp, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	bf0c      	ite	eq
 8008684:	2201      	moveq	r2, #1
 8008686:	2202      	movne	r2, #2
 8008688:	61a3      	str	r3, [r4, #24]
 800868a:	6122      	str	r2, [r4, #16]
 800868c:	b1ad      	cbz	r5, 80086ba <__d2b+0x92>
 800868e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008692:	4405      	add	r5, r0
 8008694:	6035      	str	r5, [r6, #0]
 8008696:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800869a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800869c:	6018      	str	r0, [r3, #0]
 800869e:	4620      	mov	r0, r4
 80086a0:	b002      	add	sp, #8
 80086a2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80086a6:	6161      	str	r1, [r4, #20]
 80086a8:	e7e9      	b.n	800867e <__d2b+0x56>
 80086aa:	a801      	add	r0, sp, #4
 80086ac:	f7ff fd61 	bl	8008172 <__lo0bits>
 80086b0:	9b01      	ldr	r3, [sp, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	6163      	str	r3, [r4, #20]
 80086b6:	3020      	adds	r0, #32
 80086b8:	e7e7      	b.n	800868a <__d2b+0x62>
 80086ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086c2:	6030      	str	r0, [r6, #0]
 80086c4:	6918      	ldr	r0, [r3, #16]
 80086c6:	f7ff fd35 	bl	8008134 <__hi0bits>
 80086ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086ce:	e7e4      	b.n	800869a <__d2b+0x72>
 80086d0:	0800a5ee 	.word	0x0800a5ee
 80086d4:	0800a5ff 	.word	0x0800a5ff

080086d8 <__ssputs_r>:
 80086d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086dc:	461f      	mov	r7, r3
 80086de:	688e      	ldr	r6, [r1, #8]
 80086e0:	4682      	mov	sl, r0
 80086e2:	42be      	cmp	r6, r7
 80086e4:	460c      	mov	r4, r1
 80086e6:	4690      	mov	r8, r2
 80086e8:	680b      	ldr	r3, [r1, #0]
 80086ea:	d82d      	bhi.n	8008748 <__ssputs_r+0x70>
 80086ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086f4:	d026      	beq.n	8008744 <__ssputs_r+0x6c>
 80086f6:	6965      	ldr	r5, [r4, #20]
 80086f8:	6909      	ldr	r1, [r1, #16]
 80086fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086fe:	eba3 0901 	sub.w	r9, r3, r1
 8008702:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008706:	1c7b      	adds	r3, r7, #1
 8008708:	444b      	add	r3, r9
 800870a:	106d      	asrs	r5, r5, #1
 800870c:	429d      	cmp	r5, r3
 800870e:	bf38      	it	cc
 8008710:	461d      	movcc	r5, r3
 8008712:	0553      	lsls	r3, r2, #21
 8008714:	d527      	bpl.n	8008766 <__ssputs_r+0x8e>
 8008716:	4629      	mov	r1, r5
 8008718:	f7ff fbd8 	bl	8007ecc <_malloc_r>
 800871c:	4606      	mov	r6, r0
 800871e:	b360      	cbz	r0, 800877a <__ssputs_r+0xa2>
 8008720:	464a      	mov	r2, r9
 8008722:	6921      	ldr	r1, [r4, #16]
 8008724:	f7fe fcf3 	bl	800710e <memcpy>
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800872e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008732:	81a3      	strh	r3, [r4, #12]
 8008734:	6126      	str	r6, [r4, #16]
 8008736:	444e      	add	r6, r9
 8008738:	6026      	str	r6, [r4, #0]
 800873a:	463e      	mov	r6, r7
 800873c:	6165      	str	r5, [r4, #20]
 800873e:	eba5 0509 	sub.w	r5, r5, r9
 8008742:	60a5      	str	r5, [r4, #8]
 8008744:	42be      	cmp	r6, r7
 8008746:	d900      	bls.n	800874a <__ssputs_r+0x72>
 8008748:	463e      	mov	r6, r7
 800874a:	4632      	mov	r2, r6
 800874c:	4641      	mov	r1, r8
 800874e:	6820      	ldr	r0, [r4, #0]
 8008750:	f000 f9c2 	bl	8008ad8 <memmove>
 8008754:	2000      	movs	r0, #0
 8008756:	68a3      	ldr	r3, [r4, #8]
 8008758:	1b9b      	subs	r3, r3, r6
 800875a:	60a3      	str	r3, [r4, #8]
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	4433      	add	r3, r6
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008766:	462a      	mov	r2, r5
 8008768:	f000 fa24 	bl	8008bb4 <_realloc_r>
 800876c:	4606      	mov	r6, r0
 800876e:	2800      	cmp	r0, #0
 8008770:	d1e0      	bne.n	8008734 <__ssputs_r+0x5c>
 8008772:	4650      	mov	r0, sl
 8008774:	6921      	ldr	r1, [r4, #16]
 8008776:	f7ff fb37 	bl	8007de8 <_free_r>
 800877a:	230c      	movs	r3, #12
 800877c:	f8ca 3000 	str.w	r3, [sl]
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	f04f 30ff 	mov.w	r0, #4294967295
 8008786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	e7e9      	b.n	8008762 <__ssputs_r+0x8a>
	...

08008790 <_svfiprintf_r>:
 8008790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008794:	4698      	mov	r8, r3
 8008796:	898b      	ldrh	r3, [r1, #12]
 8008798:	4607      	mov	r7, r0
 800879a:	061b      	lsls	r3, r3, #24
 800879c:	460d      	mov	r5, r1
 800879e:	4614      	mov	r4, r2
 80087a0:	b09d      	sub	sp, #116	@ 0x74
 80087a2:	d510      	bpl.n	80087c6 <_svfiprintf_r+0x36>
 80087a4:	690b      	ldr	r3, [r1, #16]
 80087a6:	b973      	cbnz	r3, 80087c6 <_svfiprintf_r+0x36>
 80087a8:	2140      	movs	r1, #64	@ 0x40
 80087aa:	f7ff fb8f 	bl	8007ecc <_malloc_r>
 80087ae:	6028      	str	r0, [r5, #0]
 80087b0:	6128      	str	r0, [r5, #16]
 80087b2:	b930      	cbnz	r0, 80087c2 <_svfiprintf_r+0x32>
 80087b4:	230c      	movs	r3, #12
 80087b6:	603b      	str	r3, [r7, #0]
 80087b8:	f04f 30ff 	mov.w	r0, #4294967295
 80087bc:	b01d      	add	sp, #116	@ 0x74
 80087be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c2:	2340      	movs	r3, #64	@ 0x40
 80087c4:	616b      	str	r3, [r5, #20]
 80087c6:	2300      	movs	r3, #0
 80087c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80087ca:	2320      	movs	r3, #32
 80087cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087d0:	2330      	movs	r3, #48	@ 0x30
 80087d2:	f04f 0901 	mov.w	r9, #1
 80087d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80087da:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008974 <_svfiprintf_r+0x1e4>
 80087de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087e2:	4623      	mov	r3, r4
 80087e4:	469a      	mov	sl, r3
 80087e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ea:	b10a      	cbz	r2, 80087f0 <_svfiprintf_r+0x60>
 80087ec:	2a25      	cmp	r2, #37	@ 0x25
 80087ee:	d1f9      	bne.n	80087e4 <_svfiprintf_r+0x54>
 80087f0:	ebba 0b04 	subs.w	fp, sl, r4
 80087f4:	d00b      	beq.n	800880e <_svfiprintf_r+0x7e>
 80087f6:	465b      	mov	r3, fp
 80087f8:	4622      	mov	r2, r4
 80087fa:	4629      	mov	r1, r5
 80087fc:	4638      	mov	r0, r7
 80087fe:	f7ff ff6b 	bl	80086d8 <__ssputs_r>
 8008802:	3001      	adds	r0, #1
 8008804:	f000 80a7 	beq.w	8008956 <_svfiprintf_r+0x1c6>
 8008808:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800880a:	445a      	add	r2, fp
 800880c:	9209      	str	r2, [sp, #36]	@ 0x24
 800880e:	f89a 3000 	ldrb.w	r3, [sl]
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 809f 	beq.w	8008956 <_svfiprintf_r+0x1c6>
 8008818:	2300      	movs	r3, #0
 800881a:	f04f 32ff 	mov.w	r2, #4294967295
 800881e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008822:	f10a 0a01 	add.w	sl, sl, #1
 8008826:	9304      	str	r3, [sp, #16]
 8008828:	9307      	str	r3, [sp, #28]
 800882a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800882e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008830:	4654      	mov	r4, sl
 8008832:	2205      	movs	r2, #5
 8008834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008838:	484e      	ldr	r0, [pc, #312]	@ (8008974 <_svfiprintf_r+0x1e4>)
 800883a:	f7fe fc5a 	bl	80070f2 <memchr>
 800883e:	9a04      	ldr	r2, [sp, #16]
 8008840:	b9d8      	cbnz	r0, 800887a <_svfiprintf_r+0xea>
 8008842:	06d0      	lsls	r0, r2, #27
 8008844:	bf44      	itt	mi
 8008846:	2320      	movmi	r3, #32
 8008848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800884c:	0711      	lsls	r1, r2, #28
 800884e:	bf44      	itt	mi
 8008850:	232b      	movmi	r3, #43	@ 0x2b
 8008852:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008856:	f89a 3000 	ldrb.w	r3, [sl]
 800885a:	2b2a      	cmp	r3, #42	@ 0x2a
 800885c:	d015      	beq.n	800888a <_svfiprintf_r+0xfa>
 800885e:	4654      	mov	r4, sl
 8008860:	2000      	movs	r0, #0
 8008862:	f04f 0c0a 	mov.w	ip, #10
 8008866:	9a07      	ldr	r2, [sp, #28]
 8008868:	4621      	mov	r1, r4
 800886a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800886e:	3b30      	subs	r3, #48	@ 0x30
 8008870:	2b09      	cmp	r3, #9
 8008872:	d94b      	bls.n	800890c <_svfiprintf_r+0x17c>
 8008874:	b1b0      	cbz	r0, 80088a4 <_svfiprintf_r+0x114>
 8008876:	9207      	str	r2, [sp, #28]
 8008878:	e014      	b.n	80088a4 <_svfiprintf_r+0x114>
 800887a:	eba0 0308 	sub.w	r3, r0, r8
 800887e:	fa09 f303 	lsl.w	r3, r9, r3
 8008882:	4313      	orrs	r3, r2
 8008884:	46a2      	mov	sl, r4
 8008886:	9304      	str	r3, [sp, #16]
 8008888:	e7d2      	b.n	8008830 <_svfiprintf_r+0xa0>
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	1d19      	adds	r1, r3, #4
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	9103      	str	r1, [sp, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	bfbb      	ittet	lt
 8008896:	425b      	neglt	r3, r3
 8008898:	f042 0202 	orrlt.w	r2, r2, #2
 800889c:	9307      	strge	r3, [sp, #28]
 800889e:	9307      	strlt	r3, [sp, #28]
 80088a0:	bfb8      	it	lt
 80088a2:	9204      	strlt	r2, [sp, #16]
 80088a4:	7823      	ldrb	r3, [r4, #0]
 80088a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80088a8:	d10a      	bne.n	80088c0 <_svfiprintf_r+0x130>
 80088aa:	7863      	ldrb	r3, [r4, #1]
 80088ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80088ae:	d132      	bne.n	8008916 <_svfiprintf_r+0x186>
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	3402      	adds	r4, #2
 80088b4:	1d1a      	adds	r2, r3, #4
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	9203      	str	r2, [sp, #12]
 80088ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088be:	9305      	str	r3, [sp, #20]
 80088c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008978 <_svfiprintf_r+0x1e8>
 80088c4:	2203      	movs	r2, #3
 80088c6:	4650      	mov	r0, sl
 80088c8:	7821      	ldrb	r1, [r4, #0]
 80088ca:	f7fe fc12 	bl	80070f2 <memchr>
 80088ce:	b138      	cbz	r0, 80088e0 <_svfiprintf_r+0x150>
 80088d0:	2240      	movs	r2, #64	@ 0x40
 80088d2:	9b04      	ldr	r3, [sp, #16]
 80088d4:	eba0 000a 	sub.w	r0, r0, sl
 80088d8:	4082      	lsls	r2, r0
 80088da:	4313      	orrs	r3, r2
 80088dc:	3401      	adds	r4, #1
 80088de:	9304      	str	r3, [sp, #16]
 80088e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e4:	2206      	movs	r2, #6
 80088e6:	4825      	ldr	r0, [pc, #148]	@ (800897c <_svfiprintf_r+0x1ec>)
 80088e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088ec:	f7fe fc01 	bl	80070f2 <memchr>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d036      	beq.n	8008962 <_svfiprintf_r+0x1d2>
 80088f4:	4b22      	ldr	r3, [pc, #136]	@ (8008980 <_svfiprintf_r+0x1f0>)
 80088f6:	bb1b      	cbnz	r3, 8008940 <_svfiprintf_r+0x1b0>
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	3307      	adds	r3, #7
 80088fc:	f023 0307 	bic.w	r3, r3, #7
 8008900:	3308      	adds	r3, #8
 8008902:	9303      	str	r3, [sp, #12]
 8008904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008906:	4433      	add	r3, r6
 8008908:	9309      	str	r3, [sp, #36]	@ 0x24
 800890a:	e76a      	b.n	80087e2 <_svfiprintf_r+0x52>
 800890c:	460c      	mov	r4, r1
 800890e:	2001      	movs	r0, #1
 8008910:	fb0c 3202 	mla	r2, ip, r2, r3
 8008914:	e7a8      	b.n	8008868 <_svfiprintf_r+0xd8>
 8008916:	2300      	movs	r3, #0
 8008918:	f04f 0c0a 	mov.w	ip, #10
 800891c:	4619      	mov	r1, r3
 800891e:	3401      	adds	r4, #1
 8008920:	9305      	str	r3, [sp, #20]
 8008922:	4620      	mov	r0, r4
 8008924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008928:	3a30      	subs	r2, #48	@ 0x30
 800892a:	2a09      	cmp	r2, #9
 800892c:	d903      	bls.n	8008936 <_svfiprintf_r+0x1a6>
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0c6      	beq.n	80088c0 <_svfiprintf_r+0x130>
 8008932:	9105      	str	r1, [sp, #20]
 8008934:	e7c4      	b.n	80088c0 <_svfiprintf_r+0x130>
 8008936:	4604      	mov	r4, r0
 8008938:	2301      	movs	r3, #1
 800893a:	fb0c 2101 	mla	r1, ip, r1, r2
 800893e:	e7f0      	b.n	8008922 <_svfiprintf_r+0x192>
 8008940:	ab03      	add	r3, sp, #12
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	462a      	mov	r2, r5
 8008946:	4638      	mov	r0, r7
 8008948:	4b0e      	ldr	r3, [pc, #56]	@ (8008984 <_svfiprintf_r+0x1f4>)
 800894a:	a904      	add	r1, sp, #16
 800894c:	f7fd fe6e 	bl	800662c <_printf_float>
 8008950:	1c42      	adds	r2, r0, #1
 8008952:	4606      	mov	r6, r0
 8008954:	d1d6      	bne.n	8008904 <_svfiprintf_r+0x174>
 8008956:	89ab      	ldrh	r3, [r5, #12]
 8008958:	065b      	lsls	r3, r3, #25
 800895a:	f53f af2d 	bmi.w	80087b8 <_svfiprintf_r+0x28>
 800895e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008960:	e72c      	b.n	80087bc <_svfiprintf_r+0x2c>
 8008962:	ab03      	add	r3, sp, #12
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	462a      	mov	r2, r5
 8008968:	4638      	mov	r0, r7
 800896a:	4b06      	ldr	r3, [pc, #24]	@ (8008984 <_svfiprintf_r+0x1f4>)
 800896c:	a904      	add	r1, sp, #16
 800896e:	f7fe f8fb 	bl	8006b68 <_printf_i>
 8008972:	e7ed      	b.n	8008950 <_svfiprintf_r+0x1c0>
 8008974:	0800a658 	.word	0x0800a658
 8008978:	0800a65e 	.word	0x0800a65e
 800897c:	0800a662 	.word	0x0800a662
 8008980:	0800662d 	.word	0x0800662d
 8008984:	080086d9 	.word	0x080086d9

08008988 <__sflush_r>:
 8008988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	0716      	lsls	r6, r2, #28
 8008990:	4605      	mov	r5, r0
 8008992:	460c      	mov	r4, r1
 8008994:	d454      	bmi.n	8008a40 <__sflush_r+0xb8>
 8008996:	684b      	ldr	r3, [r1, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	dc02      	bgt.n	80089a2 <__sflush_r+0x1a>
 800899c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800899e:	2b00      	cmp	r3, #0
 80089a0:	dd48      	ble.n	8008a34 <__sflush_r+0xac>
 80089a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089a4:	2e00      	cmp	r6, #0
 80089a6:	d045      	beq.n	8008a34 <__sflush_r+0xac>
 80089a8:	2300      	movs	r3, #0
 80089aa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089ae:	682f      	ldr	r7, [r5, #0]
 80089b0:	6a21      	ldr	r1, [r4, #32]
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	d030      	beq.n	8008a18 <__sflush_r+0x90>
 80089b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089b8:	89a3      	ldrh	r3, [r4, #12]
 80089ba:	0759      	lsls	r1, r3, #29
 80089bc:	d505      	bpl.n	80089ca <__sflush_r+0x42>
 80089be:	6863      	ldr	r3, [r4, #4]
 80089c0:	1ad2      	subs	r2, r2, r3
 80089c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089c4:	b10b      	cbz	r3, 80089ca <__sflush_r+0x42>
 80089c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089c8:	1ad2      	subs	r2, r2, r3
 80089ca:	2300      	movs	r3, #0
 80089cc:	4628      	mov	r0, r5
 80089ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089d0:	6a21      	ldr	r1, [r4, #32]
 80089d2:	47b0      	blx	r6
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	d106      	bne.n	80089e8 <__sflush_r+0x60>
 80089da:	6829      	ldr	r1, [r5, #0]
 80089dc:	291d      	cmp	r1, #29
 80089de:	d82b      	bhi.n	8008a38 <__sflush_r+0xb0>
 80089e0:	4a28      	ldr	r2, [pc, #160]	@ (8008a84 <__sflush_r+0xfc>)
 80089e2:	40ca      	lsrs	r2, r1
 80089e4:	07d6      	lsls	r6, r2, #31
 80089e6:	d527      	bpl.n	8008a38 <__sflush_r+0xb0>
 80089e8:	2200      	movs	r2, #0
 80089ea:	6062      	str	r2, [r4, #4]
 80089ec:	6922      	ldr	r2, [r4, #16]
 80089ee:	04d9      	lsls	r1, r3, #19
 80089f0:	6022      	str	r2, [r4, #0]
 80089f2:	d504      	bpl.n	80089fe <__sflush_r+0x76>
 80089f4:	1c42      	adds	r2, r0, #1
 80089f6:	d101      	bne.n	80089fc <__sflush_r+0x74>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	b903      	cbnz	r3, 80089fe <__sflush_r+0x76>
 80089fc:	6560      	str	r0, [r4, #84]	@ 0x54
 80089fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a00:	602f      	str	r7, [r5, #0]
 8008a02:	b1b9      	cbz	r1, 8008a34 <__sflush_r+0xac>
 8008a04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a08:	4299      	cmp	r1, r3
 8008a0a:	d002      	beq.n	8008a12 <__sflush_r+0x8a>
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f7ff f9eb 	bl	8007de8 <_free_r>
 8008a12:	2300      	movs	r3, #0
 8008a14:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a16:	e00d      	b.n	8008a34 <__sflush_r+0xac>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b0      	blx	r6
 8008a1e:	4602      	mov	r2, r0
 8008a20:	1c50      	adds	r0, r2, #1
 8008a22:	d1c9      	bne.n	80089b8 <__sflush_r+0x30>
 8008a24:	682b      	ldr	r3, [r5, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d0c6      	beq.n	80089b8 <__sflush_r+0x30>
 8008a2a:	2b1d      	cmp	r3, #29
 8008a2c:	d001      	beq.n	8008a32 <__sflush_r+0xaa>
 8008a2e:	2b16      	cmp	r3, #22
 8008a30:	d11d      	bne.n	8008a6e <__sflush_r+0xe6>
 8008a32:	602f      	str	r7, [r5, #0]
 8008a34:	2000      	movs	r0, #0
 8008a36:	e021      	b.n	8008a7c <__sflush_r+0xf4>
 8008a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a3c:	b21b      	sxth	r3, r3
 8008a3e:	e01a      	b.n	8008a76 <__sflush_r+0xee>
 8008a40:	690f      	ldr	r7, [r1, #16]
 8008a42:	2f00      	cmp	r7, #0
 8008a44:	d0f6      	beq.n	8008a34 <__sflush_r+0xac>
 8008a46:	0793      	lsls	r3, r2, #30
 8008a48:	bf18      	it	ne
 8008a4a:	2300      	movne	r3, #0
 8008a4c:	680e      	ldr	r6, [r1, #0]
 8008a4e:	bf08      	it	eq
 8008a50:	694b      	ldreq	r3, [r1, #20]
 8008a52:	1bf6      	subs	r6, r6, r7
 8008a54:	600f      	str	r7, [r1, #0]
 8008a56:	608b      	str	r3, [r1, #8]
 8008a58:	2e00      	cmp	r6, #0
 8008a5a:	ddeb      	ble.n	8008a34 <__sflush_r+0xac>
 8008a5c:	4633      	mov	r3, r6
 8008a5e:	463a      	mov	r2, r7
 8008a60:	4628      	mov	r0, r5
 8008a62:	6a21      	ldr	r1, [r4, #32]
 8008a64:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008a68:	47e0      	blx	ip
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	dc07      	bgt.n	8008a7e <__sflush_r+0xf6>
 8008a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a76:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a7e:	4407      	add	r7, r0
 8008a80:	1a36      	subs	r6, r6, r0
 8008a82:	e7e9      	b.n	8008a58 <__sflush_r+0xd0>
 8008a84:	20400001 	.word	0x20400001

08008a88 <_fflush_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	690b      	ldr	r3, [r1, #16]
 8008a8c:	4605      	mov	r5, r0
 8008a8e:	460c      	mov	r4, r1
 8008a90:	b913      	cbnz	r3, 8008a98 <_fflush_r+0x10>
 8008a92:	2500      	movs	r5, #0
 8008a94:	4628      	mov	r0, r5
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	b118      	cbz	r0, 8008aa2 <_fflush_r+0x1a>
 8008a9a:	6a03      	ldr	r3, [r0, #32]
 8008a9c:	b90b      	cbnz	r3, 8008aa2 <_fflush_r+0x1a>
 8008a9e:	f7fe fa0d 	bl	8006ebc <__sinit>
 8008aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0f3      	beq.n	8008a92 <_fflush_r+0xa>
 8008aaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008aac:	07d0      	lsls	r0, r2, #31
 8008aae:	d404      	bmi.n	8008aba <_fflush_r+0x32>
 8008ab0:	0599      	lsls	r1, r3, #22
 8008ab2:	d402      	bmi.n	8008aba <_fflush_r+0x32>
 8008ab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ab6:	f7fe fb1a 	bl	80070ee <__retarget_lock_acquire_recursive>
 8008aba:	4628      	mov	r0, r5
 8008abc:	4621      	mov	r1, r4
 8008abe:	f7ff ff63 	bl	8008988 <__sflush_r>
 8008ac2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	07da      	lsls	r2, r3, #31
 8008ac8:	d4e4      	bmi.n	8008a94 <_fflush_r+0xc>
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	059b      	lsls	r3, r3, #22
 8008ace:	d4e1      	bmi.n	8008a94 <_fflush_r+0xc>
 8008ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ad2:	f7fe fb0d 	bl	80070f0 <__retarget_lock_release_recursive>
 8008ad6:	e7dd      	b.n	8008a94 <_fflush_r+0xc>

08008ad8 <memmove>:
 8008ad8:	4288      	cmp	r0, r1
 8008ada:	b510      	push	{r4, lr}
 8008adc:	eb01 0402 	add.w	r4, r1, r2
 8008ae0:	d902      	bls.n	8008ae8 <memmove+0x10>
 8008ae2:	4284      	cmp	r4, r0
 8008ae4:	4623      	mov	r3, r4
 8008ae6:	d807      	bhi.n	8008af8 <memmove+0x20>
 8008ae8:	1e43      	subs	r3, r0, #1
 8008aea:	42a1      	cmp	r1, r4
 8008aec:	d008      	beq.n	8008b00 <memmove+0x28>
 8008aee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008af2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008af6:	e7f8      	b.n	8008aea <memmove+0x12>
 8008af8:	4601      	mov	r1, r0
 8008afa:	4402      	add	r2, r0
 8008afc:	428a      	cmp	r2, r1
 8008afe:	d100      	bne.n	8008b02 <memmove+0x2a>
 8008b00:	bd10      	pop	{r4, pc}
 8008b02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b0a:	e7f7      	b.n	8008afc <memmove+0x24>

08008b0c <_sbrk_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	2300      	movs	r3, #0
 8008b10:	4d05      	ldr	r5, [pc, #20]	@ (8008b28 <_sbrk_r+0x1c>)
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	602b      	str	r3, [r5, #0]
 8008b18:	f7fa fb4e 	bl	80031b8 <_sbrk>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_sbrk_r+0x1a>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_sbrk_r+0x1a>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	200005d8 	.word	0x200005d8

08008b2c <__assert_func>:
 8008b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b2e:	4614      	mov	r4, r2
 8008b30:	461a      	mov	r2, r3
 8008b32:	4b09      	ldr	r3, [pc, #36]	@ (8008b58 <__assert_func+0x2c>)
 8008b34:	4605      	mov	r5, r0
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68d8      	ldr	r0, [r3, #12]
 8008b3a:	b14c      	cbz	r4, 8008b50 <__assert_func+0x24>
 8008b3c:	4b07      	ldr	r3, [pc, #28]	@ (8008b5c <__assert_func+0x30>)
 8008b3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b42:	9100      	str	r1, [sp, #0]
 8008b44:	462b      	mov	r3, r5
 8008b46:	4906      	ldr	r1, [pc, #24]	@ (8008b60 <__assert_func+0x34>)
 8008b48:	f000 f870 	bl	8008c2c <fiprintf>
 8008b4c:	f000 f880 	bl	8008c50 <abort>
 8008b50:	4b04      	ldr	r3, [pc, #16]	@ (8008b64 <__assert_func+0x38>)
 8008b52:	461c      	mov	r4, r3
 8008b54:	e7f3      	b.n	8008b3e <__assert_func+0x12>
 8008b56:	bf00      	nop
 8008b58:	20000018 	.word	0x20000018
 8008b5c:	0800a673 	.word	0x0800a673
 8008b60:	0800a680 	.word	0x0800a680
 8008b64:	0800a6ae 	.word	0x0800a6ae

08008b68 <_calloc_r>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	fba1 5402 	umull	r5, r4, r1, r2
 8008b6e:	b934      	cbnz	r4, 8008b7e <_calloc_r+0x16>
 8008b70:	4629      	mov	r1, r5
 8008b72:	f7ff f9ab 	bl	8007ecc <_malloc_r>
 8008b76:	4606      	mov	r6, r0
 8008b78:	b928      	cbnz	r0, 8008b86 <_calloc_r+0x1e>
 8008b7a:	4630      	mov	r0, r6
 8008b7c:	bd70      	pop	{r4, r5, r6, pc}
 8008b7e:	220c      	movs	r2, #12
 8008b80:	2600      	movs	r6, #0
 8008b82:	6002      	str	r2, [r0, #0]
 8008b84:	e7f9      	b.n	8008b7a <_calloc_r+0x12>
 8008b86:	462a      	mov	r2, r5
 8008b88:	4621      	mov	r1, r4
 8008b8a:	f7fe fa32 	bl	8006ff2 <memset>
 8008b8e:	e7f4      	b.n	8008b7a <_calloc_r+0x12>

08008b90 <__ascii_mbtowc>:
 8008b90:	b082      	sub	sp, #8
 8008b92:	b901      	cbnz	r1, 8008b96 <__ascii_mbtowc+0x6>
 8008b94:	a901      	add	r1, sp, #4
 8008b96:	b142      	cbz	r2, 8008baa <__ascii_mbtowc+0x1a>
 8008b98:	b14b      	cbz	r3, 8008bae <__ascii_mbtowc+0x1e>
 8008b9a:	7813      	ldrb	r3, [r2, #0]
 8008b9c:	600b      	str	r3, [r1, #0]
 8008b9e:	7812      	ldrb	r2, [r2, #0]
 8008ba0:	1e10      	subs	r0, r2, #0
 8008ba2:	bf18      	it	ne
 8008ba4:	2001      	movne	r0, #1
 8008ba6:	b002      	add	sp, #8
 8008ba8:	4770      	bx	lr
 8008baa:	4610      	mov	r0, r2
 8008bac:	e7fb      	b.n	8008ba6 <__ascii_mbtowc+0x16>
 8008bae:	f06f 0001 	mvn.w	r0, #1
 8008bb2:	e7f8      	b.n	8008ba6 <__ascii_mbtowc+0x16>

08008bb4 <_realloc_r>:
 8008bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb8:	4607      	mov	r7, r0
 8008bba:	4614      	mov	r4, r2
 8008bbc:	460d      	mov	r5, r1
 8008bbe:	b921      	cbnz	r1, 8008bca <_realloc_r+0x16>
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc6:	f7ff b981 	b.w	8007ecc <_malloc_r>
 8008bca:	b92a      	cbnz	r2, 8008bd8 <_realloc_r+0x24>
 8008bcc:	f7ff f90c 	bl	8007de8 <_free_r>
 8008bd0:	4625      	mov	r5, r4
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd8:	f000 f841 	bl	8008c5e <_malloc_usable_size_r>
 8008bdc:	4284      	cmp	r4, r0
 8008bde:	4606      	mov	r6, r0
 8008be0:	d802      	bhi.n	8008be8 <_realloc_r+0x34>
 8008be2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008be6:	d8f4      	bhi.n	8008bd2 <_realloc_r+0x1e>
 8008be8:	4621      	mov	r1, r4
 8008bea:	4638      	mov	r0, r7
 8008bec:	f7ff f96e 	bl	8007ecc <_malloc_r>
 8008bf0:	4680      	mov	r8, r0
 8008bf2:	b908      	cbnz	r0, 8008bf8 <_realloc_r+0x44>
 8008bf4:	4645      	mov	r5, r8
 8008bf6:	e7ec      	b.n	8008bd2 <_realloc_r+0x1e>
 8008bf8:	42b4      	cmp	r4, r6
 8008bfa:	4622      	mov	r2, r4
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	bf28      	it	cs
 8008c00:	4632      	movcs	r2, r6
 8008c02:	f7fe fa84 	bl	800710e <memcpy>
 8008c06:	4629      	mov	r1, r5
 8008c08:	4638      	mov	r0, r7
 8008c0a:	f7ff f8ed 	bl	8007de8 <_free_r>
 8008c0e:	e7f1      	b.n	8008bf4 <_realloc_r+0x40>

08008c10 <__ascii_wctomb>:
 8008c10:	4603      	mov	r3, r0
 8008c12:	4608      	mov	r0, r1
 8008c14:	b141      	cbz	r1, 8008c28 <__ascii_wctomb+0x18>
 8008c16:	2aff      	cmp	r2, #255	@ 0xff
 8008c18:	d904      	bls.n	8008c24 <__ascii_wctomb+0x14>
 8008c1a:	228a      	movs	r2, #138	@ 0x8a
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	4770      	bx	lr
 8008c24:	2001      	movs	r0, #1
 8008c26:	700a      	strb	r2, [r1, #0]
 8008c28:	4770      	bx	lr
	...

08008c2c <fiprintf>:
 8008c2c:	b40e      	push	{r1, r2, r3}
 8008c2e:	b503      	push	{r0, r1, lr}
 8008c30:	4601      	mov	r1, r0
 8008c32:	ab03      	add	r3, sp, #12
 8008c34:	4805      	ldr	r0, [pc, #20]	@ (8008c4c <fiprintf+0x20>)
 8008c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c3a:	6800      	ldr	r0, [r0, #0]
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	f000 f83d 	bl	8008cbc <_vfiprintf_r>
 8008c42:	b002      	add	sp, #8
 8008c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c48:	b003      	add	sp, #12
 8008c4a:	4770      	bx	lr
 8008c4c:	20000018 	.word	0x20000018

08008c50 <abort>:
 8008c50:	2006      	movs	r0, #6
 8008c52:	b508      	push	{r3, lr}
 8008c54:	f000 fa06 	bl	8009064 <raise>
 8008c58:	2001      	movs	r0, #1
 8008c5a:	f7fa fa38 	bl	80030ce <_exit>

08008c5e <_malloc_usable_size_r>:
 8008c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c62:	1f18      	subs	r0, r3, #4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	bfbc      	itt	lt
 8008c68:	580b      	ldrlt	r3, [r1, r0]
 8008c6a:	18c0      	addlt	r0, r0, r3
 8008c6c:	4770      	bx	lr

08008c6e <__sfputc_r>:
 8008c6e:	6893      	ldr	r3, [r2, #8]
 8008c70:	b410      	push	{r4}
 8008c72:	3b01      	subs	r3, #1
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	6093      	str	r3, [r2, #8]
 8008c78:	da07      	bge.n	8008c8a <__sfputc_r+0x1c>
 8008c7a:	6994      	ldr	r4, [r2, #24]
 8008c7c:	42a3      	cmp	r3, r4
 8008c7e:	db01      	blt.n	8008c84 <__sfputc_r+0x16>
 8008c80:	290a      	cmp	r1, #10
 8008c82:	d102      	bne.n	8008c8a <__sfputc_r+0x1c>
 8008c84:	bc10      	pop	{r4}
 8008c86:	f000 b931 	b.w	8008eec <__swbuf_r>
 8008c8a:	6813      	ldr	r3, [r2, #0]
 8008c8c:	1c58      	adds	r0, r3, #1
 8008c8e:	6010      	str	r0, [r2, #0]
 8008c90:	7019      	strb	r1, [r3, #0]
 8008c92:	4608      	mov	r0, r1
 8008c94:	bc10      	pop	{r4}
 8008c96:	4770      	bx	lr

08008c98 <__sfputs_r>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	460f      	mov	r7, r1
 8008c9e:	4614      	mov	r4, r2
 8008ca0:	18d5      	adds	r5, r2, r3
 8008ca2:	42ac      	cmp	r4, r5
 8008ca4:	d101      	bne.n	8008caa <__sfputs_r+0x12>
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	e007      	b.n	8008cba <__sfputs_r+0x22>
 8008caa:	463a      	mov	r2, r7
 8008cac:	4630      	mov	r0, r6
 8008cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb2:	f7ff ffdc 	bl	8008c6e <__sfputc_r>
 8008cb6:	1c43      	adds	r3, r0, #1
 8008cb8:	d1f3      	bne.n	8008ca2 <__sfputs_r+0xa>
 8008cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008cbc <_vfiprintf_r>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	4614      	mov	r4, r2
 8008cc4:	4698      	mov	r8, r3
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	b09d      	sub	sp, #116	@ 0x74
 8008cca:	b118      	cbz	r0, 8008cd4 <_vfiprintf_r+0x18>
 8008ccc:	6a03      	ldr	r3, [r0, #32]
 8008cce:	b90b      	cbnz	r3, 8008cd4 <_vfiprintf_r+0x18>
 8008cd0:	f7fe f8f4 	bl	8006ebc <__sinit>
 8008cd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cd6:	07d9      	lsls	r1, r3, #31
 8008cd8:	d405      	bmi.n	8008ce6 <_vfiprintf_r+0x2a>
 8008cda:	89ab      	ldrh	r3, [r5, #12]
 8008cdc:	059a      	lsls	r2, r3, #22
 8008cde:	d402      	bmi.n	8008ce6 <_vfiprintf_r+0x2a>
 8008ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ce2:	f7fe fa04 	bl	80070ee <__retarget_lock_acquire_recursive>
 8008ce6:	89ab      	ldrh	r3, [r5, #12]
 8008ce8:	071b      	lsls	r3, r3, #28
 8008cea:	d501      	bpl.n	8008cf0 <_vfiprintf_r+0x34>
 8008cec:	692b      	ldr	r3, [r5, #16]
 8008cee:	b99b      	cbnz	r3, 8008d18 <_vfiprintf_r+0x5c>
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f000 f938 	bl	8008f68 <__swsetup_r>
 8008cf8:	b170      	cbz	r0, 8008d18 <_vfiprintf_r+0x5c>
 8008cfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cfc:	07dc      	lsls	r4, r3, #31
 8008cfe:	d504      	bpl.n	8008d0a <_vfiprintf_r+0x4e>
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295
 8008d04:	b01d      	add	sp, #116	@ 0x74
 8008d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0a:	89ab      	ldrh	r3, [r5, #12]
 8008d0c:	0598      	lsls	r0, r3, #22
 8008d0e:	d4f7      	bmi.n	8008d00 <_vfiprintf_r+0x44>
 8008d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d12:	f7fe f9ed 	bl	80070f0 <__retarget_lock_release_recursive>
 8008d16:	e7f3      	b.n	8008d00 <_vfiprintf_r+0x44>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d1c:	2320      	movs	r3, #32
 8008d1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d22:	2330      	movs	r3, #48	@ 0x30
 8008d24:	f04f 0901 	mov.w	r9, #1
 8008d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d2c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008ed8 <_vfiprintf_r+0x21c>
 8008d30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d34:	4623      	mov	r3, r4
 8008d36:	469a      	mov	sl, r3
 8008d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d3c:	b10a      	cbz	r2, 8008d42 <_vfiprintf_r+0x86>
 8008d3e:	2a25      	cmp	r2, #37	@ 0x25
 8008d40:	d1f9      	bne.n	8008d36 <_vfiprintf_r+0x7a>
 8008d42:	ebba 0b04 	subs.w	fp, sl, r4
 8008d46:	d00b      	beq.n	8008d60 <_vfiprintf_r+0xa4>
 8008d48:	465b      	mov	r3, fp
 8008d4a:	4622      	mov	r2, r4
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	4630      	mov	r0, r6
 8008d50:	f7ff ffa2 	bl	8008c98 <__sfputs_r>
 8008d54:	3001      	adds	r0, #1
 8008d56:	f000 80a7 	beq.w	8008ea8 <_vfiprintf_r+0x1ec>
 8008d5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d5c:	445a      	add	r2, fp
 8008d5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d60:	f89a 3000 	ldrb.w	r3, [sl]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 809f 	beq.w	8008ea8 <_vfiprintf_r+0x1ec>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d74:	f10a 0a01 	add.w	sl, sl, #1
 8008d78:	9304      	str	r3, [sp, #16]
 8008d7a:	9307      	str	r3, [sp, #28]
 8008d7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d80:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d82:	4654      	mov	r4, sl
 8008d84:	2205      	movs	r2, #5
 8008d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d8a:	4853      	ldr	r0, [pc, #332]	@ (8008ed8 <_vfiprintf_r+0x21c>)
 8008d8c:	f7fe f9b1 	bl	80070f2 <memchr>
 8008d90:	9a04      	ldr	r2, [sp, #16]
 8008d92:	b9d8      	cbnz	r0, 8008dcc <_vfiprintf_r+0x110>
 8008d94:	06d1      	lsls	r1, r2, #27
 8008d96:	bf44      	itt	mi
 8008d98:	2320      	movmi	r3, #32
 8008d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d9e:	0713      	lsls	r3, r2, #28
 8008da0:	bf44      	itt	mi
 8008da2:	232b      	movmi	r3, #43	@ 0x2b
 8008da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008da8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dae:	d015      	beq.n	8008ddc <_vfiprintf_r+0x120>
 8008db0:	4654      	mov	r4, sl
 8008db2:	2000      	movs	r0, #0
 8008db4:	f04f 0c0a 	mov.w	ip, #10
 8008db8:	9a07      	ldr	r2, [sp, #28]
 8008dba:	4621      	mov	r1, r4
 8008dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dc0:	3b30      	subs	r3, #48	@ 0x30
 8008dc2:	2b09      	cmp	r3, #9
 8008dc4:	d94b      	bls.n	8008e5e <_vfiprintf_r+0x1a2>
 8008dc6:	b1b0      	cbz	r0, 8008df6 <_vfiprintf_r+0x13a>
 8008dc8:	9207      	str	r2, [sp, #28]
 8008dca:	e014      	b.n	8008df6 <_vfiprintf_r+0x13a>
 8008dcc:	eba0 0308 	sub.w	r3, r0, r8
 8008dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	46a2      	mov	sl, r4
 8008dd8:	9304      	str	r3, [sp, #16]
 8008dda:	e7d2      	b.n	8008d82 <_vfiprintf_r+0xc6>
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	1d19      	adds	r1, r3, #4
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	9103      	str	r1, [sp, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	bfbb      	ittet	lt
 8008de8:	425b      	neglt	r3, r3
 8008dea:	f042 0202 	orrlt.w	r2, r2, #2
 8008dee:	9307      	strge	r3, [sp, #28]
 8008df0:	9307      	strlt	r3, [sp, #28]
 8008df2:	bfb8      	it	lt
 8008df4:	9204      	strlt	r2, [sp, #16]
 8008df6:	7823      	ldrb	r3, [r4, #0]
 8008df8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dfa:	d10a      	bne.n	8008e12 <_vfiprintf_r+0x156>
 8008dfc:	7863      	ldrb	r3, [r4, #1]
 8008dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e00:	d132      	bne.n	8008e68 <_vfiprintf_r+0x1ac>
 8008e02:	9b03      	ldr	r3, [sp, #12]
 8008e04:	3402      	adds	r4, #2
 8008e06:	1d1a      	adds	r2, r3, #4
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	9203      	str	r2, [sp, #12]
 8008e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e10:	9305      	str	r3, [sp, #20]
 8008e12:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008edc <_vfiprintf_r+0x220>
 8008e16:	2203      	movs	r2, #3
 8008e18:	4650      	mov	r0, sl
 8008e1a:	7821      	ldrb	r1, [r4, #0]
 8008e1c:	f7fe f969 	bl	80070f2 <memchr>
 8008e20:	b138      	cbz	r0, 8008e32 <_vfiprintf_r+0x176>
 8008e22:	2240      	movs	r2, #64	@ 0x40
 8008e24:	9b04      	ldr	r3, [sp, #16]
 8008e26:	eba0 000a 	sub.w	r0, r0, sl
 8008e2a:	4082      	lsls	r2, r0
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	3401      	adds	r4, #1
 8008e30:	9304      	str	r3, [sp, #16]
 8008e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e36:	2206      	movs	r2, #6
 8008e38:	4829      	ldr	r0, [pc, #164]	@ (8008ee0 <_vfiprintf_r+0x224>)
 8008e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e3e:	f7fe f958 	bl	80070f2 <memchr>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d03f      	beq.n	8008ec6 <_vfiprintf_r+0x20a>
 8008e46:	4b27      	ldr	r3, [pc, #156]	@ (8008ee4 <_vfiprintf_r+0x228>)
 8008e48:	bb1b      	cbnz	r3, 8008e92 <_vfiprintf_r+0x1d6>
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	3307      	adds	r3, #7
 8008e4e:	f023 0307 	bic.w	r3, r3, #7
 8008e52:	3308      	adds	r3, #8
 8008e54:	9303      	str	r3, [sp, #12]
 8008e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e58:	443b      	add	r3, r7
 8008e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e5c:	e76a      	b.n	8008d34 <_vfiprintf_r+0x78>
 8008e5e:	460c      	mov	r4, r1
 8008e60:	2001      	movs	r0, #1
 8008e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e66:	e7a8      	b.n	8008dba <_vfiprintf_r+0xfe>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f04f 0c0a 	mov.w	ip, #10
 8008e6e:	4619      	mov	r1, r3
 8008e70:	3401      	adds	r4, #1
 8008e72:	9305      	str	r3, [sp, #20]
 8008e74:	4620      	mov	r0, r4
 8008e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e7a:	3a30      	subs	r2, #48	@ 0x30
 8008e7c:	2a09      	cmp	r2, #9
 8008e7e:	d903      	bls.n	8008e88 <_vfiprintf_r+0x1cc>
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d0c6      	beq.n	8008e12 <_vfiprintf_r+0x156>
 8008e84:	9105      	str	r1, [sp, #20]
 8008e86:	e7c4      	b.n	8008e12 <_vfiprintf_r+0x156>
 8008e88:	4604      	mov	r4, r0
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e90:	e7f0      	b.n	8008e74 <_vfiprintf_r+0x1b8>
 8008e92:	ab03      	add	r3, sp, #12
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	462a      	mov	r2, r5
 8008e98:	4630      	mov	r0, r6
 8008e9a:	4b13      	ldr	r3, [pc, #76]	@ (8008ee8 <_vfiprintf_r+0x22c>)
 8008e9c:	a904      	add	r1, sp, #16
 8008e9e:	f7fd fbc5 	bl	800662c <_printf_float>
 8008ea2:	4607      	mov	r7, r0
 8008ea4:	1c78      	adds	r0, r7, #1
 8008ea6:	d1d6      	bne.n	8008e56 <_vfiprintf_r+0x19a>
 8008ea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eaa:	07d9      	lsls	r1, r3, #31
 8008eac:	d405      	bmi.n	8008eba <_vfiprintf_r+0x1fe>
 8008eae:	89ab      	ldrh	r3, [r5, #12]
 8008eb0:	059a      	lsls	r2, r3, #22
 8008eb2:	d402      	bmi.n	8008eba <_vfiprintf_r+0x1fe>
 8008eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eb6:	f7fe f91b 	bl	80070f0 <__retarget_lock_release_recursive>
 8008eba:	89ab      	ldrh	r3, [r5, #12]
 8008ebc:	065b      	lsls	r3, r3, #25
 8008ebe:	f53f af1f 	bmi.w	8008d00 <_vfiprintf_r+0x44>
 8008ec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ec4:	e71e      	b.n	8008d04 <_vfiprintf_r+0x48>
 8008ec6:	ab03      	add	r3, sp, #12
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	462a      	mov	r2, r5
 8008ecc:	4630      	mov	r0, r6
 8008ece:	4b06      	ldr	r3, [pc, #24]	@ (8008ee8 <_vfiprintf_r+0x22c>)
 8008ed0:	a904      	add	r1, sp, #16
 8008ed2:	f7fd fe49 	bl	8006b68 <_printf_i>
 8008ed6:	e7e4      	b.n	8008ea2 <_vfiprintf_r+0x1e6>
 8008ed8:	0800a658 	.word	0x0800a658
 8008edc:	0800a65e 	.word	0x0800a65e
 8008ee0:	0800a662 	.word	0x0800a662
 8008ee4:	0800662d 	.word	0x0800662d
 8008ee8:	08008c99 	.word	0x08008c99

08008eec <__swbuf_r>:
 8008eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eee:	460e      	mov	r6, r1
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	4605      	mov	r5, r0
 8008ef4:	b118      	cbz	r0, 8008efe <__swbuf_r+0x12>
 8008ef6:	6a03      	ldr	r3, [r0, #32]
 8008ef8:	b90b      	cbnz	r3, 8008efe <__swbuf_r+0x12>
 8008efa:	f7fd ffdf 	bl	8006ebc <__sinit>
 8008efe:	69a3      	ldr	r3, [r4, #24]
 8008f00:	60a3      	str	r3, [r4, #8]
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	071a      	lsls	r2, r3, #28
 8008f06:	d501      	bpl.n	8008f0c <__swbuf_r+0x20>
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	b943      	cbnz	r3, 8008f1e <__swbuf_r+0x32>
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f000 f82a 	bl	8008f68 <__swsetup_r>
 8008f14:	b118      	cbz	r0, 8008f1e <__swbuf_r+0x32>
 8008f16:	f04f 37ff 	mov.w	r7, #4294967295
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	6922      	ldr	r2, [r4, #16]
 8008f22:	b2f6      	uxtb	r6, r6
 8008f24:	1a98      	subs	r0, r3, r2
 8008f26:	6963      	ldr	r3, [r4, #20]
 8008f28:	4637      	mov	r7, r6
 8008f2a:	4283      	cmp	r3, r0
 8008f2c:	dc05      	bgt.n	8008f3a <__swbuf_r+0x4e>
 8008f2e:	4621      	mov	r1, r4
 8008f30:	4628      	mov	r0, r5
 8008f32:	f7ff fda9 	bl	8008a88 <_fflush_r>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d1ed      	bne.n	8008f16 <__swbuf_r+0x2a>
 8008f3a:	68a3      	ldr	r3, [r4, #8]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	60a3      	str	r3, [r4, #8]
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	6022      	str	r2, [r4, #0]
 8008f46:	701e      	strb	r6, [r3, #0]
 8008f48:	6962      	ldr	r2, [r4, #20]
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d004      	beq.n	8008f5a <__swbuf_r+0x6e>
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	07db      	lsls	r3, r3, #31
 8008f54:	d5e1      	bpl.n	8008f1a <__swbuf_r+0x2e>
 8008f56:	2e0a      	cmp	r6, #10
 8008f58:	d1df      	bne.n	8008f1a <__swbuf_r+0x2e>
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f7ff fd93 	bl	8008a88 <_fflush_r>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d0d9      	beq.n	8008f1a <__swbuf_r+0x2e>
 8008f66:	e7d6      	b.n	8008f16 <__swbuf_r+0x2a>

08008f68 <__swsetup_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4b29      	ldr	r3, [pc, #164]	@ (8009010 <__swsetup_r+0xa8>)
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	6818      	ldr	r0, [r3, #0]
 8008f70:	460c      	mov	r4, r1
 8008f72:	b118      	cbz	r0, 8008f7c <__swsetup_r+0x14>
 8008f74:	6a03      	ldr	r3, [r0, #32]
 8008f76:	b90b      	cbnz	r3, 8008f7c <__swsetup_r+0x14>
 8008f78:	f7fd ffa0 	bl	8006ebc <__sinit>
 8008f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f80:	0719      	lsls	r1, r3, #28
 8008f82:	d422      	bmi.n	8008fca <__swsetup_r+0x62>
 8008f84:	06da      	lsls	r2, r3, #27
 8008f86:	d407      	bmi.n	8008f98 <__swsetup_r+0x30>
 8008f88:	2209      	movs	r2, #9
 8008f8a:	602a      	str	r2, [r5, #0]
 8008f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f90:	f04f 30ff 	mov.w	r0, #4294967295
 8008f94:	81a3      	strh	r3, [r4, #12]
 8008f96:	e033      	b.n	8009000 <__swsetup_r+0x98>
 8008f98:	0758      	lsls	r0, r3, #29
 8008f9a:	d512      	bpl.n	8008fc2 <__swsetup_r+0x5a>
 8008f9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f9e:	b141      	cbz	r1, 8008fb2 <__swsetup_r+0x4a>
 8008fa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fa4:	4299      	cmp	r1, r3
 8008fa6:	d002      	beq.n	8008fae <__swsetup_r+0x46>
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f7fe ff1d 	bl	8007de8 <_free_r>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	6063      	str	r3, [r4, #4]
 8008fbe:	6923      	ldr	r3, [r4, #16]
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	f043 0308 	orr.w	r3, r3, #8
 8008fc8:	81a3      	strh	r3, [r4, #12]
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	b94b      	cbnz	r3, 8008fe2 <__swsetup_r+0x7a>
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fd8:	d003      	beq.n	8008fe2 <__swsetup_r+0x7a>
 8008fda:	4621      	mov	r1, r4
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f000 f882 	bl	80090e6 <__smakebuf_r>
 8008fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fe6:	f013 0201 	ands.w	r2, r3, #1
 8008fea:	d00a      	beq.n	8009002 <__swsetup_r+0x9a>
 8008fec:	2200      	movs	r2, #0
 8008fee:	60a2      	str	r2, [r4, #8]
 8008ff0:	6962      	ldr	r2, [r4, #20]
 8008ff2:	4252      	negs	r2, r2
 8008ff4:	61a2      	str	r2, [r4, #24]
 8008ff6:	6922      	ldr	r2, [r4, #16]
 8008ff8:	b942      	cbnz	r2, 800900c <__swsetup_r+0xa4>
 8008ffa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ffe:	d1c5      	bne.n	8008f8c <__swsetup_r+0x24>
 8009000:	bd38      	pop	{r3, r4, r5, pc}
 8009002:	0799      	lsls	r1, r3, #30
 8009004:	bf58      	it	pl
 8009006:	6962      	ldrpl	r2, [r4, #20]
 8009008:	60a2      	str	r2, [r4, #8]
 800900a:	e7f4      	b.n	8008ff6 <__swsetup_r+0x8e>
 800900c:	2000      	movs	r0, #0
 800900e:	e7f7      	b.n	8009000 <__swsetup_r+0x98>
 8009010:	20000018 	.word	0x20000018

08009014 <_raise_r>:
 8009014:	291f      	cmp	r1, #31
 8009016:	b538      	push	{r3, r4, r5, lr}
 8009018:	4605      	mov	r5, r0
 800901a:	460c      	mov	r4, r1
 800901c:	d904      	bls.n	8009028 <_raise_r+0x14>
 800901e:	2316      	movs	r3, #22
 8009020:	6003      	str	r3, [r0, #0]
 8009022:	f04f 30ff 	mov.w	r0, #4294967295
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800902a:	b112      	cbz	r2, 8009032 <_raise_r+0x1e>
 800902c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009030:	b94b      	cbnz	r3, 8009046 <_raise_r+0x32>
 8009032:	4628      	mov	r0, r5
 8009034:	f000 f830 	bl	8009098 <_getpid_r>
 8009038:	4622      	mov	r2, r4
 800903a:	4601      	mov	r1, r0
 800903c:	4628      	mov	r0, r5
 800903e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009042:	f000 b817 	b.w	8009074 <_kill_r>
 8009046:	2b01      	cmp	r3, #1
 8009048:	d00a      	beq.n	8009060 <_raise_r+0x4c>
 800904a:	1c59      	adds	r1, r3, #1
 800904c:	d103      	bne.n	8009056 <_raise_r+0x42>
 800904e:	2316      	movs	r3, #22
 8009050:	6003      	str	r3, [r0, #0]
 8009052:	2001      	movs	r0, #1
 8009054:	e7e7      	b.n	8009026 <_raise_r+0x12>
 8009056:	2100      	movs	r1, #0
 8009058:	4620      	mov	r0, r4
 800905a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800905e:	4798      	blx	r3
 8009060:	2000      	movs	r0, #0
 8009062:	e7e0      	b.n	8009026 <_raise_r+0x12>

08009064 <raise>:
 8009064:	4b02      	ldr	r3, [pc, #8]	@ (8009070 <raise+0xc>)
 8009066:	4601      	mov	r1, r0
 8009068:	6818      	ldr	r0, [r3, #0]
 800906a:	f7ff bfd3 	b.w	8009014 <_raise_r>
 800906e:	bf00      	nop
 8009070:	20000018 	.word	0x20000018

08009074 <_kill_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	2300      	movs	r3, #0
 8009078:	4d06      	ldr	r5, [pc, #24]	@ (8009094 <_kill_r+0x20>)
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	4611      	mov	r1, r2
 8009080:	602b      	str	r3, [r5, #0]
 8009082:	f7fa f814 	bl	80030ae <_kill>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	d102      	bne.n	8009090 <_kill_r+0x1c>
 800908a:	682b      	ldr	r3, [r5, #0]
 800908c:	b103      	cbz	r3, 8009090 <_kill_r+0x1c>
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	bd38      	pop	{r3, r4, r5, pc}
 8009092:	bf00      	nop
 8009094:	200005d8 	.word	0x200005d8

08009098 <_getpid_r>:
 8009098:	f7fa b802 	b.w	80030a0 <_getpid>

0800909c <__swhatbuf_r>:
 800909c:	b570      	push	{r4, r5, r6, lr}
 800909e:	460c      	mov	r4, r1
 80090a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a4:	4615      	mov	r5, r2
 80090a6:	2900      	cmp	r1, #0
 80090a8:	461e      	mov	r6, r3
 80090aa:	b096      	sub	sp, #88	@ 0x58
 80090ac:	da0c      	bge.n	80090c8 <__swhatbuf_r+0x2c>
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	2100      	movs	r1, #0
 80090b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090b6:	bf14      	ite	ne
 80090b8:	2340      	movne	r3, #64	@ 0x40
 80090ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090be:	2000      	movs	r0, #0
 80090c0:	6031      	str	r1, [r6, #0]
 80090c2:	602b      	str	r3, [r5, #0]
 80090c4:	b016      	add	sp, #88	@ 0x58
 80090c6:	bd70      	pop	{r4, r5, r6, pc}
 80090c8:	466a      	mov	r2, sp
 80090ca:	f000 f849 	bl	8009160 <_fstat_r>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	dbed      	blt.n	80090ae <__swhatbuf_r+0x12>
 80090d2:	9901      	ldr	r1, [sp, #4]
 80090d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090dc:	4259      	negs	r1, r3
 80090de:	4159      	adcs	r1, r3
 80090e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090e4:	e7eb      	b.n	80090be <__swhatbuf_r+0x22>

080090e6 <__smakebuf_r>:
 80090e6:	898b      	ldrh	r3, [r1, #12]
 80090e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ea:	079d      	lsls	r5, r3, #30
 80090ec:	4606      	mov	r6, r0
 80090ee:	460c      	mov	r4, r1
 80090f0:	d507      	bpl.n	8009102 <__smakebuf_r+0x1c>
 80090f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090f6:	6023      	str	r3, [r4, #0]
 80090f8:	6123      	str	r3, [r4, #16]
 80090fa:	2301      	movs	r3, #1
 80090fc:	6163      	str	r3, [r4, #20]
 80090fe:	b003      	add	sp, #12
 8009100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009102:	466a      	mov	r2, sp
 8009104:	ab01      	add	r3, sp, #4
 8009106:	f7ff ffc9 	bl	800909c <__swhatbuf_r>
 800910a:	9f00      	ldr	r7, [sp, #0]
 800910c:	4605      	mov	r5, r0
 800910e:	4639      	mov	r1, r7
 8009110:	4630      	mov	r0, r6
 8009112:	f7fe fedb 	bl	8007ecc <_malloc_r>
 8009116:	b948      	cbnz	r0, 800912c <__smakebuf_r+0x46>
 8009118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800911c:	059a      	lsls	r2, r3, #22
 800911e:	d4ee      	bmi.n	80090fe <__smakebuf_r+0x18>
 8009120:	f023 0303 	bic.w	r3, r3, #3
 8009124:	f043 0302 	orr.w	r3, r3, #2
 8009128:	81a3      	strh	r3, [r4, #12]
 800912a:	e7e2      	b.n	80090f2 <__smakebuf_r+0xc>
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009136:	81a3      	strh	r3, [r4, #12]
 8009138:	9b01      	ldr	r3, [sp, #4]
 800913a:	6020      	str	r0, [r4, #0]
 800913c:	b15b      	cbz	r3, 8009156 <__smakebuf_r+0x70>
 800913e:	4630      	mov	r0, r6
 8009140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009144:	f000 f81e 	bl	8009184 <_isatty_r>
 8009148:	b128      	cbz	r0, 8009156 <__smakebuf_r+0x70>
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	f023 0303 	bic.w	r3, r3, #3
 8009150:	f043 0301 	orr.w	r3, r3, #1
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	89a3      	ldrh	r3, [r4, #12]
 8009158:	431d      	orrs	r5, r3
 800915a:	81a5      	strh	r5, [r4, #12]
 800915c:	e7cf      	b.n	80090fe <__smakebuf_r+0x18>
	...

08009160 <_fstat_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	2300      	movs	r3, #0
 8009164:	4d06      	ldr	r5, [pc, #24]	@ (8009180 <_fstat_r+0x20>)
 8009166:	4604      	mov	r4, r0
 8009168:	4608      	mov	r0, r1
 800916a:	4611      	mov	r1, r2
 800916c:	602b      	str	r3, [r5, #0]
 800916e:	f7f9 fffd 	bl	800316c <_fstat>
 8009172:	1c43      	adds	r3, r0, #1
 8009174:	d102      	bne.n	800917c <_fstat_r+0x1c>
 8009176:	682b      	ldr	r3, [r5, #0]
 8009178:	b103      	cbz	r3, 800917c <_fstat_r+0x1c>
 800917a:	6023      	str	r3, [r4, #0]
 800917c:	bd38      	pop	{r3, r4, r5, pc}
 800917e:	bf00      	nop
 8009180:	200005d8 	.word	0x200005d8

08009184 <_isatty_r>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	2300      	movs	r3, #0
 8009188:	4d05      	ldr	r5, [pc, #20]	@ (80091a0 <_isatty_r+0x1c>)
 800918a:	4604      	mov	r4, r0
 800918c:	4608      	mov	r0, r1
 800918e:	602b      	str	r3, [r5, #0]
 8009190:	f7f9 fffb 	bl	800318a <_isatty>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_isatty_r+0x1a>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	b103      	cbz	r3, 800919e <_isatty_r+0x1a>
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	200005d8 	.word	0x200005d8

080091a4 <atan2>:
 80091a4:	f000 b964 	b.w	8009470 <__ieee754_atan2>

080091a8 <pow>:
 80091a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091ac:	4614      	mov	r4, r2
 80091ae:	461d      	mov	r5, r3
 80091b0:	4680      	mov	r8, r0
 80091b2:	4689      	mov	r9, r1
 80091b4:	f000 fa30 	bl	8009618 <__ieee754_pow>
 80091b8:	4622      	mov	r2, r4
 80091ba:	4606      	mov	r6, r0
 80091bc:	460f      	mov	r7, r1
 80091be:	462b      	mov	r3, r5
 80091c0:	4620      	mov	r0, r4
 80091c2:	4629      	mov	r1, r5
 80091c4:	f7f7 fc22 	bl	8000a0c <__aeabi_dcmpun>
 80091c8:	bbc8      	cbnz	r0, 800923e <pow+0x96>
 80091ca:	2200      	movs	r2, #0
 80091cc:	2300      	movs	r3, #0
 80091ce:	4640      	mov	r0, r8
 80091d0:	4649      	mov	r1, r9
 80091d2:	f7f7 fbe9 	bl	80009a8 <__aeabi_dcmpeq>
 80091d6:	b1b8      	cbz	r0, 8009208 <pow+0x60>
 80091d8:	2200      	movs	r2, #0
 80091da:	2300      	movs	r3, #0
 80091dc:	4620      	mov	r0, r4
 80091de:	4629      	mov	r1, r5
 80091e0:	f7f7 fbe2 	bl	80009a8 <__aeabi_dcmpeq>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d141      	bne.n	800926c <pow+0xc4>
 80091e8:	4620      	mov	r0, r4
 80091ea:	4629      	mov	r1, r5
 80091ec:	f000 f868 	bl	80092c0 <finite>
 80091f0:	b328      	cbz	r0, 800923e <pow+0x96>
 80091f2:	2200      	movs	r2, #0
 80091f4:	2300      	movs	r3, #0
 80091f6:	4620      	mov	r0, r4
 80091f8:	4629      	mov	r1, r5
 80091fa:	f7f7 fbdf 	bl	80009bc <__aeabi_dcmplt>
 80091fe:	b1f0      	cbz	r0, 800923e <pow+0x96>
 8009200:	f7fd ff4a 	bl	8007098 <__errno>
 8009204:	2322      	movs	r3, #34	@ 0x22
 8009206:	e019      	b.n	800923c <pow+0x94>
 8009208:	4630      	mov	r0, r6
 800920a:	4639      	mov	r1, r7
 800920c:	f000 f858 	bl	80092c0 <finite>
 8009210:	b9c8      	cbnz	r0, 8009246 <pow+0x9e>
 8009212:	4640      	mov	r0, r8
 8009214:	4649      	mov	r1, r9
 8009216:	f000 f853 	bl	80092c0 <finite>
 800921a:	b1a0      	cbz	r0, 8009246 <pow+0x9e>
 800921c:	4620      	mov	r0, r4
 800921e:	4629      	mov	r1, r5
 8009220:	f000 f84e 	bl	80092c0 <finite>
 8009224:	b178      	cbz	r0, 8009246 <pow+0x9e>
 8009226:	4632      	mov	r2, r6
 8009228:	463b      	mov	r3, r7
 800922a:	4630      	mov	r0, r6
 800922c:	4639      	mov	r1, r7
 800922e:	f7f7 fbed 	bl	8000a0c <__aeabi_dcmpun>
 8009232:	2800      	cmp	r0, #0
 8009234:	d0e4      	beq.n	8009200 <pow+0x58>
 8009236:	f7fd ff2f 	bl	8007098 <__errno>
 800923a:	2321      	movs	r3, #33	@ 0x21
 800923c:	6003      	str	r3, [r0, #0]
 800923e:	4630      	mov	r0, r6
 8009240:	4639      	mov	r1, r7
 8009242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009246:	2200      	movs	r2, #0
 8009248:	2300      	movs	r3, #0
 800924a:	4630      	mov	r0, r6
 800924c:	4639      	mov	r1, r7
 800924e:	f7f7 fbab 	bl	80009a8 <__aeabi_dcmpeq>
 8009252:	2800      	cmp	r0, #0
 8009254:	d0f3      	beq.n	800923e <pow+0x96>
 8009256:	4640      	mov	r0, r8
 8009258:	4649      	mov	r1, r9
 800925a:	f000 f831 	bl	80092c0 <finite>
 800925e:	2800      	cmp	r0, #0
 8009260:	d0ed      	beq.n	800923e <pow+0x96>
 8009262:	4620      	mov	r0, r4
 8009264:	4629      	mov	r1, r5
 8009266:	f000 f82b 	bl	80092c0 <finite>
 800926a:	e7c8      	b.n	80091fe <pow+0x56>
 800926c:	2600      	movs	r6, #0
 800926e:	4f01      	ldr	r7, [pc, #4]	@ (8009274 <pow+0xcc>)
 8009270:	e7e5      	b.n	800923e <pow+0x96>
 8009272:	bf00      	nop
 8009274:	3ff00000 	.word	0x3ff00000

08009278 <sqrt>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	4606      	mov	r6, r0
 800927c:	460f      	mov	r7, r1
 800927e:	f000 f825 	bl	80092cc <__ieee754_sqrt>
 8009282:	4632      	mov	r2, r6
 8009284:	4604      	mov	r4, r0
 8009286:	460d      	mov	r5, r1
 8009288:	463b      	mov	r3, r7
 800928a:	4630      	mov	r0, r6
 800928c:	4639      	mov	r1, r7
 800928e:	f7f7 fbbd 	bl	8000a0c <__aeabi_dcmpun>
 8009292:	b990      	cbnz	r0, 80092ba <sqrt+0x42>
 8009294:	2200      	movs	r2, #0
 8009296:	2300      	movs	r3, #0
 8009298:	4630      	mov	r0, r6
 800929a:	4639      	mov	r1, r7
 800929c:	f7f7 fb8e 	bl	80009bc <__aeabi_dcmplt>
 80092a0:	b158      	cbz	r0, 80092ba <sqrt+0x42>
 80092a2:	f7fd fef9 	bl	8007098 <__errno>
 80092a6:	2321      	movs	r3, #33	@ 0x21
 80092a8:	2200      	movs	r2, #0
 80092aa:	6003      	str	r3, [r0, #0]
 80092ac:	2300      	movs	r3, #0
 80092ae:	4610      	mov	r0, r2
 80092b0:	4619      	mov	r1, r3
 80092b2:	f7f7 fa3b 	bl	800072c <__aeabi_ddiv>
 80092b6:	4604      	mov	r4, r0
 80092b8:	460d      	mov	r5, r1
 80092ba:	4620      	mov	r0, r4
 80092bc:	4629      	mov	r1, r5
 80092be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092c0 <finite>:
 80092c0:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80092c4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80092c8:	0fc0      	lsrs	r0, r0, #31
 80092ca:	4770      	bx	lr

080092cc <__ieee754_sqrt>:
 80092cc:	4a65      	ldr	r2, [pc, #404]	@ (8009464 <__ieee754_sqrt+0x198>)
 80092ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d2:	438a      	bics	r2, r1
 80092d4:	4606      	mov	r6, r0
 80092d6:	460f      	mov	r7, r1
 80092d8:	460b      	mov	r3, r1
 80092da:	4604      	mov	r4, r0
 80092dc:	d10e      	bne.n	80092fc <__ieee754_sqrt+0x30>
 80092de:	4602      	mov	r2, r0
 80092e0:	f7f7 f8fa 	bl	80004d8 <__aeabi_dmul>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4630      	mov	r0, r6
 80092ea:	4639      	mov	r1, r7
 80092ec:	f7f6 ff3e 	bl	800016c <__adddf3>
 80092f0:	4606      	mov	r6, r0
 80092f2:	460f      	mov	r7, r1
 80092f4:	4630      	mov	r0, r6
 80092f6:	4639      	mov	r1, r7
 80092f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fc:	2900      	cmp	r1, #0
 80092fe:	dc0c      	bgt.n	800931a <__ieee754_sqrt+0x4e>
 8009300:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009304:	4302      	orrs	r2, r0
 8009306:	d0f5      	beq.n	80092f4 <__ieee754_sqrt+0x28>
 8009308:	b189      	cbz	r1, 800932e <__ieee754_sqrt+0x62>
 800930a:	4602      	mov	r2, r0
 800930c:	f7f6 ff2c 	bl	8000168 <__aeabi_dsub>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	f7f7 fa0a 	bl	800072c <__aeabi_ddiv>
 8009318:	e7ea      	b.n	80092f0 <__ieee754_sqrt+0x24>
 800931a:	150a      	asrs	r2, r1, #20
 800931c:	d115      	bne.n	800934a <__ieee754_sqrt+0x7e>
 800931e:	2100      	movs	r1, #0
 8009320:	e009      	b.n	8009336 <__ieee754_sqrt+0x6a>
 8009322:	0ae3      	lsrs	r3, r4, #11
 8009324:	3a15      	subs	r2, #21
 8009326:	0564      	lsls	r4, r4, #21
 8009328:	2b00      	cmp	r3, #0
 800932a:	d0fa      	beq.n	8009322 <__ieee754_sqrt+0x56>
 800932c:	e7f7      	b.n	800931e <__ieee754_sqrt+0x52>
 800932e:	460a      	mov	r2, r1
 8009330:	e7fa      	b.n	8009328 <__ieee754_sqrt+0x5c>
 8009332:	005b      	lsls	r3, r3, #1
 8009334:	3101      	adds	r1, #1
 8009336:	02d8      	lsls	r0, r3, #11
 8009338:	d5fb      	bpl.n	8009332 <__ieee754_sqrt+0x66>
 800933a:	1e48      	subs	r0, r1, #1
 800933c:	1a12      	subs	r2, r2, r0
 800933e:	f1c1 0020 	rsb	r0, r1, #32
 8009342:	fa24 f000 	lsr.w	r0, r4, r0
 8009346:	4303      	orrs	r3, r0
 8009348:	408c      	lsls	r4, r1
 800934a:	2700      	movs	r7, #0
 800934c:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8009350:	2116      	movs	r1, #22
 8009352:	07d2      	lsls	r2, r2, #31
 8009354:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009358:	463a      	mov	r2, r7
 800935a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800935e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009362:	bf5c      	itt	pl
 8009364:	005b      	lslpl	r3, r3, #1
 8009366:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800936a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800936e:	bf58      	it	pl
 8009370:	0064      	lslpl	r4, r4, #1
 8009372:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009376:	ea4f 0868 	mov.w	r8, r8, asr #1
 800937a:	0064      	lsls	r4, r4, #1
 800937c:	1815      	adds	r5, r2, r0
 800937e:	429d      	cmp	r5, r3
 8009380:	bfde      	ittt	le
 8009382:	182a      	addle	r2, r5, r0
 8009384:	1b5b      	suble	r3, r3, r5
 8009386:	183f      	addle	r7, r7, r0
 8009388:	0fe5      	lsrs	r5, r4, #31
 800938a:	3901      	subs	r1, #1
 800938c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009390:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009394:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009398:	d1f0      	bne.n	800937c <__ieee754_sqrt+0xb0>
 800939a:	460d      	mov	r5, r1
 800939c:	2620      	movs	r6, #32
 800939e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80093a2:	4293      	cmp	r3, r2
 80093a4:	eb00 0c01 	add.w	ip, r0, r1
 80093a8:	dc02      	bgt.n	80093b0 <__ieee754_sqrt+0xe4>
 80093aa:	d113      	bne.n	80093d4 <__ieee754_sqrt+0x108>
 80093ac:	45a4      	cmp	ip, r4
 80093ae:	d811      	bhi.n	80093d4 <__ieee754_sqrt+0x108>
 80093b0:	f1bc 0f00 	cmp.w	ip, #0
 80093b4:	eb0c 0100 	add.w	r1, ip, r0
 80093b8:	da3e      	bge.n	8009438 <__ieee754_sqrt+0x16c>
 80093ba:	2900      	cmp	r1, #0
 80093bc:	db3c      	blt.n	8009438 <__ieee754_sqrt+0x16c>
 80093be:	f102 0e01 	add.w	lr, r2, #1
 80093c2:	1a9b      	subs	r3, r3, r2
 80093c4:	4672      	mov	r2, lr
 80093c6:	45a4      	cmp	ip, r4
 80093c8:	bf88      	it	hi
 80093ca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80093ce:	eba4 040c 	sub.w	r4, r4, ip
 80093d2:	4405      	add	r5, r0
 80093d4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80093d8:	3e01      	subs	r6, #1
 80093da:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80093de:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80093e2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80093e6:	d1dc      	bne.n	80093a2 <__ieee754_sqrt+0xd6>
 80093e8:	431c      	orrs	r4, r3
 80093ea:	d01a      	beq.n	8009422 <__ieee754_sqrt+0x156>
 80093ec:	4c1e      	ldr	r4, [pc, #120]	@ (8009468 <__ieee754_sqrt+0x19c>)
 80093ee:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800946c <__ieee754_sqrt+0x1a0>
 80093f2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80093f6:	e9d9 2300 	ldrd	r2, r3, [r9]
 80093fa:	f7f6 feb5 	bl	8000168 <__aeabi_dsub>
 80093fe:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4650      	mov	r0, sl
 8009408:	4659      	mov	r1, fp
 800940a:	f7f7 fae1 	bl	80009d0 <__aeabi_dcmple>
 800940e:	b140      	cbz	r0, 8009422 <__ieee754_sqrt+0x156>
 8009410:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009414:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009418:	f1b5 3fff 	cmp.w	r5, #4294967295
 800941c:	d10e      	bne.n	800943c <__ieee754_sqrt+0x170>
 800941e:	4635      	mov	r5, r6
 8009420:	3701      	adds	r7, #1
 8009422:	107b      	asrs	r3, r7, #1
 8009424:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8009428:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800942c:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8009430:	086b      	lsrs	r3, r5, #1
 8009432:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8009436:	e75b      	b.n	80092f0 <__ieee754_sqrt+0x24>
 8009438:	4696      	mov	lr, r2
 800943a:	e7c2      	b.n	80093c2 <__ieee754_sqrt+0xf6>
 800943c:	f7f6 fe96 	bl	800016c <__adddf3>
 8009440:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4650      	mov	r0, sl
 800944a:	4659      	mov	r1, fp
 800944c:	f7f7 fab6 	bl	80009bc <__aeabi_dcmplt>
 8009450:	b120      	cbz	r0, 800945c <__ieee754_sqrt+0x190>
 8009452:	1cab      	adds	r3, r5, #2
 8009454:	bf08      	it	eq
 8009456:	3701      	addeq	r7, #1
 8009458:	3502      	adds	r5, #2
 800945a:	e7e2      	b.n	8009422 <__ieee754_sqrt+0x156>
 800945c:	1c6b      	adds	r3, r5, #1
 800945e:	f023 0501 	bic.w	r5, r3, #1
 8009462:	e7de      	b.n	8009422 <__ieee754_sqrt+0x156>
 8009464:	7ff00000 	.word	0x7ff00000
 8009468:	0800a8c0 	.word	0x0800a8c0
 800946c:	0800a8b8 	.word	0x0800a8b8

08009470 <__ieee754_atan2>:
 8009470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	4617      	mov	r7, r2
 8009476:	4690      	mov	r8, r2
 8009478:	4699      	mov	r9, r3
 800947a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800947e:	427b      	negs	r3, r7
 8009480:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8009608 <__ieee754_atan2+0x198>
 8009484:	433b      	orrs	r3, r7
 8009486:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800948a:	4553      	cmp	r3, sl
 800948c:	4604      	mov	r4, r0
 800948e:	460d      	mov	r5, r1
 8009490:	d809      	bhi.n	80094a6 <__ieee754_atan2+0x36>
 8009492:	4246      	negs	r6, r0
 8009494:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009498:	4306      	orrs	r6, r0
 800949a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800949e:	4556      	cmp	r6, sl
 80094a0:	468e      	mov	lr, r1
 80094a2:	4683      	mov	fp, r0
 80094a4:	d908      	bls.n	80094b8 <__ieee754_atan2+0x48>
 80094a6:	4642      	mov	r2, r8
 80094a8:	464b      	mov	r3, r9
 80094aa:	4620      	mov	r0, r4
 80094ac:	4629      	mov	r1, r5
 80094ae:	f7f6 fe5d 	bl	800016c <__adddf3>
 80094b2:	4604      	mov	r4, r0
 80094b4:	460d      	mov	r5, r1
 80094b6:	e016      	b.n	80094e6 <__ieee754_atan2+0x76>
 80094b8:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 80094bc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80094c0:	433e      	orrs	r6, r7
 80094c2:	d103      	bne.n	80094cc <__ieee754_atan2+0x5c>
 80094c4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c8:	f000 bdd2 	b.w	800a070 <atan>
 80094cc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 80094d0:	f006 0602 	and.w	r6, r6, #2
 80094d4:	ea53 0b0b 	orrs.w	fp, r3, fp
 80094d8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80094dc:	d107      	bne.n	80094ee <__ieee754_atan2+0x7e>
 80094de:	2e02      	cmp	r6, #2
 80094e0:	d064      	beq.n	80095ac <__ieee754_atan2+0x13c>
 80094e2:	2e03      	cmp	r6, #3
 80094e4:	d066      	beq.n	80095b4 <__ieee754_atan2+0x144>
 80094e6:	4620      	mov	r0, r4
 80094e8:	4629      	mov	r1, r5
 80094ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ee:	4317      	orrs	r7, r2
 80094f0:	d106      	bne.n	8009500 <__ieee754_atan2+0x90>
 80094f2:	f1be 0f00 	cmp.w	lr, #0
 80094f6:	db68      	blt.n	80095ca <__ieee754_atan2+0x15a>
 80094f8:	a537      	add	r5, pc, #220	@ (adr r5, 80095d8 <__ieee754_atan2+0x168>)
 80094fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094fe:	e7f2      	b.n	80094e6 <__ieee754_atan2+0x76>
 8009500:	4552      	cmp	r2, sl
 8009502:	d10f      	bne.n	8009524 <__ieee754_atan2+0xb4>
 8009504:	4293      	cmp	r3, r2
 8009506:	f106 36ff 	add.w	r6, r6, #4294967295
 800950a:	d107      	bne.n	800951c <__ieee754_atan2+0xac>
 800950c:	2e02      	cmp	r6, #2
 800950e:	d855      	bhi.n	80095bc <__ieee754_atan2+0x14c>
 8009510:	4b3e      	ldr	r3, [pc, #248]	@ (800960c <__ieee754_atan2+0x19c>)
 8009512:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009516:	e9d3 4500 	ldrd	r4, r5, [r3]
 800951a:	e7e4      	b.n	80094e6 <__ieee754_atan2+0x76>
 800951c:	2e02      	cmp	r6, #2
 800951e:	d851      	bhi.n	80095c4 <__ieee754_atan2+0x154>
 8009520:	4b3b      	ldr	r3, [pc, #236]	@ (8009610 <__ieee754_atan2+0x1a0>)
 8009522:	e7f6      	b.n	8009512 <__ieee754_atan2+0xa2>
 8009524:	4553      	cmp	r3, sl
 8009526:	d0e4      	beq.n	80094f2 <__ieee754_atan2+0x82>
 8009528:	1a9b      	subs	r3, r3, r2
 800952a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800952e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009532:	da21      	bge.n	8009578 <__ieee754_atan2+0x108>
 8009534:	f1b9 0f00 	cmp.w	r9, #0
 8009538:	da01      	bge.n	800953e <__ieee754_atan2+0xce>
 800953a:	323c      	adds	r2, #60	@ 0x3c
 800953c:	db20      	blt.n	8009580 <__ieee754_atan2+0x110>
 800953e:	4642      	mov	r2, r8
 8009540:	464b      	mov	r3, r9
 8009542:	4620      	mov	r0, r4
 8009544:	4629      	mov	r1, r5
 8009546:	f7f7 f8f1 	bl	800072c <__aeabi_ddiv>
 800954a:	f000 ff21 	bl	800a390 <fabs>
 800954e:	f000 fd8f 	bl	800a070 <atan>
 8009552:	4604      	mov	r4, r0
 8009554:	460d      	mov	r5, r1
 8009556:	2e01      	cmp	r6, #1
 8009558:	d015      	beq.n	8009586 <__ieee754_atan2+0x116>
 800955a:	2e02      	cmp	r6, #2
 800955c:	d017      	beq.n	800958e <__ieee754_atan2+0x11e>
 800955e:	2e00      	cmp	r6, #0
 8009560:	d0c1      	beq.n	80094e6 <__ieee754_atan2+0x76>
 8009562:	a31f      	add	r3, pc, #124	@ (adr r3, 80095e0 <__ieee754_atan2+0x170>)
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	4620      	mov	r0, r4
 800956a:	4629      	mov	r1, r5
 800956c:	f7f6 fdfc 	bl	8000168 <__aeabi_dsub>
 8009570:	a31d      	add	r3, pc, #116	@ (adr r3, 80095e8 <__ieee754_atan2+0x178>)
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	e016      	b.n	80095a6 <__ieee754_atan2+0x136>
 8009578:	a517      	add	r5, pc, #92	@ (adr r5, 80095d8 <__ieee754_atan2+0x168>)
 800957a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800957e:	e7ea      	b.n	8009556 <__ieee754_atan2+0xe6>
 8009580:	2400      	movs	r4, #0
 8009582:	2500      	movs	r5, #0
 8009584:	e7e7      	b.n	8009556 <__ieee754_atan2+0xe6>
 8009586:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800958a:	461d      	mov	r5, r3
 800958c:	e7ab      	b.n	80094e6 <__ieee754_atan2+0x76>
 800958e:	a314      	add	r3, pc, #80	@ (adr r3, 80095e0 <__ieee754_atan2+0x170>)
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	4620      	mov	r0, r4
 8009596:	4629      	mov	r1, r5
 8009598:	f7f6 fde6 	bl	8000168 <__aeabi_dsub>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	a111      	add	r1, pc, #68	@ (adr r1, 80095e8 <__ieee754_atan2+0x178>)
 80095a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095a6:	f7f6 fddf 	bl	8000168 <__aeabi_dsub>
 80095aa:	e782      	b.n	80094b2 <__ieee754_atan2+0x42>
 80095ac:	a50e      	add	r5, pc, #56	@ (adr r5, 80095e8 <__ieee754_atan2+0x178>)
 80095ae:	e9d5 4500 	ldrd	r4, r5, [r5]
 80095b2:	e798      	b.n	80094e6 <__ieee754_atan2+0x76>
 80095b4:	a50e      	add	r5, pc, #56	@ (adr r5, 80095f0 <__ieee754_atan2+0x180>)
 80095b6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80095ba:	e794      	b.n	80094e6 <__ieee754_atan2+0x76>
 80095bc:	a50e      	add	r5, pc, #56	@ (adr r5, 80095f8 <__ieee754_atan2+0x188>)
 80095be:	e9d5 4500 	ldrd	r4, r5, [r5]
 80095c2:	e790      	b.n	80094e6 <__ieee754_atan2+0x76>
 80095c4:	2400      	movs	r4, #0
 80095c6:	2500      	movs	r5, #0
 80095c8:	e78d      	b.n	80094e6 <__ieee754_atan2+0x76>
 80095ca:	a50d      	add	r5, pc, #52	@ (adr r5, 8009600 <__ieee754_atan2+0x190>)
 80095cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80095d0:	e789      	b.n	80094e6 <__ieee754_atan2+0x76>
 80095d2:	bf00      	nop
 80095d4:	f3af 8000 	nop.w
 80095d8:	54442d18 	.word	0x54442d18
 80095dc:	3ff921fb 	.word	0x3ff921fb
 80095e0:	33145c07 	.word	0x33145c07
 80095e4:	3ca1a626 	.word	0x3ca1a626
 80095e8:	54442d18 	.word	0x54442d18
 80095ec:	400921fb 	.word	0x400921fb
 80095f0:	54442d18 	.word	0x54442d18
 80095f4:	c00921fb 	.word	0xc00921fb
 80095f8:	54442d18 	.word	0x54442d18
 80095fc:	3fe921fb 	.word	0x3fe921fb
 8009600:	54442d18 	.word	0x54442d18
 8009604:	bff921fb 	.word	0xbff921fb
 8009608:	7ff00000 	.word	0x7ff00000
 800960c:	0800a8e0 	.word	0x0800a8e0
 8009610:	0800a8c8 	.word	0x0800a8c8
 8009614:	00000000 	.word	0x00000000

08009618 <__ieee754_pow>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	b091      	sub	sp, #68	@ 0x44
 800961e:	e9cd 2300 	strd	r2, r3, [sp]
 8009622:	468b      	mov	fp, r1
 8009624:	e9dd 1800 	ldrd	r1, r8, [sp]
 8009628:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800962c:	4682      	mov	sl, r0
 800962e:	ea57 0001 	orrs.w	r0, r7, r1
 8009632:	d112      	bne.n	800965a <__ieee754_pow+0x42>
 8009634:	4653      	mov	r3, sl
 8009636:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800963a:	18db      	adds	r3, r3, r3
 800963c:	4152      	adcs	r2, r2
 800963e:	4298      	cmp	r0, r3
 8009640:	4b93      	ldr	r3, [pc, #588]	@ (8009890 <__ieee754_pow+0x278>)
 8009642:	4193      	sbcs	r3, r2
 8009644:	f080 84cd 	bcs.w	8009fe2 <__ieee754_pow+0x9ca>
 8009648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800964c:	4650      	mov	r0, sl
 800964e:	4659      	mov	r1, fp
 8009650:	f7f6 fd8c 	bl	800016c <__adddf3>
 8009654:	b011      	add	sp, #68	@ 0x44
 8009656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965a:	4b8e      	ldr	r3, [pc, #568]	@ (8009894 <__ieee754_pow+0x27c>)
 800965c:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8009660:	429d      	cmp	r5, r3
 8009662:	465e      	mov	r6, fp
 8009664:	46d1      	mov	r9, sl
 8009666:	d80b      	bhi.n	8009680 <__ieee754_pow+0x68>
 8009668:	d105      	bne.n	8009676 <__ieee754_pow+0x5e>
 800966a:	f1ba 0f00 	cmp.w	sl, #0
 800966e:	d1eb      	bne.n	8009648 <__ieee754_pow+0x30>
 8009670:	42af      	cmp	r7, r5
 8009672:	d8e9      	bhi.n	8009648 <__ieee754_pow+0x30>
 8009674:	e001      	b.n	800967a <__ieee754_pow+0x62>
 8009676:	429f      	cmp	r7, r3
 8009678:	d802      	bhi.n	8009680 <__ieee754_pow+0x68>
 800967a:	429f      	cmp	r7, r3
 800967c:	d10f      	bne.n	800969e <__ieee754_pow+0x86>
 800967e:	b171      	cbz	r1, 800969e <__ieee754_pow+0x86>
 8009680:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8009684:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009688:	ea56 0609 	orrs.w	r6, r6, r9
 800968c:	d1dc      	bne.n	8009648 <__ieee754_pow+0x30>
 800968e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009692:	18db      	adds	r3, r3, r3
 8009694:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009698:	4152      	adcs	r2, r2
 800969a:	429e      	cmp	r6, r3
 800969c:	e7d0      	b.n	8009640 <__ieee754_pow+0x28>
 800969e:	2e00      	cmp	r6, #0
 80096a0:	462b      	mov	r3, r5
 80096a2:	da42      	bge.n	800972a <__ieee754_pow+0x112>
 80096a4:	4a7c      	ldr	r2, [pc, #496]	@ (8009898 <__ieee754_pow+0x280>)
 80096a6:	4297      	cmp	r7, r2
 80096a8:	d856      	bhi.n	8009758 <__ieee754_pow+0x140>
 80096aa:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80096ae:	4297      	cmp	r7, r2
 80096b0:	f240 84a6 	bls.w	800a000 <__ieee754_pow+0x9e8>
 80096b4:	153a      	asrs	r2, r7, #20
 80096b6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80096ba:	2a14      	cmp	r2, #20
 80096bc:	dd18      	ble.n	80096f0 <__ieee754_pow+0xd8>
 80096be:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80096c2:	fa21 f402 	lsr.w	r4, r1, r2
 80096c6:	fa04 f202 	lsl.w	r2, r4, r2
 80096ca:	428a      	cmp	r2, r1
 80096cc:	f040 8498 	bne.w	800a000 <__ieee754_pow+0x9e8>
 80096d0:	f004 0401 	and.w	r4, r4, #1
 80096d4:	f1c4 0402 	rsb	r4, r4, #2
 80096d8:	2900      	cmp	r1, #0
 80096da:	d159      	bne.n	8009790 <__ieee754_pow+0x178>
 80096dc:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80096e0:	d149      	bne.n	8009776 <__ieee754_pow+0x15e>
 80096e2:	4652      	mov	r2, sl
 80096e4:	465b      	mov	r3, fp
 80096e6:	4650      	mov	r0, sl
 80096e8:	4659      	mov	r1, fp
 80096ea:	f7f6 fef5 	bl	80004d8 <__aeabi_dmul>
 80096ee:	e7b1      	b.n	8009654 <__ieee754_pow+0x3c>
 80096f0:	2900      	cmp	r1, #0
 80096f2:	d14c      	bne.n	800978e <__ieee754_pow+0x176>
 80096f4:	f1c2 0214 	rsb	r2, r2, #20
 80096f8:	fa47 f402 	asr.w	r4, r7, r2
 80096fc:	fa04 f202 	lsl.w	r2, r4, r2
 8009700:	42ba      	cmp	r2, r7
 8009702:	f040 847a 	bne.w	8009ffa <__ieee754_pow+0x9e2>
 8009706:	f004 0401 	and.w	r4, r4, #1
 800970a:	f1c4 0402 	rsb	r4, r4, #2
 800970e:	4a63      	ldr	r2, [pc, #396]	@ (800989c <__ieee754_pow+0x284>)
 8009710:	4297      	cmp	r7, r2
 8009712:	d1e3      	bne.n	80096dc <__ieee754_pow+0xc4>
 8009714:	f1b8 0f00 	cmp.w	r8, #0
 8009718:	f280 846b 	bge.w	8009ff2 <__ieee754_pow+0x9da>
 800971c:	4652      	mov	r2, sl
 800971e:	465b      	mov	r3, fp
 8009720:	2000      	movs	r0, #0
 8009722:	495e      	ldr	r1, [pc, #376]	@ (800989c <__ieee754_pow+0x284>)
 8009724:	f7f7 f802 	bl	800072c <__aeabi_ddiv>
 8009728:	e794      	b.n	8009654 <__ieee754_pow+0x3c>
 800972a:	2400      	movs	r4, #0
 800972c:	bb81      	cbnz	r1, 8009790 <__ieee754_pow+0x178>
 800972e:	4a59      	ldr	r2, [pc, #356]	@ (8009894 <__ieee754_pow+0x27c>)
 8009730:	4297      	cmp	r7, r2
 8009732:	d1ec      	bne.n	800970e <__ieee754_pow+0xf6>
 8009734:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8009738:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800973c:	ea53 0309 	orrs.w	r3, r3, r9
 8009740:	f000 844f 	beq.w	8009fe2 <__ieee754_pow+0x9ca>
 8009744:	4b56      	ldr	r3, [pc, #344]	@ (80098a0 <__ieee754_pow+0x288>)
 8009746:	429d      	cmp	r5, r3
 8009748:	d908      	bls.n	800975c <__ieee754_pow+0x144>
 800974a:	f1b8 0f00 	cmp.w	r8, #0
 800974e:	f280 844c 	bge.w	8009fea <__ieee754_pow+0x9d2>
 8009752:	2000      	movs	r0, #0
 8009754:	2100      	movs	r1, #0
 8009756:	e77d      	b.n	8009654 <__ieee754_pow+0x3c>
 8009758:	2402      	movs	r4, #2
 800975a:	e7e7      	b.n	800972c <__ieee754_pow+0x114>
 800975c:	f1b8 0f00 	cmp.w	r8, #0
 8009760:	f04f 0000 	mov.w	r0, #0
 8009764:	f04f 0100 	mov.w	r1, #0
 8009768:	f6bf af74 	bge.w	8009654 <__ieee754_pow+0x3c>
 800976c:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009770:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009774:	e76e      	b.n	8009654 <__ieee754_pow+0x3c>
 8009776:	4a4b      	ldr	r2, [pc, #300]	@ (80098a4 <__ieee754_pow+0x28c>)
 8009778:	4590      	cmp	r8, r2
 800977a:	d109      	bne.n	8009790 <__ieee754_pow+0x178>
 800977c:	2e00      	cmp	r6, #0
 800977e:	db07      	blt.n	8009790 <__ieee754_pow+0x178>
 8009780:	4650      	mov	r0, sl
 8009782:	4659      	mov	r1, fp
 8009784:	b011      	add	sp, #68	@ 0x44
 8009786:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978a:	f7ff bd9f 	b.w	80092cc <__ieee754_sqrt>
 800978e:	2400      	movs	r4, #0
 8009790:	4650      	mov	r0, sl
 8009792:	4659      	mov	r1, fp
 8009794:	9302      	str	r3, [sp, #8]
 8009796:	f000 fdfb 	bl	800a390 <fabs>
 800979a:	9b02      	ldr	r3, [sp, #8]
 800979c:	f1b9 0f00 	cmp.w	r9, #0
 80097a0:	d127      	bne.n	80097f2 <__ieee754_pow+0x1da>
 80097a2:	4a3e      	ldr	r2, [pc, #248]	@ (800989c <__ieee754_pow+0x284>)
 80097a4:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 80097a8:	4594      	cmp	ip, r2
 80097aa:	d000      	beq.n	80097ae <__ieee754_pow+0x196>
 80097ac:	bb0d      	cbnz	r5, 80097f2 <__ieee754_pow+0x1da>
 80097ae:	f1b8 0f00 	cmp.w	r8, #0
 80097b2:	da05      	bge.n	80097c0 <__ieee754_pow+0x1a8>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	2000      	movs	r0, #0
 80097ba:	4938      	ldr	r1, [pc, #224]	@ (800989c <__ieee754_pow+0x284>)
 80097bc:	f7f6 ffb6 	bl	800072c <__aeabi_ddiv>
 80097c0:	2e00      	cmp	r6, #0
 80097c2:	f6bf af47 	bge.w	8009654 <__ieee754_pow+0x3c>
 80097c6:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80097ca:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80097ce:	4325      	orrs	r5, r4
 80097d0:	d108      	bne.n	80097e4 <__ieee754_pow+0x1cc>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4610      	mov	r0, r2
 80097d8:	4619      	mov	r1, r3
 80097da:	f7f6 fcc5 	bl	8000168 <__aeabi_dsub>
 80097de:	4602      	mov	r2, r0
 80097e0:	460b      	mov	r3, r1
 80097e2:	e79f      	b.n	8009724 <__ieee754_pow+0x10c>
 80097e4:	2c01      	cmp	r4, #1
 80097e6:	f47f af35 	bne.w	8009654 <__ieee754_pow+0x3c>
 80097ea:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80097ee:	4619      	mov	r1, r3
 80097f0:	e730      	b.n	8009654 <__ieee754_pow+0x3c>
 80097f2:	0ff2      	lsrs	r2, r6, #31
 80097f4:	3a01      	subs	r2, #1
 80097f6:	ea52 0c04 	orrs.w	ip, r2, r4
 80097fa:	d102      	bne.n	8009802 <__ieee754_pow+0x1ea>
 80097fc:	4652      	mov	r2, sl
 80097fe:	465b      	mov	r3, fp
 8009800:	e7e9      	b.n	80097d6 <__ieee754_pow+0x1be>
 8009802:	f04f 0900 	mov.w	r9, #0
 8009806:	3c01      	subs	r4, #1
 8009808:	4314      	orrs	r4, r2
 800980a:	bf14      	ite	ne
 800980c:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800989c <__ieee754_pow+0x284>
 8009810:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80098a8 <__ieee754_pow+0x290>
 8009814:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8009818:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800981c:	f240 8104 	bls.w	8009a28 <__ieee754_pow+0x410>
 8009820:	4b22      	ldr	r3, [pc, #136]	@ (80098ac <__ieee754_pow+0x294>)
 8009822:	429f      	cmp	r7, r3
 8009824:	4b1e      	ldr	r3, [pc, #120]	@ (80098a0 <__ieee754_pow+0x288>)
 8009826:	d913      	bls.n	8009850 <__ieee754_pow+0x238>
 8009828:	429d      	cmp	r5, r3
 800982a:	d808      	bhi.n	800983e <__ieee754_pow+0x226>
 800982c:	f1b8 0f00 	cmp.w	r8, #0
 8009830:	da08      	bge.n	8009844 <__ieee754_pow+0x22c>
 8009832:	2000      	movs	r0, #0
 8009834:	b011      	add	sp, #68	@ 0x44
 8009836:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983a:	f000 be41 	b.w	800a4c0 <__math_oflow>
 800983e:	f1b8 0f00 	cmp.w	r8, #0
 8009842:	dcf6      	bgt.n	8009832 <__ieee754_pow+0x21a>
 8009844:	2000      	movs	r0, #0
 8009846:	b011      	add	sp, #68	@ 0x44
 8009848:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	f000 be33 	b.w	800a4b6 <__math_uflow>
 8009850:	429d      	cmp	r5, r3
 8009852:	d20c      	bcs.n	800986e <__ieee754_pow+0x256>
 8009854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009858:	2200      	movs	r2, #0
 800985a:	2300      	movs	r3, #0
 800985c:	f7f7 f8ae 	bl	80009bc <__aeabi_dcmplt>
 8009860:	3800      	subs	r0, #0
 8009862:	bf18      	it	ne
 8009864:	2001      	movne	r0, #1
 8009866:	f1b8 0f00 	cmp.w	r8, #0
 800986a:	daec      	bge.n	8009846 <__ieee754_pow+0x22e>
 800986c:	e7e2      	b.n	8009834 <__ieee754_pow+0x21c>
 800986e:	4b0b      	ldr	r3, [pc, #44]	@ (800989c <__ieee754_pow+0x284>)
 8009870:	2200      	movs	r2, #0
 8009872:	429d      	cmp	r5, r3
 8009874:	d91c      	bls.n	80098b0 <__ieee754_pow+0x298>
 8009876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800987a:	2300      	movs	r3, #0
 800987c:	f7f7 f89e 	bl	80009bc <__aeabi_dcmplt>
 8009880:	3800      	subs	r0, #0
 8009882:	bf18      	it	ne
 8009884:	2001      	movne	r0, #1
 8009886:	f1b8 0f00 	cmp.w	r8, #0
 800988a:	dcd3      	bgt.n	8009834 <__ieee754_pow+0x21c>
 800988c:	e7db      	b.n	8009846 <__ieee754_pow+0x22e>
 800988e:	bf00      	nop
 8009890:	fff00000 	.word	0xfff00000
 8009894:	7ff00000 	.word	0x7ff00000
 8009898:	433fffff 	.word	0x433fffff
 800989c:	3ff00000 	.word	0x3ff00000
 80098a0:	3fefffff 	.word	0x3fefffff
 80098a4:	3fe00000 	.word	0x3fe00000
 80098a8:	bff00000 	.word	0xbff00000
 80098ac:	43f00000 	.word	0x43f00000
 80098b0:	4b59      	ldr	r3, [pc, #356]	@ (8009a18 <__ieee754_pow+0x400>)
 80098b2:	f7f6 fc59 	bl	8000168 <__aeabi_dsub>
 80098b6:	a350      	add	r3, pc, #320	@ (adr r3, 80099f8 <__ieee754_pow+0x3e0>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	4604      	mov	r4, r0
 80098be:	460d      	mov	r5, r1
 80098c0:	f7f6 fe0a 	bl	80004d8 <__aeabi_dmul>
 80098c4:	a34e      	add	r3, pc, #312	@ (adr r3, 8009a00 <__ieee754_pow+0x3e8>)
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	4606      	mov	r6, r0
 80098cc:	460f      	mov	r7, r1
 80098ce:	4620      	mov	r0, r4
 80098d0:	4629      	mov	r1, r5
 80098d2:	f7f6 fe01 	bl	80004d8 <__aeabi_dmul>
 80098d6:	2200      	movs	r2, #0
 80098d8:	4682      	mov	sl, r0
 80098da:	468b      	mov	fp, r1
 80098dc:	4620      	mov	r0, r4
 80098de:	4629      	mov	r1, r5
 80098e0:	4b4e      	ldr	r3, [pc, #312]	@ (8009a1c <__ieee754_pow+0x404>)
 80098e2:	f7f6 fdf9 	bl	80004d8 <__aeabi_dmul>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	a147      	add	r1, pc, #284	@ (adr r1, 8009a08 <__ieee754_pow+0x3f0>)
 80098ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098f0:	f7f6 fc3a 	bl	8000168 <__aeabi_dsub>
 80098f4:	4622      	mov	r2, r4
 80098f6:	462b      	mov	r3, r5
 80098f8:	f7f6 fdee 	bl	80004d8 <__aeabi_dmul>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	2000      	movs	r0, #0
 8009902:	4947      	ldr	r1, [pc, #284]	@ (8009a20 <__ieee754_pow+0x408>)
 8009904:	f7f6 fc30 	bl	8000168 <__aeabi_dsub>
 8009908:	4622      	mov	r2, r4
 800990a:	4680      	mov	r8, r0
 800990c:	4689      	mov	r9, r1
 800990e:	462b      	mov	r3, r5
 8009910:	4620      	mov	r0, r4
 8009912:	4629      	mov	r1, r5
 8009914:	f7f6 fde0 	bl	80004d8 <__aeabi_dmul>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4640      	mov	r0, r8
 800991e:	4649      	mov	r1, r9
 8009920:	f7f6 fdda 	bl	80004d8 <__aeabi_dmul>
 8009924:	a33a      	add	r3, pc, #232	@ (adr r3, 8009a10 <__ieee754_pow+0x3f8>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f7f6 fdd5 	bl	80004d8 <__aeabi_dmul>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	4650      	mov	r0, sl
 8009934:	4659      	mov	r1, fp
 8009936:	f7f6 fc17 	bl	8000168 <__aeabi_dsub>
 800993a:	2400      	movs	r4, #0
 800993c:	4602      	mov	r2, r0
 800993e:	460b      	mov	r3, r1
 8009940:	4680      	mov	r8, r0
 8009942:	4689      	mov	r9, r1
 8009944:	4630      	mov	r0, r6
 8009946:	4639      	mov	r1, r7
 8009948:	f7f6 fc10 	bl	800016c <__adddf3>
 800994c:	4632      	mov	r2, r6
 800994e:	463b      	mov	r3, r7
 8009950:	4620      	mov	r0, r4
 8009952:	460d      	mov	r5, r1
 8009954:	f7f6 fc08 	bl	8000168 <__aeabi_dsub>
 8009958:	4602      	mov	r2, r0
 800995a:	460b      	mov	r3, r1
 800995c:	4640      	mov	r0, r8
 800995e:	4649      	mov	r1, r9
 8009960:	f7f6 fc02 	bl	8000168 <__aeabi_dsub>
 8009964:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009968:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800996c:	2300      	movs	r3, #0
 800996e:	9304      	str	r3, [sp, #16]
 8009970:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009974:	4606      	mov	r6, r0
 8009976:	460f      	mov	r7, r1
 8009978:	e9dd 0100 	ldrd	r0, r1, [sp]
 800997c:	465b      	mov	r3, fp
 800997e:	4652      	mov	r2, sl
 8009980:	f7f6 fbf2 	bl	8000168 <__aeabi_dsub>
 8009984:	4622      	mov	r2, r4
 8009986:	462b      	mov	r3, r5
 8009988:	f7f6 fda6 	bl	80004d8 <__aeabi_dmul>
 800998c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009990:	4680      	mov	r8, r0
 8009992:	4689      	mov	r9, r1
 8009994:	4630      	mov	r0, r6
 8009996:	4639      	mov	r1, r7
 8009998:	f7f6 fd9e 	bl	80004d8 <__aeabi_dmul>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4640      	mov	r0, r8
 80099a2:	4649      	mov	r1, r9
 80099a4:	f7f6 fbe2 	bl	800016c <__adddf3>
 80099a8:	465b      	mov	r3, fp
 80099aa:	4606      	mov	r6, r0
 80099ac:	460f      	mov	r7, r1
 80099ae:	4652      	mov	r2, sl
 80099b0:	4620      	mov	r0, r4
 80099b2:	4629      	mov	r1, r5
 80099b4:	f7f6 fd90 	bl	80004d8 <__aeabi_dmul>
 80099b8:	460b      	mov	r3, r1
 80099ba:	4602      	mov	r2, r0
 80099bc:	4680      	mov	r8, r0
 80099be:	4689      	mov	r9, r1
 80099c0:	4630      	mov	r0, r6
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f6 fbd2 	bl	800016c <__adddf3>
 80099c8:	4b16      	ldr	r3, [pc, #88]	@ (8009a24 <__ieee754_pow+0x40c>)
 80099ca:	4604      	mov	r4, r0
 80099cc:	4299      	cmp	r1, r3
 80099ce:	460d      	mov	r5, r1
 80099d0:	468b      	mov	fp, r1
 80099d2:	f340 81fd 	ble.w	8009dd0 <__ieee754_pow+0x7b8>
 80099d6:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80099da:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80099de:	4303      	orrs	r3, r0
 80099e0:	f000 81dc 	beq.w	8009d9c <__ieee754_pow+0x784>
 80099e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099e8:	2200      	movs	r2, #0
 80099ea:	2300      	movs	r3, #0
 80099ec:	f7f6 ffe6 	bl	80009bc <__aeabi_dcmplt>
 80099f0:	3800      	subs	r0, #0
 80099f2:	bf18      	it	ne
 80099f4:	2001      	movne	r0, #1
 80099f6:	e71d      	b.n	8009834 <__ieee754_pow+0x21c>
 80099f8:	60000000 	.word	0x60000000
 80099fc:	3ff71547 	.word	0x3ff71547
 8009a00:	f85ddf44 	.word	0xf85ddf44
 8009a04:	3e54ae0b 	.word	0x3e54ae0b
 8009a08:	55555555 	.word	0x55555555
 8009a0c:	3fd55555 	.word	0x3fd55555
 8009a10:	652b82fe 	.word	0x652b82fe
 8009a14:	3ff71547 	.word	0x3ff71547
 8009a18:	3ff00000 	.word	0x3ff00000
 8009a1c:	3fd00000 	.word	0x3fd00000
 8009a20:	3fe00000 	.word	0x3fe00000
 8009a24:	408fffff 	.word	0x408fffff
 8009a28:	4ad3      	ldr	r2, [pc, #844]	@ (8009d78 <__ieee754_pow+0x760>)
 8009a2a:	4032      	ands	r2, r6
 8009a2c:	2a00      	cmp	r2, #0
 8009a2e:	f040 817a 	bne.w	8009d26 <__ieee754_pow+0x70e>
 8009a32:	4bd2      	ldr	r3, [pc, #840]	@ (8009d7c <__ieee754_pow+0x764>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	f7f6 fd4f 	bl	80004d8 <__aeabi_dmul>
 8009a3a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8009a3e:	460b      	mov	r3, r1
 8009a40:	151a      	asrs	r2, r3, #20
 8009a42:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009a46:	4422      	add	r2, r4
 8009a48:	920a      	str	r2, [sp, #40]	@ 0x28
 8009a4a:	4acd      	ldr	r2, [pc, #820]	@ (8009d80 <__ieee754_pow+0x768>)
 8009a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a50:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8009a54:	4293      	cmp	r3, r2
 8009a56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009a5a:	dd08      	ble.n	8009a6e <__ieee754_pow+0x456>
 8009a5c:	4ac9      	ldr	r2, [pc, #804]	@ (8009d84 <__ieee754_pow+0x76c>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	f340 8163 	ble.w	8009d2a <__ieee754_pow+0x712>
 8009a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a66:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a6e:	2600      	movs	r6, #0
 8009a70:	00f3      	lsls	r3, r6, #3
 8009a72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a74:	4bc4      	ldr	r3, [pc, #784]	@ (8009d88 <__ieee754_pow+0x770>)
 8009a76:	4629      	mov	r1, r5
 8009a78:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a80:	461a      	mov	r2, r3
 8009a82:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009a86:	4623      	mov	r3, r4
 8009a88:	4682      	mov	sl, r0
 8009a8a:	f7f6 fb6d 	bl	8000168 <__aeabi_dsub>
 8009a8e:	4652      	mov	r2, sl
 8009a90:	462b      	mov	r3, r5
 8009a92:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009a96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a9a:	f7f6 fb67 	bl	800016c <__adddf3>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	49b9      	ldr	r1, [pc, #740]	@ (8009d8c <__ieee754_pow+0x774>)
 8009aa6:	f7f6 fe41 	bl	800072c <__aeabi_ddiv>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	460b      	mov	r3, r1
 8009aae:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009ab2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ab6:	f7f6 fd0f 	bl	80004d8 <__aeabi_dmul>
 8009aba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009abe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009ac2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	2200      	movs	r2, #0
 8009aca:	46ab      	mov	fp, r5
 8009acc:	106d      	asrs	r5, r5, #1
 8009ace:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009ad2:	9304      	str	r3, [sp, #16]
 8009ad4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009ad8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009adc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009ae0:	4640      	mov	r0, r8
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	4614      	mov	r4, r2
 8009ae6:	461d      	mov	r5, r3
 8009ae8:	f7f6 fcf6 	bl	80004d8 <__aeabi_dmul>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009af4:	f7f6 fb38 	bl	8000168 <__aeabi_dsub>
 8009af8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009afc:	4606      	mov	r6, r0
 8009afe:	460f      	mov	r7, r1
 8009b00:	4620      	mov	r0, r4
 8009b02:	4629      	mov	r1, r5
 8009b04:	f7f6 fb30 	bl	8000168 <__aeabi_dsub>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	4650      	mov	r0, sl
 8009b0e:	4659      	mov	r1, fp
 8009b10:	f7f6 fb2a 	bl	8000168 <__aeabi_dsub>
 8009b14:	4642      	mov	r2, r8
 8009b16:	464b      	mov	r3, r9
 8009b18:	f7f6 fcde 	bl	80004d8 <__aeabi_dmul>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4630      	mov	r0, r6
 8009b22:	4639      	mov	r1, r7
 8009b24:	f7f6 fb20 	bl	8000168 <__aeabi_dsub>
 8009b28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b2c:	f7f6 fcd4 	bl	80004d8 <__aeabi_dmul>
 8009b30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b34:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	f7f6 fccc 	bl	80004d8 <__aeabi_dmul>
 8009b40:	a37b      	add	r3, pc, #492	@ (adr r3, 8009d30 <__ieee754_pow+0x718>)
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	4604      	mov	r4, r0
 8009b48:	460d      	mov	r5, r1
 8009b4a:	f7f6 fcc5 	bl	80004d8 <__aeabi_dmul>
 8009b4e:	a37a      	add	r3, pc, #488	@ (adr r3, 8009d38 <__ieee754_pow+0x720>)
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	f7f6 fb0a 	bl	800016c <__adddf3>
 8009b58:	4622      	mov	r2, r4
 8009b5a:	462b      	mov	r3, r5
 8009b5c:	f7f6 fcbc 	bl	80004d8 <__aeabi_dmul>
 8009b60:	a377      	add	r3, pc, #476	@ (adr r3, 8009d40 <__ieee754_pow+0x728>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f7f6 fb01 	bl	800016c <__adddf3>
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	462b      	mov	r3, r5
 8009b6e:	f7f6 fcb3 	bl	80004d8 <__aeabi_dmul>
 8009b72:	a375      	add	r3, pc, #468	@ (adr r3, 8009d48 <__ieee754_pow+0x730>)
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	f7f6 faf8 	bl	800016c <__adddf3>
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	462b      	mov	r3, r5
 8009b80:	f7f6 fcaa 	bl	80004d8 <__aeabi_dmul>
 8009b84:	a372      	add	r3, pc, #456	@ (adr r3, 8009d50 <__ieee754_pow+0x738>)
 8009b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8a:	f7f6 faef 	bl	800016c <__adddf3>
 8009b8e:	4622      	mov	r2, r4
 8009b90:	462b      	mov	r3, r5
 8009b92:	f7f6 fca1 	bl	80004d8 <__aeabi_dmul>
 8009b96:	a370      	add	r3, pc, #448	@ (adr r3, 8009d58 <__ieee754_pow+0x740>)
 8009b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9c:	f7f6 fae6 	bl	800016c <__adddf3>
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460f      	mov	r7, r1
 8009ba6:	462b      	mov	r3, r5
 8009ba8:	4620      	mov	r0, r4
 8009baa:	4629      	mov	r1, r5
 8009bac:	f7f6 fc94 	bl	80004d8 <__aeabi_dmul>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	4639      	mov	r1, r7
 8009bb8:	f7f6 fc8e 	bl	80004d8 <__aeabi_dmul>
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	460d      	mov	r5, r1
 8009bc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bc4:	4642      	mov	r2, r8
 8009bc6:	464b      	mov	r3, r9
 8009bc8:	f7f6 fad0 	bl	800016c <__adddf3>
 8009bcc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009bd0:	f7f6 fc82 	bl	80004d8 <__aeabi_dmul>
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	462b      	mov	r3, r5
 8009bd8:	f7f6 fac8 	bl	800016c <__adddf3>
 8009bdc:	4642      	mov	r2, r8
 8009bde:	4682      	mov	sl, r0
 8009be0:	468b      	mov	fp, r1
 8009be2:	464b      	mov	r3, r9
 8009be4:	4640      	mov	r0, r8
 8009be6:	4649      	mov	r1, r9
 8009be8:	f7f6 fc76 	bl	80004d8 <__aeabi_dmul>
 8009bec:	2200      	movs	r2, #0
 8009bee:	4b68      	ldr	r3, [pc, #416]	@ (8009d90 <__ieee754_pow+0x778>)
 8009bf0:	4606      	mov	r6, r0
 8009bf2:	460f      	mov	r7, r1
 8009bf4:	f7f6 faba 	bl	800016c <__adddf3>
 8009bf8:	4652      	mov	r2, sl
 8009bfa:	465b      	mov	r3, fp
 8009bfc:	f7f6 fab6 	bl	800016c <__adddf3>
 8009c00:	2400      	movs	r4, #0
 8009c02:	460d      	mov	r5, r1
 8009c04:	4622      	mov	r2, r4
 8009c06:	460b      	mov	r3, r1
 8009c08:	4640      	mov	r0, r8
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	f7f6 fc64 	bl	80004d8 <__aeabi_dmul>
 8009c10:	2200      	movs	r2, #0
 8009c12:	4680      	mov	r8, r0
 8009c14:	4689      	mov	r9, r1
 8009c16:	4620      	mov	r0, r4
 8009c18:	4629      	mov	r1, r5
 8009c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8009d90 <__ieee754_pow+0x778>)
 8009c1c:	f7f6 faa4 	bl	8000168 <__aeabi_dsub>
 8009c20:	4632      	mov	r2, r6
 8009c22:	463b      	mov	r3, r7
 8009c24:	f7f6 faa0 	bl	8000168 <__aeabi_dsub>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4650      	mov	r0, sl
 8009c2e:	4659      	mov	r1, fp
 8009c30:	f7f6 fa9a 	bl	8000168 <__aeabi_dsub>
 8009c34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c38:	f7f6 fc4e 	bl	80004d8 <__aeabi_dmul>
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	4606      	mov	r6, r0
 8009c40:	460f      	mov	r7, r1
 8009c42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c46:	462b      	mov	r3, r5
 8009c48:	f7f6 fc46 	bl	80004d8 <__aeabi_dmul>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4630      	mov	r0, r6
 8009c52:	4639      	mov	r1, r7
 8009c54:	f7f6 fa8a 	bl	800016c <__adddf3>
 8009c58:	2400      	movs	r4, #0
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	460f      	mov	r7, r1
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4640      	mov	r0, r8
 8009c64:	4649      	mov	r1, r9
 8009c66:	f7f6 fa81 	bl	800016c <__adddf3>
 8009c6a:	a33d      	add	r3, pc, #244	@ (adr r3, 8009d60 <__ieee754_pow+0x748>)
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	4620      	mov	r0, r4
 8009c72:	460d      	mov	r5, r1
 8009c74:	f7f6 fc30 	bl	80004d8 <__aeabi_dmul>
 8009c78:	4642      	mov	r2, r8
 8009c7a:	464b      	mov	r3, r9
 8009c7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c80:	4620      	mov	r0, r4
 8009c82:	4629      	mov	r1, r5
 8009c84:	f7f6 fa70 	bl	8000168 <__aeabi_dsub>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 fa6a 	bl	8000168 <__aeabi_dsub>
 8009c94:	a334      	add	r3, pc, #208	@ (adr r3, 8009d68 <__ieee754_pow+0x750>)
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	f7f6 fc1d 	bl	80004d8 <__aeabi_dmul>
 8009c9e:	a334      	add	r3, pc, #208	@ (adr r3, 8009d70 <__ieee754_pow+0x758>)
 8009ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	460f      	mov	r7, r1
 8009ca8:	4620      	mov	r0, r4
 8009caa:	4629      	mov	r1, r5
 8009cac:	f7f6 fc14 	bl	80004d8 <__aeabi_dmul>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	f7f6 fa58 	bl	800016c <__adddf3>
 8009cbc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009cbe:	4b35      	ldr	r3, [pc, #212]	@ (8009d94 <__ieee754_pow+0x77c>)
 8009cc0:	2400      	movs	r4, #0
 8009cc2:	4413      	add	r3, r2
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	f7f6 fa50 	bl	800016c <__adddf3>
 8009ccc:	4682      	mov	sl, r0
 8009cce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009cd0:	468b      	mov	fp, r1
 8009cd2:	f7f6 fb97 	bl	8000404 <__aeabi_i2d>
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	460f      	mov	r7, r1
 8009cda:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8009d98 <__ieee754_pow+0x780>)
 8009cde:	4413      	add	r3, r2
 8009ce0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ce4:	4652      	mov	r2, sl
 8009ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cea:	465b      	mov	r3, fp
 8009cec:	f7f6 fa3e 	bl	800016c <__adddf3>
 8009cf0:	4642      	mov	r2, r8
 8009cf2:	464b      	mov	r3, r9
 8009cf4:	f7f6 fa3a 	bl	800016c <__adddf3>
 8009cf8:	4632      	mov	r2, r6
 8009cfa:	463b      	mov	r3, r7
 8009cfc:	f7f6 fa36 	bl	800016c <__adddf3>
 8009d00:	4632      	mov	r2, r6
 8009d02:	463b      	mov	r3, r7
 8009d04:	4620      	mov	r0, r4
 8009d06:	460d      	mov	r5, r1
 8009d08:	f7f6 fa2e 	bl	8000168 <__aeabi_dsub>
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	464b      	mov	r3, r9
 8009d10:	f7f6 fa2a 	bl	8000168 <__aeabi_dsub>
 8009d14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d18:	f7f6 fa26 	bl	8000168 <__aeabi_dsub>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4650      	mov	r0, sl
 8009d22:	4659      	mov	r1, fp
 8009d24:	e61c      	b.n	8009960 <__ieee754_pow+0x348>
 8009d26:	2400      	movs	r4, #0
 8009d28:	e68a      	b.n	8009a40 <__ieee754_pow+0x428>
 8009d2a:	2601      	movs	r6, #1
 8009d2c:	e6a0      	b.n	8009a70 <__ieee754_pow+0x458>
 8009d2e:	bf00      	nop
 8009d30:	4a454eef 	.word	0x4a454eef
 8009d34:	3fca7e28 	.word	0x3fca7e28
 8009d38:	93c9db65 	.word	0x93c9db65
 8009d3c:	3fcd864a 	.word	0x3fcd864a
 8009d40:	a91d4101 	.word	0xa91d4101
 8009d44:	3fd17460 	.word	0x3fd17460
 8009d48:	518f264d 	.word	0x518f264d
 8009d4c:	3fd55555 	.word	0x3fd55555
 8009d50:	db6fabff 	.word	0xdb6fabff
 8009d54:	3fdb6db6 	.word	0x3fdb6db6
 8009d58:	33333303 	.word	0x33333303
 8009d5c:	3fe33333 	.word	0x3fe33333
 8009d60:	e0000000 	.word	0xe0000000
 8009d64:	3feec709 	.word	0x3feec709
 8009d68:	dc3a03fd 	.word	0xdc3a03fd
 8009d6c:	3feec709 	.word	0x3feec709
 8009d70:	145b01f5 	.word	0x145b01f5
 8009d74:	be3e2fe0 	.word	0xbe3e2fe0
 8009d78:	7ff00000 	.word	0x7ff00000
 8009d7c:	43400000 	.word	0x43400000
 8009d80:	0003988e 	.word	0x0003988e
 8009d84:	000bb679 	.word	0x000bb679
 8009d88:	0800a918 	.word	0x0800a918
 8009d8c:	3ff00000 	.word	0x3ff00000
 8009d90:	40080000 	.word	0x40080000
 8009d94:	0800a8f8 	.word	0x0800a8f8
 8009d98:	0800a908 	.word	0x0800a908
 8009d9c:	a39a      	add	r3, pc, #616	@ (adr r3, 800a008 <__ieee754_pow+0x9f0>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	4630      	mov	r0, r6
 8009da4:	4639      	mov	r1, r7
 8009da6:	f7f6 f9e1 	bl	800016c <__adddf3>
 8009daa:	4642      	mov	r2, r8
 8009dac:	e9cd 0100 	strd	r0, r1, [sp]
 8009db0:	464b      	mov	r3, r9
 8009db2:	4620      	mov	r0, r4
 8009db4:	4629      	mov	r1, r5
 8009db6:	f7f6 f9d7 	bl	8000168 <__aeabi_dsub>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dc2:	f7f6 fe19 	bl	80009f8 <__aeabi_dcmpgt>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f47f ae0c 	bne.w	80099e4 <__ieee754_pow+0x3cc>
 8009dcc:	4ba0      	ldr	r3, [pc, #640]	@ (800a050 <__ieee754_pow+0xa38>)
 8009dce:	e022      	b.n	8009e16 <__ieee754_pow+0x7fe>
 8009dd0:	4ca0      	ldr	r4, [pc, #640]	@ (800a054 <__ieee754_pow+0xa3c>)
 8009dd2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009dd6:	42a3      	cmp	r3, r4
 8009dd8:	d919      	bls.n	8009e0e <__ieee754_pow+0x7f6>
 8009dda:	4b9f      	ldr	r3, [pc, #636]	@ (800a058 <__ieee754_pow+0xa40>)
 8009ddc:	440b      	add	r3, r1
 8009dde:	4303      	orrs	r3, r0
 8009de0:	d009      	beq.n	8009df6 <__ieee754_pow+0x7de>
 8009de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009de6:	2200      	movs	r2, #0
 8009de8:	2300      	movs	r3, #0
 8009dea:	f7f6 fde7 	bl	80009bc <__aeabi_dcmplt>
 8009dee:	3800      	subs	r0, #0
 8009df0:	bf18      	it	ne
 8009df2:	2001      	movne	r0, #1
 8009df4:	e527      	b.n	8009846 <__ieee754_pow+0x22e>
 8009df6:	4642      	mov	r2, r8
 8009df8:	464b      	mov	r3, r9
 8009dfa:	f7f6 f9b5 	bl	8000168 <__aeabi_dsub>
 8009dfe:	4632      	mov	r2, r6
 8009e00:	463b      	mov	r3, r7
 8009e02:	f7f6 fdef 	bl	80009e4 <__aeabi_dcmpge>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d1eb      	bne.n	8009de2 <__ieee754_pow+0x7ca>
 8009e0a:	4b94      	ldr	r3, [pc, #592]	@ (800a05c <__ieee754_pow+0xa44>)
 8009e0c:	e003      	b.n	8009e16 <__ieee754_pow+0x7fe>
 8009e0e:	4a94      	ldr	r2, [pc, #592]	@ (800a060 <__ieee754_pow+0xa48>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	f240 80e1 	bls.w	8009fd8 <__ieee754_pow+0x9c0>
 8009e16:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8009e1a:	151b      	asrs	r3, r3, #20
 8009e1c:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8009e20:	fa4a fa03 	asr.w	sl, sl, r3
 8009e24:	44da      	add	sl, fp
 8009e26:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009e2a:	488e      	ldr	r0, [pc, #568]	@ (800a064 <__ieee754_pow+0xa4c>)
 8009e2c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009e30:	4108      	asrs	r0, r1
 8009e32:	ea00 030a 	and.w	r3, r0, sl
 8009e36:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009e3a:	f1c1 0114 	rsb	r1, r1, #20
 8009e3e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009e42:	4640      	mov	r0, r8
 8009e44:	fa4a fa01 	asr.w	sl, sl, r1
 8009e48:	f1bb 0f00 	cmp.w	fp, #0
 8009e4c:	4649      	mov	r1, r9
 8009e4e:	f04f 0200 	mov.w	r2, #0
 8009e52:	bfb8      	it	lt
 8009e54:	f1ca 0a00 	rsblt	sl, sl, #0
 8009e58:	f7f6 f986 	bl	8000168 <__aeabi_dsub>
 8009e5c:	4680      	mov	r8, r0
 8009e5e:	4689      	mov	r9, r1
 8009e60:	2400      	movs	r4, #0
 8009e62:	4632      	mov	r2, r6
 8009e64:	463b      	mov	r3, r7
 8009e66:	4640      	mov	r0, r8
 8009e68:	4649      	mov	r1, r9
 8009e6a:	f7f6 f97f 	bl	800016c <__adddf3>
 8009e6e:	a368      	add	r3, pc, #416	@ (adr r3, 800a010 <__ieee754_pow+0x9f8>)
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	4620      	mov	r0, r4
 8009e76:	460d      	mov	r5, r1
 8009e78:	f7f6 fb2e 	bl	80004d8 <__aeabi_dmul>
 8009e7c:	4642      	mov	r2, r8
 8009e7e:	464b      	mov	r3, r9
 8009e80:	e9cd 0100 	strd	r0, r1, [sp]
 8009e84:	4620      	mov	r0, r4
 8009e86:	4629      	mov	r1, r5
 8009e88:	f7f6 f96e 	bl	8000168 <__aeabi_dsub>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	4630      	mov	r0, r6
 8009e92:	4639      	mov	r1, r7
 8009e94:	f7f6 f968 	bl	8000168 <__aeabi_dsub>
 8009e98:	a35f      	add	r3, pc, #380	@ (adr r3, 800a018 <__ieee754_pow+0xa00>)
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	f7f6 fb1b 	bl	80004d8 <__aeabi_dmul>
 8009ea2:	a35f      	add	r3, pc, #380	@ (adr r3, 800a020 <__ieee754_pow+0xa08>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	4680      	mov	r8, r0
 8009eaa:	4689      	mov	r9, r1
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f7f6 fb12 	bl	80004d8 <__aeabi_dmul>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4640      	mov	r0, r8
 8009eba:	4649      	mov	r1, r9
 8009ebc:	f7f6 f956 	bl	800016c <__adddf3>
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	460d      	mov	r5, r1
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ecc:	f7f6 f94e 	bl	800016c <__adddf3>
 8009ed0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ed4:	4680      	mov	r8, r0
 8009ed6:	4689      	mov	r9, r1
 8009ed8:	f7f6 f946 	bl	8000168 <__aeabi_dsub>
 8009edc:	4602      	mov	r2, r0
 8009ede:	460b      	mov	r3, r1
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	f7f6 f940 	bl	8000168 <__aeabi_dsub>
 8009ee8:	4642      	mov	r2, r8
 8009eea:	4606      	mov	r6, r0
 8009eec:	460f      	mov	r7, r1
 8009eee:	464b      	mov	r3, r9
 8009ef0:	4640      	mov	r0, r8
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	f7f6 faf0 	bl	80004d8 <__aeabi_dmul>
 8009ef8:	a34b      	add	r3, pc, #300	@ (adr r3, 800a028 <__ieee754_pow+0xa10>)
 8009efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efe:	4604      	mov	r4, r0
 8009f00:	460d      	mov	r5, r1
 8009f02:	f7f6 fae9 	bl	80004d8 <__aeabi_dmul>
 8009f06:	a34a      	add	r3, pc, #296	@ (adr r3, 800a030 <__ieee754_pow+0xa18>)
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	f7f6 f92c 	bl	8000168 <__aeabi_dsub>
 8009f10:	4622      	mov	r2, r4
 8009f12:	462b      	mov	r3, r5
 8009f14:	f7f6 fae0 	bl	80004d8 <__aeabi_dmul>
 8009f18:	a347      	add	r3, pc, #284	@ (adr r3, 800a038 <__ieee754_pow+0xa20>)
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	f7f6 f925 	bl	800016c <__adddf3>
 8009f22:	4622      	mov	r2, r4
 8009f24:	462b      	mov	r3, r5
 8009f26:	f7f6 fad7 	bl	80004d8 <__aeabi_dmul>
 8009f2a:	a345      	add	r3, pc, #276	@ (adr r3, 800a040 <__ieee754_pow+0xa28>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	f7f6 f91a 	bl	8000168 <__aeabi_dsub>
 8009f34:	4622      	mov	r2, r4
 8009f36:	462b      	mov	r3, r5
 8009f38:	f7f6 face 	bl	80004d8 <__aeabi_dmul>
 8009f3c:	a342      	add	r3, pc, #264	@ (adr r3, 800a048 <__ieee754_pow+0xa30>)
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	f7f6 f913 	bl	800016c <__adddf3>
 8009f46:	4622      	mov	r2, r4
 8009f48:	462b      	mov	r3, r5
 8009f4a:	f7f6 fac5 	bl	80004d8 <__aeabi_dmul>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	4640      	mov	r0, r8
 8009f54:	4649      	mov	r1, r9
 8009f56:	f7f6 f907 	bl	8000168 <__aeabi_dsub>
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	460d      	mov	r5, r1
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4640      	mov	r0, r8
 8009f64:	4649      	mov	r1, r9
 8009f66:	f7f6 fab7 	bl	80004d8 <__aeabi_dmul>
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	e9cd 0100 	strd	r0, r1, [sp]
 8009f70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f74:	4620      	mov	r0, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7f6 f8f6 	bl	8000168 <__aeabi_dsub>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f84:	f7f6 fbd2 	bl	800072c <__aeabi_ddiv>
 8009f88:	4632      	mov	r2, r6
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	460d      	mov	r5, r1
 8009f8e:	463b      	mov	r3, r7
 8009f90:	4640      	mov	r0, r8
 8009f92:	4649      	mov	r1, r9
 8009f94:	f7f6 faa0 	bl	80004d8 <__aeabi_dmul>
 8009f98:	4632      	mov	r2, r6
 8009f9a:	463b      	mov	r3, r7
 8009f9c:	f7f6 f8e6 	bl	800016c <__adddf3>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	f7f6 f8de 	bl	8000168 <__aeabi_dsub>
 8009fac:	4642      	mov	r2, r8
 8009fae:	464b      	mov	r3, r9
 8009fb0:	f7f6 f8da 	bl	8000168 <__aeabi_dsub>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	2000      	movs	r0, #0
 8009fba:	492b      	ldr	r1, [pc, #172]	@ (800a068 <__ieee754_pow+0xa50>)
 8009fbc:	f7f6 f8d4 	bl	8000168 <__aeabi_dsub>
 8009fc0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009fc4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8009fc8:	da09      	bge.n	8009fde <__ieee754_pow+0x9c6>
 8009fca:	4652      	mov	r2, sl
 8009fcc:	f000 f9e4 	bl	800a398 <scalbn>
 8009fd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fd4:	f7ff bb89 	b.w	80096ea <__ieee754_pow+0xd2>
 8009fd8:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009fdc:	e740      	b.n	8009e60 <__ieee754_pow+0x848>
 8009fde:	4621      	mov	r1, r4
 8009fe0:	e7f6      	b.n	8009fd0 <__ieee754_pow+0x9b8>
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	4920      	ldr	r1, [pc, #128]	@ (800a068 <__ieee754_pow+0xa50>)
 8009fe6:	f7ff bb35 	b.w	8009654 <__ieee754_pow+0x3c>
 8009fea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fee:	f7ff bb31 	b.w	8009654 <__ieee754_pow+0x3c>
 8009ff2:	4650      	mov	r0, sl
 8009ff4:	4659      	mov	r1, fp
 8009ff6:	f7ff bb2d 	b.w	8009654 <__ieee754_pow+0x3c>
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	f7ff bb87 	b.w	800970e <__ieee754_pow+0xf6>
 800a000:	2400      	movs	r4, #0
 800a002:	f7ff bb69 	b.w	80096d8 <__ieee754_pow+0xc0>
 800a006:	bf00      	nop
 800a008:	652b82fe 	.word	0x652b82fe
 800a00c:	3c971547 	.word	0x3c971547
 800a010:	00000000 	.word	0x00000000
 800a014:	3fe62e43 	.word	0x3fe62e43
 800a018:	fefa39ef 	.word	0xfefa39ef
 800a01c:	3fe62e42 	.word	0x3fe62e42
 800a020:	0ca86c39 	.word	0x0ca86c39
 800a024:	be205c61 	.word	0xbe205c61
 800a028:	72bea4d0 	.word	0x72bea4d0
 800a02c:	3e663769 	.word	0x3e663769
 800a030:	c5d26bf1 	.word	0xc5d26bf1
 800a034:	3ebbbd41 	.word	0x3ebbbd41
 800a038:	af25de2c 	.word	0xaf25de2c
 800a03c:	3f11566a 	.word	0x3f11566a
 800a040:	16bebd93 	.word	0x16bebd93
 800a044:	3f66c16c 	.word	0x3f66c16c
 800a048:	5555553e 	.word	0x5555553e
 800a04c:	3fc55555 	.word	0x3fc55555
 800a050:	40900000 	.word	0x40900000
 800a054:	4090cbff 	.word	0x4090cbff
 800a058:	3f6f3400 	.word	0x3f6f3400
 800a05c:	4090cc00 	.word	0x4090cc00
 800a060:	3fe00000 	.word	0x3fe00000
 800a064:	fff00000 	.word	0xfff00000
 800a068:	3ff00000 	.word	0x3ff00000
 800a06c:	00000000 	.word	0x00000000

0800a070 <atan>:
 800a070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a074:	4bbc      	ldr	r3, [pc, #752]	@ (800a368 <atan+0x2f8>)
 800a076:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a07a:	429e      	cmp	r6, r3
 800a07c:	4604      	mov	r4, r0
 800a07e:	460d      	mov	r5, r1
 800a080:	468b      	mov	fp, r1
 800a082:	d918      	bls.n	800a0b6 <atan+0x46>
 800a084:	4bb9      	ldr	r3, [pc, #740]	@ (800a36c <atan+0x2fc>)
 800a086:	429e      	cmp	r6, r3
 800a088:	d801      	bhi.n	800a08e <atan+0x1e>
 800a08a:	d109      	bne.n	800a0a0 <atan+0x30>
 800a08c:	b140      	cbz	r0, 800a0a0 <atan+0x30>
 800a08e:	4622      	mov	r2, r4
 800a090:	462b      	mov	r3, r5
 800a092:	4620      	mov	r0, r4
 800a094:	4629      	mov	r1, r5
 800a096:	f7f6 f869 	bl	800016c <__adddf3>
 800a09a:	4604      	mov	r4, r0
 800a09c:	460d      	mov	r5, r1
 800a09e:	e006      	b.n	800a0ae <atan+0x3e>
 800a0a0:	f1bb 0f00 	cmp.w	fp, #0
 800a0a4:	f340 8123 	ble.w	800a2ee <atan+0x27e>
 800a0a8:	a593      	add	r5, pc, #588	@ (adr r5, 800a2f8 <atan+0x288>)
 800a0aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b6:	4bae      	ldr	r3, [pc, #696]	@ (800a370 <atan+0x300>)
 800a0b8:	429e      	cmp	r6, r3
 800a0ba:	d811      	bhi.n	800a0e0 <atan+0x70>
 800a0bc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a0c0:	429e      	cmp	r6, r3
 800a0c2:	d80a      	bhi.n	800a0da <atan+0x6a>
 800a0c4:	a38e      	add	r3, pc, #568	@ (adr r3, 800a300 <atan+0x290>)
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	f7f6 f84f 	bl	800016c <__adddf3>
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	4ba8      	ldr	r3, [pc, #672]	@ (800a374 <atan+0x304>)
 800a0d2:	f7f6 fc91 	bl	80009f8 <__aeabi_dcmpgt>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d1e9      	bne.n	800a0ae <atan+0x3e>
 800a0da:	f04f 3aff 	mov.w	sl, #4294967295
 800a0de:	e027      	b.n	800a130 <atan+0xc0>
 800a0e0:	f000 f956 	bl	800a390 <fabs>
 800a0e4:	4ba4      	ldr	r3, [pc, #656]	@ (800a378 <atan+0x308>)
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	429e      	cmp	r6, r3
 800a0ea:	460d      	mov	r5, r1
 800a0ec:	f200 80b8 	bhi.w	800a260 <atan+0x1f0>
 800a0f0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a0f4:	429e      	cmp	r6, r3
 800a0f6:	f200 809c 	bhi.w	800a232 <atan+0x1c2>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	f7f6 f835 	bl	800016c <__adddf3>
 800a102:	2200      	movs	r2, #0
 800a104:	4b9b      	ldr	r3, [pc, #620]	@ (800a374 <atan+0x304>)
 800a106:	f7f6 f82f 	bl	8000168 <__aeabi_dsub>
 800a10a:	2200      	movs	r2, #0
 800a10c:	4606      	mov	r6, r0
 800a10e:	460f      	mov	r7, r1
 800a110:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a114:	4620      	mov	r0, r4
 800a116:	4629      	mov	r1, r5
 800a118:	f7f6 f828 	bl	800016c <__adddf3>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4630      	mov	r0, r6
 800a122:	4639      	mov	r1, r7
 800a124:	f7f6 fb02 	bl	800072c <__aeabi_ddiv>
 800a128:	f04f 0a00 	mov.w	sl, #0
 800a12c:	4604      	mov	r4, r0
 800a12e:	460d      	mov	r5, r1
 800a130:	4622      	mov	r2, r4
 800a132:	462b      	mov	r3, r5
 800a134:	4620      	mov	r0, r4
 800a136:	4629      	mov	r1, r5
 800a138:	f7f6 f9ce 	bl	80004d8 <__aeabi_dmul>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4680      	mov	r8, r0
 800a142:	4689      	mov	r9, r1
 800a144:	f7f6 f9c8 	bl	80004d8 <__aeabi_dmul>
 800a148:	a36f      	add	r3, pc, #444	@ (adr r3, 800a308 <atan+0x298>)
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	4606      	mov	r6, r0
 800a150:	460f      	mov	r7, r1
 800a152:	f7f6 f9c1 	bl	80004d8 <__aeabi_dmul>
 800a156:	a36e      	add	r3, pc, #440	@ (adr r3, 800a310 <atan+0x2a0>)
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	f7f6 f806 	bl	800016c <__adddf3>
 800a160:	4632      	mov	r2, r6
 800a162:	463b      	mov	r3, r7
 800a164:	f7f6 f9b8 	bl	80004d8 <__aeabi_dmul>
 800a168:	a36b      	add	r3, pc, #428	@ (adr r3, 800a318 <atan+0x2a8>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f7f5 fffd 	bl	800016c <__adddf3>
 800a172:	4632      	mov	r2, r6
 800a174:	463b      	mov	r3, r7
 800a176:	f7f6 f9af 	bl	80004d8 <__aeabi_dmul>
 800a17a:	a369      	add	r3, pc, #420	@ (adr r3, 800a320 <atan+0x2b0>)
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	f7f5 fff4 	bl	800016c <__adddf3>
 800a184:	4632      	mov	r2, r6
 800a186:	463b      	mov	r3, r7
 800a188:	f7f6 f9a6 	bl	80004d8 <__aeabi_dmul>
 800a18c:	a366      	add	r3, pc, #408	@ (adr r3, 800a328 <atan+0x2b8>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	f7f5 ffeb 	bl	800016c <__adddf3>
 800a196:	4632      	mov	r2, r6
 800a198:	463b      	mov	r3, r7
 800a19a:	f7f6 f99d 	bl	80004d8 <__aeabi_dmul>
 800a19e:	a364      	add	r3, pc, #400	@ (adr r3, 800a330 <atan+0x2c0>)
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	f7f5 ffe2 	bl	800016c <__adddf3>
 800a1a8:	4642      	mov	r2, r8
 800a1aa:	464b      	mov	r3, r9
 800a1ac:	f7f6 f994 	bl	80004d8 <__aeabi_dmul>
 800a1b0:	a361      	add	r3, pc, #388	@ (adr r3, 800a338 <atan+0x2c8>)
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	4680      	mov	r8, r0
 800a1b8:	4689      	mov	r9, r1
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	4639      	mov	r1, r7
 800a1be:	f7f6 f98b 	bl	80004d8 <__aeabi_dmul>
 800a1c2:	a35f      	add	r3, pc, #380	@ (adr r3, 800a340 <atan+0x2d0>)
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	f7f5 ffce 	bl	8000168 <__aeabi_dsub>
 800a1cc:	4632      	mov	r2, r6
 800a1ce:	463b      	mov	r3, r7
 800a1d0:	f7f6 f982 	bl	80004d8 <__aeabi_dmul>
 800a1d4:	a35c      	add	r3, pc, #368	@ (adr r3, 800a348 <atan+0x2d8>)
 800a1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1da:	f7f5 ffc5 	bl	8000168 <__aeabi_dsub>
 800a1de:	4632      	mov	r2, r6
 800a1e0:	463b      	mov	r3, r7
 800a1e2:	f7f6 f979 	bl	80004d8 <__aeabi_dmul>
 800a1e6:	a35a      	add	r3, pc, #360	@ (adr r3, 800a350 <atan+0x2e0>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	f7f5 ffbc 	bl	8000168 <__aeabi_dsub>
 800a1f0:	4632      	mov	r2, r6
 800a1f2:	463b      	mov	r3, r7
 800a1f4:	f7f6 f970 	bl	80004d8 <__aeabi_dmul>
 800a1f8:	a357      	add	r3, pc, #348	@ (adr r3, 800a358 <atan+0x2e8>)
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	f7f5 ffb3 	bl	8000168 <__aeabi_dsub>
 800a202:	4632      	mov	r2, r6
 800a204:	463b      	mov	r3, r7
 800a206:	f7f6 f967 	bl	80004d8 <__aeabi_dmul>
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	4640      	mov	r0, r8
 800a210:	4649      	mov	r1, r9
 800a212:	f7f5 ffab 	bl	800016c <__adddf3>
 800a216:	4622      	mov	r2, r4
 800a218:	462b      	mov	r3, r5
 800a21a:	f7f6 f95d 	bl	80004d8 <__aeabi_dmul>
 800a21e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	d144      	bne.n	800a2b2 <atan+0x242>
 800a228:	4620      	mov	r0, r4
 800a22a:	4629      	mov	r1, r5
 800a22c:	f7f5 ff9c 	bl	8000168 <__aeabi_dsub>
 800a230:	e733      	b.n	800a09a <atan+0x2a>
 800a232:	2200      	movs	r2, #0
 800a234:	4b4f      	ldr	r3, [pc, #316]	@ (800a374 <atan+0x304>)
 800a236:	f7f5 ff97 	bl	8000168 <__aeabi_dsub>
 800a23a:	2200      	movs	r2, #0
 800a23c:	4606      	mov	r6, r0
 800a23e:	460f      	mov	r7, r1
 800a240:	4620      	mov	r0, r4
 800a242:	4629      	mov	r1, r5
 800a244:	4b4b      	ldr	r3, [pc, #300]	@ (800a374 <atan+0x304>)
 800a246:	f7f5 ff91 	bl	800016c <__adddf3>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	4630      	mov	r0, r6
 800a250:	4639      	mov	r1, r7
 800a252:	f7f6 fa6b 	bl	800072c <__aeabi_ddiv>
 800a256:	f04f 0a01 	mov.w	sl, #1
 800a25a:	4604      	mov	r4, r0
 800a25c:	460d      	mov	r5, r1
 800a25e:	e767      	b.n	800a130 <atan+0xc0>
 800a260:	4b46      	ldr	r3, [pc, #280]	@ (800a37c <atan+0x30c>)
 800a262:	429e      	cmp	r6, r3
 800a264:	d21a      	bcs.n	800a29c <atan+0x22c>
 800a266:	2200      	movs	r2, #0
 800a268:	4b45      	ldr	r3, [pc, #276]	@ (800a380 <atan+0x310>)
 800a26a:	f7f5 ff7d 	bl	8000168 <__aeabi_dsub>
 800a26e:	2200      	movs	r2, #0
 800a270:	4606      	mov	r6, r0
 800a272:	460f      	mov	r7, r1
 800a274:	4620      	mov	r0, r4
 800a276:	4629      	mov	r1, r5
 800a278:	4b41      	ldr	r3, [pc, #260]	@ (800a380 <atan+0x310>)
 800a27a:	f7f6 f92d 	bl	80004d8 <__aeabi_dmul>
 800a27e:	2200      	movs	r2, #0
 800a280:	4b3c      	ldr	r3, [pc, #240]	@ (800a374 <atan+0x304>)
 800a282:	f7f5 ff73 	bl	800016c <__adddf3>
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	4630      	mov	r0, r6
 800a28c:	4639      	mov	r1, r7
 800a28e:	f7f6 fa4d 	bl	800072c <__aeabi_ddiv>
 800a292:	f04f 0a02 	mov.w	sl, #2
 800a296:	4604      	mov	r4, r0
 800a298:	460d      	mov	r5, r1
 800a29a:	e749      	b.n	800a130 <atan+0xc0>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	4938      	ldr	r1, [pc, #224]	@ (800a384 <atan+0x314>)
 800a2a4:	f7f6 fa42 	bl	800072c <__aeabi_ddiv>
 800a2a8:	f04f 0a03 	mov.w	sl, #3
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	e73e      	b.n	800a130 <atan+0xc0>
 800a2b2:	4b35      	ldr	r3, [pc, #212]	@ (800a388 <atan+0x318>)
 800a2b4:	4e35      	ldr	r6, [pc, #212]	@ (800a38c <atan+0x31c>)
 800a2b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2be:	f7f5 ff53 	bl	8000168 <__aeabi_dsub>
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	462b      	mov	r3, r5
 800a2c6:	f7f5 ff4f 	bl	8000168 <__aeabi_dsub>
 800a2ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a2d6:	f7f5 ff47 	bl	8000168 <__aeabi_dsub>
 800a2da:	f1bb 0f00 	cmp.w	fp, #0
 800a2de:	4604      	mov	r4, r0
 800a2e0:	460d      	mov	r5, r1
 800a2e2:	f6bf aee4 	bge.w	800a0ae <atan+0x3e>
 800a2e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a2ea:	461d      	mov	r5, r3
 800a2ec:	e6df      	b.n	800a0ae <atan+0x3e>
 800a2ee:	a51c      	add	r5, pc, #112	@ (adr r5, 800a360 <atan+0x2f0>)
 800a2f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a2f4:	e6db      	b.n	800a0ae <atan+0x3e>
 800a2f6:	bf00      	nop
 800a2f8:	54442d18 	.word	0x54442d18
 800a2fc:	3ff921fb 	.word	0x3ff921fb
 800a300:	8800759c 	.word	0x8800759c
 800a304:	7e37e43c 	.word	0x7e37e43c
 800a308:	e322da11 	.word	0xe322da11
 800a30c:	3f90ad3a 	.word	0x3f90ad3a
 800a310:	24760deb 	.word	0x24760deb
 800a314:	3fa97b4b 	.word	0x3fa97b4b
 800a318:	a0d03d51 	.word	0xa0d03d51
 800a31c:	3fb10d66 	.word	0x3fb10d66
 800a320:	c54c206e 	.word	0xc54c206e
 800a324:	3fb745cd 	.word	0x3fb745cd
 800a328:	920083ff 	.word	0x920083ff
 800a32c:	3fc24924 	.word	0x3fc24924
 800a330:	5555550d 	.word	0x5555550d
 800a334:	3fd55555 	.word	0x3fd55555
 800a338:	2c6a6c2f 	.word	0x2c6a6c2f
 800a33c:	bfa2b444 	.word	0xbfa2b444
 800a340:	52defd9a 	.word	0x52defd9a
 800a344:	3fadde2d 	.word	0x3fadde2d
 800a348:	af749a6d 	.word	0xaf749a6d
 800a34c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a350:	fe231671 	.word	0xfe231671
 800a354:	3fbc71c6 	.word	0x3fbc71c6
 800a358:	9998ebc4 	.word	0x9998ebc4
 800a35c:	3fc99999 	.word	0x3fc99999
 800a360:	54442d18 	.word	0x54442d18
 800a364:	bff921fb 	.word	0xbff921fb
 800a368:	440fffff 	.word	0x440fffff
 800a36c:	7ff00000 	.word	0x7ff00000
 800a370:	3fdbffff 	.word	0x3fdbffff
 800a374:	3ff00000 	.word	0x3ff00000
 800a378:	3ff2ffff 	.word	0x3ff2ffff
 800a37c:	40038000 	.word	0x40038000
 800a380:	3ff80000 	.word	0x3ff80000
 800a384:	bff00000 	.word	0xbff00000
 800a388:	0800a928 	.word	0x0800a928
 800a38c:	0800a948 	.word	0x0800a948

0800a390 <fabs>:
 800a390:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a394:	4619      	mov	r1, r3
 800a396:	4770      	bx	lr

0800a398 <scalbn>:
 800a398:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a39c:	4616      	mov	r6, r2
 800a39e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a3a2:	4683      	mov	fp, r0
 800a3a4:	468c      	mov	ip, r1
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	b982      	cbnz	r2, 800a3cc <scalbn+0x34>
 800a3aa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a3ae:	4303      	orrs	r3, r0
 800a3b0:	d035      	beq.n	800a41e <scalbn+0x86>
 800a3b2:	4b2d      	ldr	r3, [pc, #180]	@ (800a468 <scalbn+0xd0>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f7f6 f88f 	bl	80004d8 <__aeabi_dmul>
 800a3ba:	4b2c      	ldr	r3, [pc, #176]	@ (800a46c <scalbn+0xd4>)
 800a3bc:	4683      	mov	fp, r0
 800a3be:	429e      	cmp	r6, r3
 800a3c0:	468c      	mov	ip, r1
 800a3c2:	da0d      	bge.n	800a3e0 <scalbn+0x48>
 800a3c4:	a324      	add	r3, pc, #144	@ (adr r3, 800a458 <scalbn+0xc0>)
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	e019      	b.n	800a400 <scalbn+0x68>
 800a3cc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a3d0:	42ba      	cmp	r2, r7
 800a3d2:	d109      	bne.n	800a3e8 <scalbn+0x50>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	f7f5 fec9 	bl	800016c <__adddf3>
 800a3da:	4683      	mov	fp, r0
 800a3dc:	468c      	mov	ip, r1
 800a3de:	e01e      	b.n	800a41e <scalbn+0x86>
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a3e6:	3a36      	subs	r2, #54	@ 0x36
 800a3e8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a3ec:	428e      	cmp	r6, r1
 800a3ee:	dd0a      	ble.n	800a406 <scalbn+0x6e>
 800a3f0:	a31b      	add	r3, pc, #108	@ (adr r3, 800a460 <scalbn+0xc8>)
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	4665      	mov	r5, ip
 800a3f8:	f363 051e 	bfi	r5, r3, #0, #31
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	481c      	ldr	r0, [pc, #112]	@ (800a470 <scalbn+0xd8>)
 800a400:	f7f6 f86a 	bl	80004d8 <__aeabi_dmul>
 800a404:	e7e9      	b.n	800a3da <scalbn+0x42>
 800a406:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a40a:	4432      	add	r2, r6
 800a40c:	428a      	cmp	r2, r1
 800a40e:	dcef      	bgt.n	800a3f0 <scalbn+0x58>
 800a410:	2a00      	cmp	r2, #0
 800a412:	dd08      	ble.n	800a426 <scalbn+0x8e>
 800a414:	f36f 531e 	bfc	r3, #20, #11
 800a418:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a41c:	46ac      	mov	ip, r5
 800a41e:	4658      	mov	r0, fp
 800a420:	4661      	mov	r1, ip
 800a422:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a426:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a42a:	da09      	bge.n	800a440 <scalbn+0xa8>
 800a42c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a430:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a434:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a438:	480e      	ldr	r0, [pc, #56]	@ (800a474 <scalbn+0xdc>)
 800a43a:	f041 011f 	orr.w	r1, r1, #31
 800a43e:	e7c1      	b.n	800a3c4 <scalbn+0x2c>
 800a440:	3236      	adds	r2, #54	@ 0x36
 800a442:	f36f 531e 	bfc	r3, #20, #11
 800a446:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a44a:	4658      	mov	r0, fp
 800a44c:	4629      	mov	r1, r5
 800a44e:	2200      	movs	r2, #0
 800a450:	4b09      	ldr	r3, [pc, #36]	@ (800a478 <scalbn+0xe0>)
 800a452:	e7d5      	b.n	800a400 <scalbn+0x68>
 800a454:	f3af 8000 	nop.w
 800a458:	c2f8f359 	.word	0xc2f8f359
 800a45c:	01a56e1f 	.word	0x01a56e1f
 800a460:	8800759c 	.word	0x8800759c
 800a464:	7e37e43c 	.word	0x7e37e43c
 800a468:	43500000 	.word	0x43500000
 800a46c:	ffff3cb0 	.word	0xffff3cb0
 800a470:	8800759c 	.word	0x8800759c
 800a474:	c2f8f359 	.word	0xc2f8f359
 800a478:	3c900000 	.word	0x3c900000

0800a47c <with_errno>:
 800a47c:	b570      	push	{r4, r5, r6, lr}
 800a47e:	4604      	mov	r4, r0
 800a480:	460d      	mov	r5, r1
 800a482:	4616      	mov	r6, r2
 800a484:	f7fc fe08 	bl	8007098 <__errno>
 800a488:	4629      	mov	r1, r5
 800a48a:	6006      	str	r6, [r0, #0]
 800a48c:	4620      	mov	r0, r4
 800a48e:	bd70      	pop	{r4, r5, r6, pc}

0800a490 <xflow>:
 800a490:	b513      	push	{r0, r1, r4, lr}
 800a492:	4604      	mov	r4, r0
 800a494:	4619      	mov	r1, r3
 800a496:	4610      	mov	r0, r2
 800a498:	b10c      	cbz	r4, 800a49e <xflow+0xe>
 800a49a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a49e:	e9cd 2300 	strd	r2, r3, [sp]
 800a4a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4a6:	f7f6 f817 	bl	80004d8 <__aeabi_dmul>
 800a4aa:	2222      	movs	r2, #34	@ 0x22
 800a4ac:	b002      	add	sp, #8
 800a4ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4b2:	f7ff bfe3 	b.w	800a47c <with_errno>

0800a4b6 <__math_uflow>:
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a4bc:	f7ff bfe8 	b.w	800a490 <xflow>

0800a4c0 <__math_oflow>:
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800a4c6:	f7ff bfe3 	b.w	800a490 <xflow>
	...

0800a4cc <_init>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	bf00      	nop
 800a4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d2:	bc08      	pop	{r3}
 800a4d4:	469e      	mov	lr, r3
 800a4d6:	4770      	bx	lr

0800a4d8 <_fini>:
 800a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4da:	bf00      	nop
 800a4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4de:	bc08      	pop	{r3}
 800a4e0:	469e      	mov	lr, r3
 800a4e2:	4770      	bx	lr
