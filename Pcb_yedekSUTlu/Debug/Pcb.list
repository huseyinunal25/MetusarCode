
Pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c214  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800c328  0800c328  0000d328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c86c  0800c86c  0000e1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c86c  0800c86c  0000d86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c874  0800c874  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c874  0800c874  0000d874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c878  0800c878  0000d878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c87c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  200001d8  0800ca50  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000898  0800ca50  0000e898  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f44  00000000  00000000  0000e1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f1  00000000  00000000  00021141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00023a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f11  00000000  00000000  00024d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cf0  00000000  00000000  00025c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c1d  00000000  00000000  0003f941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009267f  00000000  00000000  0005555e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7bdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006860  00000000  00000000  000e7c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000ee480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c30c 	.word	0x0800c30c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800c30c 	.word	0x0800c30c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_ldivmod>:
 80010fc:	b97b      	cbnz	r3, 800111e <__aeabi_ldivmod+0x22>
 80010fe:	b972      	cbnz	r2, 800111e <__aeabi_ldivmod+0x22>
 8001100:	2900      	cmp	r1, #0
 8001102:	bfbe      	ittt	lt
 8001104:	2000      	movlt	r0, #0
 8001106:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800110a:	e006      	blt.n	800111a <__aeabi_ldivmod+0x1e>
 800110c:	bf08      	it	eq
 800110e:	2800      	cmpeq	r0, #0
 8001110:	bf1c      	itt	ne
 8001112:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8001116:	f04f 30ff 	movne.w	r0, #4294967295
 800111a:	f000 b9bf 	b.w	800149c <__aeabi_idiv0>
 800111e:	f1ad 0c08 	sub.w	ip, sp, #8
 8001122:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001126:	2900      	cmp	r1, #0
 8001128:	db09      	blt.n	800113e <__aeabi_ldivmod+0x42>
 800112a:	2b00      	cmp	r3, #0
 800112c:	db1a      	blt.n	8001164 <__aeabi_ldivmod+0x68>
 800112e:	f000 f835 	bl	800119c <__udivmoddi4>
 8001132:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800113a:	b004      	add	sp, #16
 800113c:	4770      	bx	lr
 800113e:	4240      	negs	r0, r0
 8001140:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	db1b      	blt.n	8001180 <__aeabi_ldivmod+0x84>
 8001148:	f000 f828 	bl	800119c <__udivmoddi4>
 800114c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001154:	b004      	add	sp, #16
 8001156:	4240      	negs	r0, r0
 8001158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800115c:	4252      	negs	r2, r2
 800115e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001162:	4770      	bx	lr
 8001164:	4252      	negs	r2, r2
 8001166:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800116a:	f000 f817 	bl	800119c <__udivmoddi4>
 800116e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001176:	b004      	add	sp, #16
 8001178:	4240      	negs	r0, r0
 800117a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800117e:	4770      	bx	lr
 8001180:	4252      	negs	r2, r2
 8001182:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001186:	f000 f809 	bl	800119c <__udivmoddi4>
 800118a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800118e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001192:	b004      	add	sp, #16
 8001194:	4252      	negs	r2, r2
 8001196:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800119a:	4770      	bx	lr

0800119c <__udivmoddi4>:
 800119c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011a0:	9d08      	ldr	r5, [sp, #32]
 80011a2:	468e      	mov	lr, r1
 80011a4:	4604      	mov	r4, r0
 80011a6:	4688      	mov	r8, r1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d14a      	bne.n	8001242 <__udivmoddi4+0xa6>
 80011ac:	428a      	cmp	r2, r1
 80011ae:	4617      	mov	r7, r2
 80011b0:	d962      	bls.n	8001278 <__udivmoddi4+0xdc>
 80011b2:	fab2 f682 	clz	r6, r2
 80011b6:	b14e      	cbz	r6, 80011cc <__udivmoddi4+0x30>
 80011b8:	f1c6 0320 	rsb	r3, r6, #32
 80011bc:	fa01 f806 	lsl.w	r8, r1, r6
 80011c0:	fa20 f303 	lsr.w	r3, r0, r3
 80011c4:	40b7      	lsls	r7, r6
 80011c6:	ea43 0808 	orr.w	r8, r3, r8
 80011ca:	40b4      	lsls	r4, r6
 80011cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011d0:	fbb8 f1fe 	udiv	r1, r8, lr
 80011d4:	fa1f fc87 	uxth.w	ip, r7
 80011d8:	fb0e 8811 	mls	r8, lr, r1, r8
 80011dc:	fb01 f20c 	mul.w	r2, r1, ip
 80011e0:	0c23      	lsrs	r3, r4, #16
 80011e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d909      	bls.n	80011fe <__udivmoddi4+0x62>
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	f101 30ff 	add.w	r0, r1, #4294967295
 80011f0:	f080 80eb 	bcs.w	80013ca <__udivmoddi4+0x22e>
 80011f4:	429a      	cmp	r2, r3
 80011f6:	f240 80e8 	bls.w	80013ca <__udivmoddi4+0x22e>
 80011fa:	3902      	subs	r1, #2
 80011fc:	443b      	add	r3, r7
 80011fe:	1a9a      	subs	r2, r3, r2
 8001200:	fbb2 f0fe 	udiv	r0, r2, lr
 8001204:	fb0e 2210 	mls	r2, lr, r0, r2
 8001208:	fb00 fc0c 	mul.w	ip, r0, ip
 800120c:	b2a3      	uxth	r3, r4
 800120e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001212:	459c      	cmp	ip, r3
 8001214:	d909      	bls.n	800122a <__udivmoddi4+0x8e>
 8001216:	18fb      	adds	r3, r7, r3
 8001218:	f100 32ff 	add.w	r2, r0, #4294967295
 800121c:	f080 80d7 	bcs.w	80013ce <__udivmoddi4+0x232>
 8001220:	459c      	cmp	ip, r3
 8001222:	f240 80d4 	bls.w	80013ce <__udivmoddi4+0x232>
 8001226:	443b      	add	r3, r7
 8001228:	3802      	subs	r0, #2
 800122a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800122e:	2100      	movs	r1, #0
 8001230:	eba3 030c 	sub.w	r3, r3, ip
 8001234:	b11d      	cbz	r5, 800123e <__udivmoddi4+0xa2>
 8001236:	2200      	movs	r2, #0
 8001238:	40f3      	lsrs	r3, r6
 800123a:	e9c5 3200 	strd	r3, r2, [r5]
 800123e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001242:	428b      	cmp	r3, r1
 8001244:	d905      	bls.n	8001252 <__udivmoddi4+0xb6>
 8001246:	b10d      	cbz	r5, 800124c <__udivmoddi4+0xb0>
 8001248:	e9c5 0100 	strd	r0, r1, [r5]
 800124c:	2100      	movs	r1, #0
 800124e:	4608      	mov	r0, r1
 8001250:	e7f5      	b.n	800123e <__udivmoddi4+0xa2>
 8001252:	fab3 f183 	clz	r1, r3
 8001256:	2900      	cmp	r1, #0
 8001258:	d146      	bne.n	80012e8 <__udivmoddi4+0x14c>
 800125a:	4573      	cmp	r3, lr
 800125c:	d302      	bcc.n	8001264 <__udivmoddi4+0xc8>
 800125e:	4282      	cmp	r2, r0
 8001260:	f200 8108 	bhi.w	8001474 <__udivmoddi4+0x2d8>
 8001264:	1a84      	subs	r4, r0, r2
 8001266:	eb6e 0203 	sbc.w	r2, lr, r3
 800126a:	2001      	movs	r0, #1
 800126c:	4690      	mov	r8, r2
 800126e:	2d00      	cmp	r5, #0
 8001270:	d0e5      	beq.n	800123e <__udivmoddi4+0xa2>
 8001272:	e9c5 4800 	strd	r4, r8, [r5]
 8001276:	e7e2      	b.n	800123e <__udivmoddi4+0xa2>
 8001278:	2a00      	cmp	r2, #0
 800127a:	f000 8091 	beq.w	80013a0 <__udivmoddi4+0x204>
 800127e:	fab2 f682 	clz	r6, r2
 8001282:	2e00      	cmp	r6, #0
 8001284:	f040 80a5 	bne.w	80013d2 <__udivmoddi4+0x236>
 8001288:	1a8a      	subs	r2, r1, r2
 800128a:	2101      	movs	r1, #1
 800128c:	0c03      	lsrs	r3, r0, #16
 800128e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001292:	b280      	uxth	r0, r0
 8001294:	b2bc      	uxth	r4, r7
 8001296:	fbb2 fcfe 	udiv	ip, r2, lr
 800129a:	fb0e 221c 	mls	r2, lr, ip, r2
 800129e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012a2:	fb04 f20c 	mul.w	r2, r4, ip
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d907      	bls.n	80012ba <__udivmoddi4+0x11e>
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	f10c 38ff 	add.w	r8, ip, #4294967295
 80012b0:	d202      	bcs.n	80012b8 <__udivmoddi4+0x11c>
 80012b2:	429a      	cmp	r2, r3
 80012b4:	f200 80e3 	bhi.w	800147e <__udivmoddi4+0x2e2>
 80012b8:	46c4      	mov	ip, r8
 80012ba:	1a9b      	subs	r3, r3, r2
 80012bc:	fbb3 f2fe 	udiv	r2, r3, lr
 80012c0:	fb0e 3312 	mls	r3, lr, r2, r3
 80012c4:	fb02 f404 	mul.w	r4, r2, r4
 80012c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80012cc:	429c      	cmp	r4, r3
 80012ce:	d907      	bls.n	80012e0 <__udivmoddi4+0x144>
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	f102 30ff 	add.w	r0, r2, #4294967295
 80012d6:	d202      	bcs.n	80012de <__udivmoddi4+0x142>
 80012d8:	429c      	cmp	r4, r3
 80012da:	f200 80cd 	bhi.w	8001478 <__udivmoddi4+0x2dc>
 80012de:	4602      	mov	r2, r0
 80012e0:	1b1b      	subs	r3, r3, r4
 80012e2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80012e6:	e7a5      	b.n	8001234 <__udivmoddi4+0x98>
 80012e8:	f1c1 0620 	rsb	r6, r1, #32
 80012ec:	408b      	lsls	r3, r1
 80012ee:	fa22 f706 	lsr.w	r7, r2, r6
 80012f2:	431f      	orrs	r7, r3
 80012f4:	fa2e fa06 	lsr.w	sl, lr, r6
 80012f8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80012fc:	fbba f8f9 	udiv	r8, sl, r9
 8001300:	fa0e fe01 	lsl.w	lr, lr, r1
 8001304:	fa20 f306 	lsr.w	r3, r0, r6
 8001308:	fb09 aa18 	mls	sl, r9, r8, sl
 800130c:	fa1f fc87 	uxth.w	ip, r7
 8001310:	ea43 030e 	orr.w	r3, r3, lr
 8001314:	fa00 fe01 	lsl.w	lr, r0, r1
 8001318:	fb08 f00c 	mul.w	r0, r8, ip
 800131c:	0c1c      	lsrs	r4, r3, #16
 800131e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001322:	42a0      	cmp	r0, r4
 8001324:	fa02 f201 	lsl.w	r2, r2, r1
 8001328:	d90a      	bls.n	8001340 <__udivmoddi4+0x1a4>
 800132a:	193c      	adds	r4, r7, r4
 800132c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001330:	f080 809e 	bcs.w	8001470 <__udivmoddi4+0x2d4>
 8001334:	42a0      	cmp	r0, r4
 8001336:	f240 809b 	bls.w	8001470 <__udivmoddi4+0x2d4>
 800133a:	f1a8 0802 	sub.w	r8, r8, #2
 800133e:	443c      	add	r4, r7
 8001340:	1a24      	subs	r4, r4, r0
 8001342:	b298      	uxth	r0, r3
 8001344:	fbb4 f3f9 	udiv	r3, r4, r9
 8001348:	fb09 4413 	mls	r4, r9, r3, r4
 800134c:	fb03 fc0c 	mul.w	ip, r3, ip
 8001350:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001354:	45a4      	cmp	ip, r4
 8001356:	d909      	bls.n	800136c <__udivmoddi4+0x1d0>
 8001358:	193c      	adds	r4, r7, r4
 800135a:	f103 30ff 	add.w	r0, r3, #4294967295
 800135e:	f080 8085 	bcs.w	800146c <__udivmoddi4+0x2d0>
 8001362:	45a4      	cmp	ip, r4
 8001364:	f240 8082 	bls.w	800146c <__udivmoddi4+0x2d0>
 8001368:	3b02      	subs	r3, #2
 800136a:	443c      	add	r4, r7
 800136c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001370:	eba4 040c 	sub.w	r4, r4, ip
 8001374:	fba0 8c02 	umull	r8, ip, r0, r2
 8001378:	4564      	cmp	r4, ip
 800137a:	4643      	mov	r3, r8
 800137c:	46e1      	mov	r9, ip
 800137e:	d364      	bcc.n	800144a <__udivmoddi4+0x2ae>
 8001380:	d061      	beq.n	8001446 <__udivmoddi4+0x2aa>
 8001382:	b15d      	cbz	r5, 800139c <__udivmoddi4+0x200>
 8001384:	ebbe 0203 	subs.w	r2, lr, r3
 8001388:	eb64 0409 	sbc.w	r4, r4, r9
 800138c:	fa04 f606 	lsl.w	r6, r4, r6
 8001390:	fa22 f301 	lsr.w	r3, r2, r1
 8001394:	431e      	orrs	r6, r3
 8001396:	40cc      	lsrs	r4, r1
 8001398:	e9c5 6400 	strd	r6, r4, [r5]
 800139c:	2100      	movs	r1, #0
 800139e:	e74e      	b.n	800123e <__udivmoddi4+0xa2>
 80013a0:	fbb1 fcf2 	udiv	ip, r1, r2
 80013a4:	0c01      	lsrs	r1, r0, #16
 80013a6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80013aa:	b280      	uxth	r0, r0
 80013ac:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80013b0:	463b      	mov	r3, r7
 80013b2:	fbb1 f1f7 	udiv	r1, r1, r7
 80013b6:	4638      	mov	r0, r7
 80013b8:	463c      	mov	r4, r7
 80013ba:	46b8      	mov	r8, r7
 80013bc:	46be      	mov	lr, r7
 80013be:	2620      	movs	r6, #32
 80013c0:	eba2 0208 	sub.w	r2, r2, r8
 80013c4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013c8:	e765      	b.n	8001296 <__udivmoddi4+0xfa>
 80013ca:	4601      	mov	r1, r0
 80013cc:	e717      	b.n	80011fe <__udivmoddi4+0x62>
 80013ce:	4610      	mov	r0, r2
 80013d0:	e72b      	b.n	800122a <__udivmoddi4+0x8e>
 80013d2:	f1c6 0120 	rsb	r1, r6, #32
 80013d6:	fa2e fc01 	lsr.w	ip, lr, r1
 80013da:	40b7      	lsls	r7, r6
 80013dc:	fa0e fe06 	lsl.w	lr, lr, r6
 80013e0:	fa20 f101 	lsr.w	r1, r0, r1
 80013e4:	ea41 010e 	orr.w	r1, r1, lr
 80013e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013ec:	fbbc f8fe 	udiv	r8, ip, lr
 80013f0:	b2bc      	uxth	r4, r7
 80013f2:	fb0e cc18 	mls	ip, lr, r8, ip
 80013f6:	fb08 f904 	mul.w	r9, r8, r4
 80013fa:	0c0a      	lsrs	r2, r1, #16
 80013fc:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001400:	40b0      	lsls	r0, r6
 8001402:	4591      	cmp	r9, r2
 8001404:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001408:	b280      	uxth	r0, r0
 800140a:	d93e      	bls.n	800148a <__udivmoddi4+0x2ee>
 800140c:	18ba      	adds	r2, r7, r2
 800140e:	f108 3cff 	add.w	ip, r8, #4294967295
 8001412:	d201      	bcs.n	8001418 <__udivmoddi4+0x27c>
 8001414:	4591      	cmp	r9, r2
 8001416:	d81f      	bhi.n	8001458 <__udivmoddi4+0x2bc>
 8001418:	eba2 0209 	sub.w	r2, r2, r9
 800141c:	fbb2 f9fe 	udiv	r9, r2, lr
 8001420:	fb09 f804 	mul.w	r8, r9, r4
 8001424:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001428:	b28a      	uxth	r2, r1
 800142a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800142e:	4542      	cmp	r2, r8
 8001430:	d229      	bcs.n	8001486 <__udivmoddi4+0x2ea>
 8001432:	18ba      	adds	r2, r7, r2
 8001434:	f109 31ff 	add.w	r1, r9, #4294967295
 8001438:	d2c2      	bcs.n	80013c0 <__udivmoddi4+0x224>
 800143a:	4542      	cmp	r2, r8
 800143c:	d2c0      	bcs.n	80013c0 <__udivmoddi4+0x224>
 800143e:	f1a9 0102 	sub.w	r1, r9, #2
 8001442:	443a      	add	r2, r7
 8001444:	e7bc      	b.n	80013c0 <__udivmoddi4+0x224>
 8001446:	45c6      	cmp	lr, r8
 8001448:	d29b      	bcs.n	8001382 <__udivmoddi4+0x1e6>
 800144a:	ebb8 0302 	subs.w	r3, r8, r2
 800144e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001452:	3801      	subs	r0, #1
 8001454:	46e1      	mov	r9, ip
 8001456:	e794      	b.n	8001382 <__udivmoddi4+0x1e6>
 8001458:	eba7 0909 	sub.w	r9, r7, r9
 800145c:	444a      	add	r2, r9
 800145e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001462:	f1a8 0c02 	sub.w	ip, r8, #2
 8001466:	fb09 f804 	mul.w	r8, r9, r4
 800146a:	e7db      	b.n	8001424 <__udivmoddi4+0x288>
 800146c:	4603      	mov	r3, r0
 800146e:	e77d      	b.n	800136c <__udivmoddi4+0x1d0>
 8001470:	46d0      	mov	r8, sl
 8001472:	e765      	b.n	8001340 <__udivmoddi4+0x1a4>
 8001474:	4608      	mov	r0, r1
 8001476:	e6fa      	b.n	800126e <__udivmoddi4+0xd2>
 8001478:	443b      	add	r3, r7
 800147a:	3a02      	subs	r2, #2
 800147c:	e730      	b.n	80012e0 <__udivmoddi4+0x144>
 800147e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001482:	443b      	add	r3, r7
 8001484:	e719      	b.n	80012ba <__udivmoddi4+0x11e>
 8001486:	4649      	mov	r1, r9
 8001488:	e79a      	b.n	80013c0 <__udivmoddi4+0x224>
 800148a:	eba2 0209 	sub.w	r2, r2, r9
 800148e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001492:	46c4      	mov	ip, r8
 8001494:	fb09 f804 	mul.w	r8, r9, r4
 8001498:	e7c4      	b.n	8001424 <__udivmoddi4+0x288>
 800149a:	bf00      	nop

0800149c <__aeabi_idiv0>:
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop

080014a0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	@ 0x30
 80014a4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	2319      	movs	r3, #25
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	463b      	mov	r3, r7
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2301      	movs	r3, #1
 80014b6:	2288      	movs	r2, #136	@ 0x88
 80014b8:	21ec      	movs	r1, #236	@ 0xec
 80014ba:	485f      	ldr	r0, [pc, #380]	@ (8001638 <TrimRead+0x198>)
 80014bc:	f004 f860 	bl	8005580 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80014c0:	463b      	mov	r3, r7
 80014c2:	3319      	adds	r3, #25
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	9202      	str	r2, [sp, #8]
 80014ca:	2207      	movs	r2, #7
 80014cc:	9201      	str	r2, [sp, #4]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2301      	movs	r3, #1
 80014d2:	22e1      	movs	r2, #225	@ 0xe1
 80014d4:	21ec      	movs	r1, #236	@ 0xec
 80014d6:	4858      	ldr	r0, [pc, #352]	@ (8001638 <TrimRead+0x198>)
 80014d8:	f004 f852 	bl	8005580 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	b21b      	sxth	r3, r3
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	783b      	ldrb	r3, [r7, #0]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b53      	ldr	r3, [pc, #332]	@ (800163c <TrimRead+0x19c>)
 80014f0:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	78bb      	ldrb	r3, [r7, #2]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b21a      	sxth	r2, r3
 8001502:	4b4f      	ldr	r3, [pc, #316]	@ (8001640 <TrimRead+0x1a0>)
 8001504:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001506:	797b      	ldrb	r3, [r7, #5]
 8001508:	b21b      	sxth	r3, r3
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	793b      	ldrb	r3, [r7, #4]
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21a      	sxth	r2, r3
 8001516:	4b4b      	ldr	r3, [pc, #300]	@ (8001644 <TrimRead+0x1a4>)
 8001518:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	b21b      	sxth	r3, r3
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	b21a      	sxth	r2, r3
 8001522:	797b      	ldrb	r3, [r7, #5]
 8001524:	b21b      	sxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b21b      	sxth	r3, r3
 800152a:	b29a      	uxth	r2, r3
 800152c:	4b46      	ldr	r3, [pc, #280]	@ (8001648 <TrimRead+0x1a8>)
 800152e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001530:	7a7b      	ldrb	r3, [r7, #9]
 8001532:	b21b      	sxth	r3, r3
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b21a      	sxth	r2, r3
 8001538:	79bb      	ldrb	r3, [r7, #6]
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b21a      	sxth	r2, r3
 8001540:	4b42      	ldr	r3, [pc, #264]	@ (800164c <TrimRead+0x1ac>)
 8001542:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	b21b      	sxth	r3, r3
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b21a      	sxth	r2, r3
 800154c:	7abb      	ldrb	r3, [r7, #10]
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b3e      	ldr	r3, [pc, #248]	@ (8001650 <TrimRead+0x1b0>)
 8001556:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001558:	7b7b      	ldrb	r3, [r7, #13]
 800155a:	b21b      	sxth	r3, r3
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b21a      	sxth	r2, r3
 8001560:	7b3b      	ldrb	r3, [r7, #12]
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21a      	sxth	r2, r3
 8001568:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <TrimRead+0x1b4>)
 800156a:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	b21b      	sxth	r3, r3
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	7bbb      	ldrb	r3, [r7, #14]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b21a      	sxth	r2, r3
 800157c:	4b36      	ldr	r3, [pc, #216]	@ (8001658 <TrimRead+0x1b8>)
 800157e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001580:	7c7b      	ldrb	r3, [r7, #17]
 8001582:	b21b      	sxth	r3, r3
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b21a      	sxth	r2, r3
 8001588:	7c3b      	ldrb	r3, [r7, #16]
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21a      	sxth	r2, r3
 8001590:	4b32      	ldr	r3, [pc, #200]	@ (800165c <TrimRead+0x1bc>)
 8001592:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001594:	7cfb      	ldrb	r3, [r7, #19]
 8001596:	b21b      	sxth	r3, r3
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b21a      	sxth	r2, r3
 800159c:	7cbb      	ldrb	r3, [r7, #18]
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <TrimRead+0x1c0>)
 80015a6:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80015a8:	7d7b      	ldrb	r3, [r7, #21]
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	7d3b      	ldrb	r3, [r7, #20]
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001664 <TrimRead+0x1c4>)
 80015ba:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	7dbb      	ldrb	r3, [r7, #22]
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	4b26      	ldr	r3, [pc, #152]	@ (8001668 <TrimRead+0x1c8>)
 80015ce:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80015d0:	7e3b      	ldrb	r3, [r7, #24]
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b25      	ldr	r3, [pc, #148]	@ (800166c <TrimRead+0x1cc>)
 80015d6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80015d8:	7ebb      	ldrb	r3, [r7, #26]
 80015da:	b21b      	sxth	r3, r3
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21a      	sxth	r2, r3
 80015e0:	7e7b      	ldrb	r3, [r7, #25]
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <TrimRead+0x1d0>)
 80015ea:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80015ec:	7efb      	ldrb	r3, [r7, #27]
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <TrimRead+0x1d4>)
 80015f2:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80015f4:	7f3b      	ldrb	r3, [r7, #28]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	7f7b      	ldrb	r3, [r7, #29]
 80015fe:	b21b      	sxth	r3, r3
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	b21b      	sxth	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b21a      	sxth	r2, r3
 800160a:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <TrimRead+0x1d8>)
 800160c:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800160e:	7fbb      	ldrb	r3, [r7, #30]
 8001610:	b21b      	sxth	r3, r3
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	b21a      	sxth	r2, r3
 8001616:	7f7b      	ldrb	r3, [r7, #29]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	b2db      	uxtb	r3, r3
 800161c:	b21b      	sxth	r3, r3
 800161e:	4313      	orrs	r3, r2
 8001620:	b21a      	sxth	r2, r3
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <TrimRead+0x1dc>)
 8001624:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001626:	7ffb      	ldrb	r3, [r7, #31]
 8001628:	b21a      	sxth	r2, r3
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <TrimRead+0x1e0>)
 800162c:	801a      	strh	r2, [r3, #0]
}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000228 	.word	0x20000228
 800163c:	20000200 	.word	0x20000200
 8001640:	20000208 	.word	0x20000208
 8001644:	2000020a 	.word	0x2000020a
 8001648:	20000202 	.word	0x20000202
 800164c:	2000020c 	.word	0x2000020c
 8001650:	2000020e 	.word	0x2000020e
 8001654:	20000210 	.word	0x20000210
 8001658:	20000212 	.word	0x20000212
 800165c:	20000214 	.word	0x20000214
 8001660:	20000216 	.word	0x20000216
 8001664:	20000218 	.word	0x20000218
 8001668:	2000021a 	.word	0x2000021a
 800166c:	20000204 	.word	0x20000204
 8001670:	2000021c 	.word	0x2000021c
 8001674:	20000206 	.word	0x20000206
 8001678:	2000021e 	.word	0x2000021e
 800167c:	20000220 	.word	0x20000220
 8001680:	20000222 	.word	0x20000222

08001684 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b089      	sub	sp, #36	@ 0x24
 8001688:	af04      	add	r7, sp, #16
 800168a:	4604      	mov	r4, r0
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4623      	mov	r3, r4
 8001694:	71fb      	strb	r3, [r7, #7]
 8001696:	4603      	mov	r3, r0
 8001698:	71bb      	strb	r3, [r7, #6]
 800169a:	460b      	mov	r3, r1
 800169c:	717b      	strb	r3, [r7, #5]
 800169e:	4613      	mov	r3, r2
 80016a0:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80016a2:	f7ff fefd 	bl	80014a0 <TrimRead>


	uint8_t datatowrite = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80016ae:	23b6      	movs	r3, #182	@ 0xb6
 80016b0:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80016b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	2301      	movs	r3, #1
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	f107 030f 	add.w	r3, r7, #15
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	22e0      	movs	r2, #224	@ 0xe0
 80016c6:	21ec      	movs	r1, #236	@ 0xec
 80016c8:	4842      	ldr	r0, [pc, #264]	@ (80017d4 <BME280_Config+0x150>)
 80016ca:	f003 fe5f 	bl	800538c <HAL_I2C_Mem_Write>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <BME280_Config+0x56>
	{
		return -1;
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295
 80016d8:	e077      	b.n	80017ca <BME280_Config+0x146>
	}

	HAL_Delay (100);
 80016da:	2064      	movs	r0, #100	@ 0x64
 80016dc:	f003 f830 	bl	8004740 <HAL_Delay>
	// write the humidity oversampling to 0xF2



	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80016e0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80016e4:	015b      	lsls	r3, r3, #5
 80016e6:	b25a      	sxtb	r2, r3
 80016e8:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80016f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	2301      	movs	r3, #1
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	f107 030f 	add.w	r3, r7, #15
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2301      	movs	r3, #1
 800170a:	22f5      	movs	r2, #245	@ 0xf5
 800170c:	21ec      	movs	r1, #236	@ 0xec
 800170e:	4831      	ldr	r0, [pc, #196]	@ (80017d4 <BME280_Config+0x150>)
 8001710:	f003 fe3c 	bl	800538c <HAL_I2C_Mem_Write>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <BME280_Config+0x9c>
	{
		return -1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	e054      	b.n	80017ca <BME280_Config+0x146>
	}
	HAL_Delay (100);
 8001720:	2064      	movs	r0, #100	@ 0x64
 8001722:	f003 f80d 	bl	8004740 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172a:	9302      	str	r3, [sp, #8]
 800172c:	2301      	movs	r3, #1
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	f107 030e 	add.w	r3, r7, #14
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2301      	movs	r3, #1
 8001738:	22f5      	movs	r2, #245	@ 0xf5
 800173a:	21ec      	movs	r1, #236	@ 0xec
 800173c:	4825      	ldr	r0, [pc, #148]	@ (80017d4 <BME280_Config+0x150>)
 800173e:	f003 ff1f 	bl	8005580 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001742:	7bba      	ldrb	r2, [r7, #14]
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	429a      	cmp	r2, r3
 8001748:	d002      	beq.n	8001750 <BME280_Config+0xcc>
	{
		return -1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	e03c      	b.n	80017ca <BME280_Config+0x146>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	015b      	lsls	r3, r3, #5
 8001756:	b25a      	sxtb	r2, r3
 8001758:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	b25b      	sxtb	r3, r3
 8001760:	4313      	orrs	r3, r2
 8001762:	b25a      	sxtb	r2, r3
 8001764:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	b25b      	sxtb	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001774:	9302      	str	r3, [sp, #8]
 8001776:	2301      	movs	r3, #1
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	f107 030f 	add.w	r3, r7, #15
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2301      	movs	r3, #1
 8001782:	22f4      	movs	r2, #244	@ 0xf4
 8001784:	21ec      	movs	r1, #236	@ 0xec
 8001786:	4813      	ldr	r0, [pc, #76]	@ (80017d4 <BME280_Config+0x150>)
 8001788:	f003 fe00 	bl	800538c <HAL_I2C_Mem_Write>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <BME280_Config+0x114>
	{
		return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e018      	b.n	80017ca <BME280_Config+0x146>
	}
	HAL_Delay (100);
 8001798:	2064      	movs	r0, #100	@ 0x64
 800179a:	f002 ffd1 	bl	8004740 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800179e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	2301      	movs	r3, #1
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	f107 030e 	add.w	r3, r7, #14
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2301      	movs	r3, #1
 80017b0:	22f4      	movs	r2, #244	@ 0xf4
 80017b2:	21ec      	movs	r1, #236	@ 0xec
 80017b4:	4807      	ldr	r0, [pc, #28]	@ (80017d4 <BME280_Config+0x150>)
 80017b6:	f003 fee3 	bl	8005580 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80017ba:	7bba      	ldrb	r2, [r7, #14]
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d002      	beq.n	80017c8 <BME280_Config+0x144>
	{
		return -1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e000      	b.n	80017ca <BME280_Config+0x146>
	}

	return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd90      	pop	{r4, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000228 	.word	0x20000228

080017d8 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80017de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e2:	9302      	str	r3, [sp, #8]
 80017e4:	2301      	movs	r3, #1
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <BMEReadRaw+0x80>)
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2301      	movs	r3, #1
 80017ee:	22d0      	movs	r2, #208	@ 0xd0
 80017f0:	21ec      	movs	r1, #236	@ 0xec
 80017f2:	481a      	ldr	r0, [pc, #104]	@ (800185c <BMEReadRaw+0x84>)
 80017f4:	f003 fec4 	bl	8005580 <HAL_I2C_Mem_Read>

	if (chipID == 0x58)
 80017f8:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <BMEReadRaw+0x80>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b58      	cmp	r3, #88	@ 0x58
 80017fe:	d124      	bne.n	800184a <BMEReadRaw+0x72>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
 8001804:	9302      	str	r3, [sp, #8]
 8001806:	2308      	movs	r3, #8
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	463b      	mov	r3, r7
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2301      	movs	r3, #1
 8001810:	22f7      	movs	r2, #247	@ 0xf7
 8001812:	21ec      	movs	r1, #236	@ 0xec
 8001814:	4811      	ldr	r0, [pc, #68]	@ (800185c <BMEReadRaw+0x84>)
 8001816:	f003 feb3 	bl	8005580 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800181a:	783b      	ldrb	r3, [r7, #0]
 800181c:	031a      	lsls	r2, r3, #12
 800181e:	787b      	ldrb	r3, [r7, #1]
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4313      	orrs	r3, r2
 8001824:	78ba      	ldrb	r2, [r7, #2]
 8001826:	0912      	lsrs	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	4313      	orrs	r3, r2
 800182c:	4a0c      	ldr	r2, [pc, #48]	@ (8001860 <BMEReadRaw+0x88>)
 800182e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	031a      	lsls	r2, r3, #12
 8001834:	793b      	ldrb	r3, [r7, #4]
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	4313      	orrs	r3, r2
 800183a:	797a      	ldrb	r2, [r7, #5]
 800183c:	0912      	lsrs	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	4313      	orrs	r3, r2
 8001842:	4a08      	ldr	r2, [pc, #32]	@ (8001864 <BMEReadRaw+0x8c>)
 8001844:	6013      	str	r3, [r2, #0]


		return 0;
 8001846:	2300      	movs	r3, #0
 8001848:	e001      	b.n	800184e <BMEReadRaw+0x76>
	}

	else return -1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200001f4 	.word	0x200001f4
 800185c:	20000228 	.word	0x20000228
 8001860:	200001fc 	.word	0x200001fc
 8001864:	200001f8 	.word	0x200001f8

08001868 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	10da      	asrs	r2, r3, #3
 8001874:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <BME280_compensate_T_int32+0x70>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	4a17      	ldr	r2, [pc, #92]	@ (80018dc <BME280_compensate_T_int32+0x74>)
 800187e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001882:	fb02 f303 	mul.w	r3, r2, r3
 8001886:	12db      	asrs	r3, r3, #11
 8001888:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	111b      	asrs	r3, r3, #4
 800188e:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <BME280_compensate_T_int32+0x70>)
 8001890:	8812      	ldrh	r2, [r2, #0]
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	1112      	asrs	r2, r2, #4
 8001898:	490f      	ldr	r1, [pc, #60]	@ (80018d8 <BME280_compensate_T_int32+0x70>)
 800189a:	8809      	ldrh	r1, [r1, #0]
 800189c:	1a52      	subs	r2, r2, r1
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	131b      	asrs	r3, r3, #12
 80018a4:	4a0e      	ldr	r2, [pc, #56]	@ (80018e0 <BME280_compensate_T_int32+0x78>)
 80018a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	139b      	asrs	r3, r3, #14
 80018b0:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <BME280_compensate_T_int32+0x7c>)
 80018ba:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80018bc:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <BME280_compensate_T_int32+0x7c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	3380      	adds	r3, #128	@ 0x80
 80018c8:	121b      	asrs	r3, r3, #8
 80018ca:	60fb      	str	r3, [r7, #12]
	return T;
 80018cc:	68fb      	ldr	r3, [r7, #12]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000200 	.word	0x20000200
 80018dc:	20000208 	.word	0x20000208
 80018e0:	2000020a 	.word	0x2000020a
 80018e4:	20000224 	.word	0x20000224

080018e8 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 80018e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018ec:	b0ca      	sub	sp, #296	@ 0x128
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80018f4:	4bae      	ldr	r3, [pc, #696]	@ (8001bb0 <BME280_compensate_P_int64+0x2c8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	17da      	asrs	r2, r3, #31
 80018fa:	461c      	mov	r4, r3
 80018fc:	4615      	mov	r5, r2
 80018fe:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001902:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001906:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800190a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800190e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001912:	fb03 f102 	mul.w	r1, r3, r2
 8001916:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800191a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800191e:	fb02 f303 	mul.w	r3, r2, r3
 8001922:	18ca      	adds	r2, r1, r3
 8001924:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001928:	fba3 8903 	umull	r8, r9, r3, r3
 800192c:	eb02 0309 	add.w	r3, r2, r9
 8001930:	4699      	mov	r9, r3
 8001932:	4ba0      	ldr	r3, [pc, #640]	@ (8001bb4 <BME280_compensate_P_int64+0x2cc>)
 8001934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001938:	b21b      	sxth	r3, r3
 800193a:	17da      	asrs	r2, r3, #31
 800193c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001940:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001944:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001948:	4603      	mov	r3, r0
 800194a:	fb03 f209 	mul.w	r2, r3, r9
 800194e:	460b      	mov	r3, r1
 8001950:	fb08 f303 	mul.w	r3, r8, r3
 8001954:	4413      	add	r3, r2
 8001956:	4602      	mov	r2, r0
 8001958:	fba8 2102 	umull	r2, r1, r8, r2
 800195c:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001960:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001964:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001968:	4413      	add	r3, r2
 800196a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800196e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001972:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001976:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 800197a:	4b8f      	ldr	r3, [pc, #572]	@ (8001bb8 <BME280_compensate_P_int64+0x2d0>)
 800197c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001980:	b21b      	sxth	r3, r3
 8001982:	17da      	asrs	r2, r3, #31
 8001984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001988:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800198c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001990:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001994:	462a      	mov	r2, r5
 8001996:	fb02 f203 	mul.w	r2, r2, r3
 800199a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800199e:	4621      	mov	r1, r4
 80019a0:	fb01 f303 	mul.w	r3, r1, r3
 80019a4:	441a      	add	r2, r3
 80019a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80019aa:	4621      	mov	r1, r4
 80019ac:	fba3 3101 	umull	r3, r1, r3, r1
 80019b0:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80019b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80019b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80019bc:	18d3      	adds	r3, r2, r3
 80019be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80019ce:	462b      	mov	r3, r5
 80019d0:	0459      	lsls	r1, r3, #17
 80019d2:	4622      	mov	r2, r4
 80019d4:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80019d8:	4623      	mov	r3, r4
 80019da:	0458      	lsls	r0, r3, #17
 80019dc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80019e0:	1814      	adds	r4, r2, r0
 80019e2:	643c      	str	r4, [r7, #64]	@ 0x40
 80019e4:	414b      	adcs	r3, r1
 80019e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019e8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80019ec:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80019f0:	4b72      	ldr	r3, [pc, #456]	@ (8001bbc <BME280_compensate_P_int64+0x2d4>)
 80019f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	17da      	asrs	r2, r3, #31
 80019fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80019fe:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a0e:	00d9      	lsls	r1, r3, #3
 8001a10:	2000      	movs	r0, #0
 8001a12:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a16:	1814      	adds	r4, r2, r0
 8001a18:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001a1a:	414b      	adcs	r3, r1
 8001a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a1e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a22:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001a26:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001a2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a2e:	fb03 f102 	mul.w	r1, r3, r2
 8001a32:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001a36:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	18ca      	adds	r2, r1, r3
 8001a40:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a44:	fba3 3103 	umull	r3, r1, r3, r3
 8001a48:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a54:	18d3      	adds	r3, r2, r3
 8001a56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001a5a:	4b59      	ldr	r3, [pc, #356]	@ (8001bc0 <BME280_compensate_P_int64+0x2d8>)
 8001a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	17da      	asrs	r2, r3, #31
 8001a64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001a68:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001a6c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8001a70:	4622      	mov	r2, r4
 8001a72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001a76:	4641      	mov	r1, r8
 8001a78:	fb01 f202 	mul.w	r2, r1, r2
 8001a7c:	464d      	mov	r5, r9
 8001a7e:	4618      	mov	r0, r3
 8001a80:	4621      	mov	r1, r4
 8001a82:	4603      	mov	r3, r0
 8001a84:	fb03 f305 	mul.w	r3, r3, r5
 8001a88:	4413      	add	r3, r2
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	4641      	mov	r1, r8
 8001a8e:	fba2 2101 	umull	r2, r1, r2, r1
 8001a92:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8001a96:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001a9a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	0a18      	lsrs	r0, r3, #8
 8001ab4:	462a      	mov	r2, r5
 8001ab6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001aba:	462b      	mov	r3, r5
 8001abc:	1219      	asrs	r1, r3, #8
 8001abe:	4b41      	ldr	r3, [pc, #260]	@ (8001bc4 <BME280_compensate_P_int64+0x2dc>)
 8001ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	17da      	asrs	r2, r3, #31
 8001ac8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001acc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ad0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ad4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001ad8:	464a      	mov	r2, r9
 8001ada:	fb02 f203 	mul.w	r2, r2, r3
 8001ade:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001ae2:	4644      	mov	r4, r8
 8001ae4:	fb04 f303 	mul.w	r3, r4, r3
 8001ae8:	441a      	add	r2, r3
 8001aea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001aee:	4644      	mov	r4, r8
 8001af0:	fba3 3404 	umull	r3, r4, r3, r4
 8001af4:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001af8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001afc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001b00:	18d3      	adds	r3, r2, r3
 8001b02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001b12:	464c      	mov	r4, r9
 8001b14:	0323      	lsls	r3, r4, #12
 8001b16:	46c4      	mov	ip, r8
 8001b18:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001b1c:	4644      	mov	r4, r8
 8001b1e:	0322      	lsls	r2, r4, #12
 8001b20:	1884      	adds	r4, r0, r2
 8001b22:	633c      	str	r4, [r7, #48]	@ 0x30
 8001b24:	eb41 0303 	adc.w	r3, r1, r3
 8001b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b2a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b2e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001b32:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b36:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b3a:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001b3e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001b42:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <BME280_compensate_P_int64+0x2e0>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b4e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b52:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001b56:	4622      	mov	r2, r4
 8001b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001b5c:	4641      	mov	r1, r8
 8001b5e:	fb01 f202 	mul.w	r2, r1, r2
 8001b62:	464d      	mov	r5, r9
 8001b64:	4618      	mov	r0, r3
 8001b66:	4621      	mov	r1, r4
 8001b68:	4603      	mov	r3, r0
 8001b6a:	fb03 f305 	mul.w	r3, r3, r5
 8001b6e:	4413      	add	r3, r2
 8001b70:	4602      	mov	r2, r0
 8001b72:	4641      	mov	r1, r8
 8001b74:	fba2 2101 	umull	r2, r1, r2, r1
 8001b78:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001b7c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001b80:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001b84:	4413      	add	r3, r2
 8001b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001b96:	4629      	mov	r1, r5
 8001b98:	104a      	asrs	r2, r1, #1
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	17cb      	asrs	r3, r1, #31
 8001b9e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001ba2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	d110      	bne.n	8001bcc <BME280_compensate_P_int64+0x2e4>
	{
		return 0; // avoid exception caused by division by zero
 8001baa:	2300      	movs	r3, #0
 8001bac:	e152      	b.n	8001e54 <BME280_compensate_P_int64+0x56c>
 8001bae:	bf00      	nop
 8001bb0:	20000224 	.word	0x20000224
 8001bb4:	20000214 	.word	0x20000214
 8001bb8:	20000212 	.word	0x20000212
 8001bbc:	20000210 	.word	0x20000210
 8001bc0:	2000020e 	.word	0x2000020e
 8001bc4:	2000020c 	.word	0x2000020c
 8001bc8:	20000202 	.word	0x20000202
	}
	p = 1048576-adc_P;
 8001bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001bd0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001bd4:	17da      	asrs	r2, r3, #31
 8001bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bda:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001bde:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001be2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001be6:	105b      	asrs	r3, r3, #1
 8001be8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001bec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001bf0:	07db      	lsls	r3, r3, #31
 8001bf2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bf6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001bfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001bfe:	4604      	mov	r4, r0
 8001c00:	1aa4      	subs	r4, r4, r2
 8001c02:	67bc      	str	r4, [r7, #120]	@ 0x78
 8001c04:	eb61 0303 	sbc.w	r3, r1, r3
 8001c08:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c0a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001c0e:	4622      	mov	r2, r4
 8001c10:	462b      	mov	r3, r5
 8001c12:	1891      	adds	r1, r2, r2
 8001c14:	6239      	str	r1, [r7, #32]
 8001c16:	415b      	adcs	r3, r3
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c1e:	4621      	mov	r1, r4
 8001c20:	1851      	adds	r1, r2, r1
 8001c22:	61b9      	str	r1, [r7, #24]
 8001c24:	4629      	mov	r1, r5
 8001c26:	414b      	adcs	r3, r1
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c36:	4649      	mov	r1, r9
 8001c38:	018b      	lsls	r3, r1, #6
 8001c3a:	4641      	mov	r1, r8
 8001c3c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c40:	4641      	mov	r1, r8
 8001c42:	018a      	lsls	r2, r1, #6
 8001c44:	4641      	mov	r1, r8
 8001c46:	1889      	adds	r1, r1, r2
 8001c48:	6139      	str	r1, [r7, #16]
 8001c4a:	4649      	mov	r1, r9
 8001c4c:	eb43 0101 	adc.w	r1, r3, r1
 8001c50:	6179      	str	r1, [r7, #20]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c5e:	4649      	mov	r1, r9
 8001c60:	008b      	lsls	r3, r1, #2
 8001c62:	46c4      	mov	ip, r8
 8001c64:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c68:	4641      	mov	r1, r8
 8001c6a:	008a      	lsls	r2, r1, #2
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4603      	mov	r3, r0
 8001c72:	4622      	mov	r2, r4
 8001c74:	189b      	adds	r3, r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	462a      	mov	r2, r5
 8001c7c:	eb42 0303 	adc.w	r3, r2, r3
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c8e:	4649      	mov	r1, r9
 8001c90:	008b      	lsls	r3, r1, #2
 8001c92:	46c4      	mov	ip, r8
 8001c94:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c98:	4641      	mov	r1, r8
 8001c9a:	008a      	lsls	r2, r1, #2
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	189b      	adds	r3, r3, r2
 8001ca6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ca8:	462b      	mov	r3, r5
 8001caa:	460a      	mov	r2, r1
 8001cac:	eb42 0303 	adc.w	r3, r2, r3
 8001cb0:	677b      	str	r3, [r7, #116]	@ 0x74
 8001cb2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001cb6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001cba:	f7ff fa1f 	bl	80010fc <__aeabi_ldivmod>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001cc6:	4b66      	ldr	r3, [pc, #408]	@ (8001e60 <BME280_compensate_P_int64+0x578>)
 8001cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	17da      	asrs	r2, r3, #31
 8001cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001cd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001cd4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001cd8:	f04f 0000 	mov.w	r0, #0
 8001cdc:	f04f 0100 	mov.w	r1, #0
 8001ce0:	0b50      	lsrs	r0, r2, #13
 8001ce2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ce6:	1359      	asrs	r1, r3, #13
 8001ce8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001cec:	462b      	mov	r3, r5
 8001cee:	fb00 f203 	mul.w	r2, r0, r3
 8001cf2:	4623      	mov	r3, r4
 8001cf4:	fb03 f301 	mul.w	r3, r3, r1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	fba2 2100 	umull	r2, r1, r2, r0
 8001d00:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001d04:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001d12:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001d16:	f04f 0000 	mov.w	r0, #0
 8001d1a:	f04f 0100 	mov.w	r1, #0
 8001d1e:	0b50      	lsrs	r0, r2, #13
 8001d20:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d24:	1359      	asrs	r1, r3, #13
 8001d26:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001d2a:	462b      	mov	r3, r5
 8001d2c:	fb00 f203 	mul.w	r2, r0, r3
 8001d30:	4623      	mov	r3, r4
 8001d32:	fb03 f301 	mul.w	r3, r3, r1
 8001d36:	4413      	add	r3, r2
 8001d38:	4622      	mov	r2, r4
 8001d3a:	fba2 2100 	umull	r2, r1, r2, r0
 8001d3e:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001d42:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001d46:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	0e4a      	lsrs	r2, r1, #25
 8001d60:	4620      	mov	r0, r4
 8001d62:	4629      	mov	r1, r5
 8001d64:	460c      	mov	r4, r1
 8001d66:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001d6a:	164b      	asrs	r3, r1, #25
 8001d6c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001d70:	4b3c      	ldr	r3, [pc, #240]	@ (8001e64 <BME280_compensate_P_int64+0x57c>)
 8001d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	17da      	asrs	r2, r3, #31
 8001d7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d7c:	667a      	str	r2, [r7, #100]	@ 0x64
 8001d7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d82:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001d86:	462a      	mov	r2, r5
 8001d88:	fb02 f203 	mul.w	r2, r2, r3
 8001d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d90:	4621      	mov	r1, r4
 8001d92:	fb01 f303 	mul.w	r3, r1, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	fba2 2101 	umull	r2, r1, r2, r1
 8001da2:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001da6:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001daa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001dae:	4413      	add	r3, r2
 8001db0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	0cca      	lsrs	r2, r1, #19
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	460c      	mov	r4, r1
 8001dca:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001dce:	14cb      	asrs	r3, r1, #19
 8001dd0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001dd4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001dd8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001ddc:	1884      	adds	r4, r0, r2
 8001dde:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001de0:	eb41 0303 	adc.w	r3, r1, r3
 8001de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001de6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001dea:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001dee:	4621      	mov	r1, r4
 8001df0:	1889      	adds	r1, r1, r2
 8001df2:	6539      	str	r1, [r7, #80]	@ 0x50
 8001df4:	4629      	mov	r1, r5
 8001df6:	eb43 0101 	adc.w	r1, r3, r1
 8001dfa:	6579      	str	r1, [r7, #84]	@ 0x54
 8001dfc:	f04f 0000 	mov.w	r0, #0
 8001e00:	f04f 0100 	mov.w	r1, #0
 8001e04:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001e08:	4623      	mov	r3, r4
 8001e0a:	0a18      	lsrs	r0, r3, #8
 8001e0c:	462a      	mov	r2, r5
 8001e0e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001e12:	462b      	mov	r3, r5
 8001e14:	1219      	asrs	r1, r3, #8
 8001e16:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <BME280_compensate_P_int64+0x580>)
 8001e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	17da      	asrs	r2, r3, #31
 8001e20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e22:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001e30:	464c      	mov	r4, r9
 8001e32:	0123      	lsls	r3, r4, #4
 8001e34:	46c4      	mov	ip, r8
 8001e36:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001e3a:	4644      	mov	r4, r8
 8001e3c:	0122      	lsls	r2, r4, #4
 8001e3e:	1884      	adds	r4, r0, r2
 8001e40:	603c      	str	r4, [r7, #0]
 8001e42:	eb41 0303 	adc.w	r3, r1, r3
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e4c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001e50:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e60:	2000021a 	.word	0x2000021a
 8001e64:	20000218 	.word	0x20000218
 8001e68:	20000216 	.word	0x20000216

08001e6c <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001e70:	f7ff fcb2 	bl	80017d8 <BMEReadRaw>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d142      	bne.n	8001f00 <BME280_Measure+0x94>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001e7a:	4b26      	ldr	r3, [pc, #152]	@ (8001f14 <BME280_Measure+0xa8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e82:	d104      	bne.n	8001e8e <BME280_Measure+0x22>
 8001e84:	4b24      	ldr	r3, [pc, #144]	@ (8001f18 <BME280_Measure+0xac>)
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e016      	b.n	8001ebc <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001e8e:	4b21      	ldr	r3, [pc, #132]	@ (8001f14 <BME280_Measure+0xa8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fce8 	bl	8001868 <BME280_compensate_T_int32>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fab2 	bl	8000404 <__aeabi_i2d>
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <BME280_Measure+0xb0>)
 8001ea6:	f7fe fc41 	bl	800072c <__aeabi_ddiv>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7fe fde9 	bl	8000a88 <__aeabi_d2f>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4a17      	ldr	r2, [pc, #92]	@ (8001f18 <BME280_Measure+0xac>)
 8001eba:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <BME280_Measure+0xb4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ec4:	d104      	bne.n	8001ed0 <BME280_Measure+0x64>
 8001ec6:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <BME280_Measure+0xb8>)
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = 0;
	}
}
 8001ece:	e01f      	b.n	8001f10 <BME280_Measure+0xa4>
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001ed0:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <BME280_Measure+0xb4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fd07 	bl	80018e8 <BME280_compensate_P_int64>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fa81 	bl	80003e4 <__aeabi_ui2d>
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <BME280_Measure+0xbc>)
 8001ee8:	f7fe fc20 	bl	800072c <__aeabi_ddiv>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7fe fdc8 	bl	8000a88 <__aeabi_d2f>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <BME280_Measure+0xb8>)
 8001efc:	6013      	str	r3, [r2, #0]
}
 8001efe:	e007      	b.n	8001f10 <BME280_Measure+0xa4>
		Temperature = Pressure = 0;
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <BME280_Measure+0xb8>)
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <BME280_Measure+0xb8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a02      	ldr	r2, [pc, #8]	@ (8001f18 <BME280_Measure+0xac>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200001f8 	.word	0x200001f8
 8001f18:	200005c0 	.word	0x200005c0
 8001f1c:	40590000 	.word	0x40590000
 8001f20:	200001fc 	.word	0x200001fc
 8001f24:	200005c4 	.word	0x200005c4
 8001f28:	40700000 	.word	0x40700000

08001f2c <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d106      	bne.n	8001f4e <prv_parse_number+0x22>
        t = gh->p.term_str;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3371      	adds	r3, #113	@ 0x71
 8001f44:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 8001f46:	e002      	b.n	8001f4e <prv_parse_number+0x22>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <prv_parse_number+0x30>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d0f5      	beq.n	8001f48 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f62:	d104      	bne.n	8001f6e <prv_parse_number+0x42>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <prv_parse_number+0x44>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8001f72:	e00d      	b.n	8001f90 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	461a      	mov	r2, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	3b30      	subs	r3, #48	@ 0x30
 8001f86:	4413      	add	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <prv_parse_number+0x7a>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f9c:	d903      	bls.n	8001fa6 <prv_parse_number+0x7a>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b39      	cmp	r3, #57	@ 0x39
 8001fa4:	d9e6      	bls.n	8001f74 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <prv_parse_number+0x86>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	425b      	negs	r3, r3
 8001fb0:	e000      	b.n	8001fb4 <prv_parse_number+0x88>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
	...

08001fc0 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1;
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	4b4b      	ldr	r3, [pc, #300]	@ (8002108 <prv_parse_float_number+0x148>)
 8001fdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int sign = 1;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]

    if (t == NULL) {
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <prv_parse_float_number+0x38>
        t = gh->p.term_str;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3371      	adds	r3, #113	@ 0x71
 8001fee:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 8001ff0:	e002      	b.n	8001ff8 <prv_parse_float_number+0x38>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <prv_parse_float_number+0x46>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b20      	cmp	r3, #32
 8002004:	d0f5      	beq.n	8001ff2 <prv_parse_float_number+0x32>

    if (*t == '-') { /* Check sign */
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b2d      	cmp	r3, #45	@ 0x2d
 800200c:	d124      	bne.n	8002058 <prv_parse_float_number+0x98>
        sign = -1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	60fb      	str	r3, [r7, #12]
        ++t;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Convert main part */
 800201a:	e01d      	b.n	8002058 <prv_parse_float_number+0x98>
        value = value * (lwgps_float_t)10 + CTN(*t);
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	4b3a      	ldr	r3, [pc, #232]	@ (800210c <prv_parse_float_number+0x14c>)
 8002022:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002026:	f7fe fa57 	bl	80004d8 <__aeabi_dmul>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4614      	mov	r4, r2
 8002030:	461d      	mov	r5, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	3b30      	subs	r3, #48	@ 0x30
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe f9e3 	bl	8000404 <__aeabi_i2d>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4620      	mov	r0, r4
 8002044:	4629      	mov	r1, r5
 8002046:	f7fe f891 	bl	800016c <__adddf3>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        ++t;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Convert main part */
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b2f      	cmp	r3, #47	@ 0x2f
 800205e:	d903      	bls.n	8002068 <prv_parse_float_number+0xa8>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b39      	cmp	r3, #57	@ 0x39
 8002066:	d9d9      	bls.n	800201c <prv_parse_float_number+0x5c>
    }
    if (*t == '.') { /* Skip the dot character */
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b2e      	cmp	r3, #46	@ 0x2e
 800206e:	d12c      	bne.n	80020ca <prv_parse_float_number+0x10a>
        ++t;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Get the power */
 8002076:	e028      	b.n	80020ca <prv_parse_float_number+0x10a>
        value = value * (lwgps_float_t)10 + CTN(*t);
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b23      	ldr	r3, [pc, #140]	@ (800210c <prv_parse_float_number+0x14c>)
 800207e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002082:	f7fe fa29 	bl	80004d8 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4614      	mov	r4, r2
 800208c:	461d      	mov	r5, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	3b30      	subs	r3, #48	@ 0x30
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe f9b5 	bl	8000404 <__aeabi_i2d>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4620      	mov	r0, r4
 80020a0:	4629      	mov	r1, r5
 80020a2:	f7fe f863 	bl	800016c <__adddf3>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
        power *= (lwgps_float_t)10.0;
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <prv_parse_float_number+0x14c>)
 80020b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020b8:	f7fe fa0e 	bl	80004d8 <__aeabi_dmul>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ++t;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Get the power */
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80020d0:	d903      	bls.n	80020da <prv_parse_float_number+0x11a>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b39      	cmp	r3, #57	@ 0x39
 80020d8:	d9ce      	bls.n	8002078 <prv_parse_float_number+0xb8>
    }
    return sign * value / power;
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f7fe f992 	bl	8000404 <__aeabi_i2d>
 80020e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e4:	f7fe f9f8 	bl	80004d8 <__aeabi_dmul>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020f4:	f7fe fb1a 	bl	800072c <__aeabi_ddiv>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
}
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bdb0      	pop	{r4, r5, r7, pc}
 8002106:	bf00      	nop
 8002108:	3ff00000 	.word	0x3ff00000
 800210c:	40240000 	.word	0x40240000

08002110 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL); /* Parse value as double */
 8002118:	2100      	movs	r1, #0
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ff50 	bl	8001fc0 <prv_parse_float_number>
 8002120:	e9c7 0106 	strd	r0, r1, [r7, #24]
    deg = FLT((int)((int)ll / 100));       /* Get absolute degrees value, interested in integer part only */
 8002124:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002128:	f7fe fc86 	bl	8000a38 <__aeabi_d2iz>
 800212c:	4603      	mov	r3, r0
 800212e:	4a1b      	ldr	r2, [pc, #108]	@ (800219c <prv_parse_lat_long+0x8c>)
 8002130:	fb82 1203 	smull	r1, r2, r2, r3
 8002134:	1152      	asrs	r2, r2, #5
 8002136:	17db      	asrs	r3, r3, #31
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f962 	bl	8000404 <__aeabi_i2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));           /* Get remaining part from full number, minutes */
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <prv_parse_lat_long+0x90>)
 800214e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002152:	f7fe f9c1 	bl	80004d8 <__aeabi_dmul>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800215e:	f7fe f803 	bl	8000168 <__aeabi_dsub>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));          /* Calculate latitude/longitude */
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <prv_parse_lat_long+0x94>)
 8002170:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002174:	f7fe fada 	bl	800072c <__aeabi_ddiv>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002180:	f7fd fff4 	bl	800016c <__adddf3>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 800218c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	51eb851f 	.word	0x51eb851f
 80021a0:	40590000 	.word	0x40590000
 80021a4:	404e0000 	.word	0x404e0000

080021a8 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80021a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) { /* Check string type */
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80021b8:	2900      	cmp	r1, #0
 80021ba:	d169      	bne.n	8002290 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3371      	adds	r3, #113	@ 0x71
 80021c0:	2206      	movs	r2, #6
 80021c2:	49b6      	ldr	r1, [pc, #728]	@ (800249c <prv_parse_term+0x2f4>)
 80021c4:	4618      	mov	r0, r3
 80021c6:	f007 f938 	bl	800943a <strncmp>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d009      	beq.n	80021e4 <prv_parse_term+0x3c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3371      	adds	r3, #113	@ 0x71
 80021d4:	2206      	movs	r2, #6
 80021d6:	49b2      	ldr	r1, [pc, #712]	@ (80024a0 <prv_parse_term+0x2f8>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f007 f92e 	bl	800943a <strncmp>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d104      	bne.n	80021ee <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80021ec:	e04e      	b.n	800228c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3371      	adds	r3, #113	@ 0x71
 80021f2:	2206      	movs	r2, #6
 80021f4:	49ab      	ldr	r1, [pc, #684]	@ (80024a4 <prv_parse_term+0x2fc>)
 80021f6:	4618      	mov	r0, r3
 80021f8:	f007 f91f 	bl	800943a <strncmp>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <prv_parse_term+0x6e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3371      	adds	r3, #113	@ 0x71
 8002206:	2206      	movs	r2, #6
 8002208:	49a7      	ldr	r1, [pc, #668]	@ (80024a8 <prv_parse_term+0x300>)
 800220a:	4618      	mov	r0, r3
 800220c:	f007 f915 	bl	800943a <strncmp>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d104      	bne.n	8002220 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800221e:	e035      	b.n	800228c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3371      	adds	r3, #113	@ 0x71
 8002224:	2206      	movs	r2, #6
 8002226:	49a1      	ldr	r1, [pc, #644]	@ (80024ac <prv_parse_term+0x304>)
 8002228:	4618      	mov	r0, r3
 800222a:	f007 f906 	bl	800943a <strncmp>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d009      	beq.n	8002248 <prv_parse_term+0xa0>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3371      	adds	r3, #113	@ 0x71
 8002238:	2206      	movs	r2, #6
 800223a:	499d      	ldr	r1, [pc, #628]	@ (80024b0 <prv_parse_term+0x308>)
 800223c:	4618      	mov	r0, r3
 800223e:	f007 f8fc 	bl	800943a <strncmp>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d104      	bne.n	8002252 <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2203      	movs	r2, #3
 800224c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002250:	e01c      	b.n	800228c <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3371      	adds	r3, #113	@ 0x71
 8002256:	2206      	movs	r2, #6
 8002258:	4996      	ldr	r1, [pc, #600]	@ (80024b4 <prv_parse_term+0x30c>)
 800225a:	4618      	mov	r0, r3
 800225c:	f007 f8ed 	bl	800943a <strncmp>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <prv_parse_term+0xd2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3371      	adds	r3, #113	@ 0x71
 800226a:	2206      	movs	r2, #6
 800226c:	4992      	ldr	r1, [pc, #584]	@ (80024b8 <prv_parse_term+0x310>)
 800226e:	4618      	mov	r0, r3
 8002270:	f007 f8e3 	bl	800943a <strncmp>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d104      	bne.n	8002284 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2204      	movs	r2, #4
 800227e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002282:	e003      	b.n	800228c <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 800228c:	2301      	movs	r3, #1
 800228e:	e21d      	b.n	80026cc <prv_parse_term+0x524>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002296:	2900      	cmp	r1, #0
 8002298:	f000 8217 	beq.w	80026ca <prv_parse_term+0x522>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) { /* Process GPGGA statement */
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80022a2:	2901      	cmp	r1, #1
 80022a4:	f040 80c1 	bne.w	800242a <prv_parse_term+0x282>
        switch (gh->p.term_num) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80022ae:	3b01      	subs	r3, #1
 80022b0:	2b0a      	cmp	r3, #10
 80022b2:	f200 81ff 	bhi.w	80026b4 <prv_parse_term+0x50c>
 80022b6:	a201      	add	r2, pc, #4	@ (adr r2, 80022bc <prv_parse_term+0x114>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022e9 	.word	0x080022e9
 80022c0:	08002363 	.word	0x08002363
 80022c4:	08002375 	.word	0x08002375
 80022c8:	0800239f 	.word	0x0800239f
 80022cc:	080023b1 	.word	0x080023b1
 80022d0:	080023db 	.word	0x080023db
 80022d4:	080023ef 	.word	0x080023ef
 80022d8:	080026b5 	.word	0x080026b5
 80022dc:	08002403 	.word	0x08002403
 80022e0:	080026b5 	.word	0x080026b5
 80022e4:	08002417 	.word	0x08002417
            case 1: /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80022ee:	3b30      	subs	r3, #48	@ 0x30
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	0092      	lsls	r2, r2, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8002302:	4413      	add	r3, r2
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3b30      	subs	r3, #48	@ 0x30
 8002308:	b2da      	uxtb	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8002316:	3b30      	subs	r3, #48	@ 0x30
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	0092      	lsls	r2, r2, #2
 800231e:	4413      	add	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	b2da      	uxtb	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800232a:	4413      	add	r3, r2
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3b30      	subs	r3, #48	@ 0x30
 8002330:	b2da      	uxtb	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800233e:	3b30      	subs	r3, #48	@ 0x30
 8002340:	b2db      	uxtb	r3, r3
 8002342:	461a      	mov	r2, r3
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	4413      	add	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8002352:	4413      	add	r3, r2
 8002354:	b2db      	uxtb	r3, r3
 8002356:	3b30      	subs	r3, #48	@ 0x30
 8002358:	b2da      	uxtb	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8002360:	e1b3      	b.n	80026ca <prv_parse_term+0x522>
            case 2:                                               /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh); /* Parse latitude */
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fed4 	bl	8002110 <prv_parse_lat_long>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
                break;
 8002372:	e1aa      	b.n	80026ca <prv_parse_term+0x522>
            case 3: /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800237a:	2b53      	cmp	r3, #83	@ 0x53
 800237c:	d005      	beq.n	800238a <prv_parse_term+0x1e2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002384:	2b73      	cmp	r3, #115	@ 0x73
 8002386:	f040 8197 	bne.w	80026b8 <prv_parse_term+0x510>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002390:	4690      	mov	r8, r2
 8002392:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 800239c:	e18c      	b.n	80026b8 <prv_parse_term+0x510>
            case 4:                                                /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh); /* Parse longitude */
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff feb6 	bl	8002110 <prv_parse_lat_long>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
                break;
 80023ae:	e18c      	b.n	80026ca <prv_parse_term+0x522>
            case 5: /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80023b6:	2b57      	cmp	r3, #87	@ 0x57
 80023b8:	d005      	beq.n	80023c6 <prv_parse_term+0x21e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80023c0:	2b77      	cmp	r3, #119	@ 0x77
 80023c2:	f040 817b 	bne.w	80026bc <prv_parse_term+0x514>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80023cc:	4614      	mov	r4, r2
 80023ce:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 80023d8:	e170      	b.n	80026bc <prv_parse_term+0x514>
            case 6: /* Fix status */ gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL); break;
 80023da:	2100      	movs	r1, #0
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff fda5 	bl	8001f2c <prv_parse_number>
 80023e2:	4603      	mov	r3, r0
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
 80023ec:	e16d      	b.n	80026ca <prv_parse_term+0x522>
            case 7: /* Satellites in use */ gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL); break;
 80023ee:	2100      	movs	r1, #0
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff fd9b 	bl	8001f2c <prv_parse_number>
 80023f6:	4603      	mov	r3, r0
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
 8002400:	e163      	b.n	80026ca <prv_parse_term+0x522>
            case 9: /* Altitude */ gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL); break;
 8002402:	2100      	movs	r1, #0
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff fddb 	bl	8001fc0 <prv_parse_float_number>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
 8002414:	e159      	b.n	80026ca <prv_parse_term+0x522>
            case 11: /* Altitude above ellipsoid */ gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL); break;
 8002416:	2100      	movs	r1, #0
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fdd1 	bl	8001fc0 <prv_parse_float_number>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
 8002428:	e14f      	b.n	80026ca <prv_parse_term+0x522>
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) { /* Process GPGSA statement */
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002430:	2902      	cmp	r1, #2
 8002432:	d17d      	bne.n	8002530 <prv_parse_term+0x388>
        switch (gh->p.term_num) {
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800243a:	3b02      	subs	r3, #2
 800243c:	2b0f      	cmp	r3, #15
 800243e:	d85b      	bhi.n	80024f8 <prv_parse_term+0x350>
 8002440:	a201      	add	r2, pc, #4	@ (adr r2, 8002448 <prv_parse_term+0x2a0>)
 8002442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002446:	bf00      	nop
 8002448:	08002489 	.word	0x08002489
 800244c:	080024f9 	.word	0x080024f9
 8002450:	080024f9 	.word	0x080024f9
 8002454:	080024f9 	.word	0x080024f9
 8002458:	080024f9 	.word	0x080024f9
 800245c:	080024f9 	.word	0x080024f9
 8002460:	080024f9 	.word	0x080024f9
 8002464:	080024f9 	.word	0x080024f9
 8002468:	080024f9 	.word	0x080024f9
 800246c:	080024f9 	.word	0x080024f9
 8002470:	080024f9 	.word	0x080024f9
 8002474:	080024f9 	.word	0x080024f9
 8002478:	080024f9 	.word	0x080024f9
 800247c:	080024bd 	.word	0x080024bd
 8002480:	080024d1 	.word	0x080024d1
 8002484:	080024e5 	.word	0x080024e5
            case 2: /* Process fix mode */ gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL); break;
 8002488:	2100      	movs	r1, #0
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fd4e 	bl	8001f2c <prv_parse_number>
 8002490:	4603      	mov	r3, r0
 8002492:	b2da      	uxtb	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 800249a:	e116      	b.n	80026ca <prv_parse_term+0x522>
 800249c:	0800c328 	.word	0x0800c328
 80024a0:	0800c330 	.word	0x0800c330
 80024a4:	0800c338 	.word	0x0800c338
 80024a8:	0800c340 	.word	0x0800c340
 80024ac:	0800c348 	.word	0x0800c348
 80024b0:	0800c350 	.word	0x0800c350
 80024b4:	0800c358 	.word	0x0800c358
 80024b8:	0800c360 	.word	0x0800c360
            case 15: /* Process PDOP */ gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL); break;
 80024bc:	2100      	movs	r1, #0
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fd7e 	bl	8001fc0 <prv_parse_float_number>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
 80024ce:	e0fc      	b.n	80026ca <prv_parse_term+0x522>
            case 16: /* Process HDOP */ gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL); break;
 80024d0:	2100      	movs	r1, #0
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff fd74 	bl	8001fc0 <prv_parse_float_number>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
 80024e2:	e0f2      	b.n	80026ca <prv_parse_term+0x522>
            case 17: /* Process VDOP */ gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL); break;
 80024e4:	2100      	movs	r1, #0
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff fd6a 	bl	8001fc0 <prv_parse_float_number>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
 80024f6:	e0e8      	b.n	80026ca <prv_parse_term+0x522>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80024fe:	2b02      	cmp	r3, #2
 8002500:	f240 80de 	bls.w	80026c0 <prv_parse_term+0x518>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800250a:	2b0e      	cmp	r3, #14
 800250c:	f200 80d8 	bhi.w	80026c0 <prv_parse_term+0x518>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8002510:	2100      	movs	r1, #0
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff fd0a 	bl	8001f2c <prv_parse_number>
 8002518:	4602      	mov	r2, r0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002520:	3b03      	subs	r3, #3
 8002522:	b2d1      	uxtb	r1, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4413      	add	r3, r2
 8002528:	460a      	mov	r2, r1
 800252a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 800252e:	e0c7      	b.n	80026c0 <prv_parse_term+0x518>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) { /* Process GPGSV statement */
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002536:	2903      	cmp	r1, #3
 8002538:	d11b      	bne.n	8002572 <prv_parse_term+0x3ca>
        switch (gh->p.term_num) {
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002540:	2b02      	cmp	r3, #2
 8002542:	d002      	beq.n	800254a <prv_parse_term+0x3a2>
 8002544:	2b03      	cmp	r3, #3
 8002546:	d00a      	beq.n	800255e <prv_parse_term+0x3b6>
                            default: break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8002548:	e0bf      	b.n	80026ca <prv_parse_term+0x522>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 800254a:	2100      	movs	r1, #0
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff fced 	bl	8001f2c <prv_parse_number>
 8002552:	4603      	mov	r3, r0
 8002554:	b2da      	uxtb	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 800255c:	e0b5      	b.n	80026ca <prv_parse_term+0x522>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 800255e:	2100      	movs	r1, #0
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff fce3 	bl	8001f2c <prv_parse_number>
 8002566:	4603      	mov	r3, r0
 8002568:	b2da      	uxtb	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 8002570:	e0ab      	b.n	80026ca <prv_parse_term+0x522>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) { /* Process GPRMC statement */
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002578:	2904      	cmp	r1, #4
 800257a:	f040 80a6 	bne.w	80026ca <prv_parse_term+0x522>
        switch (gh->p.term_num) {
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8002584:	3902      	subs	r1, #2
 8002586:	2909      	cmp	r1, #9
 8002588:	f200 809c 	bhi.w	80026c4 <prv_parse_term+0x51c>
 800258c:	a001      	add	r0, pc, #4	@ (adr r0, 8002594 <prv_parse_term+0x3ec>)
 800258e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002592:	bf00      	nop
 8002594:	080025bd 	.word	0x080025bd
 8002598:	080026c5 	.word	0x080026c5
 800259c:	080026c5 	.word	0x080026c5
 80025a0:	080026c5 	.word	0x080026c5
 80025a4:	080026c5 	.word	0x080026c5
 80025a8:	080025d7 	.word	0x080025d7
 80025ac:	080025eb 	.word	0x080025eb
 80025b0:	080025ff 	.word	0x080025ff
 80025b4:	08002679 	.word	0x08002679
 80025b8:	0800268d 	.word	0x0800268d
            case 2: /* Process valid status */ gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A'); break;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80025c2:	2b41      	cmp	r3, #65	@ 0x41
 80025c4:	bf0c      	ite	eq
 80025c6:	2301      	moveq	r3, #1
 80025c8:	2300      	movne	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
 80025d4:	e079      	b.n	80026ca <prv_parse_term+0x522>
            case 7: /* Process ground speed in knots */ gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL); break;
 80025d6:	2100      	movs	r1, #0
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff fcf1 	bl	8001fc0 <prv_parse_float_number>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
 80025e8:	e06f      	b.n	80026ca <prv_parse_term+0x522>
            case 8: /* Process true ground coarse */ gh->p.data.rmc.course = prv_parse_float_number(gh, NULL); break;
 80025ea:	2100      	movs	r1, #0
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff fce7 	bl	8001fc0 <prv_parse_float_number>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
 80025fc:	e065      	b.n	80026ca <prv_parse_term+0x522>
            case 9: /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002604:	3b30      	subs	r3, #48	@ 0x30
 8002606:	b2db      	uxtb	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	0092      	lsls	r2, r2, #2
 800260c:	4413      	add	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	b2da      	uxtb	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8002618:	4413      	add	r3, r2
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3b30      	subs	r3, #48	@ 0x30
 800261e:	b2da      	uxtb	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 800262c:	3b30      	subs	r3, #48	@ 0x30
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4413      	add	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	b2da      	uxtb	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002640:	4413      	add	r3, r2
 8002642:	b2db      	uxtb	r3, r3
 8002644:	3b30      	subs	r3, #48	@ 0x30
 8002646:	b2da      	uxtb	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8002654:	3b30      	subs	r3, #48	@ 0x30
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	4413      	add	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	b2da      	uxtb	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8002668:	4413      	add	r3, r2
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3b30      	subs	r3, #48	@ 0x30
 800266e:	b2da      	uxtb	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 8002676:	e028      	b.n	80026ca <prv_parse_term+0x522>
            case 10: /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8002678:	2100      	movs	r1, #0
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff fca0 	bl	8001fc0 <prv_parse_float_number>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                break;
 800268a:	e01e      	b.n	80026ca <prv_parse_term+0x522>
            case 11: /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 8002692:	2957      	cmp	r1, #87	@ 0x57
 8002694:	d004      	beq.n	80026a0 <prv_parse_term+0x4f8>
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 800269c:	2977      	cmp	r1, #119	@ 0x77
 800269e:	d113      	bne.n	80026c8 <prv_parse_term+0x520>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 80026a6:	4602      	mov	r2, r0
 80026a8:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 80026b2:	e009      	b.n	80026c8 <prv_parse_term+0x520>
            default: break;
 80026b4:	bf00      	nop
 80026b6:	e008      	b.n	80026ca <prv_parse_term+0x522>
                break;
 80026b8:	bf00      	nop
 80026ba:	e006      	b.n	80026ca <prv_parse_term+0x522>
                break;
 80026bc:	bf00      	nop
 80026be:	e004      	b.n	80026ca <prv_parse_term+0x522>
                break;
 80026c0:	bf00      	nop
 80026c2:	e002      	b.n	80026ca <prv_parse_term+0x522>
            default: break;
 80026c4:	bf00      	nop
 80026c6:	e000      	b.n	80026ca <prv_parse_term+0x522>
                break;
 80026c8:	bf00      	nop
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 80026ca:	2301      	movs	r3, #1
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026d6:	bf00      	nop

080026d8 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 80026e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80026e8:	d90d      	bls.n	8002706 <prv_check_crc+0x2e>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80026f0:	2b39      	cmp	r3, #57	@ 0x39
 80026f2:	d808      	bhi.n	8002706 <prv_check_crc+0x2e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80026fa:	3b30      	subs	r3, #48	@ 0x30
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	b25b      	sxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	b25a      	sxtb	r2, r3
 8002704:	e026      	b.n	8002754 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 800270c:	2b60      	cmp	r3, #96	@ 0x60
 800270e:	d90d      	bls.n	800272c <prv_check_crc+0x54>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002716:	2b7a      	cmp	r3, #122	@ 0x7a
 8002718:	d808      	bhi.n	800272c <prv_check_crc+0x54>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002720:	3b57      	subs	r3, #87	@ 0x57
 8002722:	b2db      	uxtb	r3, r3
 8002724:	b25b      	sxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	b25a      	sxtb	r2, r3
 800272a:	e013      	b.n	8002754 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8002732:	2b40      	cmp	r3, #64	@ 0x40
 8002734:	d90d      	bls.n	8002752 <prv_check_crc+0x7a>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800273c:	2b5a      	cmp	r3, #90	@ 0x5a
 800273e:	d808      	bhi.n	8002752 <prv_check_crc+0x7a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002746:	3b37      	subs	r3, #55	@ 0x37
 8002748:	b2db      	uxtb	r3, r3
 800274a:	b25b      	sxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	b25a      	sxtb	r2, r3
 8002750:	e000      	b.n	8002754 <prv_check_crc+0x7c>
 8002752:	2200      	movs	r2, #0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800275a:	2b2f      	cmp	r3, #47	@ 0x2f
 800275c:	d90c      	bls.n	8002778 <prv_check_crc+0xa0>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8002764:	2b39      	cmp	r3, #57	@ 0x39
 8002766:	d807      	bhi.n	8002778 <prv_check_crc+0xa0>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800276e:	b25b      	sxtb	r3, r3
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	b25b      	sxtb	r3, r3
 8002776:	e028      	b.n	80027ca <prv_check_crc+0xf2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800277e:	2b60      	cmp	r3, #96	@ 0x60
 8002780:	d90e      	bls.n	80027a0 <prv_check_crc+0xc8>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8002788:	2b7a      	cmp	r3, #122	@ 0x7a
 800278a:	d809      	bhi.n	80027a0 <prv_check_crc+0xc8>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8002792:	3b57      	subs	r3, #87	@ 0x57
 8002794:	b2db      	uxtb	r3, r3
 8002796:	b25b      	sxtb	r3, r3
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	b25b      	sxtb	r3, r3
 800279e:	e014      	b.n	80027ca <prv_check_crc+0xf2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80027a6:	2b40      	cmp	r3, #64	@ 0x40
 80027a8:	d90e      	bls.n	80027c8 <prv_check_crc+0xf0>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80027b0:	2b5a      	cmp	r3, #90	@ 0x5a
 80027b2:	d809      	bhi.n	80027c8 <prv_check_crc+0xf0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80027ba:	3b37      	subs	r3, #55	@ 0x37
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	b25b      	sxtb	r3, r3
 80027c6:	e000      	b.n	80027ca <prv_check_crc+0xf2>
 80027c8:	2300      	movs	r3, #0
 80027ca:	4313      	orrs	r3, r2
 80027cc:	b25b      	sxtb	r3, r3
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80027ce:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;             /* They must match! */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	429a      	cmp	r2, r3
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d136      	bne.n	800286c <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800286a:	e061      	b.n	8002930 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002872:	2b02      	cmp	r3, #2
 8002874:	d121      	bne.n	80028ba <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	33a1      	adds	r3, #161	@ 0xa1
 80028b0:	220c      	movs	r2, #12
 80028b2:	4619      	mov	r1, r3
 80028b4:	f006 fe59 	bl	800956a <memcpy>
 80028b8:	e03a      	b.n	8002930 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d106      	bne.n	80028d2 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80028d0:	e02e      	b.n	8002930 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d129      	bne.n	8002930 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8002930:	2301      	movs	r3, #1
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh)); /* Reset structure */
 8002942:	22b0      	movs	r2, #176	@ 0xb0
 8002944:	2100      	movs	r1, #0
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f006 fd6f 	bl	800942a <memset>
    return 1;
 800294c:	2301      	movs	r3, #1
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                /* Process all bytes */
 8002966:	e0ad      	b.n	8002ac4 <lwgps_process+0x16e>
        if (*d == '$') {                         /* Check for beginning of NMEA line */
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b24      	cmp	r3, #36	@ 0x24
 800296e:	d128      	bne.n	80029c2 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p)); /* Reset private memory */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3370      	adds	r3, #112	@ 0x70
 8002974:	2240      	movs	r2, #64	@ 0x40
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f006 fd56 	bl	800942a <memset>
            TERM_ADD(gh, *d);                    /* Add character to term */
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8002984:	2b0b      	cmp	r3, #11
 8002986:	f200 8097 	bhi.w	8002ab8 <lwgps_process+0x162>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8002990:	4619      	mov	r1, r3
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	440b      	add	r3, r1
 800299a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80029a4:	3301      	adds	r3, #1
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80029b4:	461a      	mov	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4413      	add	r3, r2
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80029c0:	e07a      	b.n	8002ab8 <lwgps_process+0x162>
        } else if (*d == ',') {                  /* Term separator character */
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b2c      	cmp	r3, #44	@ 0x2c
 80029c8:	d11d      	bne.n	8002a06 <lwgps_process+0xb0>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7ff fbec 	bl	80021a8 <prv_parse_term>
            CRC_ADD(gh, *d);                     /* Add character to CRC computation */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	4053      	eors	r3, r2
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                       /* Start with next term */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80029fa:	3301      	adds	r3, #1
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8002a04:	e058      	b.n	8002ab8 <lwgps_process+0x162>
        } else if (*d == '*') {                  /* Start indicates end of data for CRC computation */
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a0c:	d117      	bne.n	8002a3e <lwgps_process+0xe8>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7ff fbca 	bl	80021a8 <prv_parse_term>
            gh->p.star = 1;                      /* STAR detected */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                       /* Start with next term */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002a32:	3301      	adds	r3, #1
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8002a3c:	e03c      	b.n	8002ab8 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b0d      	cmp	r3, #13
 8002a44:	d109      	bne.n	8002a5a <lwgps_process+0x104>
            if (prv_check_crc(gh)) { /* Check for CRC result */
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f7ff fe46 	bl	80026d8 <prv_check_crc>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d032      	beq.n	8002ab8 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh); /* Copy memory from temporary to user memory */
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f7ff feca 	bl	80027ec <prv_copy_from_tmp_memory>
 8002a58:	e02e      	b.n	8002ab8 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {   /* Add to CRC only if star not yet detected */
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <lwgps_process+0x122>
                CRC_ADD(gh, *d); /* Add to CRC */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4053      	eors	r3, r2
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d); /* Add character to term */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8002a7e:	2b0b      	cmp	r3, #11
 8002a80:	d81a      	bhi.n	8002ab8 <lwgps_process+0x162>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8002a88:	4619      	mov	r1, r3
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	440b      	add	r3, r1
 8002a92:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8002aac:	461a      	mov	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {                /* Process all bytes */
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3301      	adds	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f47f af4e 	bne.w	8002968 <lwgps_process+0x12>
        }
    }
    return 1;
 8002acc:	2301      	movs	r3, #1
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_UART_RxCpltCallback>:

/* UART IRQ Handlers ---------------------------------------------------------*/

/* UART Rx Complete Callback for GPS (USART2) --------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a30      	ldr	r2, [pc, #192]	@ (8002ba4 <HAL_UART_RxCpltCallback+0xcc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d131      	bne.n	8002b4c <HAL_UART_RxCpltCallback+0x74>
        /* Re-arm reception */
        HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8002ae8:	2201      	movs	r2, #1
 8002aea:	492f      	ldr	r1, [pc, #188]	@ (8002ba8 <HAL_UART_RxCpltCallback+0xd0>)
 8002aec:	482d      	ldr	r0, [pc, #180]	@ (8002ba4 <HAL_UART_RxCpltCallback+0xcc>)
 8002aee:	f005 f993 	bl	8007e18 <HAL_UART_Receive_IT>

        if (rx_data != '\n' && rx_index < sizeof(rx_buffer) - 1) {
 8002af2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba8 <HAL_UART_RxCpltCallback+0xd0>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b0a      	cmp	r3, #10
 8002af8:	d014      	beq.n	8002b24 <HAL_UART_RxCpltCallback+0x4c>
 8002afa:	4b2c      	ldr	r3, [pc, #176]	@ (8002bac <HAL_UART_RxCpltCallback+0xd4>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b7e      	cmp	r3, #126	@ 0x7e
 8002b00:	d810      	bhi.n	8002b24 <HAL_UART_RxCpltCallback+0x4c>
            rx_buffer[rx_index++] = rx_data;
 8002b02:	4b2a      	ldr	r3, [pc, #168]	@ (8002bac <HAL_UART_RxCpltCallback+0xd4>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	b2d1      	uxtb	r1, r2
 8002b0a:	4a28      	ldr	r2, [pc, #160]	@ (8002bac <HAL_UART_RxCpltCallback+0xd4>)
 8002b0c:	7011      	strb	r1, [r2, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b25      	ldr	r3, [pc, #148]	@ (8002ba8 <HAL_UART_RxCpltCallback+0xd0>)
 8002b12:	7819      	ldrb	r1, [r3, #0]
 8002b14:	4b26      	ldr	r3, [pc, #152]	@ (8002bb0 <HAL_UART_RxCpltCallback+0xd8>)
 8002b16:	5499      	strb	r1, [r3, r2]
            gps_data_received_count++;
 8002b18:	4b26      	ldr	r3, [pc, #152]	@ (8002bb4 <HAL_UART_RxCpltCallback+0xdc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	4a25      	ldr	r2, [pc, #148]	@ (8002bb4 <HAL_UART_RxCpltCallback+0xdc>)
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e013      	b.n	8002b4c <HAL_UART_RxCpltCallback+0x74>
        }
        else {
            if (rx_index > 0) {
 8002b24:	4b21      	ldr	r3, [pc, #132]	@ (8002bac <HAL_UART_RxCpltCallback+0xd4>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00c      	beq.n	8002b46 <HAL_UART_RxCpltCallback+0x6e>
                rx_buffer[rx_index] = '\0';
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bac <HAL_UART_RxCpltCallback+0xd4>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb0 <HAL_UART_RxCpltCallback+0xd8>)
 8002b34:	2100      	movs	r1, #0
 8002b36:	5499      	strb	r1, [r3, r2]
                lwgps_process(&gps, rx_buffer, rx_index);
 8002b38:	4b1c      	ldr	r3, [pc, #112]	@ (8002bac <HAL_UART_RxCpltCallback+0xd4>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	491c      	ldr	r1, [pc, #112]	@ (8002bb0 <HAL_UART_RxCpltCallback+0xd8>)
 8002b40:	481d      	ldr	r0, [pc, #116]	@ (8002bb8 <HAL_UART_RxCpltCallback+0xe0>)
 8002b42:	f7ff ff08 	bl	8002956 <lwgps_process>
            }
            rx_index = 0;
 8002b46:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <HAL_UART_RxCpltCallback+0xd4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
        }
    }

    if (huart->Instance == USART1) {
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1a      	ldr	r2, [pc, #104]	@ (8002bbc <HAL_UART_RxCpltCallback+0xe4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d122      	bne.n	8002b9c <HAL_UART_RxCpltCallback+0xc4>
        // Process the received byte immediately
        ProcessIncomingData(incoming_buffer[buffer_index]);
 8002b56:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc0 <HAL_UART_RxCpltCallback+0xe8>)
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b19      	ldr	r3, [pc, #100]	@ (8002bc4 <HAL_UART_RxCpltCallback+0xec>)
 8002b5e:	5c9b      	ldrb	r3, [r3, r2]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f001 f81d 	bl	8003ba0 <ProcessIncomingData>

        // Move to next buffer position
        buffer_index = (buffer_index + 1) % (PACKET_SIZE * 4);
 8002b66:	4b16      	ldr	r3, [pc, #88]	@ (8002bc0 <HAL_UART_RxCpltCallback+0xe8>)
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <HAL_UART_RxCpltCallback+0xf0>)
 8002b6e:	fb83 1302 	smull	r1, r3, r3, r2
 8002b72:	1159      	asrs	r1, r3, #5
 8002b74:	17d3      	asrs	r3, r2, #31
 8002b76:	1ac9      	subs	r1, r1, r3
 8002b78:	460b      	mov	r3, r1
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1ad1      	subs	r1, r2, r3
 8002b82:	b28a      	uxth	r2, r1
 8002b84:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <HAL_UART_RxCpltCallback+0xe8>)
 8002b86:	801a      	strh	r2, [r3, #0]

        // Continue receiving next byte immediately - no delays
        HAL_UART_Receive_IT(&huart1, &incoming_buffer[buffer_index], 1);
 8002b88:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc0 <HAL_UART_RxCpltCallback+0xe8>)
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <HAL_UART_RxCpltCallback+0xec>)
 8002b90:	4413      	add	r3, r2
 8002b92:	2201      	movs	r2, #1
 8002b94:	4619      	mov	r1, r3
 8002b96:	480d      	ldr	r0, [pc, #52]	@ (8002bcc <HAL_UART_RxCpltCallback+0xf4>)
 8002b98:	f005 f93e 	bl	8007e18 <HAL_UART_Receive_IT>
     }
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000364 	.word	0x20000364
 8002ba8:	200005b9 	.word	0x200005b9
 8002bac:	200005b8 	.word	0x200005b8
 8002bb0:	20000538 	.word	0x20000538
 8002bb4:	200005bc 	.word	0x200005bc
 8002bb8:	20000488 	.word	0x20000488
 8002bbc:	40013800 	.word	0x40013800
 8002bc0:	200006bc 	.word	0x200006bc
 8002bc4:	2000062c 	.word	0x2000062c
 8002bc8:	38e38e39 	.word	0x38e38e39
 8002bcc:	2000031c 	.word	0x2000031c

08002bd0 <print_gps_debug_info>:

/* Print GPS debug info ------------------------------------------------------*/
void print_gps_debug_info(void)
{
 8002bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd2:	b0cb      	sub	sp, #300	@ 0x12c
 8002bd4:	af08      	add	r7, sp, #32
    char dbg[256];
    int len = sprintf(dbg,
        "GPS Debug: fix=%d valid=%d sats=%d lat=%.6f lon=%.6f rx=%lu\r\n",
        gps.fix, gps.is_valid, gps.sats_in_use,
 8002bd6:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <print_gps_debug_info+0x58>)
 8002bd8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
    int len = sprintf(dbg,
 8002bdc:	469c      	mov	ip, r3
        gps.fix, gps.is_valid, gps.sats_in_use,
 8002bde:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <print_gps_debug_info+0x58>)
 8002be0:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
    int len = sprintf(dbg,
 8002be4:	469e      	mov	lr, r3
        gps.fix, gps.is_valid, gps.sats_in_use,
 8002be6:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <print_gps_debug_info+0x58>)
 8002be8:	f893 3020 	ldrb.w	r3, [r3, #32]
    int len = sprintf(dbg,
 8002bec:	461e      	mov	r6, r3
 8002bee:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <print_gps_debug_info+0x58>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	490c      	ldr	r1, [pc, #48]	@ (8002c28 <print_gps_debug_info+0x58>)
 8002bf6:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8002bfa:	4c0c      	ldr	r4, [pc, #48]	@ (8002c2c <print_gps_debug_info+0x5c>)
 8002bfc:	6824      	ldr	r4, [r4, #0]
 8002bfe:	1d3d      	adds	r5, r7, #4
 8002c00:	9406      	str	r4, [sp, #24]
 8002c02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c0a:	9600      	str	r6, [sp, #0]
 8002c0c:	4673      	mov	r3, lr
 8002c0e:	4662      	mov	r2, ip
 8002c10:	4907      	ldr	r1, [pc, #28]	@ (8002c30 <print_gps_debug_info+0x60>)
 8002c12:	4628      	mov	r0, r5
 8002c14:	f006 fba4 	bl	8009360 <siprintf>
 8002c18:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
        gps_data_received_count
    );
#if 0
    HAL_UART_Transmit(&huart1, (uint8_t*)dbg, len, HAL_MAX_DELAY);
#endif
}
 8002c1c:	bf00      	nop
 8002c1e:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000488 	.word	0x20000488
 8002c2c:	200005bc 	.word	0x200005bc
 8002c30:	0800c368 	.word	0x0800c368

08002c34 <check_uart_errors>:

/* Recover from UART errors on GPS ------------------------------------------*/
void check_uart_errors(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE)) {
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb8 <check_uart_errors+0x84>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d10f      	bne.n	8002c68 <check_uart_errors+0x34>
        __HAL_UART_CLEAR_OREFLAG(&huart2);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb8 <check_uart_errors+0x84>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	4b18      	ldr	r3, [pc, #96]	@ (8002cb8 <check_uart_errors+0x84>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
        HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4916      	ldr	r1, [pc, #88]	@ (8002cbc <check_uart_errors+0x88>)
 8002c62:	4815      	ldr	r0, [pc, #84]	@ (8002cb8 <check_uart_errors+0x84>)
 8002c64:	f005 f8d8 	bl	8007e18 <HAL_UART_Receive_IT>
    }
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE))
 8002c68:	4b13      	ldr	r3, [pc, #76]	@ (8002cb8 <check_uart_errors+0x84>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d10a      	bne.n	8002c8c <check_uart_errors+0x58>
        __HAL_UART_CLEAR_FEFLAG(&huart2);
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb8 <check_uart_errors+0x84>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb8 <check_uart_errors+0x84>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_NE))
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <check_uart_errors+0x84>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d10a      	bne.n	8002cb0 <check_uart_errors+0x7c>
        __HAL_UART_CLEAR_NEFLAG(&huart2);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <check_uart_errors+0x84>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	4b04      	ldr	r3, [pc, #16]	@ (8002cb8 <check_uart_errors+0x84>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000364 	.word	0x20000364
 8002cbc:	200005b9 	.word	0x200005b9

08002cc0 <kalman_filter_init>:

/* Kalman Filter Implementation ----------------------------------------------*/
void kalman_filter_init(kalman_filter_t *kf, float Q, float R)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
    kf->Q = Q;  // Process noise covariance
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	601a      	str	r2, [r3, #0]
    kf->R = R;  // Measurement noise covariance
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	605a      	str	r2, [r3, #4]
    kf->P = 1.0f;  // Initial estimate error covariance
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002cde:	609a      	str	r2, [r3, #8]
    kf->K = 0.0f;  // Initial Kalman gain
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	60da      	str	r2, [r3, #12]
    kf->X = 0.0f;  // Initial state estimate
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	611a      	str	r2, [r3, #16]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <kalman_filter_update>:

float kalman_filter_update(kalman_filter_t *kf, float measurement, float dt)
{
 8002cfa:	b590      	push	{r4, r7, lr}
 8002cfc:	b087      	sub	sp, #28
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
    // Prediction step
    float X_pred = kf->X;  // State prediction (assuming constant velocity model)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	617b      	str	r3, [r7, #20]
    float P_pred = kf->P + kf->Q * dt;  // Error covariance prediction
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	689c      	ldr	r4, [r3, #8]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe f814 	bl	8000d44 <__aeabi_fmul>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4620      	mov	r0, r4
 8002d22:	f7fd ff07 	bl	8000b34 <__addsf3>
 8002d26:	4603      	mov	r3, r0
 8002d28:	613b      	str	r3, [r7, #16]
    
    // Update step
    kf->K = P_pred / (P_pred + kf->R);  // Kalman gain
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	6939      	ldr	r1, [r7, #16]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd feff 	bl	8000b34 <__addsf3>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6938      	ldr	r0, [r7, #16]
 8002d3c:	f7fe f8b6 	bl	8000eac <__aeabi_fdiv>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	60da      	str	r2, [r3, #12]
    kf->X = X_pred + kf->K * (measurement - X_pred);  // State update
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68dc      	ldr	r4, [r3, #12]
 8002d4c:	6979      	ldr	r1, [r7, #20]
 8002d4e:	68b8      	ldr	r0, [r7, #8]
 8002d50:	f7fd feee 	bl	8000b30 <__aeabi_fsub>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4619      	mov	r1, r3
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7fd fff3 	bl	8000d44 <__aeabi_fmul>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	6979      	ldr	r1, [r7, #20]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fee6 	bl	8000b34 <__addsf3>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	611a      	str	r2, [r3, #16]
    kf->P = (1.0f - kf->K) * P_pred;  // Error covariance update
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4619      	mov	r1, r3
 8002d76:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002d7a:	f7fd fed9 	bl	8000b30 <__aeabi_fsub>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	6939      	ldr	r1, [r7, #16]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd ffde 	bl	8000d44 <__aeabi_fmul>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	609a      	str	r2, [r3, #8]
    
    return kf->X;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	691b      	ldr	r3, [r3, #16]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd90      	pop	{r4, r7, pc}

08002d9c <initialize_kalman_filters>:

void initialize_kalman_filters(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
    // Q: Process noise (gyroscope drift), R: Measurement noise (accelerometer noise)
    // Lower Q = more trust in model, Higher R = more trust in measurements
    
    // MORE RESPONSIVE SETTINGS (faster angle changes):
    // Roll and Pitch: Good accelerometer reference available
    kalman_filter_init(&kalman_roll, 0.01f, 0.05f);   // Roll filter - Higher Q, Lower R = more responsive
 8002da0:	4a10      	ldr	r2, [pc, #64]	@ (8002de4 <initialize_kalman_filters+0x48>)
 8002da2:	4911      	ldr	r1, [pc, #68]	@ (8002de8 <initialize_kalman_filters+0x4c>)
 8002da4:	4811      	ldr	r0, [pc, #68]	@ (8002dec <initialize_kalman_filters+0x50>)
 8002da6:	f7ff ff8b 	bl	8002cc0 <kalman_filter_init>
    kalman_filter_init(&kalman_pitch, 0.01f, 0.05f);  // Pitch filter - Higher Q, Lower R = more responsive
 8002daa:	4a0e      	ldr	r2, [pc, #56]	@ (8002de4 <initialize_kalman_filters+0x48>)
 8002dac:	490e      	ldr	r1, [pc, #56]	@ (8002de8 <initialize_kalman_filters+0x4c>)
 8002dae:	4810      	ldr	r0, [pc, #64]	@ (8002df0 <initialize_kalman_filters+0x54>)
 8002db0:	f7ff ff86 	bl	8002cc0 <kalman_filter_init>
    
    // Yaw: No absolute reference, rely more on gyroscope
    kalman_filter_init(&kalman_yaw, 0.01f, 0.2f);    // Yaw filter - Higher Q = more responsive
 8002db4:	4a0f      	ldr	r2, [pc, #60]	@ (8002df4 <initialize_kalman_filters+0x58>)
 8002db6:	490c      	ldr	r1, [pc, #48]	@ (8002de8 <initialize_kalman_filters+0x4c>)
 8002db8:	480f      	ldr	r0, [pc, #60]	@ (8002df8 <initialize_kalman_filters+0x5c>)
 8002dba:	f7ff ff81 	bl	8002cc0 <kalman_filter_init>
    // kalman_filter_init(&kalman_roll, 0.001f, 0.1f);   // Roll filter - Lower Q, Higher R = more stable
    // kalman_filter_init(&kalman_pitch, 0.001f, 0.1f);  // Pitch filter - Lower Q, Higher R = more stable
    // kalman_filter_init(&kalman_yaw, 0.001f, 0.5f);    // Yaw filter - Lower Q = more stable
    
    // Initialize orientation to zero
    orientation.roll = 0.0f;
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <initialize_kalman_filters+0x60>)
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
    orientation.pitch = 0.0f;
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dfc <initialize_kalman_filters+0x60>)
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	605a      	str	r2, [r3, #4]
    orientation.yaw = 0.0f;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <initialize_kalman_filters+0x60>)
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
    
    // Initialize time reference
    last_time = HAL_GetTick();
 8002dd6:	f001 fca9 	bl	800472c <HAL_GetTick>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4a08      	ldr	r2, [pc, #32]	@ (8002e00 <initialize_kalman_filters+0x64>)
 8002dde:	6013      	str	r3, [r2, #0]
}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	3d4ccccd 	.word	0x3d4ccccd
 8002de8:	3c23d70a 	.word	0x3c23d70a
 8002dec:	20000448 	.word	0x20000448
 8002df0:	2000045c 	.word	0x2000045c
 8002df4:	3e4ccccd 	.word	0x3e4ccccd
 8002df8:	20000470 	.word	0x20000470
 8002dfc:	20000438 	.word	0x20000438
 8002e00:	20000444 	.word	0x20000444

08002e04 <is_device_stationary>:
        kalman_filter_init(&kalman_yaw, 0.001f, 0.5f);    // Low Q
    }
}

bool is_device_stationary(void)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
    // Calculate the magnitude of acceleration and gyroscope
    float accel_magnitude = sqrtf(accel_x*accel_x + accel_y*accel_y + accel_z*accel_z);
 8002e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f00 <is_device_stationary+0xfc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f00 <is_device_stationary+0xfc>)
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd ff95 	bl	8000d44 <__aeabi_fmul>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461c      	mov	r4, r3
 8002e1e:	4b39      	ldr	r3, [pc, #228]	@ (8002f04 <is_device_stationary+0x100>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a38      	ldr	r2, [pc, #224]	@ (8002f04 <is_device_stationary+0x100>)
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd ff8b 	bl	8000d44 <__aeabi_fmul>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4619      	mov	r1, r3
 8002e32:	4620      	mov	r0, r4
 8002e34:	f7fd fe7e 	bl	8000b34 <__addsf3>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	461c      	mov	r4, r3
 8002e3c:	4b32      	ldr	r3, [pc, #200]	@ (8002f08 <is_device_stationary+0x104>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a31      	ldr	r2, [pc, #196]	@ (8002f08 <is_device_stationary+0x104>)
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd ff7c 	bl	8000d44 <__aeabi_fmul>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4620      	mov	r0, r4
 8002e52:	f7fd fe6f 	bl	8000b34 <__addsf3>
 8002e56:	4603      	mov	r3, r0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f008 fc1e 	bl	800b69a <sqrtf>
 8002e5e:	60f8      	str	r0, [r7, #12]
    float gyro_magnitude = sqrtf(gyro_x*gyro_x + gyro_y*gyro_y + gyro_z*gyro_z);
 8002e60:	4b2a      	ldr	r3, [pc, #168]	@ (8002f0c <is_device_stationary+0x108>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a29      	ldr	r2, [pc, #164]	@ (8002f0c <is_device_stationary+0x108>)
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd ff6a 	bl	8000d44 <__aeabi_fmul>
 8002e70:	4603      	mov	r3, r0
 8002e72:	461c      	mov	r4, r3
 8002e74:	4b26      	ldr	r3, [pc, #152]	@ (8002f10 <is_device_stationary+0x10c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a25      	ldr	r2, [pc, #148]	@ (8002f10 <is_device_stationary+0x10c>)
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd ff60 	bl	8000d44 <__aeabi_fmul>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4619      	mov	r1, r3
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f7fd fe53 	bl	8000b34 <__addsf3>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461c      	mov	r4, r3
 8002e92:	4b20      	ldr	r3, [pc, #128]	@ (8002f14 <is_device_stationary+0x110>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1f      	ldr	r2, [pc, #124]	@ (8002f14 <is_device_stationary+0x110>)
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd ff51 	bl	8000d44 <__aeabi_fmul>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f7fd fe44 	bl	8000b34 <__addsf3>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f008 fbf3 	bl	800b69a <sqrtf>
 8002eb4:	60b8      	str	r0, [r7, #8]
    
    // Device is considered stationary if:
    // - Acceleration is close to 1g (9.81 m/s²) with some tolerance
    // - Gyroscope readings are very low
    float accel_tolerance = 0.5f;  // 0.5 m/s² tolerance
 8002eb6:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8002eba:	607b      	str	r3, [r7, #4]
    float gyro_threshold = 0.5f;   // 0.5 °/s threshold
 8002ebc:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8002ec0:	603b      	str	r3, [r7, #0]
    
    return (fabsf(accel_magnitude - 9.81f) < accel_tolerance) && (gyro_magnitude < gyro_threshold);
 8002ec2:	4915      	ldr	r1, [pc, #84]	@ (8002f18 <is_device_stationary+0x114>)
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7fd fe33 	bl	8000b30 <__aeabi_fsub>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe f8f2 	bl	80010bc <__aeabi_fcmpgt>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <is_device_stationary+0xec>
 8002ede:	6839      	ldr	r1, [r7, #0]
 8002ee0:	68b8      	ldr	r0, [r7, #8]
 8002ee2:	f7fe f8cd 	bl	8001080 <__aeabi_fcmplt>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <is_device_stationary+0xec>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <is_device_stationary+0xee>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	b2db      	uxtb	r3, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd90      	pop	{r4, r7, pc}
 8002f00:	200005d8 	.word	0x200005d8
 8002f04:	200005dc 	.word	0x200005dc
 8002f08:	200005e0 	.word	0x200005e0
 8002f0c:	200005cc 	.word	0x200005cc
 8002f10:	200005d0 	.word	0x200005d0
 8002f14:	200005d4 	.word	0x200005d4
 8002f18:	411cf5c3 	.word	0x411cf5c3

08002f1c <adjust_kalman_parameters>:

void adjust_kalman_parameters(void)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
    static uint32_t last_adjustment = 0;
    uint32_t now = HAL_GetTick();
 8002f22:	f001 fc03 	bl	800472c <HAL_GetTick>
 8002f26:	6078      	str	r0, [r7, #4]
    
    // Adjust parameters every 2 seconds (more frequent for better responsiveness)
    if (now - last_adjustment > 2000) {
 8002f28:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <adjust_kalman_parameters+0xf4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002f34:	d967      	bls.n	8003006 <adjust_kalman_parameters+0xea>
        float motion_intensity = sqrtf(gyro_x*gyro_x + gyro_y*gyro_y + gyro_z*gyro_z);
 8002f36:	4b37      	ldr	r3, [pc, #220]	@ (8003014 <adjust_kalman_parameters+0xf8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a36      	ldr	r2, [pc, #216]	@ (8003014 <adjust_kalman_parameters+0xf8>)
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd feff 	bl	8000d44 <__aeabi_fmul>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461c      	mov	r4, r3
 8002f4a:	4b33      	ldr	r3, [pc, #204]	@ (8003018 <adjust_kalman_parameters+0xfc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a32      	ldr	r2, [pc, #200]	@ (8003018 <adjust_kalman_parameters+0xfc>)
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd fef5 	bl	8000d44 <__aeabi_fmul>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4620      	mov	r0, r4
 8002f60:	f7fd fde8 	bl	8000b34 <__addsf3>
 8002f64:	4603      	mov	r3, r0
 8002f66:	461c      	mov	r4, r3
 8002f68:	4b2c      	ldr	r3, [pc, #176]	@ (800301c <adjust_kalman_parameters+0x100>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800301c <adjust_kalman_parameters+0x100>)
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd fee6 	bl	8000d44 <__aeabi_fmul>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7fd fdd9 	bl	8000b34 <__addsf3>
 8002f82:	4603      	mov	r3, r0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f008 fb88 	bl	800b69a <sqrtf>
 8002f8a:	6038      	str	r0, [r7, #0]
        
        if (is_device_stationary()) {
 8002f8c:	f7ff ff3a 	bl	8002e04 <is_device_stationary>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <adjust_kalman_parameters+0x8e>
            // When stationary, use stable settings
            kalman_roll.Q = 0.001f;
 8002f96:	4b22      	ldr	r3, [pc, #136]	@ (8003020 <adjust_kalman_parameters+0x104>)
 8002f98:	4a22      	ldr	r2, [pc, #136]	@ (8003024 <adjust_kalman_parameters+0x108>)
 8002f9a:	601a      	str	r2, [r3, #0]
            kalman_pitch.Q = 0.001f;
 8002f9c:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <adjust_kalman_parameters+0x10c>)
 8002f9e:	4a21      	ldr	r2, [pc, #132]	@ (8003024 <adjust_kalman_parameters+0x108>)
 8002fa0:	601a      	str	r2, [r3, #0]
            kalman_yaw.Q = 0.001f;
 8002fa2:	4b22      	ldr	r3, [pc, #136]	@ (800302c <adjust_kalman_parameters+0x110>)
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003024 <adjust_kalman_parameters+0x108>)
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e02a      	b.n	8003000 <adjust_kalman_parameters+0xe4>
        } else if (motion_intensity > 10.0f) {
 8002faa:	4921      	ldr	r1, [pc, #132]	@ (8003030 <adjust_kalman_parameters+0x114>)
 8002fac:	6838      	ldr	r0, [r7, #0]
 8002fae:	f7fe f885 	bl	80010bc <__aeabi_fcmpgt>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <adjust_kalman_parameters+0xb0>
            // High motion - very responsive
            kalman_roll.Q = 0.05f;
 8002fb8:	4b19      	ldr	r3, [pc, #100]	@ (8003020 <adjust_kalman_parameters+0x104>)
 8002fba:	4a1e      	ldr	r2, [pc, #120]	@ (8003034 <adjust_kalman_parameters+0x118>)
 8002fbc:	601a      	str	r2, [r3, #0]
            kalman_pitch.Q = 0.05f;
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8003028 <adjust_kalman_parameters+0x10c>)
 8002fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8003034 <adjust_kalman_parameters+0x118>)
 8002fc2:	601a      	str	r2, [r3, #0]
            kalman_yaw.Q = 0.05f;
 8002fc4:	4b19      	ldr	r3, [pc, #100]	@ (800302c <adjust_kalman_parameters+0x110>)
 8002fc6:	4a1b      	ldr	r2, [pc, #108]	@ (8003034 <adjust_kalman_parameters+0x118>)
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	e019      	b.n	8003000 <adjust_kalman_parameters+0xe4>
        } else if (motion_intensity > 5.0f) {
 8002fcc:	491a      	ldr	r1, [pc, #104]	@ (8003038 <adjust_kalman_parameters+0x11c>)
 8002fce:	6838      	ldr	r0, [r7, #0]
 8002fd0:	f7fe f874 	bl	80010bc <__aeabi_fcmpgt>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <adjust_kalman_parameters+0xd2>
            // Medium motion - responsive
            kalman_roll.Q = 0.02f;
 8002fda:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <adjust_kalman_parameters+0x104>)
 8002fdc:	4a17      	ldr	r2, [pc, #92]	@ (800303c <adjust_kalman_parameters+0x120>)
 8002fde:	601a      	str	r2, [r3, #0]
            kalman_pitch.Q = 0.02f;
 8002fe0:	4b11      	ldr	r3, [pc, #68]	@ (8003028 <adjust_kalman_parameters+0x10c>)
 8002fe2:	4a16      	ldr	r2, [pc, #88]	@ (800303c <adjust_kalman_parameters+0x120>)
 8002fe4:	601a      	str	r2, [r3, #0]
            kalman_yaw.Q = 0.02f;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	@ (800302c <adjust_kalman_parameters+0x110>)
 8002fe8:	4a14      	ldr	r2, [pc, #80]	@ (800303c <adjust_kalman_parameters+0x120>)
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e008      	b.n	8003000 <adjust_kalman_parameters+0xe4>
        } else {
            // Low motion - moderately responsive
            kalman_roll.Q = 0.01f;
 8002fee:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <adjust_kalman_parameters+0x104>)
 8002ff0:	4a13      	ldr	r2, [pc, #76]	@ (8003040 <adjust_kalman_parameters+0x124>)
 8002ff2:	601a      	str	r2, [r3, #0]
            kalman_pitch.Q = 0.01f;
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <adjust_kalman_parameters+0x10c>)
 8002ff6:	4a12      	ldr	r2, [pc, #72]	@ (8003040 <adjust_kalman_parameters+0x124>)
 8002ff8:	601a      	str	r2, [r3, #0]
            kalman_yaw.Q = 0.01f;
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <adjust_kalman_parameters+0x110>)
 8002ffc:	4a10      	ldr	r2, [pc, #64]	@ (8003040 <adjust_kalman_parameters+0x124>)
 8002ffe:	601a      	str	r2, [r3, #0]
        }
        
        last_adjustment = now;
 8003000:	4a03      	ldr	r2, [pc, #12]	@ (8003010 <adjust_kalman_parameters+0xf4>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6013      	str	r3, [r2, #0]
    }
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bd90      	pop	{r4, r7, pc}
 800300e:	bf00      	nop
 8003010:	2000072c 	.word	0x2000072c
 8003014:	200005cc 	.word	0x200005cc
 8003018:	200005d0 	.word	0x200005d0
 800301c:	200005d4 	.word	0x200005d4
 8003020:	20000448 	.word	0x20000448
 8003024:	3a83126f 	.word	0x3a83126f
 8003028:	2000045c 	.word	0x2000045c
 800302c:	20000470 	.word	0x20000470
 8003030:	41200000 	.word	0x41200000
 8003034:	3d4ccccd 	.word	0x3d4ccccd
 8003038:	40a00000 	.word	0x40a00000
 800303c:	3ca3d70a 	.word	0x3ca3d70a
 8003040:	3c23d70a 	.word	0x3c23d70a

08003044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b08b      	sub	sp, #44	@ 0x2c
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* Configure GPS to output at 5Hz */
  uint8_t setRate5Hz[] = {
 800304a:	4b37      	ldr	r3, [pc, #220]	@ (8003128 <main+0xe4>)
 800304c:	f107 0414 	add.w	r4, r7, #20
 8003050:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003052:	c407      	stmia	r4!, {r0, r1, r2}
 8003054:	8023      	strh	r3, [r4, #0]
	  0x01, 0x00,   // navRate = 1
	  0x01, 0x00,   // timeRef = GPS time
	  0xDE, 0x6A    // Checksum
  };

  HAL_Delay(1000);
 8003056:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800305a:	f001 fb71 	bl	8004740 <HAL_Delay>
  HAL_UART_Transmit(&huart2, setRate5Hz, sizeof(setRate5Hz), HAL_MAX_DELAY);
 800305e:	f107 0114 	add.w	r1, r7, #20
 8003062:	f04f 33ff 	mov.w	r3, #4294967295
 8003066:	220e      	movs	r2, #14
 8003068:	4830      	ldr	r0, [pc, #192]	@ (800312c <main+0xe8>)
 800306a:	f004 fe15 	bl	8007c98 <HAL_UART_Transmit>
  HAL_Delay(1000);
 800306e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003072:	f001 fb65 	bl	8004740 <HAL_Delay>

  lwgps_init(&gps);
 8003076:	482e      	ldr	r0, [pc, #184]	@ (8003130 <main+0xec>)
 8003078:	f7ff fc5f 	bl	800293a <lwgps_init>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800307c:	2201      	movs	r2, #1
 800307e:	492d      	ldr	r1, [pc, #180]	@ (8003134 <main+0xf0>)
 8003080:	482a      	ldr	r0, [pc, #168]	@ (800312c <main+0xe8>)
 8003082:	f004 fec9 	bl	8007e18 <HAL_UART_Receive_IT>
  HAL_Delay(200);
 8003086:	20c8      	movs	r0, #200	@ 0xc8
 8003088:	f001 fb5a 	bl	8004740 <HAL_Delay>
  print_gps_debug_info();
 800308c:	f7ff fda0 	bl	8002bd0 <print_gps_debug_info>

  sensor_data_t accel_data, gyro_data;
  uint32_t debug_counter = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003094:	f001 faf2 	bl	800467c <HAL_Init>

  /* USER CODE BEGIN Init */
  initialize_sensors();
 8003098:	f000 fa36 	bl	8003508 <initialize_sensors>

  /* Initialize Kalman filters for angle estimation */
  initialize_kalman_filters();
 800309c:	f7ff fe7e 	bl	8002d9c <initialize_kalman_filters>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030a0:	f000 f850 	bl	8003144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030a4:	f000 f9e6 	bl	8003474 <MX_GPIO_Init>
  MX_DMA_Init();
 80030a8:	f000 f9c6 	bl	8003438 <MX_DMA_Init>
  MX_I2C1_Init();
 80030ac:	f000 f890 	bl	80031d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80030b0:	f000 f8bc 	bl	800322c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80030b4:	f000 f942 	bl	800333c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80030b8:	f000 f96a 	bl	8003390 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80030bc:	f000 f992 	bl	80033e4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80030c0:	f000 f8ea 	bl	8003298 <MX_TIM1_Init>
    while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    	/* BME280 */
        read_bme280_data();
 80030c4:	f000 fa30 	bl	8003528 <read_bme280_data>

        /* IMU */
        read_accelerometer_data(&accel_data);
 80030c8:	f107 030c 	add.w	r3, r7, #12
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fa55 	bl	800357c <read_accelerometer_data>
        read_gyroscope_data(&gyro_data);
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fa7e 	bl	80035d6 <read_gyroscope_data>
        calculate_orientation(&accel_data, &gyro_data, &orientation);
 80030da:	1d39      	adds	r1, r7, #4
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	4a15      	ldr	r2, [pc, #84]	@ (8003138 <main+0xf4>)
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fad2 	bl	800368c <calculate_orientation>

        /* Adjust Kalman filter parameters based on motion state */
        adjust_kalman_parameters();
 80030e8:	f7ff ff18 	bl	8002f1c <adjust_kalman_parameters>
            orientation.roll,
            orientation.pitch,
            orientation.yaw
        );*/

        if (++debug_counter >= 50) {
 80030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ee:	3301      	adds	r3, #1
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	2b31      	cmp	r3, #49	@ 0x31
 80030f6:	d903      	bls.n	8003100 <main+0xbc>
#if 0
            print_gps_debug_info();
#endif
            check_uart_errors();
 80030f8:	f7ff fd9c 	bl	8002c34 <check_uart_errors>

            /* Debug Kalman filter performance */
            //print_kalman_debug_info();
            // adjust_kalman_parameters(); // Adjust parameters after each debug cycle - Moved to IMU calculation

            debug_counter = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        HAL_Delay(MEASUREMENT_DELAY);
 8003100:	20be      	movs	r0, #190	@ 0xbe
 8003102:	f001 fb1d 	bl	8004740 <HAL_Delay>

        //SUT
        if (packet_received) {
 8003106:	4b0d      	ldr	r3, [pc, #52]	@ (800313c <main+0xf8>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0da      	beq.n	80030c4 <main+0x80>
		  packet_received = 0;
 800310e:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <main+0xf8>)
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]

		  // Process the received packet
		  ParseTelemetryPacket(rx_buffer_sut);
 8003114:	480a      	ldr	r0, [pc, #40]	@ (8003140 <main+0xfc>)
 8003116:	f000 fca5 	bl	8003a64 <ParseTelemetryPacket>
		  // Apply filtering to telemetry values
		  ApplyFiltering();
 800311a:	f000 ff21 	bl	8003f60 <ApplyFiltering>
		  // Update status based on telemetry data
		  UpdateStatusFromTelemetry();
 800311e:	f000 fdf9 	bl	8003d14 <UpdateStatusFromTelemetry>
		  // Send status message instead of telemetry data
		  SendStatusMessage();
 8003122:	f000 fed7 	bl	8003ed4 <SendStatusMessage>
        read_bme280_data();
 8003126:	e7cd      	b.n	80030c4 <main+0x80>
 8003128:	0800c428 	.word	0x0800c428
 800312c:	20000364 	.word	0x20000364
 8003130:	20000488 	.word	0x20000488
 8003134:	200005b9 	.word	0x200005b9
 8003138:	20000438 	.word	0x20000438
 800313c:	20000628 	.word	0x20000628
 8003140:	20000604 	.word	0x20000604

08003144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b090      	sub	sp, #64	@ 0x40
 8003148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800314a:	f107 0318 	add.w	r3, r7, #24
 800314e:	2228      	movs	r2, #40	@ 0x28
 8003150:	2100      	movs	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f006 f969 	bl	800942a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003158:	1d3b      	adds	r3, r7, #4
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	60da      	str	r2, [r3, #12]
 8003164:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003166:	2301      	movs	r3, #1
 8003168:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800316a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800316e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003174:	2301      	movs	r3, #1
 8003176:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003178:	2302      	movs	r3, #2
 800317a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800317c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003180:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003182:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003186:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003188:	f107 0318 	add.w	r3, r7, #24
 800318c:	4618      	mov	r0, r3
 800318e:	f003 f81f 	bl	80061d0 <HAL_RCC_OscConfig>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003198:	f000 ff60 	bl	800405c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800319c:	230f      	movs	r3, #15
 800319e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031a0:	2302      	movs	r3, #2
 80031a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	2102      	movs	r1, #2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f003 fa8c 	bl	80066d4 <HAL_RCC_ClockConfig>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80031c2:	f000 ff4b 	bl	800405c <Error_Handler>
  }
}
 80031c6:	bf00      	nop
 80031c8:	3740      	adds	r7, #64	@ 0x40
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031d4:	4b12      	ldr	r3, [pc, #72]	@ (8003220 <MX_I2C1_Init+0x50>)
 80031d6:	4a13      	ldr	r2, [pc, #76]	@ (8003224 <MX_I2C1_Init+0x54>)
 80031d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80031da:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <MX_I2C1_Init+0x50>)
 80031dc:	4a12      	ldr	r2, [pc, #72]	@ (8003228 <MX_I2C1_Init+0x58>)
 80031de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003220 <MX_I2C1_Init+0x50>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003220 <MX_I2C1_Init+0x50>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003220 <MX_I2C1_Init+0x50>)
 80031ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <MX_I2C1_Init+0x50>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031fa:	4b09      	ldr	r3, [pc, #36]	@ (8003220 <MX_I2C1_Init+0x50>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003200:	4b07      	ldr	r3, [pc, #28]	@ (8003220 <MX_I2C1_Init+0x50>)
 8003202:	2200      	movs	r2, #0
 8003204:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003206:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <MX_I2C1_Init+0x50>)
 8003208:	2200      	movs	r2, #0
 800320a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800320c:	4804      	ldr	r0, [pc, #16]	@ (8003220 <MX_I2C1_Init+0x50>)
 800320e:	f001 ff79 	bl	8005104 <HAL_I2C_Init>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003218:	f000 ff20 	bl	800405c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20000228 	.word	0x20000228
 8003224:	40005400 	.word	0x40005400
 8003228:	000186a0 	.word	0x000186a0

0800322c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003230:	4b17      	ldr	r3, [pc, #92]	@ (8003290 <MX_SPI1_Init+0x64>)
 8003232:	4a18      	ldr	r2, [pc, #96]	@ (8003294 <MX_SPI1_Init+0x68>)
 8003234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003236:	4b16      	ldr	r3, [pc, #88]	@ (8003290 <MX_SPI1_Init+0x64>)
 8003238:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800323c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800323e:	4b14      	ldr	r3, [pc, #80]	@ (8003290 <MX_SPI1_Init+0x64>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003244:	4b12      	ldr	r3, [pc, #72]	@ (8003290 <MX_SPI1_Init+0x64>)
 8003246:	2200      	movs	r2, #0
 8003248:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800324a:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <MX_SPI1_Init+0x64>)
 800324c:	2200      	movs	r2, #0
 800324e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003250:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <MX_SPI1_Init+0x64>)
 8003252:	2200      	movs	r2, #0
 8003254:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003256:	4b0e      	ldr	r3, [pc, #56]	@ (8003290 <MX_SPI1_Init+0x64>)
 8003258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800325c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800325e:	4b0c      	ldr	r3, [pc, #48]	@ (8003290 <MX_SPI1_Init+0x64>)
 8003260:	2230      	movs	r2, #48	@ 0x30
 8003262:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003264:	4b0a      	ldr	r3, [pc, #40]	@ (8003290 <MX_SPI1_Init+0x64>)
 8003266:	2200      	movs	r2, #0
 8003268:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800326a:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <MX_SPI1_Init+0x64>)
 800326c:	2200      	movs	r2, #0
 800326e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003270:	4b07      	ldr	r3, [pc, #28]	@ (8003290 <MX_SPI1_Init+0x64>)
 8003272:	2200      	movs	r2, #0
 8003274:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <MX_SPI1_Init+0x64>)
 8003278:	220a      	movs	r2, #10
 800327a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800327c:	4804      	ldr	r0, [pc, #16]	@ (8003290 <MX_SPI1_Init+0x64>)
 800327e:	f003 fbb7 	bl	80069f0 <HAL_SPI_Init>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003288:	f000 fee8 	bl	800405c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800328c:	bf00      	nop
 800328e:	bd80      	pop	{r7, pc}
 8003290:	2000027c 	.word	0x2000027c
 8003294:	40013000 	.word	0x40013000

08003298 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800329e:	f107 030c 	add.w	r3, r7, #12
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	609a      	str	r2, [r3, #8]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ae:	1d3b      	adds	r3, r7, #4
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003334 <MX_TIM1_Init+0x9c>)
 80032b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003338 <MX_TIM1_Init+0xa0>)
 80032ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80032bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003334 <MX_TIM1_Init+0x9c>)
 80032be:	2200      	movs	r2, #0
 80032c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003334 <MX_TIM1_Init+0x9c>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80032c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003334 <MX_TIM1_Init+0x9c>)
 80032ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032d0:	4b18      	ldr	r3, [pc, #96]	@ (8003334 <MX_TIM1_Init+0x9c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032d6:	4b17      	ldr	r3, [pc, #92]	@ (8003334 <MX_TIM1_Init+0x9c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032dc:	4b15      	ldr	r3, [pc, #84]	@ (8003334 <MX_TIM1_Init+0x9c>)
 80032de:	2200      	movs	r2, #0
 80032e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032e2:	4814      	ldr	r0, [pc, #80]	@ (8003334 <MX_TIM1_Init+0x9c>)
 80032e4:	f004 fa1d 	bl	8007722 <HAL_TIM_Base_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80032ee:	f000 feb5 	bl	800405c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80032f2:	2307      	movs	r3, #7
 80032f4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	4619      	mov	r1, r3
 8003300:	480c      	ldr	r0, [pc, #48]	@ (8003334 <MX_TIM1_Init+0x9c>)
 8003302:	f004 fa5d 	bl	80077c0 <HAL_TIM_SlaveConfigSynchro>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800330c:	f000 fea6 	bl	800405c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003310:	2300      	movs	r3, #0
 8003312:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	4619      	mov	r1, r3
 800331c:	4805      	ldr	r0, [pc, #20]	@ (8003334 <MX_TIM1_Init+0x9c>)
 800331e:	f004 fc0d 	bl	8007b3c <HAL_TIMEx_MasterConfigSynchronization>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003328:	f000 fe98 	bl	800405c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800332c:	bf00      	nop
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200002d4 	.word	0x200002d4
 8003338:	40012c00 	.word	0x40012c00

0800333c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003340:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003342:	4a12      	ldr	r2, [pc, #72]	@ (800338c <MX_USART1_UART_Init+0x50>)
 8003344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003346:	4b10      	ldr	r3, [pc, #64]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800334c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800334e:	4b0e      	ldr	r3, [pc, #56]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003354:	4b0c      	ldr	r3, [pc, #48]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003356:	2200      	movs	r2, #0
 8003358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800335a:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 800335c:	2200      	movs	r2, #0
 800335e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003360:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003362:	220c      	movs	r2, #12
 8003364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003366:	4b08      	ldr	r3, [pc, #32]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003368:	2200      	movs	r2, #0
 800336a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800336c:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 800336e:	2200      	movs	r2, #0
 8003370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003372:	4805      	ldr	r0, [pc, #20]	@ (8003388 <MX_USART1_UART_Init+0x4c>)
 8003374:	f004 fc40 	bl	8007bf8 <HAL_UART_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800337e:	f000 fe6d 	bl	800405c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	2000031c 	.word	0x2000031c
 800338c:	40013800 	.word	0x40013800

08003390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003394:	4b11      	ldr	r3, [pc, #68]	@ (80033dc <MX_USART2_UART_Init+0x4c>)
 8003396:	4a12      	ldr	r2, [pc, #72]	@ (80033e0 <MX_USART2_UART_Init+0x50>)
 8003398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800339a:	4b10      	ldr	r3, [pc, #64]	@ (80033dc <MX_USART2_UART_Init+0x4c>)
 800339c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033a2:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <MX_USART2_UART_Init+0x4c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033a8:	4b0c      	ldr	r3, [pc, #48]	@ (80033dc <MX_USART2_UART_Init+0x4c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033ae:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <MX_USART2_UART_Init+0x4c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033b4:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <MX_USART2_UART_Init+0x4c>)
 80033b6:	220c      	movs	r2, #12
 80033b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ba:	4b08      	ldr	r3, [pc, #32]	@ (80033dc <MX_USART2_UART_Init+0x4c>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c0:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <MX_USART2_UART_Init+0x4c>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033c6:	4805      	ldr	r0, [pc, #20]	@ (80033dc <MX_USART2_UART_Init+0x4c>)
 80033c8:	f004 fc16 	bl	8007bf8 <HAL_UART_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80033d2:	f000 fe43 	bl	800405c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000364 	.word	0x20000364
 80033e0:	40004400 	.word	0x40004400

080033e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033e8:	4b11      	ldr	r3, [pc, #68]	@ (8003430 <MX_USART3_UART_Init+0x4c>)
 80033ea:	4a12      	ldr	r2, [pc, #72]	@ (8003434 <MX_USART3_UART_Init+0x50>)
 80033ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033ee:	4b10      	ldr	r3, [pc, #64]	@ (8003430 <MX_USART3_UART_Init+0x4c>)
 80033f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003430 <MX_USART3_UART_Init+0x4c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <MX_USART3_UART_Init+0x4c>)
 80033fe:	2200      	movs	r2, #0
 8003400:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003402:	4b0b      	ldr	r3, [pc, #44]	@ (8003430 <MX_USART3_UART_Init+0x4c>)
 8003404:	2200      	movs	r2, #0
 8003406:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003408:	4b09      	ldr	r3, [pc, #36]	@ (8003430 <MX_USART3_UART_Init+0x4c>)
 800340a:	220c      	movs	r2, #12
 800340c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800340e:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <MX_USART3_UART_Init+0x4c>)
 8003410:	2200      	movs	r2, #0
 8003412:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003414:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <MX_USART3_UART_Init+0x4c>)
 8003416:	2200      	movs	r2, #0
 8003418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800341a:	4805      	ldr	r0, [pc, #20]	@ (8003430 <MX_USART3_UART_Init+0x4c>)
 800341c:	f004 fbec 	bl	8007bf8 <HAL_UART_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003426:	f000 fe19 	bl	800405c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	200003ac 	.word	0x200003ac
 8003434:	40004800 	.word	0x40004800

08003438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800343e:	4b0c      	ldr	r3, [pc, #48]	@ (8003470 <MX_DMA_Init+0x38>)
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4a0b      	ldr	r2, [pc, #44]	@ (8003470 <MX_DMA_Init+0x38>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6153      	str	r3, [r2, #20]
 800344a:	4b09      	ldr	r3, [pc, #36]	@ (8003470 <MX_DMA_Init+0x38>)
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	607b      	str	r3, [r7, #4]
 8003454:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	2100      	movs	r1, #0
 800345a:	200f      	movs	r0, #15
 800345c:	f001 fa6b 	bl	8004936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003460:	200f      	movs	r0, #15
 8003462:	f001 fa84 	bl	800496e <HAL_NVIC_EnableIRQ>

}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000

08003474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347a:	f107 0310 	add.w	r3, r7, #16
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	605a      	str	r2, [r3, #4]
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003488:	4b1d      	ldr	r3, [pc, #116]	@ (8003500 <MX_GPIO_Init+0x8c>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	4a1c      	ldr	r2, [pc, #112]	@ (8003500 <MX_GPIO_Init+0x8c>)
 800348e:	f043 0320 	orr.w	r3, r3, #32
 8003492:	6193      	str	r3, [r2, #24]
 8003494:	4b1a      	ldr	r3, [pc, #104]	@ (8003500 <MX_GPIO_Init+0x8c>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a0:	4b17      	ldr	r3, [pc, #92]	@ (8003500 <MX_GPIO_Init+0x8c>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	4a16      	ldr	r2, [pc, #88]	@ (8003500 <MX_GPIO_Init+0x8c>)
 80034a6:	f043 0304 	orr.w	r3, r3, #4
 80034aa:	6193      	str	r3, [r2, #24]
 80034ac:	4b14      	ldr	r3, [pc, #80]	@ (8003500 <MX_GPIO_Init+0x8c>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b8:	4b11      	ldr	r3, [pc, #68]	@ (8003500 <MX_GPIO_Init+0x8c>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	4a10      	ldr	r2, [pc, #64]	@ (8003500 <MX_GPIO_Init+0x8c>)
 80034be:	f043 0308 	orr.w	r3, r3, #8
 80034c2:	6193      	str	r3, [r2, #24]
 80034c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003500 <MX_GPIO_Init+0x8c>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80034d0:	2200      	movs	r2, #0
 80034d2:	2110      	movs	r1, #16
 80034d4:	480b      	ldr	r0, [pc, #44]	@ (8003504 <MX_GPIO_Init+0x90>)
 80034d6:	f001 fdfd 	bl	80050d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034da:	2310      	movs	r3, #16
 80034dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034de:	2301      	movs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	2302      	movs	r3, #2
 80034e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ea:	f107 0310 	add.w	r3, r7, #16
 80034ee:	4619      	mov	r1, r3
 80034f0:	4804      	ldr	r0, [pc, #16]	@ (8003504 <MX_GPIO_Init+0x90>)
 80034f2:	f001 fc6b 	bl	8004dcc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80034f6:	bf00      	nop
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	40010800 	.word	0x40010800

08003508 <initialize_sensors>:

/* USER CODE BEGIN 4 */

/* Initialize BME280 ---------------------------------------------------------*/
void initialize_sensors(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af02      	add	r7, sp, #8
    BME280_Config(OSRS_2, OSRS_2, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 800350e:	2304      	movs	r3, #4
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	2300      	movs	r3, #0
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	2303      	movs	r3, #3
 8003518:	2201      	movs	r2, #1
 800351a:	2102      	movs	r1, #2
 800351c:	2002      	movs	r0, #2
 800351e:	f7fe f8b1 	bl	8001684 <BME280_Config>
}
 8003522:	bf00      	nop
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <read_bme280_data>:

/* Read BME280 data ----------------------------------------------------------*/
void read_bme280_data(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
    BME280_Measure();
 800352c:	f7fe fc9e 	bl	8001e6c <BME280_Measure>
    altitude = 44330.0f * (1.0f - powf((Pressure / 101325.0f), (1.0f / 5.225f)));
 8003530:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <read_bme280_data+0x40>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	490d      	ldr	r1, [pc, #52]	@ (800356c <read_bme280_data+0x44>)
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd fcb8 	bl	8000eac <__aeabi_fdiv>
 800353c:	4603      	mov	r3, r0
 800353e:	490c      	ldr	r1, [pc, #48]	@ (8003570 <read_bme280_data+0x48>)
 8003540:	4618      	mov	r0, r3
 8003542:	f008 f85d 	bl	800b600 <powf>
 8003546:	4603      	mov	r3, r0
 8003548:	4619      	mov	r1, r3
 800354a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800354e:	f7fd faef 	bl	8000b30 <__aeabi_fsub>
 8003552:	4603      	mov	r3, r0
 8003554:	4907      	ldr	r1, [pc, #28]	@ (8003574 <read_bme280_data+0x4c>)
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd fbf4 	bl	8000d44 <__aeabi_fmul>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <read_bme280_data+0x50>)
 8003562:	601a      	str	r2, [r3, #0]
}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}
 8003568:	200005c4 	.word	0x200005c4
 800356c:	47c5e680 	.word	0x47c5e680
 8003570:	3e43fb1a 	.word	0x3e43fb1a
 8003574:	472d2a00 	.word	0x472d2a00
 8003578:	200005c8 	.word	0x200005c8

0800357c <read_accelerometer_data>:

/* Read accelerometer --------------------------------------------------------*/
void read_accelerometer_data(sensor_data_t *accel_data)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
    uint8_t buf[IMU_DATA_SIZE];
    mpu9250_read_data(MPU9250_ACCEL_XOUT_H, buf, 6);
 8003584:	f107 0308 	add.w	r3, r7, #8
 8003588:	2206      	movs	r2, #6
 800358a:	4619      	mov	r1, r3
 800358c:	203b      	movs	r0, #59	@ 0x3b
 800358e:	f000 f84f 	bl	8003630 <mpu9250_read_data>
    accel_data->x = (int16_t)((buf[0] << 8) | buf[1]);
 8003592:	7a3b      	ldrb	r3, [r7, #8]
 8003594:	b21b      	sxth	r3, r3
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	b21a      	sxth	r2, r3
 800359a:	7a7b      	ldrb	r3, [r7, #9]
 800359c:	b21b      	sxth	r3, r3
 800359e:	4313      	orrs	r3, r2
 80035a0:	b21a      	sxth	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	801a      	strh	r2, [r3, #0]
    accel_data->y = (int16_t)((buf[2] << 8) | buf[3]);
 80035a6:	7abb      	ldrb	r3, [r7, #10]
 80035a8:	b21b      	sxth	r3, r3
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	b21a      	sxth	r2, r3
 80035ae:	7afb      	ldrb	r3, [r7, #11]
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	4313      	orrs	r3, r2
 80035b4:	b21a      	sxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	805a      	strh	r2, [r3, #2]
    accel_data->z = (int16_t)((buf[4] << 8) | buf[5]);
 80035ba:	7b3b      	ldrb	r3, [r7, #12]
 80035bc:	b21b      	sxth	r3, r3
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	b21a      	sxth	r2, r3
 80035c2:	7b7b      	ldrb	r3, [r7, #13]
 80035c4:	b21b      	sxth	r3, r3
 80035c6:	4313      	orrs	r3, r2
 80035c8:	b21a      	sxth	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	809a      	strh	r2, [r3, #4]
}
 80035ce:	bf00      	nop
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <read_gyroscope_data>:

/* Read gyroscope ------------------------------------------------------------*/
void read_gyroscope_data(sensor_data_t *gyro_data)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
    uint8_t buf[IMU_DATA_SIZE];
    mpu9250_read_data(MPU9250_GYRO_XOUT_H, buf, 6);
 80035de:	f107 0308 	add.w	r3, r7, #8
 80035e2:	2206      	movs	r2, #6
 80035e4:	4619      	mov	r1, r3
 80035e6:	2043      	movs	r0, #67	@ 0x43
 80035e8:	f000 f822 	bl	8003630 <mpu9250_read_data>
    gyro_data->x = (int16_t)((buf[0] << 8) | buf[1]);
 80035ec:	7a3b      	ldrb	r3, [r7, #8]
 80035ee:	b21b      	sxth	r3, r3
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	b21a      	sxth	r2, r3
 80035f4:	7a7b      	ldrb	r3, [r7, #9]
 80035f6:	b21b      	sxth	r3, r3
 80035f8:	4313      	orrs	r3, r2
 80035fa:	b21a      	sxth	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	801a      	strh	r2, [r3, #0]
    gyro_data->y = (int16_t)((buf[2] << 8) | buf[3]);
 8003600:	7abb      	ldrb	r3, [r7, #10]
 8003602:	b21b      	sxth	r3, r3
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	b21a      	sxth	r2, r3
 8003608:	7afb      	ldrb	r3, [r7, #11]
 800360a:	b21b      	sxth	r3, r3
 800360c:	4313      	orrs	r3, r2
 800360e:	b21a      	sxth	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	805a      	strh	r2, [r3, #2]
    gyro_data->z = (int16_t)((buf[4] << 8) | buf[5]);
 8003614:	7b3b      	ldrb	r3, [r7, #12]
 8003616:	b21b      	sxth	r3, r3
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	b21a      	sxth	r2, r3
 800361c:	7b7b      	ldrb	r3, [r7, #13]
 800361e:	b21b      	sxth	r3, r3
 8003620:	4313      	orrs	r3, r2
 8003622:	b21a      	sxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	809a      	strh	r2, [r3, #4]
}
 8003628:	bf00      	nop
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <mpu9250_read_data>:

/* MPU9250 SPI read ----------------------------------------------------------*/
void mpu9250_read_data(uint8_t reg, uint8_t *data, uint8_t len)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	6039      	str	r1, [r7, #0]
 800363a:	71fb      	strb	r3, [r7, #7]
 800363c:	4613      	mov	r3, r2
 800363e:	71bb      	strb	r3, [r7, #6]
    uint8_t tx = 0x80 | reg;
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003646:	b2db      	uxtb	r3, r3
 8003648:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800364a:	2200      	movs	r2, #0
 800364c:	2110      	movs	r1, #16
 800364e:	480d      	ldr	r0, [pc, #52]	@ (8003684 <mpu9250_read_data+0x54>)
 8003650:	f001 fd40 	bl	80050d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, 100);
 8003654:	f107 010f 	add.w	r1, r7, #15
 8003658:	2364      	movs	r3, #100	@ 0x64
 800365a:	2201      	movs	r2, #1
 800365c:	480a      	ldr	r0, [pc, #40]	@ (8003688 <mpu9250_read_data+0x58>)
 800365e:	f003 fa4b 	bl	8006af8 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, len, 100);
 8003662:	79bb      	ldrb	r3, [r7, #6]
 8003664:	b29a      	uxth	r2, r3
 8003666:	2364      	movs	r3, #100	@ 0x64
 8003668:	6839      	ldr	r1, [r7, #0]
 800366a:	4807      	ldr	r0, [pc, #28]	@ (8003688 <mpu9250_read_data+0x58>)
 800366c:	f003 fb88 	bl	8006d80 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8003670:	2201      	movs	r2, #1
 8003672:	2110      	movs	r1, #16
 8003674:	4803      	ldr	r0, [pc, #12]	@ (8003684 <mpu9250_read_data+0x54>)
 8003676:	f001 fd2d 	bl	80050d4 <HAL_GPIO_WritePin>
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40010800 	.word	0x40010800
 8003688:	2000027c 	.word	0x2000027c

0800368c <calculate_orientation>:

/* Calculate orientation using Kalman filtering ------------------------------*/
void calculate_orientation(sensor_data_t *accel_data, sensor_data_t *gyro_data, orientation_t *o)
{
 800368c:	b5b0      	push	{r4, r5, r7, lr}
 800368e:	b08e      	sub	sp, #56	@ 0x38
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
    /* Convert to units */
    accel_x = accel_data->x / ACCEL_SCALE_FACTOR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd fafc 	bl	8000c9c <__aeabi_i2f>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fd fbfe 	bl	8000eac <__aeabi_fdiv>
 80036b0:	4603      	mov	r3, r0
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b9a      	ldr	r3, [pc, #616]	@ (8003920 <calculate_orientation+0x294>)
 80036b6:	601a      	str	r2, [r3, #0]
    accel_y = accel_data->y / ACCEL_SCALE_FACTOR;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd faec 	bl	8000c9c <__aeabi_i2f>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fd fbee 	bl	8000eac <__aeabi_fdiv>
 80036d0:	4603      	mov	r3, r0
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b93      	ldr	r3, [pc, #588]	@ (8003924 <calculate_orientation+0x298>)
 80036d6:	601a      	str	r2, [r3, #0]
    accel_z = accel_data->z / ACCEL_SCALE_FACTOR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fd fadc 	bl	8000c9c <__aeabi_i2f>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd fbde 	bl	8000eac <__aeabi_fdiv>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003928 <calculate_orientation+0x29c>)
 80036f6:	601a      	str	r2, [r3, #0]
    gyro_x  = gyro_data->x / GYRO_SCALE_FACTOR;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd facc 	bl	8000c9c <__aeabi_i2f>
 8003704:	4603      	mov	r3, r0
 8003706:	4989      	ldr	r1, [pc, #548]	@ (800392c <calculate_orientation+0x2a0>)
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd fbcf 	bl	8000eac <__aeabi_fdiv>
 800370e:	4603      	mov	r3, r0
 8003710:	461a      	mov	r2, r3
 8003712:	4b87      	ldr	r3, [pc, #540]	@ (8003930 <calculate_orientation+0x2a4>)
 8003714:	601a      	str	r2, [r3, #0]
    gyro_y  = gyro_data->y / GYRO_SCALE_FACTOR;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd fabd 	bl	8000c9c <__aeabi_i2f>
 8003722:	4603      	mov	r3, r0
 8003724:	4981      	ldr	r1, [pc, #516]	@ (800392c <calculate_orientation+0x2a0>)
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd fbc0 	bl	8000eac <__aeabi_fdiv>
 800372c:	4603      	mov	r3, r0
 800372e:	461a      	mov	r2, r3
 8003730:	4b80      	ldr	r3, [pc, #512]	@ (8003934 <calculate_orientation+0x2a8>)
 8003732:	601a      	str	r2, [r3, #0]
    gyro_z  = gyro_data->z / GYRO_SCALE_FACTOR;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd faae 	bl	8000c9c <__aeabi_i2f>
 8003740:	4603      	mov	r3, r0
 8003742:	497a      	ldr	r1, [pc, #488]	@ (800392c <calculate_orientation+0x2a0>)
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd fbb1 	bl	8000eac <__aeabi_fdiv>
 800374a:	4603      	mov	r3, r0
 800374c:	461a      	mov	r2, r3
 800374e:	4b7a      	ldr	r3, [pc, #488]	@ (8003938 <calculate_orientation+0x2ac>)
 8003750:	601a      	str	r2, [r3, #0]

    uint32_t now = HAL_GetTick();
 8003752:	f000 ffeb 	bl	800472c <HAL_GetTick>
 8003756:	6338      	str	r0, [r7, #48]	@ 0x30
    float dt = (now - last_time) / 1000.0f;
 8003758:	4b78      	ldr	r3, [pc, #480]	@ (800393c <calculate_orientation+0x2b0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd fa97 	bl	8000c94 <__aeabi_ui2f>
 8003766:	4603      	mov	r3, r0
 8003768:	4975      	ldr	r1, [pc, #468]	@ (8003940 <calculate_orientation+0x2b4>)
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd fb9e 	bl	8000eac <__aeabi_fdiv>
 8003770:	4603      	mov	r3, r0
 8003772:	637b      	str	r3, [r7, #52]	@ 0x34
    last_time = now;
 8003774:	4a71      	ldr	r2, [pc, #452]	@ (800393c <calculate_orientation+0x2b0>)
 8003776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003778:	6013      	str	r3, [r2, #0]
    if (dt <= 0 || dt > 1.0f) dt = 0.01f;
 800377a:	f04f 0100 	mov.w	r1, #0
 800377e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003780:	f7fd fc88 	bl	8001094 <__aeabi_fcmple>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d107      	bne.n	800379a <calculate_orientation+0x10e>
 800378a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800378e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003790:	f7fd fc94 	bl	80010bc <__aeabi_fcmpgt>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <calculate_orientation+0x112>
 800379a:	4b6a      	ldr	r3, [pc, #424]	@ (8003944 <calculate_orientation+0x2b8>)
 800379c:	637b      	str	r3, [r7, #52]	@ 0x34

    // Apply simple gyroscope bias compensation (temperature drift)
    static float gyro_bias_x = 0.0f, gyro_bias_y = 0.0f, gyro_bias_z = 0.0f;
    static uint32_t bias_update_counter = 0;
    
    if (is_device_stationary()) {
 800379e:	f7ff fb31 	bl	8002e04 <is_device_stationary>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d049      	beq.n	800383c <calculate_orientation+0x1b0>
        // Update bias when stationary
        gyro_bias_x = 0.95f * gyro_bias_x + 0.05f * gyro_x;
 80037a8:	4b67      	ldr	r3, [pc, #412]	@ (8003948 <calculate_orientation+0x2bc>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4967      	ldr	r1, [pc, #412]	@ (800394c <calculate_orientation+0x2c0>)
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fac8 	bl	8000d44 <__aeabi_fmul>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461c      	mov	r4, r3
 80037b8:	4b5d      	ldr	r3, [pc, #372]	@ (8003930 <calculate_orientation+0x2a4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4964      	ldr	r1, [pc, #400]	@ (8003950 <calculate_orientation+0x2c4>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd fac0 	bl	8000d44 <__aeabi_fmul>
 80037c4:	4603      	mov	r3, r0
 80037c6:	4619      	mov	r1, r3
 80037c8:	4620      	mov	r0, r4
 80037ca:	f7fd f9b3 	bl	8000b34 <__addsf3>
 80037ce:	4603      	mov	r3, r0
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003948 <calculate_orientation+0x2bc>)
 80037d4:	601a      	str	r2, [r3, #0]
        gyro_bias_y = 0.95f * gyro_bias_y + 0.05f * gyro_y;
 80037d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003954 <calculate_orientation+0x2c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	495c      	ldr	r1, [pc, #368]	@ (800394c <calculate_orientation+0x2c0>)
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd fab1 	bl	8000d44 <__aeabi_fmul>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461c      	mov	r4, r3
 80037e6:	4b53      	ldr	r3, [pc, #332]	@ (8003934 <calculate_orientation+0x2a8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4959      	ldr	r1, [pc, #356]	@ (8003950 <calculate_orientation+0x2c4>)
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fd faa9 	bl	8000d44 <__aeabi_fmul>
 80037f2:	4603      	mov	r3, r0
 80037f4:	4619      	mov	r1, r3
 80037f6:	4620      	mov	r0, r4
 80037f8:	f7fd f99c 	bl	8000b34 <__addsf3>
 80037fc:	4603      	mov	r3, r0
 80037fe:	461a      	mov	r2, r3
 8003800:	4b54      	ldr	r3, [pc, #336]	@ (8003954 <calculate_orientation+0x2c8>)
 8003802:	601a      	str	r2, [r3, #0]
        gyro_bias_z = 0.95f * gyro_bias_z + 0.05f * gyro_z;
 8003804:	4b54      	ldr	r3, [pc, #336]	@ (8003958 <calculate_orientation+0x2cc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4950      	ldr	r1, [pc, #320]	@ (800394c <calculate_orientation+0x2c0>)
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd fa9a 	bl	8000d44 <__aeabi_fmul>
 8003810:	4603      	mov	r3, r0
 8003812:	461c      	mov	r4, r3
 8003814:	4b48      	ldr	r3, [pc, #288]	@ (8003938 <calculate_orientation+0x2ac>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	494d      	ldr	r1, [pc, #308]	@ (8003950 <calculate_orientation+0x2c4>)
 800381a:	4618      	mov	r0, r3
 800381c:	f7fd fa92 	bl	8000d44 <__aeabi_fmul>
 8003820:	4603      	mov	r3, r0
 8003822:	4619      	mov	r1, r3
 8003824:	4620      	mov	r0, r4
 8003826:	f7fd f985 	bl	8000b34 <__addsf3>
 800382a:	4603      	mov	r3, r0
 800382c:	461a      	mov	r2, r3
 800382e:	4b4a      	ldr	r3, [pc, #296]	@ (8003958 <calculate_orientation+0x2cc>)
 8003830:	601a      	str	r2, [r3, #0]
        bias_update_counter++;
 8003832:	4b4a      	ldr	r3, [pc, #296]	@ (800395c <calculate_orientation+0x2d0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3301      	adds	r3, #1
 8003838:	4a48      	ldr	r2, [pc, #288]	@ (800395c <calculate_orientation+0x2d0>)
 800383a:	6013      	str	r3, [r2, #0]
    }
    
    // Apply bias compensation
    float gyro_x_comp = gyro_x - gyro_bias_x;
 800383c:	4b3c      	ldr	r3, [pc, #240]	@ (8003930 <calculate_orientation+0x2a4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a41      	ldr	r2, [pc, #260]	@ (8003948 <calculate_orientation+0x2bc>)
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd f972 	bl	8000b30 <__aeabi_fsub>
 800384c:	4603      	mov	r3, r0
 800384e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float gyro_y_comp = gyro_y - gyro_bias_y;
 8003850:	4b38      	ldr	r3, [pc, #224]	@ (8003934 <calculate_orientation+0x2a8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a3f      	ldr	r2, [pc, #252]	@ (8003954 <calculate_orientation+0x2c8>)
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f7fd f968 	bl	8000b30 <__aeabi_fsub>
 8003860:	4603      	mov	r3, r0
 8003862:	62bb      	str	r3, [r7, #40]	@ 0x28
    float gyro_z_comp = gyro_z - gyro_bias_z;
 8003864:	4b34      	ldr	r3, [pc, #208]	@ (8003938 <calculate_orientation+0x2ac>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a3b      	ldr	r2, [pc, #236]	@ (8003958 <calculate_orientation+0x2cc>)
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	4611      	mov	r1, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd f95e 	bl	8000b30 <__aeabi_fsub>
 8003874:	4603      	mov	r3, r0
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24

    // Calculate accelerometer-based angles
    float accel_roll  = atan2f(accel_y, sqrtf(accel_x*accel_x + accel_z*accel_z)) * RAD_TO_DEG;
 8003878:	4b2a      	ldr	r3, [pc, #168]	@ (8003924 <calculate_orientation+0x298>)
 800387a:	681c      	ldr	r4, [r3, #0]
 800387c:	4b28      	ldr	r3, [pc, #160]	@ (8003920 <calculate_orientation+0x294>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a27      	ldr	r2, [pc, #156]	@ (8003920 <calculate_orientation+0x294>)
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd fa5c 	bl	8000d44 <__aeabi_fmul>
 800388c:	4603      	mov	r3, r0
 800388e:	461d      	mov	r5, r3
 8003890:	4b25      	ldr	r3, [pc, #148]	@ (8003928 <calculate_orientation+0x29c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a24      	ldr	r2, [pc, #144]	@ (8003928 <calculate_orientation+0x29c>)
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	4611      	mov	r1, r2
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd fa52 	bl	8000d44 <__aeabi_fmul>
 80038a0:	4603      	mov	r3, r0
 80038a2:	4619      	mov	r1, r3
 80038a4:	4628      	mov	r0, r5
 80038a6:	f7fd f945 	bl	8000b34 <__addsf3>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f007 fef4 	bl	800b69a <sqrtf>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4619      	mov	r1, r3
 80038b6:	4620      	mov	r0, r4
 80038b8:	f007 fea0 	bl	800b5fc <atan2f>
 80038bc:	4603      	mov	r3, r0
 80038be:	4928      	ldr	r1, [pc, #160]	@ (8003960 <calculate_orientation+0x2d4>)
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd fa3f 	bl	8000d44 <__aeabi_fmul>
 80038c6:	4603      	mov	r3, r0
 80038c8:	623b      	str	r3, [r7, #32]
    float accel_pitch = atan2f(-accel_x, sqrtf(accel_y*accel_y + accel_z*accel_z)) * RAD_TO_DEG;
 80038ca:	4b15      	ldr	r3, [pc, #84]	@ (8003920 <calculate_orientation+0x294>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80038d2:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <calculate_orientation+0x298>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a13      	ldr	r2, [pc, #76]	@ (8003924 <calculate_orientation+0x298>)
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fd fa31 	bl	8000d44 <__aeabi_fmul>
 80038e2:	4603      	mov	r3, r0
 80038e4:	461d      	mov	r5, r3
 80038e6:	4b10      	ldr	r3, [pc, #64]	@ (8003928 <calculate_orientation+0x29c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003928 <calculate_orientation+0x29c>)
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fd fa27 	bl	8000d44 <__aeabi_fmul>
 80038f6:	4603      	mov	r3, r0
 80038f8:	4619      	mov	r1, r3
 80038fa:	4628      	mov	r0, r5
 80038fc:	f7fd f91a 	bl	8000b34 <__addsf3>
 8003900:	4603      	mov	r3, r0
 8003902:	4618      	mov	r0, r3
 8003904:	f007 fec9 	bl	800b69a <sqrtf>
 8003908:	4603      	mov	r3, r0
 800390a:	4619      	mov	r1, r3
 800390c:	4620      	mov	r0, r4
 800390e:	f007 fe75 	bl	800b5fc <atan2f>
 8003912:	4603      	mov	r3, r0
 8003914:	4912      	ldr	r1, [pc, #72]	@ (8003960 <calculate_orientation+0x2d4>)
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd fa14 	bl	8000d44 <__aeabi_fmul>
 800391c:	4603      	mov	r3, r0
 800391e:	e021      	b.n	8003964 <calculate_orientation+0x2d8>
 8003920:	200005d8 	.word	0x200005d8
 8003924:	200005dc 	.word	0x200005dc
 8003928:	200005e0 	.word	0x200005e0
 800392c:	43030000 	.word	0x43030000
 8003930:	200005cc 	.word	0x200005cc
 8003934:	200005d0 	.word	0x200005d0
 8003938:	200005d4 	.word	0x200005d4
 800393c:	20000444 	.word	0x20000444
 8003940:	447a0000 	.word	0x447a0000
 8003944:	3c23d70a 	.word	0x3c23d70a
 8003948:	20000730 	.word	0x20000730
 800394c:	3f733333 	.word	0x3f733333
 8003950:	3d4ccccd 	.word	0x3d4ccccd
 8003954:	20000734 	.word	0x20000734
 8003958:	20000738 	.word	0x20000738
 800395c:	2000073c 	.word	0x2000073c
 8003960:	42652ee6 	.word	0x42652ee6
 8003964:	61fb      	str	r3, [r7, #28]
    
    // Apply Kalman filtering to roll and pitch
    o->roll = kalman_filter_update(&kalman_roll, accel_roll, dt);
 8003966:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003968:	6a39      	ldr	r1, [r7, #32]
 800396a:	4836      	ldr	r0, [pc, #216]	@ (8003a44 <calculate_orientation+0x3b8>)
 800396c:	f7ff f9c5 	bl	8002cfa <kalman_filter_update>
 8003970:	4602      	mov	r2, r0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	601a      	str	r2, [r3, #0]
    o->pitch = kalman_filter_update(&kalman_pitch, accel_pitch, dt);
 8003976:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003978:	69f9      	ldr	r1, [r7, #28]
 800397a:	4833      	ldr	r0, [pc, #204]	@ (8003a48 <calculate_orientation+0x3bc>)
 800397c:	f7ff f9bd 	bl	8002cfa <kalman_filter_update>
 8003980:	4602      	mov	r2, r0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	605a      	str	r2, [r3, #4]
    
    // For yaw, we only have gyroscope data, so we use a simple integration with Kalman filtering
    // to reduce drift
    float gyro_yaw_rate = gyro_z_comp;
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	61bb      	str	r3, [r7, #24]
    float predicted_yaw = o->yaw + gyro_yaw_rate * dt;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689c      	ldr	r4, [r3, #8]
 800398e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003990:	69b8      	ldr	r0, [r7, #24]
 8003992:	f7fd f9d7 	bl	8000d44 <__aeabi_fmul>
 8003996:	4603      	mov	r3, r0
 8003998:	4619      	mov	r1, r3
 800399a:	4620      	mov	r0, r4
 800399c:	f7fd f8ca 	bl	8000b34 <__addsf3>
 80039a0:	4603      	mov	r3, r0
 80039a2:	617b      	str	r3, [r7, #20]
    
    // Use a higher measurement noise for yaw since we don't have absolute reference
    // This makes the filter rely more on the gyroscope prediction
    o->yaw = kalman_filter_update(&kalman_yaw, predicted_yaw, dt);
 80039a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039a6:	6979      	ldr	r1, [r7, #20]
 80039a8:	4828      	ldr	r0, [pc, #160]	@ (8003a4c <calculate_orientation+0x3c0>)
 80039aa:	f7ff f9a6 	bl	8002cfa <kalman_filter_update>
 80039ae:	4602      	mov	r2, r0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	609a      	str	r2, [r3, #8]
    
    // Normalize yaw to -180 to +180 degrees
    while (o->yaw > 180.0f) o->yaw -= 360.0f;
 80039b4:	e009      	b.n	80039ca <calculate_orientation+0x33e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	4925      	ldr	r1, [pc, #148]	@ (8003a50 <calculate_orientation+0x3c4>)
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd f8b7 	bl	8000b30 <__aeabi_fsub>
 80039c2:	4603      	mov	r3, r0
 80039c4:	461a      	mov	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4921      	ldr	r1, [pc, #132]	@ (8003a54 <calculate_orientation+0x3c8>)
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fd fb73 	bl	80010bc <__aeabi_fcmpgt>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1ec      	bne.n	80039b6 <calculate_orientation+0x32a>
    while (o->yaw < -180.0f) o->yaw += 360.0f;
 80039dc:	e009      	b.n	80039f2 <calculate_orientation+0x366>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	491b      	ldr	r1, [pc, #108]	@ (8003a50 <calculate_orientation+0x3c4>)
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fd f8a5 	bl	8000b34 <__addsf3>
 80039ea:	4603      	mov	r3, r0
 80039ec:	461a      	mov	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	4918      	ldr	r1, [pc, #96]	@ (8003a58 <calculate_orientation+0x3cc>)
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fd fb41 	bl	8001080 <__aeabi_fcmplt>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1ec      	bne.n	80039de <calculate_orientation+0x352>
    
    // Apply angle limits to prevent unrealistic values
    o->roll = fmaxf(-90.0f, fminf(90.0f, o->roll));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4914      	ldr	r1, [pc, #80]	@ (8003a5c <calculate_orientation+0x3d0>)
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f007 fe7c 	bl	800b708 <fminf>
 8003a10:	4603      	mov	r3, r0
 8003a12:	4913      	ldr	r1, [pc, #76]	@ (8003a60 <calculate_orientation+0x3d4>)
 8003a14:	4618      	mov	r0, r3
 8003a16:	f007 fe62 	bl	800b6de <fmaxf>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	601a      	str	r2, [r3, #0]
    o->pitch = fmaxf(-90.0f, fminf(90.0f, o->pitch));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	490d      	ldr	r1, [pc, #52]	@ (8003a5c <calculate_orientation+0x3d0>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	f007 fe6e 	bl	800b708 <fminf>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	490c      	ldr	r1, [pc, #48]	@ (8003a60 <calculate_orientation+0x3d4>)
 8003a30:	4618      	mov	r0, r3
 8003a32:	f007 fe54 	bl	800b6de <fmaxf>
 8003a36:	4602      	mov	r2, r0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	605a      	str	r2, [r3, #4]
}
 8003a3c:	bf00      	nop
 8003a3e:	3738      	adds	r7, #56	@ 0x38
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bdb0      	pop	{r4, r5, r7, pc}
 8003a44:	20000448 	.word	0x20000448
 8003a48:	2000045c 	.word	0x2000045c
 8003a4c:	20000470 	.word	0x20000470
 8003a50:	43b40000 	.word	0x43b40000
 8003a54:	43340000 	.word	0x43340000
 8003a58:	c3340000 	.word	0xc3340000
 8003a5c:	42b40000 	.word	0x42b40000
 8003a60:	c2b40000 	.word	0xc2b40000

08003a64 <ParseTelemetryPacket>:
    HAL_Delay(10);
}

//SUT
void ParseTelemetryPacket(uint8_t* packet)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b08b      	sub	sp, #44	@ 0x2c
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
    // Check header and footer
    if (packet[0] != TELEMETRY_HEADER ||
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2bab      	cmp	r3, #171	@ 0xab
 8003a72:	f040 808e 	bne.w	8003b92 <ParseTelemetryPacket+0x12e>
        packet[34] != FOOTER_1 ||
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3322      	adds	r3, #34	@ 0x22
 8003a7a:	781b      	ldrb	r3, [r3, #0]
    if (packet[0] != TELEMETRY_HEADER ||
 8003a7c:	2b0d      	cmp	r3, #13
 8003a7e:	f040 8088 	bne.w	8003b92 <ParseTelemetryPacket+0x12e>
        packet[35] != FOOTER_2) {
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3323      	adds	r3, #35	@ 0x23
 8003a86:	781b      	ldrb	r3, [r3, #0]
        packet[34] != FOOTER_1 ||
 8003a88:	2b0a      	cmp	r3, #10
 8003a8a:	f040 8082 	bne.w	8003b92 <ParseTelemetryPacket+0x12e>
        return;
    }

    // Parse big-endian float values - need to reverse byte order for ARM (little-endian)
    // Altitude (bytes 2-5) - reverse order: 4,3,2,1
    uint8_t alt_bytes[4] = {packet[4], packet[3], packet[2], packet[1]};
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	791b      	ldrb	r3, [r3, #4]
 8003a92:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	78db      	ldrb	r3, [r3, #3]
 8003a9a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	789b      	ldrb	r3, [r3, #2]
 8003aa2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    memcpy(&telemetry_data.altitude, alt_bytes, 4);
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	4a3a      	ldr	r2, [pc, #232]	@ (8003b9c <ParseTelemetryPacket+0x138>)
 8003ab2:	6013      	str	r3, [r2, #0]

    // Pressure (bytes 6-9) - reverse order: 8,7,6,5
    uint8_t press_bytes[4] = {packet[8], packet[7], packet[6], packet[5]};
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	7a1b      	ldrb	r3, [r3, #8]
 8003ab8:	f887 3020 	strb.w	r3, [r7, #32]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	79db      	ldrb	r3, [r3, #7]
 8003ac0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	799b      	ldrb	r3, [r3, #6]
 8003ac8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	795b      	ldrb	r3, [r3, #5]
 8003ad0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    memcpy(&telemetry_data.pressure, press_bytes, 4);
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	4a31      	ldr	r2, [pc, #196]	@ (8003b9c <ParseTelemetryPacket+0x138>)
 8003ad8:	6053      	str	r3, [r2, #4]

    // Acceleration X (bytes 10-13) - reverse order: 12,11,10,9
    uint8_t accel_x_bytes[4] = {packet[12], packet[11], packet[10], packet[9]};
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	7b1b      	ldrb	r3, [r3, #12]
 8003ade:	773b      	strb	r3, [r7, #28]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7adb      	ldrb	r3, [r3, #11]
 8003ae4:	777b      	strb	r3, [r7, #29]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	7a9b      	ldrb	r3, [r3, #10]
 8003aea:	77bb      	strb	r3, [r7, #30]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	7a5b      	ldrb	r3, [r3, #9]
 8003af0:	77fb      	strb	r3, [r7, #31]
    memcpy(&telemetry_data.accel_x, accel_x_bytes, 4);
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4a29      	ldr	r2, [pc, #164]	@ (8003b9c <ParseTelemetryPacket+0x138>)
 8003af6:	6093      	str	r3, [r2, #8]

    // Acceleration Y (bytes 14-17) - reverse order: 16,15,14,13
    uint8_t accel_y_bytes[4] = {packet[16], packet[15], packet[14], packet[13]};
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7c1b      	ldrb	r3, [r3, #16]
 8003afc:	763b      	strb	r3, [r7, #24]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7bdb      	ldrb	r3, [r3, #15]
 8003b02:	767b      	strb	r3, [r7, #25]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	7b9b      	ldrb	r3, [r3, #14]
 8003b08:	76bb      	strb	r3, [r7, #26]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7b5b      	ldrb	r3, [r3, #13]
 8003b0e:	76fb      	strb	r3, [r7, #27]
    memcpy(&telemetry_data.accel_y, accel_y_bytes, 4);
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	4a22      	ldr	r2, [pc, #136]	@ (8003b9c <ParseTelemetryPacket+0x138>)
 8003b14:	60d3      	str	r3, [r2, #12]

    // Acceleration Z (bytes 18-21) - reverse order: 20,19,18,17
    uint8_t accel_z_bytes[4] = {packet[20], packet[19], packet[18], packet[17]};
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	7d1b      	ldrb	r3, [r3, #20]
 8003b1a:	753b      	strb	r3, [r7, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	7cdb      	ldrb	r3, [r3, #19]
 8003b20:	757b      	strb	r3, [r7, #21]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	7c9b      	ldrb	r3, [r3, #18]
 8003b26:	75bb      	strb	r3, [r7, #22]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	7c5b      	ldrb	r3, [r3, #17]
 8003b2c:	75fb      	strb	r3, [r7, #23]
    memcpy(&telemetry_data.accel_z, accel_z_bytes, 4);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	4a1a      	ldr	r2, [pc, #104]	@ (8003b9c <ParseTelemetryPacket+0x138>)
 8003b32:	6113      	str	r3, [r2, #16]

    // Angle X (bytes 22-25) - reverse order: 24,23,22,21
    uint8_t angle_x_bytes[4] = {packet[24], packet[23], packet[22], packet[21]};
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	7e1b      	ldrb	r3, [r3, #24]
 8003b38:	743b      	strb	r3, [r7, #16]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	7ddb      	ldrb	r3, [r3, #23]
 8003b3e:	747b      	strb	r3, [r7, #17]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	7d9b      	ldrb	r3, [r3, #22]
 8003b44:	74bb      	strb	r3, [r7, #18]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	7d5b      	ldrb	r3, [r3, #21]
 8003b4a:	74fb      	strb	r3, [r7, #19]
    memcpy(&telemetry_data.angle_x, angle_x_bytes, 4);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4a13      	ldr	r2, [pc, #76]	@ (8003b9c <ParseTelemetryPacket+0x138>)
 8003b50:	6153      	str	r3, [r2, #20]

    // Angle Y (bytes 26-29) - reverse order: 28,27,26,25
    uint8_t angle_y_bytes[4] = {packet[28], packet[27], packet[26], packet[25]};
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7f1b      	ldrb	r3, [r3, #28]
 8003b56:	733b      	strb	r3, [r7, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7edb      	ldrb	r3, [r3, #27]
 8003b5c:	737b      	strb	r3, [r7, #13]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	7e9b      	ldrb	r3, [r3, #26]
 8003b62:	73bb      	strb	r3, [r7, #14]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	7e5b      	ldrb	r3, [r3, #25]
 8003b68:	73fb      	strb	r3, [r7, #15]
    memcpy(&telemetry_data.angle_y, angle_y_bytes, 4);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b9c <ParseTelemetryPacket+0x138>)
 8003b6e:	6193      	str	r3, [r2, #24]

    // Angle Z (bytes 30-33) - reverse order: 32,31,30,29
    uint8_t angle_z_bytes[4] = {packet[32], packet[31], packet[30], packet[29]};
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b76:	723b      	strb	r3, [r7, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	7fdb      	ldrb	r3, [r3, #31]
 8003b7c:	727b      	strb	r3, [r7, #9]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	7f9b      	ldrb	r3, [r3, #30]
 8003b82:	72bb      	strb	r3, [r7, #10]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	7f5b      	ldrb	r3, [r3, #29]
 8003b88:	72fb      	strb	r3, [r7, #11]
    memcpy(&telemetry_data.angle_z, angle_z_bytes, 4);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4a03      	ldr	r2, [pc, #12]	@ (8003b9c <ParseTelemetryPacket+0x138>)
 8003b8e:	61d3      	str	r3, [r2, #28]
 8003b90:	e000      	b.n	8003b94 <ParseTelemetryPacket+0x130>
        return;
 8003b92:	bf00      	nop
}
 8003b94:	372c      	adds	r7, #44	@ 0x2c
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	200005e4 	.word	0x200005e4

08003ba0 <ProcessIncomingData>:
/**
 * @brief Process incoming byte and look for complete packets
 * @param new_byte: New byte received
 */
void ProcessIncomingData(uint8_t new_byte)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]
    // Store byte in buffer
    incoming_buffer[buffer_index] = new_byte;
 8003baa:	4b44      	ldr	r3, [pc, #272]	@ (8003cbc <ProcessIncomingData+0x11c>)
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4a43      	ldr	r2, [pc, #268]	@ (8003cc0 <ProcessIncomingData+0x120>)
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	5453      	strb	r3, [r2, r1]

    // Simple and fast packet detection
    static uint8_t packet_state = 0;
    static uint8_t byte_count = 0;

    switch (packet_state) {
 8003bb6:	4b43      	ldr	r3, [pc, #268]	@ (8003cc4 <ProcessIncomingData+0x124>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <ProcessIncomingData+0x24>
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d00a      	beq.n	8003bd8 <ProcessIncomingData+0x38>
                packet_state = 0;
                byte_count = 0;
            }
            break;
    }
}
 8003bc2:	e076      	b.n	8003cb2 <ProcessIncomingData+0x112>
            if (new_byte == TELEMETRY_HEADER) {
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	2bab      	cmp	r3, #171	@ 0xab
 8003bc8:	d170      	bne.n	8003cac <ProcessIncomingData+0x10c>
                packet_state = 1;
 8003bca:	4b3e      	ldr	r3, [pc, #248]	@ (8003cc4 <ProcessIncomingData+0x124>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]
                byte_count = 1;
 8003bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8003cc8 <ProcessIncomingData+0x128>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
            break;
 8003bd6:	e069      	b.n	8003cac <ProcessIncomingData+0x10c>
            byte_count++;
 8003bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc8 <ProcessIncomingData+0x128>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	4b39      	ldr	r3, [pc, #228]	@ (8003cc8 <ProcessIncomingData+0x128>)
 8003be2:	701a      	strb	r2, [r3, #0]
            if (byte_count >= PACKET_SIZE) {
 8003be4:	4b38      	ldr	r3, [pc, #224]	@ (8003cc8 <ProcessIncomingData+0x128>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b23      	cmp	r3, #35	@ 0x23
 8003bea:	d961      	bls.n	8003cb0 <ProcessIncomingData+0x110>
                if (incoming_buffer[(buffer_index - PACKET_SIZE + 1 + PACKET_SIZE - 2) % (PACKET_SIZE * 4)] == FOOTER_1 &&
 8003bec:	4b33      	ldr	r3, [pc, #204]	@ (8003cbc <ProcessIncomingData+0x11c>)
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	1e59      	subs	r1, r3, #1
 8003bf2:	4b36      	ldr	r3, [pc, #216]	@ (8003ccc <ProcessIncomingData+0x12c>)
 8003bf4:	fb83 2301 	smull	r2, r3, r3, r1
 8003bf8:	115a      	asrs	r2, r3, #5
 8003bfa:	17cb      	asrs	r3, r1, #31
 8003bfc:	1ad2      	subs	r2, r2, r3
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1aca      	subs	r2, r1, r3
 8003c08:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc0 <ProcessIncomingData+0x120>)
 8003c0a:	5c9b      	ldrb	r3, [r3, r2]
 8003c0c:	2b0d      	cmp	r3, #13
 8003c0e:	d146      	bne.n	8003c9e <ProcessIncomingData+0xfe>
                    incoming_buffer[(buffer_index - PACKET_SIZE + 1 + PACKET_SIZE - 1) % (PACKET_SIZE * 4)] == FOOTER_2) {
 8003c10:	4b2a      	ldr	r3, [pc, #168]	@ (8003cbc <ProcessIncomingData+0x11c>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	4619      	mov	r1, r3
 8003c16:	4b2d      	ldr	r3, [pc, #180]	@ (8003ccc <ProcessIncomingData+0x12c>)
 8003c18:	fb83 2301 	smull	r2, r3, r3, r1
 8003c1c:	115a      	asrs	r2, r3, #5
 8003c1e:	17cb      	asrs	r3, r1, #31
 8003c20:	1ad2      	subs	r2, r2, r3
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	1aca      	subs	r2, r1, r3
 8003c2c:	4b24      	ldr	r3, [pc, #144]	@ (8003cc0 <ProcessIncomingData+0x120>)
 8003c2e:	5c9b      	ldrb	r3, [r3, r2]
                if (incoming_buffer[(buffer_index - PACKET_SIZE + 1 + PACKET_SIZE - 2) % (PACKET_SIZE * 4)] == FOOTER_1 &&
 8003c30:	2b0a      	cmp	r3, #10
 8003c32:	d134      	bne.n	8003c9e <ProcessIncomingData+0xfe>
                    uint16_t start_idx = (buffer_index - PACKET_SIZE + 1) % (PACKET_SIZE * 4);
 8003c34:	4b21      	ldr	r3, [pc, #132]	@ (8003cbc <ProcessIncomingData+0x11c>)
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 8003c3c:	4b23      	ldr	r3, [pc, #140]	@ (8003ccc <ProcessIncomingData+0x12c>)
 8003c3e:	fb83 1302 	smull	r1, r3, r3, r2
 8003c42:	1159      	asrs	r1, r3, #5
 8003c44:	17d3      	asrs	r3, r2, #31
 8003c46:	1ac9      	subs	r1, r1, r3
 8003c48:	460b      	mov	r3, r1
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	440b      	add	r3, r1
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1ad1      	subs	r1, r2, r3
 8003c52:	460b      	mov	r3, r1
 8003c54:	81bb      	strh	r3, [r7, #12]
                    for (uint8_t i = 0; i < PACKET_SIZE; i++) {
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]
 8003c5a:	e015      	b.n	8003c88 <ProcessIncomingData+0xe8>
                        rx_buffer_sut[i] = incoming_buffer[(start_idx + i) % (PACKET_SIZE * 4)];
 8003c5c:	89ba      	ldrh	r2, [r7, #12]
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	18d1      	adds	r1, r2, r3
 8003c62:	4b1a      	ldr	r3, [pc, #104]	@ (8003ccc <ProcessIncomingData+0x12c>)
 8003c64:	fb83 2301 	smull	r2, r3, r3, r1
 8003c68:	115a      	asrs	r2, r3, #5
 8003c6a:	17cb      	asrs	r3, r1, #31
 8003c6c:	1ad2      	subs	r2, r2, r3
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1aca      	subs	r2, r1, r3
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	4911      	ldr	r1, [pc, #68]	@ (8003cc0 <ProcessIncomingData+0x120>)
 8003c7c:	5c89      	ldrb	r1, [r1, r2]
 8003c7e:	4a14      	ldr	r2, [pc, #80]	@ (8003cd0 <ProcessIncomingData+0x130>)
 8003c80:	54d1      	strb	r1, [r2, r3]
                    for (uint8_t i = 0; i < PACKET_SIZE; i++) {
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	3301      	adds	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b23      	cmp	r3, #35	@ 0x23
 8003c8c:	d9e6      	bls.n	8003c5c <ProcessIncomingData+0xbc>
                    packet_received = 1;
 8003c8e:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <ProcessIncomingData+0x134>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
                    packets_received_count++; // Increment packet counter
 8003c94:	4b10      	ldr	r3, [pc, #64]	@ (8003cd8 <ProcessIncomingData+0x138>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8003cd8 <ProcessIncomingData+0x138>)
 8003c9c:	6013      	str	r3, [r2, #0]
                packet_state = 0;
 8003c9e:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <ProcessIncomingData+0x124>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
                byte_count = 0;
 8003ca4:	4b08      	ldr	r3, [pc, #32]	@ (8003cc8 <ProcessIncomingData+0x128>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
            break;
 8003caa:	e001      	b.n	8003cb0 <ProcessIncomingData+0x110>
            break;
 8003cac:	bf00      	nop
 8003cae:	e000      	b.n	8003cb2 <ProcessIncomingData+0x112>
            break;
 8003cb0:	bf00      	nop
}
 8003cb2:	bf00      	nop
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr
 8003cbc:	200006bc 	.word	0x200006bc
 8003cc0:	2000062c 	.word	0x2000062c
 8003cc4:	20000740 	.word	0x20000740
 8003cc8:	20000741 	.word	0x20000741
 8003ccc:	38e38e39 	.word	0x38e38e39
 8003cd0:	20000604 	.word	0x20000604
 8003cd4:	20000628 	.word	0x20000628
 8003cd8:	200006c0 	.word	0x200006c0

08003cdc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a07      	ldr	r2, [pc, #28]	@ (8003d08 <HAL_UART_TxCpltCallback+0x2c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d103      	bne.n	8003cf6 <HAL_UART_TxCpltCallback+0x1a>
        // USART1 ile gönderim tamamlandı
        uart_busy = 0; // Örn: tekrar gönderime izin ver
 8003cee:	4b07      	ldr	r3, [pc, #28]	@ (8003d0c <HAL_UART_TxCpltCallback+0x30>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
        // USART2 için yapılacak işlemler
    }
    else if (huart->Instance == USART3) {
        // USART3 için yapılacak işlemler
    }
}
 8003cf4:	e003      	b.n	8003cfe <HAL_UART_TxCpltCallback+0x22>
    else if (huart->Instance == USART2) {
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a05      	ldr	r2, [pc, #20]	@ (8003d10 <HAL_UART_TxCpltCallback+0x34>)
 8003cfc:	4293      	cmp	r3, r2
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr
 8003d08:	40013800 	.word	0x40013800
 8003d0c:	200006be 	.word	0x200006be
 8003d10:	40004400 	.word	0x40004400

08003d14 <UpdateStatusFromTelemetry>:
    TimerCallback();
  }
}

void UpdateStatusFromTelemetry(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
    uint8_t new_status = current_status_byte; // Start with current status (preserve existing bits)
 8003d1a:	4b51      	ldr	r3, [pc, #324]	@ (8003e60 <UpdateStatusFromTelemetry+0x14c>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	75fb      	strb	r3, [r7, #23]
    uint32_t current_time = HAL_GetTick();
 8003d20:	f000 fd04 	bl	800472c <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

    // Get filtered values
    float filtered_altitude = GetFilteredValue(altitude_filter);
 8003d26:	484f      	ldr	r0, [pc, #316]	@ (8003e64 <UpdateStatusFromTelemetry+0x150>)
 8003d28:	f000 f968 	bl	8003ffc <GetFilteredValue>
 8003d2c:	60f8      	str	r0, [r7, #12]
    float filtered_accel_z = GetFilteredValue(accel_z_filter);
 8003d2e:	484e      	ldr	r0, [pc, #312]	@ (8003e68 <UpdateStatusFromTelemetry+0x154>)
 8003d30:	f000 f964 	bl	8003ffc <GetFilteredValue>
 8003d34:	60b8      	str	r0, [r7, #8]
    float filtered_angle_x = GetFilteredValue(angle_x_filter);
 8003d36:	484d      	ldr	r0, [pc, #308]	@ (8003e6c <UpdateStatusFromTelemetry+0x158>)
 8003d38:	f000 f960 	bl	8003ffc <GetFilteredValue>
 8003d3c:	6078      	str	r0, [r7, #4]
    float filtered_angle_y = GetFilteredValue(angle_y_filter);
 8003d3e:	484c      	ldr	r0, [pc, #304]	@ (8003e70 <UpdateStatusFromTelemetry+0x15c>)
 8003d40:	f000 f95c 	bl	8003ffc <GetFilteredValue>
 8003d44:	6038      	str	r0, [r7, #0]

    // Check rocket fired (accel z > 30) - FIRST BIT (Bit 0)
    // Once activated, this bit stays on permanently
    if (filtered_accel_z > 25.0f) {
 8003d46:	494b      	ldr	r1, [pc, #300]	@ (8003e74 <UpdateStatusFromTelemetry+0x160>)
 8003d48:	68b8      	ldr	r0, [r7, #8]
 8003d4a:	f7fd f9b7 	bl	80010bc <__aeabi_fcmpgt>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00c      	beq.n	8003d6e <UpdateStatusFromTelemetry+0x5a>
        new_status |= STATUS_ROCKET_FIRED_BIT;
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	75fb      	strb	r3, [r7, #23]
        if (!(current_status_byte & STATUS_ROCKET_FIRED_BIT)) {
 8003d5c:	4b40      	ldr	r3, [pc, #256]	@ (8003e60 <UpdateStatusFromTelemetry+0x14c>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <UpdateStatusFromTelemetry+0x5a>
            // Rocket just fired, record timestamp
            rocket_fired_timestamp = current_time;
 8003d68:	4a43      	ldr	r2, [pc, #268]	@ (8003e78 <UpdateStatusFromTelemetry+0x164>)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6013      	str	r3, [r2, #0]
        }
    }

    // Check waited 5 seconds after rocket fired - SECOND BIT (Bit 1)
    // Only if rocket fired bit is active, and once activated stays on
    if ((new_status & STATUS_ROCKET_FIRED_BIT) &&
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00b      	beq.n	8003d90 <UpdateStatusFromTelemetry+0x7c>
        (current_time - rocket_fired_timestamp >= 5000)) {
 8003d78:	4b3f      	ldr	r3, [pc, #252]	@ (8003e78 <UpdateStatusFromTelemetry+0x164>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
    if ((new_status & STATUS_ROCKET_FIRED_BIT) &&
 8003d80:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d903      	bls.n	8003d90 <UpdateStatusFromTelemetry+0x7c>
        new_status |= STATUS_WAITED_5SN_BIT;
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
 8003d8a:	f043 0302 	orr.w	r3, r3, #2
 8003d8e:	75fb      	strb	r3, [r7, #23]
    }

    // Check minimum altitude (>= 1500) - THIRD BIT (Bit 2)
    // Only if waited 5s bit is active, and once activated stays on
    if ((new_status & STATUS_WAITED_5SN_BIT) &&
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <UpdateStatusFromTelemetry+0x9c>
 8003d9a:	4938      	ldr	r1, [pc, #224]	@ (8003e7c <UpdateStatusFromTelemetry+0x168>)
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f7fd f983 	bl	80010a8 <__aeabi_fcmpge>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <UpdateStatusFromTelemetry+0x9c>
        filtered_altitude >= 1500.0f) {
        new_status |= STATUS_MIN_ALTITUDE_BIT;
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
 8003daa:	f043 0304 	orr.w	r3, r3, #4
 8003dae:	75fb      	strb	r3, [r7, #23]
    }

    // Check angle exceeded (x or y > 60) - FOURTH BIT (Bit 3)
    // Only if minimum altitude bit is active, and once activated stays on
    if ((new_status & STATUS_MIN_ALTITUDE_BIT) &&
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d011      	beq.n	8003dde <UpdateStatusFromTelemetry+0xca>
 8003dba:	4931      	ldr	r1, [pc, #196]	@ (8003e80 <UpdateStatusFromTelemetry+0x16c>)
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7fd f97d 	bl	80010bc <__aeabi_fcmpgt>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <UpdateStatusFromTelemetry+0xc2>
        (filtered_angle_x > 50.0f || filtered_angle_y > 50.0f)) {
 8003dc8:	492d      	ldr	r1, [pc, #180]	@ (8003e80 <UpdateStatusFromTelemetry+0x16c>)
 8003dca:	6838      	ldr	r0, [r7, #0]
 8003dcc:	f7fd f976 	bl	80010bc <__aeabi_fcmpgt>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <UpdateStatusFromTelemetry+0xca>
        new_status |= STATUS_ANGLE_EXCEEDED_BIT;
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	f043 0308 	orr.w	r3, r3, #8
 8003ddc:	75fb      	strb	r3, [r7, #23]
    }

    // Check altitude decreasing - FIFTH BIT (Bit 4)
    // Only if angle exceeded bit is active, and once activated stays on
    if ((new_status & STATUS_ANGLE_EXCEEDED_BIT) &&
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d010      	beq.n	8003e0a <UpdateStatusFromTelemetry+0xf6>
        filtered_altitude < previous_altitude) {
 8003de8:	4b26      	ldr	r3, [pc, #152]	@ (8003e84 <UpdateStatusFromTelemetry+0x170>)
 8003dea:	681b      	ldr	r3, [r3, #0]
    if ((new_status & STATUS_ANGLE_EXCEEDED_BIT) &&
 8003dec:	4619      	mov	r1, r3
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7fd f946 	bl	8001080 <__aeabi_fcmplt>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <UpdateStatusFromTelemetry+0xf6>
        new_status |= STATUS_ALTITUDE_DECREASING_BIT;
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
 8003dfc:	f043 0310 	orr.w	r3, r3, #16
 8003e00:	75fb      	strb	r3, [r7, #23]
        // First parachute deployed at the same time as altitude decreasing - SIXTH BIT (Bit 5)
        new_status |= STATUS_FIRST_PARACHUTE_BIT;
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	f043 0320 	orr.w	r3, r3, #32
 8003e08:	75fb      	strb	r3, [r7, #23]
    }

    // Check altitude <= 550 - SEVENTH BIT (Bit 6)
    if ((new_status & STATUS_FIRST_PARACHUTE_BIT) &&
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <UpdateStatusFromTelemetry+0x116>
 8003e14:	491c      	ldr	r1, [pc, #112]	@ (8003e88 <UpdateStatusFromTelemetry+0x174>)
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7fd f93c 	bl	8001094 <__aeabi_fcmple>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <UpdateStatusFromTelemetry+0x116>
        filtered_altitude <= 600.0f) {
        new_status |= STATUS_ALTITUDE_550_BIT;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e28:	75fb      	strb	r3, [r7, #23]
    }

    // Check second parachute deployed - EIGHTH BIT (Bit 7)
    if ((new_status & STATUS_ALTITUDE_550_BIT) &&
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <UpdateStatusFromTelemetry+0x136>
 8003e34:	4915      	ldr	r1, [pc, #84]	@ (8003e8c <UpdateStatusFromTelemetry+0x178>)
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7fd f92c 	bl	8001094 <__aeabi_fcmple>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <UpdateStatusFromTelemetry+0x136>
        filtered_altitude <= 550.0f) {  // örnek eşik
        new_status |= STATUS_SECOND_PARACHUTE_BIT;
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
 8003e44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e48:	75fb      	strb	r3, [r7, #23]
    }


    // Update status byte (new bits are added, existing bits are preserved)
    current_status_byte = new_status;
 8003e4a:	4a05      	ldr	r2, [pc, #20]	@ (8003e60 <UpdateStatusFromTelemetry+0x14c>)
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	7013      	strb	r3, [r2, #0]

    // Store current filtered altitude for next comparison
    previous_altitude = filtered_altitude;
 8003e50:	4a0c      	ldr	r2, [pc, #48]	@ (8003e84 <UpdateStatusFromTelemetry+0x170>)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6013      	str	r3, [r2, #0]
}
 8003e56:	bf00      	nop
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200006c4 	.word	0x200006c4
 8003e64:	200006d0 	.word	0x200006d0
 8003e68:	200006e4 	.word	0x200006e4
 8003e6c:	200006f8 	.word	0x200006f8
 8003e70:	2000070c 	.word	0x2000070c
 8003e74:	41c80000 	.word	0x41c80000
 8003e78:	200006cc 	.word	0x200006cc
 8003e7c:	44bb8000 	.word	0x44bb8000
 8003e80:	42480000 	.word	0x42480000
 8003e84:	200006c8 	.word	0x200006c8
 8003e88:	44160000 	.word	0x44160000
 8003e8c:	44098000 	.word	0x44098000

08003e90 <CalculateChecksum>:
 * @param data: Pointer to data array
 * @param length: Length of data (excluding checksum)
 * @retval Checksum value
 */
uint8_t CalculateChecksum(uint8_t* data, uint8_t length)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	70fb      	strb	r3, [r7, #3]
    uint16_t sum = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < length; i++) {
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	737b      	strb	r3, [r7, #13]
 8003ea4:	e00a      	b.n	8003ebc <CalculateChecksum+0x2c>
        sum += data[i];
 8003ea6:	7b7b      	ldrb	r3, [r7, #13]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4413      	add	r3, r2
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	89fb      	ldrh	r3, [r7, #14]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < length; i++) {
 8003eb6:	7b7b      	ldrb	r3, [r7, #13]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	737b      	strb	r3, [r7, #13]
 8003ebc:	7b7a      	ldrb	r2, [r7, #13]
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d3f0      	bcc.n	8003ea6 <CalculateChecksum+0x16>
    }
    return (uint8_t)(sum % 256);
 8003ec4:	89fb      	ldrh	r3, [r7, #14]
 8003ec6:	b2db      	uxtb	r3, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
	...

08003ed4 <SendStatusMessage>:

/**
 * @brief Send status message in the new 6-byte format
 */
void SendStatusMessage(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
    // Build status message
    status_message[0] = STATUS_HEADER;        // 0xAA
 8003eda:	4b1d      	ldr	r3, [pc, #116]	@ (8003f50 <SendStatusMessage+0x7c>)
 8003edc:	22aa      	movs	r2, #170	@ 0xaa
 8003ede:	701a      	strb	r2, [r3, #0]
    status_message[1] = current_status_byte;  // Status byte
 8003ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f54 <SendStatusMessage+0x80>)
 8003ee2:	781a      	ldrb	r2, [r3, #0]
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f50 <SendStatusMessage+0x7c>)
 8003ee6:	705a      	strb	r2, [r3, #1]
    status_message[2] = 0x00;                // Reserved
 8003ee8:	4b19      	ldr	r3, [pc, #100]	@ (8003f50 <SendStatusMessage+0x7c>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	709a      	strb	r2, [r3, #2]
    status_message[3] = 0x00;                // Checksum (calculated below)
 8003eee:	4b18      	ldr	r3, [pc, #96]	@ (8003f50 <SendStatusMessage+0x7c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	70da      	strb	r2, [r3, #3]
    status_message[4] = STATUS_FOOTER_1;      // 0x0D
 8003ef4:	4b16      	ldr	r3, [pc, #88]	@ (8003f50 <SendStatusMessage+0x7c>)
 8003ef6:	220d      	movs	r2, #13
 8003ef8:	711a      	strb	r2, [r3, #4]
    status_message[5] = STATUS_FOOTER_2;      // 0x0A
 8003efa:	4b15      	ldr	r3, [pc, #84]	@ (8003f50 <SendStatusMessage+0x7c>)
 8003efc:	220a      	movs	r2, #10
 8003efe:	715a      	strb	r2, [r3, #5]

    // Calculate checksum (sum of bytes 0, 1, 2, 4, 5, then mod 256)
    uint8_t checksum_data[5] = {status_message[0], status_message[1], status_message[2], status_message[4], status_message[5]};
 8003f00:	4b13      	ldr	r3, [pc, #76]	@ (8003f50 <SendStatusMessage+0x7c>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	703b      	strb	r3, [r7, #0]
 8003f06:	4b12      	ldr	r3, [pc, #72]	@ (8003f50 <SendStatusMessage+0x7c>)
 8003f08:	785b      	ldrb	r3, [r3, #1]
 8003f0a:	707b      	strb	r3, [r7, #1]
 8003f0c:	4b10      	ldr	r3, [pc, #64]	@ (8003f50 <SendStatusMessage+0x7c>)
 8003f0e:	789b      	ldrb	r3, [r3, #2]
 8003f10:	70bb      	strb	r3, [r7, #2]
 8003f12:	4b0f      	ldr	r3, [pc, #60]	@ (8003f50 <SendStatusMessage+0x7c>)
 8003f14:	791b      	ldrb	r3, [r3, #4]
 8003f16:	70fb      	strb	r3, [r7, #3]
 8003f18:	4b0d      	ldr	r3, [pc, #52]	@ (8003f50 <SendStatusMessage+0x7c>)
 8003f1a:	795b      	ldrb	r3, [r3, #5]
 8003f1c:	713b      	strb	r3, [r7, #4]
    status_message[3] = CalculateChecksum(checksum_data, 5);
 8003f1e:	463b      	mov	r3, r7
 8003f20:	2105      	movs	r1, #5
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff ffb4 	bl	8003e90 <CalculateChecksum>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b08      	ldr	r3, [pc, #32]	@ (8003f50 <SendStatusMessage+0x7c>)
 8003f2e:	70da      	strb	r2, [r3, #3]
    // Send status message
    if (!uart_busy) {
 8003f30:	4b09      	ldr	r3, [pc, #36]	@ (8003f58 <SendStatusMessage+0x84>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d107      	bne.n	8003f48 <SendStatusMessage+0x74>
        uart_busy = 1;
 8003f38:	4b07      	ldr	r3, [pc, #28]	@ (8003f58 <SendStatusMessage+0x84>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_IT(&huart1, status_message, STATUS_MESSAGE_SIZE);
 8003f3e:	2206      	movs	r2, #6
 8003f40:	4903      	ldr	r1, [pc, #12]	@ (8003f50 <SendStatusMessage+0x7c>)
 8003f42:	4806      	ldr	r0, [pc, #24]	@ (8003f5c <SendStatusMessage+0x88>)
 8003f44:	f003 ff33 	bl	8007dae <HAL_UART_Transmit_IT>
    }

}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000724 	.word	0x20000724
 8003f54:	200006c4 	.word	0x200006c4
 8003f58:	200006be 	.word	0x200006be
 8003f5c:	2000031c 	.word	0x2000031c

08003f60 <ApplyFiltering>:

/**
 * @brief Apply filtering to telemetry values
 */
void ApplyFiltering(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
    // Add new values to filter arrays
    altitude_filter[filter_index] = telemetry_data.altitude;
 8003f64:	4b1d      	ldr	r3, [pc, #116]	@ (8003fdc <ApplyFiltering+0x7c>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe0 <ApplyFiltering+0x80>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe4 <ApplyFiltering+0x84>)
 8003f70:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    accel_z_filter[filter_index] = telemetry_data.accel_z;
 8003f74:	4b19      	ldr	r3, [pc, #100]	@ (8003fdc <ApplyFiltering+0x7c>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4b19      	ldr	r3, [pc, #100]	@ (8003fe0 <ApplyFiltering+0x80>)
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe8 <ApplyFiltering+0x88>)
 8003f80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    angle_x_filter[filter_index] = telemetry_data.angle_x;
 8003f84:	4b15      	ldr	r3, [pc, #84]	@ (8003fdc <ApplyFiltering+0x7c>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4b15      	ldr	r3, [pc, #84]	@ (8003fe0 <ApplyFiltering+0x80>)
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	4a17      	ldr	r2, [pc, #92]	@ (8003fec <ApplyFiltering+0x8c>)
 8003f90:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    angle_y_filter[filter_index] = telemetry_data.angle_y;
 8003f94:	4b11      	ldr	r3, [pc, #68]	@ (8003fdc <ApplyFiltering+0x7c>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4b11      	ldr	r3, [pc, #68]	@ (8003fe0 <ApplyFiltering+0x80>)
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	4a14      	ldr	r2, [pc, #80]	@ (8003ff0 <ApplyFiltering+0x90>)
 8003fa0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    // Move to next filter position
    filter_index = (filter_index + 1) % FILTER_SIZE;
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <ApplyFiltering+0x7c>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	4b12      	ldr	r3, [pc, #72]	@ (8003ff4 <ApplyFiltering+0x94>)
 8003fac:	fb83 1302 	smull	r1, r3, r3, r2
 8003fb0:	1059      	asrs	r1, r3, #1
 8003fb2:	17d3      	asrs	r3, r2, #31
 8003fb4:	1ac9      	subs	r1, r1, r3
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	1ad1      	subs	r1, r2, r3
 8003fbe:	b2ca      	uxtb	r2, r1
 8003fc0:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <ApplyFiltering+0x7c>)
 8003fc2:	701a      	strb	r2, [r3, #0]

    // Mark filter as filled after first complete cycle
    if (filter_index == 0) {
 8003fc4:	4b05      	ldr	r3, [pc, #20]	@ (8003fdc <ApplyFiltering+0x7c>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d102      	bne.n	8003fd2 <ApplyFiltering+0x72>
        filter_filled = 1;
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff8 <ApplyFiltering+0x98>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
    }
}
 8003fd2:	bf00      	nop
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20000720 	.word	0x20000720
 8003fe0:	200005e4 	.word	0x200005e4
 8003fe4:	200006d0 	.word	0x200006d0
 8003fe8:	200006e4 	.word	0x200006e4
 8003fec:	200006f8 	.word	0x200006f8
 8003ff0:	2000070c 	.word	0x2000070c
 8003ff4:	66666667 	.word	0x66666667
 8003ff8:	20000721 	.word	0x20000721

08003ffc <GetFilteredValue>:
 * @brief Get filtered value from filter array
 * @param filter_array: Pointer to filter array
 * @retval Filtered value (average)
 */
float GetFilteredValue(float* filter_array)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
    if (!filter_filled) {
 8004004:	4b13      	ldr	r3, [pc, #76]	@ (8004054 <GetFilteredValue+0x58>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <GetFilteredValue+0x16>
        // If filter not filled yet, return current value
        return filter_array[0];
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	e01b      	b.n	800404a <GetFilteredValue+0x4e>
    }

    // Calculate moving average
    float sum = 0;
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < FILTER_SIZE; i++) {
 8004018:	2300      	movs	r3, #0
 800401a:	72fb      	strb	r3, [r7, #11]
 800401c:	e00d      	b.n	800403a <GetFilteredValue+0x3e>
        sum += filter_array[i];
 800401e:	7afb      	ldrb	r3, [r7, #11]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4619      	mov	r1, r3
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f7fc fd82 	bl	8000b34 <__addsf3>
 8004030:	4603      	mov	r3, r0
 8004032:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < FILTER_SIZE; i++) {
 8004034:	7afb      	ldrb	r3, [r7, #11]
 8004036:	3301      	adds	r3, #1
 8004038:	72fb      	strb	r3, [r7, #11]
 800403a:	7afb      	ldrb	r3, [r7, #11]
 800403c:	2b04      	cmp	r3, #4
 800403e:	d9ee      	bls.n	800401e <GetFilteredValue+0x22>
    }
    return sum / FILTER_SIZE;
 8004040:	4905      	ldr	r1, [pc, #20]	@ (8004058 <GetFilteredValue+0x5c>)
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f7fc ff32 	bl	8000eac <__aeabi_fdiv>
 8004048:	4603      	mov	r3, r0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000721 	.word	0x20000721
 8004058:	40a00000 	.word	0x40a00000

0800405c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004060:	b672      	cpsid	i
}
 8004062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004064:	bf00      	nop
 8004066:	e7fd      	b.n	8004064 <Error_Handler+0x8>

08004068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800406e:	4b15      	ldr	r3, [pc, #84]	@ (80040c4 <HAL_MspInit+0x5c>)
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	4a14      	ldr	r2, [pc, #80]	@ (80040c4 <HAL_MspInit+0x5c>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6193      	str	r3, [r2, #24]
 800407a:	4b12      	ldr	r3, [pc, #72]	@ (80040c4 <HAL_MspInit+0x5c>)
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004086:	4b0f      	ldr	r3, [pc, #60]	@ (80040c4 <HAL_MspInit+0x5c>)
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	4a0e      	ldr	r2, [pc, #56]	@ (80040c4 <HAL_MspInit+0x5c>)
 800408c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004090:	61d3      	str	r3, [r2, #28]
 8004092:	4b0c      	ldr	r3, [pc, #48]	@ (80040c4 <HAL_MspInit+0x5c>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800409e:	4b0a      	ldr	r3, [pc, #40]	@ (80040c8 <HAL_MspInit+0x60>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	4a04      	ldr	r2, [pc, #16]	@ (80040c8 <HAL_MspInit+0x60>)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40010000 	.word	0x40010000

080040cc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d4:	f107 0310 	add.w	r3, r7, #16
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a15      	ldr	r2, [pc, #84]	@ (800413c <HAL_I2C_MspInit+0x70>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d123      	bne.n	8004134 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ec:	4b14      	ldr	r3, [pc, #80]	@ (8004140 <HAL_I2C_MspInit+0x74>)
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	4a13      	ldr	r2, [pc, #76]	@ (8004140 <HAL_I2C_MspInit+0x74>)
 80040f2:	f043 0308 	orr.w	r3, r3, #8
 80040f6:	6193      	str	r3, [r2, #24]
 80040f8:	4b11      	ldr	r3, [pc, #68]	@ (8004140 <HAL_I2C_MspInit+0x74>)
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004104:	23c0      	movs	r3, #192	@ 0xc0
 8004106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004108:	2312      	movs	r3, #18
 800410a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800410c:	2303      	movs	r3, #3
 800410e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004110:	f107 0310 	add.w	r3, r7, #16
 8004114:	4619      	mov	r1, r3
 8004116:	480b      	ldr	r0, [pc, #44]	@ (8004144 <HAL_I2C_MspInit+0x78>)
 8004118:	f000 fe58 	bl	8004dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800411c:	4b08      	ldr	r3, [pc, #32]	@ (8004140 <HAL_I2C_MspInit+0x74>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	4a07      	ldr	r2, [pc, #28]	@ (8004140 <HAL_I2C_MspInit+0x74>)
 8004122:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004126:	61d3      	str	r3, [r2, #28]
 8004128:	4b05      	ldr	r3, [pc, #20]	@ (8004140 <HAL_I2C_MspInit+0x74>)
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004134:	bf00      	nop
 8004136:	3720      	adds	r7, #32
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40005400 	.word	0x40005400
 8004140:	40021000 	.word	0x40021000
 8004144:	40010c00 	.word	0x40010c00

08004148 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004150:	f107 0310 	add.w	r3, r7, #16
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1f      	ldr	r2, [pc, #124]	@ (80041e0 <HAL_SPI_MspInit+0x98>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d137      	bne.n	80041d8 <HAL_SPI_MspInit+0x90>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004168:	4b1e      	ldr	r3, [pc, #120]	@ (80041e4 <HAL_SPI_MspInit+0x9c>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	4a1d      	ldr	r2, [pc, #116]	@ (80041e4 <HAL_SPI_MspInit+0x9c>)
 800416e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004172:	6193      	str	r3, [r2, #24]
 8004174:	4b1b      	ldr	r3, [pc, #108]	@ (80041e4 <HAL_SPI_MspInit+0x9c>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004180:	4b18      	ldr	r3, [pc, #96]	@ (80041e4 <HAL_SPI_MspInit+0x9c>)
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	4a17      	ldr	r2, [pc, #92]	@ (80041e4 <HAL_SPI_MspInit+0x9c>)
 8004186:	f043 0304 	orr.w	r3, r3, #4
 800418a:	6193      	str	r3, [r2, #24]
 800418c:	4b15      	ldr	r3, [pc, #84]	@ (80041e4 <HAL_SPI_MspInit+0x9c>)
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004198:	23a0      	movs	r3, #160	@ 0xa0
 800419a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419c:	2302      	movs	r3, #2
 800419e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041a0:	2303      	movs	r3, #3
 80041a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a4:	f107 0310 	add.w	r3, r7, #16
 80041a8:	4619      	mov	r1, r3
 80041aa:	480f      	ldr	r0, [pc, #60]	@ (80041e8 <HAL_SPI_MspInit+0xa0>)
 80041ac:	f000 fe0e 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041b0:	2340      	movs	r3, #64	@ 0x40
 80041b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	4619      	mov	r1, r3
 80041c2:	4809      	ldr	r0, [pc, #36]	@ (80041e8 <HAL_SPI_MspInit+0xa0>)
 80041c4:	f000 fe02 	bl	8004dcc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80041c8:	2200      	movs	r2, #0
 80041ca:	2100      	movs	r1, #0
 80041cc:	2023      	movs	r0, #35	@ 0x23
 80041ce:	f000 fbb2 	bl	8004936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80041d2:	2023      	movs	r0, #35	@ 0x23
 80041d4:	f000 fbcb 	bl	800496e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80041d8:	bf00      	nop
 80041da:	3720      	adds	r7, #32
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40013000 	.word	0x40013000
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40010800 	.word	0x40010800

080041ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a09      	ldr	r2, [pc, #36]	@ (8004220 <HAL_TIM_Base_MspInit+0x34>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10b      	bne.n	8004216 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041fe:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <HAL_TIM_Base_MspInit+0x38>)
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	4a08      	ldr	r2, [pc, #32]	@ (8004224 <HAL_TIM_Base_MspInit+0x38>)
 8004204:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004208:	6193      	str	r3, [r2, #24]
 800420a:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <HAL_TIM_Base_MspInit+0x38>)
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr
 8004220:	40012c00 	.word	0x40012c00
 8004224:	40021000 	.word	0x40021000

08004228 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08c      	sub	sp, #48	@ 0x30
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004230:	f107 0320 	add.w	r3, r7, #32
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a6a      	ldr	r2, [pc, #424]	@ (80043ec <HAL_UART_MspInit+0x1c4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d160      	bne.n	800430a <HAL_UART_MspInit+0xe2>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004248:	4b69      	ldr	r3, [pc, #420]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	4a68      	ldr	r2, [pc, #416]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 800424e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004252:	6193      	str	r3, [r2, #24]
 8004254:	4b66      	ldr	r3, [pc, #408]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004260:	4b63      	ldr	r3, [pc, #396]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	4a62      	ldr	r2, [pc, #392]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 8004266:	f043 0304 	orr.w	r3, r3, #4
 800426a:	6193      	str	r3, [r2, #24]
 800426c:	4b60      	ldr	r3, [pc, #384]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	61bb      	str	r3, [r7, #24]
 8004276:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004278:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800427c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427e:	2302      	movs	r3, #2
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004282:	2303      	movs	r3, #3
 8004284:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004286:	f107 0320 	add.w	r3, r7, #32
 800428a:	4619      	mov	r1, r3
 800428c:	4859      	ldr	r0, [pc, #356]	@ (80043f4 <HAL_UART_MspInit+0x1cc>)
 800428e:	f000 fd9d 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004298:	2300      	movs	r3, #0
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429c:	2300      	movs	r3, #0
 800429e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a0:	f107 0320 	add.w	r3, r7, #32
 80042a4:	4619      	mov	r1, r3
 80042a6:	4853      	ldr	r0, [pc, #332]	@ (80043f4 <HAL_UART_MspInit+0x1cc>)
 80042a8:	f000 fd90 	bl	8004dcc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80042ac:	4b52      	ldr	r3, [pc, #328]	@ (80043f8 <HAL_UART_MspInit+0x1d0>)
 80042ae:	4a53      	ldr	r2, [pc, #332]	@ (80043fc <HAL_UART_MspInit+0x1d4>)
 80042b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042b2:	4b51      	ldr	r3, [pc, #324]	@ (80043f8 <HAL_UART_MspInit+0x1d0>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042b8:	4b4f      	ldr	r3, [pc, #316]	@ (80043f8 <HAL_UART_MspInit+0x1d0>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042be:	4b4e      	ldr	r3, [pc, #312]	@ (80043f8 <HAL_UART_MspInit+0x1d0>)
 80042c0:	2280      	movs	r2, #128	@ 0x80
 80042c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042c4:	4b4c      	ldr	r3, [pc, #304]	@ (80043f8 <HAL_UART_MspInit+0x1d0>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042ca:	4b4b      	ldr	r3, [pc, #300]	@ (80043f8 <HAL_UART_MspInit+0x1d0>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80042d0:	4b49      	ldr	r3, [pc, #292]	@ (80043f8 <HAL_UART_MspInit+0x1d0>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80042d6:	4b48      	ldr	r3, [pc, #288]	@ (80043f8 <HAL_UART_MspInit+0x1d0>)
 80042d8:	2200      	movs	r2, #0
 80042da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80042dc:	4846      	ldr	r0, [pc, #280]	@ (80043f8 <HAL_UART_MspInit+0x1d0>)
 80042de:	f000 fb61 	bl	80049a4 <HAL_DMA_Init>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80042e8:	f7ff feb8 	bl	800405c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a42      	ldr	r2, [pc, #264]	@ (80043f8 <HAL_UART_MspInit+0x1d0>)
 80042f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042f2:	4a41      	ldr	r2, [pc, #260]	@ (80043f8 <HAL_UART_MspInit+0x1d0>)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042f8:	2200      	movs	r2, #0
 80042fa:	2100      	movs	r1, #0
 80042fc:	2025      	movs	r0, #37	@ 0x25
 80042fe:	f000 fb1a 	bl	8004936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004302:	2025      	movs	r0, #37	@ 0x25
 8004304:	f000 fb33 	bl	800496e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8004308:	e06c      	b.n	80043e4 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3c      	ldr	r2, [pc, #240]	@ (8004400 <HAL_UART_MspInit+0x1d8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d130      	bne.n	8004376 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004314:	4b36      	ldr	r3, [pc, #216]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	4a35      	ldr	r2, [pc, #212]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 800431a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800431e:	61d3      	str	r3, [r2, #28]
 8004320:	4b33      	ldr	r3, [pc, #204]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800432c:	4b30      	ldr	r3, [pc, #192]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	4a2f      	ldr	r2, [pc, #188]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 8004332:	f043 0304 	orr.w	r3, r3, #4
 8004336:	6193      	str	r3, [r2, #24]
 8004338:	4b2d      	ldr	r3, [pc, #180]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004344:	2304      	movs	r3, #4
 8004346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004348:	2302      	movs	r3, #2
 800434a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800434c:	2303      	movs	r3, #3
 800434e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004350:	f107 0320 	add.w	r3, r7, #32
 8004354:	4619      	mov	r1, r3
 8004356:	4827      	ldr	r0, [pc, #156]	@ (80043f4 <HAL_UART_MspInit+0x1cc>)
 8004358:	f000 fd38 	bl	8004dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800435c:	2308      	movs	r3, #8
 800435e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004360:	2300      	movs	r3, #0
 8004362:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004364:	2300      	movs	r3, #0
 8004366:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004368:	f107 0320 	add.w	r3, r7, #32
 800436c:	4619      	mov	r1, r3
 800436e:	4821      	ldr	r0, [pc, #132]	@ (80043f4 <HAL_UART_MspInit+0x1cc>)
 8004370:	f000 fd2c 	bl	8004dcc <HAL_GPIO_Init>
}
 8004374:	e036      	b.n	80043e4 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a22      	ldr	r2, [pc, #136]	@ (8004404 <HAL_UART_MspInit+0x1dc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d131      	bne.n	80043e4 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004380:	4b1b      	ldr	r3, [pc, #108]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	4a1a      	ldr	r2, [pc, #104]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 8004386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800438a:	61d3      	str	r3, [r2, #28]
 800438c:	4b18      	ldr	r3, [pc, #96]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004398:	4b15      	ldr	r3, [pc, #84]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	4a14      	ldr	r2, [pc, #80]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 800439e:	f043 0308 	orr.w	r3, r3, #8
 80043a2:	6193      	str	r3, [r2, #24]
 80043a4:	4b12      	ldr	r3, [pc, #72]	@ (80043f0 <HAL_UART_MspInit+0x1c8>)
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80043b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b6:	2302      	movs	r3, #2
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043ba:	2303      	movs	r3, #3
 80043bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043be:	f107 0320 	add.w	r3, r7, #32
 80043c2:	4619      	mov	r1, r3
 80043c4:	4810      	ldr	r0, [pc, #64]	@ (8004408 <HAL_UART_MspInit+0x1e0>)
 80043c6:	f000 fd01 	bl	8004dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80043ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80043ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043d0:	2300      	movs	r3, #0
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d8:	f107 0320 	add.w	r3, r7, #32
 80043dc:	4619      	mov	r1, r3
 80043de:	480a      	ldr	r0, [pc, #40]	@ (8004408 <HAL_UART_MspInit+0x1e0>)
 80043e0:	f000 fcf4 	bl	8004dcc <HAL_GPIO_Init>
}
 80043e4:	bf00      	nop
 80043e6:	3730      	adds	r7, #48	@ 0x30
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40013800 	.word	0x40013800
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40010800 	.word	0x40010800
 80043f8:	200003f4 	.word	0x200003f4
 80043fc:	40020058 	.word	0x40020058
 8004400:	40004400 	.word	0x40004400
 8004404:	40004800 	.word	0x40004800
 8004408:	40010c00 	.word	0x40010c00

0800440c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004410:	bf00      	nop
 8004412:	e7fd      	b.n	8004410 <NMI_Handler+0x4>

08004414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004418:	bf00      	nop
 800441a:	e7fd      	b.n	8004418 <HardFault_Handler+0x4>

0800441c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004420:	bf00      	nop
 8004422:	e7fd      	b.n	8004420 <MemManage_Handler+0x4>

08004424 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004428:	bf00      	nop
 800442a:	e7fd      	b.n	8004428 <BusFault_Handler+0x4>

0800442c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004430:	bf00      	nop
 8004432:	e7fd      	b.n	8004430 <UsageFault_Handler+0x4>

08004434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004438:	bf00      	nop
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800445c:	f000 f954 	bl	8004708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004460:	bf00      	nop
 8004462:	bd80      	pop	{r7, pc}

08004464 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004468:	4802      	ldr	r0, [pc, #8]	@ (8004474 <DMA1_Channel5_IRQHandler+0x10>)
 800446a:	f000 fba9 	bl	8004bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	200003f4 	.word	0x200003f4

08004478 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800447c:	4802      	ldr	r0, [pc, #8]	@ (8004488 <SPI1_IRQHandler+0x10>)
 800447e:	f002 ff41 	bl	8007304 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	2000027c 	.word	0x2000027c

0800448c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004490:	4802      	ldr	r0, [pc, #8]	@ (800449c <USART1_IRQHandler+0x10>)
 8004492:	f003 fce7 	bl	8007e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	2000031c 	.word	0x2000031c

080044a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return 1;
 80044a4:	2301      	movs	r3, #1
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <_kill>:

int _kill(int pid, int sig)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044b8:	f005 f81c 	bl	80094f4 <__errno>
 80044bc:	4603      	mov	r3, r0
 80044be:	2216      	movs	r2, #22
 80044c0:	601a      	str	r2, [r3, #0]
  return -1;
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <_exit>:

void _exit (int status)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80044d6:	f04f 31ff 	mov.w	r1, #4294967295
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff ffe7 	bl	80044ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80044e0:	bf00      	nop
 80044e2:	e7fd      	b.n	80044e0 <_exit+0x12>

080044e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	e00a      	b.n	800450c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80044f6:	f3af 8000 	nop.w
 80044fa:	4601      	mov	r1, r0
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	60ba      	str	r2, [r7, #8]
 8004502:	b2ca      	uxtb	r2, r1
 8004504:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	3301      	adds	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	dbf0      	blt.n	80044f6 <_read+0x12>
  }

  return len;
 8004514:	687b      	ldr	r3, [r7, #4]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	e009      	b.n	8004544 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	60ba      	str	r2, [r7, #8]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	3301      	adds	r3, #1
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	429a      	cmp	r2, r3
 800454a:	dbf1      	blt.n	8004530 <_write+0x12>
  }
  return len;
 800454c:	687b      	ldr	r3, [r7, #4]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <_close>:

int _close(int file)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800455e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800457c:	605a      	str	r2, [r3, #4]
  return 0;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <_isatty>:

int _isatty(int file)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004592:	2301      	movs	r3, #1
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr
	...

080045b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045c0:	4a14      	ldr	r2, [pc, #80]	@ (8004614 <_sbrk+0x5c>)
 80045c2:	4b15      	ldr	r3, [pc, #84]	@ (8004618 <_sbrk+0x60>)
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045cc:	4b13      	ldr	r3, [pc, #76]	@ (800461c <_sbrk+0x64>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d102      	bne.n	80045da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045d4:	4b11      	ldr	r3, [pc, #68]	@ (800461c <_sbrk+0x64>)
 80045d6:	4a12      	ldr	r2, [pc, #72]	@ (8004620 <_sbrk+0x68>)
 80045d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045da:	4b10      	ldr	r3, [pc, #64]	@ (800461c <_sbrk+0x64>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4413      	add	r3, r2
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d207      	bcs.n	80045f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045e8:	f004 ff84 	bl	80094f4 <__errno>
 80045ec:	4603      	mov	r3, r0
 80045ee:	220c      	movs	r2, #12
 80045f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045f2:	f04f 33ff 	mov.w	r3, #4294967295
 80045f6:	e009      	b.n	800460c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045f8:	4b08      	ldr	r3, [pc, #32]	@ (800461c <_sbrk+0x64>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045fe:	4b07      	ldr	r3, [pc, #28]	@ (800461c <_sbrk+0x64>)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4413      	add	r3, r2
 8004606:	4a05      	ldr	r2, [pc, #20]	@ (800461c <_sbrk+0x64>)
 8004608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800460a:	68fb      	ldr	r3, [r7, #12]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20005000 	.word	0x20005000
 8004618:	00000400 	.word	0x00000400
 800461c:	20000744 	.word	0x20000744
 8004620:	20000898 	.word	0x20000898

08004624 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004630:	f7ff fff8 	bl	8004624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004634:	480b      	ldr	r0, [pc, #44]	@ (8004664 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004636:	490c      	ldr	r1, [pc, #48]	@ (8004668 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004638:	4a0c      	ldr	r2, [pc, #48]	@ (800466c <LoopFillZerobss+0x16>)
  movs r3, #0
 800463a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800463c:	e002      	b.n	8004644 <LoopCopyDataInit>

0800463e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800463e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004642:	3304      	adds	r3, #4

08004644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004648:	d3f9      	bcc.n	800463e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800464a:	4a09      	ldr	r2, [pc, #36]	@ (8004670 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800464c:	4c09      	ldr	r4, [pc, #36]	@ (8004674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800464e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004650:	e001      	b.n	8004656 <LoopFillZerobss>

08004652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004654:	3204      	adds	r2, #4

08004656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004658:	d3fb      	bcc.n	8004652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800465a:	f004 ff51 	bl	8009500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800465e:	f7fe fcf1 	bl	8003044 <main>
  bx lr
 8004662:	4770      	bx	lr
  ldr r0, =_sdata
 8004664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004668:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800466c:	0800c87c 	.word	0x0800c87c
  ldr r2, =_sbss
 8004670:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004674:	20000898 	.word	0x20000898

08004678 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004678:	e7fe      	b.n	8004678 <ADC1_2_IRQHandler>
	...

0800467c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004680:	4b08      	ldr	r3, [pc, #32]	@ (80046a4 <HAL_Init+0x28>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a07      	ldr	r2, [pc, #28]	@ (80046a4 <HAL_Init+0x28>)
 8004686:	f043 0310 	orr.w	r3, r3, #16
 800468a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800468c:	2003      	movs	r0, #3
 800468e:	f000 f947 	bl	8004920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004692:	200f      	movs	r0, #15
 8004694:	f000 f808 	bl	80046a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004698:	f7ff fce6 	bl	8004068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40022000 	.word	0x40022000

080046a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046b0:	4b12      	ldr	r3, [pc, #72]	@ (80046fc <HAL_InitTick+0x54>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4b12      	ldr	r3, [pc, #72]	@ (8004700 <HAL_InitTick+0x58>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	4619      	mov	r1, r3
 80046ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046be:	fbb3 f3f1 	udiv	r3, r3, r1
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f95f 	bl	800498a <HAL_SYSTICK_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e00e      	b.n	80046f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b0f      	cmp	r3, #15
 80046da:	d80a      	bhi.n	80046f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046dc:	2200      	movs	r2, #0
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	f000 f927 	bl	8004936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046e8:	4a06      	ldr	r2, [pc, #24]	@ (8004704 <HAL_InitTick+0x5c>)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e000      	b.n	80046f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20000000 	.word	0x20000000
 8004700:	20000008 	.word	0x20000008
 8004704:	20000004 	.word	0x20000004

08004708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800470c:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <HAL_IncTick+0x1c>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <HAL_IncTick+0x20>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4413      	add	r3, r2
 8004718:	4a03      	ldr	r2, [pc, #12]	@ (8004728 <HAL_IncTick+0x20>)
 800471a:	6013      	str	r3, [r2, #0]
}
 800471c:	bf00      	nop
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	20000008 	.word	0x20000008
 8004728:	20000748 	.word	0x20000748

0800472c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  return uwTick;
 8004730:	4b02      	ldr	r3, [pc, #8]	@ (800473c <HAL_GetTick+0x10>)
 8004732:	681b      	ldr	r3, [r3, #0]
}
 8004734:	4618      	mov	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	20000748 	.word	0x20000748

08004740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004748:	f7ff fff0 	bl	800472c <HAL_GetTick>
 800474c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004758:	d005      	beq.n	8004766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800475a:	4b0a      	ldr	r3, [pc, #40]	@ (8004784 <HAL_Delay+0x44>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004766:	bf00      	nop
 8004768:	f7ff ffe0 	bl	800472c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	429a      	cmp	r2, r3
 8004776:	d8f7      	bhi.n	8004768 <HAL_Delay+0x28>
  {
  }
}
 8004778:	bf00      	nop
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000008 	.word	0x20000008

08004788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004798:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <__NVIC_SetPriorityGrouping+0x44>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047a4:	4013      	ands	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047ba:	4a04      	ldr	r2, [pc, #16]	@ (80047cc <__NVIC_SetPriorityGrouping+0x44>)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	60d3      	str	r3, [r2, #12]
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	e000ed00 	.word	0xe000ed00

080047d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047d4:	4b04      	ldr	r3, [pc, #16]	@ (80047e8 <__NVIC_GetPriorityGrouping+0x18>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	0a1b      	lsrs	r3, r3, #8
 80047da:	f003 0307 	and.w	r3, r3, #7
}
 80047de:	4618      	mov	r0, r3
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	db0b      	blt.n	8004816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	f003 021f 	and.w	r2, r3, #31
 8004804:	4906      	ldr	r1, [pc, #24]	@ (8004820 <__NVIC_EnableIRQ+0x34>)
 8004806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2001      	movs	r0, #1
 800480e:	fa00 f202 	lsl.w	r2, r0, r2
 8004812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr
 8004820:	e000e100 	.word	0xe000e100

08004824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004834:	2b00      	cmp	r3, #0
 8004836:	db0a      	blt.n	800484e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	490c      	ldr	r1, [pc, #48]	@ (8004870 <__NVIC_SetPriority+0x4c>)
 800483e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004842:	0112      	lsls	r2, r2, #4
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	440b      	add	r3, r1
 8004848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800484c:	e00a      	b.n	8004864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	b2da      	uxtb	r2, r3
 8004852:	4908      	ldr	r1, [pc, #32]	@ (8004874 <__NVIC_SetPriority+0x50>)
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	3b04      	subs	r3, #4
 800485c:	0112      	lsls	r2, r2, #4
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	440b      	add	r3, r1
 8004862:	761a      	strb	r2, [r3, #24]
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	e000e100 	.word	0xe000e100
 8004874:	e000ed00 	.word	0xe000ed00

08004878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004878:	b480      	push	{r7}
 800487a:	b089      	sub	sp, #36	@ 0x24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f1c3 0307 	rsb	r3, r3, #7
 8004892:	2b04      	cmp	r3, #4
 8004894:	bf28      	it	cs
 8004896:	2304      	movcs	r3, #4
 8004898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3304      	adds	r3, #4
 800489e:	2b06      	cmp	r3, #6
 80048a0:	d902      	bls.n	80048a8 <NVIC_EncodePriority+0x30>
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3b03      	subs	r3, #3
 80048a6:	e000      	b.n	80048aa <NVIC_EncodePriority+0x32>
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	401a      	ands	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048c0:	f04f 31ff 	mov.w	r1, #4294967295
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ca:	43d9      	mvns	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d0:	4313      	orrs	r3, r2
         );
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3724      	adds	r7, #36	@ 0x24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048ec:	d301      	bcc.n	80048f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ee:	2301      	movs	r3, #1
 80048f0:	e00f      	b.n	8004912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048f2:	4a0a      	ldr	r2, [pc, #40]	@ (800491c <SysTick_Config+0x40>)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048fa:	210f      	movs	r1, #15
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	f7ff ff90 	bl	8004824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004904:	4b05      	ldr	r3, [pc, #20]	@ (800491c <SysTick_Config+0x40>)
 8004906:	2200      	movs	r2, #0
 8004908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800490a:	4b04      	ldr	r3, [pc, #16]	@ (800491c <SysTick_Config+0x40>)
 800490c:	2207      	movs	r2, #7
 800490e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	e000e010 	.word	0xe000e010

08004920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff ff2d 	bl	8004788 <__NVIC_SetPriorityGrouping>
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004936:	b580      	push	{r7, lr}
 8004938:	b086      	sub	sp, #24
 800493a:	af00      	add	r7, sp, #0
 800493c:	4603      	mov	r3, r0
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004948:	f7ff ff42 	bl	80047d0 <__NVIC_GetPriorityGrouping>
 800494c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	6978      	ldr	r0, [r7, #20]
 8004954:	f7ff ff90 	bl	8004878 <NVIC_EncodePriority>
 8004958:	4602      	mov	r2, r0
 800495a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ff5f 	bl	8004824 <__NVIC_SetPriority>
}
 8004966:	bf00      	nop
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	4603      	mov	r3, r0
 8004976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ff35 	bl	80047ec <__NVIC_EnableIRQ>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b082      	sub	sp, #8
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff ffa2 	bl	80048dc <SysTick_Config>
 8004998:	4603      	mov	r3, r0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e043      	b.n	8004a42 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	4b22      	ldr	r3, [pc, #136]	@ (8004a4c <HAL_DMA_Init+0xa8>)
 80049c2:	4413      	add	r3, r2
 80049c4:	4a22      	ldr	r2, [pc, #136]	@ (8004a50 <HAL_DMA_Init+0xac>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	091b      	lsrs	r3, r3, #4
 80049cc:	009a      	lsls	r2, r3, #2
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a54 <HAL_DMA_Init+0xb0>)
 80049d6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80049ee:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80049f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80049fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	bffdfff8 	.word	0xbffdfff8
 8004a50:	cccccccd 	.word	0xcccccccd
 8004a54:	40020000 	.word	0x40020000

08004a58 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d008      	beq.n	8004a82 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2204      	movs	r2, #4
 8004a74:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e020      	b.n	8004ac4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 020e 	bic.w	r2, r2, #14
 8004a90:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aaa:	2101      	movs	r1, #1
 8004aac:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d005      	beq.n	8004af4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2204      	movs	r2, #4
 8004aec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
 8004af2:	e051      	b.n	8004b98 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 020e 	bic.w	r2, r2, #14
 8004b02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a22      	ldr	r2, [pc, #136]	@ (8004ba4 <HAL_DMA_Abort_IT+0xd4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d029      	beq.n	8004b72 <HAL_DMA_Abort_IT+0xa2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a21      	ldr	r2, [pc, #132]	@ (8004ba8 <HAL_DMA_Abort_IT+0xd8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d022      	beq.n	8004b6e <HAL_DMA_Abort_IT+0x9e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8004bac <HAL_DMA_Abort_IT+0xdc>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d01a      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x98>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb0 <HAL_DMA_Abort_IT+0xe0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d012      	beq.n	8004b62 <HAL_DMA_Abort_IT+0x92>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb4 <HAL_DMA_Abort_IT+0xe4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00a      	beq.n	8004b5c <HAL_DMA_Abort_IT+0x8c>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb8 <HAL_DMA_Abort_IT+0xe8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d102      	bne.n	8004b56 <HAL_DMA_Abort_IT+0x86>
 8004b50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b54:	e00e      	b.n	8004b74 <HAL_DMA_Abort_IT+0xa4>
 8004b56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b5a:	e00b      	b.n	8004b74 <HAL_DMA_Abort_IT+0xa4>
 8004b5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b60:	e008      	b.n	8004b74 <HAL_DMA_Abort_IT+0xa4>
 8004b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b66:	e005      	b.n	8004b74 <HAL_DMA_Abort_IT+0xa4>
 8004b68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b6c:	e002      	b.n	8004b74 <HAL_DMA_Abort_IT+0xa4>
 8004b6e:	2310      	movs	r3, #16
 8004b70:	e000      	b.n	8004b74 <HAL_DMA_Abort_IT+0xa4>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4a11      	ldr	r2, [pc, #68]	@ (8004bbc <HAL_DMA_Abort_IT+0xec>)
 8004b76:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	4798      	blx	r3
    } 
  }
  return status;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40020008 	.word	0x40020008
 8004ba8:	4002001c 	.word	0x4002001c
 8004bac:	40020030 	.word	0x40020030
 8004bb0:	40020044 	.word	0x40020044
 8004bb4:	40020058 	.word	0x40020058
 8004bb8:	4002006c 	.word	0x4002006c
 8004bbc:	40020000 	.word	0x40020000

08004bc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bdc:	2204      	movs	r2, #4
 8004bde:	409a      	lsls	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d04f      	beq.n	8004c88 <HAL_DMA_IRQHandler+0xc8>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d04a      	beq.n	8004c88 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0204 	bic.w	r2, r2, #4
 8004c0e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a66      	ldr	r2, [pc, #408]	@ (8004db0 <HAL_DMA_IRQHandler+0x1f0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d029      	beq.n	8004c6e <HAL_DMA_IRQHandler+0xae>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a65      	ldr	r2, [pc, #404]	@ (8004db4 <HAL_DMA_IRQHandler+0x1f4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d022      	beq.n	8004c6a <HAL_DMA_IRQHandler+0xaa>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a63      	ldr	r2, [pc, #396]	@ (8004db8 <HAL_DMA_IRQHandler+0x1f8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d01a      	beq.n	8004c64 <HAL_DMA_IRQHandler+0xa4>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a62      	ldr	r2, [pc, #392]	@ (8004dbc <HAL_DMA_IRQHandler+0x1fc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d012      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x9e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a60      	ldr	r2, [pc, #384]	@ (8004dc0 <HAL_DMA_IRQHandler+0x200>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00a      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x98>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a5f      	ldr	r2, [pc, #380]	@ (8004dc4 <HAL_DMA_IRQHandler+0x204>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d102      	bne.n	8004c52 <HAL_DMA_IRQHandler+0x92>
 8004c4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c50:	e00e      	b.n	8004c70 <HAL_DMA_IRQHandler+0xb0>
 8004c52:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004c56:	e00b      	b.n	8004c70 <HAL_DMA_IRQHandler+0xb0>
 8004c58:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004c5c:	e008      	b.n	8004c70 <HAL_DMA_IRQHandler+0xb0>
 8004c5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c62:	e005      	b.n	8004c70 <HAL_DMA_IRQHandler+0xb0>
 8004c64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c68:	e002      	b.n	8004c70 <HAL_DMA_IRQHandler+0xb0>
 8004c6a:	2340      	movs	r3, #64	@ 0x40
 8004c6c:	e000      	b.n	8004c70 <HAL_DMA_IRQHandler+0xb0>
 8004c6e:	2304      	movs	r3, #4
 8004c70:	4a55      	ldr	r2, [pc, #340]	@ (8004dc8 <HAL_DMA_IRQHandler+0x208>)
 8004c72:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8094 	beq.w	8004da6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004c86:	e08e      	b.n	8004da6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d056      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x186>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d051      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10b      	bne.n	8004cc8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 020a 	bic.w	r2, r2, #10
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a38      	ldr	r2, [pc, #224]	@ (8004db0 <HAL_DMA_IRQHandler+0x1f0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d029      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x166>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a37      	ldr	r2, [pc, #220]	@ (8004db4 <HAL_DMA_IRQHandler+0x1f4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d022      	beq.n	8004d22 <HAL_DMA_IRQHandler+0x162>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a35      	ldr	r2, [pc, #212]	@ (8004db8 <HAL_DMA_IRQHandler+0x1f8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01a      	beq.n	8004d1c <HAL_DMA_IRQHandler+0x15c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a34      	ldr	r2, [pc, #208]	@ (8004dbc <HAL_DMA_IRQHandler+0x1fc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d012      	beq.n	8004d16 <HAL_DMA_IRQHandler+0x156>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a32      	ldr	r2, [pc, #200]	@ (8004dc0 <HAL_DMA_IRQHandler+0x200>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00a      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x150>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a31      	ldr	r2, [pc, #196]	@ (8004dc4 <HAL_DMA_IRQHandler+0x204>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d102      	bne.n	8004d0a <HAL_DMA_IRQHandler+0x14a>
 8004d04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004d08:	e00e      	b.n	8004d28 <HAL_DMA_IRQHandler+0x168>
 8004d0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d0e:	e00b      	b.n	8004d28 <HAL_DMA_IRQHandler+0x168>
 8004d10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d14:	e008      	b.n	8004d28 <HAL_DMA_IRQHandler+0x168>
 8004d16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d1a:	e005      	b.n	8004d28 <HAL_DMA_IRQHandler+0x168>
 8004d1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d20:	e002      	b.n	8004d28 <HAL_DMA_IRQHandler+0x168>
 8004d22:	2320      	movs	r3, #32
 8004d24:	e000      	b.n	8004d28 <HAL_DMA_IRQHandler+0x168>
 8004d26:	2302      	movs	r3, #2
 8004d28:	4a27      	ldr	r2, [pc, #156]	@ (8004dc8 <HAL_DMA_IRQHandler+0x208>)
 8004d2a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d034      	beq.n	8004da6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d44:	e02f      	b.n	8004da6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4013      	ands	r3, r2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d028      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x1e8>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d023      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 020e 	bic.w	r2, r2, #14
 8004d6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d78:	2101      	movs	r1, #1
 8004d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d004      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4798      	blx	r3
    }
  }
  return;
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
}
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40020008 	.word	0x40020008
 8004db4:	4002001c 	.word	0x4002001c
 8004db8:	40020030 	.word	0x40020030
 8004dbc:	40020044 	.word	0x40020044
 8004dc0:	40020058 	.word	0x40020058
 8004dc4:	4002006c 	.word	0x4002006c
 8004dc8:	40020000 	.word	0x40020000

08004dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b08b      	sub	sp, #44	@ 0x2c
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dde:	e169      	b.n	80050b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004de0:	2201      	movs	r2, #1
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	f040 8158 	bne.w	80050ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4a9a      	ldr	r2, [pc, #616]	@ (800506c <HAL_GPIO_Init+0x2a0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d05e      	beq.n	8004ec6 <HAL_GPIO_Init+0xfa>
 8004e08:	4a98      	ldr	r2, [pc, #608]	@ (800506c <HAL_GPIO_Init+0x2a0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d875      	bhi.n	8004efa <HAL_GPIO_Init+0x12e>
 8004e0e:	4a98      	ldr	r2, [pc, #608]	@ (8005070 <HAL_GPIO_Init+0x2a4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d058      	beq.n	8004ec6 <HAL_GPIO_Init+0xfa>
 8004e14:	4a96      	ldr	r2, [pc, #600]	@ (8005070 <HAL_GPIO_Init+0x2a4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d86f      	bhi.n	8004efa <HAL_GPIO_Init+0x12e>
 8004e1a:	4a96      	ldr	r2, [pc, #600]	@ (8005074 <HAL_GPIO_Init+0x2a8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d052      	beq.n	8004ec6 <HAL_GPIO_Init+0xfa>
 8004e20:	4a94      	ldr	r2, [pc, #592]	@ (8005074 <HAL_GPIO_Init+0x2a8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d869      	bhi.n	8004efa <HAL_GPIO_Init+0x12e>
 8004e26:	4a94      	ldr	r2, [pc, #592]	@ (8005078 <HAL_GPIO_Init+0x2ac>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d04c      	beq.n	8004ec6 <HAL_GPIO_Init+0xfa>
 8004e2c:	4a92      	ldr	r2, [pc, #584]	@ (8005078 <HAL_GPIO_Init+0x2ac>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d863      	bhi.n	8004efa <HAL_GPIO_Init+0x12e>
 8004e32:	4a92      	ldr	r2, [pc, #584]	@ (800507c <HAL_GPIO_Init+0x2b0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d046      	beq.n	8004ec6 <HAL_GPIO_Init+0xfa>
 8004e38:	4a90      	ldr	r2, [pc, #576]	@ (800507c <HAL_GPIO_Init+0x2b0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d85d      	bhi.n	8004efa <HAL_GPIO_Init+0x12e>
 8004e3e:	2b12      	cmp	r3, #18
 8004e40:	d82a      	bhi.n	8004e98 <HAL_GPIO_Init+0xcc>
 8004e42:	2b12      	cmp	r3, #18
 8004e44:	d859      	bhi.n	8004efa <HAL_GPIO_Init+0x12e>
 8004e46:	a201      	add	r2, pc, #4	@ (adr r2, 8004e4c <HAL_GPIO_Init+0x80>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004ec7 	.word	0x08004ec7
 8004e50:	08004ea1 	.word	0x08004ea1
 8004e54:	08004eb3 	.word	0x08004eb3
 8004e58:	08004ef5 	.word	0x08004ef5
 8004e5c:	08004efb 	.word	0x08004efb
 8004e60:	08004efb 	.word	0x08004efb
 8004e64:	08004efb 	.word	0x08004efb
 8004e68:	08004efb 	.word	0x08004efb
 8004e6c:	08004efb 	.word	0x08004efb
 8004e70:	08004efb 	.word	0x08004efb
 8004e74:	08004efb 	.word	0x08004efb
 8004e78:	08004efb 	.word	0x08004efb
 8004e7c:	08004efb 	.word	0x08004efb
 8004e80:	08004efb 	.word	0x08004efb
 8004e84:	08004efb 	.word	0x08004efb
 8004e88:	08004efb 	.word	0x08004efb
 8004e8c:	08004efb 	.word	0x08004efb
 8004e90:	08004ea9 	.word	0x08004ea9
 8004e94:	08004ebd 	.word	0x08004ebd
 8004e98:	4a79      	ldr	r2, [pc, #484]	@ (8005080 <HAL_GPIO_Init+0x2b4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d013      	beq.n	8004ec6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e9e:	e02c      	b.n	8004efa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	623b      	str	r3, [r7, #32]
          break;
 8004ea6:	e029      	b.n	8004efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	3304      	adds	r3, #4
 8004eae:	623b      	str	r3, [r7, #32]
          break;
 8004eb0:	e024      	b.n	8004efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	623b      	str	r3, [r7, #32]
          break;
 8004eba:	e01f      	b.n	8004efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	623b      	str	r3, [r7, #32]
          break;
 8004ec4:	e01a      	b.n	8004efc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004ece:	2304      	movs	r3, #4
 8004ed0:	623b      	str	r3, [r7, #32]
          break;
 8004ed2:	e013      	b.n	8004efc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d105      	bne.n	8004ee8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004edc:	2308      	movs	r3, #8
 8004ede:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	611a      	str	r2, [r3, #16]
          break;
 8004ee6:	e009      	b.n	8004efc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ee8:	2308      	movs	r3, #8
 8004eea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	615a      	str	r2, [r3, #20]
          break;
 8004ef2:	e003      	b.n	8004efc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	623b      	str	r3, [r7, #32]
          break;
 8004ef8:	e000      	b.n	8004efc <HAL_GPIO_Init+0x130>
          break;
 8004efa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2bff      	cmp	r3, #255	@ 0xff
 8004f00:	d801      	bhi.n	8004f06 <HAL_GPIO_Init+0x13a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	e001      	b.n	8004f0a <HAL_GPIO_Init+0x13e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3304      	adds	r3, #4
 8004f0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2bff      	cmp	r3, #255	@ 0xff
 8004f10:	d802      	bhi.n	8004f18 <HAL_GPIO_Init+0x14c>
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	e002      	b.n	8004f1e <HAL_GPIO_Init+0x152>
 8004f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1a:	3b08      	subs	r3, #8
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	210f      	movs	r1, #15
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	401a      	ands	r2, r3
 8004f30:	6a39      	ldr	r1, [r7, #32]
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	fa01 f303 	lsl.w	r3, r1, r3
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 80b1 	beq.w	80050ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004f4c:	4b4d      	ldr	r3, [pc, #308]	@ (8005084 <HAL_GPIO_Init+0x2b8>)
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	4a4c      	ldr	r2, [pc, #304]	@ (8005084 <HAL_GPIO_Init+0x2b8>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	6193      	str	r3, [r2, #24]
 8004f58:	4b4a      	ldr	r3, [pc, #296]	@ (8005084 <HAL_GPIO_Init+0x2b8>)
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004f64:	4a48      	ldr	r2, [pc, #288]	@ (8005088 <HAL_GPIO_Init+0x2bc>)
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	089b      	lsrs	r3, r3, #2
 8004f6a:	3302      	adds	r3, #2
 8004f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	220f      	movs	r2, #15
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4013      	ands	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a40      	ldr	r2, [pc, #256]	@ (800508c <HAL_GPIO_Init+0x2c0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <HAL_GPIO_Init+0x1ec>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a3f      	ldr	r2, [pc, #252]	@ (8005090 <HAL_GPIO_Init+0x2c4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00d      	beq.n	8004fb4 <HAL_GPIO_Init+0x1e8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a3e      	ldr	r2, [pc, #248]	@ (8005094 <HAL_GPIO_Init+0x2c8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d007      	beq.n	8004fb0 <HAL_GPIO_Init+0x1e4>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a3d      	ldr	r2, [pc, #244]	@ (8005098 <HAL_GPIO_Init+0x2cc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d101      	bne.n	8004fac <HAL_GPIO_Init+0x1e0>
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e006      	b.n	8004fba <HAL_GPIO_Init+0x1ee>
 8004fac:	2304      	movs	r3, #4
 8004fae:	e004      	b.n	8004fba <HAL_GPIO_Init+0x1ee>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e002      	b.n	8004fba <HAL_GPIO_Init+0x1ee>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <HAL_GPIO_Init+0x1ee>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fbc:	f002 0203 	and.w	r2, r2, #3
 8004fc0:	0092      	lsls	r2, r2, #2
 8004fc2:	4093      	lsls	r3, r2
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004fca:	492f      	ldr	r1, [pc, #188]	@ (8005088 <HAL_GPIO_Init+0x2bc>)
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	089b      	lsrs	r3, r3, #2
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d006      	beq.n	8004ff2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	492c      	ldr	r1, [pc, #176]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]
 8004ff0:	e006      	b.n	8005000 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	4928      	ldr	r1, [pc, #160]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d006      	beq.n	800501a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800500c:	4b23      	ldr	r3, [pc, #140]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	4922      	ldr	r1, [pc, #136]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	4313      	orrs	r3, r2
 8005016:	60cb      	str	r3, [r1, #12]
 8005018:	e006      	b.n	8005028 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800501a:	4b20      	ldr	r3, [pc, #128]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	43db      	mvns	r3, r3
 8005022:	491e      	ldr	r1, [pc, #120]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 8005024:	4013      	ands	r3, r2
 8005026:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d006      	beq.n	8005042 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005034:	4b19      	ldr	r3, [pc, #100]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	4918      	ldr	r1, [pc, #96]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	4313      	orrs	r3, r2
 800503e:	604b      	str	r3, [r1, #4]
 8005040:	e006      	b.n	8005050 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005042:	4b16      	ldr	r3, [pc, #88]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	43db      	mvns	r3, r3
 800504a:	4914      	ldr	r1, [pc, #80]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 800504c:	4013      	ands	r3, r2
 800504e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d021      	beq.n	80050a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800505c:	4b0f      	ldr	r3, [pc, #60]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	490e      	ldr	r1, [pc, #56]	@ (800509c <HAL_GPIO_Init+0x2d0>)
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	4313      	orrs	r3, r2
 8005066:	600b      	str	r3, [r1, #0]
 8005068:	e021      	b.n	80050ae <HAL_GPIO_Init+0x2e2>
 800506a:	bf00      	nop
 800506c:	10320000 	.word	0x10320000
 8005070:	10310000 	.word	0x10310000
 8005074:	10220000 	.word	0x10220000
 8005078:	10210000 	.word	0x10210000
 800507c:	10120000 	.word	0x10120000
 8005080:	10110000 	.word	0x10110000
 8005084:	40021000 	.word	0x40021000
 8005088:	40010000 	.word	0x40010000
 800508c:	40010800 	.word	0x40010800
 8005090:	40010c00 	.word	0x40010c00
 8005094:	40011000 	.word	0x40011000
 8005098:	40011400 	.word	0x40011400
 800509c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80050a0:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <HAL_GPIO_Init+0x304>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	43db      	mvns	r3, r3
 80050a8:	4909      	ldr	r1, [pc, #36]	@ (80050d0 <HAL_GPIO_Init+0x304>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	3301      	adds	r3, #1
 80050b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	fa22 f303 	lsr.w	r3, r2, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f47f ae8e 	bne.w	8004de0 <HAL_GPIO_Init+0x14>
  }
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	372c      	adds	r7, #44	@ 0x2c
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr
 80050d0:	40010400 	.word	0x40010400

080050d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	807b      	strh	r3, [r7, #2]
 80050e0:	4613      	mov	r3, r2
 80050e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050e4:	787b      	ldrb	r3, [r7, #1]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050ea:	887a      	ldrh	r2, [r7, #2]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80050f0:	e003      	b.n	80050fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80050f2:	887b      	ldrh	r3, [r7, #2]
 80050f4:	041a      	lsls	r2, r3, #16
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	611a      	str	r2, [r3, #16]
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e12b      	b.n	800536e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fe ffce 	bl	80040cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2224      	movs	r2, #36	@ 0x24
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005168:	f001 fbfc 	bl	8006964 <HAL_RCC_GetPCLK1Freq>
 800516c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4a81      	ldr	r2, [pc, #516]	@ (8005378 <HAL_I2C_Init+0x274>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d807      	bhi.n	8005188 <HAL_I2C_Init+0x84>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4a80      	ldr	r2, [pc, #512]	@ (800537c <HAL_I2C_Init+0x278>)
 800517c:	4293      	cmp	r3, r2
 800517e:	bf94      	ite	ls
 8005180:	2301      	movls	r3, #1
 8005182:	2300      	movhi	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e006      	b.n	8005196 <HAL_I2C_Init+0x92>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4a7d      	ldr	r2, [pc, #500]	@ (8005380 <HAL_I2C_Init+0x27c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	bf94      	ite	ls
 8005190:	2301      	movls	r3, #1
 8005192:	2300      	movhi	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0e7      	b.n	800536e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a78      	ldr	r2, [pc, #480]	@ (8005384 <HAL_I2C_Init+0x280>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	0c9b      	lsrs	r3, r3, #18
 80051a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4a6a      	ldr	r2, [pc, #424]	@ (8005378 <HAL_I2C_Init+0x274>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d802      	bhi.n	80051d8 <HAL_I2C_Init+0xd4>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	3301      	adds	r3, #1
 80051d6:	e009      	b.n	80051ec <HAL_I2C_Init+0xe8>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	4a69      	ldr	r2, [pc, #420]	@ (8005388 <HAL_I2C_Init+0x284>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	099b      	lsrs	r3, r3, #6
 80051ea:	3301      	adds	r3, #1
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	430b      	orrs	r3, r1
 80051f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80051fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	495c      	ldr	r1, [pc, #368]	@ (8005378 <HAL_I2C_Init+0x274>)
 8005208:	428b      	cmp	r3, r1
 800520a:	d819      	bhi.n	8005240 <HAL_I2C_Init+0x13c>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1e59      	subs	r1, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	fbb1 f3f3 	udiv	r3, r1, r3
 800521a:	1c59      	adds	r1, r3, #1
 800521c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005220:	400b      	ands	r3, r1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_I2C_Init+0x138>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1e59      	subs	r1, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	fbb1 f3f3 	udiv	r3, r1, r3
 8005234:	3301      	adds	r3, #1
 8005236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523a:	e051      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 800523c:	2304      	movs	r3, #4
 800523e:	e04f      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d111      	bne.n	800526c <HAL_I2C_Init+0x168>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1e58      	subs	r0, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6859      	ldr	r1, [r3, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	440b      	add	r3, r1
 8005256:	fbb0 f3f3 	udiv	r3, r0, r3
 800525a:	3301      	adds	r3, #1
 800525c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005260:	2b00      	cmp	r3, #0
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e012      	b.n	8005292 <HAL_I2C_Init+0x18e>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1e58      	subs	r0, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	0099      	lsls	r1, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005282:	3301      	adds	r3, #1
 8005284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_I2C_Init+0x196>
 8005296:	2301      	movs	r3, #1
 8005298:	e022      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10e      	bne.n	80052c0 <HAL_I2C_Init+0x1bc>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1e58      	subs	r0, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	460b      	mov	r3, r1
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	440b      	add	r3, r1
 80052b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80052b4:	3301      	adds	r3, #1
 80052b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052be:	e00f      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1e58      	subs	r0, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6859      	ldr	r1, [r3, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	0099      	lsls	r1, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052d6:	3301      	adds	r3, #1
 80052d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	6809      	ldr	r1, [r1, #0]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69da      	ldr	r2, [r3, #28]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800530e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6911      	ldr	r1, [r2, #16]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68d2      	ldr	r2, [r2, #12]
 800531a:	4311      	orrs	r1, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	430b      	orrs	r3, r1
 8005322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	000186a0 	.word	0x000186a0
 800537c:	001e847f 	.word	0x001e847f
 8005380:	003d08ff 	.word	0x003d08ff
 8005384:	431bde83 	.word	0x431bde83
 8005388:	10624dd3 	.word	0x10624dd3

0800538c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	4608      	mov	r0, r1
 8005396:	4611      	mov	r1, r2
 8005398:	461a      	mov	r2, r3
 800539a:	4603      	mov	r3, r0
 800539c:	817b      	strh	r3, [r7, #10]
 800539e:	460b      	mov	r3, r1
 80053a0:	813b      	strh	r3, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053a6:	f7ff f9c1 	bl	800472c <HAL_GetTick>
 80053aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	f040 80d9 	bne.w	800556c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2319      	movs	r3, #25
 80053c0:	2201      	movs	r2, #1
 80053c2:	496d      	ldr	r1, [pc, #436]	@ (8005578 <HAL_I2C_Mem_Write+0x1ec>)
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 fccd 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
 80053d2:	e0cc      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_I2C_Mem_Write+0x56>
 80053de:	2302      	movs	r3, #2
 80053e0:	e0c5      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d007      	beq.n	8005408 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2221      	movs	r2, #33	@ 0x21
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2240      	movs	r2, #64	@ 0x40
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a3a      	ldr	r2, [r7, #32]
 8005432:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005438:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4a4d      	ldr	r2, [pc, #308]	@ (800557c <HAL_I2C_Mem_Write+0x1f0>)
 8005448:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800544a:	88f8      	ldrh	r0, [r7, #6]
 800544c:	893a      	ldrh	r2, [r7, #8]
 800544e:	8979      	ldrh	r1, [r7, #10]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	9301      	str	r3, [sp, #4]
 8005454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	4603      	mov	r3, r0
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fb04 	bl	8005a68 <I2C_RequestMemoryWrite>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d052      	beq.n	800550c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e081      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 fd92 	bl	8005f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00d      	beq.n	8005496 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	2b04      	cmp	r3, #4
 8005480:	d107      	bne.n	8005492 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e06b      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	781a      	ldrb	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d11b      	bne.n	800550c <HAL_I2C_Mem_Write+0x180>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d017      	beq.n	800550c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	781a      	ldrb	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1aa      	bne.n	800546a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fd85 	bl	8006028 <I2C_WaitOnBTFFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00d      	beq.n	8005540 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005528:	2b04      	cmp	r3, #4
 800552a:	d107      	bne.n	800553c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800553a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e016      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800554e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800556c:	2302      	movs	r3, #2
  }
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	00100002 	.word	0x00100002
 800557c:	ffff0000 	.word	0xffff0000

08005580 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08c      	sub	sp, #48	@ 0x30
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	4608      	mov	r0, r1
 800558a:	4611      	mov	r1, r2
 800558c:	461a      	mov	r2, r3
 800558e:	4603      	mov	r3, r0
 8005590:	817b      	strh	r3, [r7, #10]
 8005592:	460b      	mov	r3, r1
 8005594:	813b      	strh	r3, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800559e:	f7ff f8c5 	bl	800472c <HAL_GetTick>
 80055a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	f040 8250 	bne.w	8005a52 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	2319      	movs	r3, #25
 80055b8:	2201      	movs	r2, #1
 80055ba:	4982      	ldr	r1, [pc, #520]	@ (80057c4 <HAL_I2C_Mem_Read+0x244>)
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 fbd1 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80055c8:	2302      	movs	r3, #2
 80055ca:	e243      	b.n	8005a54 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_I2C_Mem_Read+0x5a>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e23c      	b.n	8005a54 <HAL_I2C_Mem_Read+0x4d4>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d007      	beq.n	8005600 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800560e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2222      	movs	r2, #34	@ 0x22
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2240      	movs	r2, #64	@ 0x40
 800561c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800562a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005630:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4a62      	ldr	r2, [pc, #392]	@ (80057c8 <HAL_I2C_Mem_Read+0x248>)
 8005640:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005642:	88f8      	ldrh	r0, [r7, #6]
 8005644:	893a      	ldrh	r2, [r7, #8]
 8005646:	8979      	ldrh	r1, [r7, #10]
 8005648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564a:	9301      	str	r3, [sp, #4]
 800564c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	4603      	mov	r3, r0
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 fa9e 	bl	8005b94 <I2C_RequestMemoryRead>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e1f8      	b.n	8005a54 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005666:	2b00      	cmp	r3, #0
 8005668:	d113      	bne.n	8005692 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e1cc      	b.n	8005a2c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005696:	2b01      	cmp	r3, #1
 8005698:	d11e      	bne.n	80056d8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056aa:	b672      	cpsid	i
}
 80056ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ae:	2300      	movs	r3, #0
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80056d4:	b662      	cpsie	i
}
 80056d6:	e035      	b.n	8005744 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d11e      	bne.n	800571e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056f0:	b672      	cpsid	i
}
 80056f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005718:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800571a:	b662      	cpsie	i
}
 800571c:	e012      	b.n	8005744 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800572c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572e:	2300      	movs	r3, #0
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005744:	e172      	b.n	8005a2c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800574a:	2b03      	cmp	r3, #3
 800574c:	f200 811f 	bhi.w	800598e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005754:	2b01      	cmp	r3, #1
 8005756:	d123      	bne.n	80057a0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800575a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 fcab 	bl	80060b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e173      	b.n	8005a54 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800579e:	e145      	b.n	8005a2c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d152      	bne.n	800584e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ae:	2200      	movs	r2, #0
 80057b0:	4906      	ldr	r1, [pc, #24]	@ (80057cc <HAL_I2C_Mem_Read+0x24c>)
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 fad6 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e148      	b.n	8005a54 <HAL_I2C_Mem_Read+0x4d4>
 80057c2:	bf00      	nop
 80057c4:	00100002 	.word	0x00100002
 80057c8:	ffff0000 	.word	0xffff0000
 80057cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80057d0:	b672      	cpsid	i
}
 80057d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b01      	subs	r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005816:	b662      	cpsie	i
}
 8005818:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800584c:	e0ee      	b.n	8005a2c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	2200      	movs	r2, #0
 8005856:	4981      	ldr	r1, [pc, #516]	@ (8005a5c <HAL_I2C_Mem_Read+0x4dc>)
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fa83 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e0f5      	b.n	8005a54 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005876:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005878:	b672      	cpsid	i
}
 800587a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80058ae:	4b6c      	ldr	r3, [pc, #432]	@ (8005a60 <HAL_I2C_Mem_Read+0x4e0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	08db      	lsrs	r3, r3, #3
 80058b4:	4a6b      	ldr	r2, [pc, #428]	@ (8005a64 <HAL_I2C_Mem_Read+0x4e4>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	0a1a      	lsrs	r2, r3, #8
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	00da      	lsls	r2, r3, #3
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d118      	bne.n	8005906 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ee:	f043 0220 	orr.w	r2, r3, #32
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80058f6:	b662      	cpsie	i
}
 80058f8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e0a6      	b.n	8005a54 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b04      	cmp	r3, #4
 8005912:	d1d9      	bne.n	80058c8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691a      	ldr	r2, [r3, #16]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005940:	3b01      	subs	r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005956:	b662      	cpsie	i
}
 8005958:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800598c:	e04e      	b.n	8005a2c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800598e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005990:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 fb90 	bl	80060b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e058      	b.n	8005a54 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d124      	bne.n	8005a2c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d107      	bne.n	80059fa <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059f8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f47f ae88 	bne.w	8005746 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e000      	b.n	8005a54 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8005a52:	2302      	movs	r3, #2
  }
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3728      	adds	r7, #40	@ 0x28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	00010004 	.word	0x00010004
 8005a60:	20000000 	.word	0x20000000
 8005a64:	14f8b589 	.word	0x14f8b589

08005a68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	4608      	mov	r0, r1
 8005a72:	4611      	mov	r1, r2
 8005a74:	461a      	mov	r2, r3
 8005a76:	4603      	mov	r3, r0
 8005a78:	817b      	strh	r3, [r7, #10]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	813b      	strh	r3, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 f960 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00d      	beq.n	8005ac6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ab8:	d103      	bne.n	8005ac2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ac0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e05f      	b.n	8005b86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ac6:	897b      	ldrh	r3, [r7, #10]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	461a      	mov	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ad4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	6a3a      	ldr	r2, [r7, #32]
 8005ada:	492d      	ldr	r1, [pc, #180]	@ (8005b90 <I2C_RequestMemoryWrite+0x128>)
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f9bb 	bl	8005e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e04c      	b.n	8005b86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b04:	6a39      	ldr	r1, [r7, #32]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 fa46 	bl	8005f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00d      	beq.n	8005b2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d107      	bne.n	8005b2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e02b      	b.n	8005b86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b2e:	88fb      	ldrh	r3, [r7, #6]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d105      	bne.n	8005b40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b34:	893b      	ldrh	r3, [r7, #8]
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	611a      	str	r2, [r3, #16]
 8005b3e:	e021      	b.n	8005b84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b40:	893b      	ldrh	r3, [r7, #8]
 8005b42:	0a1b      	lsrs	r3, r3, #8
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b50:	6a39      	ldr	r1, [r7, #32]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 fa20 	bl	8005f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00d      	beq.n	8005b7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d107      	bne.n	8005b76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e005      	b.n	8005b86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b7a:	893b      	ldrh	r3, [r7, #8]
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	00010002 	.word	0x00010002

08005b94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	817b      	strh	r3, [r7, #10]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	813b      	strh	r3, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005bbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f8c2 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00d      	beq.n	8005c02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bf4:	d103      	bne.n	8005bfe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e0aa      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c02:	897b      	ldrh	r3, [r7, #10]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	461a      	mov	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	6a3a      	ldr	r2, [r7, #32]
 8005c16:	4952      	ldr	r1, [pc, #328]	@ (8005d60 <I2C_RequestMemoryRead+0x1cc>)
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f91d 	bl	8005e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e097      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c40:	6a39      	ldr	r1, [r7, #32]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f9a8 	bl	8005f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00d      	beq.n	8005c6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d107      	bne.n	8005c66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e076      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d105      	bne.n	8005c7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c70:	893b      	ldrh	r3, [r7, #8]
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	611a      	str	r2, [r3, #16]
 8005c7a:	e021      	b.n	8005cc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c7c:	893b      	ldrh	r3, [r7, #8]
 8005c7e:	0a1b      	lsrs	r3, r3, #8
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c8c:	6a39      	ldr	r1, [r7, #32]
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 f982 	bl	8005f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00d      	beq.n	8005cb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d107      	bne.n	8005cb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e050      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cb6:	893b      	ldrh	r3, [r7, #8]
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc2:	6a39      	ldr	r1, [r7, #32]
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f967 	bl	8005f98 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00d      	beq.n	8005cec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d107      	bne.n	8005ce8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ce6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e035      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cfa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f82b 	bl	8005d64 <I2C_WaitOnFlagUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00d      	beq.n	8005d30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d22:	d103      	bne.n	8005d2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e013      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d30:	897b      	ldrh	r3, [r7, #10]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	6a3a      	ldr	r2, [r7, #32]
 8005d44:	4906      	ldr	r1, [pc, #24]	@ (8005d60 <I2C_RequestMemoryRead+0x1cc>)
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f886 	bl	8005e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	00010002 	.word	0x00010002

08005d64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	4613      	mov	r3, r2
 8005d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d74:	e048      	b.n	8005e08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d044      	beq.n	8005e08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d7e:	f7fe fcd5 	bl	800472c <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d302      	bcc.n	8005d94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d139      	bne.n	8005e08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	0c1b      	lsrs	r3, r3, #16
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d10d      	bne.n	8005dba <I2C_WaitOnFlagUntilTimeout+0x56>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	43da      	mvns	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4013      	ands	r3, r2
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	bf0c      	ite	eq
 8005db0:	2301      	moveq	r3, #1
 8005db2:	2300      	movne	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	e00c      	b.n	8005dd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	43da      	mvns	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	bf0c      	ite	eq
 8005dcc:	2301      	moveq	r3, #1
 8005dce:	2300      	movne	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d116      	bne.n	8005e08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e023      	b.n	8005e50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	0c1b      	lsrs	r3, r3, #16
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d10d      	bne.n	8005e2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	43da      	mvns	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf0c      	ite	eq
 8005e24:	2301      	moveq	r3, #1
 8005e26:	2300      	movne	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	e00c      	b.n	8005e48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	43da      	mvns	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bf0c      	ite	eq
 8005e40:	2301      	moveq	r3, #1
 8005e42:	2300      	movne	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d093      	beq.n	8005d76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e66:	e071      	b.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e76:	d123      	bne.n	8005ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eac:	f043 0204 	orr.w	r2, r3, #4
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e067      	b.n	8005f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec6:	d041      	beq.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec8:	f7fe fc30 	bl	800472c <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d302      	bcc.n	8005ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d136      	bne.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	0c1b      	lsrs	r3, r3, #16
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d10c      	bne.n	8005f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	43da      	mvns	r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bf14      	ite	ne
 8005efa:	2301      	movne	r3, #1
 8005efc:	2300      	moveq	r3, #0
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	e00b      	b.n	8005f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	43da      	mvns	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bf14      	ite	ne
 8005f14:	2301      	movne	r3, #1
 8005f16:	2300      	moveq	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d016      	beq.n	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f38:	f043 0220 	orr.w	r2, r3, #32
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e021      	b.n	8005f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	0c1b      	lsrs	r3, r3, #16
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d10c      	bne.n	8005f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	43da      	mvns	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	4013      	ands	r3, r2
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bf14      	ite	ne
 8005f68:	2301      	movne	r3, #1
 8005f6a:	2300      	moveq	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	e00b      	b.n	8005f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	43da      	mvns	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bf14      	ite	ne
 8005f82:	2301      	movne	r3, #1
 8005f84:	2300      	moveq	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f47f af6d 	bne.w	8005e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fa4:	e034      	b.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f8e3 	bl	8006172 <I2C_IsAcknowledgeFailed>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e034      	b.n	8006020 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d028      	beq.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbe:	f7fe fbb5 	bl	800472c <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d11d      	bne.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fde:	2b80      	cmp	r3, #128	@ 0x80
 8005fe0:	d016      	beq.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffc:	f043 0220 	orr.w	r2, r3, #32
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e007      	b.n	8006020 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800601a:	2b80      	cmp	r3, #128	@ 0x80
 800601c:	d1c3      	bne.n	8005fa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006034:	e034      	b.n	80060a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f89b 	bl	8006172 <I2C_IsAcknowledgeFailed>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e034      	b.n	80060b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d028      	beq.n	80060a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604e:	f7fe fb6d 	bl	800472c <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	429a      	cmp	r2, r3
 800605c:	d302      	bcc.n	8006064 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d11d      	bne.n	80060a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b04      	cmp	r3, #4
 8006070:	d016      	beq.n	80060a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608c:	f043 0220 	orr.w	r2, r3, #32
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e007      	b.n	80060b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d1c3      	bne.n	8006036 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060c4:	e049      	b.n	800615a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d119      	bne.n	8006108 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0210 	mvn.w	r2, #16
 80060dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e030      	b.n	800616a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006108:	f7fe fb10 	bl	800472c <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	429a      	cmp	r2, r3
 8006116:	d302      	bcc.n	800611e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d11d      	bne.n	800615a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006128:	2b40      	cmp	r3, #64	@ 0x40
 800612a:	d016      	beq.n	800615a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006146:	f043 0220 	orr.w	r2, r3, #32
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e007      	b.n	800616a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006164:	2b40      	cmp	r3, #64	@ 0x40
 8006166:	d1ae      	bne.n	80060c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006188:	d11b      	bne.n	80061c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006192:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ae:	f043 0204 	orr.w	r2, r3, #4
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc80      	pop	{r7}
 80061cc:	4770      	bx	lr
	...

080061d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e272      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8087 	beq.w	80062fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061f0:	4b92      	ldr	r3, [pc, #584]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f003 030c 	and.w	r3, r3, #12
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d00c      	beq.n	8006216 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061fc:	4b8f      	ldr	r3, [pc, #572]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f003 030c 	and.w	r3, r3, #12
 8006204:	2b08      	cmp	r3, #8
 8006206:	d112      	bne.n	800622e <HAL_RCC_OscConfig+0x5e>
 8006208:	4b8c      	ldr	r3, [pc, #560]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006214:	d10b      	bne.n	800622e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006216:	4b89      	ldr	r3, [pc, #548]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d06c      	beq.n	80062fc <HAL_RCC_OscConfig+0x12c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d168      	bne.n	80062fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e24c      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006236:	d106      	bne.n	8006246 <HAL_RCC_OscConfig+0x76>
 8006238:	4b80      	ldr	r3, [pc, #512]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a7f      	ldr	r2, [pc, #508]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 800623e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	e02e      	b.n	80062a4 <HAL_RCC_OscConfig+0xd4>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10c      	bne.n	8006268 <HAL_RCC_OscConfig+0x98>
 800624e:	4b7b      	ldr	r3, [pc, #492]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a7a      	ldr	r2, [pc, #488]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	4b78      	ldr	r3, [pc, #480]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a77      	ldr	r2, [pc, #476]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006260:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	e01d      	b.n	80062a4 <HAL_RCC_OscConfig+0xd4>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006270:	d10c      	bne.n	800628c <HAL_RCC_OscConfig+0xbc>
 8006272:	4b72      	ldr	r3, [pc, #456]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a71      	ldr	r2, [pc, #452]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006278:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	4b6f      	ldr	r3, [pc, #444]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6e      	ldr	r2, [pc, #440]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	e00b      	b.n	80062a4 <HAL_RCC_OscConfig+0xd4>
 800628c:	4b6b      	ldr	r3, [pc, #428]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a6a      	ldr	r2, [pc, #424]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	4b68      	ldr	r3, [pc, #416]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a67      	ldr	r2, [pc, #412]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 800629e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d013      	beq.n	80062d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ac:	f7fe fa3e 	bl	800472c <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062b4:	f7fe fa3a 	bl	800472c <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	@ 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e200      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c6:	4b5d      	ldr	r3, [pc, #372]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCC_OscConfig+0xe4>
 80062d2:	e014      	b.n	80062fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d4:	f7fe fa2a 	bl	800472c <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062dc:	f7fe fa26 	bl	800472c <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	@ 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e1ec      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ee:	4b53      	ldr	r3, [pc, #332]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f0      	bne.n	80062dc <HAL_RCC_OscConfig+0x10c>
 80062fa:	e000      	b.n	80062fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d063      	beq.n	80063d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800630a:	4b4c      	ldr	r3, [pc, #304]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f003 030c 	and.w	r3, r3, #12
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00b      	beq.n	800632e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006316:	4b49      	ldr	r3, [pc, #292]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b08      	cmp	r3, #8
 8006320:	d11c      	bne.n	800635c <HAL_RCC_OscConfig+0x18c>
 8006322:	4b46      	ldr	r3, [pc, #280]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d116      	bne.n	800635c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632e:	4b43      	ldr	r3, [pc, #268]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <HAL_RCC_OscConfig+0x176>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d001      	beq.n	8006346 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e1c0      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006346:	4b3d      	ldr	r3, [pc, #244]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	4939      	ldr	r1, [pc, #228]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006356:	4313      	orrs	r3, r2
 8006358:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800635a:	e03a      	b.n	80063d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d020      	beq.n	80063a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006364:	4b36      	ldr	r3, [pc, #216]	@ (8006440 <HAL_RCC_OscConfig+0x270>)
 8006366:	2201      	movs	r2, #1
 8006368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636a:	f7fe f9df 	bl	800472c <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006372:	f7fe f9db 	bl	800472c <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e1a1      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006384:	4b2d      	ldr	r3, [pc, #180]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f0      	beq.n	8006372 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006390:	4b2a      	ldr	r3, [pc, #168]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	4927      	ldr	r1, [pc, #156]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	600b      	str	r3, [r1, #0]
 80063a4:	e015      	b.n	80063d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063a6:	4b26      	ldr	r3, [pc, #152]	@ (8006440 <HAL_RCC_OscConfig+0x270>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fe f9be 	bl	800472c <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063b4:	f7fe f9ba 	bl	800472c <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e180      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063c6:	4b1d      	ldr	r3, [pc, #116]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d03a      	beq.n	8006454 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d019      	beq.n	800641a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063e6:	4b17      	ldr	r3, [pc, #92]	@ (8006444 <HAL_RCC_OscConfig+0x274>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ec:	f7fe f99e 	bl	800472c <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f4:	f7fe f99a 	bl	800472c <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e160      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006406:	4b0d      	ldr	r3, [pc, #52]	@ (800643c <HAL_RCC_OscConfig+0x26c>)
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f0      	beq.n	80063f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006412:	2001      	movs	r0, #1
 8006414:	f000 face 	bl	80069b4 <RCC_Delay>
 8006418:	e01c      	b.n	8006454 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800641a:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <HAL_RCC_OscConfig+0x274>)
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006420:	f7fe f984 	bl	800472c <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006426:	e00f      	b.n	8006448 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006428:	f7fe f980 	bl	800472c <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d908      	bls.n	8006448 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e146      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
 800643a:	bf00      	nop
 800643c:	40021000 	.word	0x40021000
 8006440:	42420000 	.word	0x42420000
 8006444:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006448:	4b92      	ldr	r3, [pc, #584]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800644a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e9      	bne.n	8006428 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80a6 	beq.w	80065ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006462:	2300      	movs	r3, #0
 8006464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006466:	4b8b      	ldr	r3, [pc, #556]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10d      	bne.n	800648e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006472:	4b88      	ldr	r3, [pc, #544]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	4a87      	ldr	r2, [pc, #540]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800647c:	61d3      	str	r3, [r2, #28]
 800647e:	4b85      	ldr	r3, [pc, #532]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006486:	60bb      	str	r3, [r7, #8]
 8006488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800648a:	2301      	movs	r3, #1
 800648c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648e:	4b82      	ldr	r3, [pc, #520]	@ (8006698 <HAL_RCC_OscConfig+0x4c8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006496:	2b00      	cmp	r3, #0
 8006498:	d118      	bne.n	80064cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800649a:	4b7f      	ldr	r3, [pc, #508]	@ (8006698 <HAL_RCC_OscConfig+0x4c8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a7e      	ldr	r2, [pc, #504]	@ (8006698 <HAL_RCC_OscConfig+0x4c8>)
 80064a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064a6:	f7fe f941 	bl	800472c <HAL_GetTick>
 80064aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ac:	e008      	b.n	80064c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ae:	f7fe f93d 	bl	800472c <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b64      	cmp	r3, #100	@ 0x64
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e103      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c0:	4b75      	ldr	r3, [pc, #468]	@ (8006698 <HAL_RCC_OscConfig+0x4c8>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0f0      	beq.n	80064ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d106      	bne.n	80064e2 <HAL_RCC_OscConfig+0x312>
 80064d4:	4b6f      	ldr	r3, [pc, #444]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	4a6e      	ldr	r2, [pc, #440]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064da:	f043 0301 	orr.w	r3, r3, #1
 80064de:	6213      	str	r3, [r2, #32]
 80064e0:	e02d      	b.n	800653e <HAL_RCC_OscConfig+0x36e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10c      	bne.n	8006504 <HAL_RCC_OscConfig+0x334>
 80064ea:	4b6a      	ldr	r3, [pc, #424]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	4a69      	ldr	r2, [pc, #420]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064f0:	f023 0301 	bic.w	r3, r3, #1
 80064f4:	6213      	str	r3, [r2, #32]
 80064f6:	4b67      	ldr	r3, [pc, #412]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	4a66      	ldr	r2, [pc, #408]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80064fc:	f023 0304 	bic.w	r3, r3, #4
 8006500:	6213      	str	r3, [r2, #32]
 8006502:	e01c      	b.n	800653e <HAL_RCC_OscConfig+0x36e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b05      	cmp	r3, #5
 800650a:	d10c      	bne.n	8006526 <HAL_RCC_OscConfig+0x356>
 800650c:	4b61      	ldr	r3, [pc, #388]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	4a60      	ldr	r2, [pc, #384]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006512:	f043 0304 	orr.w	r3, r3, #4
 8006516:	6213      	str	r3, [r2, #32]
 8006518:	4b5e      	ldr	r3, [pc, #376]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	4a5d      	ldr	r2, [pc, #372]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	6213      	str	r3, [r2, #32]
 8006524:	e00b      	b.n	800653e <HAL_RCC_OscConfig+0x36e>
 8006526:	4b5b      	ldr	r3, [pc, #364]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	4a5a      	ldr	r2, [pc, #360]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800652c:	f023 0301 	bic.w	r3, r3, #1
 8006530:	6213      	str	r3, [r2, #32]
 8006532:	4b58      	ldr	r3, [pc, #352]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	4a57      	ldr	r2, [pc, #348]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006538:	f023 0304 	bic.w	r3, r3, #4
 800653c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d015      	beq.n	8006572 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006546:	f7fe f8f1 	bl	800472c <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654c:	e00a      	b.n	8006564 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800654e:	f7fe f8ed 	bl	800472c <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800655c:	4293      	cmp	r3, r2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e0b1      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006564:	4b4b      	ldr	r3, [pc, #300]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0ee      	beq.n	800654e <HAL_RCC_OscConfig+0x37e>
 8006570:	e014      	b.n	800659c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006572:	f7fe f8db 	bl	800472c <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006578:	e00a      	b.n	8006590 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657a:	f7fe f8d7 	bl	800472c <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006588:	4293      	cmp	r3, r2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e09b      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006590:	4b40      	ldr	r3, [pc, #256]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1ee      	bne.n	800657a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800659c:	7dfb      	ldrb	r3, [r7, #23]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d105      	bne.n	80065ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065a2:	4b3c      	ldr	r3, [pc, #240]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	4a3b      	ldr	r2, [pc, #236]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80065a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8087 	beq.w	80066c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065b8:	4b36      	ldr	r3, [pc, #216]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f003 030c 	and.w	r3, r3, #12
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d061      	beq.n	8006688 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d146      	bne.n	800665a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065cc:	4b33      	ldr	r3, [pc, #204]	@ (800669c <HAL_RCC_OscConfig+0x4cc>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d2:	f7fe f8ab 	bl	800472c <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065da:	f7fe f8a7 	bl	800472c <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e06d      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065ec:	4b29      	ldr	r3, [pc, #164]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1f0      	bne.n	80065da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006600:	d108      	bne.n	8006614 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006602:	4b24      	ldr	r3, [pc, #144]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	4921      	ldr	r1, [pc, #132]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006610:	4313      	orrs	r3, r2
 8006612:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006614:	4b1f      	ldr	r3, [pc, #124]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a19      	ldr	r1, [r3, #32]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006624:	430b      	orrs	r3, r1
 8006626:	491b      	ldr	r1, [pc, #108]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 8006628:	4313      	orrs	r3, r2
 800662a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800662c:	4b1b      	ldr	r3, [pc, #108]	@ (800669c <HAL_RCC_OscConfig+0x4cc>)
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006632:	f7fe f87b 	bl	800472c <HAL_GetTick>
 8006636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800663a:	f7fe f877 	bl	800472c <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e03d      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800664c:	4b11      	ldr	r3, [pc, #68]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d0f0      	beq.n	800663a <HAL_RCC_OscConfig+0x46a>
 8006658:	e035      	b.n	80066c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800665a:	4b10      	ldr	r3, [pc, #64]	@ (800669c <HAL_RCC_OscConfig+0x4cc>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006660:	f7fe f864 	bl	800472c <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006668:	f7fe f860 	bl	800472c <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e026      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800667a:	4b06      	ldr	r3, [pc, #24]	@ (8006694 <HAL_RCC_OscConfig+0x4c4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f0      	bne.n	8006668 <HAL_RCC_OscConfig+0x498>
 8006686:	e01e      	b.n	80066c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d107      	bne.n	80066a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e019      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
 8006694:	40021000 	.word	0x40021000
 8006698:	40007000 	.word	0x40007000
 800669c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80066a0:	4b0b      	ldr	r3, [pc, #44]	@ (80066d0 <HAL_RCC_OscConfig+0x500>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d106      	bne.n	80066c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d001      	beq.n	80066c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40021000 	.word	0x40021000

080066d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0d0      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066e8:	4b6a      	ldr	r3, [pc, #424]	@ (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d910      	bls.n	8006718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066f6:	4b67      	ldr	r3, [pc, #412]	@ (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f023 0207 	bic.w	r2, r3, #7
 80066fe:	4965      	ldr	r1, [pc, #404]	@ (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	4313      	orrs	r3, r2
 8006704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006706:	4b63      	ldr	r3, [pc, #396]	@ (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d001      	beq.n	8006718 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e0b8      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d020      	beq.n	8006766 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006730:	4b59      	ldr	r3, [pc, #356]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	4a58      	ldr	r2, [pc, #352]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006736:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800673a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006748:	4b53      	ldr	r3, [pc, #332]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	4a52      	ldr	r2, [pc, #328]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800674e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006752:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006754:	4b50      	ldr	r3, [pc, #320]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	494d      	ldr	r1, [pc, #308]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006762:	4313      	orrs	r3, r2
 8006764:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d040      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d107      	bne.n	800678a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677a:	4b47      	ldr	r3, [pc, #284]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d115      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e07f      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d107      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006792:	4b41      	ldr	r3, [pc, #260]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e073      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a2:	4b3d      	ldr	r3, [pc, #244]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e06b      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067b2:	4b39      	ldr	r3, [pc, #228]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f023 0203 	bic.w	r2, r3, #3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4936      	ldr	r1, [pc, #216]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067c4:	f7fd ffb2 	bl	800472c <HAL_GetTick>
 80067c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ca:	e00a      	b.n	80067e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067cc:	f7fd ffae 	bl	800472c <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e053      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f003 020c 	and.w	r2, r3, #12
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d1eb      	bne.n	80067cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067f4:	4b27      	ldr	r3, [pc, #156]	@ (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0307 	and.w	r3, r3, #7
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d210      	bcs.n	8006824 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006802:	4b24      	ldr	r3, [pc, #144]	@ (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f023 0207 	bic.w	r2, r3, #7
 800680a:	4922      	ldr	r1, [pc, #136]	@ (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	4313      	orrs	r3, r2
 8006810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006812:	4b20      	ldr	r3, [pc, #128]	@ (8006894 <HAL_RCC_ClockConfig+0x1c0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d001      	beq.n	8006824 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e032      	b.n	800688a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d008      	beq.n	8006842 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006830:	4b19      	ldr	r3, [pc, #100]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	4916      	ldr	r1, [pc, #88]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800683e:	4313      	orrs	r3, r2
 8006840:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800684e:	4b12      	ldr	r3, [pc, #72]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	490e      	ldr	r1, [pc, #56]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800685e:	4313      	orrs	r3, r2
 8006860:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006862:	f000 f821 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 8006866:	4602      	mov	r2, r0
 8006868:	4b0b      	ldr	r3, [pc, #44]	@ (8006898 <HAL_RCC_ClockConfig+0x1c4>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	490a      	ldr	r1, [pc, #40]	@ (800689c <HAL_RCC_ClockConfig+0x1c8>)
 8006874:	5ccb      	ldrb	r3, [r1, r3]
 8006876:	fa22 f303 	lsr.w	r3, r2, r3
 800687a:	4a09      	ldr	r2, [pc, #36]	@ (80068a0 <HAL_RCC_ClockConfig+0x1cc>)
 800687c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800687e:	4b09      	ldr	r3, [pc, #36]	@ (80068a4 <HAL_RCC_ClockConfig+0x1d0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f7fd ff10 	bl	80046a8 <HAL_InitTick>

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	40022000 	.word	0x40022000
 8006898:	40021000 	.word	0x40021000
 800689c:	0800c478 	.word	0x0800c478
 80068a0:	20000000 	.word	0x20000000
 80068a4:	20000004 	.word	0x20000004

080068a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	2300      	movs	r3, #0
 80068b4:	60bb      	str	r3, [r7, #8]
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	2300      	movs	r3, #0
 80068bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80068c2:	4b1e      	ldr	r3, [pc, #120]	@ (800693c <HAL_RCC_GetSysClockFreq+0x94>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f003 030c 	and.w	r3, r3, #12
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d002      	beq.n	80068d8 <HAL_RCC_GetSysClockFreq+0x30>
 80068d2:	2b08      	cmp	r3, #8
 80068d4:	d003      	beq.n	80068de <HAL_RCC_GetSysClockFreq+0x36>
 80068d6:	e027      	b.n	8006928 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068d8:	4b19      	ldr	r3, [pc, #100]	@ (8006940 <HAL_RCC_GetSysClockFreq+0x98>)
 80068da:	613b      	str	r3, [r7, #16]
      break;
 80068dc:	e027      	b.n	800692e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	0c9b      	lsrs	r3, r3, #18
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	4a17      	ldr	r2, [pc, #92]	@ (8006944 <HAL_RCC_GetSysClockFreq+0x9c>)
 80068e8:	5cd3      	ldrb	r3, [r2, r3]
 80068ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d010      	beq.n	8006918 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80068f6:	4b11      	ldr	r3, [pc, #68]	@ (800693c <HAL_RCC_GetSysClockFreq+0x94>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	0c5b      	lsrs	r3, r3, #17
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	4a11      	ldr	r2, [pc, #68]	@ (8006948 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006902:	5cd3      	ldrb	r3, [r2, r3]
 8006904:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a0d      	ldr	r2, [pc, #52]	@ (8006940 <HAL_RCC_GetSysClockFreq+0x98>)
 800690a:	fb03 f202 	mul.w	r2, r3, r2
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	fbb2 f3f3 	udiv	r3, r2, r3
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	e004      	b.n	8006922 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a0c      	ldr	r2, [pc, #48]	@ (800694c <HAL_RCC_GetSysClockFreq+0xa4>)
 800691c:	fb02 f303 	mul.w	r3, r2, r3
 8006920:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	613b      	str	r3, [r7, #16]
      break;
 8006926:	e002      	b.n	800692e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006928:	4b05      	ldr	r3, [pc, #20]	@ (8006940 <HAL_RCC_GetSysClockFreq+0x98>)
 800692a:	613b      	str	r3, [r7, #16]
      break;
 800692c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800692e:	693b      	ldr	r3, [r7, #16]
}
 8006930:	4618      	mov	r0, r3
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	bc80      	pop	{r7}
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40021000 	.word	0x40021000
 8006940:	007a1200 	.word	0x007a1200
 8006944:	0800c490 	.word	0x0800c490
 8006948:	0800c4a0 	.word	0x0800c4a0
 800694c:	003d0900 	.word	0x003d0900

08006950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006950:	b480      	push	{r7}
 8006952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006954:	4b02      	ldr	r3, [pc, #8]	@ (8006960 <HAL_RCC_GetHCLKFreq+0x10>)
 8006956:	681b      	ldr	r3, [r3, #0]
}
 8006958:	4618      	mov	r0, r3
 800695a:	46bd      	mov	sp, r7
 800695c:	bc80      	pop	{r7}
 800695e:	4770      	bx	lr
 8006960:	20000000 	.word	0x20000000

08006964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006968:	f7ff fff2 	bl	8006950 <HAL_RCC_GetHCLKFreq>
 800696c:	4602      	mov	r2, r0
 800696e:	4b05      	ldr	r3, [pc, #20]	@ (8006984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	0a1b      	lsrs	r3, r3, #8
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	4903      	ldr	r1, [pc, #12]	@ (8006988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800697a:	5ccb      	ldrb	r3, [r1, r3]
 800697c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006980:	4618      	mov	r0, r3
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40021000 	.word	0x40021000
 8006988:	0800c488 	.word	0x0800c488

0800698c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006990:	f7ff ffde 	bl	8006950 <HAL_RCC_GetHCLKFreq>
 8006994:	4602      	mov	r2, r0
 8006996:	4b05      	ldr	r3, [pc, #20]	@ (80069ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	0adb      	lsrs	r3, r3, #11
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	4903      	ldr	r1, [pc, #12]	@ (80069b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069a2:	5ccb      	ldrb	r3, [r1, r3]
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40021000 	.word	0x40021000
 80069b0:	0800c488 	.word	0x0800c488

080069b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80069bc:	4b0a      	ldr	r3, [pc, #40]	@ (80069e8 <RCC_Delay+0x34>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a0a      	ldr	r2, [pc, #40]	@ (80069ec <RCC_Delay+0x38>)
 80069c2:	fba2 2303 	umull	r2, r3, r2, r3
 80069c6:	0a5b      	lsrs	r3, r3, #9
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	fb02 f303 	mul.w	r3, r2, r3
 80069ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80069d0:	bf00      	nop
  }
  while (Delay --);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	1e5a      	subs	r2, r3, #1
 80069d6:	60fa      	str	r2, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1f9      	bne.n	80069d0 <RCC_Delay+0x1c>
}
 80069dc:	bf00      	nop
 80069de:	bf00      	nop
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr
 80069e8:	20000000 	.word	0x20000000
 80069ec:	10624dd3 	.word	0x10624dd3

080069f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e076      	b.n	8006af0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d108      	bne.n	8006a1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a12:	d009      	beq.n	8006a28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	61da      	str	r2, [r3, #28]
 8006a1a:	e005      	b.n	8006a28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7fd fb80 	bl	8004148 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	431a      	orrs	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aac:	ea42 0103 	orr.w	r1, r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	0c1a      	lsrs	r2, r3, #16
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f002 0204 	and.w	r2, r2, #4
 8006ace:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69da      	ldr	r2, [r3, #28]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ade:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	4613      	mov	r3, r2
 8006b06:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b08:	f7fd fe10 	bl	800472c <HAL_GetTick>
 8006b0c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d001      	beq.n	8006b22 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e12a      	b.n	8006d78 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <HAL_SPI_Transmit+0x36>
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e122      	b.n	8006d78 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_SPI_Transmit+0x48>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e11b      	b.n	8006d78 <HAL_SPI_Transmit+0x280>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	88fa      	ldrh	r2, [r7, #6]
 8006b60:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	88fa      	ldrh	r2, [r7, #6]
 8006b66:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b8e:	d10f      	bne.n	8006bb0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bba:	2b40      	cmp	r3, #64	@ 0x40
 8006bbc:	d007      	beq.n	8006bce <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bd6:	d152      	bne.n	8006c7e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <HAL_SPI_Transmit+0xee>
 8006be0:	8b7b      	ldrh	r3, [r7, #26]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d145      	bne.n	8006c72 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bea:	881a      	ldrh	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf6:	1c9a      	adds	r2, r3, #2
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c0a:	e032      	b.n	8006c72 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d112      	bne.n	8006c40 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1e:	881a      	ldrh	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c2a:	1c9a      	adds	r2, r3, #2
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006c3e:	e018      	b.n	8006c72 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c40:	f7fd fd74 	bl	800472c <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d803      	bhi.n	8006c58 <HAL_SPI_Transmit+0x160>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c56:	d102      	bne.n	8006c5e <HAL_SPI_Transmit+0x166>
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d109      	bne.n	8006c72 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e082      	b.n	8006d78 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1c7      	bne.n	8006c0c <HAL_SPI_Transmit+0x114>
 8006c7c:	e053      	b.n	8006d26 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <HAL_SPI_Transmit+0x194>
 8006c86:	8b7b      	ldrh	r3, [r7, #26]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d147      	bne.n	8006d1c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	330c      	adds	r3, #12
 8006c96:	7812      	ldrb	r2, [r2, #0]
 8006c98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006cb2:	e033      	b.n	8006d1c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d113      	bne.n	8006cea <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	7812      	ldrb	r2, [r2, #0]
 8006cce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ce8:	e018      	b.n	8006d1c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cea:	f7fd fd1f 	bl	800472c <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d803      	bhi.n	8006d02 <HAL_SPI_Transmit+0x20a>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d00:	d102      	bne.n	8006d08 <HAL_SPI_Transmit+0x210>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e02d      	b.n	8006d78 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1c6      	bne.n	8006cb4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 fcc8 	bl	80076c0 <SPI_EndRxTxTransaction>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006d76:	2300      	movs	r3, #0
  }
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3720      	adds	r7, #32
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d001      	beq.n	8006da0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e104      	b.n	8006faa <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006da8:	d112      	bne.n	8006dd0 <HAL_SPI_Receive+0x50>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10e      	bne.n	8006dd0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2204      	movs	r2, #4
 8006db6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006dba:	88fa      	ldrh	r2, [r7, #6]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	68b9      	ldr	r1, [r7, #8]
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 f8f3 	bl	8006fb2 <HAL_SPI_TransmitReceive>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	e0ec      	b.n	8006faa <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dd0:	f7fd fcac 	bl	800472c <HAL_GetTick>
 8006dd4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <HAL_SPI_Receive+0x62>
 8006ddc:	88fb      	ldrh	r3, [r7, #6]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e0e1      	b.n	8006faa <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <HAL_SPI_Receive+0x74>
 8006df0:	2302      	movs	r3, #2
 8006df2:	e0da      	b.n	8006faa <HAL_SPI_Receive+0x22a>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2204      	movs	r2, #4
 8006e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	88fa      	ldrh	r2, [r7, #6]
 8006e14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	88fa      	ldrh	r2, [r7, #6]
 8006e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e42:	d10f      	bne.n	8006e64 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e62:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6e:	2b40      	cmp	r3, #64	@ 0x40
 8006e70:	d007      	beq.n	8006e82 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d170      	bne.n	8006f6c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006e8a:	e035      	b.n	8006ef8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d115      	bne.n	8006ec6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f103 020c 	add.w	r2, r3, #12
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea6:	7812      	ldrb	r2, [r2, #0]
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ec4:	e018      	b.n	8006ef8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ec6:	f7fd fc31 	bl	800472c <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d803      	bhi.n	8006ede <HAL_SPI_Receive+0x15e>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006edc:	d102      	bne.n	8006ee4 <HAL_SPI_Receive+0x164>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d109      	bne.n	8006ef8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e058      	b.n	8006faa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1c4      	bne.n	8006e8c <HAL_SPI_Receive+0x10c>
 8006f02:	e038      	b.n	8006f76 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d113      	bne.n	8006f3a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1c:	b292      	uxth	r2, r2
 8006f1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f24:	1c9a      	adds	r2, r3, #2
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f38:	e018      	b.n	8006f6c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f3a:	f7fd fbf7 	bl	800472c <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d803      	bhi.n	8006f52 <HAL_SPI_Receive+0x1d2>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d102      	bne.n	8006f58 <HAL_SPI_Receive+0x1d8>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d109      	bne.n	8006f6c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e01e      	b.n	8006faa <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1c6      	bne.n	8006f04 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fb4e 	bl	800761c <SPI_EndRxTransaction>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e000      	b.n	8006faa <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
  }
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b08a      	sub	sp, #40	@ 0x28
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	607a      	str	r2, [r7, #4]
 8006fbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fc4:	f7fd fbb2 	bl	800472c <HAL_GetTick>
 8006fc8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fd0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006fd8:	887b      	ldrh	r3, [r7, #2]
 8006fda:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fdc:	7ffb      	ldrb	r3, [r7, #31]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d00c      	beq.n	8006ffc <HAL_SPI_TransmitReceive+0x4a>
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fe8:	d106      	bne.n	8006ff8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d102      	bne.n	8006ff8 <HAL_SPI_TransmitReceive+0x46>
 8006ff2:	7ffb      	ldrb	r3, [r7, #31]
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d001      	beq.n	8006ffc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e17f      	b.n	80072fc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <HAL_SPI_TransmitReceive+0x5c>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <HAL_SPI_TransmitReceive+0x5c>
 8007008:	887b      	ldrh	r3, [r7, #2]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e174      	b.n	80072fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007018:	2b01      	cmp	r3, #1
 800701a:	d101      	bne.n	8007020 <HAL_SPI_TransmitReceive+0x6e>
 800701c:	2302      	movs	r3, #2
 800701e:	e16d      	b.n	80072fc <HAL_SPI_TransmitReceive+0x34a>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b04      	cmp	r3, #4
 8007032:	d003      	beq.n	800703c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2205      	movs	r2, #5
 8007038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	887a      	ldrh	r2, [r7, #2]
 800704c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	887a      	ldrh	r2, [r7, #2]
 8007052:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	887a      	ldrh	r2, [r7, #2]
 800705e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	887a      	ldrh	r2, [r7, #2]
 8007064:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800707c:	2b40      	cmp	r3, #64	@ 0x40
 800707e:	d007      	beq.n	8007090 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800708e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007098:	d17e      	bne.n	8007198 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <HAL_SPI_TransmitReceive+0xf6>
 80070a2:	8afb      	ldrh	r3, [r7, #22]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d16c      	bne.n	8007182 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ac:	881a      	ldrh	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b8:	1c9a      	adds	r2, r3, #2
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070cc:	e059      	b.n	8007182 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d11b      	bne.n	8007114 <HAL_SPI_TransmitReceive+0x162>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d016      	beq.n	8007114 <HAL_SPI_TransmitReceive+0x162>
 80070e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d113      	bne.n	8007114 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f0:	881a      	ldrh	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fc:	1c9a      	adds	r2, r3, #2
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b01      	cmp	r3, #1
 8007120:	d119      	bne.n	8007156 <HAL_SPI_TransmitReceive+0x1a4>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	d014      	beq.n	8007156 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007136:	b292      	uxth	r2, r2
 8007138:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713e:	1c9a      	adds	r2, r3, #2
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007148:	b29b      	uxth	r3, r3
 800714a:	3b01      	subs	r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007152:	2301      	movs	r3, #1
 8007154:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007156:	f7fd fae9 	bl	800472c <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007162:	429a      	cmp	r2, r3
 8007164:	d80d      	bhi.n	8007182 <HAL_SPI_TransmitReceive+0x1d0>
 8007166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716c:	d009      	beq.n	8007182 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e0bc      	b.n	80072fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1a0      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x11c>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d19b      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x11c>
 8007196:	e082      	b.n	800729e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <HAL_SPI_TransmitReceive+0x1f4>
 80071a0:	8afb      	ldrh	r3, [r7, #22]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d171      	bne.n	800728a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	330c      	adds	r3, #12
 80071b0:	7812      	ldrb	r2, [r2, #0]
 80071b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071cc:	e05d      	b.n	800728a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d11c      	bne.n	8007216 <HAL_SPI_TransmitReceive+0x264>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d017      	beq.n	8007216 <HAL_SPI_TransmitReceive+0x264>
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d114      	bne.n	8007216 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	330c      	adds	r3, #12
 80071f6:	7812      	ldrb	r2, [r2, #0]
 80071f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b01      	cmp	r3, #1
 8007222:	d119      	bne.n	8007258 <HAL_SPI_TransmitReceive+0x2a6>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d014      	beq.n	8007258 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007254:	2301      	movs	r3, #1
 8007256:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007258:	f7fd fa68 	bl	800472c <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007264:	429a      	cmp	r2, r3
 8007266:	d803      	bhi.n	8007270 <HAL_SPI_TransmitReceive+0x2be>
 8007268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726e:	d102      	bne.n	8007276 <HAL_SPI_TransmitReceive+0x2c4>
 8007270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007272:	2b00      	cmp	r3, #0
 8007274:	d109      	bne.n	800728a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e038      	b.n	80072fc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d19c      	bne.n	80071ce <HAL_SPI_TransmitReceive+0x21c>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007298:	b29b      	uxth	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d197      	bne.n	80071ce <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800729e:	6a3a      	ldr	r2, [r7, #32]
 80072a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 fa0c 	bl	80076c0 <SPI_EndRxTxTransaction>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d008      	beq.n	80072c0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2220      	movs	r2, #32
 80072b2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e01d      	b.n	80072fc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072c8:	2300      	movs	r3, #0
 80072ca:	613b      	str	r3, [r7, #16]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	613b      	str	r3, [r7, #16]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80072fa:	2300      	movs	r3, #0
  }
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3728      	adds	r7, #40	@ 0x28
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	099b      	lsrs	r3, r3, #6
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10f      	bne.n	8007348 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	099b      	lsrs	r3, r3, #6
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
    return;
 8007346:	e0be      	b.n	80074c6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	085b      	lsrs	r3, r3, #1
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <HAL_SPI_IRQHandler+0x66>
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	09db      	lsrs	r3, r3, #7
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d004      	beq.n	800736a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
    return;
 8007368:	e0ad      	b.n	80074c6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	095b      	lsrs	r3, r3, #5
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <HAL_SPI_IRQHandler+0x80>
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	099b      	lsrs	r3, r3, #6
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 80a1 	beq.w	80074c6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	095b      	lsrs	r3, r3, #5
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 809a 	beq.w	80074c6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	099b      	lsrs	r3, r3, #6
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d023      	beq.n	80073e6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d011      	beq.n	80073ce <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ae:	f043 0204 	orr.w	r2, r3, #4
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	e00b      	b.n	80073e6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073ce:	2300      	movs	r3, #0
 80073d0:	613b      	str	r3, [r7, #16]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	613b      	str	r3, [r7, #16]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	613b      	str	r3, [r7, #16]
 80073e2:	693b      	ldr	r3, [r7, #16]
        return;
 80073e4:	e06f      	b.n	80074c6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	095b      	lsrs	r3, r3, #5
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d014      	beq.n	800741c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f6:	f043 0201 	orr.w	r2, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007420:	2b00      	cmp	r3, #0
 8007422:	d04f      	beq.n	80074c4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007432:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d104      	bne.n	8007450 <HAL_SPI_IRQHandler+0x14c>
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d034      	beq.n	80074ba <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0203 	bic.w	r2, r2, #3
 800745e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d011      	beq.n	800748c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800746c:	4a17      	ldr	r2, [pc, #92]	@ (80074cc <HAL_SPI_IRQHandler+0x1c8>)
 800746e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007474:	4618      	mov	r0, r3
 8007476:	f7fd fb2b 	bl	8004ad0 <HAL_DMA_Abort_IT>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007484:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007490:	2b00      	cmp	r3, #0
 8007492:	d016      	beq.n	80074c2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007498:	4a0c      	ldr	r2, [pc, #48]	@ (80074cc <HAL_SPI_IRQHandler+0x1c8>)
 800749a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fd fb15 	bl	8004ad0 <HAL_DMA_Abort_IT>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80074b8:	e003      	b.n	80074c2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f808 	bl	80074d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80074c0:	e000      	b.n	80074c4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80074c2:	bf00      	nop
    return;
 80074c4:	bf00      	nop
  }
}
 80074c6:	3720      	adds	r7, #32
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	080074e3 	.word	0x080074e3

080074d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	bc80      	pop	{r7}
 80074e0:	4770      	bx	lr

080074e2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ee:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f7ff ffe7 	bl	80074d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	4613      	mov	r3, r2
 800751a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800751c:	f7fd f906 	bl	800472c <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007524:	1a9b      	subs	r3, r3, r2
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	4413      	add	r3, r2
 800752a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800752c:	f7fd f8fe 	bl	800472c <HAL_GetTick>
 8007530:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007532:	4b39      	ldr	r3, [pc, #228]	@ (8007618 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	015b      	lsls	r3, r3, #5
 8007538:	0d1b      	lsrs	r3, r3, #20
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	fb02 f303 	mul.w	r3, r2, r3
 8007540:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007542:	e054      	b.n	80075ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754a:	d050      	beq.n	80075ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800754c:	f7fd f8ee 	bl	800472c <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	69fa      	ldr	r2, [r7, #28]
 8007558:	429a      	cmp	r2, r3
 800755a:	d902      	bls.n	8007562 <SPI_WaitFlagStateUntilTimeout+0x56>
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d13d      	bne.n	80075de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007570:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800757a:	d111      	bne.n	80075a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007584:	d004      	beq.n	8007590 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800758e:	d107      	bne.n	80075a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800759e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075a8:	d10f      	bne.n	80075ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e017      	b.n	800760e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	3b01      	subs	r3, #1
 80075ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4013      	ands	r3, r2
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	bf0c      	ite	eq
 80075fe:	2301      	moveq	r3, #1
 8007600:	2300      	movne	r3, #0
 8007602:	b2db      	uxtb	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	429a      	cmp	r2, r3
 800760a:	d19b      	bne.n	8007544 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3720      	adds	r7, #32
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000000 	.word	0x20000000

0800761c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af02      	add	r7, sp, #8
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007630:	d111      	bne.n	8007656 <SPI_EndRxTransaction+0x3a>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800763a:	d004      	beq.n	8007646 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007644:	d107      	bne.n	8007656 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007654:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800765e:	d117      	bne.n	8007690 <SPI_EndRxTransaction+0x74>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007668:	d112      	bne.n	8007690 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2200      	movs	r2, #0
 8007672:	2101      	movs	r1, #1
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff ff49 	bl	800750c <SPI_WaitFlagStateUntilTimeout>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01a      	beq.n	80076b6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007684:	f043 0220 	orr.w	r2, r3, #32
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e013      	b.n	80076b8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2200      	movs	r2, #0
 8007698:	2180      	movs	r1, #128	@ 0x80
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7ff ff36 	bl	800750c <SPI_WaitFlagStateUntilTimeout>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d007      	beq.n	80076b6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076aa:	f043 0220 	orr.w	r2, r3, #32
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e000      	b.n	80076b8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2201      	movs	r2, #1
 80076d4:	2102      	movs	r1, #2
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff ff18 	bl	800750c <SPI_WaitFlagStateUntilTimeout>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d007      	beq.n	80076f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076e6:	f043 0220 	orr.w	r2, r3, #32
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e013      	b.n	800771a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2200      	movs	r2, #0
 80076fa:	2180      	movs	r1, #128	@ 0x80
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f7ff ff05 	bl	800750c <SPI_WaitFlagStateUntilTimeout>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d007      	beq.n	8007718 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800770c:	f043 0220 	orr.w	r2, r3, #32
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e000      	b.n	800771a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b082      	sub	sp, #8
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e041      	b.n	80077b8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d106      	bne.n	800774e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7fc fd4f 	bl	80041ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	3304      	adds	r3, #4
 800775e:	4619      	mov	r1, r3
 8007760:	4610      	mov	r0, r2
 8007762:	f000 f86f 	bl	8007844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e031      	b.n	800783c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f898 	bl	8007920 <TIM_SlaveTimer_SetConfig>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d009      	beq.n	800780a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e018      	b.n	800783c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007818:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68da      	ldr	r2, [r3, #12]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007828:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a2f      	ldr	r2, [pc, #188]	@ (8007914 <TIM_Base_SetConfig+0xd0>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00b      	beq.n	8007874 <TIM_Base_SetConfig+0x30>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007862:	d007      	beq.n	8007874 <TIM_Base_SetConfig+0x30>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a2c      	ldr	r2, [pc, #176]	@ (8007918 <TIM_Base_SetConfig+0xd4>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d003      	beq.n	8007874 <TIM_Base_SetConfig+0x30>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a2b      	ldr	r2, [pc, #172]	@ (800791c <TIM_Base_SetConfig+0xd8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d108      	bne.n	8007886 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800787a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	4313      	orrs	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a22      	ldr	r2, [pc, #136]	@ (8007914 <TIM_Base_SetConfig+0xd0>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00b      	beq.n	80078a6 <TIM_Base_SetConfig+0x62>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007894:	d007      	beq.n	80078a6 <TIM_Base_SetConfig+0x62>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a1f      	ldr	r2, [pc, #124]	@ (8007918 <TIM_Base_SetConfig+0xd4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d003      	beq.n	80078a6 <TIM_Base_SetConfig+0x62>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a1e      	ldr	r2, [pc, #120]	@ (800791c <TIM_Base_SetConfig+0xd8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d108      	bne.n	80078b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	689a      	ldr	r2, [r3, #8]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a0d      	ldr	r2, [pc, #52]	@ (8007914 <TIM_Base_SetConfig+0xd0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d103      	bne.n	80078ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	f023 0201 	bic.w	r2, r3, #1
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	611a      	str	r2, [r3, #16]
  }
}
 800790a:	bf00      	nop
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	bc80      	pop	{r7}
 8007912:	4770      	bx	lr
 8007914:	40012c00 	.word	0x40012c00
 8007918:	40000400 	.word	0x40000400
 800791c:	40000800 	.word	0x40000800

08007920 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800793c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f023 0307 	bic.w	r3, r3, #7
 800794e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	4313      	orrs	r3, r2
 8007958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2b70      	cmp	r3, #112	@ 0x70
 8007968:	d01a      	beq.n	80079a0 <TIM_SlaveTimer_SetConfig+0x80>
 800796a:	2b70      	cmp	r3, #112	@ 0x70
 800796c:	d860      	bhi.n	8007a30 <TIM_SlaveTimer_SetConfig+0x110>
 800796e:	2b60      	cmp	r3, #96	@ 0x60
 8007970:	d054      	beq.n	8007a1c <TIM_SlaveTimer_SetConfig+0xfc>
 8007972:	2b60      	cmp	r3, #96	@ 0x60
 8007974:	d85c      	bhi.n	8007a30 <TIM_SlaveTimer_SetConfig+0x110>
 8007976:	2b50      	cmp	r3, #80	@ 0x50
 8007978:	d046      	beq.n	8007a08 <TIM_SlaveTimer_SetConfig+0xe8>
 800797a:	2b50      	cmp	r3, #80	@ 0x50
 800797c:	d858      	bhi.n	8007a30 <TIM_SlaveTimer_SetConfig+0x110>
 800797e:	2b40      	cmp	r3, #64	@ 0x40
 8007980:	d019      	beq.n	80079b6 <TIM_SlaveTimer_SetConfig+0x96>
 8007982:	2b40      	cmp	r3, #64	@ 0x40
 8007984:	d854      	bhi.n	8007a30 <TIM_SlaveTimer_SetConfig+0x110>
 8007986:	2b30      	cmp	r3, #48	@ 0x30
 8007988:	d055      	beq.n	8007a36 <TIM_SlaveTimer_SetConfig+0x116>
 800798a:	2b30      	cmp	r3, #48	@ 0x30
 800798c:	d850      	bhi.n	8007a30 <TIM_SlaveTimer_SetConfig+0x110>
 800798e:	2b20      	cmp	r3, #32
 8007990:	d051      	beq.n	8007a36 <TIM_SlaveTimer_SetConfig+0x116>
 8007992:	2b20      	cmp	r3, #32
 8007994:	d84c      	bhi.n	8007a30 <TIM_SlaveTimer_SetConfig+0x110>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d04d      	beq.n	8007a36 <TIM_SlaveTimer_SetConfig+0x116>
 800799a:	2b10      	cmp	r3, #16
 800799c:	d04b      	beq.n	8007a36 <TIM_SlaveTimer_SetConfig+0x116>
 800799e:	e047      	b.n	8007a30 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80079b0:	f000 f8a4 	bl	8007afc <TIM_ETR_SetConfig>
      break;
 80079b4:	e040      	b.n	8007a38 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b05      	cmp	r3, #5
 80079bc:	d101      	bne.n	80079c2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e03b      	b.n	8007a3a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6a1a      	ldr	r2, [r3, #32]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f022 0201 	bic.w	r2, r2, #1
 80079d8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80079e8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	621a      	str	r2, [r3, #32]
      break;
 8007a06:	e017      	b.n	8007a38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a14:	461a      	mov	r2, r3
 8007a16:	f000 f814 	bl	8007a42 <TIM_TI1_ConfigInputStage>
      break;
 8007a1a:	e00d      	b.n	8007a38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f000 f838 	bl	8007a9e <TIM_TI2_ConfigInputStage>
      break;
 8007a2e:	e003      	b.n	8007a38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	75fb      	strb	r3, [r7, #23]
      break;
 8007a34:	e000      	b.n	8007a38 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007a36:	bf00      	nop
  }

  return status;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b087      	sub	sp, #28
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	f023 0201 	bic.w	r2, r3, #1
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f023 030a 	bic.w	r3, r3, #10
 8007a7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	621a      	str	r2, [r3, #32]
}
 8007a94:	bf00      	nop
 8007a96:	371c      	adds	r7, #28
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bc80      	pop	{r7}
 8007a9c:	4770      	bx	lr

08007a9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b087      	sub	sp, #28
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	f023 0210 	bic.w	r2, r3, #16
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	031b      	lsls	r3, r3, #12
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ada:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	621a      	str	r2, [r3, #32]
}
 8007af2:	bf00      	nop
 8007af4:	371c      	adds	r7, #28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bc80      	pop	{r7}
 8007afa:	4770      	bx	lr

08007afc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	021a      	lsls	r2, r3, #8
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	609a      	str	r2, [r3, #8]
}
 8007b30:	bf00      	nop
 8007b32:	371c      	adds	r7, #28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bc80      	pop	{r7}
 8007b38:	4770      	bx	lr
	...

08007b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d101      	bne.n	8007b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e046      	b.n	8007be2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a16      	ldr	r2, [pc, #88]	@ (8007bec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d00e      	beq.n	8007bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ba0:	d009      	beq.n	8007bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a12      	ldr	r2, [pc, #72]	@ (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d004      	beq.n	8007bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a10      	ldr	r2, [pc, #64]	@ (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d10c      	bne.n	8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr
 8007bec:	40012c00 	.word	0x40012c00
 8007bf0:	40000400 	.word	0x40000400
 8007bf4:	40000800 	.word	0x40000800

08007bf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e042      	b.n	8007c90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7fc fb02 	bl	8004228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2224      	movs	r2, #36	@ 0x24
 8007c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fde5 	bl	800880c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	691a      	ldr	r2, [r3, #16]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	695a      	ldr	r2, [r3, #20]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2220      	movs	r2, #32
 8007c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08a      	sub	sp, #40	@ 0x28
 8007c9c:	af02      	add	r7, sp, #8
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b20      	cmp	r3, #32
 8007cb6:	d175      	bne.n	8007da4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <HAL_UART_Transmit+0x2c>
 8007cbe:	88fb      	ldrh	r3, [r7, #6]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e06e      	b.n	8007da6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2221      	movs	r2, #33	@ 0x21
 8007cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cd6:	f7fc fd29 	bl	800472c <HAL_GetTick>
 8007cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	88fa      	ldrh	r2, [r7, #6]
 8007ce0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	88fa      	ldrh	r2, [r7, #6]
 8007ce6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cf0:	d108      	bne.n	8007d04 <HAL_UART_Transmit+0x6c>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d104      	bne.n	8007d04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	61bb      	str	r3, [r7, #24]
 8007d02:	e003      	b.n	8007d0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d0c:	e02e      	b.n	8007d6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2200      	movs	r2, #0
 8007d16:	2180      	movs	r1, #128	@ 0x80
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 fb49 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2220      	movs	r2, #32
 8007d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e03a      	b.n	8007da6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	3302      	adds	r3, #2
 8007d4a:	61bb      	str	r3, [r7, #24]
 8007d4c:	e007      	b.n	8007d5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1cb      	bne.n	8007d0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	2140      	movs	r1, #64	@ 0x40
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 fb15 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d005      	beq.n	8007d98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e006      	b.n	8007da6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	e000      	b.n	8007da6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007da4:	2302      	movs	r3, #2
  }
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3720      	adds	r7, #32
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	4613      	mov	r3, r2
 8007dba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b20      	cmp	r3, #32
 8007dc6:	d121      	bne.n	8007e0c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <HAL_UART_Transmit_IT+0x26>
 8007dce:	88fb      	ldrh	r3, [r7, #6]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e01a      	b.n	8007e0e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	88fa      	ldrh	r2, [r7, #6]
 8007de2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	88fa      	ldrh	r2, [r7, #6]
 8007de8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2221      	movs	r2, #33	@ 0x21
 8007df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007e06:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e000      	b.n	8007e0e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007e0c:	2302      	movs	r3, #2
  }
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr

08007e18 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b20      	cmp	r3, #32
 8007e30:	d112      	bne.n	8007e58 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <HAL_UART_Receive_IT+0x26>
 8007e38:	88fb      	ldrh	r3, [r7, #6]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e00b      	b.n	8007e5a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e48:	88fb      	ldrh	r3, [r7, #6]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	68b9      	ldr	r1, [r7, #8]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 fb07 	bl	8008462 <UART_Start_Receive_IT>
 8007e54:	4603      	mov	r3, r0
 8007e56:	e000      	b.n	8007e5a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007e58:	2302      	movs	r3, #2
  }
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b0ba      	sub	sp, #232	@ 0xe8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10f      	bne.n	8007eca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eae:	f003 0320 	and.w	r3, r3, #32
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d009      	beq.n	8007eca <HAL_UART_IRQHandler+0x66>
 8007eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fbe3 	bl	800868e <UART_Receive_IT>
      return;
 8007ec8:	e25b      	b.n	8008382 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 80de 	beq.w	8008090 <HAL_UART_IRQHandler+0x22c>
 8007ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d106      	bne.n	8007eee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80d1 	beq.w	8008090 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00b      	beq.n	8007f12 <HAL_UART_IRQHandler+0xae>
 8007efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f0a:	f043 0201 	orr.w	r2, r3, #1
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f16:	f003 0304 	and.w	r3, r3, #4
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <HAL_UART_IRQHandler+0xd2>
 8007f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d005      	beq.n	8007f36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f2e:	f043 0202 	orr.w	r2, r3, #2
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00b      	beq.n	8007f5a <HAL_UART_IRQHandler+0xf6>
 8007f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d005      	beq.n	8007f5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f52:	f043 0204 	orr.w	r2, r3, #4
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f5e:	f003 0308 	and.w	r3, r3, #8
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d011      	beq.n	8007f8a <HAL_UART_IRQHandler+0x126>
 8007f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f6a:	f003 0320 	and.w	r3, r3, #32
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d105      	bne.n	8007f7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d005      	beq.n	8007f8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f82:	f043 0208 	orr.w	r2, r3, #8
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 81f2 	beq.w	8008378 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f98:	f003 0320 	and.w	r3, r3, #32
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d008      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x14e>
 8007fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fb6e 	bl	800868e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	bf14      	ite	ne
 8007fc0:	2301      	movne	r3, #1
 8007fc2:	2300      	moveq	r3, #0
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d103      	bne.n	8007fde <HAL_UART_IRQHandler+0x17a>
 8007fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d04f      	beq.n	800807e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa78 	bl	80084d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d041      	beq.n	8008076 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3314      	adds	r3, #20
 8007ff8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008008:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800800c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008010:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3314      	adds	r3, #20
 800801a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800801e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008022:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800802a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800802e:	e841 2300 	strex	r3, r2, [r1]
 8008032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1d9      	bne.n	8007ff2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008042:	2b00      	cmp	r3, #0
 8008044:	d013      	beq.n	800806e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800804a:	4a7e      	ldr	r2, [pc, #504]	@ (8008244 <HAL_UART_IRQHandler+0x3e0>)
 800804c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008052:	4618      	mov	r0, r3
 8008054:	f7fc fd3c 	bl	8004ad0 <HAL_DMA_Abort_IT>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d016      	beq.n	800808c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008068:	4610      	mov	r0, r2
 800806a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800806c:	e00e      	b.n	800808c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f98a 	bl	8008388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008074:	e00a      	b.n	800808c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f986 	bl	8008388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800807c:	e006      	b.n	800808c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f982 	bl	8008388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800808a:	e175      	b.n	8008378 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800808c:	bf00      	nop
    return;
 800808e:	e173      	b.n	8008378 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008094:	2b01      	cmp	r3, #1
 8008096:	f040 814f 	bne.w	8008338 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800809a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800809e:	f003 0310 	and.w	r3, r3, #16
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 8148 	beq.w	8008338 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080ac:	f003 0310 	and.w	r3, r3, #16
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 8141 	beq.w	8008338 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080b6:	2300      	movs	r3, #0
 80080b8:	60bb      	str	r3, [r7, #8]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	60bb      	str	r3, [r7, #8]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	60bb      	str	r3, [r7, #8]
 80080ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 80b6 	beq.w	8008248 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 8145 	beq.w	800837c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80080fa:	429a      	cmp	r2, r3
 80080fc:	f080 813e 	bcs.w	800837c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008106:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	2b20      	cmp	r3, #32
 8008110:	f000 8088 	beq.w	8008224 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	330c      	adds	r3, #12
 800811a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800812a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800812e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008132:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	330c      	adds	r3, #12
 800813c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008140:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008144:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800814c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1d9      	bne.n	8008114 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3314      	adds	r3, #20
 8008166:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008168:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800816a:	e853 3f00 	ldrex	r3, [r3]
 800816e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008170:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008172:	f023 0301 	bic.w	r3, r3, #1
 8008176:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3314      	adds	r3, #20
 8008180:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008184:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008188:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800818c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008190:	e841 2300 	strex	r3, r2, [r1]
 8008194:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008196:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1e1      	bne.n	8008160 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3314      	adds	r3, #20
 80081a2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081a6:	e853 3f00 	ldrex	r3, [r3]
 80081aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80081ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3314      	adds	r3, #20
 80081bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80081c0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80081c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80081c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80081ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e3      	bne.n	800819c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	330c      	adds	r3, #12
 80081e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80081f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081f4:	f023 0310 	bic.w	r3, r3, #16
 80081f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	330c      	adds	r3, #12
 8008202:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008206:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008208:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800820c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e3      	bne.n	80081e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800821e:	4618      	mov	r0, r3
 8008220:	f7fc fc1a 	bl	8004a58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008232:	b29b      	uxth	r3, r3
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	b29b      	uxth	r3, r3
 8008238:	4619      	mov	r1, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f8ad 	bl	800839a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008240:	e09c      	b.n	800837c <HAL_UART_IRQHandler+0x518>
 8008242:	bf00      	nop
 8008244:	08008599 	.word	0x08008599
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008250:	b29b      	uxth	r3, r3
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800825c:	b29b      	uxth	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 808e 	beq.w	8008380 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 8089 	beq.w	8008380 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	330c      	adds	r3, #12
 8008274:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800827e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008280:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008284:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	330c      	adds	r3, #12
 800828e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008292:	647a      	str	r2, [r7, #68]	@ 0x44
 8008294:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008298:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e3      	bne.n	800826e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	3314      	adds	r3, #20
 80082ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	e853 3f00 	ldrex	r3, [r3]
 80082b4:	623b      	str	r3, [r7, #32]
   return(result);
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	f023 0301 	bic.w	r3, r3, #1
 80082bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3314      	adds	r3, #20
 80082c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80082ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80082cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e3      	bne.n	80082a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	330c      	adds	r3, #12
 80082f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	e853 3f00 	ldrex	r3, [r3]
 80082fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f023 0310 	bic.w	r3, r3, #16
 8008302:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	330c      	adds	r3, #12
 800830c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008310:	61fa      	str	r2, [r7, #28]
 8008312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008314:	69b9      	ldr	r1, [r7, #24]
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	617b      	str	r3, [r7, #20]
   return(result);
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e3      	bne.n	80082ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800832a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f832 	bl	800839a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008336:	e023      	b.n	8008380 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800833c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008340:	2b00      	cmp	r3, #0
 8008342:	d009      	beq.n	8008358 <HAL_UART_IRQHandler+0x4f4>
 8008344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f935 	bl	80085c0 <UART_Transmit_IT>
    return;
 8008356:	e014      	b.n	8008382 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800835c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00e      	beq.n	8008382 <HAL_UART_IRQHandler+0x51e>
 8008364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800836c:	2b00      	cmp	r3, #0
 800836e:	d008      	beq.n	8008382 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f974 	bl	800865e <UART_EndTransmit_IT>
    return;
 8008376:	e004      	b.n	8008382 <HAL_UART_IRQHandler+0x51e>
    return;
 8008378:	bf00      	nop
 800837a:	e002      	b.n	8008382 <HAL_UART_IRQHandler+0x51e>
      return;
 800837c:	bf00      	nop
 800837e:	e000      	b.n	8008382 <HAL_UART_IRQHandler+0x51e>
      return;
 8008380:	bf00      	nop
  }
}
 8008382:	37e8      	adds	r7, #232	@ 0xe8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	bc80      	pop	{r7}
 8008398:	4770      	bx	lr

0800839a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	460b      	mov	r3, r1
 80083a4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083a6:	bf00      	nop
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr

080083b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c0:	e03b      	b.n	800843a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d037      	beq.n	800843a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ca:	f7fc f9af 	bl	800472c <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	6a3a      	ldr	r2, [r7, #32]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d302      	bcc.n	80083e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e03a      	b.n	800845a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f003 0304 	and.w	r3, r3, #4
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d023      	beq.n	800843a <UART_WaitOnFlagUntilTimeout+0x8a>
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b80      	cmp	r3, #128	@ 0x80
 80083f6:	d020      	beq.n	800843a <UART_WaitOnFlagUntilTimeout+0x8a>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b40      	cmp	r3, #64	@ 0x40
 80083fc:	d01d      	beq.n	800843a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b08      	cmp	r3, #8
 800840a:	d116      	bne.n	800843a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800840c:	2300      	movs	r3, #0
 800840e:	617b      	str	r3, [r7, #20]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	617b      	str	r3, [r7, #20]
 8008420:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 f856 	bl	80084d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2208      	movs	r2, #8
 800842c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e00f      	b.n	800845a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	4013      	ands	r3, r2
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	429a      	cmp	r2, r3
 8008448:	bf0c      	ite	eq
 800844a:	2301      	moveq	r3, #1
 800844c:	2300      	movne	r3, #0
 800844e:	b2db      	uxtb	r3, r3
 8008450:	461a      	mov	r2, r3
 8008452:	79fb      	ldrb	r3, [r7, #7]
 8008454:	429a      	cmp	r2, r3
 8008456:	d0b4      	beq.n	80083c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	60f8      	str	r0, [r7, #12]
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	4613      	mov	r3, r2
 800846e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	88fa      	ldrh	r2, [r7, #6]
 800847a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	88fa      	ldrh	r2, [r7, #6]
 8008480:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2222      	movs	r2, #34	@ 0x22
 800848c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d007      	beq.n	80084a8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084a6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	695a      	ldr	r2, [r3, #20]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0201 	orr.w	r2, r2, #1
 80084b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0220 	orr.w	r2, r2, #32
 80084c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bc80      	pop	{r7}
 80084d2:	4770      	bx	lr

080084d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b095      	sub	sp, #84	@ 0x54
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	330c      	adds	r3, #12
 80084e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e6:	e853 3f00 	ldrex	r3, [r3]
 80084ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	330c      	adds	r3, #12
 80084fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80084fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008500:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008502:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008504:	e841 2300 	strex	r3, r2, [r1]
 8008508:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800850a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e5      	bne.n	80084dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3314      	adds	r3, #20
 8008516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	e853 3f00 	ldrex	r3, [r3]
 800851e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	f023 0301 	bic.w	r3, r3, #1
 8008526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3314      	adds	r3, #20
 800852e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008530:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008532:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800853e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e5      	bne.n	8008510 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008548:	2b01      	cmp	r3, #1
 800854a:	d119      	bne.n	8008580 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	330c      	adds	r3, #12
 8008552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	60bb      	str	r3, [r7, #8]
   return(result);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f023 0310 	bic.w	r3, r3, #16
 8008562:	647b      	str	r3, [r7, #68]	@ 0x44
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	330c      	adds	r3, #12
 800856a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800856c:	61ba      	str	r2, [r7, #24]
 800856e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	6979      	ldr	r1, [r7, #20]
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	e841 2300 	strex	r3, r2, [r1]
 8008578:	613b      	str	r3, [r7, #16]
   return(result);
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e5      	bne.n	800854c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2220      	movs	r2, #32
 8008584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800858e:	bf00      	nop
 8008590:	3754      	adds	r7, #84	@ 0x54
 8008592:	46bd      	mov	sp, r7
 8008594:	bc80      	pop	{r7}
 8008596:	4770      	bx	lr

08008598 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f7ff fee8 	bl	8008388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085b8:	bf00      	nop
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b21      	cmp	r3, #33	@ 0x21
 80085d2:	d13e      	bne.n	8008652 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085dc:	d114      	bne.n	8008608 <UART_Transmit_IT+0x48>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d110      	bne.n	8008608 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	1c9a      	adds	r2, r3, #2
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	621a      	str	r2, [r3, #32]
 8008606:	e008      	b.n	800861a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	1c59      	adds	r1, r3, #1
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	6211      	str	r1, [r2, #32]
 8008612:	781a      	ldrb	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800861e:	b29b      	uxth	r3, r3
 8008620:	3b01      	subs	r3, #1
 8008622:	b29b      	uxth	r3, r3
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	4619      	mov	r1, r3
 8008628:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10f      	bne.n	800864e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800863c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800864c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	e000      	b.n	8008654 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008652:	2302      	movs	r3, #2
  }
}
 8008654:	4618      	mov	r0, r3
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	bc80      	pop	{r7}
 800865c:	4770      	bx	lr

0800865e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008674:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7fb fb2c 	bl	8003cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b08c      	sub	sp, #48	@ 0x30
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b22      	cmp	r3, #34	@ 0x22
 80086a0:	f040 80ae 	bne.w	8008800 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086ac:	d117      	bne.n	80086de <UART_Receive_IT+0x50>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d113      	bne.n	80086de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086be:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d6:	1c9a      	adds	r2, r3, #2
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	629a      	str	r2, [r3, #40]	@ 0x28
 80086dc:	e026      	b.n	800872c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086f0:	d007      	beq.n	8008702 <UART_Receive_IT+0x74>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10a      	bne.n	8008710 <UART_Receive_IT+0x82>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	b2da      	uxtb	r2, r3
 800870a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800870c:	701a      	strb	r2, [r3, #0]
 800870e:	e008      	b.n	8008722 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800871c:	b2da      	uxtb	r2, r3
 800871e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008720:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008730:	b29b      	uxth	r3, r3
 8008732:	3b01      	subs	r3, #1
 8008734:	b29b      	uxth	r3, r3
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	4619      	mov	r1, r3
 800873a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800873c:	2b00      	cmp	r3, #0
 800873e:	d15d      	bne.n	80087fc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0220 	bic.w	r2, r2, #32
 800874e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800875e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	695a      	ldr	r2, [r3, #20]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f022 0201 	bic.w	r2, r2, #1
 800876e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2220      	movs	r2, #32
 8008774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008782:	2b01      	cmp	r3, #1
 8008784:	d135      	bne.n	80087f2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	330c      	adds	r3, #12
 8008792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	e853 3f00 	ldrex	r3, [r3]
 800879a:	613b      	str	r3, [r7, #16]
   return(result);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f023 0310 	bic.w	r3, r3, #16
 80087a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	330c      	adds	r3, #12
 80087aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087ac:	623a      	str	r2, [r7, #32]
 80087ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b0:	69f9      	ldr	r1, [r7, #28]
 80087b2:	6a3a      	ldr	r2, [r7, #32]
 80087b4:	e841 2300 	strex	r3, r2, [r1]
 80087b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1e5      	bne.n	800878c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0310 	and.w	r3, r3, #16
 80087ca:	2b10      	cmp	r3, #16
 80087cc:	d10a      	bne.n	80087e4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087ce:	2300      	movs	r3, #0
 80087d0:	60fb      	str	r3, [r7, #12]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	60fb      	str	r3, [r7, #12]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	60fb      	str	r3, [r7, #12]
 80087e2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7ff fdd5 	bl	800839a <HAL_UARTEx_RxEventCallback>
 80087f0:	e002      	b.n	80087f8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7fa f970 	bl	8002ad8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	e002      	b.n	8008802 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	e000      	b.n	8008802 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008800:	2302      	movs	r3, #2
  }
}
 8008802:	4618      	mov	r0, r3
 8008804:	3730      	adds	r7, #48	@ 0x30
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
	...

0800880c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	68da      	ldr	r2, [r3, #12]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	430a      	orrs	r2, r1
 8008828:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689a      	ldr	r2, [r3, #8]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	431a      	orrs	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	4313      	orrs	r3, r2
 800883a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8008846:	f023 030c 	bic.w	r3, r3, #12
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	6812      	ldr	r2, [r2, #0]
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	430b      	orrs	r3, r1
 8008852:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a2c      	ldr	r2, [pc, #176]	@ (8008920 <UART_SetConfig+0x114>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d103      	bne.n	800887c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008874:	f7fe f88a 	bl	800698c <HAL_RCC_GetPCLK2Freq>
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	e002      	b.n	8008882 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800887c:	f7fe f872 	bl	8006964 <HAL_RCC_GetPCLK1Freq>
 8008880:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4613      	mov	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	009a      	lsls	r2, r3, #2
 800888c:	441a      	add	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	fbb2 f3f3 	udiv	r3, r2, r3
 8008898:	4a22      	ldr	r2, [pc, #136]	@ (8008924 <UART_SetConfig+0x118>)
 800889a:	fba2 2303 	umull	r2, r3, r2, r3
 800889e:	095b      	lsrs	r3, r3, #5
 80088a0:	0119      	lsls	r1, r3, #4
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	4613      	mov	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	009a      	lsls	r2, r3, #2
 80088ac:	441a      	add	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80088b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008924 <UART_SetConfig+0x118>)
 80088ba:	fba3 0302 	umull	r0, r3, r3, r2
 80088be:	095b      	lsrs	r3, r3, #5
 80088c0:	2064      	movs	r0, #100	@ 0x64
 80088c2:	fb00 f303 	mul.w	r3, r0, r3
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	011b      	lsls	r3, r3, #4
 80088ca:	3332      	adds	r3, #50	@ 0x32
 80088cc:	4a15      	ldr	r2, [pc, #84]	@ (8008924 <UART_SetConfig+0x118>)
 80088ce:	fba2 2303 	umull	r2, r3, r2, r3
 80088d2:	095b      	lsrs	r3, r3, #5
 80088d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80088d8:	4419      	add	r1, r3
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	4613      	mov	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	009a      	lsls	r2, r3, #2
 80088e4:	441a      	add	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80088f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008924 <UART_SetConfig+0x118>)
 80088f2:	fba3 0302 	umull	r0, r3, r3, r2
 80088f6:	095b      	lsrs	r3, r3, #5
 80088f8:	2064      	movs	r0, #100	@ 0x64
 80088fa:	fb00 f303 	mul.w	r3, r0, r3
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	3332      	adds	r3, #50	@ 0x32
 8008904:	4a07      	ldr	r2, [pc, #28]	@ (8008924 <UART_SetConfig+0x118>)
 8008906:	fba2 2303 	umull	r2, r3, r2, r3
 800890a:	095b      	lsrs	r3, r3, #5
 800890c:	f003 020f 	and.w	r2, r3, #15
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	440a      	add	r2, r1
 8008916:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	40013800 	.word	0x40013800
 8008924:	51eb851f 	.word	0x51eb851f

08008928 <__cvt>:
 8008928:	2b00      	cmp	r3, #0
 800892a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800892e:	461d      	mov	r5, r3
 8008930:	bfbb      	ittet	lt
 8008932:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008936:	461d      	movlt	r5, r3
 8008938:	2300      	movge	r3, #0
 800893a:	232d      	movlt	r3, #45	@ 0x2d
 800893c:	b088      	sub	sp, #32
 800893e:	4614      	mov	r4, r2
 8008940:	bfb8      	it	lt
 8008942:	4614      	movlt	r4, r2
 8008944:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008946:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008948:	7013      	strb	r3, [r2, #0]
 800894a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800894c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008950:	f023 0820 	bic.w	r8, r3, #32
 8008954:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008958:	d005      	beq.n	8008966 <__cvt+0x3e>
 800895a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800895e:	d100      	bne.n	8008962 <__cvt+0x3a>
 8008960:	3601      	adds	r6, #1
 8008962:	2302      	movs	r3, #2
 8008964:	e000      	b.n	8008968 <__cvt+0x40>
 8008966:	2303      	movs	r3, #3
 8008968:	aa07      	add	r2, sp, #28
 800896a:	9204      	str	r2, [sp, #16]
 800896c:	aa06      	add	r2, sp, #24
 800896e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008972:	e9cd 3600 	strd	r3, r6, [sp]
 8008976:	4622      	mov	r2, r4
 8008978:	462b      	mov	r3, r5
 800897a:	f000 fe8d 	bl	8009698 <_dtoa_r>
 800897e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008982:	4607      	mov	r7, r0
 8008984:	d119      	bne.n	80089ba <__cvt+0x92>
 8008986:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008988:	07db      	lsls	r3, r3, #31
 800898a:	d50e      	bpl.n	80089aa <__cvt+0x82>
 800898c:	eb00 0906 	add.w	r9, r0, r6
 8008990:	2200      	movs	r2, #0
 8008992:	2300      	movs	r3, #0
 8008994:	4620      	mov	r0, r4
 8008996:	4629      	mov	r1, r5
 8008998:	f7f8 f806 	bl	80009a8 <__aeabi_dcmpeq>
 800899c:	b108      	cbz	r0, 80089a2 <__cvt+0x7a>
 800899e:	f8cd 901c 	str.w	r9, [sp, #28]
 80089a2:	2230      	movs	r2, #48	@ 0x30
 80089a4:	9b07      	ldr	r3, [sp, #28]
 80089a6:	454b      	cmp	r3, r9
 80089a8:	d31e      	bcc.n	80089e8 <__cvt+0xc0>
 80089aa:	4638      	mov	r0, r7
 80089ac:	9b07      	ldr	r3, [sp, #28]
 80089ae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80089b0:	1bdb      	subs	r3, r3, r7
 80089b2:	6013      	str	r3, [r2, #0]
 80089b4:	b008      	add	sp, #32
 80089b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089be:	eb00 0906 	add.w	r9, r0, r6
 80089c2:	d1e5      	bne.n	8008990 <__cvt+0x68>
 80089c4:	7803      	ldrb	r3, [r0, #0]
 80089c6:	2b30      	cmp	r3, #48	@ 0x30
 80089c8:	d10a      	bne.n	80089e0 <__cvt+0xb8>
 80089ca:	2200      	movs	r2, #0
 80089cc:	2300      	movs	r3, #0
 80089ce:	4620      	mov	r0, r4
 80089d0:	4629      	mov	r1, r5
 80089d2:	f7f7 ffe9 	bl	80009a8 <__aeabi_dcmpeq>
 80089d6:	b918      	cbnz	r0, 80089e0 <__cvt+0xb8>
 80089d8:	f1c6 0601 	rsb	r6, r6, #1
 80089dc:	f8ca 6000 	str.w	r6, [sl]
 80089e0:	f8da 3000 	ldr.w	r3, [sl]
 80089e4:	4499      	add	r9, r3
 80089e6:	e7d3      	b.n	8008990 <__cvt+0x68>
 80089e8:	1c59      	adds	r1, r3, #1
 80089ea:	9107      	str	r1, [sp, #28]
 80089ec:	701a      	strb	r2, [r3, #0]
 80089ee:	e7d9      	b.n	80089a4 <__cvt+0x7c>

080089f0 <__exponent>:
 80089f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f2:	2900      	cmp	r1, #0
 80089f4:	bfb6      	itet	lt
 80089f6:	232d      	movlt	r3, #45	@ 0x2d
 80089f8:	232b      	movge	r3, #43	@ 0x2b
 80089fa:	4249      	neglt	r1, r1
 80089fc:	2909      	cmp	r1, #9
 80089fe:	7002      	strb	r2, [r0, #0]
 8008a00:	7043      	strb	r3, [r0, #1]
 8008a02:	dd29      	ble.n	8008a58 <__exponent+0x68>
 8008a04:	f10d 0307 	add.w	r3, sp, #7
 8008a08:	461d      	mov	r5, r3
 8008a0a:	270a      	movs	r7, #10
 8008a0c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a10:	461a      	mov	r2, r3
 8008a12:	fb07 1416 	mls	r4, r7, r6, r1
 8008a16:	3430      	adds	r4, #48	@ 0x30
 8008a18:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	2c63      	cmp	r4, #99	@ 0x63
 8008a20:	4631      	mov	r1, r6
 8008a22:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a26:	dcf1      	bgt.n	8008a0c <__exponent+0x1c>
 8008a28:	3130      	adds	r1, #48	@ 0x30
 8008a2a:	1e94      	subs	r4, r2, #2
 8008a2c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a30:	4623      	mov	r3, r4
 8008a32:	1c41      	adds	r1, r0, #1
 8008a34:	42ab      	cmp	r3, r5
 8008a36:	d30a      	bcc.n	8008a4e <__exponent+0x5e>
 8008a38:	f10d 0309 	add.w	r3, sp, #9
 8008a3c:	1a9b      	subs	r3, r3, r2
 8008a3e:	42ac      	cmp	r4, r5
 8008a40:	bf88      	it	hi
 8008a42:	2300      	movhi	r3, #0
 8008a44:	3302      	adds	r3, #2
 8008a46:	4403      	add	r3, r0
 8008a48:	1a18      	subs	r0, r3, r0
 8008a4a:	b003      	add	sp, #12
 8008a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a4e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008a52:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008a56:	e7ed      	b.n	8008a34 <__exponent+0x44>
 8008a58:	2330      	movs	r3, #48	@ 0x30
 8008a5a:	3130      	adds	r1, #48	@ 0x30
 8008a5c:	7083      	strb	r3, [r0, #2]
 8008a5e:	70c1      	strb	r1, [r0, #3]
 8008a60:	1d03      	adds	r3, r0, #4
 8008a62:	e7f1      	b.n	8008a48 <__exponent+0x58>

08008a64 <_printf_float>:
 8008a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a68:	b091      	sub	sp, #68	@ 0x44
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008a70:	4616      	mov	r6, r2
 8008a72:	461f      	mov	r7, r3
 8008a74:	4605      	mov	r5, r0
 8008a76:	f000 fcf3 	bl	8009460 <_localeconv_r>
 8008a7a:	6803      	ldr	r3, [r0, #0]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	9308      	str	r3, [sp, #32]
 8008a80:	f7f7 fb66 	bl	8000150 <strlen>
 8008a84:	2300      	movs	r3, #0
 8008a86:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a88:	f8d8 3000 	ldr.w	r3, [r8]
 8008a8c:	9009      	str	r0, [sp, #36]	@ 0x24
 8008a8e:	3307      	adds	r3, #7
 8008a90:	f023 0307 	bic.w	r3, r3, #7
 8008a94:	f103 0208 	add.w	r2, r3, #8
 8008a98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008a9c:	f8d4 b000 	ldr.w	fp, [r4]
 8008aa0:	f8c8 2000 	str.w	r2, [r8]
 8008aa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008aa8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008aac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008aae:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008aba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008abe:	4b9c      	ldr	r3, [pc, #624]	@ (8008d30 <_printf_float+0x2cc>)
 8008ac0:	f7f7 ffa4 	bl	8000a0c <__aeabi_dcmpun>
 8008ac4:	bb70      	cbnz	r0, 8008b24 <_printf_float+0xc0>
 8008ac6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008aca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ace:	4b98      	ldr	r3, [pc, #608]	@ (8008d30 <_printf_float+0x2cc>)
 8008ad0:	f7f7 ff7e 	bl	80009d0 <__aeabi_dcmple>
 8008ad4:	bb30      	cbnz	r0, 8008b24 <_printf_float+0xc0>
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4640      	mov	r0, r8
 8008adc:	4649      	mov	r1, r9
 8008ade:	f7f7 ff6d 	bl	80009bc <__aeabi_dcmplt>
 8008ae2:	b110      	cbz	r0, 8008aea <_printf_float+0x86>
 8008ae4:	232d      	movs	r3, #45	@ 0x2d
 8008ae6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aea:	4a92      	ldr	r2, [pc, #584]	@ (8008d34 <_printf_float+0x2d0>)
 8008aec:	4b92      	ldr	r3, [pc, #584]	@ (8008d38 <_printf_float+0x2d4>)
 8008aee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008af2:	bf8c      	ite	hi
 8008af4:	4690      	movhi	r8, r2
 8008af6:	4698      	movls	r8, r3
 8008af8:	2303      	movs	r3, #3
 8008afa:	f04f 0900 	mov.w	r9, #0
 8008afe:	6123      	str	r3, [r4, #16]
 8008b00:	f02b 0304 	bic.w	r3, fp, #4
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	4633      	mov	r3, r6
 8008b08:	4621      	mov	r1, r4
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	9700      	str	r7, [sp, #0]
 8008b0e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008b10:	f000 f9d4 	bl	8008ebc <_printf_common>
 8008b14:	3001      	adds	r0, #1
 8008b16:	f040 8090 	bne.w	8008c3a <_printf_float+0x1d6>
 8008b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1e:	b011      	add	sp, #68	@ 0x44
 8008b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b24:	4642      	mov	r2, r8
 8008b26:	464b      	mov	r3, r9
 8008b28:	4640      	mov	r0, r8
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	f7f7 ff6e 	bl	8000a0c <__aeabi_dcmpun>
 8008b30:	b148      	cbz	r0, 8008b46 <_printf_float+0xe2>
 8008b32:	464b      	mov	r3, r9
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	bfb8      	it	lt
 8008b38:	232d      	movlt	r3, #45	@ 0x2d
 8008b3a:	4a80      	ldr	r2, [pc, #512]	@ (8008d3c <_printf_float+0x2d8>)
 8008b3c:	bfb8      	it	lt
 8008b3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008b42:	4b7f      	ldr	r3, [pc, #508]	@ (8008d40 <_printf_float+0x2dc>)
 8008b44:	e7d3      	b.n	8008aee <_printf_float+0x8a>
 8008b46:	6863      	ldr	r3, [r4, #4]
 8008b48:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	d13f      	bne.n	8008bd0 <_printf_float+0x16c>
 8008b50:	2306      	movs	r3, #6
 8008b52:	6063      	str	r3, [r4, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008b5a:	6023      	str	r3, [r4, #0]
 8008b5c:	9206      	str	r2, [sp, #24]
 8008b5e:	aa0e      	add	r2, sp, #56	@ 0x38
 8008b60:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008b64:	aa0d      	add	r2, sp, #52	@ 0x34
 8008b66:	9203      	str	r2, [sp, #12]
 8008b68:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008b6c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008b70:	6863      	ldr	r3, [r4, #4]
 8008b72:	4642      	mov	r2, r8
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	4628      	mov	r0, r5
 8008b78:	464b      	mov	r3, r9
 8008b7a:	910a      	str	r1, [sp, #40]	@ 0x28
 8008b7c:	f7ff fed4 	bl	8008928 <__cvt>
 8008b80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b82:	4680      	mov	r8, r0
 8008b84:	2947      	cmp	r1, #71	@ 0x47
 8008b86:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008b88:	d128      	bne.n	8008bdc <_printf_float+0x178>
 8008b8a:	1cc8      	adds	r0, r1, #3
 8008b8c:	db02      	blt.n	8008b94 <_printf_float+0x130>
 8008b8e:	6863      	ldr	r3, [r4, #4]
 8008b90:	4299      	cmp	r1, r3
 8008b92:	dd40      	ble.n	8008c16 <_printf_float+0x1b2>
 8008b94:	f1aa 0a02 	sub.w	sl, sl, #2
 8008b98:	fa5f fa8a 	uxtb.w	sl, sl
 8008b9c:	4652      	mov	r2, sl
 8008b9e:	3901      	subs	r1, #1
 8008ba0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ba4:	910d      	str	r1, [sp, #52]	@ 0x34
 8008ba6:	f7ff ff23 	bl	80089f0 <__exponent>
 8008baa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bac:	4681      	mov	r9, r0
 8008bae:	1813      	adds	r3, r2, r0
 8008bb0:	2a01      	cmp	r2, #1
 8008bb2:	6123      	str	r3, [r4, #16]
 8008bb4:	dc02      	bgt.n	8008bbc <_printf_float+0x158>
 8008bb6:	6822      	ldr	r2, [r4, #0]
 8008bb8:	07d2      	lsls	r2, r2, #31
 8008bba:	d501      	bpl.n	8008bc0 <_printf_float+0x15c>
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d09e      	beq.n	8008b06 <_printf_float+0xa2>
 8008bc8:	232d      	movs	r3, #45	@ 0x2d
 8008bca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bce:	e79a      	b.n	8008b06 <_printf_float+0xa2>
 8008bd0:	2947      	cmp	r1, #71	@ 0x47
 8008bd2:	d1bf      	bne.n	8008b54 <_printf_float+0xf0>
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1bd      	bne.n	8008b54 <_printf_float+0xf0>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e7ba      	b.n	8008b52 <_printf_float+0xee>
 8008bdc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008be0:	d9dc      	bls.n	8008b9c <_printf_float+0x138>
 8008be2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008be6:	d118      	bne.n	8008c1a <_printf_float+0x1b6>
 8008be8:	2900      	cmp	r1, #0
 8008bea:	6863      	ldr	r3, [r4, #4]
 8008bec:	dd0b      	ble.n	8008c06 <_printf_float+0x1a2>
 8008bee:	6121      	str	r1, [r4, #16]
 8008bf0:	b913      	cbnz	r3, 8008bf8 <_printf_float+0x194>
 8008bf2:	6822      	ldr	r2, [r4, #0]
 8008bf4:	07d0      	lsls	r0, r2, #31
 8008bf6:	d502      	bpl.n	8008bfe <_printf_float+0x19a>
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	440b      	add	r3, r1
 8008bfc:	6123      	str	r3, [r4, #16]
 8008bfe:	f04f 0900 	mov.w	r9, #0
 8008c02:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c04:	e7dc      	b.n	8008bc0 <_printf_float+0x15c>
 8008c06:	b913      	cbnz	r3, 8008c0e <_printf_float+0x1aa>
 8008c08:	6822      	ldr	r2, [r4, #0]
 8008c0a:	07d2      	lsls	r2, r2, #31
 8008c0c:	d501      	bpl.n	8008c12 <_printf_float+0x1ae>
 8008c0e:	3302      	adds	r3, #2
 8008c10:	e7f4      	b.n	8008bfc <_printf_float+0x198>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e7f2      	b.n	8008bfc <_printf_float+0x198>
 8008c16:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c1c:	4299      	cmp	r1, r3
 8008c1e:	db05      	blt.n	8008c2c <_printf_float+0x1c8>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	6121      	str	r1, [r4, #16]
 8008c24:	07d8      	lsls	r0, r3, #31
 8008c26:	d5ea      	bpl.n	8008bfe <_printf_float+0x19a>
 8008c28:	1c4b      	adds	r3, r1, #1
 8008c2a:	e7e7      	b.n	8008bfc <_printf_float+0x198>
 8008c2c:	2900      	cmp	r1, #0
 8008c2e:	bfcc      	ite	gt
 8008c30:	2201      	movgt	r2, #1
 8008c32:	f1c1 0202 	rsble	r2, r1, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	e7e0      	b.n	8008bfc <_printf_float+0x198>
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	055a      	lsls	r2, r3, #21
 8008c3e:	d407      	bmi.n	8008c50 <_printf_float+0x1ec>
 8008c40:	6923      	ldr	r3, [r4, #16]
 8008c42:	4642      	mov	r2, r8
 8008c44:	4631      	mov	r1, r6
 8008c46:	4628      	mov	r0, r5
 8008c48:	47b8      	blx	r7
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d12b      	bne.n	8008ca6 <_printf_float+0x242>
 8008c4e:	e764      	b.n	8008b1a <_printf_float+0xb6>
 8008c50:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c54:	f240 80dc 	bls.w	8008e10 <_printf_float+0x3ac>
 8008c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f7f7 fea2 	bl	80009a8 <__aeabi_dcmpeq>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d033      	beq.n	8008cd0 <_printf_float+0x26c>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	4a35      	ldr	r2, [pc, #212]	@ (8008d44 <_printf_float+0x2e0>)
 8008c70:	47b8      	blx	r7
 8008c72:	3001      	adds	r0, #1
 8008c74:	f43f af51 	beq.w	8008b1a <_printf_float+0xb6>
 8008c78:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008c7c:	4543      	cmp	r3, r8
 8008c7e:	db02      	blt.n	8008c86 <_printf_float+0x222>
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	07d8      	lsls	r0, r3, #31
 8008c84:	d50f      	bpl.n	8008ca6 <_printf_float+0x242>
 8008c86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c8a:	4631      	mov	r1, r6
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	47b8      	blx	r7
 8008c90:	3001      	adds	r0, #1
 8008c92:	f43f af42 	beq.w	8008b1a <_printf_float+0xb6>
 8008c96:	f04f 0900 	mov.w	r9, #0
 8008c9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c9e:	f104 0a1a 	add.w	sl, r4, #26
 8008ca2:	45c8      	cmp	r8, r9
 8008ca4:	dc09      	bgt.n	8008cba <_printf_float+0x256>
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	079b      	lsls	r3, r3, #30
 8008caa:	f100 8102 	bmi.w	8008eb2 <_printf_float+0x44e>
 8008cae:	68e0      	ldr	r0, [r4, #12]
 8008cb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cb2:	4298      	cmp	r0, r3
 8008cb4:	bfb8      	it	lt
 8008cb6:	4618      	movlt	r0, r3
 8008cb8:	e731      	b.n	8008b1e <_printf_float+0xba>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	4652      	mov	r2, sl
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	47b8      	blx	r7
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	f43f af28 	beq.w	8008b1a <_printf_float+0xb6>
 8008cca:	f109 0901 	add.w	r9, r9, #1
 8008cce:	e7e8      	b.n	8008ca2 <_printf_float+0x23e>
 8008cd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	dc38      	bgt.n	8008d48 <_printf_float+0x2e4>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4628      	mov	r0, r5
 8008cdc:	4a19      	ldr	r2, [pc, #100]	@ (8008d44 <_printf_float+0x2e0>)
 8008cde:	47b8      	blx	r7
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	f43f af1a 	beq.w	8008b1a <_printf_float+0xb6>
 8008ce6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008cea:	ea59 0303 	orrs.w	r3, r9, r3
 8008cee:	d102      	bne.n	8008cf6 <_printf_float+0x292>
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	07d9      	lsls	r1, r3, #31
 8008cf4:	d5d7      	bpl.n	8008ca6 <_printf_float+0x242>
 8008cf6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008cfa:	4631      	mov	r1, r6
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	47b8      	blx	r7
 8008d00:	3001      	adds	r0, #1
 8008d02:	f43f af0a 	beq.w	8008b1a <_printf_float+0xb6>
 8008d06:	f04f 0a00 	mov.w	sl, #0
 8008d0a:	f104 0b1a 	add.w	fp, r4, #26
 8008d0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d10:	425b      	negs	r3, r3
 8008d12:	4553      	cmp	r3, sl
 8008d14:	dc01      	bgt.n	8008d1a <_printf_float+0x2b6>
 8008d16:	464b      	mov	r3, r9
 8008d18:	e793      	b.n	8008c42 <_printf_float+0x1de>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	465a      	mov	r2, fp
 8008d1e:	4631      	mov	r1, r6
 8008d20:	4628      	mov	r0, r5
 8008d22:	47b8      	blx	r7
 8008d24:	3001      	adds	r0, #1
 8008d26:	f43f aef8 	beq.w	8008b1a <_printf_float+0xb6>
 8008d2a:	f10a 0a01 	add.w	sl, sl, #1
 8008d2e:	e7ee      	b.n	8008d0e <_printf_float+0x2aa>
 8008d30:	7fefffff 	.word	0x7fefffff
 8008d34:	0800c4a6 	.word	0x0800c4a6
 8008d38:	0800c4a2 	.word	0x0800c4a2
 8008d3c:	0800c4ae 	.word	0x0800c4ae
 8008d40:	0800c4aa 	.word	0x0800c4aa
 8008d44:	0800c4b2 	.word	0x0800c4b2
 8008d48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d4a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008d4e:	4553      	cmp	r3, sl
 8008d50:	bfa8      	it	ge
 8008d52:	4653      	movge	r3, sl
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	4699      	mov	r9, r3
 8008d58:	dc36      	bgt.n	8008dc8 <_printf_float+0x364>
 8008d5a:	f04f 0b00 	mov.w	fp, #0
 8008d5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d62:	f104 021a 	add.w	r2, r4, #26
 8008d66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d68:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d6a:	eba3 0309 	sub.w	r3, r3, r9
 8008d6e:	455b      	cmp	r3, fp
 8008d70:	dc31      	bgt.n	8008dd6 <_printf_float+0x372>
 8008d72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d74:	459a      	cmp	sl, r3
 8008d76:	dc3a      	bgt.n	8008dee <_printf_float+0x38a>
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	07da      	lsls	r2, r3, #31
 8008d7c:	d437      	bmi.n	8008dee <_printf_float+0x38a>
 8008d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d80:	ebaa 0903 	sub.w	r9, sl, r3
 8008d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d86:	ebaa 0303 	sub.w	r3, sl, r3
 8008d8a:	4599      	cmp	r9, r3
 8008d8c:	bfa8      	it	ge
 8008d8e:	4699      	movge	r9, r3
 8008d90:	f1b9 0f00 	cmp.w	r9, #0
 8008d94:	dc33      	bgt.n	8008dfe <_printf_float+0x39a>
 8008d96:	f04f 0800 	mov.w	r8, #0
 8008d9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d9e:	f104 0b1a 	add.w	fp, r4, #26
 8008da2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008da4:	ebaa 0303 	sub.w	r3, sl, r3
 8008da8:	eba3 0309 	sub.w	r3, r3, r9
 8008dac:	4543      	cmp	r3, r8
 8008dae:	f77f af7a 	ble.w	8008ca6 <_printf_float+0x242>
 8008db2:	2301      	movs	r3, #1
 8008db4:	465a      	mov	r2, fp
 8008db6:	4631      	mov	r1, r6
 8008db8:	4628      	mov	r0, r5
 8008dba:	47b8      	blx	r7
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	f43f aeac 	beq.w	8008b1a <_printf_float+0xb6>
 8008dc2:	f108 0801 	add.w	r8, r8, #1
 8008dc6:	e7ec      	b.n	8008da2 <_printf_float+0x33e>
 8008dc8:	4642      	mov	r2, r8
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b8      	blx	r7
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d1c2      	bne.n	8008d5a <_printf_float+0x2f6>
 8008dd4:	e6a1      	b.n	8008b1a <_printf_float+0xb6>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4631      	mov	r1, r6
 8008dda:	4628      	mov	r0, r5
 8008ddc:	920a      	str	r2, [sp, #40]	@ 0x28
 8008dde:	47b8      	blx	r7
 8008de0:	3001      	adds	r0, #1
 8008de2:	f43f ae9a 	beq.w	8008b1a <_printf_float+0xb6>
 8008de6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008de8:	f10b 0b01 	add.w	fp, fp, #1
 8008dec:	e7bb      	b.n	8008d66 <_printf_float+0x302>
 8008dee:	4631      	mov	r1, r6
 8008df0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008df4:	4628      	mov	r0, r5
 8008df6:	47b8      	blx	r7
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d1c0      	bne.n	8008d7e <_printf_float+0x31a>
 8008dfc:	e68d      	b.n	8008b1a <_printf_float+0xb6>
 8008dfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e00:	464b      	mov	r3, r9
 8008e02:	4631      	mov	r1, r6
 8008e04:	4628      	mov	r0, r5
 8008e06:	4442      	add	r2, r8
 8008e08:	47b8      	blx	r7
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	d1c3      	bne.n	8008d96 <_printf_float+0x332>
 8008e0e:	e684      	b.n	8008b1a <_printf_float+0xb6>
 8008e10:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008e14:	f1ba 0f01 	cmp.w	sl, #1
 8008e18:	dc01      	bgt.n	8008e1e <_printf_float+0x3ba>
 8008e1a:	07db      	lsls	r3, r3, #31
 8008e1c:	d536      	bpl.n	8008e8c <_printf_float+0x428>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	4642      	mov	r2, r8
 8008e22:	4631      	mov	r1, r6
 8008e24:	4628      	mov	r0, r5
 8008e26:	47b8      	blx	r7
 8008e28:	3001      	adds	r0, #1
 8008e2a:	f43f ae76 	beq.w	8008b1a <_printf_float+0xb6>
 8008e2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008e32:	4631      	mov	r1, r6
 8008e34:	4628      	mov	r0, r5
 8008e36:	47b8      	blx	r7
 8008e38:	3001      	adds	r0, #1
 8008e3a:	f43f ae6e 	beq.w	8008b1a <_printf_float+0xb6>
 8008e3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e42:	2200      	movs	r2, #0
 8008e44:	2300      	movs	r3, #0
 8008e46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e4a:	f7f7 fdad 	bl	80009a8 <__aeabi_dcmpeq>
 8008e4e:	b9c0      	cbnz	r0, 8008e82 <_printf_float+0x41e>
 8008e50:	4653      	mov	r3, sl
 8008e52:	f108 0201 	add.w	r2, r8, #1
 8008e56:	4631      	mov	r1, r6
 8008e58:	4628      	mov	r0, r5
 8008e5a:	47b8      	blx	r7
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d10c      	bne.n	8008e7a <_printf_float+0x416>
 8008e60:	e65b      	b.n	8008b1a <_printf_float+0xb6>
 8008e62:	2301      	movs	r3, #1
 8008e64:	465a      	mov	r2, fp
 8008e66:	4631      	mov	r1, r6
 8008e68:	4628      	mov	r0, r5
 8008e6a:	47b8      	blx	r7
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	f43f ae54 	beq.w	8008b1a <_printf_float+0xb6>
 8008e72:	f108 0801 	add.w	r8, r8, #1
 8008e76:	45d0      	cmp	r8, sl
 8008e78:	dbf3      	blt.n	8008e62 <_printf_float+0x3fe>
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008e80:	e6e0      	b.n	8008c44 <_printf_float+0x1e0>
 8008e82:	f04f 0800 	mov.w	r8, #0
 8008e86:	f104 0b1a 	add.w	fp, r4, #26
 8008e8a:	e7f4      	b.n	8008e76 <_printf_float+0x412>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	4642      	mov	r2, r8
 8008e90:	e7e1      	b.n	8008e56 <_printf_float+0x3f2>
 8008e92:	2301      	movs	r3, #1
 8008e94:	464a      	mov	r2, r9
 8008e96:	4631      	mov	r1, r6
 8008e98:	4628      	mov	r0, r5
 8008e9a:	47b8      	blx	r7
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	f43f ae3c 	beq.w	8008b1a <_printf_float+0xb6>
 8008ea2:	f108 0801 	add.w	r8, r8, #1
 8008ea6:	68e3      	ldr	r3, [r4, #12]
 8008ea8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008eaa:	1a5b      	subs	r3, r3, r1
 8008eac:	4543      	cmp	r3, r8
 8008eae:	dcf0      	bgt.n	8008e92 <_printf_float+0x42e>
 8008eb0:	e6fd      	b.n	8008cae <_printf_float+0x24a>
 8008eb2:	f04f 0800 	mov.w	r8, #0
 8008eb6:	f104 0919 	add.w	r9, r4, #25
 8008eba:	e7f4      	b.n	8008ea6 <_printf_float+0x442>

08008ebc <_printf_common>:
 8008ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec0:	4616      	mov	r6, r2
 8008ec2:	4698      	mov	r8, r3
 8008ec4:	688a      	ldr	r2, [r1, #8]
 8008ec6:	690b      	ldr	r3, [r1, #16]
 8008ec8:	4607      	mov	r7, r0
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	bfb8      	it	lt
 8008ece:	4613      	movlt	r3, r2
 8008ed0:	6033      	str	r3, [r6, #0]
 8008ed2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008edc:	b10a      	cbz	r2, 8008ee2 <_printf_common+0x26>
 8008ede:	3301      	adds	r3, #1
 8008ee0:	6033      	str	r3, [r6, #0]
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	0699      	lsls	r1, r3, #26
 8008ee6:	bf42      	ittt	mi
 8008ee8:	6833      	ldrmi	r3, [r6, #0]
 8008eea:	3302      	addmi	r3, #2
 8008eec:	6033      	strmi	r3, [r6, #0]
 8008eee:	6825      	ldr	r5, [r4, #0]
 8008ef0:	f015 0506 	ands.w	r5, r5, #6
 8008ef4:	d106      	bne.n	8008f04 <_printf_common+0x48>
 8008ef6:	f104 0a19 	add.w	sl, r4, #25
 8008efa:	68e3      	ldr	r3, [r4, #12]
 8008efc:	6832      	ldr	r2, [r6, #0]
 8008efe:	1a9b      	subs	r3, r3, r2
 8008f00:	42ab      	cmp	r3, r5
 8008f02:	dc2b      	bgt.n	8008f5c <_printf_common+0xa0>
 8008f04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f08:	6822      	ldr	r2, [r4, #0]
 8008f0a:	3b00      	subs	r3, #0
 8008f0c:	bf18      	it	ne
 8008f0e:	2301      	movne	r3, #1
 8008f10:	0692      	lsls	r2, r2, #26
 8008f12:	d430      	bmi.n	8008f76 <_printf_common+0xba>
 8008f14:	4641      	mov	r1, r8
 8008f16:	4638      	mov	r0, r7
 8008f18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f1c:	47c8      	blx	r9
 8008f1e:	3001      	adds	r0, #1
 8008f20:	d023      	beq.n	8008f6a <_printf_common+0xae>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	6922      	ldr	r2, [r4, #16]
 8008f26:	f003 0306 	and.w	r3, r3, #6
 8008f2a:	2b04      	cmp	r3, #4
 8008f2c:	bf14      	ite	ne
 8008f2e:	2500      	movne	r5, #0
 8008f30:	6833      	ldreq	r3, [r6, #0]
 8008f32:	f04f 0600 	mov.w	r6, #0
 8008f36:	bf08      	it	eq
 8008f38:	68e5      	ldreq	r5, [r4, #12]
 8008f3a:	f104 041a 	add.w	r4, r4, #26
 8008f3e:	bf08      	it	eq
 8008f40:	1aed      	subeq	r5, r5, r3
 8008f42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008f46:	bf08      	it	eq
 8008f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	bfc4      	itt	gt
 8008f50:	1a9b      	subgt	r3, r3, r2
 8008f52:	18ed      	addgt	r5, r5, r3
 8008f54:	42b5      	cmp	r5, r6
 8008f56:	d11a      	bne.n	8008f8e <_printf_common+0xd2>
 8008f58:	2000      	movs	r0, #0
 8008f5a:	e008      	b.n	8008f6e <_printf_common+0xb2>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	4652      	mov	r2, sl
 8008f60:	4641      	mov	r1, r8
 8008f62:	4638      	mov	r0, r7
 8008f64:	47c8      	blx	r9
 8008f66:	3001      	adds	r0, #1
 8008f68:	d103      	bne.n	8008f72 <_printf_common+0xb6>
 8008f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f72:	3501      	adds	r5, #1
 8008f74:	e7c1      	b.n	8008efa <_printf_common+0x3e>
 8008f76:	2030      	movs	r0, #48	@ 0x30
 8008f78:	18e1      	adds	r1, r4, r3
 8008f7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f84:	4422      	add	r2, r4
 8008f86:	3302      	adds	r3, #2
 8008f88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f8c:	e7c2      	b.n	8008f14 <_printf_common+0x58>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	4622      	mov	r2, r4
 8008f92:	4641      	mov	r1, r8
 8008f94:	4638      	mov	r0, r7
 8008f96:	47c8      	blx	r9
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d0e6      	beq.n	8008f6a <_printf_common+0xae>
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	e7d9      	b.n	8008f54 <_printf_common+0x98>

08008fa0 <_printf_i>:
 8008fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	7e0f      	ldrb	r7, [r1, #24]
 8008fa6:	4691      	mov	r9, r2
 8008fa8:	2f78      	cmp	r7, #120	@ 0x78
 8008faa:	4680      	mov	r8, r0
 8008fac:	460c      	mov	r4, r1
 8008fae:	469a      	mov	sl, r3
 8008fb0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fb6:	d807      	bhi.n	8008fc8 <_printf_i+0x28>
 8008fb8:	2f62      	cmp	r7, #98	@ 0x62
 8008fba:	d80a      	bhi.n	8008fd2 <_printf_i+0x32>
 8008fbc:	2f00      	cmp	r7, #0
 8008fbe:	f000 80d1 	beq.w	8009164 <_printf_i+0x1c4>
 8008fc2:	2f58      	cmp	r7, #88	@ 0x58
 8008fc4:	f000 80b8 	beq.w	8009138 <_printf_i+0x198>
 8008fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fd0:	e03a      	b.n	8009048 <_printf_i+0xa8>
 8008fd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fd6:	2b15      	cmp	r3, #21
 8008fd8:	d8f6      	bhi.n	8008fc8 <_printf_i+0x28>
 8008fda:	a101      	add	r1, pc, #4	@ (adr r1, 8008fe0 <_printf_i+0x40>)
 8008fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fe0:	08009039 	.word	0x08009039
 8008fe4:	0800904d 	.word	0x0800904d
 8008fe8:	08008fc9 	.word	0x08008fc9
 8008fec:	08008fc9 	.word	0x08008fc9
 8008ff0:	08008fc9 	.word	0x08008fc9
 8008ff4:	08008fc9 	.word	0x08008fc9
 8008ff8:	0800904d 	.word	0x0800904d
 8008ffc:	08008fc9 	.word	0x08008fc9
 8009000:	08008fc9 	.word	0x08008fc9
 8009004:	08008fc9 	.word	0x08008fc9
 8009008:	08008fc9 	.word	0x08008fc9
 800900c:	0800914b 	.word	0x0800914b
 8009010:	08009077 	.word	0x08009077
 8009014:	08009105 	.word	0x08009105
 8009018:	08008fc9 	.word	0x08008fc9
 800901c:	08008fc9 	.word	0x08008fc9
 8009020:	0800916d 	.word	0x0800916d
 8009024:	08008fc9 	.word	0x08008fc9
 8009028:	08009077 	.word	0x08009077
 800902c:	08008fc9 	.word	0x08008fc9
 8009030:	08008fc9 	.word	0x08008fc9
 8009034:	0800910d 	.word	0x0800910d
 8009038:	6833      	ldr	r3, [r6, #0]
 800903a:	1d1a      	adds	r2, r3, #4
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6032      	str	r2, [r6, #0]
 8009040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009044:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009048:	2301      	movs	r3, #1
 800904a:	e09c      	b.n	8009186 <_printf_i+0x1e6>
 800904c:	6833      	ldr	r3, [r6, #0]
 800904e:	6820      	ldr	r0, [r4, #0]
 8009050:	1d19      	adds	r1, r3, #4
 8009052:	6031      	str	r1, [r6, #0]
 8009054:	0606      	lsls	r6, r0, #24
 8009056:	d501      	bpl.n	800905c <_printf_i+0xbc>
 8009058:	681d      	ldr	r5, [r3, #0]
 800905a:	e003      	b.n	8009064 <_printf_i+0xc4>
 800905c:	0645      	lsls	r5, r0, #25
 800905e:	d5fb      	bpl.n	8009058 <_printf_i+0xb8>
 8009060:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009064:	2d00      	cmp	r5, #0
 8009066:	da03      	bge.n	8009070 <_printf_i+0xd0>
 8009068:	232d      	movs	r3, #45	@ 0x2d
 800906a:	426d      	negs	r5, r5
 800906c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009070:	230a      	movs	r3, #10
 8009072:	4858      	ldr	r0, [pc, #352]	@ (80091d4 <_printf_i+0x234>)
 8009074:	e011      	b.n	800909a <_printf_i+0xfa>
 8009076:	6821      	ldr	r1, [r4, #0]
 8009078:	6833      	ldr	r3, [r6, #0]
 800907a:	0608      	lsls	r0, r1, #24
 800907c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009080:	d402      	bmi.n	8009088 <_printf_i+0xe8>
 8009082:	0649      	lsls	r1, r1, #25
 8009084:	bf48      	it	mi
 8009086:	b2ad      	uxthmi	r5, r5
 8009088:	2f6f      	cmp	r7, #111	@ 0x6f
 800908a:	6033      	str	r3, [r6, #0]
 800908c:	bf14      	ite	ne
 800908e:	230a      	movne	r3, #10
 8009090:	2308      	moveq	r3, #8
 8009092:	4850      	ldr	r0, [pc, #320]	@ (80091d4 <_printf_i+0x234>)
 8009094:	2100      	movs	r1, #0
 8009096:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800909a:	6866      	ldr	r6, [r4, #4]
 800909c:	2e00      	cmp	r6, #0
 800909e:	60a6      	str	r6, [r4, #8]
 80090a0:	db05      	blt.n	80090ae <_printf_i+0x10e>
 80090a2:	6821      	ldr	r1, [r4, #0]
 80090a4:	432e      	orrs	r6, r5
 80090a6:	f021 0104 	bic.w	r1, r1, #4
 80090aa:	6021      	str	r1, [r4, #0]
 80090ac:	d04b      	beq.n	8009146 <_printf_i+0x1a6>
 80090ae:	4616      	mov	r6, r2
 80090b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80090b4:	fb03 5711 	mls	r7, r3, r1, r5
 80090b8:	5dc7      	ldrb	r7, [r0, r7]
 80090ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090be:	462f      	mov	r7, r5
 80090c0:	42bb      	cmp	r3, r7
 80090c2:	460d      	mov	r5, r1
 80090c4:	d9f4      	bls.n	80090b0 <_printf_i+0x110>
 80090c6:	2b08      	cmp	r3, #8
 80090c8:	d10b      	bne.n	80090e2 <_printf_i+0x142>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	07df      	lsls	r7, r3, #31
 80090ce:	d508      	bpl.n	80090e2 <_printf_i+0x142>
 80090d0:	6923      	ldr	r3, [r4, #16]
 80090d2:	6861      	ldr	r1, [r4, #4]
 80090d4:	4299      	cmp	r1, r3
 80090d6:	bfde      	ittt	le
 80090d8:	2330      	movle	r3, #48	@ 0x30
 80090da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090e2:	1b92      	subs	r2, r2, r6
 80090e4:	6122      	str	r2, [r4, #16]
 80090e6:	464b      	mov	r3, r9
 80090e8:	4621      	mov	r1, r4
 80090ea:	4640      	mov	r0, r8
 80090ec:	f8cd a000 	str.w	sl, [sp]
 80090f0:	aa03      	add	r2, sp, #12
 80090f2:	f7ff fee3 	bl	8008ebc <_printf_common>
 80090f6:	3001      	adds	r0, #1
 80090f8:	d14a      	bne.n	8009190 <_printf_i+0x1f0>
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295
 80090fe:	b004      	add	sp, #16
 8009100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	f043 0320 	orr.w	r3, r3, #32
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	2778      	movs	r7, #120	@ 0x78
 800910e:	4832      	ldr	r0, [pc, #200]	@ (80091d8 <_printf_i+0x238>)
 8009110:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	6831      	ldr	r1, [r6, #0]
 8009118:	061f      	lsls	r7, r3, #24
 800911a:	f851 5b04 	ldr.w	r5, [r1], #4
 800911e:	d402      	bmi.n	8009126 <_printf_i+0x186>
 8009120:	065f      	lsls	r7, r3, #25
 8009122:	bf48      	it	mi
 8009124:	b2ad      	uxthmi	r5, r5
 8009126:	6031      	str	r1, [r6, #0]
 8009128:	07d9      	lsls	r1, r3, #31
 800912a:	bf44      	itt	mi
 800912c:	f043 0320 	orrmi.w	r3, r3, #32
 8009130:	6023      	strmi	r3, [r4, #0]
 8009132:	b11d      	cbz	r5, 800913c <_printf_i+0x19c>
 8009134:	2310      	movs	r3, #16
 8009136:	e7ad      	b.n	8009094 <_printf_i+0xf4>
 8009138:	4826      	ldr	r0, [pc, #152]	@ (80091d4 <_printf_i+0x234>)
 800913a:	e7e9      	b.n	8009110 <_printf_i+0x170>
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	f023 0320 	bic.w	r3, r3, #32
 8009142:	6023      	str	r3, [r4, #0]
 8009144:	e7f6      	b.n	8009134 <_printf_i+0x194>
 8009146:	4616      	mov	r6, r2
 8009148:	e7bd      	b.n	80090c6 <_printf_i+0x126>
 800914a:	6833      	ldr	r3, [r6, #0]
 800914c:	6825      	ldr	r5, [r4, #0]
 800914e:	1d18      	adds	r0, r3, #4
 8009150:	6961      	ldr	r1, [r4, #20]
 8009152:	6030      	str	r0, [r6, #0]
 8009154:	062e      	lsls	r6, r5, #24
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	d501      	bpl.n	800915e <_printf_i+0x1be>
 800915a:	6019      	str	r1, [r3, #0]
 800915c:	e002      	b.n	8009164 <_printf_i+0x1c4>
 800915e:	0668      	lsls	r0, r5, #25
 8009160:	d5fb      	bpl.n	800915a <_printf_i+0x1ba>
 8009162:	8019      	strh	r1, [r3, #0]
 8009164:	2300      	movs	r3, #0
 8009166:	4616      	mov	r6, r2
 8009168:	6123      	str	r3, [r4, #16]
 800916a:	e7bc      	b.n	80090e6 <_printf_i+0x146>
 800916c:	6833      	ldr	r3, [r6, #0]
 800916e:	2100      	movs	r1, #0
 8009170:	1d1a      	adds	r2, r3, #4
 8009172:	6032      	str	r2, [r6, #0]
 8009174:	681e      	ldr	r6, [r3, #0]
 8009176:	6862      	ldr	r2, [r4, #4]
 8009178:	4630      	mov	r0, r6
 800917a:	f000 f9e8 	bl	800954e <memchr>
 800917e:	b108      	cbz	r0, 8009184 <_printf_i+0x1e4>
 8009180:	1b80      	subs	r0, r0, r6
 8009182:	6060      	str	r0, [r4, #4]
 8009184:	6863      	ldr	r3, [r4, #4]
 8009186:	6123      	str	r3, [r4, #16]
 8009188:	2300      	movs	r3, #0
 800918a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800918e:	e7aa      	b.n	80090e6 <_printf_i+0x146>
 8009190:	4632      	mov	r2, r6
 8009192:	4649      	mov	r1, r9
 8009194:	4640      	mov	r0, r8
 8009196:	6923      	ldr	r3, [r4, #16]
 8009198:	47d0      	blx	sl
 800919a:	3001      	adds	r0, #1
 800919c:	d0ad      	beq.n	80090fa <_printf_i+0x15a>
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	079b      	lsls	r3, r3, #30
 80091a2:	d413      	bmi.n	80091cc <_printf_i+0x22c>
 80091a4:	68e0      	ldr	r0, [r4, #12]
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	4298      	cmp	r0, r3
 80091aa:	bfb8      	it	lt
 80091ac:	4618      	movlt	r0, r3
 80091ae:	e7a6      	b.n	80090fe <_printf_i+0x15e>
 80091b0:	2301      	movs	r3, #1
 80091b2:	4632      	mov	r2, r6
 80091b4:	4649      	mov	r1, r9
 80091b6:	4640      	mov	r0, r8
 80091b8:	47d0      	blx	sl
 80091ba:	3001      	adds	r0, #1
 80091bc:	d09d      	beq.n	80090fa <_printf_i+0x15a>
 80091be:	3501      	adds	r5, #1
 80091c0:	68e3      	ldr	r3, [r4, #12]
 80091c2:	9903      	ldr	r1, [sp, #12]
 80091c4:	1a5b      	subs	r3, r3, r1
 80091c6:	42ab      	cmp	r3, r5
 80091c8:	dcf2      	bgt.n	80091b0 <_printf_i+0x210>
 80091ca:	e7eb      	b.n	80091a4 <_printf_i+0x204>
 80091cc:	2500      	movs	r5, #0
 80091ce:	f104 0619 	add.w	r6, r4, #25
 80091d2:	e7f5      	b.n	80091c0 <_printf_i+0x220>
 80091d4:	0800c4b4 	.word	0x0800c4b4
 80091d8:	0800c4c5 	.word	0x0800c4c5

080091dc <std>:
 80091dc:	2300      	movs	r3, #0
 80091de:	b510      	push	{r4, lr}
 80091e0:	4604      	mov	r4, r0
 80091e2:	e9c0 3300 	strd	r3, r3, [r0]
 80091e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091ea:	6083      	str	r3, [r0, #8]
 80091ec:	8181      	strh	r1, [r0, #12]
 80091ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80091f0:	81c2      	strh	r2, [r0, #14]
 80091f2:	6183      	str	r3, [r0, #24]
 80091f4:	4619      	mov	r1, r3
 80091f6:	2208      	movs	r2, #8
 80091f8:	305c      	adds	r0, #92	@ 0x5c
 80091fa:	f000 f916 	bl	800942a <memset>
 80091fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009234 <std+0x58>)
 8009200:	6224      	str	r4, [r4, #32]
 8009202:	6263      	str	r3, [r4, #36]	@ 0x24
 8009204:	4b0c      	ldr	r3, [pc, #48]	@ (8009238 <std+0x5c>)
 8009206:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009208:	4b0c      	ldr	r3, [pc, #48]	@ (800923c <std+0x60>)
 800920a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800920c:	4b0c      	ldr	r3, [pc, #48]	@ (8009240 <std+0x64>)
 800920e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009210:	4b0c      	ldr	r3, [pc, #48]	@ (8009244 <std+0x68>)
 8009212:	429c      	cmp	r4, r3
 8009214:	d006      	beq.n	8009224 <std+0x48>
 8009216:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800921a:	4294      	cmp	r4, r2
 800921c:	d002      	beq.n	8009224 <std+0x48>
 800921e:	33d0      	adds	r3, #208	@ 0xd0
 8009220:	429c      	cmp	r4, r3
 8009222:	d105      	bne.n	8009230 <std+0x54>
 8009224:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800922c:	f000 b98c 	b.w	8009548 <__retarget_lock_init_recursive>
 8009230:	bd10      	pop	{r4, pc}
 8009232:	bf00      	nop
 8009234:	080093a5 	.word	0x080093a5
 8009238:	080093c7 	.word	0x080093c7
 800923c:	080093ff 	.word	0x080093ff
 8009240:	08009423 	.word	0x08009423
 8009244:	2000074c 	.word	0x2000074c

08009248 <stdio_exit_handler>:
 8009248:	4a02      	ldr	r2, [pc, #8]	@ (8009254 <stdio_exit_handler+0xc>)
 800924a:	4903      	ldr	r1, [pc, #12]	@ (8009258 <stdio_exit_handler+0x10>)
 800924c:	4803      	ldr	r0, [pc, #12]	@ (800925c <stdio_exit_handler+0x14>)
 800924e:	f000 b869 	b.w	8009324 <_fwalk_sglue>
 8009252:	bf00      	nop
 8009254:	2000000c 	.word	0x2000000c
 8009258:	0800aee1 	.word	0x0800aee1
 800925c:	2000001c 	.word	0x2000001c

08009260 <cleanup_stdio>:
 8009260:	6841      	ldr	r1, [r0, #4]
 8009262:	4b0c      	ldr	r3, [pc, #48]	@ (8009294 <cleanup_stdio+0x34>)
 8009264:	b510      	push	{r4, lr}
 8009266:	4299      	cmp	r1, r3
 8009268:	4604      	mov	r4, r0
 800926a:	d001      	beq.n	8009270 <cleanup_stdio+0x10>
 800926c:	f001 fe38 	bl	800aee0 <_fflush_r>
 8009270:	68a1      	ldr	r1, [r4, #8]
 8009272:	4b09      	ldr	r3, [pc, #36]	@ (8009298 <cleanup_stdio+0x38>)
 8009274:	4299      	cmp	r1, r3
 8009276:	d002      	beq.n	800927e <cleanup_stdio+0x1e>
 8009278:	4620      	mov	r0, r4
 800927a:	f001 fe31 	bl	800aee0 <_fflush_r>
 800927e:	68e1      	ldr	r1, [r4, #12]
 8009280:	4b06      	ldr	r3, [pc, #24]	@ (800929c <cleanup_stdio+0x3c>)
 8009282:	4299      	cmp	r1, r3
 8009284:	d004      	beq.n	8009290 <cleanup_stdio+0x30>
 8009286:	4620      	mov	r0, r4
 8009288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800928c:	f001 be28 	b.w	800aee0 <_fflush_r>
 8009290:	bd10      	pop	{r4, pc}
 8009292:	bf00      	nop
 8009294:	2000074c 	.word	0x2000074c
 8009298:	200007b4 	.word	0x200007b4
 800929c:	2000081c 	.word	0x2000081c

080092a0 <global_stdio_init.part.0>:
 80092a0:	b510      	push	{r4, lr}
 80092a2:	4b0b      	ldr	r3, [pc, #44]	@ (80092d0 <global_stdio_init.part.0+0x30>)
 80092a4:	4c0b      	ldr	r4, [pc, #44]	@ (80092d4 <global_stdio_init.part.0+0x34>)
 80092a6:	4a0c      	ldr	r2, [pc, #48]	@ (80092d8 <global_stdio_init.part.0+0x38>)
 80092a8:	4620      	mov	r0, r4
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	2104      	movs	r1, #4
 80092ae:	2200      	movs	r2, #0
 80092b0:	f7ff ff94 	bl	80091dc <std>
 80092b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092b8:	2201      	movs	r2, #1
 80092ba:	2109      	movs	r1, #9
 80092bc:	f7ff ff8e 	bl	80091dc <std>
 80092c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092c4:	2202      	movs	r2, #2
 80092c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092ca:	2112      	movs	r1, #18
 80092cc:	f7ff bf86 	b.w	80091dc <std>
 80092d0:	20000884 	.word	0x20000884
 80092d4:	2000074c 	.word	0x2000074c
 80092d8:	08009249 	.word	0x08009249

080092dc <__sfp_lock_acquire>:
 80092dc:	4801      	ldr	r0, [pc, #4]	@ (80092e4 <__sfp_lock_acquire+0x8>)
 80092de:	f000 b934 	b.w	800954a <__retarget_lock_acquire_recursive>
 80092e2:	bf00      	nop
 80092e4:	2000088d 	.word	0x2000088d

080092e8 <__sfp_lock_release>:
 80092e8:	4801      	ldr	r0, [pc, #4]	@ (80092f0 <__sfp_lock_release+0x8>)
 80092ea:	f000 b92f 	b.w	800954c <__retarget_lock_release_recursive>
 80092ee:	bf00      	nop
 80092f0:	2000088d 	.word	0x2000088d

080092f4 <__sinit>:
 80092f4:	b510      	push	{r4, lr}
 80092f6:	4604      	mov	r4, r0
 80092f8:	f7ff fff0 	bl	80092dc <__sfp_lock_acquire>
 80092fc:	6a23      	ldr	r3, [r4, #32]
 80092fe:	b11b      	cbz	r3, 8009308 <__sinit+0x14>
 8009300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009304:	f7ff bff0 	b.w	80092e8 <__sfp_lock_release>
 8009308:	4b04      	ldr	r3, [pc, #16]	@ (800931c <__sinit+0x28>)
 800930a:	6223      	str	r3, [r4, #32]
 800930c:	4b04      	ldr	r3, [pc, #16]	@ (8009320 <__sinit+0x2c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1f5      	bne.n	8009300 <__sinit+0xc>
 8009314:	f7ff ffc4 	bl	80092a0 <global_stdio_init.part.0>
 8009318:	e7f2      	b.n	8009300 <__sinit+0xc>
 800931a:	bf00      	nop
 800931c:	08009261 	.word	0x08009261
 8009320:	20000884 	.word	0x20000884

08009324 <_fwalk_sglue>:
 8009324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009328:	4607      	mov	r7, r0
 800932a:	4688      	mov	r8, r1
 800932c:	4614      	mov	r4, r2
 800932e:	2600      	movs	r6, #0
 8009330:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009334:	f1b9 0901 	subs.w	r9, r9, #1
 8009338:	d505      	bpl.n	8009346 <_fwalk_sglue+0x22>
 800933a:	6824      	ldr	r4, [r4, #0]
 800933c:	2c00      	cmp	r4, #0
 800933e:	d1f7      	bne.n	8009330 <_fwalk_sglue+0xc>
 8009340:	4630      	mov	r0, r6
 8009342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009346:	89ab      	ldrh	r3, [r5, #12]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d907      	bls.n	800935c <_fwalk_sglue+0x38>
 800934c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009350:	3301      	adds	r3, #1
 8009352:	d003      	beq.n	800935c <_fwalk_sglue+0x38>
 8009354:	4629      	mov	r1, r5
 8009356:	4638      	mov	r0, r7
 8009358:	47c0      	blx	r8
 800935a:	4306      	orrs	r6, r0
 800935c:	3568      	adds	r5, #104	@ 0x68
 800935e:	e7e9      	b.n	8009334 <_fwalk_sglue+0x10>

08009360 <siprintf>:
 8009360:	b40e      	push	{r1, r2, r3}
 8009362:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009366:	b510      	push	{r4, lr}
 8009368:	2400      	movs	r4, #0
 800936a:	b09d      	sub	sp, #116	@ 0x74
 800936c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800936e:	9002      	str	r0, [sp, #8]
 8009370:	9006      	str	r0, [sp, #24]
 8009372:	9107      	str	r1, [sp, #28]
 8009374:	9104      	str	r1, [sp, #16]
 8009376:	4809      	ldr	r0, [pc, #36]	@ (800939c <siprintf+0x3c>)
 8009378:	4909      	ldr	r1, [pc, #36]	@ (80093a0 <siprintf+0x40>)
 800937a:	f853 2b04 	ldr.w	r2, [r3], #4
 800937e:	9105      	str	r1, [sp, #20]
 8009380:	6800      	ldr	r0, [r0, #0]
 8009382:	a902      	add	r1, sp, #8
 8009384:	9301      	str	r3, [sp, #4]
 8009386:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009388:	f001 fc2e 	bl	800abe8 <_svfiprintf_r>
 800938c:	9b02      	ldr	r3, [sp, #8]
 800938e:	701c      	strb	r4, [r3, #0]
 8009390:	b01d      	add	sp, #116	@ 0x74
 8009392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009396:	b003      	add	sp, #12
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20000018 	.word	0x20000018
 80093a0:	ffff0208 	.word	0xffff0208

080093a4 <__sread>:
 80093a4:	b510      	push	{r4, lr}
 80093a6:	460c      	mov	r4, r1
 80093a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ac:	f000 f87e 	bl	80094ac <_read_r>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	bfab      	itete	ge
 80093b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80093b6:	89a3      	ldrhlt	r3, [r4, #12]
 80093b8:	181b      	addge	r3, r3, r0
 80093ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80093be:	bfac      	ite	ge
 80093c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80093c2:	81a3      	strhlt	r3, [r4, #12]
 80093c4:	bd10      	pop	{r4, pc}

080093c6 <__swrite>:
 80093c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ca:	461f      	mov	r7, r3
 80093cc:	898b      	ldrh	r3, [r1, #12]
 80093ce:	4605      	mov	r5, r0
 80093d0:	05db      	lsls	r3, r3, #23
 80093d2:	460c      	mov	r4, r1
 80093d4:	4616      	mov	r6, r2
 80093d6:	d505      	bpl.n	80093e4 <__swrite+0x1e>
 80093d8:	2302      	movs	r3, #2
 80093da:	2200      	movs	r2, #0
 80093dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e0:	f000 f852 	bl	8009488 <_lseek_r>
 80093e4:	89a3      	ldrh	r3, [r4, #12]
 80093e6:	4632      	mov	r2, r6
 80093e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	4628      	mov	r0, r5
 80093f0:	463b      	mov	r3, r7
 80093f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093fa:	f000 b869 	b.w	80094d0 <_write_r>

080093fe <__sseek>:
 80093fe:	b510      	push	{r4, lr}
 8009400:	460c      	mov	r4, r1
 8009402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009406:	f000 f83f 	bl	8009488 <_lseek_r>
 800940a:	1c43      	adds	r3, r0, #1
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	bf15      	itete	ne
 8009410:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009412:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009416:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800941a:	81a3      	strheq	r3, [r4, #12]
 800941c:	bf18      	it	ne
 800941e:	81a3      	strhne	r3, [r4, #12]
 8009420:	bd10      	pop	{r4, pc}

08009422 <__sclose>:
 8009422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009426:	f000 b81f 	b.w	8009468 <_close_r>

0800942a <memset>:
 800942a:	4603      	mov	r3, r0
 800942c:	4402      	add	r2, r0
 800942e:	4293      	cmp	r3, r2
 8009430:	d100      	bne.n	8009434 <memset+0xa>
 8009432:	4770      	bx	lr
 8009434:	f803 1b01 	strb.w	r1, [r3], #1
 8009438:	e7f9      	b.n	800942e <memset+0x4>

0800943a <strncmp>:
 800943a:	b510      	push	{r4, lr}
 800943c:	b16a      	cbz	r2, 800945a <strncmp+0x20>
 800943e:	3901      	subs	r1, #1
 8009440:	1884      	adds	r4, r0, r2
 8009442:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009446:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800944a:	429a      	cmp	r2, r3
 800944c:	d103      	bne.n	8009456 <strncmp+0x1c>
 800944e:	42a0      	cmp	r0, r4
 8009450:	d001      	beq.n	8009456 <strncmp+0x1c>
 8009452:	2a00      	cmp	r2, #0
 8009454:	d1f5      	bne.n	8009442 <strncmp+0x8>
 8009456:	1ad0      	subs	r0, r2, r3
 8009458:	bd10      	pop	{r4, pc}
 800945a:	4610      	mov	r0, r2
 800945c:	e7fc      	b.n	8009458 <strncmp+0x1e>
	...

08009460 <_localeconv_r>:
 8009460:	4800      	ldr	r0, [pc, #0]	@ (8009464 <_localeconv_r+0x4>)
 8009462:	4770      	bx	lr
 8009464:	20000158 	.word	0x20000158

08009468 <_close_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	2300      	movs	r3, #0
 800946c:	4d05      	ldr	r5, [pc, #20]	@ (8009484 <_close_r+0x1c>)
 800946e:	4604      	mov	r4, r0
 8009470:	4608      	mov	r0, r1
 8009472:	602b      	str	r3, [r5, #0]
 8009474:	f7fb f86f 	bl	8004556 <_close>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_close_r+0x1a>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_close_r+0x1a>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	20000888 	.word	0x20000888

08009488 <_lseek_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4604      	mov	r4, r0
 800948c:	4608      	mov	r0, r1
 800948e:	4611      	mov	r1, r2
 8009490:	2200      	movs	r2, #0
 8009492:	4d05      	ldr	r5, [pc, #20]	@ (80094a8 <_lseek_r+0x20>)
 8009494:	602a      	str	r2, [r5, #0]
 8009496:	461a      	mov	r2, r3
 8009498:	f7fb f881 	bl	800459e <_lseek>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_lseek_r+0x1e>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_lseek_r+0x1e>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	20000888 	.word	0x20000888

080094ac <_read_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	4611      	mov	r1, r2
 80094b4:	2200      	movs	r2, #0
 80094b6:	4d05      	ldr	r5, [pc, #20]	@ (80094cc <_read_r+0x20>)
 80094b8:	602a      	str	r2, [r5, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	f7fb f812 	bl	80044e4 <_read>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_read_r+0x1e>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_read_r+0x1e>
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	20000888 	.word	0x20000888

080094d0 <_write_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	2200      	movs	r2, #0
 80094da:	4d05      	ldr	r5, [pc, #20]	@ (80094f0 <_write_r+0x20>)
 80094dc:	602a      	str	r2, [r5, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	f7fb f81d 	bl	800451e <_write>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_write_r+0x1e>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_write_r+0x1e>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	20000888 	.word	0x20000888

080094f4 <__errno>:
 80094f4:	4b01      	ldr	r3, [pc, #4]	@ (80094fc <__errno+0x8>)
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	20000018 	.word	0x20000018

08009500 <__libc_init_array>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	2600      	movs	r6, #0
 8009504:	4d0c      	ldr	r5, [pc, #48]	@ (8009538 <__libc_init_array+0x38>)
 8009506:	4c0d      	ldr	r4, [pc, #52]	@ (800953c <__libc_init_array+0x3c>)
 8009508:	1b64      	subs	r4, r4, r5
 800950a:	10a4      	asrs	r4, r4, #2
 800950c:	42a6      	cmp	r6, r4
 800950e:	d109      	bne.n	8009524 <__libc_init_array+0x24>
 8009510:	f002 fefc 	bl	800c30c <_init>
 8009514:	2600      	movs	r6, #0
 8009516:	4d0a      	ldr	r5, [pc, #40]	@ (8009540 <__libc_init_array+0x40>)
 8009518:	4c0a      	ldr	r4, [pc, #40]	@ (8009544 <__libc_init_array+0x44>)
 800951a:	1b64      	subs	r4, r4, r5
 800951c:	10a4      	asrs	r4, r4, #2
 800951e:	42a6      	cmp	r6, r4
 8009520:	d105      	bne.n	800952e <__libc_init_array+0x2e>
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	f855 3b04 	ldr.w	r3, [r5], #4
 8009528:	4798      	blx	r3
 800952a:	3601      	adds	r6, #1
 800952c:	e7ee      	b.n	800950c <__libc_init_array+0xc>
 800952e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009532:	4798      	blx	r3
 8009534:	3601      	adds	r6, #1
 8009536:	e7f2      	b.n	800951e <__libc_init_array+0x1e>
 8009538:	0800c874 	.word	0x0800c874
 800953c:	0800c874 	.word	0x0800c874
 8009540:	0800c874 	.word	0x0800c874
 8009544:	0800c878 	.word	0x0800c878

08009548 <__retarget_lock_init_recursive>:
 8009548:	4770      	bx	lr

0800954a <__retarget_lock_acquire_recursive>:
 800954a:	4770      	bx	lr

0800954c <__retarget_lock_release_recursive>:
 800954c:	4770      	bx	lr

0800954e <memchr>:
 800954e:	4603      	mov	r3, r0
 8009550:	b510      	push	{r4, lr}
 8009552:	b2c9      	uxtb	r1, r1
 8009554:	4402      	add	r2, r0
 8009556:	4293      	cmp	r3, r2
 8009558:	4618      	mov	r0, r3
 800955a:	d101      	bne.n	8009560 <memchr+0x12>
 800955c:	2000      	movs	r0, #0
 800955e:	e003      	b.n	8009568 <memchr+0x1a>
 8009560:	7804      	ldrb	r4, [r0, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	428c      	cmp	r4, r1
 8009566:	d1f6      	bne.n	8009556 <memchr+0x8>
 8009568:	bd10      	pop	{r4, pc}

0800956a <memcpy>:
 800956a:	440a      	add	r2, r1
 800956c:	4291      	cmp	r1, r2
 800956e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009572:	d100      	bne.n	8009576 <memcpy+0xc>
 8009574:	4770      	bx	lr
 8009576:	b510      	push	{r4, lr}
 8009578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800957c:	4291      	cmp	r1, r2
 800957e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009582:	d1f9      	bne.n	8009578 <memcpy+0xe>
 8009584:	bd10      	pop	{r4, pc}

08009586 <quorem>:
 8009586:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958a:	6903      	ldr	r3, [r0, #16]
 800958c:	690c      	ldr	r4, [r1, #16]
 800958e:	4607      	mov	r7, r0
 8009590:	42a3      	cmp	r3, r4
 8009592:	db7e      	blt.n	8009692 <quorem+0x10c>
 8009594:	3c01      	subs	r4, #1
 8009596:	00a3      	lsls	r3, r4, #2
 8009598:	f100 0514 	add.w	r5, r0, #20
 800959c:	f101 0814 	add.w	r8, r1, #20
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095a6:	9301      	str	r3, [sp, #4]
 80095a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80095ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095b0:	3301      	adds	r3, #1
 80095b2:	429a      	cmp	r2, r3
 80095b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80095b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80095bc:	d32e      	bcc.n	800961c <quorem+0x96>
 80095be:	f04f 0a00 	mov.w	sl, #0
 80095c2:	46c4      	mov	ip, r8
 80095c4:	46ae      	mov	lr, r5
 80095c6:	46d3      	mov	fp, sl
 80095c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80095cc:	b298      	uxth	r0, r3
 80095ce:	fb06 a000 	mla	r0, r6, r0, sl
 80095d2:	0c1b      	lsrs	r3, r3, #16
 80095d4:	0c02      	lsrs	r2, r0, #16
 80095d6:	fb06 2303 	mla	r3, r6, r3, r2
 80095da:	f8de 2000 	ldr.w	r2, [lr]
 80095de:	b280      	uxth	r0, r0
 80095e0:	b292      	uxth	r2, r2
 80095e2:	1a12      	subs	r2, r2, r0
 80095e4:	445a      	add	r2, fp
 80095e6:	f8de 0000 	ldr.w	r0, [lr]
 80095ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80095f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80095f8:	b292      	uxth	r2, r2
 80095fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80095fe:	45e1      	cmp	r9, ip
 8009600:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009604:	f84e 2b04 	str.w	r2, [lr], #4
 8009608:	d2de      	bcs.n	80095c8 <quorem+0x42>
 800960a:	9b00      	ldr	r3, [sp, #0]
 800960c:	58eb      	ldr	r3, [r5, r3]
 800960e:	b92b      	cbnz	r3, 800961c <quorem+0x96>
 8009610:	9b01      	ldr	r3, [sp, #4]
 8009612:	3b04      	subs	r3, #4
 8009614:	429d      	cmp	r5, r3
 8009616:	461a      	mov	r2, r3
 8009618:	d32f      	bcc.n	800967a <quorem+0xf4>
 800961a:	613c      	str	r4, [r7, #16]
 800961c:	4638      	mov	r0, r7
 800961e:	f001 f97f 	bl	800a920 <__mcmp>
 8009622:	2800      	cmp	r0, #0
 8009624:	db25      	blt.n	8009672 <quorem+0xec>
 8009626:	4629      	mov	r1, r5
 8009628:	2000      	movs	r0, #0
 800962a:	f858 2b04 	ldr.w	r2, [r8], #4
 800962e:	f8d1 c000 	ldr.w	ip, [r1]
 8009632:	fa1f fe82 	uxth.w	lr, r2
 8009636:	fa1f f38c 	uxth.w	r3, ip
 800963a:	eba3 030e 	sub.w	r3, r3, lr
 800963e:	4403      	add	r3, r0
 8009640:	0c12      	lsrs	r2, r2, #16
 8009642:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009646:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800964a:	b29b      	uxth	r3, r3
 800964c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009650:	45c1      	cmp	r9, r8
 8009652:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009656:	f841 3b04 	str.w	r3, [r1], #4
 800965a:	d2e6      	bcs.n	800962a <quorem+0xa4>
 800965c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009660:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009664:	b922      	cbnz	r2, 8009670 <quorem+0xea>
 8009666:	3b04      	subs	r3, #4
 8009668:	429d      	cmp	r5, r3
 800966a:	461a      	mov	r2, r3
 800966c:	d30b      	bcc.n	8009686 <quorem+0x100>
 800966e:	613c      	str	r4, [r7, #16]
 8009670:	3601      	adds	r6, #1
 8009672:	4630      	mov	r0, r6
 8009674:	b003      	add	sp, #12
 8009676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967a:	6812      	ldr	r2, [r2, #0]
 800967c:	3b04      	subs	r3, #4
 800967e:	2a00      	cmp	r2, #0
 8009680:	d1cb      	bne.n	800961a <quorem+0x94>
 8009682:	3c01      	subs	r4, #1
 8009684:	e7c6      	b.n	8009614 <quorem+0x8e>
 8009686:	6812      	ldr	r2, [r2, #0]
 8009688:	3b04      	subs	r3, #4
 800968a:	2a00      	cmp	r2, #0
 800968c:	d1ef      	bne.n	800966e <quorem+0xe8>
 800968e:	3c01      	subs	r4, #1
 8009690:	e7ea      	b.n	8009668 <quorem+0xe2>
 8009692:	2000      	movs	r0, #0
 8009694:	e7ee      	b.n	8009674 <quorem+0xee>
	...

08009698 <_dtoa_r>:
 8009698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	4614      	mov	r4, r2
 800969e:	461d      	mov	r5, r3
 80096a0:	69c7      	ldr	r7, [r0, #28]
 80096a2:	b097      	sub	sp, #92	@ 0x5c
 80096a4:	4681      	mov	r9, r0
 80096a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80096aa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80096ac:	b97f      	cbnz	r7, 80096ce <_dtoa_r+0x36>
 80096ae:	2010      	movs	r0, #16
 80096b0:	f000 fe0e 	bl	800a2d0 <malloc>
 80096b4:	4602      	mov	r2, r0
 80096b6:	f8c9 001c 	str.w	r0, [r9, #28]
 80096ba:	b920      	cbnz	r0, 80096c6 <_dtoa_r+0x2e>
 80096bc:	21ef      	movs	r1, #239	@ 0xef
 80096be:	4bac      	ldr	r3, [pc, #688]	@ (8009970 <_dtoa_r+0x2d8>)
 80096c0:	48ac      	ldr	r0, [pc, #688]	@ (8009974 <_dtoa_r+0x2dc>)
 80096c2:	f001 fc5f 	bl	800af84 <__assert_func>
 80096c6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80096ca:	6007      	str	r7, [r0, #0]
 80096cc:	60c7      	str	r7, [r0, #12]
 80096ce:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80096d2:	6819      	ldr	r1, [r3, #0]
 80096d4:	b159      	cbz	r1, 80096ee <_dtoa_r+0x56>
 80096d6:	685a      	ldr	r2, [r3, #4]
 80096d8:	2301      	movs	r3, #1
 80096da:	4093      	lsls	r3, r2
 80096dc:	604a      	str	r2, [r1, #4]
 80096de:	608b      	str	r3, [r1, #8]
 80096e0:	4648      	mov	r0, r9
 80096e2:	f000 feeb 	bl	800a4bc <_Bfree>
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	1e2b      	subs	r3, r5, #0
 80096f0:	bfaf      	iteee	ge
 80096f2:	2300      	movge	r3, #0
 80096f4:	2201      	movlt	r2, #1
 80096f6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80096fa:	9307      	strlt	r3, [sp, #28]
 80096fc:	bfa8      	it	ge
 80096fe:	6033      	strge	r3, [r6, #0]
 8009700:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8009704:	4b9c      	ldr	r3, [pc, #624]	@ (8009978 <_dtoa_r+0x2e0>)
 8009706:	bfb8      	it	lt
 8009708:	6032      	strlt	r2, [r6, #0]
 800970a:	ea33 0308 	bics.w	r3, r3, r8
 800970e:	d112      	bne.n	8009736 <_dtoa_r+0x9e>
 8009710:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009714:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800971c:	4323      	orrs	r3, r4
 800971e:	f000 855e 	beq.w	800a1de <_dtoa_r+0xb46>
 8009722:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009724:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800997c <_dtoa_r+0x2e4>
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 8560 	beq.w	800a1ee <_dtoa_r+0xb56>
 800972e:	f10a 0303 	add.w	r3, sl, #3
 8009732:	f000 bd5a 	b.w	800a1ea <_dtoa_r+0xb52>
 8009736:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800973a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800973e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009742:	2200      	movs	r2, #0
 8009744:	2300      	movs	r3, #0
 8009746:	f7f7 f92f 	bl	80009a8 <__aeabi_dcmpeq>
 800974a:	4607      	mov	r7, r0
 800974c:	b158      	cbz	r0, 8009766 <_dtoa_r+0xce>
 800974e:	2301      	movs	r3, #1
 8009750:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009752:	6013      	str	r3, [r2, #0]
 8009754:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009756:	b113      	cbz	r3, 800975e <_dtoa_r+0xc6>
 8009758:	4b89      	ldr	r3, [pc, #548]	@ (8009980 <_dtoa_r+0x2e8>)
 800975a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8009984 <_dtoa_r+0x2ec>
 8009762:	f000 bd44 	b.w	800a1ee <_dtoa_r+0xb56>
 8009766:	ab14      	add	r3, sp, #80	@ 0x50
 8009768:	9301      	str	r3, [sp, #4]
 800976a:	ab15      	add	r3, sp, #84	@ 0x54
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	4648      	mov	r0, r9
 8009770:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009774:	f001 f984 	bl	800aa80 <__d2b>
 8009778:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800977c:	9003      	str	r0, [sp, #12]
 800977e:	2e00      	cmp	r6, #0
 8009780:	d078      	beq.n	8009874 <_dtoa_r+0x1dc>
 8009782:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009788:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800978c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009790:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009794:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009798:	9712      	str	r7, [sp, #72]	@ 0x48
 800979a:	4619      	mov	r1, r3
 800979c:	2200      	movs	r2, #0
 800979e:	4b7a      	ldr	r3, [pc, #488]	@ (8009988 <_dtoa_r+0x2f0>)
 80097a0:	f7f6 fce2 	bl	8000168 <__aeabi_dsub>
 80097a4:	a36c      	add	r3, pc, #432	@ (adr r3, 8009958 <_dtoa_r+0x2c0>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	f7f6 fe95 	bl	80004d8 <__aeabi_dmul>
 80097ae:	a36c      	add	r3, pc, #432	@ (adr r3, 8009960 <_dtoa_r+0x2c8>)
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	f7f6 fcda 	bl	800016c <__adddf3>
 80097b8:	4604      	mov	r4, r0
 80097ba:	4630      	mov	r0, r6
 80097bc:	460d      	mov	r5, r1
 80097be:	f7f6 fe21 	bl	8000404 <__aeabi_i2d>
 80097c2:	a369      	add	r3, pc, #420	@ (adr r3, 8009968 <_dtoa_r+0x2d0>)
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	f7f6 fe86 	bl	80004d8 <__aeabi_dmul>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4620      	mov	r0, r4
 80097d2:	4629      	mov	r1, r5
 80097d4:	f7f6 fcca 	bl	800016c <__adddf3>
 80097d8:	4604      	mov	r4, r0
 80097da:	460d      	mov	r5, r1
 80097dc:	f7f7 f92c 	bl	8000a38 <__aeabi_d2iz>
 80097e0:	2200      	movs	r2, #0
 80097e2:	4607      	mov	r7, r0
 80097e4:	2300      	movs	r3, #0
 80097e6:	4620      	mov	r0, r4
 80097e8:	4629      	mov	r1, r5
 80097ea:	f7f7 f8e7 	bl	80009bc <__aeabi_dcmplt>
 80097ee:	b140      	cbz	r0, 8009802 <_dtoa_r+0x16a>
 80097f0:	4638      	mov	r0, r7
 80097f2:	f7f6 fe07 	bl	8000404 <__aeabi_i2d>
 80097f6:	4622      	mov	r2, r4
 80097f8:	462b      	mov	r3, r5
 80097fa:	f7f7 f8d5 	bl	80009a8 <__aeabi_dcmpeq>
 80097fe:	b900      	cbnz	r0, 8009802 <_dtoa_r+0x16a>
 8009800:	3f01      	subs	r7, #1
 8009802:	2f16      	cmp	r7, #22
 8009804:	d854      	bhi.n	80098b0 <_dtoa_r+0x218>
 8009806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800980a:	4b60      	ldr	r3, [pc, #384]	@ (800998c <_dtoa_r+0x2f4>)
 800980c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f7f7 f8d2 	bl	80009bc <__aeabi_dcmplt>
 8009818:	2800      	cmp	r0, #0
 800981a:	d04b      	beq.n	80098b4 <_dtoa_r+0x21c>
 800981c:	2300      	movs	r3, #0
 800981e:	3f01      	subs	r7, #1
 8009820:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009822:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009824:	1b9b      	subs	r3, r3, r6
 8009826:	1e5a      	subs	r2, r3, #1
 8009828:	bf49      	itett	mi
 800982a:	f1c3 0301 	rsbmi	r3, r3, #1
 800982e:	2300      	movpl	r3, #0
 8009830:	9304      	strmi	r3, [sp, #16]
 8009832:	2300      	movmi	r3, #0
 8009834:	9209      	str	r2, [sp, #36]	@ 0x24
 8009836:	bf54      	ite	pl
 8009838:	9304      	strpl	r3, [sp, #16]
 800983a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800983c:	2f00      	cmp	r7, #0
 800983e:	db3b      	blt.n	80098b8 <_dtoa_r+0x220>
 8009840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009842:	970e      	str	r7, [sp, #56]	@ 0x38
 8009844:	443b      	add	r3, r7
 8009846:	9309      	str	r3, [sp, #36]	@ 0x24
 8009848:	2300      	movs	r3, #0
 800984a:	930a      	str	r3, [sp, #40]	@ 0x28
 800984c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800984e:	2b09      	cmp	r3, #9
 8009850:	d865      	bhi.n	800991e <_dtoa_r+0x286>
 8009852:	2b05      	cmp	r3, #5
 8009854:	bfc4      	itt	gt
 8009856:	3b04      	subgt	r3, #4
 8009858:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800985a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800985c:	bfc8      	it	gt
 800985e:	2400      	movgt	r4, #0
 8009860:	f1a3 0302 	sub.w	r3, r3, #2
 8009864:	bfd8      	it	le
 8009866:	2401      	movle	r4, #1
 8009868:	2b03      	cmp	r3, #3
 800986a:	d864      	bhi.n	8009936 <_dtoa_r+0x29e>
 800986c:	e8df f003 	tbb	[pc, r3]
 8009870:	2c385553 	.word	0x2c385553
 8009874:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009878:	441e      	add	r6, r3
 800987a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800987e:	2b20      	cmp	r3, #32
 8009880:	bfc1      	itttt	gt
 8009882:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009886:	fa08 f803 	lslgt.w	r8, r8, r3
 800988a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800988e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009892:	bfd6      	itet	le
 8009894:	f1c3 0320 	rsble	r3, r3, #32
 8009898:	ea48 0003 	orrgt.w	r0, r8, r3
 800989c:	fa04 f003 	lslle.w	r0, r4, r3
 80098a0:	f7f6 fda0 	bl	80003e4 <__aeabi_ui2d>
 80098a4:	2201      	movs	r2, #1
 80098a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80098aa:	3e01      	subs	r6, #1
 80098ac:	9212      	str	r2, [sp, #72]	@ 0x48
 80098ae:	e774      	b.n	800979a <_dtoa_r+0x102>
 80098b0:	2301      	movs	r3, #1
 80098b2:	e7b5      	b.n	8009820 <_dtoa_r+0x188>
 80098b4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80098b6:	e7b4      	b.n	8009822 <_dtoa_r+0x18a>
 80098b8:	9b04      	ldr	r3, [sp, #16]
 80098ba:	1bdb      	subs	r3, r3, r7
 80098bc:	9304      	str	r3, [sp, #16]
 80098be:	427b      	negs	r3, r7
 80098c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80098c2:	2300      	movs	r3, #0
 80098c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80098c6:	e7c1      	b.n	800984c <_dtoa_r+0x1b4>
 80098c8:	2301      	movs	r3, #1
 80098ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098ce:	eb07 0b03 	add.w	fp, r7, r3
 80098d2:	f10b 0301 	add.w	r3, fp, #1
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	9308      	str	r3, [sp, #32]
 80098da:	bfb8      	it	lt
 80098dc:	2301      	movlt	r3, #1
 80098de:	e006      	b.n	80098ee <_dtoa_r+0x256>
 80098e0:	2301      	movs	r3, #1
 80098e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	dd28      	ble.n	800993c <_dtoa_r+0x2a4>
 80098ea:	469b      	mov	fp, r3
 80098ec:	9308      	str	r3, [sp, #32]
 80098ee:	2100      	movs	r1, #0
 80098f0:	2204      	movs	r2, #4
 80098f2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80098f6:	f102 0514 	add.w	r5, r2, #20
 80098fa:	429d      	cmp	r5, r3
 80098fc:	d926      	bls.n	800994c <_dtoa_r+0x2b4>
 80098fe:	6041      	str	r1, [r0, #4]
 8009900:	4648      	mov	r0, r9
 8009902:	f000 fd9b 	bl	800a43c <_Balloc>
 8009906:	4682      	mov	sl, r0
 8009908:	2800      	cmp	r0, #0
 800990a:	d143      	bne.n	8009994 <_dtoa_r+0x2fc>
 800990c:	4602      	mov	r2, r0
 800990e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009912:	4b1f      	ldr	r3, [pc, #124]	@ (8009990 <_dtoa_r+0x2f8>)
 8009914:	e6d4      	b.n	80096c0 <_dtoa_r+0x28>
 8009916:	2300      	movs	r3, #0
 8009918:	e7e3      	b.n	80098e2 <_dtoa_r+0x24a>
 800991a:	2300      	movs	r3, #0
 800991c:	e7d5      	b.n	80098ca <_dtoa_r+0x232>
 800991e:	2401      	movs	r4, #1
 8009920:	2300      	movs	r3, #0
 8009922:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009924:	9320      	str	r3, [sp, #128]	@ 0x80
 8009926:	f04f 3bff 	mov.w	fp, #4294967295
 800992a:	2200      	movs	r2, #0
 800992c:	2312      	movs	r3, #18
 800992e:	f8cd b020 	str.w	fp, [sp, #32]
 8009932:	9221      	str	r2, [sp, #132]	@ 0x84
 8009934:	e7db      	b.n	80098ee <_dtoa_r+0x256>
 8009936:	2301      	movs	r3, #1
 8009938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800993a:	e7f4      	b.n	8009926 <_dtoa_r+0x28e>
 800993c:	f04f 0b01 	mov.w	fp, #1
 8009940:	465b      	mov	r3, fp
 8009942:	f8cd b020 	str.w	fp, [sp, #32]
 8009946:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800994a:	e7d0      	b.n	80098ee <_dtoa_r+0x256>
 800994c:	3101      	adds	r1, #1
 800994e:	0052      	lsls	r2, r2, #1
 8009950:	e7d1      	b.n	80098f6 <_dtoa_r+0x25e>
 8009952:	bf00      	nop
 8009954:	f3af 8000 	nop.w
 8009958:	636f4361 	.word	0x636f4361
 800995c:	3fd287a7 	.word	0x3fd287a7
 8009960:	8b60c8b3 	.word	0x8b60c8b3
 8009964:	3fc68a28 	.word	0x3fc68a28
 8009968:	509f79fb 	.word	0x509f79fb
 800996c:	3fd34413 	.word	0x3fd34413
 8009970:	0800c4e3 	.word	0x0800c4e3
 8009974:	0800c4fa 	.word	0x0800c4fa
 8009978:	7ff00000 	.word	0x7ff00000
 800997c:	0800c4df 	.word	0x0800c4df
 8009980:	0800c4b3 	.word	0x0800c4b3
 8009984:	0800c4b2 	.word	0x0800c4b2
 8009988:	3ff80000 	.word	0x3ff80000
 800998c:	0800c648 	.word	0x0800c648
 8009990:	0800c552 	.word	0x0800c552
 8009994:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009998:	6018      	str	r0, [r3, #0]
 800999a:	9b08      	ldr	r3, [sp, #32]
 800999c:	2b0e      	cmp	r3, #14
 800999e:	f200 80a1 	bhi.w	8009ae4 <_dtoa_r+0x44c>
 80099a2:	2c00      	cmp	r4, #0
 80099a4:	f000 809e 	beq.w	8009ae4 <_dtoa_r+0x44c>
 80099a8:	2f00      	cmp	r7, #0
 80099aa:	dd33      	ble.n	8009a14 <_dtoa_r+0x37c>
 80099ac:	4b9c      	ldr	r3, [pc, #624]	@ (8009c20 <_dtoa_r+0x588>)
 80099ae:	f007 020f 	and.w	r2, r7, #15
 80099b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099b6:	05f8      	lsls	r0, r7, #23
 80099b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80099bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80099c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80099c4:	d516      	bpl.n	80099f4 <_dtoa_r+0x35c>
 80099c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099ca:	4b96      	ldr	r3, [pc, #600]	@ (8009c24 <_dtoa_r+0x58c>)
 80099cc:	2603      	movs	r6, #3
 80099ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099d2:	f7f6 feab 	bl	800072c <__aeabi_ddiv>
 80099d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099da:	f004 040f 	and.w	r4, r4, #15
 80099de:	4d91      	ldr	r5, [pc, #580]	@ (8009c24 <_dtoa_r+0x58c>)
 80099e0:	b954      	cbnz	r4, 80099f8 <_dtoa_r+0x360>
 80099e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099ea:	f7f6 fe9f 	bl	800072c <__aeabi_ddiv>
 80099ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099f2:	e028      	b.n	8009a46 <_dtoa_r+0x3ae>
 80099f4:	2602      	movs	r6, #2
 80099f6:	e7f2      	b.n	80099de <_dtoa_r+0x346>
 80099f8:	07e1      	lsls	r1, r4, #31
 80099fa:	d508      	bpl.n	8009a0e <_dtoa_r+0x376>
 80099fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a04:	f7f6 fd68 	bl	80004d8 <__aeabi_dmul>
 8009a08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a0c:	3601      	adds	r6, #1
 8009a0e:	1064      	asrs	r4, r4, #1
 8009a10:	3508      	adds	r5, #8
 8009a12:	e7e5      	b.n	80099e0 <_dtoa_r+0x348>
 8009a14:	f000 80af 	beq.w	8009b76 <_dtoa_r+0x4de>
 8009a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a1c:	427c      	negs	r4, r7
 8009a1e:	4b80      	ldr	r3, [pc, #512]	@ (8009c20 <_dtoa_r+0x588>)
 8009a20:	f004 020f 	and.w	r2, r4, #15
 8009a24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	f7f6 fd54 	bl	80004d8 <__aeabi_dmul>
 8009a30:	2602      	movs	r6, #2
 8009a32:	2300      	movs	r3, #0
 8009a34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a38:	4d7a      	ldr	r5, [pc, #488]	@ (8009c24 <_dtoa_r+0x58c>)
 8009a3a:	1124      	asrs	r4, r4, #4
 8009a3c:	2c00      	cmp	r4, #0
 8009a3e:	f040 808f 	bne.w	8009b60 <_dtoa_r+0x4c8>
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1d3      	bne.n	80099ee <_dtoa_r+0x356>
 8009a46:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009a4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 8094 	beq.w	8009b7a <_dtoa_r+0x4e2>
 8009a52:	2200      	movs	r2, #0
 8009a54:	4620      	mov	r0, r4
 8009a56:	4629      	mov	r1, r5
 8009a58:	4b73      	ldr	r3, [pc, #460]	@ (8009c28 <_dtoa_r+0x590>)
 8009a5a:	f7f6 ffaf 	bl	80009bc <__aeabi_dcmplt>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	f000 808b 	beq.w	8009b7a <_dtoa_r+0x4e2>
 8009a64:	9b08      	ldr	r3, [sp, #32]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 8087 	beq.w	8009b7a <_dtoa_r+0x4e2>
 8009a6c:	f1bb 0f00 	cmp.w	fp, #0
 8009a70:	dd34      	ble.n	8009adc <_dtoa_r+0x444>
 8009a72:	4620      	mov	r0, r4
 8009a74:	2200      	movs	r2, #0
 8009a76:	4629      	mov	r1, r5
 8009a78:	4b6c      	ldr	r3, [pc, #432]	@ (8009c2c <_dtoa_r+0x594>)
 8009a7a:	f7f6 fd2d 	bl	80004d8 <__aeabi_dmul>
 8009a7e:	465c      	mov	r4, fp
 8009a80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a84:	f107 38ff 	add.w	r8, r7, #4294967295
 8009a88:	3601      	adds	r6, #1
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f7f6 fcba 	bl	8000404 <__aeabi_i2d>
 8009a90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a94:	f7f6 fd20 	bl	80004d8 <__aeabi_dmul>
 8009a98:	2200      	movs	r2, #0
 8009a9a:	4b65      	ldr	r3, [pc, #404]	@ (8009c30 <_dtoa_r+0x598>)
 8009a9c:	f7f6 fb66 	bl	800016c <__adddf3>
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009aa6:	2c00      	cmp	r4, #0
 8009aa8:	d16a      	bne.n	8009b80 <_dtoa_r+0x4e8>
 8009aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	4b60      	ldr	r3, [pc, #384]	@ (8009c34 <_dtoa_r+0x59c>)
 8009ab2:	f7f6 fb59 	bl	8000168 <__aeabi_dsub>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009abe:	462a      	mov	r2, r5
 8009ac0:	4633      	mov	r3, r6
 8009ac2:	f7f6 ff99 	bl	80009f8 <__aeabi_dcmpgt>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	f040 8298 	bne.w	8009ffc <_dtoa_r+0x964>
 8009acc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ad0:	462a      	mov	r2, r5
 8009ad2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009ad6:	f7f6 ff71 	bl	80009bc <__aeabi_dcmplt>
 8009ada:	bb38      	cbnz	r0, 8009b2c <_dtoa_r+0x494>
 8009adc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009ae0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009ae4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f2c0 8157 	blt.w	8009d9a <_dtoa_r+0x702>
 8009aec:	2f0e      	cmp	r7, #14
 8009aee:	f300 8154 	bgt.w	8009d9a <_dtoa_r+0x702>
 8009af2:	4b4b      	ldr	r3, [pc, #300]	@ (8009c20 <_dtoa_r+0x588>)
 8009af4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009af8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009afc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009b00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f280 80e5 	bge.w	8009cd2 <_dtoa_r+0x63a>
 8009b08:	9b08      	ldr	r3, [sp, #32]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f300 80e1 	bgt.w	8009cd2 <_dtoa_r+0x63a>
 8009b10:	d10c      	bne.n	8009b2c <_dtoa_r+0x494>
 8009b12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b16:	2200      	movs	r2, #0
 8009b18:	4b46      	ldr	r3, [pc, #280]	@ (8009c34 <_dtoa_r+0x59c>)
 8009b1a:	f7f6 fcdd 	bl	80004d8 <__aeabi_dmul>
 8009b1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b22:	f7f6 ff5f 	bl	80009e4 <__aeabi_dcmpge>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	f000 8266 	beq.w	8009ff8 <_dtoa_r+0x960>
 8009b2c:	2400      	movs	r4, #0
 8009b2e:	4625      	mov	r5, r4
 8009b30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b32:	4656      	mov	r6, sl
 8009b34:	ea6f 0803 	mvn.w	r8, r3
 8009b38:	2700      	movs	r7, #0
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4648      	mov	r0, r9
 8009b3e:	f000 fcbd 	bl	800a4bc <_Bfree>
 8009b42:	2d00      	cmp	r5, #0
 8009b44:	f000 80bd 	beq.w	8009cc2 <_dtoa_r+0x62a>
 8009b48:	b12f      	cbz	r7, 8009b56 <_dtoa_r+0x4be>
 8009b4a:	42af      	cmp	r7, r5
 8009b4c:	d003      	beq.n	8009b56 <_dtoa_r+0x4be>
 8009b4e:	4639      	mov	r1, r7
 8009b50:	4648      	mov	r0, r9
 8009b52:	f000 fcb3 	bl	800a4bc <_Bfree>
 8009b56:	4629      	mov	r1, r5
 8009b58:	4648      	mov	r0, r9
 8009b5a:	f000 fcaf 	bl	800a4bc <_Bfree>
 8009b5e:	e0b0      	b.n	8009cc2 <_dtoa_r+0x62a>
 8009b60:	07e2      	lsls	r2, r4, #31
 8009b62:	d505      	bpl.n	8009b70 <_dtoa_r+0x4d8>
 8009b64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b68:	f7f6 fcb6 	bl	80004d8 <__aeabi_dmul>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	3601      	adds	r6, #1
 8009b70:	1064      	asrs	r4, r4, #1
 8009b72:	3508      	adds	r5, #8
 8009b74:	e762      	b.n	8009a3c <_dtoa_r+0x3a4>
 8009b76:	2602      	movs	r6, #2
 8009b78:	e765      	b.n	8009a46 <_dtoa_r+0x3ae>
 8009b7a:	46b8      	mov	r8, r7
 8009b7c:	9c08      	ldr	r4, [sp, #32]
 8009b7e:	e784      	b.n	8009a8a <_dtoa_r+0x3f2>
 8009b80:	4b27      	ldr	r3, [pc, #156]	@ (8009c20 <_dtoa_r+0x588>)
 8009b82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b8c:	4454      	add	r4, sl
 8009b8e:	2900      	cmp	r1, #0
 8009b90:	d054      	beq.n	8009c3c <_dtoa_r+0x5a4>
 8009b92:	2000      	movs	r0, #0
 8009b94:	4928      	ldr	r1, [pc, #160]	@ (8009c38 <_dtoa_r+0x5a0>)
 8009b96:	f7f6 fdc9 	bl	800072c <__aeabi_ddiv>
 8009b9a:	4633      	mov	r3, r6
 8009b9c:	462a      	mov	r2, r5
 8009b9e:	f7f6 fae3 	bl	8000168 <__aeabi_dsub>
 8009ba2:	4656      	mov	r6, sl
 8009ba4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ba8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bac:	f7f6 ff44 	bl	8000a38 <__aeabi_d2iz>
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	f7f6 fc27 	bl	8000404 <__aeabi_i2d>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bbe:	f7f6 fad3 	bl	8000168 <__aeabi_dsub>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	3530      	adds	r5, #48	@ 0x30
 8009bc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009bcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bd0:	f806 5b01 	strb.w	r5, [r6], #1
 8009bd4:	f7f6 fef2 	bl	80009bc <__aeabi_dcmplt>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d172      	bne.n	8009cc2 <_dtoa_r+0x62a>
 8009bdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009be0:	2000      	movs	r0, #0
 8009be2:	4911      	ldr	r1, [pc, #68]	@ (8009c28 <_dtoa_r+0x590>)
 8009be4:	f7f6 fac0 	bl	8000168 <__aeabi_dsub>
 8009be8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bec:	f7f6 fee6 	bl	80009bc <__aeabi_dcmplt>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	f040 80b4 	bne.w	8009d5e <_dtoa_r+0x6c6>
 8009bf6:	42a6      	cmp	r6, r4
 8009bf8:	f43f af70 	beq.w	8009adc <_dtoa_r+0x444>
 8009bfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c00:	2200      	movs	r2, #0
 8009c02:	4b0a      	ldr	r3, [pc, #40]	@ (8009c2c <_dtoa_r+0x594>)
 8009c04:	f7f6 fc68 	bl	80004d8 <__aeabi_dmul>
 8009c08:	2200      	movs	r2, #0
 8009c0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c12:	4b06      	ldr	r3, [pc, #24]	@ (8009c2c <_dtoa_r+0x594>)
 8009c14:	f7f6 fc60 	bl	80004d8 <__aeabi_dmul>
 8009c18:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c1c:	e7c4      	b.n	8009ba8 <_dtoa_r+0x510>
 8009c1e:	bf00      	nop
 8009c20:	0800c648 	.word	0x0800c648
 8009c24:	0800c620 	.word	0x0800c620
 8009c28:	3ff00000 	.word	0x3ff00000
 8009c2c:	40240000 	.word	0x40240000
 8009c30:	401c0000 	.word	0x401c0000
 8009c34:	40140000 	.word	0x40140000
 8009c38:	3fe00000 	.word	0x3fe00000
 8009c3c:	4631      	mov	r1, r6
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f7f6 fc4a 	bl	80004d8 <__aeabi_dmul>
 8009c44:	4656      	mov	r6, sl
 8009c46:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c4a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009c4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c50:	f7f6 fef2 	bl	8000a38 <__aeabi_d2iz>
 8009c54:	4605      	mov	r5, r0
 8009c56:	f7f6 fbd5 	bl	8000404 <__aeabi_i2d>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c62:	f7f6 fa81 	bl	8000168 <__aeabi_dsub>
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
 8009c6a:	3530      	adds	r5, #48	@ 0x30
 8009c6c:	f806 5b01 	strb.w	r5, [r6], #1
 8009c70:	42a6      	cmp	r6, r4
 8009c72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c76:	f04f 0200 	mov.w	r2, #0
 8009c7a:	d124      	bne.n	8009cc6 <_dtoa_r+0x62e>
 8009c7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c80:	4bae      	ldr	r3, [pc, #696]	@ (8009f3c <_dtoa_r+0x8a4>)
 8009c82:	f7f6 fa73 	bl	800016c <__adddf3>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c8e:	f7f6 feb3 	bl	80009f8 <__aeabi_dcmpgt>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d163      	bne.n	8009d5e <_dtoa_r+0x6c6>
 8009c96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	49a7      	ldr	r1, [pc, #668]	@ (8009f3c <_dtoa_r+0x8a4>)
 8009c9e:	f7f6 fa63 	bl	8000168 <__aeabi_dsub>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009caa:	f7f6 fe87 	bl	80009bc <__aeabi_dcmplt>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f43f af14 	beq.w	8009adc <_dtoa_r+0x444>
 8009cb4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009cb6:	1e73      	subs	r3, r6, #1
 8009cb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009cbe:	2b30      	cmp	r3, #48	@ 0x30
 8009cc0:	d0f8      	beq.n	8009cb4 <_dtoa_r+0x61c>
 8009cc2:	4647      	mov	r7, r8
 8009cc4:	e03b      	b.n	8009d3e <_dtoa_r+0x6a6>
 8009cc6:	4b9e      	ldr	r3, [pc, #632]	@ (8009f40 <_dtoa_r+0x8a8>)
 8009cc8:	f7f6 fc06 	bl	80004d8 <__aeabi_dmul>
 8009ccc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009cd0:	e7bc      	b.n	8009c4c <_dtoa_r+0x5b4>
 8009cd2:	4656      	mov	r6, sl
 8009cd4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cdc:	4620      	mov	r0, r4
 8009cde:	4629      	mov	r1, r5
 8009ce0:	f7f6 fd24 	bl	800072c <__aeabi_ddiv>
 8009ce4:	f7f6 fea8 	bl	8000a38 <__aeabi_d2iz>
 8009ce8:	4680      	mov	r8, r0
 8009cea:	f7f6 fb8b 	bl	8000404 <__aeabi_i2d>
 8009cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cf2:	f7f6 fbf1 	bl	80004d8 <__aeabi_dmul>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7f6 fa33 	bl	8000168 <__aeabi_dsub>
 8009d02:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009d06:	9d08      	ldr	r5, [sp, #32]
 8009d08:	f806 4b01 	strb.w	r4, [r6], #1
 8009d0c:	eba6 040a 	sub.w	r4, r6, sl
 8009d10:	42a5      	cmp	r5, r4
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	d133      	bne.n	8009d80 <_dtoa_r+0x6e8>
 8009d18:	f7f6 fa28 	bl	800016c <__adddf3>
 8009d1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d20:	4604      	mov	r4, r0
 8009d22:	460d      	mov	r5, r1
 8009d24:	f7f6 fe68 	bl	80009f8 <__aeabi_dcmpgt>
 8009d28:	b9c0      	cbnz	r0, 8009d5c <_dtoa_r+0x6c4>
 8009d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d2e:	4620      	mov	r0, r4
 8009d30:	4629      	mov	r1, r5
 8009d32:	f7f6 fe39 	bl	80009a8 <__aeabi_dcmpeq>
 8009d36:	b110      	cbz	r0, 8009d3e <_dtoa_r+0x6a6>
 8009d38:	f018 0f01 	tst.w	r8, #1
 8009d3c:	d10e      	bne.n	8009d5c <_dtoa_r+0x6c4>
 8009d3e:	4648      	mov	r0, r9
 8009d40:	9903      	ldr	r1, [sp, #12]
 8009d42:	f000 fbbb 	bl	800a4bc <_Bfree>
 8009d46:	2300      	movs	r3, #0
 8009d48:	7033      	strb	r3, [r6, #0]
 8009d4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009d4c:	3701      	adds	r7, #1
 8009d4e:	601f      	str	r7, [r3, #0]
 8009d50:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 824b 	beq.w	800a1ee <_dtoa_r+0xb56>
 8009d58:	601e      	str	r6, [r3, #0]
 8009d5a:	e248      	b.n	800a1ee <_dtoa_r+0xb56>
 8009d5c:	46b8      	mov	r8, r7
 8009d5e:	4633      	mov	r3, r6
 8009d60:	461e      	mov	r6, r3
 8009d62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d66:	2a39      	cmp	r2, #57	@ 0x39
 8009d68:	d106      	bne.n	8009d78 <_dtoa_r+0x6e0>
 8009d6a:	459a      	cmp	sl, r3
 8009d6c:	d1f8      	bne.n	8009d60 <_dtoa_r+0x6c8>
 8009d6e:	2230      	movs	r2, #48	@ 0x30
 8009d70:	f108 0801 	add.w	r8, r8, #1
 8009d74:	f88a 2000 	strb.w	r2, [sl]
 8009d78:	781a      	ldrb	r2, [r3, #0]
 8009d7a:	3201      	adds	r2, #1
 8009d7c:	701a      	strb	r2, [r3, #0]
 8009d7e:	e7a0      	b.n	8009cc2 <_dtoa_r+0x62a>
 8009d80:	2200      	movs	r2, #0
 8009d82:	4b6f      	ldr	r3, [pc, #444]	@ (8009f40 <_dtoa_r+0x8a8>)
 8009d84:	f7f6 fba8 	bl	80004d8 <__aeabi_dmul>
 8009d88:	2200      	movs	r2, #0
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	460d      	mov	r5, r1
 8009d90:	f7f6 fe0a 	bl	80009a8 <__aeabi_dcmpeq>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d09f      	beq.n	8009cd8 <_dtoa_r+0x640>
 8009d98:	e7d1      	b.n	8009d3e <_dtoa_r+0x6a6>
 8009d9a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d9c:	2a00      	cmp	r2, #0
 8009d9e:	f000 80ea 	beq.w	8009f76 <_dtoa_r+0x8de>
 8009da2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009da4:	2a01      	cmp	r2, #1
 8009da6:	f300 80cd 	bgt.w	8009f44 <_dtoa_r+0x8ac>
 8009daa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009dac:	2a00      	cmp	r2, #0
 8009dae:	f000 80c1 	beq.w	8009f34 <_dtoa_r+0x89c>
 8009db2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009db6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009db8:	9e04      	ldr	r6, [sp, #16]
 8009dba:	9a04      	ldr	r2, [sp, #16]
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	441a      	add	r2, r3
 8009dc0:	9204      	str	r2, [sp, #16]
 8009dc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dc4:	4648      	mov	r0, r9
 8009dc6:	441a      	add	r2, r3
 8009dc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dca:	f000 fc2b 	bl	800a624 <__i2b>
 8009dce:	4605      	mov	r5, r0
 8009dd0:	b166      	cbz	r6, 8009dec <_dtoa_r+0x754>
 8009dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	dd09      	ble.n	8009dec <_dtoa_r+0x754>
 8009dd8:	42b3      	cmp	r3, r6
 8009dda:	bfa8      	it	ge
 8009ddc:	4633      	movge	r3, r6
 8009dde:	9a04      	ldr	r2, [sp, #16]
 8009de0:	1af6      	subs	r6, r6, r3
 8009de2:	1ad2      	subs	r2, r2, r3
 8009de4:	9204      	str	r2, [sp, #16]
 8009de6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dee:	b30b      	cbz	r3, 8009e34 <_dtoa_r+0x79c>
 8009df0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 80c6 	beq.w	8009f84 <_dtoa_r+0x8ec>
 8009df8:	2c00      	cmp	r4, #0
 8009dfa:	f000 80c0 	beq.w	8009f7e <_dtoa_r+0x8e6>
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4622      	mov	r2, r4
 8009e02:	4648      	mov	r0, r9
 8009e04:	f000 fcc6 	bl	800a794 <__pow5mult>
 8009e08:	9a03      	ldr	r2, [sp, #12]
 8009e0a:	4601      	mov	r1, r0
 8009e0c:	4605      	mov	r5, r0
 8009e0e:	4648      	mov	r0, r9
 8009e10:	f000 fc1e 	bl	800a650 <__multiply>
 8009e14:	9903      	ldr	r1, [sp, #12]
 8009e16:	4680      	mov	r8, r0
 8009e18:	4648      	mov	r0, r9
 8009e1a:	f000 fb4f 	bl	800a4bc <_Bfree>
 8009e1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e20:	1b1b      	subs	r3, r3, r4
 8009e22:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e24:	f000 80b1 	beq.w	8009f8a <_dtoa_r+0x8f2>
 8009e28:	4641      	mov	r1, r8
 8009e2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e2c:	4648      	mov	r0, r9
 8009e2e:	f000 fcb1 	bl	800a794 <__pow5mult>
 8009e32:	9003      	str	r0, [sp, #12]
 8009e34:	2101      	movs	r1, #1
 8009e36:	4648      	mov	r0, r9
 8009e38:	f000 fbf4 	bl	800a624 <__i2b>
 8009e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e3e:	4604      	mov	r4, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 81d8 	beq.w	800a1f6 <_dtoa_r+0xb5e>
 8009e46:	461a      	mov	r2, r3
 8009e48:	4601      	mov	r1, r0
 8009e4a:	4648      	mov	r0, r9
 8009e4c:	f000 fca2 	bl	800a794 <__pow5mult>
 8009e50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e52:	4604      	mov	r4, r0
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	f300 809f 	bgt.w	8009f98 <_dtoa_r+0x900>
 8009e5a:	9b06      	ldr	r3, [sp, #24]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f040 8097 	bne.w	8009f90 <_dtoa_r+0x8f8>
 8009e62:	9b07      	ldr	r3, [sp, #28]
 8009e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f040 8093 	bne.w	8009f94 <_dtoa_r+0x8fc>
 8009e6e:	9b07      	ldr	r3, [sp, #28]
 8009e70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e74:	0d1b      	lsrs	r3, r3, #20
 8009e76:	051b      	lsls	r3, r3, #20
 8009e78:	b133      	cbz	r3, 8009e88 <_dtoa_r+0x7f0>
 8009e7a:	9b04      	ldr	r3, [sp, #16]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	9304      	str	r3, [sp, #16]
 8009e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e82:	3301      	adds	r3, #1
 8009e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e86:	2301      	movs	r3, #1
 8009e88:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f000 81b8 	beq.w	800a202 <_dtoa_r+0xb6a>
 8009e92:	6923      	ldr	r3, [r4, #16]
 8009e94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e98:	6918      	ldr	r0, [r3, #16]
 8009e9a:	f000 fb77 	bl	800a58c <__hi0bits>
 8009e9e:	f1c0 0020 	rsb	r0, r0, #32
 8009ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea4:	4418      	add	r0, r3
 8009ea6:	f010 001f 	ands.w	r0, r0, #31
 8009eaa:	f000 8082 	beq.w	8009fb2 <_dtoa_r+0x91a>
 8009eae:	f1c0 0320 	rsb	r3, r0, #32
 8009eb2:	2b04      	cmp	r3, #4
 8009eb4:	dd73      	ble.n	8009f9e <_dtoa_r+0x906>
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	f1c0 001c 	rsb	r0, r0, #28
 8009ebc:	4403      	add	r3, r0
 8009ebe:	9304      	str	r3, [sp, #16]
 8009ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec2:	4406      	add	r6, r0
 8009ec4:	4403      	add	r3, r0
 8009ec6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ec8:	9b04      	ldr	r3, [sp, #16]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	dd05      	ble.n	8009eda <_dtoa_r+0x842>
 8009ece:	461a      	mov	r2, r3
 8009ed0:	4648      	mov	r0, r9
 8009ed2:	9903      	ldr	r1, [sp, #12]
 8009ed4:	f000 fcb8 	bl	800a848 <__lshift>
 8009ed8:	9003      	str	r0, [sp, #12]
 8009eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	dd05      	ble.n	8009eec <_dtoa_r+0x854>
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	4648      	mov	r0, r9
 8009ee6:	f000 fcaf 	bl	800a848 <__lshift>
 8009eea:	4604      	mov	r4, r0
 8009eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d061      	beq.n	8009fb6 <_dtoa_r+0x91e>
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	9803      	ldr	r0, [sp, #12]
 8009ef6:	f000 fd13 	bl	800a920 <__mcmp>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	da5b      	bge.n	8009fb6 <_dtoa_r+0x91e>
 8009efe:	2300      	movs	r3, #0
 8009f00:	220a      	movs	r2, #10
 8009f02:	4648      	mov	r0, r9
 8009f04:	9903      	ldr	r1, [sp, #12]
 8009f06:	f000 fafb 	bl	800a500 <__multadd>
 8009f0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f0c:	f107 38ff 	add.w	r8, r7, #4294967295
 8009f10:	9003      	str	r0, [sp, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f000 8177 	beq.w	800a206 <_dtoa_r+0xb6e>
 8009f18:	4629      	mov	r1, r5
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	220a      	movs	r2, #10
 8009f1e:	4648      	mov	r0, r9
 8009f20:	f000 faee 	bl	800a500 <__multadd>
 8009f24:	f1bb 0f00 	cmp.w	fp, #0
 8009f28:	4605      	mov	r5, r0
 8009f2a:	dc6f      	bgt.n	800a00c <_dtoa_r+0x974>
 8009f2c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	dc49      	bgt.n	8009fc6 <_dtoa_r+0x92e>
 8009f32:	e06b      	b.n	800a00c <_dtoa_r+0x974>
 8009f34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009f3a:	e73c      	b.n	8009db6 <_dtoa_r+0x71e>
 8009f3c:	3fe00000 	.word	0x3fe00000
 8009f40:	40240000 	.word	0x40240000
 8009f44:	9b08      	ldr	r3, [sp, #32]
 8009f46:	1e5c      	subs	r4, r3, #1
 8009f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f4a:	42a3      	cmp	r3, r4
 8009f4c:	db09      	blt.n	8009f62 <_dtoa_r+0x8ca>
 8009f4e:	1b1c      	subs	r4, r3, r4
 8009f50:	9b08      	ldr	r3, [sp, #32]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f6bf af30 	bge.w	8009db8 <_dtoa_r+0x720>
 8009f58:	9b04      	ldr	r3, [sp, #16]
 8009f5a:	9a08      	ldr	r2, [sp, #32]
 8009f5c:	1a9e      	subs	r6, r3, r2
 8009f5e:	2300      	movs	r3, #0
 8009f60:	e72b      	b.n	8009dba <_dtoa_r+0x722>
 8009f62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f66:	1ae3      	subs	r3, r4, r3
 8009f68:	441a      	add	r2, r3
 8009f6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f6c:	9e04      	ldr	r6, [sp, #16]
 8009f6e:	2400      	movs	r4, #0
 8009f70:	9b08      	ldr	r3, [sp, #32]
 8009f72:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f74:	e721      	b.n	8009dba <_dtoa_r+0x722>
 8009f76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009f78:	9e04      	ldr	r6, [sp, #16]
 8009f7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009f7c:	e728      	b.n	8009dd0 <_dtoa_r+0x738>
 8009f7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009f82:	e751      	b.n	8009e28 <_dtoa_r+0x790>
 8009f84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f86:	9903      	ldr	r1, [sp, #12]
 8009f88:	e750      	b.n	8009e2c <_dtoa_r+0x794>
 8009f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f8e:	e751      	b.n	8009e34 <_dtoa_r+0x79c>
 8009f90:	2300      	movs	r3, #0
 8009f92:	e779      	b.n	8009e88 <_dtoa_r+0x7f0>
 8009f94:	9b06      	ldr	r3, [sp, #24]
 8009f96:	e777      	b.n	8009e88 <_dtoa_r+0x7f0>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f9c:	e779      	b.n	8009e92 <_dtoa_r+0x7fa>
 8009f9e:	d093      	beq.n	8009ec8 <_dtoa_r+0x830>
 8009fa0:	9a04      	ldr	r2, [sp, #16]
 8009fa2:	331c      	adds	r3, #28
 8009fa4:	441a      	add	r2, r3
 8009fa6:	9204      	str	r2, [sp, #16]
 8009fa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009faa:	441e      	add	r6, r3
 8009fac:	441a      	add	r2, r3
 8009fae:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fb0:	e78a      	b.n	8009ec8 <_dtoa_r+0x830>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	e7f4      	b.n	8009fa0 <_dtoa_r+0x908>
 8009fb6:	9b08      	ldr	r3, [sp, #32]
 8009fb8:	46b8      	mov	r8, r7
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	dc20      	bgt.n	800a000 <_dtoa_r+0x968>
 8009fbe:	469b      	mov	fp, r3
 8009fc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	dd1e      	ble.n	800a004 <_dtoa_r+0x96c>
 8009fc6:	f1bb 0f00 	cmp.w	fp, #0
 8009fca:	f47f adb1 	bne.w	8009b30 <_dtoa_r+0x498>
 8009fce:	4621      	mov	r1, r4
 8009fd0:	465b      	mov	r3, fp
 8009fd2:	2205      	movs	r2, #5
 8009fd4:	4648      	mov	r0, r9
 8009fd6:	f000 fa93 	bl	800a500 <__multadd>
 8009fda:	4601      	mov	r1, r0
 8009fdc:	4604      	mov	r4, r0
 8009fde:	9803      	ldr	r0, [sp, #12]
 8009fe0:	f000 fc9e 	bl	800a920 <__mcmp>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	f77f ada3 	ble.w	8009b30 <_dtoa_r+0x498>
 8009fea:	4656      	mov	r6, sl
 8009fec:	2331      	movs	r3, #49	@ 0x31
 8009fee:	f108 0801 	add.w	r8, r8, #1
 8009ff2:	f806 3b01 	strb.w	r3, [r6], #1
 8009ff6:	e59f      	b.n	8009b38 <_dtoa_r+0x4a0>
 8009ff8:	46b8      	mov	r8, r7
 8009ffa:	9c08      	ldr	r4, [sp, #32]
 8009ffc:	4625      	mov	r5, r4
 8009ffe:	e7f4      	b.n	8009fea <_dtoa_r+0x952>
 800a000:	f8dd b020 	ldr.w	fp, [sp, #32]
 800a004:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a006:	2b00      	cmp	r3, #0
 800a008:	f000 8101 	beq.w	800a20e <_dtoa_r+0xb76>
 800a00c:	2e00      	cmp	r6, #0
 800a00e:	dd05      	ble.n	800a01c <_dtoa_r+0x984>
 800a010:	4629      	mov	r1, r5
 800a012:	4632      	mov	r2, r6
 800a014:	4648      	mov	r0, r9
 800a016:	f000 fc17 	bl	800a848 <__lshift>
 800a01a:	4605      	mov	r5, r0
 800a01c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d05c      	beq.n	800a0dc <_dtoa_r+0xa44>
 800a022:	4648      	mov	r0, r9
 800a024:	6869      	ldr	r1, [r5, #4]
 800a026:	f000 fa09 	bl	800a43c <_Balloc>
 800a02a:	4606      	mov	r6, r0
 800a02c:	b928      	cbnz	r0, 800a03a <_dtoa_r+0x9a2>
 800a02e:	4602      	mov	r2, r0
 800a030:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a034:	4b80      	ldr	r3, [pc, #512]	@ (800a238 <_dtoa_r+0xba0>)
 800a036:	f7ff bb43 	b.w	80096c0 <_dtoa_r+0x28>
 800a03a:	692a      	ldr	r2, [r5, #16]
 800a03c:	f105 010c 	add.w	r1, r5, #12
 800a040:	3202      	adds	r2, #2
 800a042:	0092      	lsls	r2, r2, #2
 800a044:	300c      	adds	r0, #12
 800a046:	f7ff fa90 	bl	800956a <memcpy>
 800a04a:	2201      	movs	r2, #1
 800a04c:	4631      	mov	r1, r6
 800a04e:	4648      	mov	r0, r9
 800a050:	f000 fbfa 	bl	800a848 <__lshift>
 800a054:	462f      	mov	r7, r5
 800a056:	4605      	mov	r5, r0
 800a058:	f10a 0301 	add.w	r3, sl, #1
 800a05c:	9304      	str	r3, [sp, #16]
 800a05e:	eb0a 030b 	add.w	r3, sl, fp
 800a062:	930a      	str	r3, [sp, #40]	@ 0x28
 800a064:	9b06      	ldr	r3, [sp, #24]
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a06c:	9b04      	ldr	r3, [sp, #16]
 800a06e:	4621      	mov	r1, r4
 800a070:	9803      	ldr	r0, [sp, #12]
 800a072:	f103 3bff 	add.w	fp, r3, #4294967295
 800a076:	f7ff fa86 	bl	8009586 <quorem>
 800a07a:	4603      	mov	r3, r0
 800a07c:	4639      	mov	r1, r7
 800a07e:	3330      	adds	r3, #48	@ 0x30
 800a080:	9006      	str	r0, [sp, #24]
 800a082:	9803      	ldr	r0, [sp, #12]
 800a084:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a086:	f000 fc4b 	bl	800a920 <__mcmp>
 800a08a:	462a      	mov	r2, r5
 800a08c:	9008      	str	r0, [sp, #32]
 800a08e:	4621      	mov	r1, r4
 800a090:	4648      	mov	r0, r9
 800a092:	f000 fc61 	bl	800a958 <__mdiff>
 800a096:	68c2      	ldr	r2, [r0, #12]
 800a098:	4606      	mov	r6, r0
 800a09a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a09c:	bb02      	cbnz	r2, 800a0e0 <_dtoa_r+0xa48>
 800a09e:	4601      	mov	r1, r0
 800a0a0:	9803      	ldr	r0, [sp, #12]
 800a0a2:	f000 fc3d 	bl	800a920 <__mcmp>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4648      	mov	r0, r9
 800a0ae:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800a0b2:	f000 fa03 	bl	800a4bc <_Bfree>
 800a0b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a0b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a0ba:	9e04      	ldr	r6, [sp, #16]
 800a0bc:	ea42 0103 	orr.w	r1, r2, r3
 800a0c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c2:	4319      	orrs	r1, r3
 800a0c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0c6:	d10d      	bne.n	800a0e4 <_dtoa_r+0xa4c>
 800a0c8:	2b39      	cmp	r3, #57	@ 0x39
 800a0ca:	d027      	beq.n	800a11c <_dtoa_r+0xa84>
 800a0cc:	9a08      	ldr	r2, [sp, #32]
 800a0ce:	2a00      	cmp	r2, #0
 800a0d0:	dd01      	ble.n	800a0d6 <_dtoa_r+0xa3e>
 800a0d2:	9b06      	ldr	r3, [sp, #24]
 800a0d4:	3331      	adds	r3, #49	@ 0x31
 800a0d6:	f88b 3000 	strb.w	r3, [fp]
 800a0da:	e52e      	b.n	8009b3a <_dtoa_r+0x4a2>
 800a0dc:	4628      	mov	r0, r5
 800a0de:	e7b9      	b.n	800a054 <_dtoa_r+0x9bc>
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	e7e2      	b.n	800a0aa <_dtoa_r+0xa12>
 800a0e4:	9908      	ldr	r1, [sp, #32]
 800a0e6:	2900      	cmp	r1, #0
 800a0e8:	db04      	blt.n	800a0f4 <_dtoa_r+0xa5c>
 800a0ea:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800a0ec:	4301      	orrs	r1, r0
 800a0ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0f0:	4301      	orrs	r1, r0
 800a0f2:	d120      	bne.n	800a136 <_dtoa_r+0xa9e>
 800a0f4:	2a00      	cmp	r2, #0
 800a0f6:	ddee      	ble.n	800a0d6 <_dtoa_r+0xa3e>
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	9903      	ldr	r1, [sp, #12]
 800a0fc:	4648      	mov	r0, r9
 800a0fe:	9304      	str	r3, [sp, #16]
 800a100:	f000 fba2 	bl	800a848 <__lshift>
 800a104:	4621      	mov	r1, r4
 800a106:	9003      	str	r0, [sp, #12]
 800a108:	f000 fc0a 	bl	800a920 <__mcmp>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	9b04      	ldr	r3, [sp, #16]
 800a110:	dc02      	bgt.n	800a118 <_dtoa_r+0xa80>
 800a112:	d1e0      	bne.n	800a0d6 <_dtoa_r+0xa3e>
 800a114:	07da      	lsls	r2, r3, #31
 800a116:	d5de      	bpl.n	800a0d6 <_dtoa_r+0xa3e>
 800a118:	2b39      	cmp	r3, #57	@ 0x39
 800a11a:	d1da      	bne.n	800a0d2 <_dtoa_r+0xa3a>
 800a11c:	2339      	movs	r3, #57	@ 0x39
 800a11e:	f88b 3000 	strb.w	r3, [fp]
 800a122:	4633      	mov	r3, r6
 800a124:	461e      	mov	r6, r3
 800a126:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	2a39      	cmp	r2, #57	@ 0x39
 800a12e:	d04e      	beq.n	800a1ce <_dtoa_r+0xb36>
 800a130:	3201      	adds	r2, #1
 800a132:	701a      	strb	r2, [r3, #0]
 800a134:	e501      	b.n	8009b3a <_dtoa_r+0x4a2>
 800a136:	2a00      	cmp	r2, #0
 800a138:	dd03      	ble.n	800a142 <_dtoa_r+0xaaa>
 800a13a:	2b39      	cmp	r3, #57	@ 0x39
 800a13c:	d0ee      	beq.n	800a11c <_dtoa_r+0xa84>
 800a13e:	3301      	adds	r3, #1
 800a140:	e7c9      	b.n	800a0d6 <_dtoa_r+0xa3e>
 800a142:	9a04      	ldr	r2, [sp, #16]
 800a144:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a146:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a14a:	428a      	cmp	r2, r1
 800a14c:	d028      	beq.n	800a1a0 <_dtoa_r+0xb08>
 800a14e:	2300      	movs	r3, #0
 800a150:	220a      	movs	r2, #10
 800a152:	9903      	ldr	r1, [sp, #12]
 800a154:	4648      	mov	r0, r9
 800a156:	f000 f9d3 	bl	800a500 <__multadd>
 800a15a:	42af      	cmp	r7, r5
 800a15c:	9003      	str	r0, [sp, #12]
 800a15e:	f04f 0300 	mov.w	r3, #0
 800a162:	f04f 020a 	mov.w	r2, #10
 800a166:	4639      	mov	r1, r7
 800a168:	4648      	mov	r0, r9
 800a16a:	d107      	bne.n	800a17c <_dtoa_r+0xae4>
 800a16c:	f000 f9c8 	bl	800a500 <__multadd>
 800a170:	4607      	mov	r7, r0
 800a172:	4605      	mov	r5, r0
 800a174:	9b04      	ldr	r3, [sp, #16]
 800a176:	3301      	adds	r3, #1
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	e777      	b.n	800a06c <_dtoa_r+0x9d4>
 800a17c:	f000 f9c0 	bl	800a500 <__multadd>
 800a180:	4629      	mov	r1, r5
 800a182:	4607      	mov	r7, r0
 800a184:	2300      	movs	r3, #0
 800a186:	220a      	movs	r2, #10
 800a188:	4648      	mov	r0, r9
 800a18a:	f000 f9b9 	bl	800a500 <__multadd>
 800a18e:	4605      	mov	r5, r0
 800a190:	e7f0      	b.n	800a174 <_dtoa_r+0xadc>
 800a192:	f1bb 0f00 	cmp.w	fp, #0
 800a196:	bfcc      	ite	gt
 800a198:	465e      	movgt	r6, fp
 800a19a:	2601      	movle	r6, #1
 800a19c:	2700      	movs	r7, #0
 800a19e:	4456      	add	r6, sl
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	9903      	ldr	r1, [sp, #12]
 800a1a4:	4648      	mov	r0, r9
 800a1a6:	9304      	str	r3, [sp, #16]
 800a1a8:	f000 fb4e 	bl	800a848 <__lshift>
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	9003      	str	r0, [sp, #12]
 800a1b0:	f000 fbb6 	bl	800a920 <__mcmp>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	dcb4      	bgt.n	800a122 <_dtoa_r+0xa8a>
 800a1b8:	d102      	bne.n	800a1c0 <_dtoa_r+0xb28>
 800a1ba:	9b04      	ldr	r3, [sp, #16]
 800a1bc:	07db      	lsls	r3, r3, #31
 800a1be:	d4b0      	bmi.n	800a122 <_dtoa_r+0xa8a>
 800a1c0:	4633      	mov	r3, r6
 800a1c2:	461e      	mov	r6, r3
 800a1c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1c8:	2a30      	cmp	r2, #48	@ 0x30
 800a1ca:	d0fa      	beq.n	800a1c2 <_dtoa_r+0xb2a>
 800a1cc:	e4b5      	b.n	8009b3a <_dtoa_r+0x4a2>
 800a1ce:	459a      	cmp	sl, r3
 800a1d0:	d1a8      	bne.n	800a124 <_dtoa_r+0xa8c>
 800a1d2:	2331      	movs	r3, #49	@ 0x31
 800a1d4:	f108 0801 	add.w	r8, r8, #1
 800a1d8:	f88a 3000 	strb.w	r3, [sl]
 800a1dc:	e4ad      	b.n	8009b3a <_dtoa_r+0x4a2>
 800a1de:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a1e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a23c <_dtoa_r+0xba4>
 800a1e4:	b11b      	cbz	r3, 800a1ee <_dtoa_r+0xb56>
 800a1e6:	f10a 0308 	add.w	r3, sl, #8
 800a1ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a1ec:	6013      	str	r3, [r2, #0]
 800a1ee:	4650      	mov	r0, sl
 800a1f0:	b017      	add	sp, #92	@ 0x5c
 800a1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	f77f ae2e 	ble.w	8009e5a <_dtoa_r+0x7c2>
 800a1fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a200:	930a      	str	r3, [sp, #40]	@ 0x28
 800a202:	2001      	movs	r0, #1
 800a204:	e64d      	b.n	8009ea2 <_dtoa_r+0x80a>
 800a206:	f1bb 0f00 	cmp.w	fp, #0
 800a20a:	f77f aed9 	ble.w	8009fc0 <_dtoa_r+0x928>
 800a20e:	4656      	mov	r6, sl
 800a210:	4621      	mov	r1, r4
 800a212:	9803      	ldr	r0, [sp, #12]
 800a214:	f7ff f9b7 	bl	8009586 <quorem>
 800a218:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a21c:	f806 3b01 	strb.w	r3, [r6], #1
 800a220:	eba6 020a 	sub.w	r2, r6, sl
 800a224:	4593      	cmp	fp, r2
 800a226:	ddb4      	ble.n	800a192 <_dtoa_r+0xafa>
 800a228:	2300      	movs	r3, #0
 800a22a:	220a      	movs	r2, #10
 800a22c:	4648      	mov	r0, r9
 800a22e:	9903      	ldr	r1, [sp, #12]
 800a230:	f000 f966 	bl	800a500 <__multadd>
 800a234:	9003      	str	r0, [sp, #12]
 800a236:	e7eb      	b.n	800a210 <_dtoa_r+0xb78>
 800a238:	0800c552 	.word	0x0800c552
 800a23c:	0800c4d6 	.word	0x0800c4d6

0800a240 <_free_r>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	4605      	mov	r5, r0
 800a244:	2900      	cmp	r1, #0
 800a246:	d040      	beq.n	800a2ca <_free_r+0x8a>
 800a248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a24c:	1f0c      	subs	r4, r1, #4
 800a24e:	2b00      	cmp	r3, #0
 800a250:	bfb8      	it	lt
 800a252:	18e4      	addlt	r4, r4, r3
 800a254:	f000 f8e6 	bl	800a424 <__malloc_lock>
 800a258:	4a1c      	ldr	r2, [pc, #112]	@ (800a2cc <_free_r+0x8c>)
 800a25a:	6813      	ldr	r3, [r2, #0]
 800a25c:	b933      	cbnz	r3, 800a26c <_free_r+0x2c>
 800a25e:	6063      	str	r3, [r4, #4]
 800a260:	6014      	str	r4, [r2, #0]
 800a262:	4628      	mov	r0, r5
 800a264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a268:	f000 b8e2 	b.w	800a430 <__malloc_unlock>
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	d908      	bls.n	800a282 <_free_r+0x42>
 800a270:	6820      	ldr	r0, [r4, #0]
 800a272:	1821      	adds	r1, r4, r0
 800a274:	428b      	cmp	r3, r1
 800a276:	bf01      	itttt	eq
 800a278:	6819      	ldreq	r1, [r3, #0]
 800a27a:	685b      	ldreq	r3, [r3, #4]
 800a27c:	1809      	addeq	r1, r1, r0
 800a27e:	6021      	streq	r1, [r4, #0]
 800a280:	e7ed      	b.n	800a25e <_free_r+0x1e>
 800a282:	461a      	mov	r2, r3
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	b10b      	cbz	r3, 800a28c <_free_r+0x4c>
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d9fa      	bls.n	800a282 <_free_r+0x42>
 800a28c:	6811      	ldr	r1, [r2, #0]
 800a28e:	1850      	adds	r0, r2, r1
 800a290:	42a0      	cmp	r0, r4
 800a292:	d10b      	bne.n	800a2ac <_free_r+0x6c>
 800a294:	6820      	ldr	r0, [r4, #0]
 800a296:	4401      	add	r1, r0
 800a298:	1850      	adds	r0, r2, r1
 800a29a:	4283      	cmp	r3, r0
 800a29c:	6011      	str	r1, [r2, #0]
 800a29e:	d1e0      	bne.n	800a262 <_free_r+0x22>
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	4408      	add	r0, r1
 800a2a6:	6010      	str	r0, [r2, #0]
 800a2a8:	6053      	str	r3, [r2, #4]
 800a2aa:	e7da      	b.n	800a262 <_free_r+0x22>
 800a2ac:	d902      	bls.n	800a2b4 <_free_r+0x74>
 800a2ae:	230c      	movs	r3, #12
 800a2b0:	602b      	str	r3, [r5, #0]
 800a2b2:	e7d6      	b.n	800a262 <_free_r+0x22>
 800a2b4:	6820      	ldr	r0, [r4, #0]
 800a2b6:	1821      	adds	r1, r4, r0
 800a2b8:	428b      	cmp	r3, r1
 800a2ba:	bf01      	itttt	eq
 800a2bc:	6819      	ldreq	r1, [r3, #0]
 800a2be:	685b      	ldreq	r3, [r3, #4]
 800a2c0:	1809      	addeq	r1, r1, r0
 800a2c2:	6021      	streq	r1, [r4, #0]
 800a2c4:	6063      	str	r3, [r4, #4]
 800a2c6:	6054      	str	r4, [r2, #4]
 800a2c8:	e7cb      	b.n	800a262 <_free_r+0x22>
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	20000894 	.word	0x20000894

0800a2d0 <malloc>:
 800a2d0:	4b02      	ldr	r3, [pc, #8]	@ (800a2dc <malloc+0xc>)
 800a2d2:	4601      	mov	r1, r0
 800a2d4:	6818      	ldr	r0, [r3, #0]
 800a2d6:	f000 b825 	b.w	800a324 <_malloc_r>
 800a2da:	bf00      	nop
 800a2dc:	20000018 	.word	0x20000018

0800a2e0 <sbrk_aligned>:
 800a2e0:	b570      	push	{r4, r5, r6, lr}
 800a2e2:	4e0f      	ldr	r6, [pc, #60]	@ (800a320 <sbrk_aligned+0x40>)
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	6831      	ldr	r1, [r6, #0]
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	b911      	cbnz	r1, 800a2f2 <sbrk_aligned+0x12>
 800a2ec:	f000 fe3a 	bl	800af64 <_sbrk_r>
 800a2f0:	6030      	str	r0, [r6, #0]
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	f000 fe35 	bl	800af64 <_sbrk_r>
 800a2fa:	1c43      	adds	r3, r0, #1
 800a2fc:	d103      	bne.n	800a306 <sbrk_aligned+0x26>
 800a2fe:	f04f 34ff 	mov.w	r4, #4294967295
 800a302:	4620      	mov	r0, r4
 800a304:	bd70      	pop	{r4, r5, r6, pc}
 800a306:	1cc4      	adds	r4, r0, #3
 800a308:	f024 0403 	bic.w	r4, r4, #3
 800a30c:	42a0      	cmp	r0, r4
 800a30e:	d0f8      	beq.n	800a302 <sbrk_aligned+0x22>
 800a310:	1a21      	subs	r1, r4, r0
 800a312:	4628      	mov	r0, r5
 800a314:	f000 fe26 	bl	800af64 <_sbrk_r>
 800a318:	3001      	adds	r0, #1
 800a31a:	d1f2      	bne.n	800a302 <sbrk_aligned+0x22>
 800a31c:	e7ef      	b.n	800a2fe <sbrk_aligned+0x1e>
 800a31e:	bf00      	nop
 800a320:	20000890 	.word	0x20000890

0800a324 <_malloc_r>:
 800a324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a328:	1ccd      	adds	r5, r1, #3
 800a32a:	f025 0503 	bic.w	r5, r5, #3
 800a32e:	3508      	adds	r5, #8
 800a330:	2d0c      	cmp	r5, #12
 800a332:	bf38      	it	cc
 800a334:	250c      	movcc	r5, #12
 800a336:	2d00      	cmp	r5, #0
 800a338:	4606      	mov	r6, r0
 800a33a:	db01      	blt.n	800a340 <_malloc_r+0x1c>
 800a33c:	42a9      	cmp	r1, r5
 800a33e:	d904      	bls.n	800a34a <_malloc_r+0x26>
 800a340:	230c      	movs	r3, #12
 800a342:	6033      	str	r3, [r6, #0]
 800a344:	2000      	movs	r0, #0
 800a346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a34a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a420 <_malloc_r+0xfc>
 800a34e:	f000 f869 	bl	800a424 <__malloc_lock>
 800a352:	f8d8 3000 	ldr.w	r3, [r8]
 800a356:	461c      	mov	r4, r3
 800a358:	bb44      	cbnz	r4, 800a3ac <_malloc_r+0x88>
 800a35a:	4629      	mov	r1, r5
 800a35c:	4630      	mov	r0, r6
 800a35e:	f7ff ffbf 	bl	800a2e0 <sbrk_aligned>
 800a362:	1c43      	adds	r3, r0, #1
 800a364:	4604      	mov	r4, r0
 800a366:	d158      	bne.n	800a41a <_malloc_r+0xf6>
 800a368:	f8d8 4000 	ldr.w	r4, [r8]
 800a36c:	4627      	mov	r7, r4
 800a36e:	2f00      	cmp	r7, #0
 800a370:	d143      	bne.n	800a3fa <_malloc_r+0xd6>
 800a372:	2c00      	cmp	r4, #0
 800a374:	d04b      	beq.n	800a40e <_malloc_r+0xea>
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	4639      	mov	r1, r7
 800a37a:	4630      	mov	r0, r6
 800a37c:	eb04 0903 	add.w	r9, r4, r3
 800a380:	f000 fdf0 	bl	800af64 <_sbrk_r>
 800a384:	4581      	cmp	r9, r0
 800a386:	d142      	bne.n	800a40e <_malloc_r+0xea>
 800a388:	6821      	ldr	r1, [r4, #0]
 800a38a:	4630      	mov	r0, r6
 800a38c:	1a6d      	subs	r5, r5, r1
 800a38e:	4629      	mov	r1, r5
 800a390:	f7ff ffa6 	bl	800a2e0 <sbrk_aligned>
 800a394:	3001      	adds	r0, #1
 800a396:	d03a      	beq.n	800a40e <_malloc_r+0xea>
 800a398:	6823      	ldr	r3, [r4, #0]
 800a39a:	442b      	add	r3, r5
 800a39c:	6023      	str	r3, [r4, #0]
 800a39e:	f8d8 3000 	ldr.w	r3, [r8]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	bb62      	cbnz	r2, 800a400 <_malloc_r+0xdc>
 800a3a6:	f8c8 7000 	str.w	r7, [r8]
 800a3aa:	e00f      	b.n	800a3cc <_malloc_r+0xa8>
 800a3ac:	6822      	ldr	r2, [r4, #0]
 800a3ae:	1b52      	subs	r2, r2, r5
 800a3b0:	d420      	bmi.n	800a3f4 <_malloc_r+0xd0>
 800a3b2:	2a0b      	cmp	r2, #11
 800a3b4:	d917      	bls.n	800a3e6 <_malloc_r+0xc2>
 800a3b6:	1961      	adds	r1, r4, r5
 800a3b8:	42a3      	cmp	r3, r4
 800a3ba:	6025      	str	r5, [r4, #0]
 800a3bc:	bf18      	it	ne
 800a3be:	6059      	strne	r1, [r3, #4]
 800a3c0:	6863      	ldr	r3, [r4, #4]
 800a3c2:	bf08      	it	eq
 800a3c4:	f8c8 1000 	streq.w	r1, [r8]
 800a3c8:	5162      	str	r2, [r4, r5]
 800a3ca:	604b      	str	r3, [r1, #4]
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f000 f82f 	bl	800a430 <__malloc_unlock>
 800a3d2:	f104 000b 	add.w	r0, r4, #11
 800a3d6:	1d23      	adds	r3, r4, #4
 800a3d8:	f020 0007 	bic.w	r0, r0, #7
 800a3dc:	1ac2      	subs	r2, r0, r3
 800a3de:	bf1c      	itt	ne
 800a3e0:	1a1b      	subne	r3, r3, r0
 800a3e2:	50a3      	strne	r3, [r4, r2]
 800a3e4:	e7af      	b.n	800a346 <_malloc_r+0x22>
 800a3e6:	6862      	ldr	r2, [r4, #4]
 800a3e8:	42a3      	cmp	r3, r4
 800a3ea:	bf0c      	ite	eq
 800a3ec:	f8c8 2000 	streq.w	r2, [r8]
 800a3f0:	605a      	strne	r2, [r3, #4]
 800a3f2:	e7eb      	b.n	800a3cc <_malloc_r+0xa8>
 800a3f4:	4623      	mov	r3, r4
 800a3f6:	6864      	ldr	r4, [r4, #4]
 800a3f8:	e7ae      	b.n	800a358 <_malloc_r+0x34>
 800a3fa:	463c      	mov	r4, r7
 800a3fc:	687f      	ldr	r7, [r7, #4]
 800a3fe:	e7b6      	b.n	800a36e <_malloc_r+0x4a>
 800a400:	461a      	mov	r2, r3
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	42a3      	cmp	r3, r4
 800a406:	d1fb      	bne.n	800a400 <_malloc_r+0xdc>
 800a408:	2300      	movs	r3, #0
 800a40a:	6053      	str	r3, [r2, #4]
 800a40c:	e7de      	b.n	800a3cc <_malloc_r+0xa8>
 800a40e:	230c      	movs	r3, #12
 800a410:	4630      	mov	r0, r6
 800a412:	6033      	str	r3, [r6, #0]
 800a414:	f000 f80c 	bl	800a430 <__malloc_unlock>
 800a418:	e794      	b.n	800a344 <_malloc_r+0x20>
 800a41a:	6005      	str	r5, [r0, #0]
 800a41c:	e7d6      	b.n	800a3cc <_malloc_r+0xa8>
 800a41e:	bf00      	nop
 800a420:	20000894 	.word	0x20000894

0800a424 <__malloc_lock>:
 800a424:	4801      	ldr	r0, [pc, #4]	@ (800a42c <__malloc_lock+0x8>)
 800a426:	f7ff b890 	b.w	800954a <__retarget_lock_acquire_recursive>
 800a42a:	bf00      	nop
 800a42c:	2000088c 	.word	0x2000088c

0800a430 <__malloc_unlock>:
 800a430:	4801      	ldr	r0, [pc, #4]	@ (800a438 <__malloc_unlock+0x8>)
 800a432:	f7ff b88b 	b.w	800954c <__retarget_lock_release_recursive>
 800a436:	bf00      	nop
 800a438:	2000088c 	.word	0x2000088c

0800a43c <_Balloc>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	69c6      	ldr	r6, [r0, #28]
 800a440:	4604      	mov	r4, r0
 800a442:	460d      	mov	r5, r1
 800a444:	b976      	cbnz	r6, 800a464 <_Balloc+0x28>
 800a446:	2010      	movs	r0, #16
 800a448:	f7ff ff42 	bl	800a2d0 <malloc>
 800a44c:	4602      	mov	r2, r0
 800a44e:	61e0      	str	r0, [r4, #28]
 800a450:	b920      	cbnz	r0, 800a45c <_Balloc+0x20>
 800a452:	216b      	movs	r1, #107	@ 0x6b
 800a454:	4b17      	ldr	r3, [pc, #92]	@ (800a4b4 <_Balloc+0x78>)
 800a456:	4818      	ldr	r0, [pc, #96]	@ (800a4b8 <_Balloc+0x7c>)
 800a458:	f000 fd94 	bl	800af84 <__assert_func>
 800a45c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a460:	6006      	str	r6, [r0, #0]
 800a462:	60c6      	str	r6, [r0, #12]
 800a464:	69e6      	ldr	r6, [r4, #28]
 800a466:	68f3      	ldr	r3, [r6, #12]
 800a468:	b183      	cbz	r3, 800a48c <_Balloc+0x50>
 800a46a:	69e3      	ldr	r3, [r4, #28]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a472:	b9b8      	cbnz	r0, 800a4a4 <_Balloc+0x68>
 800a474:	2101      	movs	r1, #1
 800a476:	fa01 f605 	lsl.w	r6, r1, r5
 800a47a:	1d72      	adds	r2, r6, #5
 800a47c:	4620      	mov	r0, r4
 800a47e:	0092      	lsls	r2, r2, #2
 800a480:	f000 fd9e 	bl	800afc0 <_calloc_r>
 800a484:	b160      	cbz	r0, 800a4a0 <_Balloc+0x64>
 800a486:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a48a:	e00e      	b.n	800a4aa <_Balloc+0x6e>
 800a48c:	2221      	movs	r2, #33	@ 0x21
 800a48e:	2104      	movs	r1, #4
 800a490:	4620      	mov	r0, r4
 800a492:	f000 fd95 	bl	800afc0 <_calloc_r>
 800a496:	69e3      	ldr	r3, [r4, #28]
 800a498:	60f0      	str	r0, [r6, #12]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1e4      	bne.n	800a46a <_Balloc+0x2e>
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	bd70      	pop	{r4, r5, r6, pc}
 800a4a4:	6802      	ldr	r2, [r0, #0]
 800a4a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4b0:	e7f7      	b.n	800a4a2 <_Balloc+0x66>
 800a4b2:	bf00      	nop
 800a4b4:	0800c4e3 	.word	0x0800c4e3
 800a4b8:	0800c563 	.word	0x0800c563

0800a4bc <_Bfree>:
 800a4bc:	b570      	push	{r4, r5, r6, lr}
 800a4be:	69c6      	ldr	r6, [r0, #28]
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	b976      	cbnz	r6, 800a4e4 <_Bfree+0x28>
 800a4c6:	2010      	movs	r0, #16
 800a4c8:	f7ff ff02 	bl	800a2d0 <malloc>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	61e8      	str	r0, [r5, #28]
 800a4d0:	b920      	cbnz	r0, 800a4dc <_Bfree+0x20>
 800a4d2:	218f      	movs	r1, #143	@ 0x8f
 800a4d4:	4b08      	ldr	r3, [pc, #32]	@ (800a4f8 <_Bfree+0x3c>)
 800a4d6:	4809      	ldr	r0, [pc, #36]	@ (800a4fc <_Bfree+0x40>)
 800a4d8:	f000 fd54 	bl	800af84 <__assert_func>
 800a4dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4e0:	6006      	str	r6, [r0, #0]
 800a4e2:	60c6      	str	r6, [r0, #12]
 800a4e4:	b13c      	cbz	r4, 800a4f6 <_Bfree+0x3a>
 800a4e6:	69eb      	ldr	r3, [r5, #28]
 800a4e8:	6862      	ldr	r2, [r4, #4]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4f0:	6021      	str	r1, [r4, #0]
 800a4f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4f6:	bd70      	pop	{r4, r5, r6, pc}
 800a4f8:	0800c4e3 	.word	0x0800c4e3
 800a4fc:	0800c563 	.word	0x0800c563

0800a500 <__multadd>:
 800a500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a504:	4607      	mov	r7, r0
 800a506:	460c      	mov	r4, r1
 800a508:	461e      	mov	r6, r3
 800a50a:	2000      	movs	r0, #0
 800a50c:	690d      	ldr	r5, [r1, #16]
 800a50e:	f101 0c14 	add.w	ip, r1, #20
 800a512:	f8dc 3000 	ldr.w	r3, [ip]
 800a516:	3001      	adds	r0, #1
 800a518:	b299      	uxth	r1, r3
 800a51a:	fb02 6101 	mla	r1, r2, r1, r6
 800a51e:	0c1e      	lsrs	r6, r3, #16
 800a520:	0c0b      	lsrs	r3, r1, #16
 800a522:	fb02 3306 	mla	r3, r2, r6, r3
 800a526:	b289      	uxth	r1, r1
 800a528:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a52c:	4285      	cmp	r5, r0
 800a52e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a532:	f84c 1b04 	str.w	r1, [ip], #4
 800a536:	dcec      	bgt.n	800a512 <__multadd+0x12>
 800a538:	b30e      	cbz	r6, 800a57e <__multadd+0x7e>
 800a53a:	68a3      	ldr	r3, [r4, #8]
 800a53c:	42ab      	cmp	r3, r5
 800a53e:	dc19      	bgt.n	800a574 <__multadd+0x74>
 800a540:	6861      	ldr	r1, [r4, #4]
 800a542:	4638      	mov	r0, r7
 800a544:	3101      	adds	r1, #1
 800a546:	f7ff ff79 	bl	800a43c <_Balloc>
 800a54a:	4680      	mov	r8, r0
 800a54c:	b928      	cbnz	r0, 800a55a <__multadd+0x5a>
 800a54e:	4602      	mov	r2, r0
 800a550:	21ba      	movs	r1, #186	@ 0xba
 800a552:	4b0c      	ldr	r3, [pc, #48]	@ (800a584 <__multadd+0x84>)
 800a554:	480c      	ldr	r0, [pc, #48]	@ (800a588 <__multadd+0x88>)
 800a556:	f000 fd15 	bl	800af84 <__assert_func>
 800a55a:	6922      	ldr	r2, [r4, #16]
 800a55c:	f104 010c 	add.w	r1, r4, #12
 800a560:	3202      	adds	r2, #2
 800a562:	0092      	lsls	r2, r2, #2
 800a564:	300c      	adds	r0, #12
 800a566:	f7ff f800 	bl	800956a <memcpy>
 800a56a:	4621      	mov	r1, r4
 800a56c:	4638      	mov	r0, r7
 800a56e:	f7ff ffa5 	bl	800a4bc <_Bfree>
 800a572:	4644      	mov	r4, r8
 800a574:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a578:	3501      	adds	r5, #1
 800a57a:	615e      	str	r6, [r3, #20]
 800a57c:	6125      	str	r5, [r4, #16]
 800a57e:	4620      	mov	r0, r4
 800a580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a584:	0800c552 	.word	0x0800c552
 800a588:	0800c563 	.word	0x0800c563

0800a58c <__hi0bits>:
 800a58c:	4603      	mov	r3, r0
 800a58e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a592:	bf3a      	itte	cc
 800a594:	0403      	lslcc	r3, r0, #16
 800a596:	2010      	movcc	r0, #16
 800a598:	2000      	movcs	r0, #0
 800a59a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a59e:	bf3c      	itt	cc
 800a5a0:	021b      	lslcc	r3, r3, #8
 800a5a2:	3008      	addcc	r0, #8
 800a5a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5a8:	bf3c      	itt	cc
 800a5aa:	011b      	lslcc	r3, r3, #4
 800a5ac:	3004      	addcc	r0, #4
 800a5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5b2:	bf3c      	itt	cc
 800a5b4:	009b      	lslcc	r3, r3, #2
 800a5b6:	3002      	addcc	r0, #2
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	db05      	blt.n	800a5c8 <__hi0bits+0x3c>
 800a5bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a5c0:	f100 0001 	add.w	r0, r0, #1
 800a5c4:	bf08      	it	eq
 800a5c6:	2020      	moveq	r0, #32
 800a5c8:	4770      	bx	lr

0800a5ca <__lo0bits>:
 800a5ca:	6803      	ldr	r3, [r0, #0]
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	f013 0007 	ands.w	r0, r3, #7
 800a5d2:	d00b      	beq.n	800a5ec <__lo0bits+0x22>
 800a5d4:	07d9      	lsls	r1, r3, #31
 800a5d6:	d421      	bmi.n	800a61c <__lo0bits+0x52>
 800a5d8:	0798      	lsls	r0, r3, #30
 800a5da:	bf49      	itett	mi
 800a5dc:	085b      	lsrmi	r3, r3, #1
 800a5de:	089b      	lsrpl	r3, r3, #2
 800a5e0:	2001      	movmi	r0, #1
 800a5e2:	6013      	strmi	r3, [r2, #0]
 800a5e4:	bf5c      	itt	pl
 800a5e6:	2002      	movpl	r0, #2
 800a5e8:	6013      	strpl	r3, [r2, #0]
 800a5ea:	4770      	bx	lr
 800a5ec:	b299      	uxth	r1, r3
 800a5ee:	b909      	cbnz	r1, 800a5f4 <__lo0bits+0x2a>
 800a5f0:	2010      	movs	r0, #16
 800a5f2:	0c1b      	lsrs	r3, r3, #16
 800a5f4:	b2d9      	uxtb	r1, r3
 800a5f6:	b909      	cbnz	r1, 800a5fc <__lo0bits+0x32>
 800a5f8:	3008      	adds	r0, #8
 800a5fa:	0a1b      	lsrs	r3, r3, #8
 800a5fc:	0719      	lsls	r1, r3, #28
 800a5fe:	bf04      	itt	eq
 800a600:	091b      	lsreq	r3, r3, #4
 800a602:	3004      	addeq	r0, #4
 800a604:	0799      	lsls	r1, r3, #30
 800a606:	bf04      	itt	eq
 800a608:	089b      	lsreq	r3, r3, #2
 800a60a:	3002      	addeq	r0, #2
 800a60c:	07d9      	lsls	r1, r3, #31
 800a60e:	d403      	bmi.n	800a618 <__lo0bits+0x4e>
 800a610:	085b      	lsrs	r3, r3, #1
 800a612:	f100 0001 	add.w	r0, r0, #1
 800a616:	d003      	beq.n	800a620 <__lo0bits+0x56>
 800a618:	6013      	str	r3, [r2, #0]
 800a61a:	4770      	bx	lr
 800a61c:	2000      	movs	r0, #0
 800a61e:	4770      	bx	lr
 800a620:	2020      	movs	r0, #32
 800a622:	4770      	bx	lr

0800a624 <__i2b>:
 800a624:	b510      	push	{r4, lr}
 800a626:	460c      	mov	r4, r1
 800a628:	2101      	movs	r1, #1
 800a62a:	f7ff ff07 	bl	800a43c <_Balloc>
 800a62e:	4602      	mov	r2, r0
 800a630:	b928      	cbnz	r0, 800a63e <__i2b+0x1a>
 800a632:	f240 1145 	movw	r1, #325	@ 0x145
 800a636:	4b04      	ldr	r3, [pc, #16]	@ (800a648 <__i2b+0x24>)
 800a638:	4804      	ldr	r0, [pc, #16]	@ (800a64c <__i2b+0x28>)
 800a63a:	f000 fca3 	bl	800af84 <__assert_func>
 800a63e:	2301      	movs	r3, #1
 800a640:	6144      	str	r4, [r0, #20]
 800a642:	6103      	str	r3, [r0, #16]
 800a644:	bd10      	pop	{r4, pc}
 800a646:	bf00      	nop
 800a648:	0800c552 	.word	0x0800c552
 800a64c:	0800c563 	.word	0x0800c563

0800a650 <__multiply>:
 800a650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a654:	4617      	mov	r7, r2
 800a656:	690a      	ldr	r2, [r1, #16]
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	4689      	mov	r9, r1
 800a65c:	429a      	cmp	r2, r3
 800a65e:	bfa2      	ittt	ge
 800a660:	463b      	movge	r3, r7
 800a662:	460f      	movge	r7, r1
 800a664:	4699      	movge	r9, r3
 800a666:	693d      	ldr	r5, [r7, #16]
 800a668:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	6879      	ldr	r1, [r7, #4]
 800a670:	eb05 060a 	add.w	r6, r5, sl
 800a674:	42b3      	cmp	r3, r6
 800a676:	b085      	sub	sp, #20
 800a678:	bfb8      	it	lt
 800a67a:	3101      	addlt	r1, #1
 800a67c:	f7ff fede 	bl	800a43c <_Balloc>
 800a680:	b930      	cbnz	r0, 800a690 <__multiply+0x40>
 800a682:	4602      	mov	r2, r0
 800a684:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a688:	4b40      	ldr	r3, [pc, #256]	@ (800a78c <__multiply+0x13c>)
 800a68a:	4841      	ldr	r0, [pc, #260]	@ (800a790 <__multiply+0x140>)
 800a68c:	f000 fc7a 	bl	800af84 <__assert_func>
 800a690:	f100 0414 	add.w	r4, r0, #20
 800a694:	4623      	mov	r3, r4
 800a696:	2200      	movs	r2, #0
 800a698:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a69c:	4573      	cmp	r3, lr
 800a69e:	d320      	bcc.n	800a6e2 <__multiply+0x92>
 800a6a0:	f107 0814 	add.w	r8, r7, #20
 800a6a4:	f109 0114 	add.w	r1, r9, #20
 800a6a8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a6ac:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a6b0:	9302      	str	r3, [sp, #8]
 800a6b2:	1beb      	subs	r3, r5, r7
 800a6b4:	3b15      	subs	r3, #21
 800a6b6:	f023 0303 	bic.w	r3, r3, #3
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	3715      	adds	r7, #21
 800a6be:	42bd      	cmp	r5, r7
 800a6c0:	bf38      	it	cc
 800a6c2:	2304      	movcc	r3, #4
 800a6c4:	9301      	str	r3, [sp, #4]
 800a6c6:	9b02      	ldr	r3, [sp, #8]
 800a6c8:	9103      	str	r1, [sp, #12]
 800a6ca:	428b      	cmp	r3, r1
 800a6cc:	d80c      	bhi.n	800a6e8 <__multiply+0x98>
 800a6ce:	2e00      	cmp	r6, #0
 800a6d0:	dd03      	ble.n	800a6da <__multiply+0x8a>
 800a6d2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d055      	beq.n	800a786 <__multiply+0x136>
 800a6da:	6106      	str	r6, [r0, #16]
 800a6dc:	b005      	add	sp, #20
 800a6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e2:	f843 2b04 	str.w	r2, [r3], #4
 800a6e6:	e7d9      	b.n	800a69c <__multiply+0x4c>
 800a6e8:	f8b1 a000 	ldrh.w	sl, [r1]
 800a6ec:	f1ba 0f00 	cmp.w	sl, #0
 800a6f0:	d01f      	beq.n	800a732 <__multiply+0xe2>
 800a6f2:	46c4      	mov	ip, r8
 800a6f4:	46a1      	mov	r9, r4
 800a6f6:	2700      	movs	r7, #0
 800a6f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a6fc:	f8d9 3000 	ldr.w	r3, [r9]
 800a700:	fa1f fb82 	uxth.w	fp, r2
 800a704:	b29b      	uxth	r3, r3
 800a706:	fb0a 330b 	mla	r3, sl, fp, r3
 800a70a:	443b      	add	r3, r7
 800a70c:	f8d9 7000 	ldr.w	r7, [r9]
 800a710:	0c12      	lsrs	r2, r2, #16
 800a712:	0c3f      	lsrs	r7, r7, #16
 800a714:	fb0a 7202 	mla	r2, sl, r2, r7
 800a718:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a722:	4565      	cmp	r5, ip
 800a724:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a728:	f849 3b04 	str.w	r3, [r9], #4
 800a72c:	d8e4      	bhi.n	800a6f8 <__multiply+0xa8>
 800a72e:	9b01      	ldr	r3, [sp, #4]
 800a730:	50e7      	str	r7, [r4, r3]
 800a732:	9b03      	ldr	r3, [sp, #12]
 800a734:	3104      	adds	r1, #4
 800a736:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a73a:	f1b9 0f00 	cmp.w	r9, #0
 800a73e:	d020      	beq.n	800a782 <__multiply+0x132>
 800a740:	4647      	mov	r7, r8
 800a742:	46a4      	mov	ip, r4
 800a744:	f04f 0a00 	mov.w	sl, #0
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	f8b7 b000 	ldrh.w	fp, [r7]
 800a74e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a752:	b29b      	uxth	r3, r3
 800a754:	fb09 220b 	mla	r2, r9, fp, r2
 800a758:	4452      	add	r2, sl
 800a75a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a75e:	f84c 3b04 	str.w	r3, [ip], #4
 800a762:	f857 3b04 	ldr.w	r3, [r7], #4
 800a766:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a76a:	f8bc 3000 	ldrh.w	r3, [ip]
 800a76e:	42bd      	cmp	r5, r7
 800a770:	fb09 330a 	mla	r3, r9, sl, r3
 800a774:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a778:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a77c:	d8e5      	bhi.n	800a74a <__multiply+0xfa>
 800a77e:	9a01      	ldr	r2, [sp, #4]
 800a780:	50a3      	str	r3, [r4, r2]
 800a782:	3404      	adds	r4, #4
 800a784:	e79f      	b.n	800a6c6 <__multiply+0x76>
 800a786:	3e01      	subs	r6, #1
 800a788:	e7a1      	b.n	800a6ce <__multiply+0x7e>
 800a78a:	bf00      	nop
 800a78c:	0800c552 	.word	0x0800c552
 800a790:	0800c563 	.word	0x0800c563

0800a794 <__pow5mult>:
 800a794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a798:	4615      	mov	r5, r2
 800a79a:	f012 0203 	ands.w	r2, r2, #3
 800a79e:	4607      	mov	r7, r0
 800a7a0:	460e      	mov	r6, r1
 800a7a2:	d007      	beq.n	800a7b4 <__pow5mult+0x20>
 800a7a4:	4c25      	ldr	r4, [pc, #148]	@ (800a83c <__pow5mult+0xa8>)
 800a7a6:	3a01      	subs	r2, #1
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7ae:	f7ff fea7 	bl	800a500 <__multadd>
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	10ad      	asrs	r5, r5, #2
 800a7b6:	d03d      	beq.n	800a834 <__pow5mult+0xa0>
 800a7b8:	69fc      	ldr	r4, [r7, #28]
 800a7ba:	b97c      	cbnz	r4, 800a7dc <__pow5mult+0x48>
 800a7bc:	2010      	movs	r0, #16
 800a7be:	f7ff fd87 	bl	800a2d0 <malloc>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	61f8      	str	r0, [r7, #28]
 800a7c6:	b928      	cbnz	r0, 800a7d4 <__pow5mult+0x40>
 800a7c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a7cc:	4b1c      	ldr	r3, [pc, #112]	@ (800a840 <__pow5mult+0xac>)
 800a7ce:	481d      	ldr	r0, [pc, #116]	@ (800a844 <__pow5mult+0xb0>)
 800a7d0:	f000 fbd8 	bl	800af84 <__assert_func>
 800a7d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7d8:	6004      	str	r4, [r0, #0]
 800a7da:	60c4      	str	r4, [r0, #12]
 800a7dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a7e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7e4:	b94c      	cbnz	r4, 800a7fa <__pow5mult+0x66>
 800a7e6:	f240 2171 	movw	r1, #625	@ 0x271
 800a7ea:	4638      	mov	r0, r7
 800a7ec:	f7ff ff1a 	bl	800a624 <__i2b>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7f8:	6003      	str	r3, [r0, #0]
 800a7fa:	f04f 0900 	mov.w	r9, #0
 800a7fe:	07eb      	lsls	r3, r5, #31
 800a800:	d50a      	bpl.n	800a818 <__pow5mult+0x84>
 800a802:	4631      	mov	r1, r6
 800a804:	4622      	mov	r2, r4
 800a806:	4638      	mov	r0, r7
 800a808:	f7ff ff22 	bl	800a650 <__multiply>
 800a80c:	4680      	mov	r8, r0
 800a80e:	4631      	mov	r1, r6
 800a810:	4638      	mov	r0, r7
 800a812:	f7ff fe53 	bl	800a4bc <_Bfree>
 800a816:	4646      	mov	r6, r8
 800a818:	106d      	asrs	r5, r5, #1
 800a81a:	d00b      	beq.n	800a834 <__pow5mult+0xa0>
 800a81c:	6820      	ldr	r0, [r4, #0]
 800a81e:	b938      	cbnz	r0, 800a830 <__pow5mult+0x9c>
 800a820:	4622      	mov	r2, r4
 800a822:	4621      	mov	r1, r4
 800a824:	4638      	mov	r0, r7
 800a826:	f7ff ff13 	bl	800a650 <__multiply>
 800a82a:	6020      	str	r0, [r4, #0]
 800a82c:	f8c0 9000 	str.w	r9, [r0]
 800a830:	4604      	mov	r4, r0
 800a832:	e7e4      	b.n	800a7fe <__pow5mult+0x6a>
 800a834:	4630      	mov	r0, r6
 800a836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a83a:	bf00      	nop
 800a83c:	0800c614 	.word	0x0800c614
 800a840:	0800c4e3 	.word	0x0800c4e3
 800a844:	0800c563 	.word	0x0800c563

0800a848 <__lshift>:
 800a848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a84c:	460c      	mov	r4, r1
 800a84e:	4607      	mov	r7, r0
 800a850:	4691      	mov	r9, r2
 800a852:	6923      	ldr	r3, [r4, #16]
 800a854:	6849      	ldr	r1, [r1, #4]
 800a856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a85a:	68a3      	ldr	r3, [r4, #8]
 800a85c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a860:	f108 0601 	add.w	r6, r8, #1
 800a864:	42b3      	cmp	r3, r6
 800a866:	db0b      	blt.n	800a880 <__lshift+0x38>
 800a868:	4638      	mov	r0, r7
 800a86a:	f7ff fde7 	bl	800a43c <_Balloc>
 800a86e:	4605      	mov	r5, r0
 800a870:	b948      	cbnz	r0, 800a886 <__lshift+0x3e>
 800a872:	4602      	mov	r2, r0
 800a874:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a878:	4b27      	ldr	r3, [pc, #156]	@ (800a918 <__lshift+0xd0>)
 800a87a:	4828      	ldr	r0, [pc, #160]	@ (800a91c <__lshift+0xd4>)
 800a87c:	f000 fb82 	bl	800af84 <__assert_func>
 800a880:	3101      	adds	r1, #1
 800a882:	005b      	lsls	r3, r3, #1
 800a884:	e7ee      	b.n	800a864 <__lshift+0x1c>
 800a886:	2300      	movs	r3, #0
 800a888:	f100 0114 	add.w	r1, r0, #20
 800a88c:	f100 0210 	add.w	r2, r0, #16
 800a890:	4618      	mov	r0, r3
 800a892:	4553      	cmp	r3, sl
 800a894:	db33      	blt.n	800a8fe <__lshift+0xb6>
 800a896:	6920      	ldr	r0, [r4, #16]
 800a898:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a89c:	f104 0314 	add.w	r3, r4, #20
 800a8a0:	f019 091f 	ands.w	r9, r9, #31
 800a8a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8ac:	d02b      	beq.n	800a906 <__lshift+0xbe>
 800a8ae:	468a      	mov	sl, r1
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f1c9 0e20 	rsb	lr, r9, #32
 800a8b6:	6818      	ldr	r0, [r3, #0]
 800a8b8:	fa00 f009 	lsl.w	r0, r0, r9
 800a8bc:	4310      	orrs	r0, r2
 800a8be:	f84a 0b04 	str.w	r0, [sl], #4
 800a8c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8c6:	459c      	cmp	ip, r3
 800a8c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8cc:	d8f3      	bhi.n	800a8b6 <__lshift+0x6e>
 800a8ce:	ebac 0304 	sub.w	r3, ip, r4
 800a8d2:	3b15      	subs	r3, #21
 800a8d4:	f023 0303 	bic.w	r3, r3, #3
 800a8d8:	3304      	adds	r3, #4
 800a8da:	f104 0015 	add.w	r0, r4, #21
 800a8de:	4560      	cmp	r0, ip
 800a8e0:	bf88      	it	hi
 800a8e2:	2304      	movhi	r3, #4
 800a8e4:	50ca      	str	r2, [r1, r3]
 800a8e6:	b10a      	cbz	r2, 800a8ec <__lshift+0xa4>
 800a8e8:	f108 0602 	add.w	r6, r8, #2
 800a8ec:	3e01      	subs	r6, #1
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	612e      	str	r6, [r5, #16]
 800a8f4:	f7ff fde2 	bl	800a4bc <_Bfree>
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800a902:	3301      	adds	r3, #1
 800a904:	e7c5      	b.n	800a892 <__lshift+0x4a>
 800a906:	3904      	subs	r1, #4
 800a908:	f853 2b04 	ldr.w	r2, [r3], #4
 800a90c:	459c      	cmp	ip, r3
 800a90e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a912:	d8f9      	bhi.n	800a908 <__lshift+0xc0>
 800a914:	e7ea      	b.n	800a8ec <__lshift+0xa4>
 800a916:	bf00      	nop
 800a918:	0800c552 	.word	0x0800c552
 800a91c:	0800c563 	.word	0x0800c563

0800a920 <__mcmp>:
 800a920:	4603      	mov	r3, r0
 800a922:	690a      	ldr	r2, [r1, #16]
 800a924:	6900      	ldr	r0, [r0, #16]
 800a926:	b530      	push	{r4, r5, lr}
 800a928:	1a80      	subs	r0, r0, r2
 800a92a:	d10e      	bne.n	800a94a <__mcmp+0x2a>
 800a92c:	3314      	adds	r3, #20
 800a92e:	3114      	adds	r1, #20
 800a930:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a934:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a938:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a93c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a940:	4295      	cmp	r5, r2
 800a942:	d003      	beq.n	800a94c <__mcmp+0x2c>
 800a944:	d205      	bcs.n	800a952 <__mcmp+0x32>
 800a946:	f04f 30ff 	mov.w	r0, #4294967295
 800a94a:	bd30      	pop	{r4, r5, pc}
 800a94c:	42a3      	cmp	r3, r4
 800a94e:	d3f3      	bcc.n	800a938 <__mcmp+0x18>
 800a950:	e7fb      	b.n	800a94a <__mcmp+0x2a>
 800a952:	2001      	movs	r0, #1
 800a954:	e7f9      	b.n	800a94a <__mcmp+0x2a>
	...

0800a958 <__mdiff>:
 800a958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95c:	4689      	mov	r9, r1
 800a95e:	4606      	mov	r6, r0
 800a960:	4611      	mov	r1, r2
 800a962:	4648      	mov	r0, r9
 800a964:	4614      	mov	r4, r2
 800a966:	f7ff ffdb 	bl	800a920 <__mcmp>
 800a96a:	1e05      	subs	r5, r0, #0
 800a96c:	d112      	bne.n	800a994 <__mdiff+0x3c>
 800a96e:	4629      	mov	r1, r5
 800a970:	4630      	mov	r0, r6
 800a972:	f7ff fd63 	bl	800a43c <_Balloc>
 800a976:	4602      	mov	r2, r0
 800a978:	b928      	cbnz	r0, 800a986 <__mdiff+0x2e>
 800a97a:	f240 2137 	movw	r1, #567	@ 0x237
 800a97e:	4b3e      	ldr	r3, [pc, #248]	@ (800aa78 <__mdiff+0x120>)
 800a980:	483e      	ldr	r0, [pc, #248]	@ (800aa7c <__mdiff+0x124>)
 800a982:	f000 faff 	bl	800af84 <__assert_func>
 800a986:	2301      	movs	r3, #1
 800a988:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a98c:	4610      	mov	r0, r2
 800a98e:	b003      	add	sp, #12
 800a990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a994:	bfbc      	itt	lt
 800a996:	464b      	movlt	r3, r9
 800a998:	46a1      	movlt	r9, r4
 800a99a:	4630      	mov	r0, r6
 800a99c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a9a0:	bfba      	itte	lt
 800a9a2:	461c      	movlt	r4, r3
 800a9a4:	2501      	movlt	r5, #1
 800a9a6:	2500      	movge	r5, #0
 800a9a8:	f7ff fd48 	bl	800a43c <_Balloc>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	b918      	cbnz	r0, 800a9b8 <__mdiff+0x60>
 800a9b0:	f240 2145 	movw	r1, #581	@ 0x245
 800a9b4:	4b30      	ldr	r3, [pc, #192]	@ (800aa78 <__mdiff+0x120>)
 800a9b6:	e7e3      	b.n	800a980 <__mdiff+0x28>
 800a9b8:	f100 0b14 	add.w	fp, r0, #20
 800a9bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a9c0:	f109 0310 	add.w	r3, r9, #16
 800a9c4:	60c5      	str	r5, [r0, #12]
 800a9c6:	f04f 0c00 	mov.w	ip, #0
 800a9ca:	f109 0514 	add.w	r5, r9, #20
 800a9ce:	46d9      	mov	r9, fp
 800a9d0:	6926      	ldr	r6, [r4, #16]
 800a9d2:	f104 0e14 	add.w	lr, r4, #20
 800a9d6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a9da:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a9de:	9301      	str	r3, [sp, #4]
 800a9e0:	9b01      	ldr	r3, [sp, #4]
 800a9e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a9e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a9ea:	b281      	uxth	r1, r0
 800a9ec:	9301      	str	r3, [sp, #4]
 800a9ee:	fa1f f38a 	uxth.w	r3, sl
 800a9f2:	1a5b      	subs	r3, r3, r1
 800a9f4:	0c00      	lsrs	r0, r0, #16
 800a9f6:	4463      	add	r3, ip
 800a9f8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a9fc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa06:	4576      	cmp	r6, lr
 800aa08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa0c:	f849 3b04 	str.w	r3, [r9], #4
 800aa10:	d8e6      	bhi.n	800a9e0 <__mdiff+0x88>
 800aa12:	1b33      	subs	r3, r6, r4
 800aa14:	3b15      	subs	r3, #21
 800aa16:	f023 0303 	bic.w	r3, r3, #3
 800aa1a:	3415      	adds	r4, #21
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	42a6      	cmp	r6, r4
 800aa20:	bf38      	it	cc
 800aa22:	2304      	movcc	r3, #4
 800aa24:	441d      	add	r5, r3
 800aa26:	445b      	add	r3, fp
 800aa28:	461e      	mov	r6, r3
 800aa2a:	462c      	mov	r4, r5
 800aa2c:	4544      	cmp	r4, r8
 800aa2e:	d30e      	bcc.n	800aa4e <__mdiff+0xf6>
 800aa30:	f108 0103 	add.w	r1, r8, #3
 800aa34:	1b49      	subs	r1, r1, r5
 800aa36:	f021 0103 	bic.w	r1, r1, #3
 800aa3a:	3d03      	subs	r5, #3
 800aa3c:	45a8      	cmp	r8, r5
 800aa3e:	bf38      	it	cc
 800aa40:	2100      	movcc	r1, #0
 800aa42:	440b      	add	r3, r1
 800aa44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa48:	b199      	cbz	r1, 800aa72 <__mdiff+0x11a>
 800aa4a:	6117      	str	r7, [r2, #16]
 800aa4c:	e79e      	b.n	800a98c <__mdiff+0x34>
 800aa4e:	46e6      	mov	lr, ip
 800aa50:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa54:	fa1f fc81 	uxth.w	ip, r1
 800aa58:	44f4      	add	ip, lr
 800aa5a:	0c08      	lsrs	r0, r1, #16
 800aa5c:	4471      	add	r1, lr
 800aa5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa62:	b289      	uxth	r1, r1
 800aa64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa6c:	f846 1b04 	str.w	r1, [r6], #4
 800aa70:	e7dc      	b.n	800aa2c <__mdiff+0xd4>
 800aa72:	3f01      	subs	r7, #1
 800aa74:	e7e6      	b.n	800aa44 <__mdiff+0xec>
 800aa76:	bf00      	nop
 800aa78:	0800c552 	.word	0x0800c552
 800aa7c:	0800c563 	.word	0x0800c563

0800aa80 <__d2b>:
 800aa80:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800aa84:	2101      	movs	r1, #1
 800aa86:	4690      	mov	r8, r2
 800aa88:	4699      	mov	r9, r3
 800aa8a:	9e08      	ldr	r6, [sp, #32]
 800aa8c:	f7ff fcd6 	bl	800a43c <_Balloc>
 800aa90:	4604      	mov	r4, r0
 800aa92:	b930      	cbnz	r0, 800aaa2 <__d2b+0x22>
 800aa94:	4602      	mov	r2, r0
 800aa96:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa9a:	4b23      	ldr	r3, [pc, #140]	@ (800ab28 <__d2b+0xa8>)
 800aa9c:	4823      	ldr	r0, [pc, #140]	@ (800ab2c <__d2b+0xac>)
 800aa9e:	f000 fa71 	bl	800af84 <__assert_func>
 800aaa2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aaa6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aaaa:	b10d      	cbz	r5, 800aab0 <__d2b+0x30>
 800aaac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aab0:	9301      	str	r3, [sp, #4]
 800aab2:	f1b8 0300 	subs.w	r3, r8, #0
 800aab6:	d024      	beq.n	800ab02 <__d2b+0x82>
 800aab8:	4668      	mov	r0, sp
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	f7ff fd85 	bl	800a5ca <__lo0bits>
 800aac0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aac4:	b1d8      	cbz	r0, 800aafe <__d2b+0x7e>
 800aac6:	f1c0 0320 	rsb	r3, r0, #32
 800aaca:	fa02 f303 	lsl.w	r3, r2, r3
 800aace:	430b      	orrs	r3, r1
 800aad0:	40c2      	lsrs	r2, r0
 800aad2:	6163      	str	r3, [r4, #20]
 800aad4:	9201      	str	r2, [sp, #4]
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	bf0c      	ite	eq
 800aadc:	2201      	moveq	r2, #1
 800aade:	2202      	movne	r2, #2
 800aae0:	61a3      	str	r3, [r4, #24]
 800aae2:	6122      	str	r2, [r4, #16]
 800aae4:	b1ad      	cbz	r5, 800ab12 <__d2b+0x92>
 800aae6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aaea:	4405      	add	r5, r0
 800aaec:	6035      	str	r5, [r6, #0]
 800aaee:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aaf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf4:	6018      	str	r0, [r3, #0]
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	b002      	add	sp, #8
 800aafa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800aafe:	6161      	str	r1, [r4, #20]
 800ab00:	e7e9      	b.n	800aad6 <__d2b+0x56>
 800ab02:	a801      	add	r0, sp, #4
 800ab04:	f7ff fd61 	bl	800a5ca <__lo0bits>
 800ab08:	9b01      	ldr	r3, [sp, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	6163      	str	r3, [r4, #20]
 800ab0e:	3020      	adds	r0, #32
 800ab10:	e7e7      	b.n	800aae2 <__d2b+0x62>
 800ab12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab1a:	6030      	str	r0, [r6, #0]
 800ab1c:	6918      	ldr	r0, [r3, #16]
 800ab1e:	f7ff fd35 	bl	800a58c <__hi0bits>
 800ab22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab26:	e7e4      	b.n	800aaf2 <__d2b+0x72>
 800ab28:	0800c552 	.word	0x0800c552
 800ab2c:	0800c563 	.word	0x0800c563

0800ab30 <__ssputs_r>:
 800ab30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab34:	461f      	mov	r7, r3
 800ab36:	688e      	ldr	r6, [r1, #8]
 800ab38:	4682      	mov	sl, r0
 800ab3a:	42be      	cmp	r6, r7
 800ab3c:	460c      	mov	r4, r1
 800ab3e:	4690      	mov	r8, r2
 800ab40:	680b      	ldr	r3, [r1, #0]
 800ab42:	d82d      	bhi.n	800aba0 <__ssputs_r+0x70>
 800ab44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab4c:	d026      	beq.n	800ab9c <__ssputs_r+0x6c>
 800ab4e:	6965      	ldr	r5, [r4, #20]
 800ab50:	6909      	ldr	r1, [r1, #16]
 800ab52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab56:	eba3 0901 	sub.w	r9, r3, r1
 800ab5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab5e:	1c7b      	adds	r3, r7, #1
 800ab60:	444b      	add	r3, r9
 800ab62:	106d      	asrs	r5, r5, #1
 800ab64:	429d      	cmp	r5, r3
 800ab66:	bf38      	it	cc
 800ab68:	461d      	movcc	r5, r3
 800ab6a:	0553      	lsls	r3, r2, #21
 800ab6c:	d527      	bpl.n	800abbe <__ssputs_r+0x8e>
 800ab6e:	4629      	mov	r1, r5
 800ab70:	f7ff fbd8 	bl	800a324 <_malloc_r>
 800ab74:	4606      	mov	r6, r0
 800ab76:	b360      	cbz	r0, 800abd2 <__ssputs_r+0xa2>
 800ab78:	464a      	mov	r2, r9
 800ab7a:	6921      	ldr	r1, [r4, #16]
 800ab7c:	f7fe fcf5 	bl	800956a <memcpy>
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab8a:	81a3      	strh	r3, [r4, #12]
 800ab8c:	6126      	str	r6, [r4, #16]
 800ab8e:	444e      	add	r6, r9
 800ab90:	6026      	str	r6, [r4, #0]
 800ab92:	463e      	mov	r6, r7
 800ab94:	6165      	str	r5, [r4, #20]
 800ab96:	eba5 0509 	sub.w	r5, r5, r9
 800ab9a:	60a5      	str	r5, [r4, #8]
 800ab9c:	42be      	cmp	r6, r7
 800ab9e:	d900      	bls.n	800aba2 <__ssputs_r+0x72>
 800aba0:	463e      	mov	r6, r7
 800aba2:	4632      	mov	r2, r6
 800aba4:	4641      	mov	r1, r8
 800aba6:	6820      	ldr	r0, [r4, #0]
 800aba8:	f000 f9c2 	bl	800af30 <memmove>
 800abac:	2000      	movs	r0, #0
 800abae:	68a3      	ldr	r3, [r4, #8]
 800abb0:	1b9b      	subs	r3, r3, r6
 800abb2:	60a3      	str	r3, [r4, #8]
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	4433      	add	r3, r6
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abbe:	462a      	mov	r2, r5
 800abc0:	f000 fa24 	bl	800b00c <_realloc_r>
 800abc4:	4606      	mov	r6, r0
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d1e0      	bne.n	800ab8c <__ssputs_r+0x5c>
 800abca:	4650      	mov	r0, sl
 800abcc:	6921      	ldr	r1, [r4, #16]
 800abce:	f7ff fb37 	bl	800a240 <_free_r>
 800abd2:	230c      	movs	r3, #12
 800abd4:	f8ca 3000 	str.w	r3, [sl]
 800abd8:	89a3      	ldrh	r3, [r4, #12]
 800abda:	f04f 30ff 	mov.w	r0, #4294967295
 800abde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abe2:	81a3      	strh	r3, [r4, #12]
 800abe4:	e7e9      	b.n	800abba <__ssputs_r+0x8a>
	...

0800abe8 <_svfiprintf_r>:
 800abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	4698      	mov	r8, r3
 800abee:	898b      	ldrh	r3, [r1, #12]
 800abf0:	4607      	mov	r7, r0
 800abf2:	061b      	lsls	r3, r3, #24
 800abf4:	460d      	mov	r5, r1
 800abf6:	4614      	mov	r4, r2
 800abf8:	b09d      	sub	sp, #116	@ 0x74
 800abfa:	d510      	bpl.n	800ac1e <_svfiprintf_r+0x36>
 800abfc:	690b      	ldr	r3, [r1, #16]
 800abfe:	b973      	cbnz	r3, 800ac1e <_svfiprintf_r+0x36>
 800ac00:	2140      	movs	r1, #64	@ 0x40
 800ac02:	f7ff fb8f 	bl	800a324 <_malloc_r>
 800ac06:	6028      	str	r0, [r5, #0]
 800ac08:	6128      	str	r0, [r5, #16]
 800ac0a:	b930      	cbnz	r0, 800ac1a <_svfiprintf_r+0x32>
 800ac0c:	230c      	movs	r3, #12
 800ac0e:	603b      	str	r3, [r7, #0]
 800ac10:	f04f 30ff 	mov.w	r0, #4294967295
 800ac14:	b01d      	add	sp, #116	@ 0x74
 800ac16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1a:	2340      	movs	r3, #64	@ 0x40
 800ac1c:	616b      	str	r3, [r5, #20]
 800ac1e:	2300      	movs	r3, #0
 800ac20:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac22:	2320      	movs	r3, #32
 800ac24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac28:	2330      	movs	r3, #48	@ 0x30
 800ac2a:	f04f 0901 	mov.w	r9, #1
 800ac2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac32:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800adcc <_svfiprintf_r+0x1e4>
 800ac36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac3a:	4623      	mov	r3, r4
 800ac3c:	469a      	mov	sl, r3
 800ac3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac42:	b10a      	cbz	r2, 800ac48 <_svfiprintf_r+0x60>
 800ac44:	2a25      	cmp	r2, #37	@ 0x25
 800ac46:	d1f9      	bne.n	800ac3c <_svfiprintf_r+0x54>
 800ac48:	ebba 0b04 	subs.w	fp, sl, r4
 800ac4c:	d00b      	beq.n	800ac66 <_svfiprintf_r+0x7e>
 800ac4e:	465b      	mov	r3, fp
 800ac50:	4622      	mov	r2, r4
 800ac52:	4629      	mov	r1, r5
 800ac54:	4638      	mov	r0, r7
 800ac56:	f7ff ff6b 	bl	800ab30 <__ssputs_r>
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	f000 80a7 	beq.w	800adae <_svfiprintf_r+0x1c6>
 800ac60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac62:	445a      	add	r2, fp
 800ac64:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac66:	f89a 3000 	ldrb.w	r3, [sl]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f000 809f 	beq.w	800adae <_svfiprintf_r+0x1c6>
 800ac70:	2300      	movs	r3, #0
 800ac72:	f04f 32ff 	mov.w	r2, #4294967295
 800ac76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac7a:	f10a 0a01 	add.w	sl, sl, #1
 800ac7e:	9304      	str	r3, [sp, #16]
 800ac80:	9307      	str	r3, [sp, #28]
 800ac82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac86:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac88:	4654      	mov	r4, sl
 800ac8a:	2205      	movs	r2, #5
 800ac8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac90:	484e      	ldr	r0, [pc, #312]	@ (800adcc <_svfiprintf_r+0x1e4>)
 800ac92:	f7fe fc5c 	bl	800954e <memchr>
 800ac96:	9a04      	ldr	r2, [sp, #16]
 800ac98:	b9d8      	cbnz	r0, 800acd2 <_svfiprintf_r+0xea>
 800ac9a:	06d0      	lsls	r0, r2, #27
 800ac9c:	bf44      	itt	mi
 800ac9e:	2320      	movmi	r3, #32
 800aca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aca4:	0711      	lsls	r1, r2, #28
 800aca6:	bf44      	itt	mi
 800aca8:	232b      	movmi	r3, #43	@ 0x2b
 800acaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acae:	f89a 3000 	ldrb.w	r3, [sl]
 800acb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800acb4:	d015      	beq.n	800ace2 <_svfiprintf_r+0xfa>
 800acb6:	4654      	mov	r4, sl
 800acb8:	2000      	movs	r0, #0
 800acba:	f04f 0c0a 	mov.w	ip, #10
 800acbe:	9a07      	ldr	r2, [sp, #28]
 800acc0:	4621      	mov	r1, r4
 800acc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acc6:	3b30      	subs	r3, #48	@ 0x30
 800acc8:	2b09      	cmp	r3, #9
 800acca:	d94b      	bls.n	800ad64 <_svfiprintf_r+0x17c>
 800accc:	b1b0      	cbz	r0, 800acfc <_svfiprintf_r+0x114>
 800acce:	9207      	str	r2, [sp, #28]
 800acd0:	e014      	b.n	800acfc <_svfiprintf_r+0x114>
 800acd2:	eba0 0308 	sub.w	r3, r0, r8
 800acd6:	fa09 f303 	lsl.w	r3, r9, r3
 800acda:	4313      	orrs	r3, r2
 800acdc:	46a2      	mov	sl, r4
 800acde:	9304      	str	r3, [sp, #16]
 800ace0:	e7d2      	b.n	800ac88 <_svfiprintf_r+0xa0>
 800ace2:	9b03      	ldr	r3, [sp, #12]
 800ace4:	1d19      	adds	r1, r3, #4
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	9103      	str	r1, [sp, #12]
 800acea:	2b00      	cmp	r3, #0
 800acec:	bfbb      	ittet	lt
 800acee:	425b      	neglt	r3, r3
 800acf0:	f042 0202 	orrlt.w	r2, r2, #2
 800acf4:	9307      	strge	r3, [sp, #28]
 800acf6:	9307      	strlt	r3, [sp, #28]
 800acf8:	bfb8      	it	lt
 800acfa:	9204      	strlt	r2, [sp, #16]
 800acfc:	7823      	ldrb	r3, [r4, #0]
 800acfe:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad00:	d10a      	bne.n	800ad18 <_svfiprintf_r+0x130>
 800ad02:	7863      	ldrb	r3, [r4, #1]
 800ad04:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad06:	d132      	bne.n	800ad6e <_svfiprintf_r+0x186>
 800ad08:	9b03      	ldr	r3, [sp, #12]
 800ad0a:	3402      	adds	r4, #2
 800ad0c:	1d1a      	adds	r2, r3, #4
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	9203      	str	r2, [sp, #12]
 800ad12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad16:	9305      	str	r3, [sp, #20]
 800ad18:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800add0 <_svfiprintf_r+0x1e8>
 800ad1c:	2203      	movs	r2, #3
 800ad1e:	4650      	mov	r0, sl
 800ad20:	7821      	ldrb	r1, [r4, #0]
 800ad22:	f7fe fc14 	bl	800954e <memchr>
 800ad26:	b138      	cbz	r0, 800ad38 <_svfiprintf_r+0x150>
 800ad28:	2240      	movs	r2, #64	@ 0x40
 800ad2a:	9b04      	ldr	r3, [sp, #16]
 800ad2c:	eba0 000a 	sub.w	r0, r0, sl
 800ad30:	4082      	lsls	r2, r0
 800ad32:	4313      	orrs	r3, r2
 800ad34:	3401      	adds	r4, #1
 800ad36:	9304      	str	r3, [sp, #16]
 800ad38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad3c:	2206      	movs	r2, #6
 800ad3e:	4825      	ldr	r0, [pc, #148]	@ (800add4 <_svfiprintf_r+0x1ec>)
 800ad40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad44:	f7fe fc03 	bl	800954e <memchr>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	d036      	beq.n	800adba <_svfiprintf_r+0x1d2>
 800ad4c:	4b22      	ldr	r3, [pc, #136]	@ (800add8 <_svfiprintf_r+0x1f0>)
 800ad4e:	bb1b      	cbnz	r3, 800ad98 <_svfiprintf_r+0x1b0>
 800ad50:	9b03      	ldr	r3, [sp, #12]
 800ad52:	3307      	adds	r3, #7
 800ad54:	f023 0307 	bic.w	r3, r3, #7
 800ad58:	3308      	adds	r3, #8
 800ad5a:	9303      	str	r3, [sp, #12]
 800ad5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad5e:	4433      	add	r3, r6
 800ad60:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad62:	e76a      	b.n	800ac3a <_svfiprintf_r+0x52>
 800ad64:	460c      	mov	r4, r1
 800ad66:	2001      	movs	r0, #1
 800ad68:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad6c:	e7a8      	b.n	800acc0 <_svfiprintf_r+0xd8>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f04f 0c0a 	mov.w	ip, #10
 800ad74:	4619      	mov	r1, r3
 800ad76:	3401      	adds	r4, #1
 800ad78:	9305      	str	r3, [sp, #20]
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad80:	3a30      	subs	r2, #48	@ 0x30
 800ad82:	2a09      	cmp	r2, #9
 800ad84:	d903      	bls.n	800ad8e <_svfiprintf_r+0x1a6>
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d0c6      	beq.n	800ad18 <_svfiprintf_r+0x130>
 800ad8a:	9105      	str	r1, [sp, #20]
 800ad8c:	e7c4      	b.n	800ad18 <_svfiprintf_r+0x130>
 800ad8e:	4604      	mov	r4, r0
 800ad90:	2301      	movs	r3, #1
 800ad92:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad96:	e7f0      	b.n	800ad7a <_svfiprintf_r+0x192>
 800ad98:	ab03      	add	r3, sp, #12
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	462a      	mov	r2, r5
 800ad9e:	4638      	mov	r0, r7
 800ada0:	4b0e      	ldr	r3, [pc, #56]	@ (800addc <_svfiprintf_r+0x1f4>)
 800ada2:	a904      	add	r1, sp, #16
 800ada4:	f7fd fe5e 	bl	8008a64 <_printf_float>
 800ada8:	1c42      	adds	r2, r0, #1
 800adaa:	4606      	mov	r6, r0
 800adac:	d1d6      	bne.n	800ad5c <_svfiprintf_r+0x174>
 800adae:	89ab      	ldrh	r3, [r5, #12]
 800adb0:	065b      	lsls	r3, r3, #25
 800adb2:	f53f af2d 	bmi.w	800ac10 <_svfiprintf_r+0x28>
 800adb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adb8:	e72c      	b.n	800ac14 <_svfiprintf_r+0x2c>
 800adba:	ab03      	add	r3, sp, #12
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	462a      	mov	r2, r5
 800adc0:	4638      	mov	r0, r7
 800adc2:	4b06      	ldr	r3, [pc, #24]	@ (800addc <_svfiprintf_r+0x1f4>)
 800adc4:	a904      	add	r1, sp, #16
 800adc6:	f7fe f8eb 	bl	8008fa0 <_printf_i>
 800adca:	e7ed      	b.n	800ada8 <_svfiprintf_r+0x1c0>
 800adcc:	0800c5bc 	.word	0x0800c5bc
 800add0:	0800c5c2 	.word	0x0800c5c2
 800add4:	0800c5c6 	.word	0x0800c5c6
 800add8:	08008a65 	.word	0x08008a65
 800addc:	0800ab31 	.word	0x0800ab31

0800ade0 <__sflush_r>:
 800ade0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	0716      	lsls	r6, r2, #28
 800ade8:	4605      	mov	r5, r0
 800adea:	460c      	mov	r4, r1
 800adec:	d454      	bmi.n	800ae98 <__sflush_r+0xb8>
 800adee:	684b      	ldr	r3, [r1, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	dc02      	bgt.n	800adfa <__sflush_r+0x1a>
 800adf4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	dd48      	ble.n	800ae8c <__sflush_r+0xac>
 800adfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800adfc:	2e00      	cmp	r6, #0
 800adfe:	d045      	beq.n	800ae8c <__sflush_r+0xac>
 800ae00:	2300      	movs	r3, #0
 800ae02:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae06:	682f      	ldr	r7, [r5, #0]
 800ae08:	6a21      	ldr	r1, [r4, #32]
 800ae0a:	602b      	str	r3, [r5, #0]
 800ae0c:	d030      	beq.n	800ae70 <__sflush_r+0x90>
 800ae0e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	0759      	lsls	r1, r3, #29
 800ae14:	d505      	bpl.n	800ae22 <__sflush_r+0x42>
 800ae16:	6863      	ldr	r3, [r4, #4]
 800ae18:	1ad2      	subs	r2, r2, r3
 800ae1a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae1c:	b10b      	cbz	r3, 800ae22 <__sflush_r+0x42>
 800ae1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae20:	1ad2      	subs	r2, r2, r3
 800ae22:	2300      	movs	r3, #0
 800ae24:	4628      	mov	r0, r5
 800ae26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae28:	6a21      	ldr	r1, [r4, #32]
 800ae2a:	47b0      	blx	r6
 800ae2c:	1c43      	adds	r3, r0, #1
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	d106      	bne.n	800ae40 <__sflush_r+0x60>
 800ae32:	6829      	ldr	r1, [r5, #0]
 800ae34:	291d      	cmp	r1, #29
 800ae36:	d82b      	bhi.n	800ae90 <__sflush_r+0xb0>
 800ae38:	4a28      	ldr	r2, [pc, #160]	@ (800aedc <__sflush_r+0xfc>)
 800ae3a:	40ca      	lsrs	r2, r1
 800ae3c:	07d6      	lsls	r6, r2, #31
 800ae3e:	d527      	bpl.n	800ae90 <__sflush_r+0xb0>
 800ae40:	2200      	movs	r2, #0
 800ae42:	6062      	str	r2, [r4, #4]
 800ae44:	6922      	ldr	r2, [r4, #16]
 800ae46:	04d9      	lsls	r1, r3, #19
 800ae48:	6022      	str	r2, [r4, #0]
 800ae4a:	d504      	bpl.n	800ae56 <__sflush_r+0x76>
 800ae4c:	1c42      	adds	r2, r0, #1
 800ae4e:	d101      	bne.n	800ae54 <__sflush_r+0x74>
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	b903      	cbnz	r3, 800ae56 <__sflush_r+0x76>
 800ae54:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae58:	602f      	str	r7, [r5, #0]
 800ae5a:	b1b9      	cbz	r1, 800ae8c <__sflush_r+0xac>
 800ae5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae60:	4299      	cmp	r1, r3
 800ae62:	d002      	beq.n	800ae6a <__sflush_r+0x8a>
 800ae64:	4628      	mov	r0, r5
 800ae66:	f7ff f9eb 	bl	800a240 <_free_r>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae6e:	e00d      	b.n	800ae8c <__sflush_r+0xac>
 800ae70:	2301      	movs	r3, #1
 800ae72:	4628      	mov	r0, r5
 800ae74:	47b0      	blx	r6
 800ae76:	4602      	mov	r2, r0
 800ae78:	1c50      	adds	r0, r2, #1
 800ae7a:	d1c9      	bne.n	800ae10 <__sflush_r+0x30>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d0c6      	beq.n	800ae10 <__sflush_r+0x30>
 800ae82:	2b1d      	cmp	r3, #29
 800ae84:	d001      	beq.n	800ae8a <__sflush_r+0xaa>
 800ae86:	2b16      	cmp	r3, #22
 800ae88:	d11d      	bne.n	800aec6 <__sflush_r+0xe6>
 800ae8a:	602f      	str	r7, [r5, #0]
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	e021      	b.n	800aed4 <__sflush_r+0xf4>
 800ae90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae94:	b21b      	sxth	r3, r3
 800ae96:	e01a      	b.n	800aece <__sflush_r+0xee>
 800ae98:	690f      	ldr	r7, [r1, #16]
 800ae9a:	2f00      	cmp	r7, #0
 800ae9c:	d0f6      	beq.n	800ae8c <__sflush_r+0xac>
 800ae9e:	0793      	lsls	r3, r2, #30
 800aea0:	bf18      	it	ne
 800aea2:	2300      	movne	r3, #0
 800aea4:	680e      	ldr	r6, [r1, #0]
 800aea6:	bf08      	it	eq
 800aea8:	694b      	ldreq	r3, [r1, #20]
 800aeaa:	1bf6      	subs	r6, r6, r7
 800aeac:	600f      	str	r7, [r1, #0]
 800aeae:	608b      	str	r3, [r1, #8]
 800aeb0:	2e00      	cmp	r6, #0
 800aeb2:	ddeb      	ble.n	800ae8c <__sflush_r+0xac>
 800aeb4:	4633      	mov	r3, r6
 800aeb6:	463a      	mov	r2, r7
 800aeb8:	4628      	mov	r0, r5
 800aeba:	6a21      	ldr	r1, [r4, #32]
 800aebc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800aec0:	47e0      	blx	ip
 800aec2:	2800      	cmp	r0, #0
 800aec4:	dc07      	bgt.n	800aed6 <__sflush_r+0xf6>
 800aec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aece:	f04f 30ff 	mov.w	r0, #4294967295
 800aed2:	81a3      	strh	r3, [r4, #12]
 800aed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aed6:	4407      	add	r7, r0
 800aed8:	1a36      	subs	r6, r6, r0
 800aeda:	e7e9      	b.n	800aeb0 <__sflush_r+0xd0>
 800aedc:	20400001 	.word	0x20400001

0800aee0 <_fflush_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	690b      	ldr	r3, [r1, #16]
 800aee4:	4605      	mov	r5, r0
 800aee6:	460c      	mov	r4, r1
 800aee8:	b913      	cbnz	r3, 800aef0 <_fflush_r+0x10>
 800aeea:	2500      	movs	r5, #0
 800aeec:	4628      	mov	r0, r5
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	b118      	cbz	r0, 800aefa <_fflush_r+0x1a>
 800aef2:	6a03      	ldr	r3, [r0, #32]
 800aef4:	b90b      	cbnz	r3, 800aefa <_fflush_r+0x1a>
 800aef6:	f7fe f9fd 	bl	80092f4 <__sinit>
 800aefa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d0f3      	beq.n	800aeea <_fflush_r+0xa>
 800af02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af04:	07d0      	lsls	r0, r2, #31
 800af06:	d404      	bmi.n	800af12 <_fflush_r+0x32>
 800af08:	0599      	lsls	r1, r3, #22
 800af0a:	d402      	bmi.n	800af12 <_fflush_r+0x32>
 800af0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af0e:	f7fe fb1c 	bl	800954a <__retarget_lock_acquire_recursive>
 800af12:	4628      	mov	r0, r5
 800af14:	4621      	mov	r1, r4
 800af16:	f7ff ff63 	bl	800ade0 <__sflush_r>
 800af1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af1c:	4605      	mov	r5, r0
 800af1e:	07da      	lsls	r2, r3, #31
 800af20:	d4e4      	bmi.n	800aeec <_fflush_r+0xc>
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	059b      	lsls	r3, r3, #22
 800af26:	d4e1      	bmi.n	800aeec <_fflush_r+0xc>
 800af28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af2a:	f7fe fb0f 	bl	800954c <__retarget_lock_release_recursive>
 800af2e:	e7dd      	b.n	800aeec <_fflush_r+0xc>

0800af30 <memmove>:
 800af30:	4288      	cmp	r0, r1
 800af32:	b510      	push	{r4, lr}
 800af34:	eb01 0402 	add.w	r4, r1, r2
 800af38:	d902      	bls.n	800af40 <memmove+0x10>
 800af3a:	4284      	cmp	r4, r0
 800af3c:	4623      	mov	r3, r4
 800af3e:	d807      	bhi.n	800af50 <memmove+0x20>
 800af40:	1e43      	subs	r3, r0, #1
 800af42:	42a1      	cmp	r1, r4
 800af44:	d008      	beq.n	800af58 <memmove+0x28>
 800af46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af4e:	e7f8      	b.n	800af42 <memmove+0x12>
 800af50:	4601      	mov	r1, r0
 800af52:	4402      	add	r2, r0
 800af54:	428a      	cmp	r2, r1
 800af56:	d100      	bne.n	800af5a <memmove+0x2a>
 800af58:	bd10      	pop	{r4, pc}
 800af5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af62:	e7f7      	b.n	800af54 <memmove+0x24>

0800af64 <_sbrk_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	2300      	movs	r3, #0
 800af68:	4d05      	ldr	r5, [pc, #20]	@ (800af80 <_sbrk_r+0x1c>)
 800af6a:	4604      	mov	r4, r0
 800af6c:	4608      	mov	r0, r1
 800af6e:	602b      	str	r3, [r5, #0]
 800af70:	f7f9 fb22 	bl	80045b8 <_sbrk>
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	d102      	bne.n	800af7e <_sbrk_r+0x1a>
 800af78:	682b      	ldr	r3, [r5, #0]
 800af7a:	b103      	cbz	r3, 800af7e <_sbrk_r+0x1a>
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	20000888 	.word	0x20000888

0800af84 <__assert_func>:
 800af84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af86:	4614      	mov	r4, r2
 800af88:	461a      	mov	r2, r3
 800af8a:	4b09      	ldr	r3, [pc, #36]	@ (800afb0 <__assert_func+0x2c>)
 800af8c:	4605      	mov	r5, r0
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68d8      	ldr	r0, [r3, #12]
 800af92:	b14c      	cbz	r4, 800afa8 <__assert_func+0x24>
 800af94:	4b07      	ldr	r3, [pc, #28]	@ (800afb4 <__assert_func+0x30>)
 800af96:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af9a:	9100      	str	r1, [sp, #0]
 800af9c:	462b      	mov	r3, r5
 800af9e:	4906      	ldr	r1, [pc, #24]	@ (800afb8 <__assert_func+0x34>)
 800afa0:	f000 f870 	bl	800b084 <fiprintf>
 800afa4:	f000 f880 	bl	800b0a8 <abort>
 800afa8:	4b04      	ldr	r3, [pc, #16]	@ (800afbc <__assert_func+0x38>)
 800afaa:	461c      	mov	r4, r3
 800afac:	e7f3      	b.n	800af96 <__assert_func+0x12>
 800afae:	bf00      	nop
 800afb0:	20000018 	.word	0x20000018
 800afb4:	0800c5d7 	.word	0x0800c5d7
 800afb8:	0800c5e4 	.word	0x0800c5e4
 800afbc:	0800c612 	.word	0x0800c612

0800afc0 <_calloc_r>:
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	fba1 5402 	umull	r5, r4, r1, r2
 800afc6:	b934      	cbnz	r4, 800afd6 <_calloc_r+0x16>
 800afc8:	4629      	mov	r1, r5
 800afca:	f7ff f9ab 	bl	800a324 <_malloc_r>
 800afce:	4606      	mov	r6, r0
 800afd0:	b928      	cbnz	r0, 800afde <_calloc_r+0x1e>
 800afd2:	4630      	mov	r0, r6
 800afd4:	bd70      	pop	{r4, r5, r6, pc}
 800afd6:	220c      	movs	r2, #12
 800afd8:	2600      	movs	r6, #0
 800afda:	6002      	str	r2, [r0, #0]
 800afdc:	e7f9      	b.n	800afd2 <_calloc_r+0x12>
 800afde:	462a      	mov	r2, r5
 800afe0:	4621      	mov	r1, r4
 800afe2:	f7fe fa22 	bl	800942a <memset>
 800afe6:	e7f4      	b.n	800afd2 <_calloc_r+0x12>

0800afe8 <__ascii_mbtowc>:
 800afe8:	b082      	sub	sp, #8
 800afea:	b901      	cbnz	r1, 800afee <__ascii_mbtowc+0x6>
 800afec:	a901      	add	r1, sp, #4
 800afee:	b142      	cbz	r2, 800b002 <__ascii_mbtowc+0x1a>
 800aff0:	b14b      	cbz	r3, 800b006 <__ascii_mbtowc+0x1e>
 800aff2:	7813      	ldrb	r3, [r2, #0]
 800aff4:	600b      	str	r3, [r1, #0]
 800aff6:	7812      	ldrb	r2, [r2, #0]
 800aff8:	1e10      	subs	r0, r2, #0
 800affa:	bf18      	it	ne
 800affc:	2001      	movne	r0, #1
 800affe:	b002      	add	sp, #8
 800b000:	4770      	bx	lr
 800b002:	4610      	mov	r0, r2
 800b004:	e7fb      	b.n	800affe <__ascii_mbtowc+0x16>
 800b006:	f06f 0001 	mvn.w	r0, #1
 800b00a:	e7f8      	b.n	800affe <__ascii_mbtowc+0x16>

0800b00c <_realloc_r>:
 800b00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b010:	4607      	mov	r7, r0
 800b012:	4614      	mov	r4, r2
 800b014:	460d      	mov	r5, r1
 800b016:	b921      	cbnz	r1, 800b022 <_realloc_r+0x16>
 800b018:	4611      	mov	r1, r2
 800b01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b01e:	f7ff b981 	b.w	800a324 <_malloc_r>
 800b022:	b92a      	cbnz	r2, 800b030 <_realloc_r+0x24>
 800b024:	f7ff f90c 	bl	800a240 <_free_r>
 800b028:	4625      	mov	r5, r4
 800b02a:	4628      	mov	r0, r5
 800b02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b030:	f000 f841 	bl	800b0b6 <_malloc_usable_size_r>
 800b034:	4284      	cmp	r4, r0
 800b036:	4606      	mov	r6, r0
 800b038:	d802      	bhi.n	800b040 <_realloc_r+0x34>
 800b03a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b03e:	d8f4      	bhi.n	800b02a <_realloc_r+0x1e>
 800b040:	4621      	mov	r1, r4
 800b042:	4638      	mov	r0, r7
 800b044:	f7ff f96e 	bl	800a324 <_malloc_r>
 800b048:	4680      	mov	r8, r0
 800b04a:	b908      	cbnz	r0, 800b050 <_realloc_r+0x44>
 800b04c:	4645      	mov	r5, r8
 800b04e:	e7ec      	b.n	800b02a <_realloc_r+0x1e>
 800b050:	42b4      	cmp	r4, r6
 800b052:	4622      	mov	r2, r4
 800b054:	4629      	mov	r1, r5
 800b056:	bf28      	it	cs
 800b058:	4632      	movcs	r2, r6
 800b05a:	f7fe fa86 	bl	800956a <memcpy>
 800b05e:	4629      	mov	r1, r5
 800b060:	4638      	mov	r0, r7
 800b062:	f7ff f8ed 	bl	800a240 <_free_r>
 800b066:	e7f1      	b.n	800b04c <_realloc_r+0x40>

0800b068 <__ascii_wctomb>:
 800b068:	4603      	mov	r3, r0
 800b06a:	4608      	mov	r0, r1
 800b06c:	b141      	cbz	r1, 800b080 <__ascii_wctomb+0x18>
 800b06e:	2aff      	cmp	r2, #255	@ 0xff
 800b070:	d904      	bls.n	800b07c <__ascii_wctomb+0x14>
 800b072:	228a      	movs	r2, #138	@ 0x8a
 800b074:	f04f 30ff 	mov.w	r0, #4294967295
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	4770      	bx	lr
 800b07c:	2001      	movs	r0, #1
 800b07e:	700a      	strb	r2, [r1, #0]
 800b080:	4770      	bx	lr
	...

0800b084 <fiprintf>:
 800b084:	b40e      	push	{r1, r2, r3}
 800b086:	b503      	push	{r0, r1, lr}
 800b088:	4601      	mov	r1, r0
 800b08a:	ab03      	add	r3, sp, #12
 800b08c:	4805      	ldr	r0, [pc, #20]	@ (800b0a4 <fiprintf+0x20>)
 800b08e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b092:	6800      	ldr	r0, [r0, #0]
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	f000 f83d 	bl	800b114 <_vfiprintf_r>
 800b09a:	b002      	add	sp, #8
 800b09c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0a0:	b003      	add	sp, #12
 800b0a2:	4770      	bx	lr
 800b0a4:	20000018 	.word	0x20000018

0800b0a8 <abort>:
 800b0a8:	2006      	movs	r0, #6
 800b0aa:	b508      	push	{r3, lr}
 800b0ac:	f000 fa06 	bl	800b4bc <raise>
 800b0b0:	2001      	movs	r0, #1
 800b0b2:	f7f9 fa0c 	bl	80044ce <_exit>

0800b0b6 <_malloc_usable_size_r>:
 800b0b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ba:	1f18      	subs	r0, r3, #4
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	bfbc      	itt	lt
 800b0c0:	580b      	ldrlt	r3, [r1, r0]
 800b0c2:	18c0      	addlt	r0, r0, r3
 800b0c4:	4770      	bx	lr

0800b0c6 <__sfputc_r>:
 800b0c6:	6893      	ldr	r3, [r2, #8]
 800b0c8:	b410      	push	{r4}
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	6093      	str	r3, [r2, #8]
 800b0d0:	da07      	bge.n	800b0e2 <__sfputc_r+0x1c>
 800b0d2:	6994      	ldr	r4, [r2, #24]
 800b0d4:	42a3      	cmp	r3, r4
 800b0d6:	db01      	blt.n	800b0dc <__sfputc_r+0x16>
 800b0d8:	290a      	cmp	r1, #10
 800b0da:	d102      	bne.n	800b0e2 <__sfputc_r+0x1c>
 800b0dc:	bc10      	pop	{r4}
 800b0de:	f000 b931 	b.w	800b344 <__swbuf_r>
 800b0e2:	6813      	ldr	r3, [r2, #0]
 800b0e4:	1c58      	adds	r0, r3, #1
 800b0e6:	6010      	str	r0, [r2, #0]
 800b0e8:	7019      	strb	r1, [r3, #0]
 800b0ea:	4608      	mov	r0, r1
 800b0ec:	bc10      	pop	{r4}
 800b0ee:	4770      	bx	lr

0800b0f0 <__sfputs_r>:
 800b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f2:	4606      	mov	r6, r0
 800b0f4:	460f      	mov	r7, r1
 800b0f6:	4614      	mov	r4, r2
 800b0f8:	18d5      	adds	r5, r2, r3
 800b0fa:	42ac      	cmp	r4, r5
 800b0fc:	d101      	bne.n	800b102 <__sfputs_r+0x12>
 800b0fe:	2000      	movs	r0, #0
 800b100:	e007      	b.n	800b112 <__sfputs_r+0x22>
 800b102:	463a      	mov	r2, r7
 800b104:	4630      	mov	r0, r6
 800b106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b10a:	f7ff ffdc 	bl	800b0c6 <__sfputc_r>
 800b10e:	1c43      	adds	r3, r0, #1
 800b110:	d1f3      	bne.n	800b0fa <__sfputs_r+0xa>
 800b112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b114 <_vfiprintf_r>:
 800b114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b118:	460d      	mov	r5, r1
 800b11a:	4614      	mov	r4, r2
 800b11c:	4698      	mov	r8, r3
 800b11e:	4606      	mov	r6, r0
 800b120:	b09d      	sub	sp, #116	@ 0x74
 800b122:	b118      	cbz	r0, 800b12c <_vfiprintf_r+0x18>
 800b124:	6a03      	ldr	r3, [r0, #32]
 800b126:	b90b      	cbnz	r3, 800b12c <_vfiprintf_r+0x18>
 800b128:	f7fe f8e4 	bl	80092f4 <__sinit>
 800b12c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b12e:	07d9      	lsls	r1, r3, #31
 800b130:	d405      	bmi.n	800b13e <_vfiprintf_r+0x2a>
 800b132:	89ab      	ldrh	r3, [r5, #12]
 800b134:	059a      	lsls	r2, r3, #22
 800b136:	d402      	bmi.n	800b13e <_vfiprintf_r+0x2a>
 800b138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b13a:	f7fe fa06 	bl	800954a <__retarget_lock_acquire_recursive>
 800b13e:	89ab      	ldrh	r3, [r5, #12]
 800b140:	071b      	lsls	r3, r3, #28
 800b142:	d501      	bpl.n	800b148 <_vfiprintf_r+0x34>
 800b144:	692b      	ldr	r3, [r5, #16]
 800b146:	b99b      	cbnz	r3, 800b170 <_vfiprintf_r+0x5c>
 800b148:	4629      	mov	r1, r5
 800b14a:	4630      	mov	r0, r6
 800b14c:	f000 f938 	bl	800b3c0 <__swsetup_r>
 800b150:	b170      	cbz	r0, 800b170 <_vfiprintf_r+0x5c>
 800b152:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b154:	07dc      	lsls	r4, r3, #31
 800b156:	d504      	bpl.n	800b162 <_vfiprintf_r+0x4e>
 800b158:	f04f 30ff 	mov.w	r0, #4294967295
 800b15c:	b01d      	add	sp, #116	@ 0x74
 800b15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b162:	89ab      	ldrh	r3, [r5, #12]
 800b164:	0598      	lsls	r0, r3, #22
 800b166:	d4f7      	bmi.n	800b158 <_vfiprintf_r+0x44>
 800b168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b16a:	f7fe f9ef 	bl	800954c <__retarget_lock_release_recursive>
 800b16e:	e7f3      	b.n	800b158 <_vfiprintf_r+0x44>
 800b170:	2300      	movs	r3, #0
 800b172:	9309      	str	r3, [sp, #36]	@ 0x24
 800b174:	2320      	movs	r3, #32
 800b176:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b17a:	2330      	movs	r3, #48	@ 0x30
 800b17c:	f04f 0901 	mov.w	r9, #1
 800b180:	f8cd 800c 	str.w	r8, [sp, #12]
 800b184:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b330 <_vfiprintf_r+0x21c>
 800b188:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b18c:	4623      	mov	r3, r4
 800b18e:	469a      	mov	sl, r3
 800b190:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b194:	b10a      	cbz	r2, 800b19a <_vfiprintf_r+0x86>
 800b196:	2a25      	cmp	r2, #37	@ 0x25
 800b198:	d1f9      	bne.n	800b18e <_vfiprintf_r+0x7a>
 800b19a:	ebba 0b04 	subs.w	fp, sl, r4
 800b19e:	d00b      	beq.n	800b1b8 <_vfiprintf_r+0xa4>
 800b1a0:	465b      	mov	r3, fp
 800b1a2:	4622      	mov	r2, r4
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f7ff ffa2 	bl	800b0f0 <__sfputs_r>
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	f000 80a7 	beq.w	800b300 <_vfiprintf_r+0x1ec>
 800b1b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1b4:	445a      	add	r2, fp
 800b1b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 809f 	beq.w	800b300 <_vfiprintf_r+0x1ec>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1cc:	f10a 0a01 	add.w	sl, sl, #1
 800b1d0:	9304      	str	r3, [sp, #16]
 800b1d2:	9307      	str	r3, [sp, #28]
 800b1d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1da:	4654      	mov	r4, sl
 800b1dc:	2205      	movs	r2, #5
 800b1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e2:	4853      	ldr	r0, [pc, #332]	@ (800b330 <_vfiprintf_r+0x21c>)
 800b1e4:	f7fe f9b3 	bl	800954e <memchr>
 800b1e8:	9a04      	ldr	r2, [sp, #16]
 800b1ea:	b9d8      	cbnz	r0, 800b224 <_vfiprintf_r+0x110>
 800b1ec:	06d1      	lsls	r1, r2, #27
 800b1ee:	bf44      	itt	mi
 800b1f0:	2320      	movmi	r3, #32
 800b1f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1f6:	0713      	lsls	r3, r2, #28
 800b1f8:	bf44      	itt	mi
 800b1fa:	232b      	movmi	r3, #43	@ 0x2b
 800b1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b200:	f89a 3000 	ldrb.w	r3, [sl]
 800b204:	2b2a      	cmp	r3, #42	@ 0x2a
 800b206:	d015      	beq.n	800b234 <_vfiprintf_r+0x120>
 800b208:	4654      	mov	r4, sl
 800b20a:	2000      	movs	r0, #0
 800b20c:	f04f 0c0a 	mov.w	ip, #10
 800b210:	9a07      	ldr	r2, [sp, #28]
 800b212:	4621      	mov	r1, r4
 800b214:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b218:	3b30      	subs	r3, #48	@ 0x30
 800b21a:	2b09      	cmp	r3, #9
 800b21c:	d94b      	bls.n	800b2b6 <_vfiprintf_r+0x1a2>
 800b21e:	b1b0      	cbz	r0, 800b24e <_vfiprintf_r+0x13a>
 800b220:	9207      	str	r2, [sp, #28]
 800b222:	e014      	b.n	800b24e <_vfiprintf_r+0x13a>
 800b224:	eba0 0308 	sub.w	r3, r0, r8
 800b228:	fa09 f303 	lsl.w	r3, r9, r3
 800b22c:	4313      	orrs	r3, r2
 800b22e:	46a2      	mov	sl, r4
 800b230:	9304      	str	r3, [sp, #16]
 800b232:	e7d2      	b.n	800b1da <_vfiprintf_r+0xc6>
 800b234:	9b03      	ldr	r3, [sp, #12]
 800b236:	1d19      	adds	r1, r3, #4
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	9103      	str	r1, [sp, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	bfbb      	ittet	lt
 800b240:	425b      	neglt	r3, r3
 800b242:	f042 0202 	orrlt.w	r2, r2, #2
 800b246:	9307      	strge	r3, [sp, #28]
 800b248:	9307      	strlt	r3, [sp, #28]
 800b24a:	bfb8      	it	lt
 800b24c:	9204      	strlt	r2, [sp, #16]
 800b24e:	7823      	ldrb	r3, [r4, #0]
 800b250:	2b2e      	cmp	r3, #46	@ 0x2e
 800b252:	d10a      	bne.n	800b26a <_vfiprintf_r+0x156>
 800b254:	7863      	ldrb	r3, [r4, #1]
 800b256:	2b2a      	cmp	r3, #42	@ 0x2a
 800b258:	d132      	bne.n	800b2c0 <_vfiprintf_r+0x1ac>
 800b25a:	9b03      	ldr	r3, [sp, #12]
 800b25c:	3402      	adds	r4, #2
 800b25e:	1d1a      	adds	r2, r3, #4
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	9203      	str	r2, [sp, #12]
 800b264:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b268:	9305      	str	r3, [sp, #20]
 800b26a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b334 <_vfiprintf_r+0x220>
 800b26e:	2203      	movs	r2, #3
 800b270:	4650      	mov	r0, sl
 800b272:	7821      	ldrb	r1, [r4, #0]
 800b274:	f7fe f96b 	bl	800954e <memchr>
 800b278:	b138      	cbz	r0, 800b28a <_vfiprintf_r+0x176>
 800b27a:	2240      	movs	r2, #64	@ 0x40
 800b27c:	9b04      	ldr	r3, [sp, #16]
 800b27e:	eba0 000a 	sub.w	r0, r0, sl
 800b282:	4082      	lsls	r2, r0
 800b284:	4313      	orrs	r3, r2
 800b286:	3401      	adds	r4, #1
 800b288:	9304      	str	r3, [sp, #16]
 800b28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b28e:	2206      	movs	r2, #6
 800b290:	4829      	ldr	r0, [pc, #164]	@ (800b338 <_vfiprintf_r+0x224>)
 800b292:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b296:	f7fe f95a 	bl	800954e <memchr>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d03f      	beq.n	800b31e <_vfiprintf_r+0x20a>
 800b29e:	4b27      	ldr	r3, [pc, #156]	@ (800b33c <_vfiprintf_r+0x228>)
 800b2a0:	bb1b      	cbnz	r3, 800b2ea <_vfiprintf_r+0x1d6>
 800b2a2:	9b03      	ldr	r3, [sp, #12]
 800b2a4:	3307      	adds	r3, #7
 800b2a6:	f023 0307 	bic.w	r3, r3, #7
 800b2aa:	3308      	adds	r3, #8
 800b2ac:	9303      	str	r3, [sp, #12]
 800b2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2b0:	443b      	add	r3, r7
 800b2b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2b4:	e76a      	b.n	800b18c <_vfiprintf_r+0x78>
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	2001      	movs	r0, #1
 800b2ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2be:	e7a8      	b.n	800b212 <_vfiprintf_r+0xfe>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f04f 0c0a 	mov.w	ip, #10
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	3401      	adds	r4, #1
 800b2ca:	9305      	str	r3, [sp, #20]
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2d2:	3a30      	subs	r2, #48	@ 0x30
 800b2d4:	2a09      	cmp	r2, #9
 800b2d6:	d903      	bls.n	800b2e0 <_vfiprintf_r+0x1cc>
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d0c6      	beq.n	800b26a <_vfiprintf_r+0x156>
 800b2dc:	9105      	str	r1, [sp, #20]
 800b2de:	e7c4      	b.n	800b26a <_vfiprintf_r+0x156>
 800b2e0:	4604      	mov	r4, r0
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2e8:	e7f0      	b.n	800b2cc <_vfiprintf_r+0x1b8>
 800b2ea:	ab03      	add	r3, sp, #12
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	462a      	mov	r2, r5
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	4b13      	ldr	r3, [pc, #76]	@ (800b340 <_vfiprintf_r+0x22c>)
 800b2f4:	a904      	add	r1, sp, #16
 800b2f6:	f7fd fbb5 	bl	8008a64 <_printf_float>
 800b2fa:	4607      	mov	r7, r0
 800b2fc:	1c78      	adds	r0, r7, #1
 800b2fe:	d1d6      	bne.n	800b2ae <_vfiprintf_r+0x19a>
 800b300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b302:	07d9      	lsls	r1, r3, #31
 800b304:	d405      	bmi.n	800b312 <_vfiprintf_r+0x1fe>
 800b306:	89ab      	ldrh	r3, [r5, #12]
 800b308:	059a      	lsls	r2, r3, #22
 800b30a:	d402      	bmi.n	800b312 <_vfiprintf_r+0x1fe>
 800b30c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b30e:	f7fe f91d 	bl	800954c <__retarget_lock_release_recursive>
 800b312:	89ab      	ldrh	r3, [r5, #12]
 800b314:	065b      	lsls	r3, r3, #25
 800b316:	f53f af1f 	bmi.w	800b158 <_vfiprintf_r+0x44>
 800b31a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b31c:	e71e      	b.n	800b15c <_vfiprintf_r+0x48>
 800b31e:	ab03      	add	r3, sp, #12
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	462a      	mov	r2, r5
 800b324:	4630      	mov	r0, r6
 800b326:	4b06      	ldr	r3, [pc, #24]	@ (800b340 <_vfiprintf_r+0x22c>)
 800b328:	a904      	add	r1, sp, #16
 800b32a:	f7fd fe39 	bl	8008fa0 <_printf_i>
 800b32e:	e7e4      	b.n	800b2fa <_vfiprintf_r+0x1e6>
 800b330:	0800c5bc 	.word	0x0800c5bc
 800b334:	0800c5c2 	.word	0x0800c5c2
 800b338:	0800c5c6 	.word	0x0800c5c6
 800b33c:	08008a65 	.word	0x08008a65
 800b340:	0800b0f1 	.word	0x0800b0f1

0800b344 <__swbuf_r>:
 800b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b346:	460e      	mov	r6, r1
 800b348:	4614      	mov	r4, r2
 800b34a:	4605      	mov	r5, r0
 800b34c:	b118      	cbz	r0, 800b356 <__swbuf_r+0x12>
 800b34e:	6a03      	ldr	r3, [r0, #32]
 800b350:	b90b      	cbnz	r3, 800b356 <__swbuf_r+0x12>
 800b352:	f7fd ffcf 	bl	80092f4 <__sinit>
 800b356:	69a3      	ldr	r3, [r4, #24]
 800b358:	60a3      	str	r3, [r4, #8]
 800b35a:	89a3      	ldrh	r3, [r4, #12]
 800b35c:	071a      	lsls	r2, r3, #28
 800b35e:	d501      	bpl.n	800b364 <__swbuf_r+0x20>
 800b360:	6923      	ldr	r3, [r4, #16]
 800b362:	b943      	cbnz	r3, 800b376 <__swbuf_r+0x32>
 800b364:	4621      	mov	r1, r4
 800b366:	4628      	mov	r0, r5
 800b368:	f000 f82a 	bl	800b3c0 <__swsetup_r>
 800b36c:	b118      	cbz	r0, 800b376 <__swbuf_r+0x32>
 800b36e:	f04f 37ff 	mov.w	r7, #4294967295
 800b372:	4638      	mov	r0, r7
 800b374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	6922      	ldr	r2, [r4, #16]
 800b37a:	b2f6      	uxtb	r6, r6
 800b37c:	1a98      	subs	r0, r3, r2
 800b37e:	6963      	ldr	r3, [r4, #20]
 800b380:	4637      	mov	r7, r6
 800b382:	4283      	cmp	r3, r0
 800b384:	dc05      	bgt.n	800b392 <__swbuf_r+0x4e>
 800b386:	4621      	mov	r1, r4
 800b388:	4628      	mov	r0, r5
 800b38a:	f7ff fda9 	bl	800aee0 <_fflush_r>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d1ed      	bne.n	800b36e <__swbuf_r+0x2a>
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	3b01      	subs	r3, #1
 800b396:	60a3      	str	r3, [r4, #8]
 800b398:	6823      	ldr	r3, [r4, #0]
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	6022      	str	r2, [r4, #0]
 800b39e:	701e      	strb	r6, [r3, #0]
 800b3a0:	6962      	ldr	r2, [r4, #20]
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d004      	beq.n	800b3b2 <__swbuf_r+0x6e>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	07db      	lsls	r3, r3, #31
 800b3ac:	d5e1      	bpl.n	800b372 <__swbuf_r+0x2e>
 800b3ae:	2e0a      	cmp	r6, #10
 800b3b0:	d1df      	bne.n	800b372 <__swbuf_r+0x2e>
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f7ff fd93 	bl	800aee0 <_fflush_r>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d0d9      	beq.n	800b372 <__swbuf_r+0x2e>
 800b3be:	e7d6      	b.n	800b36e <__swbuf_r+0x2a>

0800b3c0 <__swsetup_r>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	4b29      	ldr	r3, [pc, #164]	@ (800b468 <__swsetup_r+0xa8>)
 800b3c4:	4605      	mov	r5, r0
 800b3c6:	6818      	ldr	r0, [r3, #0]
 800b3c8:	460c      	mov	r4, r1
 800b3ca:	b118      	cbz	r0, 800b3d4 <__swsetup_r+0x14>
 800b3cc:	6a03      	ldr	r3, [r0, #32]
 800b3ce:	b90b      	cbnz	r3, 800b3d4 <__swsetup_r+0x14>
 800b3d0:	f7fd ff90 	bl	80092f4 <__sinit>
 800b3d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3d8:	0719      	lsls	r1, r3, #28
 800b3da:	d422      	bmi.n	800b422 <__swsetup_r+0x62>
 800b3dc:	06da      	lsls	r2, r3, #27
 800b3de:	d407      	bmi.n	800b3f0 <__swsetup_r+0x30>
 800b3e0:	2209      	movs	r2, #9
 800b3e2:	602a      	str	r2, [r5, #0]
 800b3e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ec:	81a3      	strh	r3, [r4, #12]
 800b3ee:	e033      	b.n	800b458 <__swsetup_r+0x98>
 800b3f0:	0758      	lsls	r0, r3, #29
 800b3f2:	d512      	bpl.n	800b41a <__swsetup_r+0x5a>
 800b3f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3f6:	b141      	cbz	r1, 800b40a <__swsetup_r+0x4a>
 800b3f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3fc:	4299      	cmp	r1, r3
 800b3fe:	d002      	beq.n	800b406 <__swsetup_r+0x46>
 800b400:	4628      	mov	r0, r5
 800b402:	f7fe ff1d 	bl	800a240 <_free_r>
 800b406:	2300      	movs	r3, #0
 800b408:	6363      	str	r3, [r4, #52]	@ 0x34
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b410:	81a3      	strh	r3, [r4, #12]
 800b412:	2300      	movs	r3, #0
 800b414:	6063      	str	r3, [r4, #4]
 800b416:	6923      	ldr	r3, [r4, #16]
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	89a3      	ldrh	r3, [r4, #12]
 800b41c:	f043 0308 	orr.w	r3, r3, #8
 800b420:	81a3      	strh	r3, [r4, #12]
 800b422:	6923      	ldr	r3, [r4, #16]
 800b424:	b94b      	cbnz	r3, 800b43a <__swsetup_r+0x7a>
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b42c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b430:	d003      	beq.n	800b43a <__swsetup_r+0x7a>
 800b432:	4621      	mov	r1, r4
 800b434:	4628      	mov	r0, r5
 800b436:	f000 f882 	bl	800b53e <__smakebuf_r>
 800b43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b43e:	f013 0201 	ands.w	r2, r3, #1
 800b442:	d00a      	beq.n	800b45a <__swsetup_r+0x9a>
 800b444:	2200      	movs	r2, #0
 800b446:	60a2      	str	r2, [r4, #8]
 800b448:	6962      	ldr	r2, [r4, #20]
 800b44a:	4252      	negs	r2, r2
 800b44c:	61a2      	str	r2, [r4, #24]
 800b44e:	6922      	ldr	r2, [r4, #16]
 800b450:	b942      	cbnz	r2, 800b464 <__swsetup_r+0xa4>
 800b452:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b456:	d1c5      	bne.n	800b3e4 <__swsetup_r+0x24>
 800b458:	bd38      	pop	{r3, r4, r5, pc}
 800b45a:	0799      	lsls	r1, r3, #30
 800b45c:	bf58      	it	pl
 800b45e:	6962      	ldrpl	r2, [r4, #20]
 800b460:	60a2      	str	r2, [r4, #8]
 800b462:	e7f4      	b.n	800b44e <__swsetup_r+0x8e>
 800b464:	2000      	movs	r0, #0
 800b466:	e7f7      	b.n	800b458 <__swsetup_r+0x98>
 800b468:	20000018 	.word	0x20000018

0800b46c <_raise_r>:
 800b46c:	291f      	cmp	r1, #31
 800b46e:	b538      	push	{r3, r4, r5, lr}
 800b470:	4605      	mov	r5, r0
 800b472:	460c      	mov	r4, r1
 800b474:	d904      	bls.n	800b480 <_raise_r+0x14>
 800b476:	2316      	movs	r3, #22
 800b478:	6003      	str	r3, [r0, #0]
 800b47a:	f04f 30ff 	mov.w	r0, #4294967295
 800b47e:	bd38      	pop	{r3, r4, r5, pc}
 800b480:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b482:	b112      	cbz	r2, 800b48a <_raise_r+0x1e>
 800b484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b488:	b94b      	cbnz	r3, 800b49e <_raise_r+0x32>
 800b48a:	4628      	mov	r0, r5
 800b48c:	f000 f830 	bl	800b4f0 <_getpid_r>
 800b490:	4622      	mov	r2, r4
 800b492:	4601      	mov	r1, r0
 800b494:	4628      	mov	r0, r5
 800b496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b49a:	f000 b817 	b.w	800b4cc <_kill_r>
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d00a      	beq.n	800b4b8 <_raise_r+0x4c>
 800b4a2:	1c59      	adds	r1, r3, #1
 800b4a4:	d103      	bne.n	800b4ae <_raise_r+0x42>
 800b4a6:	2316      	movs	r3, #22
 800b4a8:	6003      	str	r3, [r0, #0]
 800b4aa:	2001      	movs	r0, #1
 800b4ac:	e7e7      	b.n	800b47e <_raise_r+0x12>
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b4b6:	4798      	blx	r3
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	e7e0      	b.n	800b47e <_raise_r+0x12>

0800b4bc <raise>:
 800b4bc:	4b02      	ldr	r3, [pc, #8]	@ (800b4c8 <raise+0xc>)
 800b4be:	4601      	mov	r1, r0
 800b4c0:	6818      	ldr	r0, [r3, #0]
 800b4c2:	f7ff bfd3 	b.w	800b46c <_raise_r>
 800b4c6:	bf00      	nop
 800b4c8:	20000018 	.word	0x20000018

0800b4cc <_kill_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	4d06      	ldr	r5, [pc, #24]	@ (800b4ec <_kill_r+0x20>)
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	4608      	mov	r0, r1
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	602b      	str	r3, [r5, #0]
 800b4da:	f7f8 ffe8 	bl	80044ae <_kill>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	d102      	bne.n	800b4e8 <_kill_r+0x1c>
 800b4e2:	682b      	ldr	r3, [r5, #0]
 800b4e4:	b103      	cbz	r3, 800b4e8 <_kill_r+0x1c>
 800b4e6:	6023      	str	r3, [r4, #0]
 800b4e8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20000888 	.word	0x20000888

0800b4f0 <_getpid_r>:
 800b4f0:	f7f8 bfd6 	b.w	80044a0 <_getpid>

0800b4f4 <__swhatbuf_r>:
 800b4f4:	b570      	push	{r4, r5, r6, lr}
 800b4f6:	460c      	mov	r4, r1
 800b4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4fc:	4615      	mov	r5, r2
 800b4fe:	2900      	cmp	r1, #0
 800b500:	461e      	mov	r6, r3
 800b502:	b096      	sub	sp, #88	@ 0x58
 800b504:	da0c      	bge.n	800b520 <__swhatbuf_r+0x2c>
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	2100      	movs	r1, #0
 800b50a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b50e:	bf14      	ite	ne
 800b510:	2340      	movne	r3, #64	@ 0x40
 800b512:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b516:	2000      	movs	r0, #0
 800b518:	6031      	str	r1, [r6, #0]
 800b51a:	602b      	str	r3, [r5, #0]
 800b51c:	b016      	add	sp, #88	@ 0x58
 800b51e:	bd70      	pop	{r4, r5, r6, pc}
 800b520:	466a      	mov	r2, sp
 800b522:	f000 f849 	bl	800b5b8 <_fstat_r>
 800b526:	2800      	cmp	r0, #0
 800b528:	dbed      	blt.n	800b506 <__swhatbuf_r+0x12>
 800b52a:	9901      	ldr	r1, [sp, #4]
 800b52c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b530:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b534:	4259      	negs	r1, r3
 800b536:	4159      	adcs	r1, r3
 800b538:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b53c:	e7eb      	b.n	800b516 <__swhatbuf_r+0x22>

0800b53e <__smakebuf_r>:
 800b53e:	898b      	ldrh	r3, [r1, #12]
 800b540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b542:	079d      	lsls	r5, r3, #30
 800b544:	4606      	mov	r6, r0
 800b546:	460c      	mov	r4, r1
 800b548:	d507      	bpl.n	800b55a <__smakebuf_r+0x1c>
 800b54a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b54e:	6023      	str	r3, [r4, #0]
 800b550:	6123      	str	r3, [r4, #16]
 800b552:	2301      	movs	r3, #1
 800b554:	6163      	str	r3, [r4, #20]
 800b556:	b003      	add	sp, #12
 800b558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b55a:	466a      	mov	r2, sp
 800b55c:	ab01      	add	r3, sp, #4
 800b55e:	f7ff ffc9 	bl	800b4f4 <__swhatbuf_r>
 800b562:	9f00      	ldr	r7, [sp, #0]
 800b564:	4605      	mov	r5, r0
 800b566:	4639      	mov	r1, r7
 800b568:	4630      	mov	r0, r6
 800b56a:	f7fe fedb 	bl	800a324 <_malloc_r>
 800b56e:	b948      	cbnz	r0, 800b584 <__smakebuf_r+0x46>
 800b570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b574:	059a      	lsls	r2, r3, #22
 800b576:	d4ee      	bmi.n	800b556 <__smakebuf_r+0x18>
 800b578:	f023 0303 	bic.w	r3, r3, #3
 800b57c:	f043 0302 	orr.w	r3, r3, #2
 800b580:	81a3      	strh	r3, [r4, #12]
 800b582:	e7e2      	b.n	800b54a <__smakebuf_r+0xc>
 800b584:	89a3      	ldrh	r3, [r4, #12]
 800b586:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b58a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b58e:	81a3      	strh	r3, [r4, #12]
 800b590:	9b01      	ldr	r3, [sp, #4]
 800b592:	6020      	str	r0, [r4, #0]
 800b594:	b15b      	cbz	r3, 800b5ae <__smakebuf_r+0x70>
 800b596:	4630      	mov	r0, r6
 800b598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b59c:	f000 f81e 	bl	800b5dc <_isatty_r>
 800b5a0:	b128      	cbz	r0, 800b5ae <__smakebuf_r+0x70>
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	f023 0303 	bic.w	r3, r3, #3
 800b5a8:	f043 0301 	orr.w	r3, r3, #1
 800b5ac:	81a3      	strh	r3, [r4, #12]
 800b5ae:	89a3      	ldrh	r3, [r4, #12]
 800b5b0:	431d      	orrs	r5, r3
 800b5b2:	81a5      	strh	r5, [r4, #12]
 800b5b4:	e7cf      	b.n	800b556 <__smakebuf_r+0x18>
	...

0800b5b8 <_fstat_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	4d06      	ldr	r5, [pc, #24]	@ (800b5d8 <_fstat_r+0x20>)
 800b5be:	4604      	mov	r4, r0
 800b5c0:	4608      	mov	r0, r1
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	602b      	str	r3, [r5, #0]
 800b5c6:	f7f8 ffd1 	bl	800456c <_fstat>
 800b5ca:	1c43      	adds	r3, r0, #1
 800b5cc:	d102      	bne.n	800b5d4 <_fstat_r+0x1c>
 800b5ce:	682b      	ldr	r3, [r5, #0]
 800b5d0:	b103      	cbz	r3, 800b5d4 <_fstat_r+0x1c>
 800b5d2:	6023      	str	r3, [r4, #0]
 800b5d4:	bd38      	pop	{r3, r4, r5, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20000888 	.word	0x20000888

0800b5dc <_isatty_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	2300      	movs	r3, #0
 800b5e0:	4d05      	ldr	r5, [pc, #20]	@ (800b5f8 <_isatty_r+0x1c>)
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	4608      	mov	r0, r1
 800b5e6:	602b      	str	r3, [r5, #0]
 800b5e8:	f7f8 ffcf 	bl	800458a <_isatty>
 800b5ec:	1c43      	adds	r3, r0, #1
 800b5ee:	d102      	bne.n	800b5f6 <_isatty_r+0x1a>
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	b103      	cbz	r3, 800b5f6 <_isatty_r+0x1a>
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	bd38      	pop	{r3, r4, r5, pc}
 800b5f8:	20000888 	.word	0x20000888

0800b5fc <atan2f>:
 800b5fc:	f000 b924 	b.w	800b848 <__ieee754_atan2f>

0800b600 <powf>:
 800b600:	b570      	push	{r4, r5, r6, lr}
 800b602:	460c      	mov	r4, r1
 800b604:	4606      	mov	r6, r0
 800b606:	f000 f9a7 	bl	800b958 <__ieee754_powf>
 800b60a:	4621      	mov	r1, r4
 800b60c:	4605      	mov	r5, r0
 800b60e:	4620      	mov	r0, r4
 800b610:	f7f5 fd5e 	bl	80010d0 <__aeabi_fcmpun>
 800b614:	bb68      	cbnz	r0, 800b672 <powf+0x72>
 800b616:	2100      	movs	r1, #0
 800b618:	4630      	mov	r0, r6
 800b61a:	f7f5 fd27 	bl	800106c <__aeabi_fcmpeq>
 800b61e:	b190      	cbz	r0, 800b646 <powf+0x46>
 800b620:	2100      	movs	r1, #0
 800b622:	4620      	mov	r0, r4
 800b624:	f7f5 fd22 	bl	800106c <__aeabi_fcmpeq>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d133      	bne.n	800b694 <powf+0x94>
 800b62c:	4620      	mov	r0, r4
 800b62e:	f000 f84e 	bl	800b6ce <finitef>
 800b632:	b1f0      	cbz	r0, 800b672 <powf+0x72>
 800b634:	2100      	movs	r1, #0
 800b636:	4620      	mov	r0, r4
 800b638:	f7f5 fd22 	bl	8001080 <__aeabi_fcmplt>
 800b63c:	b1c8      	cbz	r0, 800b672 <powf+0x72>
 800b63e:	f7fd ff59 	bl	80094f4 <__errno>
 800b642:	2322      	movs	r3, #34	@ 0x22
 800b644:	e014      	b.n	800b670 <powf+0x70>
 800b646:	4628      	mov	r0, r5
 800b648:	f000 f841 	bl	800b6ce <finitef>
 800b64c:	b998      	cbnz	r0, 800b676 <powf+0x76>
 800b64e:	4630      	mov	r0, r6
 800b650:	f000 f83d 	bl	800b6ce <finitef>
 800b654:	b178      	cbz	r0, 800b676 <powf+0x76>
 800b656:	4620      	mov	r0, r4
 800b658:	f000 f839 	bl	800b6ce <finitef>
 800b65c:	b158      	cbz	r0, 800b676 <powf+0x76>
 800b65e:	4629      	mov	r1, r5
 800b660:	4628      	mov	r0, r5
 800b662:	f7f5 fd35 	bl	80010d0 <__aeabi_fcmpun>
 800b666:	2800      	cmp	r0, #0
 800b668:	d0e9      	beq.n	800b63e <powf+0x3e>
 800b66a:	f7fd ff43 	bl	80094f4 <__errno>
 800b66e:	2321      	movs	r3, #33	@ 0x21
 800b670:	6003      	str	r3, [r0, #0]
 800b672:	4628      	mov	r0, r5
 800b674:	bd70      	pop	{r4, r5, r6, pc}
 800b676:	2100      	movs	r1, #0
 800b678:	4628      	mov	r0, r5
 800b67a:	f7f5 fcf7 	bl	800106c <__aeabi_fcmpeq>
 800b67e:	2800      	cmp	r0, #0
 800b680:	d0f7      	beq.n	800b672 <powf+0x72>
 800b682:	4630      	mov	r0, r6
 800b684:	f000 f823 	bl	800b6ce <finitef>
 800b688:	2800      	cmp	r0, #0
 800b68a:	d0f2      	beq.n	800b672 <powf+0x72>
 800b68c:	4620      	mov	r0, r4
 800b68e:	f000 f81e 	bl	800b6ce <finitef>
 800b692:	e7d3      	b.n	800b63c <powf+0x3c>
 800b694:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 800b698:	e7eb      	b.n	800b672 <powf+0x72>

0800b69a <sqrtf>:
 800b69a:	b538      	push	{r3, r4, r5, lr}
 800b69c:	4605      	mov	r5, r0
 800b69e:	f000 f863 	bl	800b768 <__ieee754_sqrtf>
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	f7f5 fd12 	bl	80010d0 <__aeabi_fcmpun>
 800b6ac:	b968      	cbnz	r0, 800b6ca <sqrtf+0x30>
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	f7f5 fce5 	bl	8001080 <__aeabi_fcmplt>
 800b6b6:	b140      	cbz	r0, 800b6ca <sqrtf+0x30>
 800b6b8:	f7fd ff1c 	bl	80094f4 <__errno>
 800b6bc:	2321      	movs	r3, #33	@ 0x21
 800b6be:	2100      	movs	r1, #0
 800b6c0:	6003      	str	r3, [r0, #0]
 800b6c2:	4608      	mov	r0, r1
 800b6c4:	f7f5 fbf2 	bl	8000eac <__aeabi_fdiv>
 800b6c8:	4604      	mov	r4, r0
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	bd38      	pop	{r3, r4, r5, pc}

0800b6ce <finitef>:
 800b6ce:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b6d2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b6d6:	bfac      	ite	ge
 800b6d8:	2000      	movge	r0, #0
 800b6da:	2001      	movlt	r0, #1
 800b6dc:	4770      	bx	lr

0800b6de <fmaxf>:
 800b6de:	b538      	push	{r3, r4, r5, lr}
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	460d      	mov	r5, r1
 800b6e4:	f000 f826 	bl	800b734 <__fpclassifyf>
 800b6e8:	b910      	cbnz	r0, 800b6f0 <fmaxf+0x12>
 800b6ea:	462c      	mov	r4, r5
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	f000 f81f 	bl	800b734 <__fpclassifyf>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d0f8      	beq.n	800b6ec <fmaxf+0xe>
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f7f5 fcdd 	bl	80010bc <__aeabi_fcmpgt>
 800b702:	2800      	cmp	r0, #0
 800b704:	d0f1      	beq.n	800b6ea <fmaxf+0xc>
 800b706:	e7f1      	b.n	800b6ec <fmaxf+0xe>

0800b708 <fminf>:
 800b708:	b538      	push	{r3, r4, r5, lr}
 800b70a:	4604      	mov	r4, r0
 800b70c:	460d      	mov	r5, r1
 800b70e:	f000 f811 	bl	800b734 <__fpclassifyf>
 800b712:	b910      	cbnz	r0, 800b71a <fminf+0x12>
 800b714:	462c      	mov	r4, r5
 800b716:	4620      	mov	r0, r4
 800b718:	bd38      	pop	{r3, r4, r5, pc}
 800b71a:	4628      	mov	r0, r5
 800b71c:	f000 f80a 	bl	800b734 <__fpclassifyf>
 800b720:	2800      	cmp	r0, #0
 800b722:	d0f8      	beq.n	800b716 <fminf+0xe>
 800b724:	4629      	mov	r1, r5
 800b726:	4620      	mov	r0, r4
 800b728:	f7f5 fcaa 	bl	8001080 <__aeabi_fcmplt>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d0f1      	beq.n	800b714 <fminf+0xc>
 800b730:	e7f1      	b.n	800b716 <fminf+0xe>
	...

0800b734 <__fpclassifyf>:
 800b734:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800b738:	d00d      	beq.n	800b756 <__fpclassifyf+0x22>
 800b73a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800b73e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800b742:	d30a      	bcc.n	800b75a <__fpclassifyf+0x26>
 800b744:	4b07      	ldr	r3, [pc, #28]	@ (800b764 <__fpclassifyf+0x30>)
 800b746:	1e42      	subs	r2, r0, #1
 800b748:	429a      	cmp	r2, r3
 800b74a:	d908      	bls.n	800b75e <__fpclassifyf+0x2a>
 800b74c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800b750:	4258      	negs	r0, r3
 800b752:	4158      	adcs	r0, r3
 800b754:	4770      	bx	lr
 800b756:	2002      	movs	r0, #2
 800b758:	4770      	bx	lr
 800b75a:	2004      	movs	r0, #4
 800b75c:	4770      	bx	lr
 800b75e:	2003      	movs	r0, #3
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	007ffffe 	.word	0x007ffffe

0800b768 <__ieee754_sqrtf>:
 800b768:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800b76c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b774:	4603      	mov	r3, r0
 800b776:	4604      	mov	r4, r0
 800b778:	d30a      	bcc.n	800b790 <__ieee754_sqrtf+0x28>
 800b77a:	4601      	mov	r1, r0
 800b77c:	f7f5 fae2 	bl	8000d44 <__aeabi_fmul>
 800b780:	4601      	mov	r1, r0
 800b782:	4620      	mov	r0, r4
 800b784:	f7f5 f9d6 	bl	8000b34 <__addsf3>
 800b788:	4604      	mov	r4, r0
 800b78a:	4620      	mov	r0, r4
 800b78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b790:	2a00      	cmp	r2, #0
 800b792:	d0fa      	beq.n	800b78a <__ieee754_sqrtf+0x22>
 800b794:	2800      	cmp	r0, #0
 800b796:	da06      	bge.n	800b7a6 <__ieee754_sqrtf+0x3e>
 800b798:	4601      	mov	r1, r0
 800b79a:	f7f5 f9c9 	bl	8000b30 <__aeabi_fsub>
 800b79e:	4601      	mov	r1, r0
 800b7a0:	f7f5 fb84 	bl	8000eac <__aeabi_fdiv>
 800b7a4:	e7f0      	b.n	800b788 <__ieee754_sqrtf+0x20>
 800b7a6:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800b7aa:	d03c      	beq.n	800b826 <__ieee754_sqrtf+0xbe>
 800b7ac:	15c2      	asrs	r2, r0, #23
 800b7ae:	2400      	movs	r4, #0
 800b7b0:	2019      	movs	r0, #25
 800b7b2:	4626      	mov	r6, r4
 800b7b4:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800b7b8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b7bc:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800b7c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b7c4:	07d2      	lsls	r2, r2, #31
 800b7c6:	bf58      	it	pl
 800b7c8:	005b      	lslpl	r3, r3, #1
 800b7ca:	106d      	asrs	r5, r5, #1
 800b7cc:	005b      	lsls	r3, r3, #1
 800b7ce:	1872      	adds	r2, r6, r1
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	bfcf      	iteee	gt
 800b7d4:	461a      	movgt	r2, r3
 800b7d6:	1856      	addle	r6, r2, r1
 800b7d8:	1864      	addle	r4, r4, r1
 800b7da:	1a9a      	suble	r2, r3, r2
 800b7dc:	3801      	subs	r0, #1
 800b7de:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800b7e2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b7e6:	d1f2      	bne.n	800b7ce <__ieee754_sqrtf+0x66>
 800b7e8:	b1ba      	cbz	r2, 800b81a <__ieee754_sqrtf+0xb2>
 800b7ea:	4e15      	ldr	r6, [pc, #84]	@ (800b840 <__ieee754_sqrtf+0xd8>)
 800b7ec:	4f15      	ldr	r7, [pc, #84]	@ (800b844 <__ieee754_sqrtf+0xdc>)
 800b7ee:	6830      	ldr	r0, [r6, #0]
 800b7f0:	6839      	ldr	r1, [r7, #0]
 800b7f2:	f7f5 f99d 	bl	8000b30 <__aeabi_fsub>
 800b7f6:	f8d6 8000 	ldr.w	r8, [r6]
 800b7fa:	4601      	mov	r1, r0
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	f7f5 fc49 	bl	8001094 <__aeabi_fcmple>
 800b802:	b150      	cbz	r0, 800b81a <__ieee754_sqrtf+0xb2>
 800b804:	6830      	ldr	r0, [r6, #0]
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	f7f5 f994 	bl	8000b34 <__addsf3>
 800b80c:	6836      	ldr	r6, [r6, #0]
 800b80e:	4601      	mov	r1, r0
 800b810:	4630      	mov	r0, r6
 800b812:	f7f5 fc35 	bl	8001080 <__aeabi_fcmplt>
 800b816:	b170      	cbz	r0, 800b836 <__ieee754_sqrtf+0xce>
 800b818:	3402      	adds	r4, #2
 800b81a:	1064      	asrs	r4, r4, #1
 800b81c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800b820:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800b824:	e7b1      	b.n	800b78a <__ieee754_sqrtf+0x22>
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	0218      	lsls	r0, r3, #8
 800b82a:	460a      	mov	r2, r1
 800b82c:	f101 0101 	add.w	r1, r1, #1
 800b830:	d5f9      	bpl.n	800b826 <__ieee754_sqrtf+0xbe>
 800b832:	4252      	negs	r2, r2
 800b834:	e7bb      	b.n	800b7ae <__ieee754_sqrtf+0x46>
 800b836:	3401      	adds	r4, #1
 800b838:	f024 0401 	bic.w	r4, r4, #1
 800b83c:	e7ed      	b.n	800b81a <__ieee754_sqrtf+0xb2>
 800b83e:	bf00      	nop
 800b840:	0800c818 	.word	0x0800c818
 800b844:	0800c814 	.word	0x0800c814

0800b848 <__ieee754_atan2f>:
 800b848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84a:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800b84e:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800b852:	4603      	mov	r3, r0
 800b854:	d805      	bhi.n	800b862 <__ieee754_atan2f+0x1a>
 800b856:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800b85a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b85e:	4607      	mov	r7, r0
 800b860:	d904      	bls.n	800b86c <__ieee754_atan2f+0x24>
 800b862:	4618      	mov	r0, r3
 800b864:	f7f5 f966 	bl	8000b34 <__addsf3>
 800b868:	4603      	mov	r3, r0
 800b86a:	e010      	b.n	800b88e <__ieee754_atan2f+0x46>
 800b86c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800b870:	d103      	bne.n	800b87a <__ieee754_atan2f+0x32>
 800b872:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b876:	f000 bbcf 	b.w	800c018 <atanf>
 800b87a:	178c      	asrs	r4, r1, #30
 800b87c:	f004 0402 	and.w	r4, r4, #2
 800b880:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b884:	b92a      	cbnz	r2, 800b892 <__ieee754_atan2f+0x4a>
 800b886:	2c02      	cmp	r4, #2
 800b888:	d04b      	beq.n	800b922 <__ieee754_atan2f+0xda>
 800b88a:	2c03      	cmp	r4, #3
 800b88c:	d04b      	beq.n	800b926 <__ieee754_atan2f+0xde>
 800b88e:	4618      	mov	r0, r3
 800b890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b892:	b91e      	cbnz	r6, 800b89c <__ieee754_atan2f+0x54>
 800b894:	2f00      	cmp	r7, #0
 800b896:	db4c      	blt.n	800b932 <__ieee754_atan2f+0xea>
 800b898:	4b27      	ldr	r3, [pc, #156]	@ (800b938 <__ieee754_atan2f+0xf0>)
 800b89a:	e7f8      	b.n	800b88e <__ieee754_atan2f+0x46>
 800b89c:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800b8a0:	d10e      	bne.n	800b8c0 <__ieee754_atan2f+0x78>
 800b8a2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b8a6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b8aa:	d105      	bne.n	800b8b8 <__ieee754_atan2f+0x70>
 800b8ac:	2c02      	cmp	r4, #2
 800b8ae:	d83c      	bhi.n	800b92a <__ieee754_atan2f+0xe2>
 800b8b0:	4b22      	ldr	r3, [pc, #136]	@ (800b93c <__ieee754_atan2f+0xf4>)
 800b8b2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b8b6:	e7ea      	b.n	800b88e <__ieee754_atan2f+0x46>
 800b8b8:	2c02      	cmp	r4, #2
 800b8ba:	d838      	bhi.n	800b92e <__ieee754_atan2f+0xe6>
 800b8bc:	4b20      	ldr	r3, [pc, #128]	@ (800b940 <__ieee754_atan2f+0xf8>)
 800b8be:	e7f8      	b.n	800b8b2 <__ieee754_atan2f+0x6a>
 800b8c0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b8c4:	d0e6      	beq.n	800b894 <__ieee754_atan2f+0x4c>
 800b8c6:	1b92      	subs	r2, r2, r6
 800b8c8:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800b8cc:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800b8d0:	da17      	bge.n	800b902 <__ieee754_atan2f+0xba>
 800b8d2:	2900      	cmp	r1, #0
 800b8d4:	da01      	bge.n	800b8da <__ieee754_atan2f+0x92>
 800b8d6:	303c      	adds	r0, #60	@ 0x3c
 800b8d8:	db15      	blt.n	800b906 <__ieee754_atan2f+0xbe>
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7f5 fae6 	bl	8000eac <__aeabi_fdiv>
 800b8e0:	f000 fca6 	bl	800c230 <fabsf>
 800b8e4:	f000 fb98 	bl	800c018 <atanf>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2c01      	cmp	r4, #1
 800b8ec:	d00d      	beq.n	800b90a <__ieee754_atan2f+0xc2>
 800b8ee:	2c02      	cmp	r4, #2
 800b8f0:	d00e      	beq.n	800b910 <__ieee754_atan2f+0xc8>
 800b8f2:	2c00      	cmp	r4, #0
 800b8f4:	d0cb      	beq.n	800b88e <__ieee754_atan2f+0x46>
 800b8f6:	4913      	ldr	r1, [pc, #76]	@ (800b944 <__ieee754_atan2f+0xfc>)
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7f5 f91b 	bl	8000b34 <__addsf3>
 800b8fe:	4912      	ldr	r1, [pc, #72]	@ (800b948 <__ieee754_atan2f+0x100>)
 800b900:	e00c      	b.n	800b91c <__ieee754_atan2f+0xd4>
 800b902:	4b0d      	ldr	r3, [pc, #52]	@ (800b938 <__ieee754_atan2f+0xf0>)
 800b904:	e7f1      	b.n	800b8ea <__ieee754_atan2f+0xa2>
 800b906:	2300      	movs	r3, #0
 800b908:	e7ef      	b.n	800b8ea <__ieee754_atan2f+0xa2>
 800b90a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b90e:	e7be      	b.n	800b88e <__ieee754_atan2f+0x46>
 800b910:	490c      	ldr	r1, [pc, #48]	@ (800b944 <__ieee754_atan2f+0xfc>)
 800b912:	4618      	mov	r0, r3
 800b914:	f7f5 f90e 	bl	8000b34 <__addsf3>
 800b918:	4601      	mov	r1, r0
 800b91a:	480b      	ldr	r0, [pc, #44]	@ (800b948 <__ieee754_atan2f+0x100>)
 800b91c:	f7f5 f908 	bl	8000b30 <__aeabi_fsub>
 800b920:	e7a2      	b.n	800b868 <__ieee754_atan2f+0x20>
 800b922:	4b09      	ldr	r3, [pc, #36]	@ (800b948 <__ieee754_atan2f+0x100>)
 800b924:	e7b3      	b.n	800b88e <__ieee754_atan2f+0x46>
 800b926:	4b09      	ldr	r3, [pc, #36]	@ (800b94c <__ieee754_atan2f+0x104>)
 800b928:	e7b1      	b.n	800b88e <__ieee754_atan2f+0x46>
 800b92a:	4b09      	ldr	r3, [pc, #36]	@ (800b950 <__ieee754_atan2f+0x108>)
 800b92c:	e7af      	b.n	800b88e <__ieee754_atan2f+0x46>
 800b92e:	2300      	movs	r3, #0
 800b930:	e7ad      	b.n	800b88e <__ieee754_atan2f+0x46>
 800b932:	4b08      	ldr	r3, [pc, #32]	@ (800b954 <__ieee754_atan2f+0x10c>)
 800b934:	e7ab      	b.n	800b88e <__ieee754_atan2f+0x46>
 800b936:	bf00      	nop
 800b938:	3fc90fdb 	.word	0x3fc90fdb
 800b93c:	0800c828 	.word	0x0800c828
 800b940:	0800c81c 	.word	0x0800c81c
 800b944:	33bbbd2e 	.word	0x33bbbd2e
 800b948:	40490fdb 	.word	0x40490fdb
 800b94c:	c0490fdb 	.word	0xc0490fdb
 800b950:	3f490fdb 	.word	0x3f490fdb
 800b954:	bfc90fdb 	.word	0xbfc90fdb

0800b958 <__ieee754_powf>:
 800b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95c:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 800b960:	4681      	mov	r9, r0
 800b962:	460f      	mov	r7, r1
 800b964:	4606      	mov	r6, r0
 800b966:	460c      	mov	r4, r1
 800b968:	b087      	sub	sp, #28
 800b96a:	d10c      	bne.n	800b986 <__ieee754_powf+0x2e>
 800b96c:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 800b970:	0076      	lsls	r6, r6, #1
 800b972:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800b976:	f240 8310 	bls.w	800bf9a <__ieee754_powf+0x642>
 800b97a:	4639      	mov	r1, r7
 800b97c:	4648      	mov	r0, r9
 800b97e:	f7f5 f8d9 	bl	8000b34 <__addsf3>
 800b982:	4601      	mov	r1, r0
 800b984:	e043      	b.n	800ba0e <__ieee754_powf+0xb6>
 800b986:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800b98a:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800b98e:	d802      	bhi.n	800b996 <__ieee754_powf+0x3e>
 800b990:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800b994:	d908      	bls.n	800b9a8 <__ieee754_powf+0x50>
 800b996:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800b99a:	d1ee      	bne.n	800b97a <__ieee754_powf+0x22>
 800b99c:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800b9a0:	0064      	lsls	r4, r4, #1
 800b9a2:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800b9a6:	e7e6      	b.n	800b976 <__ieee754_powf+0x1e>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	da1f      	bge.n	800b9ec <__ieee754_powf+0x94>
 800b9ac:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 800b9b0:	f080 82f8 	bcs.w	800bfa4 <__ieee754_powf+0x64c>
 800b9b4:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800b9b8:	d32f      	bcc.n	800ba1a <__ieee754_powf+0xc2>
 800b9ba:	ea4f 53eb 	mov.w	r3, fp, asr #23
 800b9be:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800b9c2:	fa4b f503 	asr.w	r5, fp, r3
 800b9c6:	fa05 f303 	lsl.w	r3, r5, r3
 800b9ca:	455b      	cmp	r3, fp
 800b9cc:	d123      	bne.n	800ba16 <__ieee754_powf+0xbe>
 800b9ce:	f005 0501 	and.w	r5, r5, #1
 800b9d2:	f1c5 0502 	rsb	r5, r5, #2
 800b9d6:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800b9da:	d11f      	bne.n	800ba1c <__ieee754_powf+0xc4>
 800b9dc:	2c00      	cmp	r4, #0
 800b9de:	4649      	mov	r1, r9
 800b9e0:	da15      	bge.n	800ba0e <__ieee754_powf+0xb6>
 800b9e2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b9e6:	f7f5 fa61 	bl	8000eac <__aeabi_fdiv>
 800b9ea:	e7ca      	b.n	800b982 <__ieee754_powf+0x2a>
 800b9ec:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800b9f0:	d111      	bne.n	800ba16 <__ieee754_powf+0xbe>
 800b9f2:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800b9f6:	f000 82d0 	beq.w	800bf9a <__ieee754_powf+0x642>
 800b9fa:	d904      	bls.n	800ba06 <__ieee754_powf+0xae>
 800b9fc:	2c00      	cmp	r4, #0
 800b9fe:	f280 82cf 	bge.w	800bfa0 <__ieee754_powf+0x648>
 800ba02:	2100      	movs	r1, #0
 800ba04:	e003      	b.n	800ba0e <__ieee754_powf+0xb6>
 800ba06:	2c00      	cmp	r4, #0
 800ba08:	dafb      	bge.n	800ba02 <__ieee754_powf+0xaa>
 800ba0a:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800ba0e:	4608      	mov	r0, r1
 800ba10:	b007      	add	sp, #28
 800ba12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba16:	2500      	movs	r5, #0
 800ba18:	e7dd      	b.n	800b9d6 <__ieee754_powf+0x7e>
 800ba1a:	2500      	movs	r5, #0
 800ba1c:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ba20:	d104      	bne.n	800ba2c <__ieee754_powf+0xd4>
 800ba22:	4649      	mov	r1, r9
 800ba24:	4648      	mov	r0, r9
 800ba26:	f7f5 f98d 	bl	8000d44 <__aeabi_fmul>
 800ba2a:	e7aa      	b.n	800b982 <__ieee754_powf+0x2a>
 800ba2c:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800ba30:	f040 82bd 	bne.w	800bfae <__ieee754_powf+0x656>
 800ba34:	2e00      	cmp	r6, #0
 800ba36:	f2c0 82ba 	blt.w	800bfae <__ieee754_powf+0x656>
 800ba3a:	4648      	mov	r0, r9
 800ba3c:	b007      	add	sp, #28
 800ba3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba42:	f7ff be91 	b.w	800b768 <__ieee754_sqrtf>
 800ba46:	2d01      	cmp	r5, #1
 800ba48:	d1e1      	bne.n	800ba0e <__ieee754_powf+0xb6>
 800ba4a:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800ba4e:	e798      	b.n	800b982 <__ieee754_powf+0x2a>
 800ba50:	0ff3      	lsrs	r3, r6, #31
 800ba52:	3b01      	subs	r3, #1
 800ba54:	9303      	str	r3, [sp, #12]
 800ba56:	432b      	orrs	r3, r5
 800ba58:	d101      	bne.n	800ba5e <__ieee754_powf+0x106>
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	e2c5      	b.n	800bfea <__ieee754_powf+0x692>
 800ba5e:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800ba62:	f240 809b 	bls.w	800bb9c <__ieee754_powf+0x244>
 800ba66:	4b46      	ldr	r3, [pc, #280]	@ (800bb80 <__ieee754_powf+0x228>)
 800ba68:	4598      	cmp	r8, r3
 800ba6a:	d807      	bhi.n	800ba7c <__ieee754_powf+0x124>
 800ba6c:	2c00      	cmp	r4, #0
 800ba6e:	da0a      	bge.n	800ba86 <__ieee754_powf+0x12e>
 800ba70:	2000      	movs	r0, #0
 800ba72:	b007      	add	sp, #28
 800ba74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba78:	f000 bc43 	b.w	800c302 <__math_oflowf>
 800ba7c:	4b41      	ldr	r3, [pc, #260]	@ (800bb84 <__ieee754_powf+0x22c>)
 800ba7e:	4598      	cmp	r8, r3
 800ba80:	d907      	bls.n	800ba92 <__ieee754_powf+0x13a>
 800ba82:	2c00      	cmp	r4, #0
 800ba84:	dcf4      	bgt.n	800ba70 <__ieee754_powf+0x118>
 800ba86:	2000      	movs	r0, #0
 800ba88:	b007      	add	sp, #28
 800ba8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8e:	f000 bc34 	b.w	800c2fa <__math_uflowf>
 800ba92:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ba96:	f7f5 f84b 	bl	8000b30 <__aeabi_fsub>
 800ba9a:	493b      	ldr	r1, [pc, #236]	@ (800bb88 <__ieee754_powf+0x230>)
 800ba9c:	4606      	mov	r6, r0
 800ba9e:	f7f5 f951 	bl	8000d44 <__aeabi_fmul>
 800baa2:	493a      	ldr	r1, [pc, #232]	@ (800bb8c <__ieee754_powf+0x234>)
 800baa4:	4680      	mov	r8, r0
 800baa6:	4630      	mov	r0, r6
 800baa8:	f7f5 f94c 	bl	8000d44 <__aeabi_fmul>
 800baac:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800bab0:	4681      	mov	r9, r0
 800bab2:	4630      	mov	r0, r6
 800bab4:	f7f5 f946 	bl	8000d44 <__aeabi_fmul>
 800bab8:	4601      	mov	r1, r0
 800baba:	4835      	ldr	r0, [pc, #212]	@ (800bb90 <__ieee754_powf+0x238>)
 800babc:	f7f5 f838 	bl	8000b30 <__aeabi_fsub>
 800bac0:	4631      	mov	r1, r6
 800bac2:	f7f5 f93f 	bl	8000d44 <__aeabi_fmul>
 800bac6:	4601      	mov	r1, r0
 800bac8:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800bacc:	f7f5 f830 	bl	8000b30 <__aeabi_fsub>
 800bad0:	4631      	mov	r1, r6
 800bad2:	4682      	mov	sl, r0
 800bad4:	4630      	mov	r0, r6
 800bad6:	f7f5 f935 	bl	8000d44 <__aeabi_fmul>
 800bada:	4601      	mov	r1, r0
 800badc:	4650      	mov	r0, sl
 800bade:	f7f5 f931 	bl	8000d44 <__aeabi_fmul>
 800bae2:	492c      	ldr	r1, [pc, #176]	@ (800bb94 <__ieee754_powf+0x23c>)
 800bae4:	f7f5 f92e 	bl	8000d44 <__aeabi_fmul>
 800bae8:	4601      	mov	r1, r0
 800baea:	4648      	mov	r0, r9
 800baec:	f7f5 f820 	bl	8000b30 <__aeabi_fsub>
 800baf0:	4601      	mov	r1, r0
 800baf2:	4606      	mov	r6, r0
 800baf4:	4640      	mov	r0, r8
 800baf6:	f7f5 f81d 	bl	8000b34 <__addsf3>
 800bafa:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800bafe:	f02b 0b0f 	bic.w	fp, fp, #15
 800bb02:	4641      	mov	r1, r8
 800bb04:	4658      	mov	r0, fp
 800bb06:	f7f5 f813 	bl	8000b30 <__aeabi_fsub>
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	f7f5 f80f 	bl	8000b30 <__aeabi_fsub>
 800bb12:	9b03      	ldr	r3, [sp, #12]
 800bb14:	3d01      	subs	r5, #1
 800bb16:	f36f 040b 	bfc	r4, #0, #12
 800bb1a:	431d      	orrs	r5, r3
 800bb1c:	4606      	mov	r6, r0
 800bb1e:	4621      	mov	r1, r4
 800bb20:	4638      	mov	r0, r7
 800bb22:	bf14      	ite	ne
 800bb24:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 800bb28:	4d1b      	ldreq	r5, [pc, #108]	@ (800bb98 <__ieee754_powf+0x240>)
 800bb2a:	f7f5 f801 	bl	8000b30 <__aeabi_fsub>
 800bb2e:	4659      	mov	r1, fp
 800bb30:	f7f5 f908 	bl	8000d44 <__aeabi_fmul>
 800bb34:	4639      	mov	r1, r7
 800bb36:	4680      	mov	r8, r0
 800bb38:	4630      	mov	r0, r6
 800bb3a:	f7f5 f903 	bl	8000d44 <__aeabi_fmul>
 800bb3e:	4601      	mov	r1, r0
 800bb40:	4640      	mov	r0, r8
 800bb42:	f7f4 fff7 	bl	8000b34 <__addsf3>
 800bb46:	4621      	mov	r1, r4
 800bb48:	4606      	mov	r6, r0
 800bb4a:	4658      	mov	r0, fp
 800bb4c:	f7f5 f8fa 	bl	8000d44 <__aeabi_fmul>
 800bb50:	4601      	mov	r1, r0
 800bb52:	4607      	mov	r7, r0
 800bb54:	4630      	mov	r0, r6
 800bb56:	f7f4 ffed 	bl	8000b34 <__addsf3>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	4680      	mov	r8, r0
 800bb60:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800bb64:	f340 813f 	ble.w	800bde6 <__ieee754_powf+0x48e>
 800bb68:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800bb6c:	f240 8128 	bls.w	800bdc0 <__ieee754_powf+0x468>
 800bb70:	2100      	movs	r1, #0
 800bb72:	4628      	mov	r0, r5
 800bb74:	f7f5 fa84 	bl	8001080 <__aeabi_fcmplt>
 800bb78:	3800      	subs	r0, #0
 800bb7a:	bf18      	it	ne
 800bb7c:	2001      	movne	r0, #1
 800bb7e:	e778      	b.n	800ba72 <__ieee754_powf+0x11a>
 800bb80:	3f7ffff3 	.word	0x3f7ffff3
 800bb84:	3f800007 	.word	0x3f800007
 800bb88:	3fb8aa00 	.word	0x3fb8aa00
 800bb8c:	36eca570 	.word	0x36eca570
 800bb90:	3eaaaaab 	.word	0x3eaaaaab
 800bb94:	3fb8aa3b 	.word	0x3fb8aa3b
 800bb98:	bf800000 	.word	0xbf800000
 800bb9c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800bba0:	f040 810a 	bne.w	800bdb8 <__ieee754_powf+0x460>
 800bba4:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800bba8:	f7f5 f8cc 	bl	8000d44 <__aeabi_fmul>
 800bbac:	f06f 0217 	mvn.w	r2, #23
 800bbb0:	4682      	mov	sl, r0
 800bbb2:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800bbb6:	3b7f      	subs	r3, #127	@ 0x7f
 800bbb8:	441a      	add	r2, r3
 800bbba:	4b95      	ldr	r3, [pc, #596]	@ (800be10 <__ieee754_powf+0x4b8>)
 800bbbc:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 800bbc0:	459a      	cmp	sl, r3
 800bbc2:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800bbc6:	dd06      	ble.n	800bbd6 <__ieee754_powf+0x27e>
 800bbc8:	4b92      	ldr	r3, [pc, #584]	@ (800be14 <__ieee754_powf+0x4bc>)
 800bbca:	459a      	cmp	sl, r3
 800bbcc:	f340 80f6 	ble.w	800bdbc <__ieee754_powf+0x464>
 800bbd0:	3201      	adds	r2, #1
 800bbd2:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	9301      	str	r3, [sp, #4]
 800bbda:	9205      	str	r2, [sp, #20]
 800bbdc:	4b8e      	ldr	r3, [pc, #568]	@ (800be18 <__ieee754_powf+0x4c0>)
 800bbde:	9a01      	ldr	r2, [sp, #4]
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800bbe6:	46b2      	mov	sl, r6
 800bbe8:	4659      	mov	r1, fp
 800bbea:	f7f4 ffa1 	bl	8000b30 <__aeabi_fsub>
 800bbee:	4631      	mov	r1, r6
 800bbf0:	4681      	mov	r9, r0
 800bbf2:	4658      	mov	r0, fp
 800bbf4:	f7f4 ff9e 	bl	8000b34 <__addsf3>
 800bbf8:	4601      	mov	r1, r0
 800bbfa:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800bbfe:	f7f5 f955 	bl	8000eac <__aeabi_fdiv>
 800bc02:	4601      	mov	r1, r0
 800bc04:	9004      	str	r0, [sp, #16]
 800bc06:	4648      	mov	r0, r9
 800bc08:	f7f5 f89c 	bl	8000d44 <__aeabi_fmul>
 800bc0c:	9002      	str	r0, [sp, #8]
 800bc0e:	9b02      	ldr	r3, [sp, #8]
 800bc10:	1076      	asrs	r6, r6, #1
 800bc12:	f36f 030b 	bfc	r3, #0, #12
 800bc16:	4698      	mov	r8, r3
 800bc18:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 800bc1c:	9b01      	ldr	r3, [sp, #4]
 800bc1e:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 800bc22:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800bc26:	4631      	mov	r1, r6
 800bc28:	4640      	mov	r0, r8
 800bc2a:	f7f5 f88b 	bl	8000d44 <__aeabi_fmul>
 800bc2e:	4601      	mov	r1, r0
 800bc30:	4648      	mov	r0, r9
 800bc32:	f7f4 ff7d 	bl	8000b30 <__aeabi_fsub>
 800bc36:	4659      	mov	r1, fp
 800bc38:	4681      	mov	r9, r0
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f7f4 ff78 	bl	8000b30 <__aeabi_fsub>
 800bc40:	4601      	mov	r1, r0
 800bc42:	4650      	mov	r0, sl
 800bc44:	f7f4 ff74 	bl	8000b30 <__aeabi_fsub>
 800bc48:	4641      	mov	r1, r8
 800bc4a:	f7f5 f87b 	bl	8000d44 <__aeabi_fmul>
 800bc4e:	4601      	mov	r1, r0
 800bc50:	4648      	mov	r0, r9
 800bc52:	f7f4 ff6d 	bl	8000b30 <__aeabi_fsub>
 800bc56:	9b04      	ldr	r3, [sp, #16]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	f7f5 f873 	bl	8000d44 <__aeabi_fmul>
 800bc5e:	9902      	ldr	r1, [sp, #8]
 800bc60:	4683      	mov	fp, r0
 800bc62:	4608      	mov	r0, r1
 800bc64:	f7f5 f86e 	bl	8000d44 <__aeabi_fmul>
 800bc68:	4606      	mov	r6, r0
 800bc6a:	496c      	ldr	r1, [pc, #432]	@ (800be1c <__ieee754_powf+0x4c4>)
 800bc6c:	f7f5 f86a 	bl	8000d44 <__aeabi_fmul>
 800bc70:	496b      	ldr	r1, [pc, #428]	@ (800be20 <__ieee754_powf+0x4c8>)
 800bc72:	f7f4 ff5f 	bl	8000b34 <__addsf3>
 800bc76:	4631      	mov	r1, r6
 800bc78:	f7f5 f864 	bl	8000d44 <__aeabi_fmul>
 800bc7c:	4969      	ldr	r1, [pc, #420]	@ (800be24 <__ieee754_powf+0x4cc>)
 800bc7e:	f7f4 ff59 	bl	8000b34 <__addsf3>
 800bc82:	4631      	mov	r1, r6
 800bc84:	f7f5 f85e 	bl	8000d44 <__aeabi_fmul>
 800bc88:	4967      	ldr	r1, [pc, #412]	@ (800be28 <__ieee754_powf+0x4d0>)
 800bc8a:	f7f4 ff53 	bl	8000b34 <__addsf3>
 800bc8e:	4631      	mov	r1, r6
 800bc90:	f7f5 f858 	bl	8000d44 <__aeabi_fmul>
 800bc94:	4965      	ldr	r1, [pc, #404]	@ (800be2c <__ieee754_powf+0x4d4>)
 800bc96:	f7f4 ff4d 	bl	8000b34 <__addsf3>
 800bc9a:	4631      	mov	r1, r6
 800bc9c:	f7f5 f852 	bl	8000d44 <__aeabi_fmul>
 800bca0:	4963      	ldr	r1, [pc, #396]	@ (800be30 <__ieee754_powf+0x4d8>)
 800bca2:	f7f4 ff47 	bl	8000b34 <__addsf3>
 800bca6:	4631      	mov	r1, r6
 800bca8:	4681      	mov	r9, r0
 800bcaa:	4630      	mov	r0, r6
 800bcac:	f7f5 f84a 	bl	8000d44 <__aeabi_fmul>
 800bcb0:	4601      	mov	r1, r0
 800bcb2:	4648      	mov	r0, r9
 800bcb4:	f7f5 f846 	bl	8000d44 <__aeabi_fmul>
 800bcb8:	4606      	mov	r6, r0
 800bcba:	4641      	mov	r1, r8
 800bcbc:	9802      	ldr	r0, [sp, #8]
 800bcbe:	f7f4 ff39 	bl	8000b34 <__addsf3>
 800bcc2:	4659      	mov	r1, fp
 800bcc4:	f7f5 f83e 	bl	8000d44 <__aeabi_fmul>
 800bcc8:	4631      	mov	r1, r6
 800bcca:	f7f4 ff33 	bl	8000b34 <__addsf3>
 800bcce:	4641      	mov	r1, r8
 800bcd0:	4681      	mov	r9, r0
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	f7f5 f836 	bl	8000d44 <__aeabi_fmul>
 800bcd8:	4956      	ldr	r1, [pc, #344]	@ (800be34 <__ieee754_powf+0x4dc>)
 800bcda:	4682      	mov	sl, r0
 800bcdc:	f7f4 ff2a 	bl	8000b34 <__addsf3>
 800bce0:	4649      	mov	r1, r9
 800bce2:	f7f4 ff27 	bl	8000b34 <__addsf3>
 800bce6:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800bcea:	f026 060f 	bic.w	r6, r6, #15
 800bcee:	4631      	mov	r1, r6
 800bcf0:	4640      	mov	r0, r8
 800bcf2:	f7f5 f827 	bl	8000d44 <__aeabi_fmul>
 800bcf6:	494f      	ldr	r1, [pc, #316]	@ (800be34 <__ieee754_powf+0x4dc>)
 800bcf8:	4680      	mov	r8, r0
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f7f4 ff18 	bl	8000b30 <__aeabi_fsub>
 800bd00:	4651      	mov	r1, sl
 800bd02:	f7f4 ff15 	bl	8000b30 <__aeabi_fsub>
 800bd06:	4601      	mov	r1, r0
 800bd08:	4648      	mov	r0, r9
 800bd0a:	f7f4 ff11 	bl	8000b30 <__aeabi_fsub>
 800bd0e:	9902      	ldr	r1, [sp, #8]
 800bd10:	f7f5 f818 	bl	8000d44 <__aeabi_fmul>
 800bd14:	4631      	mov	r1, r6
 800bd16:	4681      	mov	r9, r0
 800bd18:	4658      	mov	r0, fp
 800bd1a:	f7f5 f813 	bl	8000d44 <__aeabi_fmul>
 800bd1e:	4601      	mov	r1, r0
 800bd20:	4648      	mov	r0, r9
 800bd22:	f7f4 ff07 	bl	8000b34 <__addsf3>
 800bd26:	4682      	mov	sl, r0
 800bd28:	4601      	mov	r1, r0
 800bd2a:	4640      	mov	r0, r8
 800bd2c:	f7f4 ff02 	bl	8000b34 <__addsf3>
 800bd30:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800bd34:	f026 060f 	bic.w	r6, r6, #15
 800bd38:	4630      	mov	r0, r6
 800bd3a:	493f      	ldr	r1, [pc, #252]	@ (800be38 <__ieee754_powf+0x4e0>)
 800bd3c:	f7f5 f802 	bl	8000d44 <__aeabi_fmul>
 800bd40:	4641      	mov	r1, r8
 800bd42:	4681      	mov	r9, r0
 800bd44:	4630      	mov	r0, r6
 800bd46:	f7f4 fef3 	bl	8000b30 <__aeabi_fsub>
 800bd4a:	4601      	mov	r1, r0
 800bd4c:	4650      	mov	r0, sl
 800bd4e:	f7f4 feef 	bl	8000b30 <__aeabi_fsub>
 800bd52:	493a      	ldr	r1, [pc, #232]	@ (800be3c <__ieee754_powf+0x4e4>)
 800bd54:	f7f4 fff6 	bl	8000d44 <__aeabi_fmul>
 800bd58:	4939      	ldr	r1, [pc, #228]	@ (800be40 <__ieee754_powf+0x4e8>)
 800bd5a:	4680      	mov	r8, r0
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	f7f4 fff1 	bl	8000d44 <__aeabi_fmul>
 800bd62:	4601      	mov	r1, r0
 800bd64:	4640      	mov	r0, r8
 800bd66:	f7f4 fee5 	bl	8000b34 <__addsf3>
 800bd6a:	4b36      	ldr	r3, [pc, #216]	@ (800be44 <__ieee754_powf+0x4ec>)
 800bd6c:	9a01      	ldr	r2, [sp, #4]
 800bd6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd72:	f7f4 fedf 	bl	8000b34 <__addsf3>
 800bd76:	9a05      	ldr	r2, [sp, #20]
 800bd78:	4606      	mov	r6, r0
 800bd7a:	4610      	mov	r0, r2
 800bd7c:	f7f4 ff8e 	bl	8000c9c <__aeabi_i2f>
 800bd80:	4680      	mov	r8, r0
 800bd82:	4b31      	ldr	r3, [pc, #196]	@ (800be48 <__ieee754_powf+0x4f0>)
 800bd84:	9a01      	ldr	r2, [sp, #4]
 800bd86:	4631      	mov	r1, r6
 800bd88:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800bd8c:	4648      	mov	r0, r9
 800bd8e:	f7f4 fed1 	bl	8000b34 <__addsf3>
 800bd92:	4651      	mov	r1, sl
 800bd94:	f7f4 fece 	bl	8000b34 <__addsf3>
 800bd98:	4641      	mov	r1, r8
 800bd9a:	f7f4 fecb 	bl	8000b34 <__addsf3>
 800bd9e:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800bda2:	f02b 0b0f 	bic.w	fp, fp, #15
 800bda6:	4641      	mov	r1, r8
 800bda8:	4658      	mov	r0, fp
 800bdaa:	f7f4 fec1 	bl	8000b30 <__aeabi_fsub>
 800bdae:	4651      	mov	r1, sl
 800bdb0:	f7f4 febe 	bl	8000b30 <__aeabi_fsub>
 800bdb4:	4649      	mov	r1, r9
 800bdb6:	e6a6      	b.n	800bb06 <__ieee754_powf+0x1ae>
 800bdb8:	2200      	movs	r2, #0
 800bdba:	e6fa      	b.n	800bbb2 <__ieee754_powf+0x25a>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e70b      	b.n	800bbd8 <__ieee754_powf+0x280>
 800bdc0:	d148      	bne.n	800be54 <__ieee754_powf+0x4fc>
 800bdc2:	4922      	ldr	r1, [pc, #136]	@ (800be4c <__ieee754_powf+0x4f4>)
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	f7f4 feb5 	bl	8000b34 <__addsf3>
 800bdca:	4639      	mov	r1, r7
 800bdcc:	4681      	mov	r9, r0
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f7f4 feae 	bl	8000b30 <__aeabi_fsub>
 800bdd4:	4601      	mov	r1, r0
 800bdd6:	4648      	mov	r0, r9
 800bdd8:	f7f5 f970 	bl	80010bc <__aeabi_fcmpgt>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	f47f aec7 	bne.w	800bb70 <__ieee754_powf+0x218>
 800bde2:	2386      	movs	r3, #134	@ 0x86
 800bde4:	e03b      	b.n	800be5e <__ieee754_powf+0x506>
 800bde6:	4a1a      	ldr	r2, [pc, #104]	@ (800be50 <__ieee754_powf+0x4f8>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d907      	bls.n	800bdfc <__ieee754_powf+0x4a4>
 800bdec:	2100      	movs	r1, #0
 800bdee:	4628      	mov	r0, r5
 800bdf0:	f7f5 f946 	bl	8001080 <__aeabi_fcmplt>
 800bdf4:	3800      	subs	r0, #0
 800bdf6:	bf18      	it	ne
 800bdf8:	2001      	movne	r0, #1
 800bdfa:	e645      	b.n	800ba88 <__ieee754_powf+0x130>
 800bdfc:	d12a      	bne.n	800be54 <__ieee754_powf+0x4fc>
 800bdfe:	4639      	mov	r1, r7
 800be00:	f7f4 fe96 	bl	8000b30 <__aeabi_fsub>
 800be04:	4631      	mov	r1, r6
 800be06:	f7f5 f94f 	bl	80010a8 <__aeabi_fcmpge>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d0e9      	beq.n	800bde2 <__ieee754_powf+0x48a>
 800be0e:	e7ed      	b.n	800bdec <__ieee754_powf+0x494>
 800be10:	001cc471 	.word	0x001cc471
 800be14:	005db3d6 	.word	0x005db3d6
 800be18:	0800c844 	.word	0x0800c844
 800be1c:	3e53f142 	.word	0x3e53f142
 800be20:	3e6c3255 	.word	0x3e6c3255
 800be24:	3e8ba305 	.word	0x3e8ba305
 800be28:	3eaaaaab 	.word	0x3eaaaaab
 800be2c:	3edb6db7 	.word	0x3edb6db7
 800be30:	3f19999a 	.word	0x3f19999a
 800be34:	40400000 	.word	0x40400000
 800be38:	3f763800 	.word	0x3f763800
 800be3c:	3f76384f 	.word	0x3f76384f
 800be40:	369dc3a0 	.word	0x369dc3a0
 800be44:	0800c834 	.word	0x0800c834
 800be48:	0800c83c 	.word	0x0800c83c
 800be4c:	3338aa3c 	.word	0x3338aa3c
 800be50:	43160000 	.word	0x43160000
 800be54:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800be58:	f240 809b 	bls.w	800bf92 <__ieee754_powf+0x63a>
 800be5c:	15db      	asrs	r3, r3, #23
 800be5e:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800be62:	3b7e      	subs	r3, #126	@ 0x7e
 800be64:	411c      	asrs	r4, r3
 800be66:	4444      	add	r4, r8
 800be68:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 800be6c:	4961      	ldr	r1, [pc, #388]	@ (800bff4 <__ieee754_powf+0x69c>)
 800be6e:	3b7f      	subs	r3, #127	@ 0x7f
 800be70:	4119      	asrs	r1, r3
 800be72:	4021      	ands	r1, r4
 800be74:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800be78:	f1c3 0317 	rsb	r3, r3, #23
 800be7c:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 800be80:	4638      	mov	r0, r7
 800be82:	411c      	asrs	r4, r3
 800be84:	f1b8 0f00 	cmp.w	r8, #0
 800be88:	bfb8      	it	lt
 800be8a:	4264      	neglt	r4, r4
 800be8c:	f7f4 fe50 	bl	8000b30 <__aeabi_fsub>
 800be90:	4607      	mov	r7, r0
 800be92:	4631      	mov	r1, r6
 800be94:	4638      	mov	r0, r7
 800be96:	f7f4 fe4d 	bl	8000b34 <__addsf3>
 800be9a:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800be9e:	f028 080f 	bic.w	r8, r8, #15
 800bea2:	4640      	mov	r0, r8
 800bea4:	4954      	ldr	r1, [pc, #336]	@ (800bff8 <__ieee754_powf+0x6a0>)
 800bea6:	f7f4 ff4d 	bl	8000d44 <__aeabi_fmul>
 800beaa:	4639      	mov	r1, r7
 800beac:	4681      	mov	r9, r0
 800beae:	4640      	mov	r0, r8
 800beb0:	f7f4 fe3e 	bl	8000b30 <__aeabi_fsub>
 800beb4:	4601      	mov	r1, r0
 800beb6:	4630      	mov	r0, r6
 800beb8:	f7f4 fe3a 	bl	8000b30 <__aeabi_fsub>
 800bebc:	494f      	ldr	r1, [pc, #316]	@ (800bffc <__ieee754_powf+0x6a4>)
 800bebe:	f7f4 ff41 	bl	8000d44 <__aeabi_fmul>
 800bec2:	494f      	ldr	r1, [pc, #316]	@ (800c000 <__ieee754_powf+0x6a8>)
 800bec4:	4606      	mov	r6, r0
 800bec6:	4640      	mov	r0, r8
 800bec8:	f7f4 ff3c 	bl	8000d44 <__aeabi_fmul>
 800becc:	4601      	mov	r1, r0
 800bece:	4630      	mov	r0, r6
 800bed0:	f7f4 fe30 	bl	8000b34 <__addsf3>
 800bed4:	4607      	mov	r7, r0
 800bed6:	4601      	mov	r1, r0
 800bed8:	4648      	mov	r0, r9
 800beda:	f7f4 fe2b 	bl	8000b34 <__addsf3>
 800bede:	4649      	mov	r1, r9
 800bee0:	4606      	mov	r6, r0
 800bee2:	f7f4 fe25 	bl	8000b30 <__aeabi_fsub>
 800bee6:	4601      	mov	r1, r0
 800bee8:	4638      	mov	r0, r7
 800beea:	f7f4 fe21 	bl	8000b30 <__aeabi_fsub>
 800beee:	4631      	mov	r1, r6
 800bef0:	4680      	mov	r8, r0
 800bef2:	4630      	mov	r0, r6
 800bef4:	f7f4 ff26 	bl	8000d44 <__aeabi_fmul>
 800bef8:	4607      	mov	r7, r0
 800befa:	4942      	ldr	r1, [pc, #264]	@ (800c004 <__ieee754_powf+0x6ac>)
 800befc:	f7f4 ff22 	bl	8000d44 <__aeabi_fmul>
 800bf00:	4941      	ldr	r1, [pc, #260]	@ (800c008 <__ieee754_powf+0x6b0>)
 800bf02:	f7f4 fe15 	bl	8000b30 <__aeabi_fsub>
 800bf06:	4639      	mov	r1, r7
 800bf08:	f7f4 ff1c 	bl	8000d44 <__aeabi_fmul>
 800bf0c:	493f      	ldr	r1, [pc, #252]	@ (800c00c <__ieee754_powf+0x6b4>)
 800bf0e:	f7f4 fe11 	bl	8000b34 <__addsf3>
 800bf12:	4639      	mov	r1, r7
 800bf14:	f7f4 ff16 	bl	8000d44 <__aeabi_fmul>
 800bf18:	493d      	ldr	r1, [pc, #244]	@ (800c010 <__ieee754_powf+0x6b8>)
 800bf1a:	f7f4 fe09 	bl	8000b30 <__aeabi_fsub>
 800bf1e:	4639      	mov	r1, r7
 800bf20:	f7f4 ff10 	bl	8000d44 <__aeabi_fmul>
 800bf24:	493b      	ldr	r1, [pc, #236]	@ (800c014 <__ieee754_powf+0x6bc>)
 800bf26:	f7f4 fe05 	bl	8000b34 <__addsf3>
 800bf2a:	4639      	mov	r1, r7
 800bf2c:	f7f4 ff0a 	bl	8000d44 <__aeabi_fmul>
 800bf30:	4601      	mov	r1, r0
 800bf32:	4630      	mov	r0, r6
 800bf34:	f7f4 fdfc 	bl	8000b30 <__aeabi_fsub>
 800bf38:	4607      	mov	r7, r0
 800bf3a:	4601      	mov	r1, r0
 800bf3c:	4630      	mov	r0, r6
 800bf3e:	f7f4 ff01 	bl	8000d44 <__aeabi_fmul>
 800bf42:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bf46:	4681      	mov	r9, r0
 800bf48:	4638      	mov	r0, r7
 800bf4a:	f7f4 fdf1 	bl	8000b30 <__aeabi_fsub>
 800bf4e:	4601      	mov	r1, r0
 800bf50:	4648      	mov	r0, r9
 800bf52:	f7f4 ffab 	bl	8000eac <__aeabi_fdiv>
 800bf56:	4641      	mov	r1, r8
 800bf58:	4607      	mov	r7, r0
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f7f4 fef2 	bl	8000d44 <__aeabi_fmul>
 800bf60:	4641      	mov	r1, r8
 800bf62:	f7f4 fde7 	bl	8000b34 <__addsf3>
 800bf66:	4601      	mov	r1, r0
 800bf68:	4638      	mov	r0, r7
 800bf6a:	f7f4 fde1 	bl	8000b30 <__aeabi_fsub>
 800bf6e:	4631      	mov	r1, r6
 800bf70:	f7f4 fdde 	bl	8000b30 <__aeabi_fsub>
 800bf74:	4601      	mov	r1, r0
 800bf76:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800bf7a:	f7f4 fdd9 	bl	8000b30 <__aeabi_fsub>
 800bf7e:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800bf82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bf86:	da06      	bge.n	800bf96 <__ieee754_powf+0x63e>
 800bf88:	4621      	mov	r1, r4
 800bf8a:	f000 f955 	bl	800c238 <scalbnf>
 800bf8e:	4629      	mov	r1, r5
 800bf90:	e549      	b.n	800ba26 <__ieee754_powf+0xce>
 800bf92:	2400      	movs	r4, #0
 800bf94:	e77d      	b.n	800be92 <__ieee754_powf+0x53a>
 800bf96:	4618      	mov	r0, r3
 800bf98:	e7f9      	b.n	800bf8e <__ieee754_powf+0x636>
 800bf9a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800bf9e:	e536      	b.n	800ba0e <__ieee754_powf+0xb6>
 800bfa0:	4639      	mov	r1, r7
 800bfa2:	e534      	b.n	800ba0e <__ieee754_powf+0xb6>
 800bfa4:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800bfa8:	f43f ad23 	beq.w	800b9f2 <__ieee754_powf+0x9a>
 800bfac:	2502      	movs	r5, #2
 800bfae:	4648      	mov	r0, r9
 800bfb0:	f000 f93e 	bl	800c230 <fabsf>
 800bfb4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800bfb8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800bfbc:	46c2      	mov	sl, r8
 800bfbe:	4601      	mov	r1, r0
 800bfc0:	d003      	beq.n	800bfca <__ieee754_powf+0x672>
 800bfc2:	f1b8 0f00 	cmp.w	r8, #0
 800bfc6:	f47f ad43 	bne.w	800ba50 <__ieee754_powf+0xf8>
 800bfca:	2c00      	cmp	r4, #0
 800bfcc:	da04      	bge.n	800bfd8 <__ieee754_powf+0x680>
 800bfce:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800bfd2:	f7f4 ff6b 	bl	8000eac <__aeabi_fdiv>
 800bfd6:	4601      	mov	r1, r0
 800bfd8:	2e00      	cmp	r6, #0
 800bfda:	f6bf ad18 	bge.w	800ba0e <__ieee754_powf+0xb6>
 800bfde:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800bfe2:	ea58 0805 	orrs.w	r8, r8, r5
 800bfe6:	f47f ad2e 	bne.w	800ba46 <__ieee754_powf+0xee>
 800bfea:	4608      	mov	r0, r1
 800bfec:	f7f4 fda0 	bl	8000b30 <__aeabi_fsub>
 800bff0:	4601      	mov	r1, r0
 800bff2:	e4f8      	b.n	800b9e6 <__ieee754_powf+0x8e>
 800bff4:	ff800000 	.word	0xff800000
 800bff8:	3f317200 	.word	0x3f317200
 800bffc:	3f317218 	.word	0x3f317218
 800c000:	35bfbe8c 	.word	0x35bfbe8c
 800c004:	3331bb4c 	.word	0x3331bb4c
 800c008:	35ddea0e 	.word	0x35ddea0e
 800c00c:	388ab355 	.word	0x388ab355
 800c010:	3b360b61 	.word	0x3b360b61
 800c014:	3e2aaaab 	.word	0x3e2aaaab

0800c018 <atanf>:
 800c018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c01c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800c020:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800c024:	4604      	mov	r4, r0
 800c026:	4680      	mov	r8, r0
 800c028:	d30e      	bcc.n	800c048 <atanf+0x30>
 800c02a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c02e:	d904      	bls.n	800c03a <atanf+0x22>
 800c030:	4601      	mov	r1, r0
 800c032:	f7f4 fd7f 	bl	8000b34 <__addsf3>
 800c036:	4604      	mov	r4, r0
 800c038:	e003      	b.n	800c042 <atanf+0x2a>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	f340 80ce 	ble.w	800c1dc <atanf+0x1c4>
 800c040:	4c67      	ldr	r4, [pc, #412]	@ (800c1e0 <atanf+0x1c8>)
 800c042:	4620      	mov	r0, r4
 800c044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c048:	4b66      	ldr	r3, [pc, #408]	@ (800c1e4 <atanf+0x1cc>)
 800c04a:	429d      	cmp	r5, r3
 800c04c:	d80e      	bhi.n	800c06c <atanf+0x54>
 800c04e:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800c052:	d208      	bcs.n	800c066 <atanf+0x4e>
 800c054:	4964      	ldr	r1, [pc, #400]	@ (800c1e8 <atanf+0x1d0>)
 800c056:	f7f4 fd6d 	bl	8000b34 <__addsf3>
 800c05a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c05e:	f7f5 f82d 	bl	80010bc <__aeabi_fcmpgt>
 800c062:	2800      	cmp	r0, #0
 800c064:	d1ed      	bne.n	800c042 <atanf+0x2a>
 800c066:	f04f 36ff 	mov.w	r6, #4294967295
 800c06a:	e01c      	b.n	800c0a6 <atanf+0x8e>
 800c06c:	f000 f8e0 	bl	800c230 <fabsf>
 800c070:	4b5e      	ldr	r3, [pc, #376]	@ (800c1ec <atanf+0x1d4>)
 800c072:	4604      	mov	r4, r0
 800c074:	429d      	cmp	r5, r3
 800c076:	d87c      	bhi.n	800c172 <atanf+0x15a>
 800c078:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c07c:	429d      	cmp	r5, r3
 800c07e:	d867      	bhi.n	800c150 <atanf+0x138>
 800c080:	4601      	mov	r1, r0
 800c082:	f7f4 fd57 	bl	8000b34 <__addsf3>
 800c086:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c08a:	f7f4 fd51 	bl	8000b30 <__aeabi_fsub>
 800c08e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800c092:	4605      	mov	r5, r0
 800c094:	4620      	mov	r0, r4
 800c096:	f7f4 fd4d 	bl	8000b34 <__addsf3>
 800c09a:	4601      	mov	r1, r0
 800c09c:	4628      	mov	r0, r5
 800c09e:	f7f4 ff05 	bl	8000eac <__aeabi_fdiv>
 800c0a2:	2600      	movs	r6, #0
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f7f4 fe4b 	bl	8000d44 <__aeabi_fmul>
 800c0ae:	4601      	mov	r1, r0
 800c0b0:	4607      	mov	r7, r0
 800c0b2:	f7f4 fe47 	bl	8000d44 <__aeabi_fmul>
 800c0b6:	4605      	mov	r5, r0
 800c0b8:	494d      	ldr	r1, [pc, #308]	@ (800c1f0 <atanf+0x1d8>)
 800c0ba:	f7f4 fe43 	bl	8000d44 <__aeabi_fmul>
 800c0be:	494d      	ldr	r1, [pc, #308]	@ (800c1f4 <atanf+0x1dc>)
 800c0c0:	f7f4 fd38 	bl	8000b34 <__addsf3>
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	f7f4 fe3d 	bl	8000d44 <__aeabi_fmul>
 800c0ca:	494b      	ldr	r1, [pc, #300]	@ (800c1f8 <atanf+0x1e0>)
 800c0cc:	f7f4 fd32 	bl	8000b34 <__addsf3>
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	f7f4 fe37 	bl	8000d44 <__aeabi_fmul>
 800c0d6:	4949      	ldr	r1, [pc, #292]	@ (800c1fc <atanf+0x1e4>)
 800c0d8:	f7f4 fd2c 	bl	8000b34 <__addsf3>
 800c0dc:	4629      	mov	r1, r5
 800c0de:	f7f4 fe31 	bl	8000d44 <__aeabi_fmul>
 800c0e2:	4947      	ldr	r1, [pc, #284]	@ (800c200 <atanf+0x1e8>)
 800c0e4:	f7f4 fd26 	bl	8000b34 <__addsf3>
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	f7f4 fe2b 	bl	8000d44 <__aeabi_fmul>
 800c0ee:	4945      	ldr	r1, [pc, #276]	@ (800c204 <atanf+0x1ec>)
 800c0f0:	f7f4 fd20 	bl	8000b34 <__addsf3>
 800c0f4:	4639      	mov	r1, r7
 800c0f6:	f7f4 fe25 	bl	8000d44 <__aeabi_fmul>
 800c0fa:	4943      	ldr	r1, [pc, #268]	@ (800c208 <atanf+0x1f0>)
 800c0fc:	4607      	mov	r7, r0
 800c0fe:	4628      	mov	r0, r5
 800c100:	f7f4 fe20 	bl	8000d44 <__aeabi_fmul>
 800c104:	4941      	ldr	r1, [pc, #260]	@ (800c20c <atanf+0x1f4>)
 800c106:	f7f4 fd13 	bl	8000b30 <__aeabi_fsub>
 800c10a:	4629      	mov	r1, r5
 800c10c:	f7f4 fe1a 	bl	8000d44 <__aeabi_fmul>
 800c110:	493f      	ldr	r1, [pc, #252]	@ (800c210 <atanf+0x1f8>)
 800c112:	f7f4 fd0d 	bl	8000b30 <__aeabi_fsub>
 800c116:	4629      	mov	r1, r5
 800c118:	f7f4 fe14 	bl	8000d44 <__aeabi_fmul>
 800c11c:	493d      	ldr	r1, [pc, #244]	@ (800c214 <atanf+0x1fc>)
 800c11e:	f7f4 fd07 	bl	8000b30 <__aeabi_fsub>
 800c122:	4629      	mov	r1, r5
 800c124:	f7f4 fe0e 	bl	8000d44 <__aeabi_fmul>
 800c128:	493b      	ldr	r1, [pc, #236]	@ (800c218 <atanf+0x200>)
 800c12a:	f7f4 fd01 	bl	8000b30 <__aeabi_fsub>
 800c12e:	4629      	mov	r1, r5
 800c130:	f7f4 fe08 	bl	8000d44 <__aeabi_fmul>
 800c134:	4601      	mov	r1, r0
 800c136:	4638      	mov	r0, r7
 800c138:	f7f4 fcfc 	bl	8000b34 <__addsf3>
 800c13c:	4621      	mov	r1, r4
 800c13e:	f7f4 fe01 	bl	8000d44 <__aeabi_fmul>
 800c142:	1c73      	adds	r3, r6, #1
 800c144:	4601      	mov	r1, r0
 800c146:	d133      	bne.n	800c1b0 <atanf+0x198>
 800c148:	4620      	mov	r0, r4
 800c14a:	f7f4 fcf1 	bl	8000b30 <__aeabi_fsub>
 800c14e:	e772      	b.n	800c036 <atanf+0x1e>
 800c150:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c154:	f7f4 fcec 	bl	8000b30 <__aeabi_fsub>
 800c158:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c15c:	4605      	mov	r5, r0
 800c15e:	4620      	mov	r0, r4
 800c160:	f7f4 fce8 	bl	8000b34 <__addsf3>
 800c164:	4601      	mov	r1, r0
 800c166:	4628      	mov	r0, r5
 800c168:	f7f4 fea0 	bl	8000eac <__aeabi_fdiv>
 800c16c:	2601      	movs	r6, #1
 800c16e:	4604      	mov	r4, r0
 800c170:	e799      	b.n	800c0a6 <atanf+0x8e>
 800c172:	4b2a      	ldr	r3, [pc, #168]	@ (800c21c <atanf+0x204>)
 800c174:	429d      	cmp	r5, r3
 800c176:	d814      	bhi.n	800c1a2 <atanf+0x18a>
 800c178:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800c17c:	f7f4 fcd8 	bl	8000b30 <__aeabi_fsub>
 800c180:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800c184:	4605      	mov	r5, r0
 800c186:	4620      	mov	r0, r4
 800c188:	f7f4 fddc 	bl	8000d44 <__aeabi_fmul>
 800c18c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c190:	f7f4 fcd0 	bl	8000b34 <__addsf3>
 800c194:	4601      	mov	r1, r0
 800c196:	4628      	mov	r0, r5
 800c198:	f7f4 fe88 	bl	8000eac <__aeabi_fdiv>
 800c19c:	2602      	movs	r6, #2
 800c19e:	4604      	mov	r4, r0
 800c1a0:	e781      	b.n	800c0a6 <atanf+0x8e>
 800c1a2:	4601      	mov	r1, r0
 800c1a4:	481e      	ldr	r0, [pc, #120]	@ (800c220 <atanf+0x208>)
 800c1a6:	f7f4 fe81 	bl	8000eac <__aeabi_fdiv>
 800c1aa:	2603      	movs	r6, #3
 800c1ac:	4604      	mov	r4, r0
 800c1ae:	e77a      	b.n	800c0a6 <atanf+0x8e>
 800c1b0:	4b1c      	ldr	r3, [pc, #112]	@ (800c224 <atanf+0x20c>)
 800c1b2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c1b6:	f7f4 fcbb 	bl	8000b30 <__aeabi_fsub>
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	f7f4 fcb8 	bl	8000b30 <__aeabi_fsub>
 800c1c0:	4b19      	ldr	r3, [pc, #100]	@ (800c228 <atanf+0x210>)
 800c1c2:	4601      	mov	r1, r0
 800c1c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c1c8:	f7f4 fcb2 	bl	8000b30 <__aeabi_fsub>
 800c1cc:	f1b8 0f00 	cmp.w	r8, #0
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	f6bf af36 	bge.w	800c042 <atanf+0x2a>
 800c1d6:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800c1da:	e732      	b.n	800c042 <atanf+0x2a>
 800c1dc:	4c13      	ldr	r4, [pc, #76]	@ (800c22c <atanf+0x214>)
 800c1de:	e730      	b.n	800c042 <atanf+0x2a>
 800c1e0:	3fc90fdb 	.word	0x3fc90fdb
 800c1e4:	3edfffff 	.word	0x3edfffff
 800c1e8:	7149f2ca 	.word	0x7149f2ca
 800c1ec:	3f97ffff 	.word	0x3f97ffff
 800c1f0:	3c8569d7 	.word	0x3c8569d7
 800c1f4:	3d4bda59 	.word	0x3d4bda59
 800c1f8:	3d886b35 	.word	0x3d886b35
 800c1fc:	3dba2e6e 	.word	0x3dba2e6e
 800c200:	3e124925 	.word	0x3e124925
 800c204:	3eaaaaab 	.word	0x3eaaaaab
 800c208:	bd15a221 	.word	0xbd15a221
 800c20c:	3d6ef16b 	.word	0x3d6ef16b
 800c210:	3d9d8795 	.word	0x3d9d8795
 800c214:	3de38e38 	.word	0x3de38e38
 800c218:	3e4ccccd 	.word	0x3e4ccccd
 800c21c:	401bffff 	.word	0x401bffff
 800c220:	bf800000 	.word	0xbf800000
 800c224:	0800c84c 	.word	0x0800c84c
 800c228:	0800c85c 	.word	0x0800c85c
 800c22c:	bfc90fdb 	.word	0xbfc90fdb

0800c230 <fabsf>:
 800c230:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c234:	4770      	bx	lr
	...

0800c238 <scalbnf>:
 800c238:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4603      	mov	r3, r0
 800c240:	460d      	mov	r5, r1
 800c242:	4604      	mov	r4, r0
 800c244:	d02e      	beq.n	800c2a4 <scalbnf+0x6c>
 800c246:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c24a:	d304      	bcc.n	800c256 <scalbnf+0x1e>
 800c24c:	4601      	mov	r1, r0
 800c24e:	f7f4 fc71 	bl	8000b34 <__addsf3>
 800c252:	4603      	mov	r3, r0
 800c254:	e026      	b.n	800c2a4 <scalbnf+0x6c>
 800c256:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800c25a:	d118      	bne.n	800c28e <scalbnf+0x56>
 800c25c:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800c260:	f7f4 fd70 	bl	8000d44 <__aeabi_fmul>
 800c264:	4a17      	ldr	r2, [pc, #92]	@ (800c2c4 <scalbnf+0x8c>)
 800c266:	4603      	mov	r3, r0
 800c268:	4295      	cmp	r5, r2
 800c26a:	db0c      	blt.n	800c286 <scalbnf+0x4e>
 800c26c:	4604      	mov	r4, r0
 800c26e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800c272:	3a19      	subs	r2, #25
 800c274:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c278:	428d      	cmp	r5, r1
 800c27a:	dd0a      	ble.n	800c292 <scalbnf+0x5a>
 800c27c:	4912      	ldr	r1, [pc, #72]	@ (800c2c8 <scalbnf+0x90>)
 800c27e:	4618      	mov	r0, r3
 800c280:	f361 001e 	bfi	r0, r1, #0, #31
 800c284:	e000      	b.n	800c288 <scalbnf+0x50>
 800c286:	4911      	ldr	r1, [pc, #68]	@ (800c2cc <scalbnf+0x94>)
 800c288:	f7f4 fd5c 	bl	8000d44 <__aeabi_fmul>
 800c28c:	e7e1      	b.n	800c252 <scalbnf+0x1a>
 800c28e:	0dd2      	lsrs	r2, r2, #23
 800c290:	e7f0      	b.n	800c274 <scalbnf+0x3c>
 800c292:	1951      	adds	r1, r2, r5
 800c294:	29fe      	cmp	r1, #254	@ 0xfe
 800c296:	dcf1      	bgt.n	800c27c <scalbnf+0x44>
 800c298:	2900      	cmp	r1, #0
 800c29a:	dd05      	ble.n	800c2a8 <scalbnf+0x70>
 800c29c:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800c2a0:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}
 800c2a8:	f111 0f16 	cmn.w	r1, #22
 800c2ac:	da01      	bge.n	800c2b2 <scalbnf+0x7a>
 800c2ae:	4907      	ldr	r1, [pc, #28]	@ (800c2cc <scalbnf+0x94>)
 800c2b0:	e7e5      	b.n	800c27e <scalbnf+0x46>
 800c2b2:	f101 0019 	add.w	r0, r1, #25
 800c2b6:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800c2ba:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800c2be:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800c2c2:	e7e1      	b.n	800c288 <scalbnf+0x50>
 800c2c4:	ffff3cb0 	.word	0xffff3cb0
 800c2c8:	7149f2ca 	.word	0x7149f2ca
 800c2cc:	0da24260 	.word	0x0da24260

0800c2d0 <with_errnof>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	460d      	mov	r5, r1
 800c2d6:	f7fd f90d 	bl	80094f4 <__errno>
 800c2da:	6005      	str	r5, [r0, #0]
 800c2dc:	4620      	mov	r0, r4
 800c2de:	bd38      	pop	{r3, r4, r5, pc}

0800c2e0 <xflowf>:
 800c2e0:	b508      	push	{r3, lr}
 800c2e2:	b140      	cbz	r0, 800c2f6 <xflowf+0x16>
 800c2e4:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800c2e8:	f7f4 fd2c 	bl	8000d44 <__aeabi_fmul>
 800c2ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c2f0:	2122      	movs	r1, #34	@ 0x22
 800c2f2:	f7ff bfed 	b.w	800c2d0 <with_errnof>
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	e7f6      	b.n	800c2e8 <xflowf+0x8>

0800c2fa <__math_uflowf>:
 800c2fa:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800c2fe:	f7ff bfef 	b.w	800c2e0 <xflowf>

0800c302 <__math_oflowf>:
 800c302:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800c306:	f7ff bfeb 	b.w	800c2e0 <xflowf>
	...

0800c30c <_init>:
 800c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30e:	bf00      	nop
 800c310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c312:	bc08      	pop	{r3}
 800c314:	469e      	mov	lr, r3
 800c316:	4770      	bx	lr

0800c318 <_fini>:
 800c318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c31a:	bf00      	nop
 800c31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c31e:	bc08      	pop	{r3}
 800c320:	469e      	mov	lr, r3
 800c322:	4770      	bx	lr
