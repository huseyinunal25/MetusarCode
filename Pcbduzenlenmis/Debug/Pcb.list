
Pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b584  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800b698  0800b698  0000c698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb5c  0800bb5c  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bb5c  0800bb5c  0000cb5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb64  0800bb64  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb64  0800bb64  0000cb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb68  0800bb68  0000cb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bb6c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  200001d8  0800bd40  0000d1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800bd40  0000d69c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e064  00000000  00000000  0000d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234b  00000000  00000000  0001b261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0001d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5e  00000000  00000000  0001e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ee5  00000000  00000000  0001ed4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010774  00000000  00000000  00037c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d1e  00000000  00000000  000483a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d20c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d78  00000000  00000000  000d2108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d6e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b67c 	.word	0x0800b67c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800b67c 	.word	0x0800b67c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_ldivmod>:
 8001148:	b97b      	cbnz	r3, 800116a <__aeabi_ldivmod+0x22>
 800114a:	b972      	cbnz	r2, 800116a <__aeabi_ldivmod+0x22>
 800114c:	2900      	cmp	r1, #0
 800114e:	bfbe      	ittt	lt
 8001150:	2000      	movlt	r0, #0
 8001152:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8001156:	e006      	blt.n	8001166 <__aeabi_ldivmod+0x1e>
 8001158:	bf08      	it	eq
 800115a:	2800      	cmpeq	r0, #0
 800115c:	bf1c      	itt	ne
 800115e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8001162:	f04f 30ff 	movne.w	r0, #4294967295
 8001166:	f000 b9bf 	b.w	80014e8 <__aeabi_idiv0>
 800116a:	f1ad 0c08 	sub.w	ip, sp, #8
 800116e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001172:	2900      	cmp	r1, #0
 8001174:	db09      	blt.n	800118a <__aeabi_ldivmod+0x42>
 8001176:	2b00      	cmp	r3, #0
 8001178:	db1a      	blt.n	80011b0 <__aeabi_ldivmod+0x68>
 800117a:	f000 f835 	bl	80011e8 <__udivmoddi4>
 800117e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001186:	b004      	add	sp, #16
 8001188:	4770      	bx	lr
 800118a:	4240      	negs	r0, r0
 800118c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	db1b      	blt.n	80011cc <__aeabi_ldivmod+0x84>
 8001194:	f000 f828 	bl	80011e8 <__udivmoddi4>
 8001198:	f8dd e004 	ldr.w	lr, [sp, #4]
 800119c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011a0:	b004      	add	sp, #16
 80011a2:	4240      	negs	r0, r0
 80011a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a8:	4252      	negs	r2, r2
 80011aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ae:	4770      	bx	lr
 80011b0:	4252      	negs	r2, r2
 80011b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011b6:	f000 f817 	bl	80011e8 <__udivmoddi4>
 80011ba:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c2:	b004      	add	sp, #16
 80011c4:	4240      	negs	r0, r0
 80011c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011ca:	4770      	bx	lr
 80011cc:	4252      	negs	r2, r2
 80011ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011d2:	f000 f809 	bl	80011e8 <__udivmoddi4>
 80011d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011de:	b004      	add	sp, #16
 80011e0:	4252      	negs	r2, r2
 80011e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011e6:	4770      	bx	lr

080011e8 <__udivmoddi4>:
 80011e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011ec:	9d08      	ldr	r5, [sp, #32]
 80011ee:	468e      	mov	lr, r1
 80011f0:	4604      	mov	r4, r0
 80011f2:	4688      	mov	r8, r1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d14a      	bne.n	800128e <__udivmoddi4+0xa6>
 80011f8:	428a      	cmp	r2, r1
 80011fa:	4617      	mov	r7, r2
 80011fc:	d962      	bls.n	80012c4 <__udivmoddi4+0xdc>
 80011fe:	fab2 f682 	clz	r6, r2
 8001202:	b14e      	cbz	r6, 8001218 <__udivmoddi4+0x30>
 8001204:	f1c6 0320 	rsb	r3, r6, #32
 8001208:	fa01 f806 	lsl.w	r8, r1, r6
 800120c:	fa20 f303 	lsr.w	r3, r0, r3
 8001210:	40b7      	lsls	r7, r6
 8001212:	ea43 0808 	orr.w	r8, r3, r8
 8001216:	40b4      	lsls	r4, r6
 8001218:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800121c:	fbb8 f1fe 	udiv	r1, r8, lr
 8001220:	fa1f fc87 	uxth.w	ip, r7
 8001224:	fb0e 8811 	mls	r8, lr, r1, r8
 8001228:	fb01 f20c 	mul.w	r2, r1, ip
 800122c:	0c23      	lsrs	r3, r4, #16
 800122e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001232:	429a      	cmp	r2, r3
 8001234:	d909      	bls.n	800124a <__udivmoddi4+0x62>
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	f101 30ff 	add.w	r0, r1, #4294967295
 800123c:	f080 80eb 	bcs.w	8001416 <__udivmoddi4+0x22e>
 8001240:	429a      	cmp	r2, r3
 8001242:	f240 80e8 	bls.w	8001416 <__udivmoddi4+0x22e>
 8001246:	3902      	subs	r1, #2
 8001248:	443b      	add	r3, r7
 800124a:	1a9a      	subs	r2, r3, r2
 800124c:	fbb2 f0fe 	udiv	r0, r2, lr
 8001250:	fb0e 2210 	mls	r2, lr, r0, r2
 8001254:	fb00 fc0c 	mul.w	ip, r0, ip
 8001258:	b2a3      	uxth	r3, r4
 800125a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800125e:	459c      	cmp	ip, r3
 8001260:	d909      	bls.n	8001276 <__udivmoddi4+0x8e>
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	f100 32ff 	add.w	r2, r0, #4294967295
 8001268:	f080 80d7 	bcs.w	800141a <__udivmoddi4+0x232>
 800126c:	459c      	cmp	ip, r3
 800126e:	f240 80d4 	bls.w	800141a <__udivmoddi4+0x232>
 8001272:	443b      	add	r3, r7
 8001274:	3802      	subs	r0, #2
 8001276:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800127a:	2100      	movs	r1, #0
 800127c:	eba3 030c 	sub.w	r3, r3, ip
 8001280:	b11d      	cbz	r5, 800128a <__udivmoddi4+0xa2>
 8001282:	2200      	movs	r2, #0
 8001284:	40f3      	lsrs	r3, r6
 8001286:	e9c5 3200 	strd	r3, r2, [r5]
 800128a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800128e:	428b      	cmp	r3, r1
 8001290:	d905      	bls.n	800129e <__udivmoddi4+0xb6>
 8001292:	b10d      	cbz	r5, 8001298 <__udivmoddi4+0xb0>
 8001294:	e9c5 0100 	strd	r0, r1, [r5]
 8001298:	2100      	movs	r1, #0
 800129a:	4608      	mov	r0, r1
 800129c:	e7f5      	b.n	800128a <__udivmoddi4+0xa2>
 800129e:	fab3 f183 	clz	r1, r3
 80012a2:	2900      	cmp	r1, #0
 80012a4:	d146      	bne.n	8001334 <__udivmoddi4+0x14c>
 80012a6:	4573      	cmp	r3, lr
 80012a8:	d302      	bcc.n	80012b0 <__udivmoddi4+0xc8>
 80012aa:	4282      	cmp	r2, r0
 80012ac:	f200 8108 	bhi.w	80014c0 <__udivmoddi4+0x2d8>
 80012b0:	1a84      	subs	r4, r0, r2
 80012b2:	eb6e 0203 	sbc.w	r2, lr, r3
 80012b6:	2001      	movs	r0, #1
 80012b8:	4690      	mov	r8, r2
 80012ba:	2d00      	cmp	r5, #0
 80012bc:	d0e5      	beq.n	800128a <__udivmoddi4+0xa2>
 80012be:	e9c5 4800 	strd	r4, r8, [r5]
 80012c2:	e7e2      	b.n	800128a <__udivmoddi4+0xa2>
 80012c4:	2a00      	cmp	r2, #0
 80012c6:	f000 8091 	beq.w	80013ec <__udivmoddi4+0x204>
 80012ca:	fab2 f682 	clz	r6, r2
 80012ce:	2e00      	cmp	r6, #0
 80012d0:	f040 80a5 	bne.w	800141e <__udivmoddi4+0x236>
 80012d4:	1a8a      	subs	r2, r1, r2
 80012d6:	2101      	movs	r1, #1
 80012d8:	0c03      	lsrs	r3, r0, #16
 80012da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012de:	b280      	uxth	r0, r0
 80012e0:	b2bc      	uxth	r4, r7
 80012e2:	fbb2 fcfe 	udiv	ip, r2, lr
 80012e6:	fb0e 221c 	mls	r2, lr, ip, r2
 80012ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012ee:	fb04 f20c 	mul.w	r2, r4, ip
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d907      	bls.n	8001306 <__udivmoddi4+0x11e>
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80012fc:	d202      	bcs.n	8001304 <__udivmoddi4+0x11c>
 80012fe:	429a      	cmp	r2, r3
 8001300:	f200 80e3 	bhi.w	80014ca <__udivmoddi4+0x2e2>
 8001304:	46c4      	mov	ip, r8
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	fbb3 f2fe 	udiv	r2, r3, lr
 800130c:	fb0e 3312 	mls	r3, lr, r2, r3
 8001310:	fb02 f404 	mul.w	r4, r2, r4
 8001314:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001318:	429c      	cmp	r4, r3
 800131a:	d907      	bls.n	800132c <__udivmoddi4+0x144>
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	f102 30ff 	add.w	r0, r2, #4294967295
 8001322:	d202      	bcs.n	800132a <__udivmoddi4+0x142>
 8001324:	429c      	cmp	r4, r3
 8001326:	f200 80cd 	bhi.w	80014c4 <__udivmoddi4+0x2dc>
 800132a:	4602      	mov	r2, r0
 800132c:	1b1b      	subs	r3, r3, r4
 800132e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001332:	e7a5      	b.n	8001280 <__udivmoddi4+0x98>
 8001334:	f1c1 0620 	rsb	r6, r1, #32
 8001338:	408b      	lsls	r3, r1
 800133a:	fa22 f706 	lsr.w	r7, r2, r6
 800133e:	431f      	orrs	r7, r3
 8001340:	fa2e fa06 	lsr.w	sl, lr, r6
 8001344:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001348:	fbba f8f9 	udiv	r8, sl, r9
 800134c:	fa0e fe01 	lsl.w	lr, lr, r1
 8001350:	fa20 f306 	lsr.w	r3, r0, r6
 8001354:	fb09 aa18 	mls	sl, r9, r8, sl
 8001358:	fa1f fc87 	uxth.w	ip, r7
 800135c:	ea43 030e 	orr.w	r3, r3, lr
 8001360:	fa00 fe01 	lsl.w	lr, r0, r1
 8001364:	fb08 f00c 	mul.w	r0, r8, ip
 8001368:	0c1c      	lsrs	r4, r3, #16
 800136a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800136e:	42a0      	cmp	r0, r4
 8001370:	fa02 f201 	lsl.w	r2, r2, r1
 8001374:	d90a      	bls.n	800138c <__udivmoddi4+0x1a4>
 8001376:	193c      	adds	r4, r7, r4
 8001378:	f108 3aff 	add.w	sl, r8, #4294967295
 800137c:	f080 809e 	bcs.w	80014bc <__udivmoddi4+0x2d4>
 8001380:	42a0      	cmp	r0, r4
 8001382:	f240 809b 	bls.w	80014bc <__udivmoddi4+0x2d4>
 8001386:	f1a8 0802 	sub.w	r8, r8, #2
 800138a:	443c      	add	r4, r7
 800138c:	1a24      	subs	r4, r4, r0
 800138e:	b298      	uxth	r0, r3
 8001390:	fbb4 f3f9 	udiv	r3, r4, r9
 8001394:	fb09 4413 	mls	r4, r9, r3, r4
 8001398:	fb03 fc0c 	mul.w	ip, r3, ip
 800139c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80013a0:	45a4      	cmp	ip, r4
 80013a2:	d909      	bls.n	80013b8 <__udivmoddi4+0x1d0>
 80013a4:	193c      	adds	r4, r7, r4
 80013a6:	f103 30ff 	add.w	r0, r3, #4294967295
 80013aa:	f080 8085 	bcs.w	80014b8 <__udivmoddi4+0x2d0>
 80013ae:	45a4      	cmp	ip, r4
 80013b0:	f240 8082 	bls.w	80014b8 <__udivmoddi4+0x2d0>
 80013b4:	3b02      	subs	r3, #2
 80013b6:	443c      	add	r4, r7
 80013b8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013bc:	eba4 040c 	sub.w	r4, r4, ip
 80013c0:	fba0 8c02 	umull	r8, ip, r0, r2
 80013c4:	4564      	cmp	r4, ip
 80013c6:	4643      	mov	r3, r8
 80013c8:	46e1      	mov	r9, ip
 80013ca:	d364      	bcc.n	8001496 <__udivmoddi4+0x2ae>
 80013cc:	d061      	beq.n	8001492 <__udivmoddi4+0x2aa>
 80013ce:	b15d      	cbz	r5, 80013e8 <__udivmoddi4+0x200>
 80013d0:	ebbe 0203 	subs.w	r2, lr, r3
 80013d4:	eb64 0409 	sbc.w	r4, r4, r9
 80013d8:	fa04 f606 	lsl.w	r6, r4, r6
 80013dc:	fa22 f301 	lsr.w	r3, r2, r1
 80013e0:	431e      	orrs	r6, r3
 80013e2:	40cc      	lsrs	r4, r1
 80013e4:	e9c5 6400 	strd	r6, r4, [r5]
 80013e8:	2100      	movs	r1, #0
 80013ea:	e74e      	b.n	800128a <__udivmoddi4+0xa2>
 80013ec:	fbb1 fcf2 	udiv	ip, r1, r2
 80013f0:	0c01      	lsrs	r1, r0, #16
 80013f2:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80013f6:	b280      	uxth	r0, r0
 80013f8:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80013fc:	463b      	mov	r3, r7
 80013fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8001402:	4638      	mov	r0, r7
 8001404:	463c      	mov	r4, r7
 8001406:	46b8      	mov	r8, r7
 8001408:	46be      	mov	lr, r7
 800140a:	2620      	movs	r6, #32
 800140c:	eba2 0208 	sub.w	r2, r2, r8
 8001410:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001414:	e765      	b.n	80012e2 <__udivmoddi4+0xfa>
 8001416:	4601      	mov	r1, r0
 8001418:	e717      	b.n	800124a <__udivmoddi4+0x62>
 800141a:	4610      	mov	r0, r2
 800141c:	e72b      	b.n	8001276 <__udivmoddi4+0x8e>
 800141e:	f1c6 0120 	rsb	r1, r6, #32
 8001422:	fa2e fc01 	lsr.w	ip, lr, r1
 8001426:	40b7      	lsls	r7, r6
 8001428:	fa0e fe06 	lsl.w	lr, lr, r6
 800142c:	fa20 f101 	lsr.w	r1, r0, r1
 8001430:	ea41 010e 	orr.w	r1, r1, lr
 8001434:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001438:	fbbc f8fe 	udiv	r8, ip, lr
 800143c:	b2bc      	uxth	r4, r7
 800143e:	fb0e cc18 	mls	ip, lr, r8, ip
 8001442:	fb08 f904 	mul.w	r9, r8, r4
 8001446:	0c0a      	lsrs	r2, r1, #16
 8001448:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800144c:	40b0      	lsls	r0, r6
 800144e:	4591      	cmp	r9, r2
 8001450:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001454:	b280      	uxth	r0, r0
 8001456:	d93e      	bls.n	80014d6 <__udivmoddi4+0x2ee>
 8001458:	18ba      	adds	r2, r7, r2
 800145a:	f108 3cff 	add.w	ip, r8, #4294967295
 800145e:	d201      	bcs.n	8001464 <__udivmoddi4+0x27c>
 8001460:	4591      	cmp	r9, r2
 8001462:	d81f      	bhi.n	80014a4 <__udivmoddi4+0x2bc>
 8001464:	eba2 0209 	sub.w	r2, r2, r9
 8001468:	fbb2 f9fe 	udiv	r9, r2, lr
 800146c:	fb09 f804 	mul.w	r8, r9, r4
 8001470:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001474:	b28a      	uxth	r2, r1
 8001476:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800147a:	4542      	cmp	r2, r8
 800147c:	d229      	bcs.n	80014d2 <__udivmoddi4+0x2ea>
 800147e:	18ba      	adds	r2, r7, r2
 8001480:	f109 31ff 	add.w	r1, r9, #4294967295
 8001484:	d2c2      	bcs.n	800140c <__udivmoddi4+0x224>
 8001486:	4542      	cmp	r2, r8
 8001488:	d2c0      	bcs.n	800140c <__udivmoddi4+0x224>
 800148a:	f1a9 0102 	sub.w	r1, r9, #2
 800148e:	443a      	add	r2, r7
 8001490:	e7bc      	b.n	800140c <__udivmoddi4+0x224>
 8001492:	45c6      	cmp	lr, r8
 8001494:	d29b      	bcs.n	80013ce <__udivmoddi4+0x1e6>
 8001496:	ebb8 0302 	subs.w	r3, r8, r2
 800149a:	eb6c 0c07 	sbc.w	ip, ip, r7
 800149e:	3801      	subs	r0, #1
 80014a0:	46e1      	mov	r9, ip
 80014a2:	e794      	b.n	80013ce <__udivmoddi4+0x1e6>
 80014a4:	eba7 0909 	sub.w	r9, r7, r9
 80014a8:	444a      	add	r2, r9
 80014aa:	fbb2 f9fe 	udiv	r9, r2, lr
 80014ae:	f1a8 0c02 	sub.w	ip, r8, #2
 80014b2:	fb09 f804 	mul.w	r8, r9, r4
 80014b6:	e7db      	b.n	8001470 <__udivmoddi4+0x288>
 80014b8:	4603      	mov	r3, r0
 80014ba:	e77d      	b.n	80013b8 <__udivmoddi4+0x1d0>
 80014bc:	46d0      	mov	r8, sl
 80014be:	e765      	b.n	800138c <__udivmoddi4+0x1a4>
 80014c0:	4608      	mov	r0, r1
 80014c2:	e6fa      	b.n	80012ba <__udivmoddi4+0xd2>
 80014c4:	443b      	add	r3, r7
 80014c6:	3a02      	subs	r2, #2
 80014c8:	e730      	b.n	800132c <__udivmoddi4+0x144>
 80014ca:	f1ac 0c02 	sub.w	ip, ip, #2
 80014ce:	443b      	add	r3, r7
 80014d0:	e719      	b.n	8001306 <__udivmoddi4+0x11e>
 80014d2:	4649      	mov	r1, r9
 80014d4:	e79a      	b.n	800140c <__udivmoddi4+0x224>
 80014d6:	eba2 0209 	sub.w	r2, r2, r9
 80014da:	fbb2 f9fe 	udiv	r9, r2, lr
 80014de:	46c4      	mov	ip, r8
 80014e0:	fb09 f804 	mul.w	r8, r9, r4
 80014e4:	e7c4      	b.n	8001470 <__udivmoddi4+0x288>
 80014e6:	bf00      	nop

080014e8 <__aeabi_idiv0>:
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop

080014ec <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08c      	sub	sp, #48	@ 0x30
 80014f0:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	9302      	str	r3, [sp, #8]
 80014f8:	2319      	movs	r3, #25
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	463b      	mov	r3, r7
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2301      	movs	r3, #1
 8001502:	2288      	movs	r2, #136	@ 0x88
 8001504:	21ec      	movs	r1, #236	@ 0xec
 8001506:	485f      	ldr	r0, [pc, #380]	@ (8001684 <TrimRead+0x198>)
 8001508:	f003 fccc 	bl	8004ea4 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 800150c:	463b      	mov	r3, r7
 800150e:	3319      	adds	r3, #25
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	9202      	str	r2, [sp, #8]
 8001516:	2207      	movs	r2, #7
 8001518:	9201      	str	r2, [sp, #4]
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	22e1      	movs	r2, #225	@ 0xe1
 8001520:	21ec      	movs	r1, #236	@ 0xec
 8001522:	4858      	ldr	r0, [pc, #352]	@ (8001684 <TrimRead+0x198>)
 8001524:	f003 fcbe 	bl	8004ea4 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	b21b      	sxth	r3, r3
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b21a      	sxth	r2, r3
 8001530:	783b      	ldrb	r3, [r7, #0]
 8001532:	b21b      	sxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	b21b      	sxth	r3, r3
 8001538:	b29a      	uxth	r2, r3
 800153a:	4b53      	ldr	r3, [pc, #332]	@ (8001688 <TrimRead+0x19c>)
 800153c:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	b21b      	sxth	r3, r3
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	78bb      	ldrb	r3, [r7, #2]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21a      	sxth	r2, r3
 800154e:	4b4f      	ldr	r3, [pc, #316]	@ (800168c <TrimRead+0x1a0>)
 8001550:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001552:	797b      	ldrb	r3, [r7, #5]
 8001554:	b21b      	sxth	r3, r3
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21a      	sxth	r2, r3
 800155a:	793b      	ldrb	r3, [r7, #4]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21a      	sxth	r2, r3
 8001562:	4b4b      	ldr	r3, [pc, #300]	@ (8001690 <TrimRead+0x1a4>)
 8001564:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	b21b      	sxth	r3, r3
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21a      	sxth	r2, r3
 800156e:	797b      	ldrb	r3, [r7, #5]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21b      	sxth	r3, r3
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b46      	ldr	r3, [pc, #280]	@ (8001694 <TrimRead+0x1a8>)
 800157a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 800157c:	7a7b      	ldrb	r3, [r7, #9]
 800157e:	b21b      	sxth	r3, r3
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	b21b      	sxth	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b42      	ldr	r3, [pc, #264]	@ (8001698 <TrimRead+0x1ac>)
 800158e:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	b21b      	sxth	r3, r3
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	7abb      	ldrb	r3, [r7, #10]
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b21a      	sxth	r2, r3
 80015a0:	4b3e      	ldr	r3, [pc, #248]	@ (800169c <TrimRead+0x1b0>)
 80015a2:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80015a4:	7b7b      	ldrb	r3, [r7, #13]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	7b3b      	ldrb	r3, [r7, #12]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	4b3a      	ldr	r3, [pc, #232]	@ (80016a0 <TrimRead+0x1b4>)
 80015b6:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b21a      	sxth	r2, r3
 80015c0:	7bbb      	ldrb	r3, [r7, #14]
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	4b36      	ldr	r3, [pc, #216]	@ (80016a4 <TrimRead+0x1b8>)
 80015ca:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80015cc:	7c7b      	ldrb	r3, [r7, #17]
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	7c3b      	ldrb	r3, [r7, #16]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21a      	sxth	r2, r3
 80015dc:	4b32      	ldr	r3, [pc, #200]	@ (80016a8 <TrimRead+0x1bc>)
 80015de:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80015e0:	7cfb      	ldrb	r3, [r7, #19]
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	7cbb      	ldrb	r3, [r7, #18]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b2e      	ldr	r3, [pc, #184]	@ (80016ac <TrimRead+0x1c0>)
 80015f2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80015f4:	7d7b      	ldrb	r3, [r7, #21]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	7d3b      	ldrb	r3, [r7, #20]
 80015fe:	b21b      	sxth	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	b21a      	sxth	r2, r3
 8001604:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <TrimRead+0x1c4>)
 8001606:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	b21b      	sxth	r3, r3
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b21a      	sxth	r2, r3
 8001610:	7dbb      	ldrb	r3, [r7, #22]
 8001612:	b21b      	sxth	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b21a      	sxth	r2, r3
 8001618:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <TrimRead+0x1c8>)
 800161a:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 800161c:	7e3b      	ldrb	r3, [r7, #24]
 800161e:	461a      	mov	r2, r3
 8001620:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <TrimRead+0x1cc>)
 8001622:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001624:	7ebb      	ldrb	r3, [r7, #26]
 8001626:	b21b      	sxth	r3, r3
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	b21a      	sxth	r2, r3
 800162c:	7e7b      	ldrb	r3, [r7, #25]
 800162e:	b21b      	sxth	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b21a      	sxth	r2, r3
 8001634:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <TrimRead+0x1d0>)
 8001636:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001638:	7efb      	ldrb	r3, [r7, #27]
 800163a:	461a      	mov	r2, r3
 800163c:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <TrimRead+0x1d4>)
 800163e:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001640:	7f3b      	ldrb	r3, [r7, #28]
 8001642:	b21b      	sxth	r3, r3
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	b21a      	sxth	r2, r3
 8001648:	7f7b      	ldrb	r3, [r7, #29]
 800164a:	b21b      	sxth	r3, r3
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	b21b      	sxth	r3, r3
 8001652:	4313      	orrs	r3, r2
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <TrimRead+0x1d8>)
 8001658:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800165a:	7fbb      	ldrb	r3, [r7, #30]
 800165c:	b21b      	sxth	r3, r3
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	b21a      	sxth	r2, r3
 8001662:	7f7b      	ldrb	r3, [r7, #29]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	b2db      	uxtb	r3, r3
 8001668:	b21b      	sxth	r3, r3
 800166a:	4313      	orrs	r3, r2
 800166c:	b21a      	sxth	r2, r3
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <TrimRead+0x1dc>)
 8001670:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001672:	7ffb      	ldrb	r3, [r7, #31]
 8001674:	b21a      	sxth	r2, r3
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <TrimRead+0x1e0>)
 8001678:	801a      	strh	r2, [r3, #0]
}
 800167a:	bf00      	nop
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000228 	.word	0x20000228
 8001688:	20000200 	.word	0x20000200
 800168c:	20000208 	.word	0x20000208
 8001690:	2000020a 	.word	0x2000020a
 8001694:	20000202 	.word	0x20000202
 8001698:	2000020c 	.word	0x2000020c
 800169c:	2000020e 	.word	0x2000020e
 80016a0:	20000210 	.word	0x20000210
 80016a4:	20000212 	.word	0x20000212
 80016a8:	20000214 	.word	0x20000214
 80016ac:	20000216 	.word	0x20000216
 80016b0:	20000218 	.word	0x20000218
 80016b4:	2000021a 	.word	0x2000021a
 80016b8:	20000204 	.word	0x20000204
 80016bc:	2000021c 	.word	0x2000021c
 80016c0:	20000206 	.word	0x20000206
 80016c4:	2000021e 	.word	0x2000021e
 80016c8:	20000220 	.word	0x20000220
 80016cc:	20000222 	.word	0x20000222

080016d0 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b089      	sub	sp, #36	@ 0x24
 80016d4:	af04      	add	r7, sp, #16
 80016d6:	4604      	mov	r4, r0
 80016d8:	4608      	mov	r0, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	4623      	mov	r3, r4
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	4603      	mov	r3, r0
 80016e4:	71bb      	strb	r3, [r7, #6]
 80016e6:	460b      	mov	r3, r1
 80016e8:	717b      	strb	r3, [r7, #5]
 80016ea:	4613      	mov	r3, r2
 80016ec:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80016ee:	f7ff fefd 	bl	80014ec <TrimRead>


	uint8_t datatowrite = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80016fa:	23b6      	movs	r3, #182	@ 0xb6
 80016fc:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80016fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	2301      	movs	r3, #1
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	f107 030f 	add.w	r3, r7, #15
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2301      	movs	r3, #1
 8001710:	22e0      	movs	r2, #224	@ 0xe0
 8001712:	21ec      	movs	r1, #236	@ 0xec
 8001714:	4842      	ldr	r0, [pc, #264]	@ (8001820 <BME280_Config+0x150>)
 8001716:	f003 facb 	bl	8004cb0 <HAL_I2C_Mem_Write>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <BME280_Config+0x56>
	{
		return -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	e077      	b.n	8001816 <BME280_Config+0x146>
	}

	HAL_Delay (100);
 8001726:	2064      	movs	r0, #100	@ 0x64
 8001728:	f002 fdfe 	bl	8004328 <HAL_Delay>
	// write the humidity oversampling to 0xF2



	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800172c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001730:	015b      	lsls	r3, r3, #5
 8001732:	b25a      	sxtb	r2, r3
 8001734:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	b25b      	sxtb	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b25b      	sxtb	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	2301      	movs	r3, #1
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	f107 030f 	add.w	r3, r7, #15
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2301      	movs	r3, #1
 8001756:	22f5      	movs	r2, #245	@ 0xf5
 8001758:	21ec      	movs	r1, #236	@ 0xec
 800175a:	4831      	ldr	r0, [pc, #196]	@ (8001820 <BME280_Config+0x150>)
 800175c:	f003 faa8 	bl	8004cb0 <HAL_I2C_Mem_Write>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <BME280_Config+0x9c>
	{
		return -1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e054      	b.n	8001816 <BME280_Config+0x146>
	}
	HAL_Delay (100);
 800176c:	2064      	movs	r0, #100	@ 0x64
 800176e:	f002 fddb 	bl	8004328 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	2301      	movs	r3, #1
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	f107 030e 	add.w	r3, r7, #14
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	22f5      	movs	r2, #245	@ 0xf5
 8001786:	21ec      	movs	r1, #236	@ 0xec
 8001788:	4825      	ldr	r0, [pc, #148]	@ (8001820 <BME280_Config+0x150>)
 800178a:	f003 fb8b 	bl	8004ea4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800178e:	7bba      	ldrb	r2, [r7, #14]
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	429a      	cmp	r2, r3
 8001794:	d002      	beq.n	800179c <BME280_Config+0xcc>
	{
		return -1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e03c      	b.n	8001816 <BME280_Config+0x146>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	015b      	lsls	r3, r3, #5
 80017a2:	b25a      	sxtb	r2, r3
 80017a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b25a      	sxtb	r2, r3
 80017b0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80017bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	2301      	movs	r3, #1
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	f107 030f 	add.w	r3, r7, #15
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	22f4      	movs	r2, #244	@ 0xf4
 80017d0:	21ec      	movs	r1, #236	@ 0xec
 80017d2:	4813      	ldr	r0, [pc, #76]	@ (8001820 <BME280_Config+0x150>)
 80017d4:	f003 fa6c 	bl	8004cb0 <HAL_I2C_Mem_Write>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <BME280_Config+0x114>
	{
		return -1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e018      	b.n	8001816 <BME280_Config+0x146>
	}
	HAL_Delay (100);
 80017e4:	2064      	movs	r0, #100	@ 0x64
 80017e6:	f002 fd9f 	bl	8004328 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80017ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	2301      	movs	r3, #1
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	f107 030e 	add.w	r3, r7, #14
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2301      	movs	r3, #1
 80017fc:	22f4      	movs	r2, #244	@ 0xf4
 80017fe:	21ec      	movs	r1, #236	@ 0xec
 8001800:	4807      	ldr	r0, [pc, #28]	@ (8001820 <BME280_Config+0x150>)
 8001802:	f003 fb4f 	bl	8004ea4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001806:	7bba      	ldrb	r2, [r7, #14]
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	429a      	cmp	r2, r3
 800180c:	d002      	beq.n	8001814 <BME280_Config+0x144>
	{
		return -1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e000      	b.n	8001816 <BME280_Config+0x146>
	}

	return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}
 800181e:	bf00      	nop
 8001820:	20000228 	.word	0x20000228

08001824 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800182a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	2301      	movs	r3, #1
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <BMEReadRaw+0x80>)
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2301      	movs	r3, #1
 800183a:	22d0      	movs	r2, #208	@ 0xd0
 800183c:	21ec      	movs	r1, #236	@ 0xec
 800183e:	481a      	ldr	r0, [pc, #104]	@ (80018a8 <BMEReadRaw+0x84>)
 8001840:	f003 fb30 	bl	8004ea4 <HAL_I2C_Mem_Read>

	if (chipID == 0x58)
 8001844:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <BMEReadRaw+0x80>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b58      	cmp	r3, #88	@ 0x58
 800184a:	d124      	bne.n	8001896 <BMEReadRaw+0x72>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	9302      	str	r3, [sp, #8]
 8001852:	2308      	movs	r3, #8
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	463b      	mov	r3, r7
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2301      	movs	r3, #1
 800185c:	22f7      	movs	r2, #247	@ 0xf7
 800185e:	21ec      	movs	r1, #236	@ 0xec
 8001860:	4811      	ldr	r0, [pc, #68]	@ (80018a8 <BMEReadRaw+0x84>)
 8001862:	f003 fb1f 	bl	8004ea4 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001866:	783b      	ldrb	r3, [r7, #0]
 8001868:	031a      	lsls	r2, r3, #12
 800186a:	787b      	ldrb	r3, [r7, #1]
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	4313      	orrs	r3, r2
 8001870:	78ba      	ldrb	r2, [r7, #2]
 8001872:	0912      	lsrs	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	4313      	orrs	r3, r2
 8001878:	4a0c      	ldr	r2, [pc, #48]	@ (80018ac <BMEReadRaw+0x88>)
 800187a:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	031a      	lsls	r2, r3, #12
 8001880:	793b      	ldrb	r3, [r7, #4]
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	4313      	orrs	r3, r2
 8001886:	797a      	ldrb	r2, [r7, #5]
 8001888:	0912      	lsrs	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	4313      	orrs	r3, r2
 800188e:	4a08      	ldr	r2, [pc, #32]	@ (80018b0 <BMEReadRaw+0x8c>)
 8001890:	6013      	str	r3, [r2, #0]


		return 0;
 8001892:	2300      	movs	r3, #0
 8001894:	e001      	b.n	800189a <BMEReadRaw+0x76>
	}

	else return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200001f4 	.word	0x200001f4
 80018a8:	20000228 	.word	0x20000228
 80018ac:	200001fc 	.word	0x200001fc
 80018b0:	200001f8 	.word	0x200001f8

080018b4 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	10da      	asrs	r2, r3, #3
 80018c0:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <BME280_compensate_T_int32+0x70>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4a17      	ldr	r2, [pc, #92]	@ (8001928 <BME280_compensate_T_int32+0x74>)
 80018ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	12db      	asrs	r3, r3, #11
 80018d4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	111b      	asrs	r3, r3, #4
 80018da:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <BME280_compensate_T_int32+0x70>)
 80018dc:	8812      	ldrh	r2, [r2, #0]
 80018de:	1a9b      	subs	r3, r3, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	1112      	asrs	r2, r2, #4
 80018e4:	490f      	ldr	r1, [pc, #60]	@ (8001924 <BME280_compensate_T_int32+0x70>)
 80018e6:	8809      	ldrh	r1, [r1, #0]
 80018e8:	1a52      	subs	r2, r2, r1
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	131b      	asrs	r3, r3, #12
 80018f0:	4a0e      	ldr	r2, [pc, #56]	@ (800192c <BME280_compensate_T_int32+0x78>)
 80018f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	139b      	asrs	r3, r3, #14
 80018fc:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4413      	add	r3, r2
 8001904:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <BME280_compensate_T_int32+0x7c>)
 8001906:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001908:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <BME280_compensate_T_int32+0x7c>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	3380      	adds	r3, #128	@ 0x80
 8001914:	121b      	asrs	r3, r3, #8
 8001916:	60fb      	str	r3, [r7, #12]
	return T;
 8001918:	68fb      	ldr	r3, [r7, #12]
}
 800191a:	4618      	mov	r0, r3
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	20000200 	.word	0x20000200
 8001928:	20000208 	.word	0x20000208
 800192c:	2000020a 	.word	0x2000020a
 8001930:	20000224 	.word	0x20000224

08001934 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001938:	b0ca      	sub	sp, #296	@ 0x128
 800193a:	af00      	add	r7, sp, #0
 800193c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001940:	4bae      	ldr	r3, [pc, #696]	@ (8001bfc <BME280_compensate_P_int64+0x2c8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	17da      	asrs	r2, r3, #31
 8001946:	461c      	mov	r4, r3
 8001948:	4615      	mov	r5, r2
 800194a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800194e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001952:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001956:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800195a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800195e:	fb03 f102 	mul.w	r1, r3, r2
 8001962:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001966:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	18ca      	adds	r2, r1, r3
 8001970:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001974:	fba3 8903 	umull	r8, r9, r3, r3
 8001978:	eb02 0309 	add.w	r3, r2, r9
 800197c:	4699      	mov	r9, r3
 800197e:	4ba0      	ldr	r3, [pc, #640]	@ (8001c00 <BME280_compensate_P_int64+0x2cc>)
 8001980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001984:	b21b      	sxth	r3, r3
 8001986:	17da      	asrs	r2, r3, #31
 8001988:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800198c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001990:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001994:	4603      	mov	r3, r0
 8001996:	fb03 f209 	mul.w	r2, r3, r9
 800199a:	460b      	mov	r3, r1
 800199c:	fb08 f303 	mul.w	r3, r8, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	4602      	mov	r2, r0
 80019a4:	fba8 2102 	umull	r2, r1, r8, r2
 80019a8:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 80019ac:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80019b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80019b4:	4413      	add	r3, r2
 80019b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80019ba:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80019be:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80019c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80019c6:	4b8f      	ldr	r3, [pc, #572]	@ (8001c04 <BME280_compensate_P_int64+0x2d0>)
 80019c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	17da      	asrs	r2, r3, #31
 80019d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019d4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80019d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80019dc:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80019e0:	462a      	mov	r2, r5
 80019e2:	fb02 f203 	mul.w	r2, r2, r3
 80019e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80019ea:	4621      	mov	r1, r4
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	441a      	add	r2, r3
 80019f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80019f6:	4621      	mov	r1, r4
 80019f8:	fba3 3101 	umull	r3, r1, r3, r1
 80019fc:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8001a00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001a08:	18d3      	adds	r3, r2, r3
 8001a0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a0e:	f04f 0000 	mov.w	r0, #0
 8001a12:	f04f 0100 	mov.w	r1, #0
 8001a16:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001a1a:	462b      	mov	r3, r5
 8001a1c:	0459      	lsls	r1, r3, #17
 8001a1e:	4622      	mov	r2, r4
 8001a20:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001a24:	4623      	mov	r3, r4
 8001a26:	0458      	lsls	r0, r3, #17
 8001a28:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a2c:	1814      	adds	r4, r2, r0
 8001a2e:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a30:	414b      	adcs	r3, r1
 8001a32:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a34:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a38:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001a3c:	4b72      	ldr	r3, [pc, #456]	@ (8001c08 <BME280_compensate_P_int64+0x2d4>)
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	17da      	asrs	r2, r3, #31
 8001a46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a4a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a4e:	f04f 0000 	mov.w	r0, #0
 8001a52:	f04f 0100 	mov.w	r1, #0
 8001a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a5a:	00d9      	lsls	r1, r3, #3
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a62:	1814      	adds	r4, r2, r0
 8001a64:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001a66:	414b      	adcs	r3, r1
 8001a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a6a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a6e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001a72:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001a76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a7a:	fb03 f102 	mul.w	r1, r3, r2
 8001a7e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001a82:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	18ca      	adds	r2, r1, r3
 8001a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a90:	fba3 3103 	umull	r3, r1, r3, r3
 8001a94:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001a98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001aa0:	18d3      	adds	r3, r2, r3
 8001aa2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001aa6:	4b59      	ldr	r3, [pc, #356]	@ (8001c0c <BME280_compensate_P_int64+0x2d8>)
 8001aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	17da      	asrs	r2, r3, #31
 8001ab0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ab4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001ab8:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8001abc:	4622      	mov	r2, r4
 8001abe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001ac2:	4641      	mov	r1, r8
 8001ac4:	fb01 f202 	mul.w	r2, r1, r2
 8001ac8:	464d      	mov	r5, r9
 8001aca:	4618      	mov	r0, r3
 8001acc:	4621      	mov	r1, r4
 8001ace:	4603      	mov	r3, r0
 8001ad0:	fb03 f305 	mul.w	r3, r3, r5
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4641      	mov	r1, r8
 8001ada:	fba2 2101 	umull	r2, r1, r2, r1
 8001ade:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8001ae2:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001ae6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001aea:	4413      	add	r3, r2
 8001aec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001af0:	f04f 0000 	mov.w	r0, #0
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001afc:	4623      	mov	r3, r4
 8001afe:	0a18      	lsrs	r0, r3, #8
 8001b00:	462a      	mov	r2, r5
 8001b02:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001b06:	462b      	mov	r3, r5
 8001b08:	1219      	asrs	r1, r3, #8
 8001b0a:	4b41      	ldr	r3, [pc, #260]	@ (8001c10 <BME280_compensate_P_int64+0x2dc>)
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	17da      	asrs	r2, r3, #31
 8001b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001b18:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001b1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001b20:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001b24:	464a      	mov	r2, r9
 8001b26:	fb02 f203 	mul.w	r2, r2, r3
 8001b2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001b2e:	4644      	mov	r4, r8
 8001b30:	fb04 f303 	mul.w	r3, r4, r3
 8001b34:	441a      	add	r2, r3
 8001b36:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001b3a:	4644      	mov	r4, r8
 8001b3c:	fba3 3404 	umull	r3, r4, r3, r4
 8001b40:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001b44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001b48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001b4c:	18d3      	adds	r3, r2, r3
 8001b4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001b5e:	464c      	mov	r4, r9
 8001b60:	0323      	lsls	r3, r4, #12
 8001b62:	46c4      	mov	ip, r8
 8001b64:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001b68:	4644      	mov	r4, r8
 8001b6a:	0322      	lsls	r2, r4, #12
 8001b6c:	1884      	adds	r4, r0, r2
 8001b6e:	633c      	str	r4, [r7, #48]	@ 0x30
 8001b70:	eb41 0303 	adc.w	r3, r1, r3
 8001b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b76:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b7a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001b7e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b82:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b86:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001b8a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001b8e:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <BME280_compensate_P_int64+0x2e0>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2200      	movs	r2, #0
 8001b96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b9a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b9e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001ba8:	4641      	mov	r1, r8
 8001baa:	fb01 f202 	mul.w	r2, r1, r2
 8001bae:	464d      	mov	r5, r9
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	fb03 f305 	mul.w	r3, r3, r5
 8001bba:	4413      	add	r3, r2
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4641      	mov	r1, r8
 8001bc0:	fba2 2101 	umull	r2, r1, r2, r1
 8001bc4:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001bc8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001bcc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001be2:	4629      	mov	r1, r5
 8001be4:	104a      	asrs	r2, r1, #1
 8001be6:	4629      	mov	r1, r5
 8001be8:	17cb      	asrs	r3, r1, #31
 8001bea:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001bee:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	d110      	bne.n	8001c18 <BME280_compensate_P_int64+0x2e4>
	{
		return 0; // avoid exception caused by division by zero
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e152      	b.n	8001ea0 <BME280_compensate_P_int64+0x56c>
 8001bfa:	bf00      	nop
 8001bfc:	20000224 	.word	0x20000224
 8001c00:	20000214 	.word	0x20000214
 8001c04:	20000212 	.word	0x20000212
 8001c08:	20000210 	.word	0x20000210
 8001c0c:	2000020e 	.word	0x2000020e
 8001c10:	2000020c 	.word	0x2000020c
 8001c14:	20000202 	.word	0x20000202
	}
	p = 1048576-adc_P;
 8001c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001c1c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001c20:	17da      	asrs	r2, r3, #31
 8001c22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c26:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001c2a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001c2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001c32:	105b      	asrs	r3, r3, #1
 8001c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c38:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001c3c:	07db      	lsls	r3, r3, #31
 8001c3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c42:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	1aa4      	subs	r4, r4, r2
 8001c4e:	67bc      	str	r4, [r7, #120]	@ 0x78
 8001c50:	eb61 0303 	sbc.w	r3, r1, r3
 8001c54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	1891      	adds	r1, r2, r2
 8001c60:	6239      	str	r1, [r7, #32]
 8001c62:	415b      	adcs	r3, r3
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	1851      	adds	r1, r2, r1
 8001c6e:	61b9      	str	r1, [r7, #24]
 8001c70:	4629      	mov	r1, r5
 8001c72:	414b      	adcs	r3, r1
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c82:	4649      	mov	r1, r9
 8001c84:	018b      	lsls	r3, r1, #6
 8001c86:	4641      	mov	r1, r8
 8001c88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c8c:	4641      	mov	r1, r8
 8001c8e:	018a      	lsls	r2, r1, #6
 8001c90:	4641      	mov	r1, r8
 8001c92:	1889      	adds	r1, r1, r2
 8001c94:	6139      	str	r1, [r7, #16]
 8001c96:	4649      	mov	r1, r9
 8001c98:	eb43 0101 	adc.w	r1, r3, r1
 8001c9c:	6179      	str	r1, [r7, #20]
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001caa:	4649      	mov	r1, r9
 8001cac:	008b      	lsls	r3, r1, #2
 8001cae:	46c4      	mov	ip, r8
 8001cb0:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001cb4:	4641      	mov	r1, r8
 8001cb6:	008a      	lsls	r2, r1, #2
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4622      	mov	r2, r4
 8001cc0:	189b      	adds	r3, r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	462a      	mov	r2, r5
 8001cc8:	eb42 0303 	adc.w	r3, r2, r3
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001cda:	4649      	mov	r1, r9
 8001cdc:	008b      	lsls	r3, r1, #2
 8001cde:	46c4      	mov	ip, r8
 8001ce0:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001ce4:	4641      	mov	r1, r8
 8001ce6:	008a      	lsls	r2, r1, #2
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	4603      	mov	r3, r0
 8001cee:	4622      	mov	r2, r4
 8001cf0:	189b      	adds	r3, r3, r2
 8001cf2:	673b      	str	r3, [r7, #112]	@ 0x70
 8001cf4:	462b      	mov	r3, r5
 8001cf6:	460a      	mov	r2, r1
 8001cf8:	eb42 0303 	adc.w	r3, r2, r3
 8001cfc:	677b      	str	r3, [r7, #116]	@ 0x74
 8001cfe:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001d02:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001d06:	f7ff fa1f 	bl	8001148 <__aeabi_ldivmod>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001d12:	4b66      	ldr	r3, [pc, #408]	@ (8001eac <BME280_compensate_P_int64+0x578>)
 8001d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	17da      	asrs	r2, r3, #31
 8001d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001d20:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	0b50      	lsrs	r0, r2, #13
 8001d2e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d32:	1359      	asrs	r1, r3, #13
 8001d34:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001d38:	462b      	mov	r3, r5
 8001d3a:	fb00 f203 	mul.w	r2, r0, r3
 8001d3e:	4623      	mov	r3, r4
 8001d40:	fb03 f301 	mul.w	r3, r3, r1
 8001d44:	4413      	add	r3, r2
 8001d46:	4622      	mov	r2, r4
 8001d48:	fba2 2100 	umull	r2, r1, r2, r0
 8001d4c:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001d50:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001d58:	4413      	add	r3, r2
 8001d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001d5e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001d62:	f04f 0000 	mov.w	r0, #0
 8001d66:	f04f 0100 	mov.w	r1, #0
 8001d6a:	0b50      	lsrs	r0, r2, #13
 8001d6c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d70:	1359      	asrs	r1, r3, #13
 8001d72:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001d76:	462b      	mov	r3, r5
 8001d78:	fb00 f203 	mul.w	r2, r0, r3
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	fb03 f301 	mul.w	r3, r3, r1
 8001d82:	4413      	add	r3, r2
 8001d84:	4622      	mov	r2, r4
 8001d86:	fba2 2100 	umull	r2, r1, r2, r0
 8001d8a:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001d8e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001d92:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001d96:	4413      	add	r3, r2
 8001d98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001da8:	4621      	mov	r1, r4
 8001daa:	0e4a      	lsrs	r2, r1, #25
 8001dac:	4620      	mov	r0, r4
 8001dae:	4629      	mov	r1, r5
 8001db0:	460c      	mov	r4, r1
 8001db2:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001db6:	164b      	asrs	r3, r1, #25
 8001db8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001dbc:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb0 <BME280_compensate_P_int64+0x57c>)
 8001dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	17da      	asrs	r2, r3, #31
 8001dc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001dc8:	667a      	str	r2, [r7, #100]	@ 0x64
 8001dca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001dce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001dd2:	462a      	mov	r2, r5
 8001dd4:	fb02 f203 	mul.w	r2, r2, r3
 8001dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ddc:	4621      	mov	r1, r4
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001de8:	4621      	mov	r1, r4
 8001dea:	fba2 2101 	umull	r2, r1, r2, r1
 8001dee:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001df2:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001df6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	0cca      	lsrs	r2, r1, #19
 8001e10:	4620      	mov	r0, r4
 8001e12:	4629      	mov	r1, r5
 8001e14:	460c      	mov	r4, r1
 8001e16:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001e1a:	14cb      	asrs	r3, r1, #19
 8001e1c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001e20:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001e24:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001e28:	1884      	adds	r4, r0, r2
 8001e2a:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001e2c:	eb41 0303 	adc.w	r3, r1, r3
 8001e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e32:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e36:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	1889      	adds	r1, r1, r2
 8001e3e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001e40:	4629      	mov	r1, r5
 8001e42:	eb43 0101 	adc.w	r1, r3, r1
 8001e46:	6579      	str	r1, [r7, #84]	@ 0x54
 8001e48:	f04f 0000 	mov.w	r0, #0
 8001e4c:	f04f 0100 	mov.w	r1, #0
 8001e50:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001e54:	4623      	mov	r3, r4
 8001e56:	0a18      	lsrs	r0, r3, #8
 8001e58:	462a      	mov	r2, r5
 8001e5a:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001e5e:	462b      	mov	r3, r5
 8001e60:	1219      	asrs	r1, r3, #8
 8001e62:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <BME280_compensate_P_int64+0x580>)
 8001e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	17da      	asrs	r2, r3, #31
 8001e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e6e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001e7c:	464c      	mov	r4, r9
 8001e7e:	0123      	lsls	r3, r4, #4
 8001e80:	46c4      	mov	ip, r8
 8001e82:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001e86:	4644      	mov	r4, r8
 8001e88:	0122      	lsls	r2, r4, #4
 8001e8a:	1884      	adds	r4, r0, r2
 8001e8c:	603c      	str	r4, [r7, #0]
 8001e8e:	eb41 0303 	adc.w	r3, r1, r3
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e98:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001e9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eac:	2000021a 	.word	0x2000021a
 8001eb0:	20000218 	.word	0x20000218
 8001eb4:	20000216 	.word	0x20000216

08001eb8 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ebc:	f7ff fcb2 	bl	8001824 <BMEReadRaw>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d142      	bne.n	8001f4c <BME280_Measure+0x94>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001ec6:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <BME280_Measure+0xa8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ece:	d104      	bne.n	8001eda <BME280_Measure+0x22>
 8001ed0:	4b24      	ldr	r3, [pc, #144]	@ (8001f64 <BME280_Measure+0xac>)
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	e016      	b.n	8001f08 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001eda:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <BME280_Measure+0xa8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fce8 	bl	80018b4 <BME280_compensate_T_int32>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fa8c 	bl	8000404 <__aeabi_i2d>
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <BME280_Measure+0xb0>)
 8001ef2:	f7fe fc1b 	bl	800072c <__aeabi_ddiv>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fdc3 	bl	8000a88 <__aeabi_d2f>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4a17      	ldr	r2, [pc, #92]	@ (8001f64 <BME280_Measure+0xac>)
 8001f06:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001f08:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <BME280_Measure+0xb4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f10:	d104      	bne.n	8001f1c <BME280_Measure+0x64>
 8001f12:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <BME280_Measure+0xb8>)
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = 0;
	}
}
 8001f1a:	e01f      	b.n	8001f5c <BME280_Measure+0xa4>
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001f1c:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <BME280_Measure+0xb4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fd07 	bl	8001934 <BME280_compensate_P_int64>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fa5b 	bl	80003e4 <__aeabi_ui2d>
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <BME280_Measure+0xbc>)
 8001f34:	f7fe fbfa 	bl	800072c <__aeabi_ddiv>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7fe fda2 	bl	8000a88 <__aeabi_d2f>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <BME280_Measure+0xb8>)
 8001f48:	6013      	str	r3, [r2, #0]
}
 8001f4a:	e007      	b.n	8001f5c <BME280_Measure+0xa4>
		Temperature = Pressure = 0;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <BME280_Measure+0xb8>)
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <BME280_Measure+0xb8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a02      	ldr	r2, [pc, #8]	@ (8001f64 <BME280_Measure+0xac>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200001f8 	.word	0x200001f8
 8001f64:	20000524 	.word	0x20000524
 8001f68:	40590000 	.word	0x40590000
 8001f6c:	200001fc 	.word	0x200001fc
 8001f70:	20000528 	.word	0x20000528
 8001f74:	40700000 	.word	0x40700000

08001f78 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d106      	bne.n	8001f9a <prv_parse_number+0x22>
        t = gh->p.term_str;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3371      	adds	r3, #113	@ 0x71
 8001f90:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 8001f92:	e002      	b.n	8001f9a <prv_parse_number+0x22>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <prv_parse_number+0x30>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d0f5      	beq.n	8001f94 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b2d      	cmp	r3, #45	@ 0x2d
 8001fae:	d104      	bne.n	8001fba <prv_parse_number+0x42>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <prv_parse_number+0x44>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8001fbe:	e00d      	b.n	8001fdc <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	461a      	mov	r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	3b30      	subs	r3, #48	@ 0x30
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <prv_parse_number+0x7a>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b2f      	cmp	r3, #47	@ 0x2f
 8001fe8:	d903      	bls.n	8001ff2 <prv_parse_number+0x7a>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b39      	cmp	r3, #57	@ 0x39
 8001ff0:	d9e6      	bls.n	8001fc0 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <prv_parse_number+0x86>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	425b      	negs	r3, r3
 8001ffc:	e000      	b.n	8002000 <prv_parse_number+0x88>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
	...

0800200c <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 800200c:	b5b0      	push	{r4, r5, r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1;
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	4b4b      	ldr	r3, [pc, #300]	@ (8002154 <prv_parse_float_number+0x148>)
 8002028:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int sign = 1;
 800202c:	2301      	movs	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]

    if (t == NULL) {
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <prv_parse_float_number+0x38>
        t = gh->p.term_str;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3371      	adds	r3, #113	@ 0x71
 800203a:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 800203c:	e002      	b.n	8002044 <prv_parse_float_number+0x38>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <prv_parse_float_number+0x46>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b20      	cmp	r3, #32
 8002050:	d0f5      	beq.n	800203e <prv_parse_float_number+0x32>

    if (*t == '-') { /* Check sign */
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b2d      	cmp	r3, #45	@ 0x2d
 8002058:	d124      	bne.n	80020a4 <prv_parse_float_number+0x98>
        sign = -1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
 800205e:	60fb      	str	r3, [r7, #12]
        ++t;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Convert main part */
 8002066:	e01d      	b.n	80020a4 <prv_parse_float_number+0x98>
        value = value * (lwgps_float_t)10 + CTN(*t);
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b3a      	ldr	r3, [pc, #232]	@ (8002158 <prv_parse_float_number+0x14c>)
 800206e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002072:	f7fe fa31 	bl	80004d8 <__aeabi_dmul>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4614      	mov	r4, r2
 800207c:	461d      	mov	r5, r3
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	3b30      	subs	r3, #48	@ 0x30
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe f9bd 	bl	8000404 <__aeabi_i2d>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4620      	mov	r0, r4
 8002090:	4629      	mov	r1, r5
 8002092:	f7fe f86b 	bl	800016c <__adddf3>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        ++t;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Convert main part */
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80020aa:	d903      	bls.n	80020b4 <prv_parse_float_number+0xa8>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b39      	cmp	r3, #57	@ 0x39
 80020b2:	d9d9      	bls.n	8002068 <prv_parse_float_number+0x5c>
    }
    if (*t == '.') { /* Skip the dot character */
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80020ba:	d12c      	bne.n	8002116 <prv_parse_float_number+0x10a>
        ++t;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	3301      	adds	r3, #1
 80020c0:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Get the power */
 80020c2:	e028      	b.n	8002116 <prv_parse_float_number+0x10a>
        value = value * (lwgps_float_t)10 + CTN(*t);
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <prv_parse_float_number+0x14c>)
 80020ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020ce:	f7fe fa03 	bl	80004d8 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4614      	mov	r4, r2
 80020d8:	461d      	mov	r5, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	3b30      	subs	r3, #48	@ 0x30
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe f98f 	bl	8000404 <__aeabi_i2d>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4620      	mov	r0, r4
 80020ec:	4629      	mov	r1, r5
 80020ee:	f7fe f83d 	bl	800016c <__adddf3>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        power *= (lwgps_float_t)10.0;
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <prv_parse_float_number+0x14c>)
 8002100:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002104:	f7fe f9e8 	bl	80004d8 <__aeabi_dmul>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ++t;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Get the power */
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b2f      	cmp	r3, #47	@ 0x2f
 800211c:	d903      	bls.n	8002126 <prv_parse_float_number+0x11a>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b39      	cmp	r3, #57	@ 0x39
 8002124:	d9ce      	bls.n	80020c4 <prv_parse_float_number+0xb8>
    }
    return sign * value / power;
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f7fe f96c 	bl	8000404 <__aeabi_i2d>
 800212c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002130:	f7fe f9d2 	bl	80004d8 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002140:	f7fe faf4 	bl	800072c <__aeabi_ddiv>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
}
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bdb0      	pop	{r4, r5, r7, pc}
 8002152:	bf00      	nop
 8002154:	3ff00000 	.word	0x3ff00000
 8002158:	40240000 	.word	0x40240000

0800215c <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL); /* Parse value as double */
 8002164:	2100      	movs	r1, #0
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ff50 	bl	800200c <prv_parse_float_number>
 800216c:	e9c7 0106 	strd	r0, r1, [r7, #24]
    deg = FLT((int)((int)ll / 100));       /* Get absolute degrees value, interested in integer part only */
 8002170:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002174:	f7fe fc60 	bl	8000a38 <__aeabi_d2iz>
 8002178:	4603      	mov	r3, r0
 800217a:	4a1b      	ldr	r2, [pc, #108]	@ (80021e8 <prv_parse_lat_long+0x8c>)
 800217c:	fb82 1203 	smull	r1, r2, r2, r3
 8002180:	1152      	asrs	r2, r2, #5
 8002182:	17db      	asrs	r3, r3, #31
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f93c 	bl	8000404 <__aeabi_i2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));           /* Get remaining part from full number, minutes */
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <prv_parse_lat_long+0x90>)
 800219a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800219e:	f7fe f99b 	bl	80004d8 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021aa:	f7fd ffdd 	bl	8000168 <__aeabi_dsub>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));          /* Calculate latitude/longitude */
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	4b0d      	ldr	r3, [pc, #52]	@ (80021f0 <prv_parse_lat_long+0x94>)
 80021bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021c0:	f7fe fab4 	bl	800072c <__aeabi_ddiv>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021cc:	f7fd ffce 	bl	800016c <__adddf3>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80021d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	51eb851f 	.word	0x51eb851f
 80021ec:	40590000 	.word	0x40590000
 80021f0:	404e0000 	.word	0x404e0000

080021f4 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80021f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) { /* Check string type */
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8002204:	2900      	cmp	r1, #0
 8002206:	d169      	bne.n	80022dc <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3371      	adds	r3, #113	@ 0x71
 800220c:	2206      	movs	r2, #6
 800220e:	49b6      	ldr	r1, [pc, #728]	@ (80024e8 <prv_parse_term+0x2f4>)
 8002210:	4618      	mov	r0, r3
 8002212:	f006 fb0c 	bl	800882e <strncmp>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <prv_parse_term+0x3c>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3371      	adds	r3, #113	@ 0x71
 8002220:	2206      	movs	r2, #6
 8002222:	49b2      	ldr	r1, [pc, #712]	@ (80024ec <prv_parse_term+0x2f8>)
 8002224:	4618      	mov	r0, r3
 8002226:	f006 fb02 	bl	800882e <strncmp>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d104      	bne.n	800223a <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8002238:	e04e      	b.n	80022d8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3371      	adds	r3, #113	@ 0x71
 800223e:	2206      	movs	r2, #6
 8002240:	49ab      	ldr	r1, [pc, #684]	@ (80024f0 <prv_parse_term+0x2fc>)
 8002242:	4618      	mov	r0, r3
 8002244:	f006 faf3 	bl	800882e <strncmp>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <prv_parse_term+0x6e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3371      	adds	r3, #113	@ 0x71
 8002252:	2206      	movs	r2, #6
 8002254:	49a7      	ldr	r1, [pc, #668]	@ (80024f4 <prv_parse_term+0x300>)
 8002256:	4618      	mov	r0, r3
 8002258:	f006 fae9 	bl	800882e <strncmp>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d104      	bne.n	800226c <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800226a:	e035      	b.n	80022d8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3371      	adds	r3, #113	@ 0x71
 8002270:	2206      	movs	r2, #6
 8002272:	49a1      	ldr	r1, [pc, #644]	@ (80024f8 <prv_parse_term+0x304>)
 8002274:	4618      	mov	r0, r3
 8002276:	f006 fada 	bl	800882e <strncmp>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <prv_parse_term+0xa0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3371      	adds	r3, #113	@ 0x71
 8002284:	2206      	movs	r2, #6
 8002286:	499d      	ldr	r1, [pc, #628]	@ (80024fc <prv_parse_term+0x308>)
 8002288:	4618      	mov	r0, r3
 800228a:	f006 fad0 	bl	800882e <strncmp>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d104      	bne.n	800229e <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2203      	movs	r2, #3
 8002298:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800229c:	e01c      	b.n	80022d8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3371      	adds	r3, #113	@ 0x71
 80022a2:	2206      	movs	r2, #6
 80022a4:	4996      	ldr	r1, [pc, #600]	@ (8002500 <prv_parse_term+0x30c>)
 80022a6:	4618      	mov	r0, r3
 80022a8:	f006 fac1 	bl	800882e <strncmp>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <prv_parse_term+0xd2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3371      	adds	r3, #113	@ 0x71
 80022b6:	2206      	movs	r2, #6
 80022b8:	4992      	ldr	r1, [pc, #584]	@ (8002504 <prv_parse_term+0x310>)
 80022ba:	4618      	mov	r0, r3
 80022bc:	f006 fab7 	bl	800882e <strncmp>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d104      	bne.n	80022d0 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2204      	movs	r2, #4
 80022ca:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80022ce:	e003      	b.n	80022d8 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 80022d8:	2301      	movs	r3, #1
 80022da:	e21d      	b.n	8002718 <prv_parse_term+0x524>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80022e2:	2900      	cmp	r1, #0
 80022e4:	f000 8217 	beq.w	8002716 <prv_parse_term+0x522>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) { /* Process GPGGA statement */
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80022ee:	2901      	cmp	r1, #1
 80022f0:	f040 80c1 	bne.w	8002476 <prv_parse_term+0x282>
        switch (gh->p.term_num) {
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80022fa:	3b01      	subs	r3, #1
 80022fc:	2b0a      	cmp	r3, #10
 80022fe:	f200 81ff 	bhi.w	8002700 <prv_parse_term+0x50c>
 8002302:	a201      	add	r2, pc, #4	@ (adr r2, 8002308 <prv_parse_term+0x114>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	08002335 	.word	0x08002335
 800230c:	080023af 	.word	0x080023af
 8002310:	080023c1 	.word	0x080023c1
 8002314:	080023eb 	.word	0x080023eb
 8002318:	080023fd 	.word	0x080023fd
 800231c:	08002427 	.word	0x08002427
 8002320:	0800243b 	.word	0x0800243b
 8002324:	08002701 	.word	0x08002701
 8002328:	0800244f 	.word	0x0800244f
 800232c:	08002701 	.word	0x08002701
 8002330:	08002463 	.word	0x08002463
            case 1: /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800233a:	3b30      	subs	r3, #48	@ 0x30
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	0092      	lsls	r2, r2, #2
 8002342:	4413      	add	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	b2da      	uxtb	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800234e:	4413      	add	r3, r2
 8002350:	b2db      	uxtb	r3, r3
 8002352:	3b30      	subs	r3, #48	@ 0x30
 8002354:	b2da      	uxtb	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8002362:	3b30      	subs	r3, #48	@ 0x30
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	0092      	lsls	r2, r2, #2
 800236a:	4413      	add	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002376:	4413      	add	r3, r2
 8002378:	b2db      	uxtb	r3, r3
 800237a:	3b30      	subs	r3, #48	@ 0x30
 800237c:	b2da      	uxtb	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800238a:	3b30      	subs	r3, #48	@ 0x30
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	0092      	lsls	r2, r2, #2
 8002392:	4413      	add	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 800239e:	4413      	add	r3, r2
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	3b30      	subs	r3, #48	@ 0x30
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 80023ac:	e1b3      	b.n	8002716 <prv_parse_term+0x522>
            case 2:                                               /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh); /* Parse latitude */
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fed4 	bl	800215c <prv_parse_lat_long>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
                break;
 80023be:	e1aa      	b.n	8002716 <prv_parse_term+0x522>
            case 3: /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80023c6:	2b53      	cmp	r3, #83	@ 0x53
 80023c8:	d005      	beq.n	80023d6 <prv_parse_term+0x1e2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80023d0:	2b73      	cmp	r3, #115	@ 0x73
 80023d2:	f040 8197 	bne.w	8002704 <prv_parse_term+0x510>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80023dc:	4690      	mov	r8, r2
 80023de:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 80023e8:	e18c      	b.n	8002704 <prv_parse_term+0x510>
            case 4:                                                /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh); /* Parse longitude */
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff feb6 	bl	800215c <prv_parse_lat_long>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
                break;
 80023fa:	e18c      	b.n	8002716 <prv_parse_term+0x522>
            case 5: /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002402:	2b57      	cmp	r3, #87	@ 0x57
 8002404:	d005      	beq.n	8002412 <prv_parse_term+0x21e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800240c:	2b77      	cmp	r3, #119	@ 0x77
 800240e:	f040 817b 	bne.w	8002708 <prv_parse_term+0x514>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002418:	4614      	mov	r4, r2
 800241a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 8002424:	e170      	b.n	8002708 <prv_parse_term+0x514>
            case 6: /* Fix status */ gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL); break;
 8002426:	2100      	movs	r1, #0
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff fda5 	bl	8001f78 <prv_parse_number>
 800242e:	4603      	mov	r3, r0
 8002430:	b2da      	uxtb	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
 8002438:	e16d      	b.n	8002716 <prv_parse_term+0x522>
            case 7: /* Satellites in use */ gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL); break;
 800243a:	2100      	movs	r1, #0
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fd9b 	bl	8001f78 <prv_parse_number>
 8002442:	4603      	mov	r3, r0
 8002444:	b2da      	uxtb	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
 800244c:	e163      	b.n	8002716 <prv_parse_term+0x522>
            case 9: /* Altitude */ gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL); break;
 800244e:	2100      	movs	r1, #0
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff fddb 	bl	800200c <prv_parse_float_number>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
 8002460:	e159      	b.n	8002716 <prv_parse_term+0x522>
            case 11: /* Altitude above ellipsoid */ gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL); break;
 8002462:	2100      	movs	r1, #0
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff fdd1 	bl	800200c <prv_parse_float_number>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
 8002474:	e14f      	b.n	8002716 <prv_parse_term+0x522>
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) { /* Process GPGSA statement */
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 800247c:	2902      	cmp	r1, #2
 800247e:	d17d      	bne.n	800257c <prv_parse_term+0x388>
        switch (gh->p.term_num) {
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002486:	3b02      	subs	r3, #2
 8002488:	2b0f      	cmp	r3, #15
 800248a:	d85b      	bhi.n	8002544 <prv_parse_term+0x350>
 800248c:	a201      	add	r2, pc, #4	@ (adr r2, 8002494 <prv_parse_term+0x2a0>)
 800248e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002492:	bf00      	nop
 8002494:	080024d5 	.word	0x080024d5
 8002498:	08002545 	.word	0x08002545
 800249c:	08002545 	.word	0x08002545
 80024a0:	08002545 	.word	0x08002545
 80024a4:	08002545 	.word	0x08002545
 80024a8:	08002545 	.word	0x08002545
 80024ac:	08002545 	.word	0x08002545
 80024b0:	08002545 	.word	0x08002545
 80024b4:	08002545 	.word	0x08002545
 80024b8:	08002545 	.word	0x08002545
 80024bc:	08002545 	.word	0x08002545
 80024c0:	08002545 	.word	0x08002545
 80024c4:	08002545 	.word	0x08002545
 80024c8:	08002509 	.word	0x08002509
 80024cc:	0800251d 	.word	0x0800251d
 80024d0:	08002531 	.word	0x08002531
            case 2: /* Process fix mode */ gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL); break;
 80024d4:	2100      	movs	r1, #0
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fd4e 	bl	8001f78 <prv_parse_number>
 80024dc:	4603      	mov	r3, r0
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 80024e6:	e116      	b.n	8002716 <prv_parse_term+0x522>
 80024e8:	0800b698 	.word	0x0800b698
 80024ec:	0800b6a0 	.word	0x0800b6a0
 80024f0:	0800b6a8 	.word	0x0800b6a8
 80024f4:	0800b6b0 	.word	0x0800b6b0
 80024f8:	0800b6b8 	.word	0x0800b6b8
 80024fc:	0800b6c0 	.word	0x0800b6c0
 8002500:	0800b6c8 	.word	0x0800b6c8
 8002504:	0800b6d0 	.word	0x0800b6d0
            case 15: /* Process PDOP */ gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL); break;
 8002508:	2100      	movs	r1, #0
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff fd7e 	bl	800200c <prv_parse_float_number>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
 800251a:	e0fc      	b.n	8002716 <prv_parse_term+0x522>
            case 16: /* Process HDOP */ gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL); break;
 800251c:	2100      	movs	r1, #0
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fd74 	bl	800200c <prv_parse_float_number>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
 800252e:	e0f2      	b.n	8002716 <prv_parse_term+0x522>
            case 17: /* Process VDOP */ gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL); break;
 8002530:	2100      	movs	r1, #0
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff fd6a 	bl	800200c <prv_parse_float_number>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
 8002542:	e0e8      	b.n	8002716 <prv_parse_term+0x522>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800254a:	2b02      	cmp	r3, #2
 800254c:	f240 80de 	bls.w	800270c <prv_parse_term+0x518>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002556:	2b0e      	cmp	r3, #14
 8002558:	f200 80d8 	bhi.w	800270c <prv_parse_term+0x518>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800255c:	2100      	movs	r1, #0
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff fd0a 	bl	8001f78 <prv_parse_number>
 8002564:	4602      	mov	r2, r0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800256c:	3b03      	subs	r3, #3
 800256e:	b2d1      	uxtb	r1, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	460a      	mov	r2, r1
 8002576:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 800257a:	e0c7      	b.n	800270c <prv_parse_term+0x518>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) { /* Process GPGSV statement */
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8002582:	2903      	cmp	r1, #3
 8002584:	d11b      	bne.n	80025be <prv_parse_term+0x3ca>
        switch (gh->p.term_num) {
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800258c:	2b02      	cmp	r3, #2
 800258e:	d002      	beq.n	8002596 <prv_parse_term+0x3a2>
 8002590:	2b03      	cmp	r3, #3
 8002592:	d00a      	beq.n	80025aa <prv_parse_term+0x3b6>
                            default: break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8002594:	e0bf      	b.n	8002716 <prv_parse_term+0x522>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8002596:	2100      	movs	r1, #0
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff fced 	bl	8001f78 <prv_parse_number>
 800259e:	4603      	mov	r3, r0
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 80025a8:	e0b5      	b.n	8002716 <prv_parse_term+0x522>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80025aa:	2100      	movs	r1, #0
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff fce3 	bl	8001f78 <prv_parse_number>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 80025bc:	e0ab      	b.n	8002716 <prv_parse_term+0x522>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) { /* Process GPRMC statement */
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80025c4:	2904      	cmp	r1, #4
 80025c6:	f040 80a6 	bne.w	8002716 <prv_parse_term+0x522>
        switch (gh->p.term_num) {
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80025d0:	3902      	subs	r1, #2
 80025d2:	2909      	cmp	r1, #9
 80025d4:	f200 809c 	bhi.w	8002710 <prv_parse_term+0x51c>
 80025d8:	a001      	add	r0, pc, #4	@ (adr r0, 80025e0 <prv_parse_term+0x3ec>)
 80025da:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80025de:	bf00      	nop
 80025e0:	08002609 	.word	0x08002609
 80025e4:	08002711 	.word	0x08002711
 80025e8:	08002711 	.word	0x08002711
 80025ec:	08002711 	.word	0x08002711
 80025f0:	08002711 	.word	0x08002711
 80025f4:	08002623 	.word	0x08002623
 80025f8:	08002637 	.word	0x08002637
 80025fc:	0800264b 	.word	0x0800264b
 8002600:	080026c5 	.word	0x080026c5
 8002604:	080026d9 	.word	0x080026d9
            case 2: /* Process valid status */ gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A'); break;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800260e:	2b41      	cmp	r3, #65	@ 0x41
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
 8002620:	e079      	b.n	8002716 <prv_parse_term+0x522>
            case 7: /* Process ground speed in knots */ gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL); break;
 8002622:	2100      	movs	r1, #0
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff fcf1 	bl	800200c <prv_parse_float_number>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
 8002634:	e06f      	b.n	8002716 <prv_parse_term+0x522>
            case 8: /* Process true ground coarse */ gh->p.data.rmc.course = prv_parse_float_number(gh, NULL); break;
 8002636:	2100      	movs	r1, #0
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff fce7 	bl	800200c <prv_parse_float_number>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
 8002648:	e065      	b.n	8002716 <prv_parse_term+0x522>
            case 9: /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002650:	3b30      	subs	r3, #48	@ 0x30
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	4413      	add	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	b2da      	uxtb	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8002664:	4413      	add	r3, r2
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3b30      	subs	r3, #48	@ 0x30
 800266a:	b2da      	uxtb	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8002678:	3b30      	subs	r3, #48	@ 0x30
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	4413      	add	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	b2da      	uxtb	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800268c:	4413      	add	r3, r2
 800268e:	b2db      	uxtb	r3, r3
 8002690:	3b30      	subs	r3, #48	@ 0x30
 8002692:	b2da      	uxtb	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80026a0:	3b30      	subs	r3, #48	@ 0x30
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	0092      	lsls	r2, r2, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80026b4:	4413      	add	r3, r2
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	3b30      	subs	r3, #48	@ 0x30
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 80026c2:	e028      	b.n	8002716 <prv_parse_term+0x522>
            case 10: /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80026c4:	2100      	movs	r1, #0
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff fca0 	bl	800200c <prv_parse_float_number>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                break;
 80026d6:	e01e      	b.n	8002716 <prv_parse_term+0x522>
            case 11: /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80026de:	2957      	cmp	r1, #87	@ 0x57
 80026e0:	d004      	beq.n	80026ec <prv_parse_term+0x4f8>
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80026e8:	2977      	cmp	r1, #119	@ 0x77
 80026ea:	d113      	bne.n	8002714 <prv_parse_term+0x520>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 80026f2:	4602      	mov	r2, r0
 80026f4:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 80026fe:	e009      	b.n	8002714 <prv_parse_term+0x520>
            default: break;
 8002700:	bf00      	nop
 8002702:	e008      	b.n	8002716 <prv_parse_term+0x522>
                break;
 8002704:	bf00      	nop
 8002706:	e006      	b.n	8002716 <prv_parse_term+0x522>
                break;
 8002708:	bf00      	nop
 800270a:	e004      	b.n	8002716 <prv_parse_term+0x522>
                break;
 800270c:	bf00      	nop
 800270e:	e002      	b.n	8002716 <prv_parse_term+0x522>
            default: break;
 8002710:	bf00      	nop
 8002712:	e000      	b.n	8002716 <prv_parse_term+0x522>
                break;
 8002714:	bf00      	nop
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8002716:	2301      	movs	r3, #1
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002722:	bf00      	nop

08002724 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8002732:	2b2f      	cmp	r3, #47	@ 0x2f
 8002734:	d90d      	bls.n	8002752 <prv_check_crc+0x2e>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800273c:	2b39      	cmp	r3, #57	@ 0x39
 800273e:	d808      	bhi.n	8002752 <prv_check_crc+0x2e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002746:	3b30      	subs	r3, #48	@ 0x30
 8002748:	b2db      	uxtb	r3, r3
 800274a:	b25b      	sxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	b25a      	sxtb	r2, r3
 8002750:	e026      	b.n	80027a0 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8002758:	2b60      	cmp	r3, #96	@ 0x60
 800275a:	d90d      	bls.n	8002778 <prv_check_crc+0x54>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002762:	2b7a      	cmp	r3, #122	@ 0x7a
 8002764:	d808      	bhi.n	8002778 <prv_check_crc+0x54>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800276c:	3b57      	subs	r3, #87	@ 0x57
 800276e:	b2db      	uxtb	r3, r3
 8002770:	b25b      	sxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	b25a      	sxtb	r2, r3
 8002776:	e013      	b.n	80027a0 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 800277e:	2b40      	cmp	r3, #64	@ 0x40
 8002780:	d90d      	bls.n	800279e <prv_check_crc+0x7a>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002788:	2b5a      	cmp	r3, #90	@ 0x5a
 800278a:	d808      	bhi.n	800279e <prv_check_crc+0x7a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8002792:	3b37      	subs	r3, #55	@ 0x37
 8002794:	b2db      	uxtb	r3, r3
 8002796:	b25b      	sxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	b25a      	sxtb	r2, r3
 800279c:	e000      	b.n	80027a0 <prv_check_crc+0x7c>
 800279e:	2200      	movs	r2, #0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80027a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80027a8:	d90c      	bls.n	80027c4 <prv_check_crc+0xa0>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80027b0:	2b39      	cmp	r3, #57	@ 0x39
 80027b2:	d807      	bhi.n	80027c4 <prv_check_crc+0xa0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	e028      	b.n	8002816 <prv_check_crc+0xf2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80027ca:	2b60      	cmp	r3, #96	@ 0x60
 80027cc:	d90e      	bls.n	80027ec <prv_check_crc+0xc8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80027d4:	2b7a      	cmp	r3, #122	@ 0x7a
 80027d6:	d809      	bhi.n	80027ec <prv_check_crc+0xc8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80027de:	3b57      	subs	r3, #87	@ 0x57
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	b25b      	sxtb	r3, r3
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	b25b      	sxtb	r3, r3
 80027ea:	e014      	b.n	8002816 <prv_check_crc+0xf2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80027f2:	2b40      	cmp	r3, #64	@ 0x40
 80027f4:	d90e      	bls.n	8002814 <prv_check_crc+0xf0>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80027fc:	2b5a      	cmp	r3, #90	@ 0x5a
 80027fe:	d809      	bhi.n	8002814 <prv_check_crc+0xf0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8002806:	3b37      	subs	r3, #55	@ 0x37
 8002808:	b2db      	uxtb	r3, r3
 800280a:	b25b      	sxtb	r3, r3
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	b25b      	sxtb	r3, r3
 8002812:	e000      	b.n	8002816 <prv_check_crc+0xf2>
 8002814:	2300      	movs	r3, #0
 8002816:	4313      	orrs	r3, r2
 8002818:	b25b      	sxtb	r3, r3
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 800281a:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;             /* They must match! */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	429a      	cmp	r2, r3
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002846:	2b01      	cmp	r3, #1
 8002848:	d136      	bne.n	80028b8 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80028b6:	e061      	b.n	800297c <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d121      	bne.n	8002906 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	33a1      	adds	r3, #161	@ 0xa1
 80028fc:	220c      	movs	r2, #12
 80028fe:	4619      	mov	r1, r3
 8002900:	f006 f82d 	bl	800895e <memcpy>
 8002904:	e03a      	b.n	800297c <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800290c:	2b03      	cmp	r3, #3
 800290e:	d106      	bne.n	800291e <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800291c:	e02e      	b.n	800297c <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8002924:	2b04      	cmp	r3, #4
 8002926:	d129      	bne.n	800297c <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800297c:	2301      	movs	r3, #1
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh)); /* Reset structure */
 800298e:	22b0      	movs	r2, #176	@ 0xb0
 8002990:	2100      	movs	r1, #0
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f005 ff43 	bl	800881e <memset>
    return 1;
 8002998:	2301      	movs	r3, #1
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                /* Process all bytes */
 80029b2:	e0ad      	b.n	8002b10 <lwgps_process+0x16e>
        if (*d == '$') {                         /* Check for beginning of NMEA line */
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b24      	cmp	r3, #36	@ 0x24
 80029ba:	d128      	bne.n	8002a0e <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p)); /* Reset private memory */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3370      	adds	r3, #112	@ 0x70
 80029c0:	2240      	movs	r2, #64	@ 0x40
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f005 ff2a 	bl	800881e <memset>
            TERM_ADD(gh, *d);                    /* Add character to term */
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80029d0:	2b0b      	cmp	r3, #11
 80029d2:	f200 8097 	bhi.w	8002b04 <lwgps_process+0x162>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80029dc:	4619      	mov	r1, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	781a      	ldrb	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	440b      	add	r3, r1
 80029e6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80029f0:	3301      	adds	r3, #1
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8002a00:	461a      	mov	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4413      	add	r3, r2
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8002a0c:	e07a      	b.n	8002b04 <lwgps_process+0x162>
        } else if (*d == ',') {                  /* Term separator character */
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b2c      	cmp	r3, #44	@ 0x2c
 8002a14:	d11d      	bne.n	8002a52 <lwgps_process+0xb0>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f7ff fbec 	bl	80021f4 <prv_parse_term>
            CRC_ADD(gh, *d);                     /* Add character to CRC computation */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	4053      	eors	r3, r2
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                       /* Start with next term */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002a46:	3301      	adds	r3, #1
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8002a50:	e058      	b.n	8002b04 <lwgps_process+0x162>
        } else if (*d == '*') {                  /* Start indicates end of data for CRC computation */
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a58:	d117      	bne.n	8002a8a <lwgps_process+0xe8>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7ff fbca 	bl	80021f4 <prv_parse_term>
            gh->p.star = 1;                      /* STAR detected */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                       /* Start with next term */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8002a7e:	3301      	adds	r3, #1
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8002a88:	e03c      	b.n	8002b04 <lwgps_process+0x162>
        } else if (*d == '\r') {
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b0d      	cmp	r3, #13
 8002a90:	d109      	bne.n	8002aa6 <lwgps_process+0x104>
            if (prv_check_crc(gh)) { /* Check for CRC result */
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff fe46 	bl	8002724 <prv_check_crc>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d032      	beq.n	8002b04 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh); /* Copy memory from temporary to user memory */
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff feca 	bl	8002838 <prv_copy_from_tmp_memory>
 8002aa4:	e02e      	b.n	8002b04 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {   /* Add to CRC only if star not yet detected */
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <lwgps_process+0x122>
                CRC_ADD(gh, *d); /* Add to CRC */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	4053      	eors	r3, r2
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d); /* Add character to term */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8002aca:	2b0b      	cmp	r3, #11
 8002acc:	d81a      	bhi.n	8002b04 <lwgps_process+0x162>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	781a      	ldrb	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	440b      	add	r3, r1
 8002ade:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8002af8:	461a      	mov	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4413      	add	r3, r2
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {                /* Process all bytes */
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	3301      	adds	r3, #1
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f47f af4e 	bne.w	80029b4 <lwgps_process+0x12>
        }
    }
    return 1;
 8002b18:	2301      	movs	r3, #1
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <float_to_big_endian_bytes>:
void mpu9250_read_data(uint8_t reg, uint8_t *data, uint8_t len);

/**
 * @brief Send a 32-byte binary data package over UART1: altitude, pressure, accel x/y/z, orientation x/y/z (all float, 4 bytes each)
 */
void float_to_big_endian_bytes(float value, uint8_t *buf) {
 8002b22:	b480      	push	{r7}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
    uint8_t *p = (uint8_t*)&value;
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	60fb      	str	r3, [r7, #12]
    buf[0] = p[3];
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	78da      	ldrb	r2, [r3, #3]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	701a      	strb	r2, [r3, #0]
    buf[1] = p[2];
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	7892      	ldrb	r2, [r2, #2]
 8002b40:	701a      	strb	r2, [r3, #0]
    buf[2] = p[1];
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	3302      	adds	r3, #2
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	7852      	ldrb	r2, [r2, #1]
 8002b4a:	701a      	strb	r2, [r3, #0]
    buf[3] = p[0];
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	3303      	adds	r3, #3
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	7812      	ldrb	r2, [r2, #0]
 8002b54:	701a      	strb	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <big_endian_bytes_to_float>:

float big_endian_bytes_to_float(uint8_t *bytes) {
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
    uint32_t temp = (bytes[0] << 24) |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	061a      	lsls	r2, r3, #24
                    (bytes[1] << 16) |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3301      	adds	r3, #1
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	041b      	lsls	r3, r3, #16
    uint32_t temp = (bytes[0] << 24) |
 8002b76:	431a      	orrs	r2, r3
                    (bytes[2] << 8)  |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	021b      	lsls	r3, r3, #8
                    (bytes[1] << 16) |
 8002b80:	4313      	orrs	r3, r2
                    (bytes[3]);
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	3203      	adds	r2, #3
 8002b86:	7812      	ldrb	r2, [r2, #0]
                    (bytes[2] << 8)  |
 8002b88:	4313      	orrs	r3, r2
    uint32_t temp = (bytes[0] << 24) |
 8002b8a:	60fb      	str	r3, [r7, #12]
    float result;
    memcpy(&result, &temp, sizeof(result));
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	60bb      	str	r3, [r7, #8]
    return result;
 8002b90:	68bb      	ldr	r3, [r7, #8]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <send_uart1_data_package>:

void send_uart1_data_package(float altitude, float pressure,
                             float acc_x, float acc_y, float acc_z,
                             float ori_x, float ori_y, float ori_z) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b090      	sub	sp, #64	@ 0x40
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
    uint8_t packet[36];
    int i = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	637b      	str	r3, [r7, #52]	@ 0x34

    packet[i++] = 0xAB;
 8002bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	637a      	str	r2, [r7, #52]	@ 0x34
 8002bb4:	3340      	adds	r3, #64	@ 0x40
 8002bb6:	443b      	add	r3, r7
 8002bb8:	22ab      	movs	r2, #171	@ 0xab
 8002bba:	f803 2c30 	strb.w	r2, [r3, #-48]

    float_to_big_endian_bytes(altitude,  &packet[i]); i += 4;
 8002bbe:	f107 0210 	add.w	r2, r7, #16
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc4:	4413      	add	r3, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f7ff ffaa 	bl	8002b22 <float_to_big_endian_bytes>
 8002bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
    float_to_big_endian_bytes(pressure,  &packet[i]); i += 4;
 8002bd4:	f107 0210 	add.w	r2, r7, #16
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bda:	4413      	add	r3, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	68b8      	ldr	r0, [r7, #8]
 8002be0:	f7ff ff9f 	bl	8002b22 <float_to_big_endian_bytes>
 8002be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be6:	3304      	adds	r3, #4
 8002be8:	637b      	str	r3, [r7, #52]	@ 0x34
    float_to_big_endian_bytes(acc_x,     &packet[i]); i += 4;
 8002bea:	f107 0210 	add.w	r2, r7, #16
 8002bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff94 	bl	8002b22 <float_to_big_endian_bytes>
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	637b      	str	r3, [r7, #52]	@ 0x34
    float_to_big_endian_bytes(acc_y,     &packet[i]); i += 4;
 8002c00:	f107 0210 	add.w	r2, r7, #16
 8002c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c06:	4413      	add	r3, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	6838      	ldr	r0, [r7, #0]
 8002c0c:	f7ff ff89 	bl	8002b22 <float_to_big_endian_bytes>
 8002c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c12:	3304      	adds	r3, #4
 8002c14:	637b      	str	r3, [r7, #52]	@ 0x34
    float_to_big_endian_bytes(acc_z,     &packet[i]); i += 4;
 8002c16:	f107 0210 	add.w	r2, r7, #16
 8002c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002c22:	f7ff ff7e 	bl	8002b22 <float_to_big_endian_bytes>
 8002c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c28:	3304      	adds	r3, #4
 8002c2a:	637b      	str	r3, [r7, #52]	@ 0x34
    float_to_big_endian_bytes(ori_x,     &packet[i]); i += 4;
 8002c2c:	f107 0210 	add.w	r2, r7, #16
 8002c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c32:	4413      	add	r3, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002c38:	f7ff ff73 	bl	8002b22 <float_to_big_endian_bytes>
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c3e:	3304      	adds	r3, #4
 8002c40:	637b      	str	r3, [r7, #52]	@ 0x34
    float_to_big_endian_bytes(ori_y,     &packet[i]); i += 4;
 8002c42:	f107 0210 	add.w	r2, r7, #16
 8002c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c48:	4413      	add	r3, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002c4e:	f7ff ff68 	bl	8002b22 <float_to_big_endian_bytes>
 8002c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c54:	3304      	adds	r3, #4
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
    float_to_big_endian_bytes(ori_z,     &packet[i]); i += 4;
 8002c58:	f107 0210 	add.w	r2, r7, #16
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5e:	4413      	add	r3, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002c64:	f7ff ff5d 	bl	8002b22 <float_to_big_endian_bytes>
 8002c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	637b      	str	r3, [r7, #52]	@ 0x34

    // Checksum: sum of bytes 0 to 32 (mod 256)
    uint16_t sum = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    for (int j = 0; j < 33; ++j) {  // Düzeltme: 0-32 arası checksum
 8002c72:	2300      	movs	r3, #0
 8002c74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c76:	e00b      	b.n	8002c90 <send_uart1_data_package+0xf4>
        sum += packet[j];
 8002c78:	f107 0210 	add.w	r2, r7, #16
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7e:	4413      	add	r3, r2
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002c86:	4413      	add	r3, r2
 8002c88:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    for (int j = 0; j < 33; ++j) {  // Düzeltme: 0-32 arası checksum
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	ddf0      	ble.n	8002c78 <send_uart1_data_package+0xdc>
    }
    packet[i++] = sum % 256;
 8002c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	637a      	str	r2, [r7, #52]	@ 0x34
 8002c9c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	3340      	adds	r3, #64	@ 0x40
 8002ca2:	443b      	add	r3, r7
 8002ca4:	f803 2c30 	strb.w	r2, [r3, #-48]

    packet[i++] = 0x0D;
 8002ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	637a      	str	r2, [r7, #52]	@ 0x34
 8002cae:	3340      	adds	r3, #64	@ 0x40
 8002cb0:	443b      	add	r3, r7
 8002cb2:	220d      	movs	r2, #13
 8002cb4:	f803 2c30 	strb.w	r2, [r3, #-48]
    packet[i++] = 0x0A;
 8002cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	637a      	str	r2, [r7, #52]	@ 0x34
 8002cbe:	3340      	adds	r3, #64	@ 0x40
 8002cc0:	443b      	add	r3, r7
 8002cc2:	220a      	movs	r2, #10
 8002cc4:	f803 2c30 	strb.w	r2, [r3, #-48]

    HAL_UART_Transmit(&huart1, packet, 36, HAL_MAX_DELAY);
 8002cc8:	f107 0110 	add.w	r1, r7, #16
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	2224      	movs	r2, #36	@ 0x24
 8002cd2:	4803      	ldr	r0, [pc, #12]	@ (8002ce0 <send_uart1_data_package+0x144>)
 8002cd4:	f004 fa07 	bl	80070e6 <HAL_UART_Transmit>
}
 8002cd8:	bf00      	nop
 8002cda:	3740      	adds	r7, #64	@ 0x40
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200002d4 	.word	0x200002d4

08002ce4 <receive_uart1_data_package>:

void receive_uart1_data_package (float *altitude, float *pressure,
                             float *acc_x, float *acc_y, float *acc_z,
                             float *ori_x, float *ori_y, float *ori_z){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	603b      	str	r3, [r7, #0]



		HAL_UART_Receive_IT(&huart1,sut_packet, 34);
 8002cf2:	2222      	movs	r2, #34	@ 0x22
 8002cf4:	4950      	ldr	r1, [pc, #320]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002cf6:	4851      	ldr	r0, [pc, #324]	@ (8002e3c <receive_uart1_data_package+0x158>)
 8002cf8:	f004 fa80 	bl	80071fc <HAL_UART_Receive_IT>
	    // 1. Header kontrolü
		int i = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
	    if (sut_packet[i++] != 0xAB) return; // Geçersiz paket
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	617a      	str	r2, [r7, #20]
 8002d06:	4a4c      	ldr	r2, [pc, #304]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002d08:	5cd3      	ldrb	r3, [r2, r3]
 8002d0a:	2bab      	cmp	r3, #171	@ 0xab
 8002d0c:	f040 808e 	bne.w	8002e2c <receive_uart1_data_package+0x148>

	    // 2. Altitude
	    *altitude = big_endian_bytes_to_float(&sut_packet[i]);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	4a49      	ldr	r2, [pc, #292]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002d14:	4413      	add	r3, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff22 	bl	8002b60 <big_endian_bytes_to_float>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	601a      	str	r2, [r3, #0]
	    i += 4;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	3304      	adds	r3, #4
 8002d26:	617b      	str	r3, [r7, #20]

	    // 3. Pressure
	    *pressure = big_endian_bytes_to_float(&sut_packet[i]);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	4a43      	ldr	r2, [pc, #268]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ff16 	bl	8002b60 <big_endian_bytes_to_float>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	601a      	str	r2, [r3, #0]
	    i += 4;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	617b      	str	r3, [r7, #20]

	    *acc_x = big_endian_bytes_to_float(&sut_packet[i]);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	4a3d      	ldr	r2, [pc, #244]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002d44:	4413      	add	r3, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ff0a 	bl	8002b60 <big_endian_bytes_to_float>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	601a      	str	r2, [r3, #0]
	    i += 4;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	3304      	adds	r3, #4
 8002d56:	617b      	str	r3, [r7, #20]
	    *acc_y = big_endian_bytes_to_float(&sut_packet[i]);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	4a37      	ldr	r2, [pc, #220]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fefe 	bl	8002b60 <big_endian_bytes_to_float>
 8002d64:	4602      	mov	r2, r0
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	601a      	str	r2, [r3, #0]
	    i += 4;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	617b      	str	r3, [r7, #20]
	    *acc_z = big_endian_bytes_to_float(&sut_packet[i]);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	4a31      	ldr	r2, [pc, #196]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002d74:	4413      	add	r3, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fef2 	bl	8002b60 <big_endian_bytes_to_float>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d80:	601a      	str	r2, [r3, #0]
	    i += 4;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	3304      	adds	r3, #4
 8002d86:	617b      	str	r3, [r7, #20]
	    *ori_x = big_endian_bytes_to_float(&sut_packet[i]);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	4a2b      	ldr	r2, [pc, #172]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fee6 	bl	8002b60 <big_endian_bytes_to_float>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d98:	601a      	str	r2, [r3, #0]
	    i += 4;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	617b      	str	r3, [r7, #20]
	    *ori_y = big_endian_bytes_to_float(&sut_packet[i]);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	4a25      	ldr	r2, [pc, #148]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002da4:	4413      	add	r3, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff feda 	bl	8002b60 <big_endian_bytes_to_float>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db0:	601a      	str	r2, [r3, #0]
	    i += 4;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	3304      	adds	r3, #4
 8002db6:	617b      	str	r3, [r7, #20]
	    *ori_z = big_endian_bytes_to_float(&sut_packet[i]);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	4a1f      	ldr	r2, [pc, #124]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fece 	bl	8002b60 <big_endian_bytes_to_float>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc8:	601a      	str	r2, [r3, #0]
	    i += 4;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	617b      	str	r3, [r7, #20]

	    // 10. Checksum kontrolü
	    uint8_t checksum = sut_packet[i++];
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	617a      	str	r2, [r7, #20]
 8002dd6:	4a18      	ldr	r2, [pc, #96]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002dd8:	5cd3      	ldrb	r3, [r2, r3]
 8002dda:	74fb      	strb	r3, [r7, #19]
	    uint8_t footer1 = sut_packet[i++];
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	617a      	str	r2, [r7, #20]
 8002de2:	4a15      	ldr	r2, [pc, #84]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002de4:	5cd3      	ldrb	r3, [r2, r3]
 8002de6:	74bb      	strb	r3, [r7, #18]
	    uint8_t footer2 = sut_packet[i++];
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	617a      	str	r2, [r7, #20]
 8002dee:	4a12      	ldr	r2, [pc, #72]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002df0:	5cd3      	ldrb	r3, [r2, r3]
 8002df2:	747b      	strb	r3, [r7, #17]
	    // Footer kontrolü
	    if (footer1 != 0x0D || footer2 != 0x0A) return;
 8002df4:	7cbb      	ldrb	r3, [r7, #18]
 8002df6:	2b0d      	cmp	r3, #13
 8002df8:	d11a      	bne.n	8002e30 <receive_uart1_data_package+0x14c>
 8002dfa:	7c7b      	ldrb	r3, [r7, #17]
 8002dfc:	2b0a      	cmp	r3, #10
 8002dfe:	d117      	bne.n	8002e30 <receive_uart1_data_package+0x14c>

	    // Checksum doğrulama
	    uint8_t calc_sum = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	77fb      	strb	r3, [r7, #31]
	    for (int j = 0; j < 33; j++) {
 8002e04:	2300      	movs	r3, #0
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	e009      	b.n	8002e1e <receive_uart1_data_package+0x13a>
	        calc_sum += sut_packet[j];
 8002e0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002e38 <receive_uart1_data_package+0x154>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	4413      	add	r3, r2
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	7ffb      	ldrb	r3, [r7, #31]
 8002e14:	4413      	add	r3, r2
 8002e16:	77fb      	strb	r3, [r7, #31]
	    for (int j = 0; j < 33; j++) {
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	ddf2      	ble.n	8002e0a <receive_uart1_data_package+0x126>
	    }
	    if (checksum != (calc_sum % 256)) return;
 8002e24:	7cfa      	ldrb	r2, [r7, #19]
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	e002      	b.n	8002e32 <receive_uart1_data_package+0x14e>
	    if (sut_packet[i++] != 0xAB) return; // Geçersiz paket
 8002e2c:	bf00      	nop
 8002e2e:	e000      	b.n	8002e32 <receive_uart1_data_package+0x14e>
	    if (footer1 != 0x0D || footer2 != 0x0A) return;
 8002e30:	bf00      	nop

}
 8002e32:	3720      	adds	r7, #32
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000500 	.word	0x20000500
 8002e3c:	200002d4 	.word	0x200002d4

08002e40 <roket_algoritma>:

void roket_algoritma(){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
	if(accel_z > 2){ 		//Kalkışta
 8002e44:	4b23      	ldr	r3, [pc, #140]	@ (8002ed4 <roket_algoritma+0x94>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe f935 	bl	80010bc <__aeabi_fcmpgt>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d100      	bne.n	8002e5a <roket_algoritma+0x1a>
		}
		if(parasut == 1 && altitude ){
			parasut = 2;
		}
	}
}
 8002e58:	e03a      	b.n	8002ed0 <roket_algoritma+0x90>
		HAL_Delay(5000);	// Burnout Süresi
 8002e5a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002e5e:	f001 fa63 	bl	8004328 <HAL_Delay>
		if((altitude > 500) && (accel_x < 20) && ((previous_altitude - altitude) > 3.0f) ){
 8002e62:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed8 <roket_algoritma+0x98>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	491d      	ldr	r1, [pc, #116]	@ (8002edc <roket_algoritma+0x9c>)
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe f927 	bl	80010bc <__aeabi_fcmpgt>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01b      	beq.n	8002eac <roket_algoritma+0x6c>
 8002e74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee0 <roket_algoritma+0xa0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	491a      	ldr	r1, [pc, #104]	@ (8002ee4 <roket_algoritma+0xa4>)
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe f900 	bl	8001080 <__aeabi_fcmplt>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d012      	beq.n	8002eac <roket_algoritma+0x6c>
 8002e86:	4b18      	ldr	r3, [pc, #96]	@ (8002ee8 <roket_algoritma+0xa8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a13      	ldr	r2, [pc, #76]	@ (8002ed8 <roket_algoritma+0x98>)
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fd fe4d 	bl	8000b30 <__aeabi_fsub>
 8002e96:	4603      	mov	r3, r0
 8002e98:	4914      	ldr	r1, [pc, #80]	@ (8002eec <roket_algoritma+0xac>)
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe f90e 	bl	80010bc <__aeabi_fcmpgt>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <roket_algoritma+0x6c>
			parasut = 1;
 8002ea6:	4b12      	ldr	r3, [pc, #72]	@ (8002ef0 <roket_algoritma+0xb0>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
		if(parasut == 1 && altitude ){
 8002eac:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <roket_algoritma+0xb0>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d10d      	bne.n	8002ed0 <roket_algoritma+0x90>
 8002eb4:	4b08      	ldr	r3, [pc, #32]	@ (8002ed8 <roket_algoritma+0x98>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f04f 0100 	mov.w	r1, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe f8d5 	bl	800106c <__aeabi_fcmpeq>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d000      	beq.n	8002eca <roket_algoritma+0x8a>
}
 8002ec8:	e002      	b.n	8002ed0 <roket_algoritma+0x90>
			parasut = 2;
 8002eca:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <roket_algoritma+0xb0>)
 8002ecc:	2202      	movs	r2, #2
 8002ece:	701a      	strb	r2, [r3, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000544 	.word	0x20000544
 8002ed8:	2000052c 	.word	0x2000052c
 8002edc:	43fa0000 	.word	0x43fa0000
 8002ee0:	2000053c 	.word	0x2000053c
 8002ee4:	41a00000 	.word	0x41a00000
 8002ee8:	200003bc 	.word	0x200003bc
 8002eec:	40400000 	.word	0x40400000
 8002ef0:	20000476 	.word	0x20000476

08002ef4 <HAL_UART_RxCpltCallback>:

/* UART IRQ Handlers ---------------------------------------------------------*/

/* UART Rx Complete Callback for GPS (USART2) --------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af04      	add	r7, sp, #16
 8002efa:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a4e      	ldr	r2, [pc, #312]	@ (8003038 <HAL_UART_RxCpltCallback+0x144>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d131      	bne.n	8002f68 <HAL_UART_RxCpltCallback+0x74>
        /* Re-arm reception */
        HAL_UART_Receive_IT(&huart2, &rx_data2, 1);
 8002f04:	2201      	movs	r2, #1
 8002f06:	494d      	ldr	r1, [pc, #308]	@ (800303c <HAL_UART_RxCpltCallback+0x148>)
 8002f08:	484b      	ldr	r0, [pc, #300]	@ (8003038 <HAL_UART_RxCpltCallback+0x144>)
 8002f0a:	f004 f977 	bl	80071fc <HAL_UART_Receive_IT>

        if (rx_data2 != '\n' && rx_index2 < sizeof(rx_buffer2) - 1) {
 8002f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800303c <HAL_UART_RxCpltCallback+0x148>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b0a      	cmp	r3, #10
 8002f14:	d014      	beq.n	8002f40 <HAL_UART_RxCpltCallback+0x4c>
 8002f16:	4b4a      	ldr	r3, [pc, #296]	@ (8003040 <HAL_UART_RxCpltCallback+0x14c>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b7e      	cmp	r3, #126	@ 0x7e
 8002f1c:	d810      	bhi.n	8002f40 <HAL_UART_RxCpltCallback+0x4c>
            rx_buffer2[rx_index2++] = rx_data2 ;
 8002f1e:	4b48      	ldr	r3, [pc, #288]	@ (8003040 <HAL_UART_RxCpltCallback+0x14c>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	b2d1      	uxtb	r1, r2
 8002f26:	4a46      	ldr	r2, [pc, #280]	@ (8003040 <HAL_UART_RxCpltCallback+0x14c>)
 8002f28:	7011      	strb	r1, [r2, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b43      	ldr	r3, [pc, #268]	@ (800303c <HAL_UART_RxCpltCallback+0x148>)
 8002f2e:	7819      	ldrb	r1, [r3, #0]
 8002f30:	4b44      	ldr	r3, [pc, #272]	@ (8003044 <HAL_UART_RxCpltCallback+0x150>)
 8002f32:	5499      	strb	r1, [r3, r2]
            gps_data_received_count++;
 8002f34:	4b44      	ldr	r3, [pc, #272]	@ (8003048 <HAL_UART_RxCpltCallback+0x154>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	4a43      	ldr	r2, [pc, #268]	@ (8003048 <HAL_UART_RxCpltCallback+0x154>)
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e013      	b.n	8002f68 <HAL_UART_RxCpltCallback+0x74>
        }
        else {
            if (rx_index2 > 0) {
 8002f40:	4b3f      	ldr	r3, [pc, #252]	@ (8003040 <HAL_UART_RxCpltCallback+0x14c>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00c      	beq.n	8002f62 <HAL_UART_RxCpltCallback+0x6e>
                rx_buffer2[rx_index2] = '\0';
 8002f48:	4b3d      	ldr	r3, [pc, #244]	@ (8003040 <HAL_UART_RxCpltCallback+0x14c>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8003044 <HAL_UART_RxCpltCallback+0x150>)
 8002f50:	2100      	movs	r1, #0
 8002f52:	5499      	strb	r1, [r3, r2]
                lwgps_process(&gps, rx_buffer2, rx_index2);
 8002f54:	4b3a      	ldr	r3, [pc, #232]	@ (8003040 <HAL_UART_RxCpltCallback+0x14c>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	493a      	ldr	r1, [pc, #232]	@ (8003044 <HAL_UART_RxCpltCallback+0x150>)
 8002f5c:	483b      	ldr	r0, [pc, #236]	@ (800304c <HAL_UART_RxCpltCallback+0x158>)
 8002f5e:	f7ff fd20 	bl	80029a2 <lwgps_process>
            }
            rx_index2 = 0;
 8002f62:	4b37      	ldr	r3, [pc, #220]	@ (8003040 <HAL_UART_RxCpltCallback+0x14c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
        }
    }

    if (huart->Instance == USART1) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a38      	ldr	r2, [pc, #224]	@ (8003050 <HAL_UART_RxCpltCallback+0x15c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d13d      	bne.n	8002fee <HAL_UART_RxCpltCallback+0xfa>
            // Paket kontrolü
            if (rx_buffer1[0] == 0xAA &&    // Header
 8002f72:	4b38      	ldr	r3, [pc, #224]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2baa      	cmp	r3, #170	@ 0xaa
 8002f78:	d113      	bne.n	8002fa2 <HAL_UART_RxCpltCallback+0xae>
                rx_buffer1[1] == 0x20 &&    // Command
 8002f7a:	4b36      	ldr	r3, [pc, #216]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8002f7c:	785b      	ldrb	r3, [r3, #1]
            if (rx_buffer1[0] == 0xAA &&    // Header
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d10f      	bne.n	8002fa2 <HAL_UART_RxCpltCallback+0xae>
                rx_buffer1[2] == 0x8C &&    // Checksum
 8002f82:	4b34      	ldr	r3, [pc, #208]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8002f84:	789b      	ldrb	r3, [r3, #2]
                rx_buffer1[1] == 0x20 &&    // Command
 8002f86:	2b8c      	cmp	r3, #140	@ 0x8c
 8002f88:	d10b      	bne.n	8002fa2 <HAL_UART_RxCpltCallback+0xae>
                rx_buffer1[3] == 0x0D &&    // Footer 1
 8002f8a:	4b32      	ldr	r3, [pc, #200]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8002f8c:	78db      	ldrb	r3, [r3, #3]
                rx_buffer1[2] == 0x8C &&    // Checksum
 8002f8e:	2b0d      	cmp	r3, #13
 8002f90:	d107      	bne.n	8002fa2 <HAL_UART_RxCpltCallback+0xae>
                rx_buffer1[4] == 0x0A) {    // Footer 2
 8002f92:	4b30      	ldr	r3, [pc, #192]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8002f94:	791b      	ldrb	r3, [r3, #4]
                rx_buffer1[3] == 0x0D &&    // Footer 1
 8002f96:	2b0a      	cmp	r3, #10
 8002f98:	d103      	bne.n	8002fa2 <HAL_UART_RxCpltCallback+0xae>

                flag = 1; // SİT Testi Aktif
 8002f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003058 <HAL_UART_RxCpltCallback+0x164>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	e040      	b.n	8003024 <HAL_UART_RxCpltCallback+0x130>
            }
            else if(rx_buffer1[0] == 0xAA &&    // Header
 8002fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2baa      	cmp	r3, #170	@ 0xaa
 8002fa8:	d13c      	bne.n	8003024 <HAL_UART_RxCpltCallback+0x130>
                    rx_buffer1[1] == 0x22 &&    // Command
 8002faa:	4b2a      	ldr	r3, [pc, #168]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8002fac:	785b      	ldrb	r3, [r3, #1]
            else if(rx_buffer1[0] == 0xAA &&    // Header
 8002fae:	2b22      	cmp	r3, #34	@ 0x22
 8002fb0:	d138      	bne.n	8003024 <HAL_UART_RxCpltCallback+0x130>
                    rx_buffer1[2] == 0x8E &&    // Checksum
 8002fb2:	4b28      	ldr	r3, [pc, #160]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8002fb4:	789b      	ldrb	r3, [r3, #2]
                    rx_buffer1[1] == 0x22 &&    // Command
 8002fb6:	2b8e      	cmp	r3, #142	@ 0x8e
 8002fb8:	d134      	bne.n	8003024 <HAL_UART_RxCpltCallback+0x130>
                    rx_buffer1[3] == 0x0D &&    // Footer 1
 8002fba:	4b26      	ldr	r3, [pc, #152]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8002fbc:	78db      	ldrb	r3, [r3, #3]
                    rx_buffer1[2] == 0x8E &&    // Checksum
 8002fbe:	2b0d      	cmp	r3, #13
 8002fc0:	d130      	bne.n	8003024 <HAL_UART_RxCpltCallback+0x130>
                    rx_buffer1[4] == 0x0A){
 8002fc2:	4b24      	ldr	r3, [pc, #144]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8002fc4:	791b      	ldrb	r3, [r3, #4]
                    rx_buffer1[3] == 0x0D &&    // Footer 1
 8002fc6:	2b0a      	cmp	r3, #10
 8002fc8:	d12c      	bne.n	8003024 <HAL_UART_RxCpltCallback+0x130>
            	flag = 2; // SUT Testi Aktif
 8002fca:	4b23      	ldr	r3, [pc, #140]	@ (8003058 <HAL_UART_RxCpltCallback+0x164>)
 8002fcc:	2202      	movs	r2, #2
 8002fce:	701a      	strb	r2, [r3, #0]
            	receive_uart1_data_package (&altitude,
 8002fd0:	4b22      	ldr	r3, [pc, #136]	@ (800305c <HAL_UART_RxCpltCallback+0x168>)
 8002fd2:	9303      	str	r3, [sp, #12]
 8002fd4:	4b22      	ldr	r3, [pc, #136]	@ (8003060 <HAL_UART_RxCpltCallback+0x16c>)
 8002fd6:	9302      	str	r3, [sp, #8]
 8002fd8:	4b22      	ldr	r3, [pc, #136]	@ (8003064 <HAL_UART_RxCpltCallback+0x170>)
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	4b22      	ldr	r3, [pc, #136]	@ (8003068 <HAL_UART_RxCpltCallback+0x174>)
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	4b22      	ldr	r3, [pc, #136]	@ (800306c <HAL_UART_RxCpltCallback+0x178>)
 8002fe2:	4a23      	ldr	r2, [pc, #140]	@ (8003070 <HAL_UART_RxCpltCallback+0x17c>)
 8002fe4:	4923      	ldr	r1, [pc, #140]	@ (8003074 <HAL_UART_RxCpltCallback+0x180>)
 8002fe6:	4824      	ldr	r0, [pc, #144]	@ (8003078 <HAL_UART_RxCpltCallback+0x184>)
 8002fe8:	f7ff fe7c 	bl	8002ce4 <receive_uart1_data_package>
 8002fec:	e01a      	b.n	8003024 <HAL_UART_RxCpltCallback+0x130>
            	    	            &orientation.roll,
            	    	            &orientation.pitch,
            	    	            &orientation.yaw);
            	        }
            }
            else if(rx_buffer1[0] == 0xAA &&    // Header
 8002fee:	4b19      	ldr	r3, [pc, #100]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2baa      	cmp	r3, #170	@ 0xaa
 8002ff4:	d113      	bne.n	800301e <HAL_UART_RxCpltCallback+0x12a>
                    rx_buffer1[1] == 0x24 &&    // Command
 8002ff6:	4b17      	ldr	r3, [pc, #92]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8002ff8:	785b      	ldrb	r3, [r3, #1]
            else if(rx_buffer1[0] == 0xAA &&    // Header
 8002ffa:	2b24      	cmp	r3, #36	@ 0x24
 8002ffc:	d10f      	bne.n	800301e <HAL_UART_RxCpltCallback+0x12a>
                    rx_buffer1[2] == 0x90 &&    // Checksum
 8002ffe:	4b15      	ldr	r3, [pc, #84]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8003000:	789b      	ldrb	r3, [r3, #2]
                    rx_buffer1[1] == 0x24 &&    // Command
 8003002:	2b90      	cmp	r3, #144	@ 0x90
 8003004:	d10b      	bne.n	800301e <HAL_UART_RxCpltCallback+0x12a>
                    rx_buffer1[3] == 0x0D &&    // Footer 1
 8003006:	4b13      	ldr	r3, [pc, #76]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8003008:	78db      	ldrb	r3, [r3, #3]
                    rx_buffer1[2] == 0x90 &&    // Checksum
 800300a:	2b0d      	cmp	r3, #13
 800300c:	d107      	bne.n	800301e <HAL_UART_RxCpltCallback+0x12a>
                    rx_buffer1[4] == 0x0A){
 800300e:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8003010:	791b      	ldrb	r3, [r3, #4]
                    rx_buffer1[3] == 0x0D &&    // Footer 1
 8003012:	2b0a      	cmp	r3, #10
 8003014:	d103      	bne.n	800301e <HAL_UART_RxCpltCallback+0x12a>
            	flag = 0; // DURDUR
 8003016:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <HAL_UART_RxCpltCallback+0x164>)
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e002      	b.n	8003024 <HAL_UART_RxCpltCallback+0x130>
            }
            else {
            	flag = 0;
 800301e:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <HAL_UART_RxCpltCallback+0x164>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
            }
            // Tekrar alımı başlat
            HAL_UART_Receive_IT(&huart1, rx_buffer1, sizeof(rx_buffer1));
 8003024:	2205      	movs	r2, #5
 8003026:	490b      	ldr	r1, [pc, #44]	@ (8003054 <HAL_UART_RxCpltCallback+0x160>)
 8003028:	4814      	ldr	r0, [pc, #80]	@ (800307c <HAL_UART_RxCpltCallback+0x188>)
 800302a:	f004 f8e7 	bl	80071fc <HAL_UART_Receive_IT>
        }
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	2000031c 	.word	0x2000031c
 800303c:	200004f9 	.word	0x200004f9
 8003040:	200004f8 	.word	0x200004f8
 8003044:	20000478 	.word	0x20000478
 8003048:	200004fc 	.word	0x200004fc
 800304c:	200003c0 	.word	0x200003c0
 8003050:	40013800 	.word	0x40013800
 8003054:	20000470 	.word	0x20000470
 8003058:	20000475 	.word	0x20000475
 800305c:	200003b4 	.word	0x200003b4
 8003060:	200003b0 	.word	0x200003b0
 8003064:	200003ac 	.word	0x200003ac
 8003068:	20000544 	.word	0x20000544
 800306c:	20000540 	.word	0x20000540
 8003070:	2000053c 	.word	0x2000053c
 8003074:	20000528 	.word	0x20000528
 8003078:	2000052c 	.word	0x2000052c
 800307c:	200002d4 	.word	0x200002d4

08003080 <print_gps_debug_info>:


/* Print GPS debug info ------------------------------------------------------*/
void print_gps_debug_info(void)
{
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003082:	b0cb      	sub	sp, #300	@ 0x12c
 8003084:	af08      	add	r7, sp, #32
    char dbg[256];
    int len = sprintf(dbg,
        "GPS Debug: fix=%d valid=%d sats=%d lat=%.6f lon=%.6f rx=%lu\r\n",
        gps.fix, gps.is_valid, gps.sats_in_use,
 8003086:	4b14      	ldr	r3, [pc, #80]	@ (80030d8 <print_gps_debug_info+0x58>)
 8003088:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
    int len = sprintf(dbg,
 800308c:	469c      	mov	ip, r3
        gps.fix, gps.is_valid, gps.sats_in_use,
 800308e:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <print_gps_debug_info+0x58>)
 8003090:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
    int len = sprintf(dbg,
 8003094:	469e      	mov	lr, r3
        gps.fix, gps.is_valid, gps.sats_in_use,
 8003096:	4b10      	ldr	r3, [pc, #64]	@ (80030d8 <print_gps_debug_info+0x58>)
 8003098:	f893 3020 	ldrb.w	r3, [r3, #32]
    int len = sprintf(dbg,
 800309c:	461e      	mov	r6, r3
 800309e:	4b0e      	ldr	r3, [pc, #56]	@ (80030d8 <print_gps_debug_info+0x58>)
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	490c      	ldr	r1, [pc, #48]	@ (80030d8 <print_gps_debug_info+0x58>)
 80030a6:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80030aa:	4c0c      	ldr	r4, [pc, #48]	@ (80030dc <print_gps_debug_info+0x5c>)
 80030ac:	6824      	ldr	r4, [r4, #0]
 80030ae:	1d3d      	adds	r5, r7, #4
 80030b0:	9406      	str	r4, [sp, #24]
 80030b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80030ba:	9600      	str	r6, [sp, #0]
 80030bc:	4673      	mov	r3, lr
 80030be:	4662      	mov	r2, ip
 80030c0:	4907      	ldr	r1, [pc, #28]	@ (80030e0 <print_gps_debug_info+0x60>)
 80030c2:	4628      	mov	r0, r5
 80030c4:	f005 fb46 	bl	8008754 <siprintf>
 80030c8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
        gps_data_received_count
    );
#if 0
    HAL_UART_Transmit(&huart1, (uint8_t*)dbg, len, HAL_MAX_DELAY);
#endif
}
 80030cc:	bf00      	nop
 80030ce:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200003c0 	.word	0x200003c0
 80030dc:	200004fc 	.word	0x200004fc
 80030e0:	0800b6d8 	.word	0x0800b6d8

080030e4 <check_uart_errors>:

/* Recover from UART errors on GPS ------------------------------------------*/
void check_uart_errors(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE)) {
 80030ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003168 <check_uart_errors+0x84>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d10f      	bne.n	8003118 <check_uart_errors+0x34>
        __HAL_UART_CLEAR_OREFLAG(&huart2);
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003168 <check_uart_errors+0x84>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	4b18      	ldr	r3, [pc, #96]	@ (8003168 <check_uart_errors+0x84>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
        HAL_UART_Receive_IT(&huart2, &rx_data2, 1);
 800310e:	2201      	movs	r2, #1
 8003110:	4916      	ldr	r1, [pc, #88]	@ (800316c <check_uart_errors+0x88>)
 8003112:	4815      	ldr	r0, [pc, #84]	@ (8003168 <check_uart_errors+0x84>)
 8003114:	f004 f872 	bl	80071fc <HAL_UART_Receive_IT>
    }
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE))
 8003118:	4b13      	ldr	r3, [pc, #76]	@ (8003168 <check_uart_errors+0x84>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b02      	cmp	r3, #2
 8003124:	d10a      	bne.n	800313c <check_uart_errors+0x58>
        __HAL_UART_CLEAR_FEFLAG(&huart2);
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	4b0f      	ldr	r3, [pc, #60]	@ (8003168 <check_uart_errors+0x84>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	4b0d      	ldr	r3, [pc, #52]	@ (8003168 <check_uart_errors+0x84>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	68bb      	ldr	r3, [r7, #8]
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_NE))
 800313c:	4b0a      	ldr	r3, [pc, #40]	@ (8003168 <check_uart_errors+0x84>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b04      	cmp	r3, #4
 8003148:	d10a      	bne.n	8003160 <check_uart_errors+0x7c>
        __HAL_UART_CLEAR_NEFLAG(&huart2);
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <check_uart_errors+0x84>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <check_uart_errors+0x84>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	2000031c 	.word	0x2000031c
 800316c:	200004f9 	.word	0x200004f9

08003170 <main>:

/* Main -----------------------------------------------------------------------*/
int main(void)
{
 8003170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003174:	b093      	sub	sp, #76	@ 0x4c
 8003176:	af06      	add	r7, sp, #24
    HAL_Init();
 8003178:	f001 f874 	bl	8004264 <HAL_Init>
    SystemClock_Config();
 800317c:	f000 fc40 	bl	8003a00 <SystemClock_Config>

    MX_GPIO_Init();
 8003180:	f000 fd64 	bl	8003c4c <MX_GPIO_Init>
    MX_I2C1_Init();
 8003184:	f000 fc82 	bl	8003a8c <MX_I2C1_Init>
    MX_SPI1_Init();
 8003188:	f000 fcae 	bl	8003ae8 <MX_SPI1_Init>
    MX_USART1_UART_Init();
 800318c:	f000 fce0 	bl	8003b50 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 8003190:	f000 fd08 	bl	8003ba4 <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 8003194:	f000 fd30 	bl	8003bf8 <MX_USART3_UART_Init>

    initialize_sensors();
 8003198:	f000 f94a 	bl	8003430 <initialize_sensors>

    /* Configure GPS to output at 5Hz */
    uint8_t setRate5Hz[] = {
 800319c:	4b91      	ldr	r3, [pc, #580]	@ (80033e4 <main+0x274>)
 800319e:	f107 041c 	add.w	r4, r7, #28
 80031a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031a4:	c407      	stmia	r4!, {r0, r1, r2}
 80031a6:	8023      	strh	r3, [r4, #0]
        0x01, 0x00,   // navRate = 1
        0x01, 0x00,   // timeRef = GPS time
        0xDE, 0x6A    // Checksum
    };

    HAL_Delay(1000);
 80031a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031ac:	f001 f8bc 	bl	8004328 <HAL_Delay>
    HAL_UART_Transmit(&huart2, setRate5Hz, sizeof(setRate5Hz), HAL_MAX_DELAY);
 80031b0:	f107 011c 	add.w	r1, r7, #28
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	220e      	movs	r2, #14
 80031ba:	488b      	ldr	r0, [pc, #556]	@ (80033e8 <main+0x278>)
 80031bc:	f003 ff93 	bl	80070e6 <HAL_UART_Transmit>
    HAL_Delay(1000);
 80031c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031c4:	f001 f8b0 	bl	8004328 <HAL_Delay>
    
    lwgps_init(&gps);
 80031c8:	4888      	ldr	r0, [pc, #544]	@ (80033ec <main+0x27c>)
 80031ca:	f7ff fbdc 	bl	8002986 <lwgps_init>
    HAL_UART_Receive_IT(&huart2, &rx_data2, 1);
 80031ce:	2201      	movs	r2, #1
 80031d0:	4987      	ldr	r1, [pc, #540]	@ (80033f0 <main+0x280>)
 80031d2:	4885      	ldr	r0, [pc, #532]	@ (80033e8 <main+0x278>)
 80031d4:	f004 f812 	bl	80071fc <HAL_UART_Receive_IT>
    HAL_Delay(200);
 80031d8:	20c8      	movs	r0, #200	@ 0xc8
 80031da:	f001 f8a5 	bl	8004328 <HAL_Delay>
    print_gps_debug_info();
 80031de:	f7ff ff4f 	bl	8003080 <print_gps_debug_info>

    // Test Cihazini Dinle
    HAL_UART_Receive_IT(&huart1, rx_buffer1, sizeof(rx_buffer1));
 80031e2:	2205      	movs	r2, #5
 80031e4:	4983      	ldr	r1, [pc, #524]	@ (80033f4 <main+0x284>)
 80031e6:	4884      	ldr	r0, [pc, #528]	@ (80033f8 <main+0x288>)
 80031e8:	f004 f808 	bl	80071fc <HAL_UART_Receive_IT>

    sensor_data_t accel_data, gyro_data;
    uint32_t debug_counter = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    parasut = 0;
 80031f0:	4b82      	ldr	r3, [pc, #520]	@ (80033fc <main+0x28c>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
    while (1) {
        /* BME280 */
        read_bme280_data();
 80031f6:	f000 f92b 	bl	8003450 <read_bme280_data>

        /* IMU */
        read_accelerometer_data(&accel_data);
 80031fa:	f107 0314 	add.w	r3, r7, #20
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f950 	bl	80034a4 <read_accelerometer_data>
        read_gyroscope_data(&gyro_data);
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f978 	bl	80034fe <read_gyroscope_data>
        calculate_orientation(&accel_data, &gyro_data, &orientation);
 800320e:	f107 010c 	add.w	r1, r7, #12
 8003212:	f107 0314 	add.w	r3, r7, #20
 8003216:	4a7a      	ldr	r2, [pc, #488]	@ (8003400 <main+0x290>)
 8003218:	4618      	mov	r0, r3
 800321a:	f000 f9cb 	bl	80035b4 <calculate_orientation>
        if(flag == 0){
 800321e:	4b79      	ldr	r3, [pc, #484]	@ (8003404 <main+0x294>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d170      	bne.n	8003308 <main+0x198>
        transmit_sensor_packet(
 8003226:	4b78      	ldr	r3, [pc, #480]	@ (8003408 <main+0x298>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd ff66 	bl	80010fc <__aeabi_f2iz>
 8003230:	4605      	mov	r5, r0
        	            (int)altitude,
        	            accel_data.x / ACCEL_SCALE_FACTOR,
 8003232:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
        transmit_sensor_packet(
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd fd30 	bl	8000c9c <__aeabi_i2f>
 800323c:	4603      	mov	r3, r0
 800323e:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd fe32 	bl	8000eac <__aeabi_fdiv>
 8003248:	4603      	mov	r3, r0
 800324a:	469a      	mov	sl, r3
        	            accel_data.y / ACCEL_SCALE_FACTOR,
 800324c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
        transmit_sensor_packet(
 8003250:	4618      	mov	r0, r3
 8003252:	f7fd fd23 	bl	8000c9c <__aeabi_i2f>
 8003256:	4603      	mov	r3, r0
 8003258:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd fe25 	bl	8000eac <__aeabi_fdiv>
 8003262:	4603      	mov	r3, r0
 8003264:	469b      	mov	fp, r3
        	            accel_data.z / ACCEL_SCALE_FACTOR,
 8003266:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
        transmit_sensor_packet(
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd fd16 	bl	8000c9c <__aeabi_i2f>
 8003270:	4603      	mov	r3, r0
 8003272:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd fe18 	bl	8000eac <__aeabi_fdiv>
 800327c:	4603      	mov	r3, r0
 800327e:	607b      	str	r3, [r7, #4]
        	            gyro_data.x / GYRO_SCALE_FACTOR,
 8003280:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
        transmit_sensor_packet(
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd fd09 	bl	8000c9c <__aeabi_i2f>
 800328a:	4603      	mov	r3, r0
 800328c:	495f      	ldr	r1, [pc, #380]	@ (800340c <main+0x29c>)
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd fe0c 	bl	8000eac <__aeabi_fdiv>
 8003294:	4603      	mov	r3, r0
 8003296:	461e      	mov	r6, r3
        	            gyro_data.y / GYRO_SCALE_FACTOR,
 8003298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
        transmit_sensor_packet(
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd fcfd 	bl	8000c9c <__aeabi_i2f>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4959      	ldr	r1, [pc, #356]	@ (800340c <main+0x29c>)
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fd fe00 	bl	8000eac <__aeabi_fdiv>
 80032ac:	4603      	mov	r3, r0
 80032ae:	4698      	mov	r8, r3
        	            gyro_data.z / GYRO_SCALE_FACTOR,
 80032b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
        transmit_sensor_packet(
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd fcf1 	bl	8000c9c <__aeabi_i2f>
 80032ba:	4603      	mov	r3, r0
 80032bc:	4953      	ldr	r1, [pc, #332]	@ (800340c <main+0x29c>)
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd fdf4 	bl	8000eac <__aeabi_fdiv>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4699      	mov	r9, r3
        	            gps.latitude,
 80032c8:	4b48      	ldr	r3, [pc, #288]	@ (80033ec <main+0x27c>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
        transmit_sensor_packet(
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	f7fd fbd9 	bl	8000a88 <__aeabi_d2f>
 80032d6:	4604      	mov	r4, r0
        	            gps.longitude);
 80032d8:	4b44      	ldr	r3, [pc, #272]	@ (80033ec <main+0x27c>)
 80032da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
        transmit_sensor_packet(
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	f7fd fbd1 	bl	8000a88 <__aeabi_d2f>
 80032e6:	4603      	mov	r3, r0
 80032e8:	9304      	str	r3, [sp, #16]
 80032ea:	9403      	str	r4, [sp, #12]
 80032ec:	f8cd 9008 	str.w	r9, [sp, #8]
 80032f0:	f8cd 8004 	str.w	r8, [sp, #4]
 80032f4:	9600      	str	r6, [sp, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	465a      	mov	r2, fp
 80032fa:	4651      	mov	r1, sl
 80032fc:	4628      	mov	r0, r5
 80032fe:	f000 faa5 	bl	800384c <transmit_sensor_packet>
        roket_algoritma();
 8003302:	f7ff fd9d 	bl	8002e40 <roket_algoritma>
 8003306:	e05e      	b.n	80033c6 <main+0x256>
        }
        else if(flag == 1){ 				//SİT AKTİF
 8003308:	4b3e      	ldr	r3, [pc, #248]	@ (8003404 <main+0x294>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d141      	bne.n	8003394 <main+0x224>
        	send_uart1_data_package(
 8003310:	4b3d      	ldr	r3, [pc, #244]	@ (8003408 <main+0x298>)
 8003312:	681c      	ldr	r4, [r3, #0]
 8003314:	4b3e      	ldr	r3, [pc, #248]	@ (8003410 <main+0x2a0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	493e      	ldr	r1, [pc, #248]	@ (8003414 <main+0x2a4>)
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd fdc6 	bl	8000eac <__aeabi_fdiv>
 8003320:	4603      	mov	r3, r0
 8003322:	461d      	mov	r5, r3
        	            altitude,
        	            Pressure / 100.0f,
        	            accel_data.x / ACCEL_SCALE_FACTOR,
 8003324:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
        	send_uart1_data_package(
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd fcb7 	bl	8000c9c <__aeabi_i2f>
 800332e:	4603      	mov	r3, r0
 8003330:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd fdb9 	bl	8000eac <__aeabi_fdiv>
 800333a:	4603      	mov	r3, r0
 800333c:	461e      	mov	r6, r3
        	            accel_data.y / ACCEL_SCALE_FACTOR,
 800333e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
        	send_uart1_data_package(
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd fcaa 	bl	8000c9c <__aeabi_i2f>
 8003348:	4603      	mov	r3, r0
 800334a:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd fdac 	bl	8000eac <__aeabi_fdiv>
 8003354:	4603      	mov	r3, r0
 8003356:	4698      	mov	r8, r3
        	            accel_data.z / ACCEL_SCALE_FACTOR,
 8003358:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
        	send_uart1_data_package(
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd fc9d 	bl	8000c9c <__aeabi_i2f>
 8003362:	4603      	mov	r3, r0
 8003364:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd fd9f 	bl	8000eac <__aeabi_fdiv>
 800336e:	4603      	mov	r3, r0
 8003370:	4618      	mov	r0, r3
 8003372:	4b23      	ldr	r3, [pc, #140]	@ (8003400 <main+0x290>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a22      	ldr	r2, [pc, #136]	@ (8003400 <main+0x290>)
 8003378:	6852      	ldr	r2, [r2, #4]
 800337a:	4921      	ldr	r1, [pc, #132]	@ (8003400 <main+0x290>)
 800337c:	6889      	ldr	r1, [r1, #8]
 800337e:	9103      	str	r1, [sp, #12]
 8003380:	9202      	str	r2, [sp, #8]
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	9000      	str	r0, [sp, #0]
 8003386:	4643      	mov	r3, r8
 8003388:	4632      	mov	r2, r6
 800338a:	4629      	mov	r1, r5
 800338c:	4620      	mov	r0, r4
 800338e:	f7ff fc05 	bl	8002b9c <send_uart1_data_package>
 8003392:	e018      	b.n	80033c6 <main+0x256>
        	            orientation.roll,
        	            orientation.pitch,
        	            orientation.yaw
        	        );
        }
        else if(flag == 2){				//SUT AKTİF
 8003394:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <main+0x294>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d114      	bne.n	80033c6 <main+0x256>
        	HAL_UART_Receive_IT(&huart1, sut_packet, sizeof(sut_packet));
 800339c:	2222      	movs	r2, #34	@ 0x22
 800339e:	491e      	ldr	r1, [pc, #120]	@ (8003418 <main+0x2a8>)
 80033a0:	4815      	ldr	r0, [pc, #84]	@ (80033f8 <main+0x288>)
 80033a2:	f003 ff2b 	bl	80071fc <HAL_UART_Receive_IT>
        	receive_uart1_data_package (&altitude,
 80033a6:	4b1d      	ldr	r3, [pc, #116]	@ (800341c <main+0x2ac>)
 80033a8:	9303      	str	r3, [sp, #12]
 80033aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003420 <main+0x2b0>)
 80033ac:	9302      	str	r3, [sp, #8]
 80033ae:	4b14      	ldr	r3, [pc, #80]	@ (8003400 <main+0x290>)
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003424 <main+0x2b4>)
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003428 <main+0x2b8>)
 80033b8:	4a1c      	ldr	r2, [pc, #112]	@ (800342c <main+0x2bc>)
 80033ba:	4915      	ldr	r1, [pc, #84]	@ (8003410 <main+0x2a0>)
 80033bc:	4812      	ldr	r0, [pc, #72]	@ (8003408 <main+0x298>)
 80033be:	f7ff fc91 	bl	8002ce4 <receive_uart1_data_package>
    	            &accel_y ,
    	            &accel_z ,
    	            &orientation.roll,
    	            &orientation.pitch,
    	            &orientation.yaw);
        	roket_algoritma();
 80033c2:	f7ff fd3d 	bl	8002e40 <roket_algoritma>
        }

        // Add this call to send the binary data package over UART1


        if (++debug_counter >= 50) {
 80033c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c8:	3301      	adds	r3, #1
 80033ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ce:	2b31      	cmp	r3, #49	@ 0x31
 80033d0:	d903      	bls.n	80033da <main+0x26a>
#if 0
            print_gps_debug_info();
#endif
            check_uart_errors();
 80033d2:	f7ff fe87 	bl	80030e4 <check_uart_errors>
            int debug_len = sprintf(debug_bme, "BME280: T=%.2f P=%.2f Alt=%.2f\r\n",
                                   Temperature, Pressure, altitude);
            HAL_UART_Transmit(&huart1, (uint8_t*)debug_bme, debug_len, HAL_MAX_DELAY);
#endif

            debug_counter = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        HAL_Delay(MEASUREMENT_DELAY);
 80033da:	20be      	movs	r0, #190	@ 0xbe
 80033dc:	f000 ffa4 	bl	8004328 <HAL_Delay>
        read_bme280_data();
 80033e0:	e709      	b.n	80031f6 <main+0x86>
 80033e2:	bf00      	nop
 80033e4:	0800b718 	.word	0x0800b718
 80033e8:	2000031c 	.word	0x2000031c
 80033ec:	200003c0 	.word	0x200003c0
 80033f0:	200004f9 	.word	0x200004f9
 80033f4:	20000470 	.word	0x20000470
 80033f8:	200002d4 	.word	0x200002d4
 80033fc:	20000476 	.word	0x20000476
 8003400:	200003ac 	.word	0x200003ac
 8003404:	20000475 	.word	0x20000475
 8003408:	2000052c 	.word	0x2000052c
 800340c:	43030000 	.word	0x43030000
 8003410:	20000528 	.word	0x20000528
 8003414:	42c80000 	.word	0x42c80000
 8003418:	20000500 	.word	0x20000500
 800341c:	200003b4 	.word	0x200003b4
 8003420:	200003b0 	.word	0x200003b0
 8003424:	20000544 	.word	0x20000544
 8003428:	20000540 	.word	0x20000540
 800342c:	2000053c 	.word	0x2000053c

08003430 <initialize_sensors>:
    }
}

/* Initialize BME280 ---------------------------------------------------------*/
void initialize_sensors(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af02      	add	r7, sp, #8
    BME280_Config(OSRS_2, OSRS_2, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8003436:	2304      	movs	r3, #4
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	2300      	movs	r3, #0
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2303      	movs	r3, #3
 8003440:	2201      	movs	r2, #1
 8003442:	2102      	movs	r1, #2
 8003444:	2002      	movs	r0, #2
 8003446:	f7fe f943 	bl	80016d0 <BME280_Config>
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <read_bme280_data>:

/* Read BME280 data ----------------------------------------------------------*/
void read_bme280_data(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
    BME280_Measure();
 8003454:	f7fe fd30 	bl	8001eb8 <BME280_Measure>
    altitude = 44330.0f * (1.0f - powf((Pressure / 101325.0f), (1.0f / 5.225f)));
 8003458:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <read_bme280_data+0x40>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	490d      	ldr	r1, [pc, #52]	@ (8003494 <read_bme280_data+0x44>)
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fd24 	bl	8000eac <__aeabi_fdiv>
 8003464:	4603      	mov	r3, r0
 8003466:	490c      	ldr	r1, [pc, #48]	@ (8003498 <read_bme280_data+0x48>)
 8003468:	4618      	mov	r0, r3
 800346a:	f007 fac5 	bl	800a9f8 <powf>
 800346e:	4603      	mov	r3, r0
 8003470:	4619      	mov	r1, r3
 8003472:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003476:	f7fd fb5b 	bl	8000b30 <__aeabi_fsub>
 800347a:	4603      	mov	r3, r0
 800347c:	4907      	ldr	r1, [pc, #28]	@ (800349c <read_bme280_data+0x4c>)
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd fc60 	bl	8000d44 <__aeabi_fmul>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <read_bme280_data+0x50>)
 800348a:	601a      	str	r2, [r3, #0]
}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000528 	.word	0x20000528
 8003494:	47c5e680 	.word	0x47c5e680
 8003498:	3e43fb1a 	.word	0x3e43fb1a
 800349c:	472d2a00 	.word	0x472d2a00
 80034a0:	2000052c 	.word	0x2000052c

080034a4 <read_accelerometer_data>:

/* Read accelerometer --------------------------------------------------------*/
void read_accelerometer_data(sensor_data_t *accel_data)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
    uint8_t buf[IMU_DATA_SIZE];
    mpu9250_read_data(MPU9250_ACCEL_XOUT_H, buf, 6);
 80034ac:	f107 0308 	add.w	r3, r7, #8
 80034b0:	2206      	movs	r2, #6
 80034b2:	4619      	mov	r1, r3
 80034b4:	203b      	movs	r0, #59	@ 0x3b
 80034b6:	f000 f84f 	bl	8003558 <mpu9250_read_data>
    accel_data->x = (int16_t)((buf[0] << 8) | buf[1]);
 80034ba:	7a3b      	ldrb	r3, [r7, #8]
 80034bc:	b21b      	sxth	r3, r3
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	b21a      	sxth	r2, r3
 80034c2:	7a7b      	ldrb	r3, [r7, #9]
 80034c4:	b21b      	sxth	r3, r3
 80034c6:	4313      	orrs	r3, r2
 80034c8:	b21a      	sxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	801a      	strh	r2, [r3, #0]
    accel_data->y = (int16_t)((buf[2] << 8) | buf[3]);
 80034ce:	7abb      	ldrb	r3, [r7, #10]
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	b21a      	sxth	r2, r3
 80034d6:	7afb      	ldrb	r3, [r7, #11]
 80034d8:	b21b      	sxth	r3, r3
 80034da:	4313      	orrs	r3, r2
 80034dc:	b21a      	sxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	805a      	strh	r2, [r3, #2]
    accel_data->z = (int16_t)((buf[4] << 8) | buf[5]);
 80034e2:	7b3b      	ldrb	r3, [r7, #12]
 80034e4:	b21b      	sxth	r3, r3
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	b21a      	sxth	r2, r3
 80034ea:	7b7b      	ldrb	r3, [r7, #13]
 80034ec:	b21b      	sxth	r3, r3
 80034ee:	4313      	orrs	r3, r2
 80034f0:	b21a      	sxth	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	809a      	strh	r2, [r3, #4]
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <read_gyroscope_data>:

/* Read gyroscope ------------------------------------------------------------*/
void read_gyroscope_data(sensor_data_t *gyro_data)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
    uint8_t buf[IMU_DATA_SIZE];
    mpu9250_read_data(MPU9250_GYRO_XOUT_H, buf, 6);
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	2206      	movs	r2, #6
 800350c:	4619      	mov	r1, r3
 800350e:	2043      	movs	r0, #67	@ 0x43
 8003510:	f000 f822 	bl	8003558 <mpu9250_read_data>
    gyro_data->x = (int16_t)((buf[0] << 8) | buf[1]);
 8003514:	7a3b      	ldrb	r3, [r7, #8]
 8003516:	b21b      	sxth	r3, r3
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	b21a      	sxth	r2, r3
 800351c:	7a7b      	ldrb	r3, [r7, #9]
 800351e:	b21b      	sxth	r3, r3
 8003520:	4313      	orrs	r3, r2
 8003522:	b21a      	sxth	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	801a      	strh	r2, [r3, #0]
    gyro_data->y = (int16_t)((buf[2] << 8) | buf[3]);
 8003528:	7abb      	ldrb	r3, [r7, #10]
 800352a:	b21b      	sxth	r3, r3
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	b21a      	sxth	r2, r3
 8003530:	7afb      	ldrb	r3, [r7, #11]
 8003532:	b21b      	sxth	r3, r3
 8003534:	4313      	orrs	r3, r2
 8003536:	b21a      	sxth	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	805a      	strh	r2, [r3, #2]
    gyro_data->z = (int16_t)((buf[4] << 8) | buf[5]);
 800353c:	7b3b      	ldrb	r3, [r7, #12]
 800353e:	b21b      	sxth	r3, r3
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	b21a      	sxth	r2, r3
 8003544:	7b7b      	ldrb	r3, [r7, #13]
 8003546:	b21b      	sxth	r3, r3
 8003548:	4313      	orrs	r3, r2
 800354a:	b21a      	sxth	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	809a      	strh	r2, [r3, #4]
}
 8003550:	bf00      	nop
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <mpu9250_read_data>:

/* MPU9250 SPI read ----------------------------------------------------------*/
void mpu9250_read_data(uint8_t reg, uint8_t *data, uint8_t len)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	71fb      	strb	r3, [r7, #7]
 8003564:	4613      	mov	r3, r2
 8003566:	71bb      	strb	r3, [r7, #6]
    uint8_t tx = 0x80 | reg;
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800356e:	b2db      	uxtb	r3, r3
 8003570:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003572:	2200      	movs	r2, #0
 8003574:	2110      	movs	r1, #16
 8003576:	480d      	ldr	r0, [pc, #52]	@ (80035ac <mpu9250_read_data+0x54>)
 8003578:	f001 fa3e 	bl	80049f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &tx, 1, 100);
 800357c:	f107 010f 	add.w	r1, r7, #15
 8003580:	2364      	movs	r3, #100	@ 0x64
 8003582:	2201      	movs	r2, #1
 8003584:	480a      	ldr	r0, [pc, #40]	@ (80035b0 <mpu9250_read_data+0x58>)
 8003586:	f002 ff49 	bl	800641c <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, len, 100);
 800358a:	79bb      	ldrb	r3, [r7, #6]
 800358c:	b29a      	uxth	r2, r3
 800358e:	2364      	movs	r3, #100	@ 0x64
 8003590:	6839      	ldr	r1, [r7, #0]
 8003592:	4807      	ldr	r0, [pc, #28]	@ (80035b0 <mpu9250_read_data+0x58>)
 8003594:	f003 f886 	bl	80066a4 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8003598:	2201      	movs	r2, #1
 800359a:	2110      	movs	r1, #16
 800359c:	4803      	ldr	r0, [pc, #12]	@ (80035ac <mpu9250_read_data+0x54>)
 800359e:	f001 fa2b 	bl	80049f8 <HAL_GPIO_WritePin>
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40010800 	.word	0x40010800
 80035b0:	2000027c 	.word	0x2000027c

080035b4 <calculate_orientation>:

/* Calculate orientation (complementary filter) ------------------------------*/
void calculate_orientation(sensor_data_t *accel_data, sensor_data_t *gyro_data, orientation_t *o)
{
 80035b4:	b5b0      	push	{r4, r5, r7, lr}
 80035b6:	b08a      	sub	sp, #40	@ 0x28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
    /* Convert to units */
    accel_x = accel_data->x / ACCEL_SCALE_FACTOR;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd fb68 	bl	8000c9c <__aeabi_i2f>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd fc6a 	bl	8000eac <__aeabi_fdiv>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	4b8f      	ldr	r3, [pc, #572]	@ (800381c <calculate_orientation+0x268>)
 80035de:	601a      	str	r2, [r3, #0]
    accel_y = accel_data->y / ACCEL_SCALE_FACTOR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fd fb58 	bl	8000c9c <__aeabi_i2f>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd fc5a 	bl	8000eac <__aeabi_fdiv>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b88      	ldr	r3, [pc, #544]	@ (8003820 <calculate_orientation+0x26c>)
 80035fe:	601a      	str	r2, [r3, #0]
    accel_z = accel_data->z / ACCEL_SCALE_FACTOR;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd fb48 	bl	8000c9c <__aeabi_i2f>
 800360c:	4603      	mov	r3, r0
 800360e:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fc4a 	bl	8000eac <__aeabi_fdiv>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	4b81      	ldr	r3, [pc, #516]	@ (8003824 <calculate_orientation+0x270>)
 800361e:	601a      	str	r2, [r3, #0]
    gyro_y  = gyro_data->y / GYRO_SCALE_FACTOR;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fd fb38 	bl	8000c9c <__aeabi_i2f>
 800362c:	4603      	mov	r3, r0
 800362e:	497e      	ldr	r1, [pc, #504]	@ (8003828 <calculate_orientation+0x274>)
 8003630:	4618      	mov	r0, r3
 8003632:	f7fd fc3b 	bl	8000eac <__aeabi_fdiv>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	4b7c      	ldr	r3, [pc, #496]	@ (800382c <calculate_orientation+0x278>)
 800363c:	601a      	str	r2, [r3, #0]
    gyro_z  = gyro_data->z / GYRO_SCALE_FACTOR;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd fb29 	bl	8000c9c <__aeabi_i2f>
 800364a:	4603      	mov	r3, r0
 800364c:	4976      	ldr	r1, [pc, #472]	@ (8003828 <calculate_orientation+0x274>)
 800364e:	4618      	mov	r0, r3
 8003650:	f7fd fc2c 	bl	8000eac <__aeabi_fdiv>
 8003654:	4603      	mov	r3, r0
 8003656:	461a      	mov	r2, r3
 8003658:	4b75      	ldr	r3, [pc, #468]	@ (8003830 <calculate_orientation+0x27c>)
 800365a:	601a      	str	r2, [r3, #0]

    uint32_t now = HAL_GetTick();
 800365c:	f000 fe5a 	bl	8004314 <HAL_GetTick>
 8003660:	6238      	str	r0, [r7, #32]
    float dt = (now - last_time) / 1000.0f;
 8003662:	4b74      	ldr	r3, [pc, #464]	@ (8003834 <calculate_orientation+0x280>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a3a      	ldr	r2, [r7, #32]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd fb12 	bl	8000c94 <__aeabi_ui2f>
 8003670:	4603      	mov	r3, r0
 8003672:	4971      	ldr	r1, [pc, #452]	@ (8003838 <calculate_orientation+0x284>)
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd fc19 	bl	8000eac <__aeabi_fdiv>
 800367a:	4603      	mov	r3, r0
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
    last_time = now;
 800367e:	4a6d      	ldr	r2, [pc, #436]	@ (8003834 <calculate_orientation+0x280>)
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	6013      	str	r3, [r2, #0]
    if (dt <= 0 || dt > 1.0f) dt = 0.01f;
 8003684:	f04f 0100 	mov.w	r1, #0
 8003688:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800368a:	f7fd fd03 	bl	8001094 <__aeabi_fcmple>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d107      	bne.n	80036a4 <calculate_orientation+0xf0>
 8003694:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003698:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800369a:	f7fd fd0f 	bl	80010bc <__aeabi_fcmpgt>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <calculate_orientation+0xf4>
 80036a4:	4b65      	ldr	r3, [pc, #404]	@ (800383c <calculate_orientation+0x288>)
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24

    float accel_roll  = atan2f(accel_y, sqrtf(accel_x*accel_x + accel_z*accel_z)) * RAD_TO_DEG;
 80036a8:	4b5d      	ldr	r3, [pc, #372]	@ (8003820 <calculate_orientation+0x26c>)
 80036aa:	681c      	ldr	r4, [r3, #0]
 80036ac:	4b5b      	ldr	r3, [pc, #364]	@ (800381c <calculate_orientation+0x268>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a5a      	ldr	r2, [pc, #360]	@ (800381c <calculate_orientation+0x268>)
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fb44 	bl	8000d44 <__aeabi_fmul>
 80036bc:	4603      	mov	r3, r0
 80036be:	461d      	mov	r5, r3
 80036c0:	4b58      	ldr	r3, [pc, #352]	@ (8003824 <calculate_orientation+0x270>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a57      	ldr	r2, [pc, #348]	@ (8003824 <calculate_orientation+0x270>)
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fd fb3a 	bl	8000d44 <__aeabi_fmul>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4619      	mov	r1, r3
 80036d4:	4628      	mov	r0, r5
 80036d6:	f7fd fa2d 	bl	8000b34 <__addsf3>
 80036da:	4603      	mov	r3, r0
 80036dc:	4618      	mov	r0, r3
 80036de:	f007 f9d8 	bl	800aa92 <sqrtf>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4619      	mov	r1, r3
 80036e6:	4620      	mov	r0, r4
 80036e8:	f007 f984 	bl	800a9f4 <atan2f>
 80036ec:	4603      	mov	r3, r0
 80036ee:	4954      	ldr	r1, [pc, #336]	@ (8003840 <calculate_orientation+0x28c>)
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd fb27 	bl	8000d44 <__aeabi_fmul>
 80036f6:	4603      	mov	r3, r0
 80036f8:	61fb      	str	r3, [r7, #28]
    float accel_pitch = atan2f(-accel_x, sqrtf(accel_y*accel_y + accel_z*accel_z)) * RAD_TO_DEG;
 80036fa:	4b48      	ldr	r3, [pc, #288]	@ (800381c <calculate_orientation+0x268>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8003702:	4b47      	ldr	r3, [pc, #284]	@ (8003820 <calculate_orientation+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a46      	ldr	r2, [pc, #280]	@ (8003820 <calculate_orientation+0x26c>)
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f7fd fb19 	bl	8000d44 <__aeabi_fmul>
 8003712:	4603      	mov	r3, r0
 8003714:	461d      	mov	r5, r3
 8003716:	4b43      	ldr	r3, [pc, #268]	@ (8003824 <calculate_orientation+0x270>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a42      	ldr	r2, [pc, #264]	@ (8003824 <calculate_orientation+0x270>)
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f7fd fb0f 	bl	8000d44 <__aeabi_fmul>
 8003726:	4603      	mov	r3, r0
 8003728:	4619      	mov	r1, r3
 800372a:	4628      	mov	r0, r5
 800372c:	f7fd fa02 	bl	8000b34 <__addsf3>
 8003730:	4603      	mov	r3, r0
 8003732:	4618      	mov	r0, r3
 8003734:	f007 f9ad 	bl	800aa92 <sqrtf>
 8003738:	4603      	mov	r3, r0
 800373a:	4619      	mov	r1, r3
 800373c:	4620      	mov	r0, r4
 800373e:	f007 f959 	bl	800a9f4 <atan2f>
 8003742:	4603      	mov	r3, r0
 8003744:	493e      	ldr	r1, [pc, #248]	@ (8003840 <calculate_orientation+0x28c>)
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fafc 	bl	8000d44 <__aeabi_fmul>
 800374c:	4603      	mov	r3, r0
 800374e:	61bb      	str	r3, [r7, #24]

    float alpha = 0.98f;
 8003750:	4b3c      	ldr	r3, [pc, #240]	@ (8003844 <calculate_orientation+0x290>)
 8003752:	617b      	str	r3, [r7, #20]
    o->roll  = alpha * (o->roll  + gyro_x * dt) + (1.0f - alpha) * accel_roll;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681c      	ldr	r4, [r3, #0]
 8003758:	4b3b      	ldr	r3, [pc, #236]	@ (8003848 <calculate_orientation+0x294>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd faf0 	bl	8000d44 <__aeabi_fmul>
 8003764:	4603      	mov	r3, r0
 8003766:	4619      	mov	r1, r3
 8003768:	4620      	mov	r0, r4
 800376a:	f7fd f9e3 	bl	8000b34 <__addsf3>
 800376e:	4603      	mov	r3, r0
 8003770:	6979      	ldr	r1, [r7, #20]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fd fae6 	bl	8000d44 <__aeabi_fmul>
 8003778:	4603      	mov	r3, r0
 800377a:	461c      	mov	r4, r3
 800377c:	6979      	ldr	r1, [r7, #20]
 800377e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8003782:	f7fd f9d5 	bl	8000b30 <__aeabi_fsub>
 8003786:	4603      	mov	r3, r0
 8003788:	69f9      	ldr	r1, [r7, #28]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fada 	bl	8000d44 <__aeabi_fmul>
 8003790:	4603      	mov	r3, r0
 8003792:	4619      	mov	r1, r3
 8003794:	4620      	mov	r0, r4
 8003796:	f7fd f9cd 	bl	8000b34 <__addsf3>
 800379a:	4603      	mov	r3, r0
 800379c:	461a      	mov	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	601a      	str	r2, [r3, #0]
    o->pitch = alpha * (o->pitch + gyro_y * dt) + (1.0f - alpha) * accel_pitch;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685c      	ldr	r4, [r3, #4]
 80037a6:	4b21      	ldr	r3, [pc, #132]	@ (800382c <calculate_orientation+0x278>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fd fac9 	bl	8000d44 <__aeabi_fmul>
 80037b2:	4603      	mov	r3, r0
 80037b4:	4619      	mov	r1, r3
 80037b6:	4620      	mov	r0, r4
 80037b8:	f7fd f9bc 	bl	8000b34 <__addsf3>
 80037bc:	4603      	mov	r3, r0
 80037be:	6979      	ldr	r1, [r7, #20]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fd fabf 	bl	8000d44 <__aeabi_fmul>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461c      	mov	r4, r3
 80037ca:	6979      	ldr	r1, [r7, #20]
 80037cc:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80037d0:	f7fd f9ae 	bl	8000b30 <__aeabi_fsub>
 80037d4:	4603      	mov	r3, r0
 80037d6:	69b9      	ldr	r1, [r7, #24]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fd fab3 	bl	8000d44 <__aeabi_fmul>
 80037de:	4603      	mov	r3, r0
 80037e0:	4619      	mov	r1, r3
 80037e2:	4620      	mov	r0, r4
 80037e4:	f7fd f9a6 	bl	8000b34 <__addsf3>
 80037e8:	4603      	mov	r3, r0
 80037ea:	461a      	mov	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	605a      	str	r2, [r3, #4]
    o->yaw  += gyro_z * dt;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689c      	ldr	r4, [r3, #8]
 80037f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003830 <calculate_orientation+0x27c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd faa2 	bl	8000d44 <__aeabi_fmul>
 8003800:	4603      	mov	r3, r0
 8003802:	4619      	mov	r1, r3
 8003804:	4620      	mov	r0, r4
 8003806:	f7fd f995 	bl	8000b34 <__addsf3>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	609a      	str	r2, [r3, #8]
}
 8003812:	bf00      	nop
 8003814:	3728      	adds	r7, #40	@ 0x28
 8003816:	46bd      	mov	sp, r7
 8003818:	bdb0      	pop	{r4, r5, r7, pc}
 800381a:	bf00      	nop
 800381c:	2000053c 	.word	0x2000053c
 8003820:	20000540 	.word	0x20000540
 8003824:	20000544 	.word	0x20000544
 8003828:	43030000 	.word	0x43030000
 800382c:	20000534 	.word	0x20000534
 8003830:	20000538 	.word	0x20000538
 8003834:	200003b8 	.word	0x200003b8
 8003838:	447a0000 	.word	0x447a0000
 800383c:	3c23d70a 	.word	0x3c23d70a
 8003840:	42652ee6 	.word	0x42652ee6
 8003844:	3f7ae148 	.word	0x3f7ae148
 8003848:	20000530 	.word	0x20000530

0800384c <transmit_sensor_packet>:

/* Transmit packet over LoRa (USART3) ----------------------------------------*/
void transmit_sensor_packet(int alt, float ax, float ay, float az, float gx, float gy, float gz, float lat, float lon)
{
 800384c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003850:	b0bd      	sub	sp, #244	@ 0xf4
 8003852:	af08      	add	r7, sp, #32
 8003854:	6278      	str	r0, [r7, #36]	@ 0x24
 8003856:	6239      	str	r1, [r7, #32]
 8003858:	61fa      	str	r2, [r7, #28]
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	466b      	mov	r3, sp
 800385e:	607b      	str	r3, [r7, #4]
    char buf[BUFFER_SIZE];
    int len;
    if (!gps.is_valid) {
 8003860:	4b61      	ldr	r3, [pc, #388]	@ (80039e8 <transmit_sensor_packet+0x19c>)
 8003862:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8003866:	2b00      	cmp	r3, #0
 8003868:	d122      	bne.n	80038b0 <transmit_sensor_packet+0x64>
        len = sprintf(buf, "%d,%d,%d,%d,0.0000,0.0000,%.2f\n",
                      alt, (int)orientation.roll, (int)orientation.pitch, (int)orientation.yaw, gps.altitude);
 800386a:	4b60      	ldr	r3, [pc, #384]	@ (80039ec <transmit_sensor_packet+0x1a0>)
 800386c:	681b      	ldr	r3, [r3, #0]
        len = sprintf(buf, "%d,%d,%d,%d,0.0000,0.0000,%.2f\n",
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd fc44 	bl	80010fc <__aeabi_f2iz>
 8003874:	4682      	mov	sl, r0
                      alt, (int)orientation.roll, (int)orientation.pitch, (int)orientation.yaw, gps.altitude);
 8003876:	4b5d      	ldr	r3, [pc, #372]	@ (80039ec <transmit_sensor_packet+0x1a0>)
 8003878:	685b      	ldr	r3, [r3, #4]
        len = sprintf(buf, "%d,%d,%d,%d,0.0000,0.0000,%.2f\n",
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fc3e 	bl	80010fc <__aeabi_f2iz>
 8003880:	4606      	mov	r6, r0
                      alt, (int)orientation.roll, (int)orientation.pitch, (int)orientation.yaw, gps.altitude);
 8003882:	4b5a      	ldr	r3, [pc, #360]	@ (80039ec <transmit_sensor_packet+0x1a0>)
 8003884:	689b      	ldr	r3, [r3, #8]
        len = sprintf(buf, "%d,%d,%d,%d,0.0000,0.0000,%.2f\n",
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd fc38 	bl	80010fc <__aeabi_f2iz>
 800388c:	4601      	mov	r1, r0
 800388e:	4b56      	ldr	r3, [pc, #344]	@ (80039e8 <transmit_sensor_packet+0x19c>)
 8003890:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003894:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8003898:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800389c:	9101      	str	r1, [sp, #4]
 800389e:	9600      	str	r6, [sp, #0]
 80038a0:	4653      	mov	r3, sl
 80038a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a4:	4952      	ldr	r1, [pc, #328]	@ (80039f0 <transmit_sensor_packet+0x1a4>)
 80038a6:	f004 ff55 	bl	8008754 <siprintf>
 80038aa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
 80038ae:	e034      	b.n	800391a <transmit_sensor_packet+0xce>
    } else {
        len = sprintf(buf, "%d,%d,%d,%d,%.4f,%.4f,%.2f\n",
                      alt, (int)orientation.roll, (int)orientation.pitch, (int)orientation.yaw,
 80038b0:	4b4e      	ldr	r3, [pc, #312]	@ (80039ec <transmit_sensor_packet+0x1a0>)
 80038b2:	681b      	ldr	r3, [r3, #0]
        len = sprintf(buf, "%d,%d,%d,%d,%.4f,%.4f,%.2f\n",
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fd fc21 	bl	80010fc <__aeabi_f2iz>
 80038ba:	6178      	str	r0, [r7, #20]
                      alt, (int)orientation.roll, (int)orientation.pitch, (int)orientation.yaw,
 80038bc:	4b4b      	ldr	r3, [pc, #300]	@ (80039ec <transmit_sensor_packet+0x1a0>)
 80038be:	685b      	ldr	r3, [r3, #4]
        len = sprintf(buf, "%d,%d,%d,%d,%.4f,%.4f,%.2f\n",
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd fc1b 	bl	80010fc <__aeabi_f2iz>
 80038c6:	4606      	mov	r6, r0
                      alt, (int)orientation.roll, (int)orientation.pitch, (int)orientation.yaw,
 80038c8:	4b48      	ldr	r3, [pc, #288]	@ (80039ec <transmit_sensor_packet+0x1a0>)
 80038ca:	689b      	ldr	r3, [r3, #8]
        len = sprintf(buf, "%d,%d,%d,%d,%.4f,%.4f,%.2f\n",
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fd fc15 	bl	80010fc <__aeabi_f2iz>
 80038d2:	6138      	str	r0, [r7, #16]
 80038d4:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80038d8:	f7fc fda6 	bl	8000428 <__aeabi_f2d>
 80038dc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80038e0:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80038e4:	f7fc fda0 	bl	8000428 <__aeabi_f2d>
 80038e8:	4682      	mov	sl, r0
 80038ea:	468b      	mov	fp, r1
 80038ec:	4b3e      	ldr	r3, [pc, #248]	@ (80039e8 <transmit_sensor_packet+0x19c>)
 80038ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038f2:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80038f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80038fa:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80038fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003902:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	9201      	str	r2, [sp, #4]
 800390a:	9600      	str	r6, [sp, #0]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003910:	4938      	ldr	r1, [pc, #224]	@ (80039f4 <transmit_sensor_packet+0x1a8>)
 8003912:	f004 ff1f 	bl	8008754 <siprintf>
 8003916:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
                      lat, lon, gps.altitude);
    }
    uint8_t packet[PACKET_HEADER_SIZE + len];
 800391a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800391e:	1cd9      	adds	r1, r3, #3
 8003920:	1e4b      	subs	r3, r1, #1
 8003922:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003926:	460a      	mov	r2, r1
 8003928:	2300      	movs	r3, #0
 800392a:	4690      	mov	r8, r2
 800392c:	4699      	mov	r9, r3
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800393e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003942:	460a      	mov	r2, r1
 8003944:	2300      	movs	r3, #0
 8003946:	4614      	mov	r4, r2
 8003948:	461d      	mov	r5, r3
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	00eb      	lsls	r3, r5, #3
 8003954:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003958:	00e2      	lsls	r2, r4, #3
 800395a:	460b      	mov	r3, r1
 800395c:	3307      	adds	r3, #7
 800395e:	08db      	lsrs	r3, r3, #3
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	ebad 0d03 	sub.w	sp, sp, r3
 8003966:	ab08      	add	r3, sp, #32
 8003968:	3300      	adds	r3, #0
 800396a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    packet[0] = TARGET_ADDR_HIGH;
 800396e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
    packet[1] = TARGET_ADDR_LOW;
 8003976:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800397a:	2202      	movs	r2, #2
 800397c:	705a      	strb	r2, [r3, #1]
    packet[2] = CHANNEL;
 800397e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003982:	2217      	movs	r2, #23
 8003984:	709a      	strb	r2, [r3, #2]
    memcpy(&packet[3], buf, len);
 8003986:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800398a:	3303      	adds	r3, #3
 800398c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003990:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003994:	4618      	mov	r0, r3
 8003996:	f004 ffe2 	bl	800895e <memcpy>
    HAL_UART_Transmit(&huart3, packet, 3 + len, HAL_MAX_DELAY);
 800399a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3303      	adds	r3, #3
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	f04f 33ff 	mov.w	r3, #4294967295
 80039a8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 80039ac:	4812      	ldr	r0, [pc, #72]	@ (80039f8 <transmit_sensor_packet+0x1ac>)
 80039ae:	f003 fb9a 	bl	80070e6 <HAL_UART_Transmit>
    
    /* Send additional line break to ensure proper separation */
    uint8_t line_break[] = "\r\n";
 80039b2:	4a12      	ldr	r2, [pc, #72]	@ (80039fc <transmit_sensor_packet+0x1b0>)
 80039b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	4611      	mov	r1, r2
 80039bc:	8019      	strh	r1, [r3, #0]
 80039be:	3302      	adds	r3, #2
 80039c0:	0c12      	lsrs	r2, r2, #16
 80039c2:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart3, line_break, 2, HAL_MAX_DELAY);
 80039c4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80039c8:	f04f 33ff 	mov.w	r3, #4294967295
 80039cc:	2202      	movs	r2, #2
 80039ce:	480a      	ldr	r0, [pc, #40]	@ (80039f8 <transmit_sensor_packet+0x1ac>)
 80039d0:	f003 fb89 	bl	80070e6 <HAL_UART_Transmit>
    
    /* Add a small delay to ensure proper line separation */
    HAL_Delay(10);
 80039d4:	200a      	movs	r0, #10
 80039d6:	f000 fca7 	bl	8004328 <HAL_Delay>
 80039da:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 80039de:	bf00      	nop
 80039e0:	37d4      	adds	r7, #212	@ 0xd4
 80039e2:	46bd      	mov	sp, r7
 80039e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e8:	200003c0 	.word	0x200003c0
 80039ec:	200003ac 	.word	0x200003ac
 80039f0:	0800b728 	.word	0x0800b728
 80039f4:	0800b748 	.word	0x0800b748
 80039f8:	20000364 	.word	0x20000364
 80039fc:	0800b764 	.word	0x0800b764

08003a00 <SystemClock_Config>:


/* System Clock Configuration ------------------------------------------------*/
void SystemClock_Config(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b090      	sub	sp, #64	@ 0x40
 8003a04:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef       RCC_OscInitStruct = {0};
 8003a06:	f107 0318 	add.w	r3, r7, #24
 8003a0a:	2228      	movs	r2, #40	@ 0x28
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 ff05 	bl	800881e <memset>
    RCC_ClkInitTypeDef       RCC_ClkInitStruct = {0};
 8003a14:	1d3b      	adds	r3, r7, #4
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	60da      	str	r2, [r3, #12]
 8003a20:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a22:	2301      	movs	r3, #1
 8003a24:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8003a26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a2a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
 8003a30:	2301      	movs	r3, #1
 8003a32:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8003a34:	2302      	movs	r3, #2
 8003a36:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8003a38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL9;
 8003a3e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003a44:	f107 0318 	add.w	r3, r7, #24
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f002 f853 	bl	8005af4 <HAL_RCC_OscConfig>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <SystemClock_Config+0x58>
        Error_Handler();
 8003a54:	f000 f944 	bl	8003ce0 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK   |
 8003a58:	230f      	movs	r3, #15
 8003a5a:	607b      	str	r3, [r7, #4]
                                       RCC_CLOCKTYPE_SYSCLK |
                                       RCC_CLOCKTYPE_PCLK1  |
                                       RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a68:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	2102      	movs	r1, #2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f002 fac0 	bl	8005ff8 <HAL_RCC_ClockConfig>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <SystemClock_Config+0x82>
        Error_Handler();
 8003a7e:	f000 f92f 	bl	8003ce0 <Error_Handler>
    }
}
 8003a82:	bf00      	nop
 8003a84:	3740      	adds	r7, #64	@ 0x40
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <MX_I2C1_Init>:

/* I2C1 Initialization -------------------------------------------------------*/
static void MX_I2C1_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
    hi2c1.Instance             = I2C1;
 8003a90:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003a92:	4a13      	ldr	r2, [pc, #76]	@ (8003ae0 <MX_I2C1_Init+0x54>)
 8003a94:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed      = 100000;
 8003a96:	4b11      	ldr	r3, [pc, #68]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003a98:	4a12      	ldr	r2, [pc, #72]	@ (8003ae4 <MX_I2C1_Init+0x58>)
 8003a9a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1     = 0;
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003aaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003aae:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2     = 0;
 8003ab6:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003abc:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8003ac2:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003ac8:	4804      	ldr	r0, [pc, #16]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003aca:	f000 ffad 	bl	8004a28 <HAL_I2C_Init>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8003ad4:	f000 f904 	bl	8003ce0 <Error_Handler>
    }
}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000228 	.word	0x20000228
 8003ae0:	40005400 	.word	0x40005400
 8003ae4:	000186a0 	.word	0x000186a0

08003ae8 <MX_SPI1_Init>:

/* SPI1 Initialization -------------------------------------------------------*/
static void MX_SPI1_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
    hspi1.Instance               = SPI1;
 8003aec:	4b16      	ldr	r3, [pc, #88]	@ (8003b48 <MX_SPI1_Init+0x60>)
 8003aee:	4a17      	ldr	r2, [pc, #92]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003af0:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode              = SPI_MODE_MASTER;
 8003af2:	4b15      	ldr	r3, [pc, #84]	@ (8003b48 <MX_SPI1_Init+0x60>)
 8003af4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003af8:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction         = SPI_DIRECTION_2LINES;
 8003afa:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <MX_SPI1_Init+0x60>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize          = SPI_DATASIZE_8BIT;
 8003b00:	4b11      	ldr	r3, [pc, #68]	@ (8003b48 <MX_SPI1_Init+0x60>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8003b06:	4b10      	ldr	r3, [pc, #64]	@ (8003b48 <MX_SPI1_Init+0x60>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b48 <MX_SPI1_Init+0x60>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS               = SPI_NSS_SOFT;
 8003b12:	4b0d      	ldr	r3, [pc, #52]	@ (8003b48 <MX_SPI1_Init+0x60>)
 8003b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b18:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <MX_SPI1_Init+0x60>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003b20:	4b09      	ldr	r3, [pc, #36]	@ (8003b48 <MX_SPI1_Init+0x60>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode            = SPI_TIMODE_DISABLE;
 8003b26:	4b08      	ldr	r3, [pc, #32]	@ (8003b48 <MX_SPI1_Init+0x60>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8003b2c:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <MX_SPI1_Init+0x60>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8003b32:	4805      	ldr	r0, [pc, #20]	@ (8003b48 <MX_SPI1_Init+0x60>)
 8003b34:	f002 fbee 	bl	8006314 <HAL_SPI_Init>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <MX_SPI1_Init+0x5a>
        Error_Handler();
 8003b3e:	f000 f8cf 	bl	8003ce0 <Error_Handler>
    }
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	2000027c 	.word	0x2000027c
 8003b4c:	40013000 	.word	0x40013000

08003b50 <MX_USART1_UART_Init>:

/* USART1 Initialization (Debug) ---------------------------------------------*/
static void MX_USART1_UART_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
    huart1.Instance          = USART1;
 8003b54:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <MX_USART1_UART_Init+0x4c>)
 8003b56:	4a12      	ldr	r2, [pc, #72]	@ (8003ba0 <MX_USART1_UART_Init+0x50>)
 8003b58:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate     = 115200;
 8003b5a:	4b10      	ldr	r3, [pc, #64]	@ (8003b9c <MX_USART1_UART_Init+0x4c>)
 8003b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b60:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8003b62:	4b0e      	ldr	r3, [pc, #56]	@ (8003b9c <MX_USART1_UART_Init+0x4c>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits     = UART_STOPBITS_1;
 8003b68:	4b0c      	ldr	r3, [pc, #48]	@ (8003b9c <MX_USART1_UART_Init+0x4c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity       = UART_PARITY_NONE;
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <MX_USART1_UART_Init+0x4c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode         = UART_MODE_TX_RX;
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <MX_USART1_UART_Init+0x4c>)
 8003b76:	220c      	movs	r2, #12
 8003b78:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8003b7a:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <MX_USART1_UART_Init+0x4c>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <MX_USART1_UART_Init+0x4c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003b86:	4805      	ldr	r0, [pc, #20]	@ (8003b9c <MX_USART1_UART_Init+0x4c>)
 8003b88:	f003 fa5d 	bl	8007046 <HAL_UART_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <MX_USART1_UART_Init+0x46>
        Error_Handler();
 8003b92:	f000 f8a5 	bl	8003ce0 <Error_Handler>
    }
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200002d4 	.word	0x200002d4
 8003ba0:	40013800 	.word	0x40013800

08003ba4 <MX_USART2_UART_Init>:

/* USART2 Initialization (GPS) ------------------------------------------------*/
static void MX_USART2_UART_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
    huart2.Instance          = USART2;
 8003ba8:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <MX_USART2_UART_Init+0x4c>)
 8003baa:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <MX_USART2_UART_Init+0x50>)
 8003bac:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate     = 9600;
 8003bae:	4b10      	ldr	r3, [pc, #64]	@ (8003bf0 <MX_USART2_UART_Init+0x4c>)
 8003bb0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003bb4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <MX_USART2_UART_Init+0x4c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits     = UART_STOPBITS_1;
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <MX_USART2_UART_Init+0x4c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity       = UART_PARITY_NONE;
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <MX_USART2_UART_Init+0x4c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode         = UART_MODE_TX_RX;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <MX_USART2_UART_Init+0x4c>)
 8003bca:	220c      	movs	r2, #12
 8003bcc:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8003bce:	4b08      	ldr	r3, [pc, #32]	@ (8003bf0 <MX_USART2_UART_Init+0x4c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bd4:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <MX_USART2_UART_Init+0x4c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003bda:	4805      	ldr	r0, [pc, #20]	@ (8003bf0 <MX_USART2_UART_Init+0x4c>)
 8003bdc:	f003 fa33 	bl	8007046 <HAL_UART_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8003be6:	f000 f87b 	bl	8003ce0 <Error_Handler>
    }
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2000031c 	.word	0x2000031c
 8003bf4:	40004400 	.word	0x40004400

08003bf8 <MX_USART3_UART_Init>:

/* USART3 Initialization (LoRa) ----------------------------------------------*/
static void MX_USART3_UART_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
    huart3.Instance          = USART3;
 8003bfc:	4b11      	ldr	r3, [pc, #68]	@ (8003c44 <MX_USART3_UART_Init+0x4c>)
 8003bfe:	4a12      	ldr	r2, [pc, #72]	@ (8003c48 <MX_USART3_UART_Init+0x50>)
 8003c00:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate     = 115200;
 8003c02:	4b10      	ldr	r3, [pc, #64]	@ (8003c44 <MX_USART3_UART_Init+0x4c>)
 8003c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c08:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength   = UART_WORDLENGTH_8B;
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c44 <MX_USART3_UART_Init+0x4c>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits     = UART_STOPBITS_1;
 8003c10:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <MX_USART3_UART_Init+0x4c>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity       = UART_PARITY_NONE;
 8003c16:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <MX_USART3_UART_Init+0x4c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode         = UART_MODE_TX_RX;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	@ (8003c44 <MX_USART3_UART_Init+0x4c>)
 8003c1e:	220c      	movs	r2, #12
 8003c20:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8003c22:	4b08      	ldr	r3, [pc, #32]	@ (8003c44 <MX_USART3_UART_Init+0x4c>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c28:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <MX_USART3_UART_Init+0x4c>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8003c2e:	4805      	ldr	r0, [pc, #20]	@ (8003c44 <MX_USART3_UART_Init+0x4c>)
 8003c30:	f003 fa09 	bl	8007046 <HAL_UART_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <MX_USART3_UART_Init+0x46>
        Error_Handler();
 8003c3a:	f000 f851 	bl	8003ce0 <Error_Handler>
    }
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000364 	.word	0x20000364
 8003c48:	40004800 	.word	0x40004800

08003c4c <MX_GPIO_Init>:

/* GPIO Initialization -------------------------------------------------------*/
static void MX_GPIO_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Init = {0};
 8003c52:	f107 0310 	add.w	r3, r7, #16
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	605a      	str	r2, [r3, #4]
 8003c5c:	609a      	str	r2, [r3, #8]
 8003c5e:	60da      	str	r2, [r3, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c60:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd8 <MX_GPIO_Init+0x8c>)
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd8 <MX_GPIO_Init+0x8c>)
 8003c66:	f043 0304 	orr.w	r3, r3, #4
 8003c6a:	6193      	str	r3, [r2, #24]
 8003c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd8 <MX_GPIO_Init+0x8c>)
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c78:	4b17      	ldr	r3, [pc, #92]	@ (8003cd8 <MX_GPIO_Init+0x8c>)
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	4a16      	ldr	r2, [pc, #88]	@ (8003cd8 <MX_GPIO_Init+0x8c>)
 8003c7e:	f043 0308 	orr.w	r3, r3, #8
 8003c82:	6193      	str	r3, [r2, #24]
 8003c84:	4b14      	ldr	r3, [pc, #80]	@ (8003cd8 <MX_GPIO_Init+0x8c>)
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c90:	4b11      	ldr	r3, [pc, #68]	@ (8003cd8 <MX_GPIO_Init+0x8c>)
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	4a10      	ldr	r2, [pc, #64]	@ (8003cd8 <MX_GPIO_Init+0x8c>)
 8003c96:	f043 0320 	orr.w	r3, r3, #32
 8003c9a:	6193      	str	r3, [r2, #24]
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd8 <MX_GPIO_Init+0x8c>)
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]

    /* SPI_CS pin (PA4) */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2110      	movs	r1, #16
 8003cac:	480b      	ldr	r0, [pc, #44]	@ (8003cdc <MX_GPIO_Init+0x90>)
 8003cae:	f000 fea3 	bl	80049f8 <HAL_GPIO_WritePin>
    GPIO_Init.Pin   = GPIO_PIN_4;
 8003cb2:	2310      	movs	r3, #16
 8003cb4:	613b      	str	r3, [r7, #16]
    GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
    GPIO_Init.Pull  = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61bb      	str	r3, [r7, #24]
    GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8003cc2:	f107 0310 	add.w	r3, r7, #16
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4804      	ldr	r0, [pc, #16]	@ (8003cdc <MX_GPIO_Init+0x90>)
 8003cca:	f000 fd11 	bl	80046f0 <HAL_GPIO_Init>
}
 8003cce:	bf00      	nop
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40010800 	.word	0x40010800

08003ce0 <Error_Handler>:

/* Error Handler -------------------------------------------------------------*/
void Error_Handler(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce4:	b672      	cpsid	i
}
 8003ce6:	bf00      	nop
    __disable_irq();
    while (1) {
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <Error_Handler+0x8>

08003cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003cf2:	4b15      	ldr	r3, [pc, #84]	@ (8003d48 <HAL_MspInit+0x5c>)
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	4a14      	ldr	r2, [pc, #80]	@ (8003d48 <HAL_MspInit+0x5c>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	6193      	str	r3, [r2, #24]
 8003cfe:	4b12      	ldr	r3, [pc, #72]	@ (8003d48 <HAL_MspInit+0x5c>)
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d48 <HAL_MspInit+0x5c>)
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8003d48 <HAL_MspInit+0x5c>)
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	61d3      	str	r3, [r2, #28]
 8003d16:	4b0c      	ldr	r3, [pc, #48]	@ (8003d48 <HAL_MspInit+0x5c>)
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1e:	607b      	str	r3, [r7, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003d22:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <HAL_MspInit+0x60>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	4a04      	ldr	r2, [pc, #16]	@ (8003d4c <HAL_MspInit+0x60>)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40010000 	.word	0x40010000

08003d50 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d58:	f107 0310 	add.w	r3, r7, #16
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a15      	ldr	r2, [pc, #84]	@ (8003dc0 <HAL_I2C_MspInit+0x70>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d123      	bne.n	8003db8 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d70:	4b14      	ldr	r3, [pc, #80]	@ (8003dc4 <HAL_I2C_MspInit+0x74>)
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	4a13      	ldr	r2, [pc, #76]	@ (8003dc4 <HAL_I2C_MspInit+0x74>)
 8003d76:	f043 0308 	orr.w	r3, r3, #8
 8003d7a:	6193      	str	r3, [r2, #24]
 8003d7c:	4b11      	ldr	r3, [pc, #68]	@ (8003dc4 <HAL_I2C_MspInit+0x74>)
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d88:	23c0      	movs	r3, #192	@ 0xc0
 8003d8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d8c:	2312      	movs	r3, #18
 8003d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d90:	2303      	movs	r3, #3
 8003d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d94:	f107 0310 	add.w	r3, r7, #16
 8003d98:	4619      	mov	r1, r3
 8003d9a:	480b      	ldr	r0, [pc, #44]	@ (8003dc8 <HAL_I2C_MspInit+0x78>)
 8003d9c:	f000 fca8 	bl	80046f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003da0:	4b08      	ldr	r3, [pc, #32]	@ (8003dc4 <HAL_I2C_MspInit+0x74>)
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	4a07      	ldr	r2, [pc, #28]	@ (8003dc4 <HAL_I2C_MspInit+0x74>)
 8003da6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003daa:	61d3      	str	r3, [r2, #28]
 8003dac:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <HAL_I2C_MspInit+0x74>)
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003db8:	bf00      	nop
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40005400 	.word	0x40005400
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40010c00 	.word	0x40010c00

08003dcc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd4:	f107 0310 	add.w	r3, r7, #16
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e64 <HAL_SPI_MspInit+0x98>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d137      	bne.n	8003e5c <HAL_SPI_MspInit+0x90>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dec:	4b1e      	ldr	r3, [pc, #120]	@ (8003e68 <HAL_SPI_MspInit+0x9c>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e68 <HAL_SPI_MspInit+0x9c>)
 8003df2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003df6:	6193      	str	r3, [r2, #24]
 8003df8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e68 <HAL_SPI_MspInit+0x9c>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e04:	4b18      	ldr	r3, [pc, #96]	@ (8003e68 <HAL_SPI_MspInit+0x9c>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	4a17      	ldr	r2, [pc, #92]	@ (8003e68 <HAL_SPI_MspInit+0x9c>)
 8003e0a:	f043 0304 	orr.w	r3, r3, #4
 8003e0e:	6193      	str	r3, [r2, #24]
 8003e10:	4b15      	ldr	r3, [pc, #84]	@ (8003e68 <HAL_SPI_MspInit+0x9c>)
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003e1c:	23a0      	movs	r3, #160	@ 0xa0
 8003e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e20:	2302      	movs	r3, #2
 8003e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e24:	2303      	movs	r3, #3
 8003e26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e28:	f107 0310 	add.w	r3, r7, #16
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	480f      	ldr	r0, [pc, #60]	@ (8003e6c <HAL_SPI_MspInit+0xa0>)
 8003e30:	f000 fc5e 	bl	80046f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e34:	2340      	movs	r3, #64	@ 0x40
 8003e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e40:	f107 0310 	add.w	r3, r7, #16
 8003e44:	4619      	mov	r1, r3
 8003e46:	4809      	ldr	r0, [pc, #36]	@ (8003e6c <HAL_SPI_MspInit+0xa0>)
 8003e48:	f000 fc52 	bl	80046f0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2100      	movs	r1, #0
 8003e50:	2023      	movs	r0, #35	@ 0x23
 8003e52:	f000 fb64 	bl	800451e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003e56:	2023      	movs	r0, #35	@ 0x23
 8003e58:	f000 fb7d 	bl	8004556 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003e5c:	bf00      	nop
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40013000 	.word	0x40013000
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40010800 	.word	0x40010800

08003e70 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08c      	sub	sp, #48	@ 0x30
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_Init = {0};
 8003e78:	f107 0320 	add.w	r3, r7, #32
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	60da      	str	r2, [r3, #12]

    if (huart->Instance == USART1) {
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a54      	ldr	r2, [pc, #336]	@ (8003fdc <HAL_UART_MspInit+0x16c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d130      	bne.n	8003ef2 <HAL_UART_MspInit+0x82>
        __HAL_RCC_USART1_CLK_ENABLE();
 8003e90:	4b53      	ldr	r3, [pc, #332]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	4a52      	ldr	r2, [pc, #328]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003e96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e9a:	6193      	str	r3, [r2, #24]
 8003e9c:	4b50      	ldr	r3, [pc, #320]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea8:	4b4d      	ldr	r3, [pc, #308]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003eae:	f043 0304 	orr.w	r3, r3, #4
 8003eb2:	6193      	str	r3, [r2, #24]
 8003eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	69bb      	ldr	r3, [r7, #24]
        /* PA9 -> TX, PA10 -> RX */
        GPIO_Init.Pin       = GPIO_PIN_9;
 8003ec0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ec4:	623b      	str	r3, [r7, #32]
        GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8003ece:	f107 0320 	add.w	r3, r7, #32
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4843      	ldr	r0, [pc, #268]	@ (8003fe4 <HAL_UART_MspInit+0x174>)
 8003ed6:	f000 fc0b 	bl	80046f0 <HAL_GPIO_Init>
        GPIO_Init.Pin       = GPIO_PIN_10;
 8003eda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ede:	623b      	str	r3, [r7, #32]
        GPIO_Init.Mode      = GPIO_MODE_INPUT;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8003ee4:	f107 0320 	add.w	r3, r7, #32
 8003ee8:	4619      	mov	r1, r3
 8003eea:	483e      	ldr	r0, [pc, #248]	@ (8003fe4 <HAL_UART_MspInit+0x174>)
 8003eec:	f000 fc00 	bl	80046f0 <HAL_GPIO_Init>
        HAL_GPIO_Init(GPIOB, &GPIO_Init);
        GPIO_Init.Pin       = GPIO_PIN_11;
        GPIO_Init.Mode      = GPIO_MODE_INPUT;
        HAL_GPIO_Init(GPIOB, &GPIO_Init);
    }
}
 8003ef0:	e070      	b.n	8003fd4 <HAL_UART_MspInit+0x164>
    else if (huart->Instance == USART2) {
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a3c      	ldr	r2, [pc, #240]	@ (8003fe8 <HAL_UART_MspInit+0x178>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d136      	bne.n	8003f6a <HAL_UART_MspInit+0xfa>
        __HAL_RCC_USART2_CLK_ENABLE();
 8003efc:	4b38      	ldr	r3, [pc, #224]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	4a37      	ldr	r2, [pc, #220]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f06:	61d3      	str	r3, [r2, #28]
 8003f08:	4b35      	ldr	r3, [pc, #212]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	697b      	ldr	r3, [r7, #20]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f14:	4b32      	ldr	r3, [pc, #200]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	4a31      	ldr	r2, [pc, #196]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003f1a:	f043 0304 	orr.w	r3, r3, #4
 8003f1e:	6193      	str	r3, [r2, #24]
 8003f20:	4b2f      	ldr	r3, [pc, #188]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	693b      	ldr	r3, [r7, #16]
        GPIO_Init.Pin       = GPIO_PIN_2;
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	623b      	str	r3, [r7, #32]
        GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003f30:	2302      	movs	r3, #2
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003f34:	2303      	movs	r3, #3
 8003f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8003f38:	f107 0320 	add.w	r3, r7, #32
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4829      	ldr	r0, [pc, #164]	@ (8003fe4 <HAL_UART_MspInit+0x174>)
 8003f40:	f000 fbd6 	bl	80046f0 <HAL_GPIO_Init>
        GPIO_Init.Pin       = GPIO_PIN_3;
 8003f44:	2308      	movs	r3, #8
 8003f46:	623b      	str	r3, [r7, #32]
        GPIO_Init.Mode      = GPIO_MODE_INPUT;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_Init);
 8003f4c:	f107 0320 	add.w	r3, r7, #32
 8003f50:	4619      	mov	r1, r3
 8003f52:	4824      	ldr	r0, [pc, #144]	@ (8003fe4 <HAL_UART_MspInit+0x174>)
 8003f54:	f000 fbcc 	bl	80046f0 <HAL_GPIO_Init>
        HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	2026      	movs	r0, #38	@ 0x26
 8003f5e:	f000 fade 	bl	800451e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f62:	2026      	movs	r0, #38	@ 0x26
 8003f64:	f000 faf7 	bl	8004556 <HAL_NVIC_EnableIRQ>
}
 8003f68:	e034      	b.n	8003fd4 <HAL_UART_MspInit+0x164>
    else if (huart->Instance == USART3) {
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fec <HAL_UART_MspInit+0x17c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d12f      	bne.n	8003fd4 <HAL_UART_MspInit+0x164>
        __HAL_RCC_USART3_CLK_ENABLE();
 8003f74:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	4a19      	ldr	r2, [pc, #100]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003f7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f7e:	61d3      	str	r3, [r2, #28]
 8003f80:	4b17      	ldr	r3, [pc, #92]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8c:	4b14      	ldr	r3, [pc, #80]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	4a13      	ldr	r2, [pc, #76]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003f92:	f043 0308 	orr.w	r3, r3, #8
 8003f96:	6193      	str	r3, [r2, #24]
 8003f98:	4b11      	ldr	r3, [pc, #68]	@ (8003fe0 <HAL_UART_MspInit+0x170>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
        GPIO_Init.Pin       = GPIO_PIN_10;
 8003fa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fa8:	623b      	str	r3, [r7, #32]
        GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003faa:	2302      	movs	r3, #2
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_Init);
 8003fb2:	f107 0320 	add.w	r3, r7, #32
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	480d      	ldr	r0, [pc, #52]	@ (8003ff0 <HAL_UART_MspInit+0x180>)
 8003fba:	f000 fb99 	bl	80046f0 <HAL_GPIO_Init>
        GPIO_Init.Pin       = GPIO_PIN_11;
 8003fbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003fc2:	623b      	str	r3, [r7, #32]
        GPIO_Init.Mode      = GPIO_MODE_INPUT;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOB, &GPIO_Init);
 8003fc8:	f107 0320 	add.w	r3, r7, #32
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4808      	ldr	r0, [pc, #32]	@ (8003ff0 <HAL_UART_MspInit+0x180>)
 8003fd0:	f000 fb8e 	bl	80046f0 <HAL_GPIO_Init>
}
 8003fd4:	bf00      	nop
 8003fd6:	3730      	adds	r7, #48	@ 0x30
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40013800 	.word	0x40013800
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40010800 	.word	0x40010800
 8003fe8:	40004400 	.word	0x40004400
 8003fec:	40004800 	.word	0x40004800
 8003ff0:	40010c00 	.word	0x40010c00

08003ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <NMI_Handler+0x4>

08003ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <HardFault_Handler+0x4>

08004004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004008:	bf00      	nop
 800400a:	e7fd      	b.n	8004008 <MemManage_Handler+0x4>

0800400c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004010:	bf00      	nop
 8004012:	e7fd      	b.n	8004010 <BusFault_Handler+0x4>

08004014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004018:	bf00      	nop
 800401a:	e7fd      	b.n	8004018 <UsageFault_Handler+0x4>

0800401c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004044:	f000 f954 	bl	80042f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004048:	bf00      	nop
 800404a:	bd80      	pop	{r7, pc}

0800404c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004050:	4802      	ldr	r0, [pc, #8]	@ (800405c <SPI1_IRQHandler+0x10>)
 8004052:	f002 fde9 	bl	8006c28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	2000027c 	.word	0x2000027c

08004060 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004064:	4802      	ldr	r0, [pc, #8]	@ (8004070 <USART2_IRQHandler+0x10>)
 8004066:	f003 f8ef 	bl	8007248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	2000031c 	.word	0x2000031c

08004074 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004078:	4802      	ldr	r0, [pc, #8]	@ (8004084 <USART3_IRQHandler+0x10>)
 800407a:	f003 f8e5 	bl	8007248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800407e:	bf00      	nop
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000364 	.word	0x20000364

08004088 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return 1;
 800408c:	2301      	movs	r3, #1
}
 800408e:	4618      	mov	r0, r3
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr

08004096 <_kill>:

int _kill(int pid, int sig)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80040a0:	f004 fc22 	bl	80088e8 <__errno>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2216      	movs	r2, #22
 80040a8:	601a      	str	r2, [r3, #0]
  return -1;
 80040aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <_exit>:

void _exit (int status)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040be:	f04f 31ff 	mov.w	r1, #4294967295
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff ffe7 	bl	8004096 <_kill>
  while (1) {}    /* Make sure we hang here */
 80040c8:	bf00      	nop
 80040ca:	e7fd      	b.n	80040c8 <_exit+0x12>

080040cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e00a      	b.n	80040f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040de:	f3af 8000 	nop.w
 80040e2:	4601      	mov	r1, r0
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	60ba      	str	r2, [r7, #8]
 80040ea:	b2ca      	uxtb	r2, r1
 80040ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	3301      	adds	r3, #1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	dbf0      	blt.n	80040de <_read+0x12>
  }

  return len;
 80040fc:	687b      	ldr	r3, [r7, #4]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b086      	sub	sp, #24
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e009      	b.n	800412c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	60ba      	str	r2, [r7, #8]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	3301      	adds	r3, #1
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	dbf1      	blt.n	8004118 <_write+0x12>
  }
  return len;
 8004134:	687b      	ldr	r3, [r7, #4]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <_close>:

int _close(int file)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004164:	605a      	str	r2, [r3, #4]
  return 0;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <_isatty>:

int _isatty(int file)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800417a:	2301      	movs	r3, #1
}
 800417c:	4618      	mov	r0, r3
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr
	...

080041a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041a8:	4a14      	ldr	r2, [pc, #80]	@ (80041fc <_sbrk+0x5c>)
 80041aa:	4b15      	ldr	r3, [pc, #84]	@ (8004200 <_sbrk+0x60>)
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041b4:	4b13      	ldr	r3, [pc, #76]	@ (8004204 <_sbrk+0x64>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d102      	bne.n	80041c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <_sbrk+0x64>)
 80041be:	4a12      	ldr	r2, [pc, #72]	@ (8004208 <_sbrk+0x68>)
 80041c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041c2:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <_sbrk+0x64>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d207      	bcs.n	80041e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041d0:	f004 fb8a 	bl	80088e8 <__errno>
 80041d4:	4603      	mov	r3, r0
 80041d6:	220c      	movs	r2, #12
 80041d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	e009      	b.n	80041f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041e0:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <_sbrk+0x64>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041e6:	4b07      	ldr	r3, [pc, #28]	@ (8004204 <_sbrk+0x64>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	4a05      	ldr	r2, [pc, #20]	@ (8004204 <_sbrk+0x64>)
 80041f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20005000 	.word	0x20005000
 8004200:	00000400 	.word	0x00000400
 8004204:	20000548 	.word	0x20000548
 8004208:	200006a0 	.word	0x200006a0

0800420c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004218:	f7ff fff8 	bl	800420c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800421c:	480b      	ldr	r0, [pc, #44]	@ (800424c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800421e:	490c      	ldr	r1, [pc, #48]	@ (8004250 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004220:	4a0c      	ldr	r2, [pc, #48]	@ (8004254 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004224:	e002      	b.n	800422c <LoopCopyDataInit>

08004226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800422a:	3304      	adds	r3, #4

0800422c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800422c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800422e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004230:	d3f9      	bcc.n	8004226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004232:	4a09      	ldr	r2, [pc, #36]	@ (8004258 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004234:	4c09      	ldr	r4, [pc, #36]	@ (800425c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004238:	e001      	b.n	800423e <LoopFillZerobss>

0800423a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800423a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800423c:	3204      	adds	r2, #4

0800423e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800423e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004240:	d3fb      	bcc.n	800423a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004242:	f004 fb57 	bl	80088f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004246:	f7fe ff93 	bl	8003170 <main>
  bx lr
 800424a:	4770      	bx	lr
  ldr r0, =_sdata
 800424c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004250:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004254:	0800bb6c 	.word	0x0800bb6c
  ldr r2, =_sbss
 8004258:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800425c:	2000069c 	.word	0x2000069c

08004260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004260:	e7fe      	b.n	8004260 <ADC1_2_IRQHandler>
	...

08004264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004268:	4b08      	ldr	r3, [pc, #32]	@ (800428c <HAL_Init+0x28>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a07      	ldr	r2, [pc, #28]	@ (800428c <HAL_Init+0x28>)
 800426e:	f043 0310 	orr.w	r3, r3, #16
 8004272:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004274:	2003      	movs	r0, #3
 8004276:	f000 f947 	bl	8004508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800427a:	200f      	movs	r0, #15
 800427c:	f000 f808 	bl	8004290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004280:	f7ff fd34 	bl	8003cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40022000 	.word	0x40022000

08004290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004298:	4b12      	ldr	r3, [pc, #72]	@ (80042e4 <HAL_InitTick+0x54>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b12      	ldr	r3, [pc, #72]	@ (80042e8 <HAL_InitTick+0x58>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	4619      	mov	r1, r3
 80042a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80042aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 f95f 	bl	8004572 <HAL_SYSTICK_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e00e      	b.n	80042dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b0f      	cmp	r3, #15
 80042c2:	d80a      	bhi.n	80042da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042c4:	2200      	movs	r2, #0
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295
 80042cc:	f000 f927 	bl	800451e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042d0:	4a06      	ldr	r2, [pc, #24]	@ (80042ec <HAL_InitTick+0x5c>)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	e000      	b.n	80042dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20000000 	.word	0x20000000
 80042e8:	20000008 	.word	0x20000008
 80042ec:	20000004 	.word	0x20000004

080042f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042f4:	4b05      	ldr	r3, [pc, #20]	@ (800430c <HAL_IncTick+0x1c>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b05      	ldr	r3, [pc, #20]	@ (8004310 <HAL_IncTick+0x20>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4413      	add	r3, r2
 8004300:	4a03      	ldr	r2, [pc, #12]	@ (8004310 <HAL_IncTick+0x20>)
 8004302:	6013      	str	r3, [r2, #0]
}
 8004304:	bf00      	nop
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	20000008 	.word	0x20000008
 8004310:	2000054c 	.word	0x2000054c

08004314 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return uwTick;
 8004318:	4b02      	ldr	r3, [pc, #8]	@ (8004324 <HAL_GetTick+0x10>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	2000054c 	.word	0x2000054c

08004328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004330:	f7ff fff0 	bl	8004314 <HAL_GetTick>
 8004334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d005      	beq.n	800434e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004342:	4b0a      	ldr	r3, [pc, #40]	@ (800436c <HAL_Delay+0x44>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800434e:	bf00      	nop
 8004350:	f7ff ffe0 	bl	8004314 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	429a      	cmp	r2, r3
 800435e:	d8f7      	bhi.n	8004350 <HAL_Delay+0x28>
  {
  }
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000008 	.word	0x20000008

08004370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004380:	4b0c      	ldr	r3, [pc, #48]	@ (80043b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800438c:	4013      	ands	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800439c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043a2:	4a04      	ldr	r2, [pc, #16]	@ (80043b4 <__NVIC_SetPriorityGrouping+0x44>)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	60d3      	str	r3, [r2, #12]
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	e000ed00 	.word	0xe000ed00

080043b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043bc:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <__NVIC_GetPriorityGrouping+0x18>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	0a1b      	lsrs	r3, r3, #8
 80043c2:	f003 0307 	and.w	r3, r3, #7
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	db0b      	blt.n	80043fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	f003 021f 	and.w	r2, r3, #31
 80043ec:	4906      	ldr	r1, [pc, #24]	@ (8004408 <__NVIC_EnableIRQ+0x34>)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	2001      	movs	r0, #1
 80043f6:	fa00 f202 	lsl.w	r2, r0, r2
 80043fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	e000e100 	.word	0xe000e100

0800440c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441c:	2b00      	cmp	r3, #0
 800441e:	db0a      	blt.n	8004436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	b2da      	uxtb	r2, r3
 8004424:	490c      	ldr	r1, [pc, #48]	@ (8004458 <__NVIC_SetPriority+0x4c>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	0112      	lsls	r2, r2, #4
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	440b      	add	r3, r1
 8004430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004434:	e00a      	b.n	800444c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4908      	ldr	r1, [pc, #32]	@ (800445c <__NVIC_SetPriority+0x50>)
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	3b04      	subs	r3, #4
 8004444:	0112      	lsls	r2, r2, #4
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	440b      	add	r3, r1
 800444a:	761a      	strb	r2, [r3, #24]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	e000e100 	.word	0xe000e100
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004460:	b480      	push	{r7}
 8004462:	b089      	sub	sp, #36	@ 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f1c3 0307 	rsb	r3, r3, #7
 800447a:	2b04      	cmp	r3, #4
 800447c:	bf28      	it	cs
 800447e:	2304      	movcs	r3, #4
 8004480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3304      	adds	r3, #4
 8004486:	2b06      	cmp	r3, #6
 8004488:	d902      	bls.n	8004490 <NVIC_EncodePriority+0x30>
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3b03      	subs	r3, #3
 800448e:	e000      	b.n	8004492 <NVIC_EncodePriority+0x32>
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	f04f 32ff 	mov.w	r2, #4294967295
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43da      	mvns	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	401a      	ands	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a8:	f04f 31ff 	mov.w	r1, #4294967295
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	43d9      	mvns	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b8:	4313      	orrs	r3, r2
         );
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	@ 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr

080044c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044d4:	d301      	bcc.n	80044da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044d6:	2301      	movs	r3, #1
 80044d8:	e00f      	b.n	80044fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044da:	4a0a      	ldr	r2, [pc, #40]	@ (8004504 <SysTick_Config+0x40>)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3b01      	subs	r3, #1
 80044e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044e2:	210f      	movs	r1, #15
 80044e4:	f04f 30ff 	mov.w	r0, #4294967295
 80044e8:	f7ff ff90 	bl	800440c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044ec:	4b05      	ldr	r3, [pc, #20]	@ (8004504 <SysTick_Config+0x40>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044f2:	4b04      	ldr	r3, [pc, #16]	@ (8004504 <SysTick_Config+0x40>)
 80044f4:	2207      	movs	r2, #7
 80044f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	e000e010 	.word	0xe000e010

08004508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff ff2d 	bl	8004370 <__NVIC_SetPriorityGrouping>
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	4603      	mov	r3, r0
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004530:	f7ff ff42 	bl	80043b8 <__NVIC_GetPriorityGrouping>
 8004534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	6978      	ldr	r0, [r7, #20]
 800453c:	f7ff ff90 	bl	8004460 <NVIC_EncodePriority>
 8004540:	4602      	mov	r2, r0
 8004542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004546:	4611      	mov	r1, r2
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff ff5f 	bl	800440c <__NVIC_SetPriority>
}
 800454e:	bf00      	nop
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	4603      	mov	r3, r0
 800455e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff ff35 	bl	80043d4 <__NVIC_EnableIRQ>
}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff ffa2 	bl	80044c4 <SysTick_Config>
 8004580:	4603      	mov	r3, r0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d008      	beq.n	80045b4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2204      	movs	r2, #4
 80045a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e020      	b.n	80045f6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 020e 	bic.w	r2, r2, #14
 80045c2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045dc:	2101      	movs	r1, #1
 80045de:	fa01 f202 	lsl.w	r2, r1, r2
 80045e2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d005      	beq.n	8004624 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2204      	movs	r2, #4
 800461c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
 8004622:	e051      	b.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 020e 	bic.w	r2, r2, #14
 8004632:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a22      	ldr	r2, [pc, #136]	@ (80046d4 <HAL_DMA_Abort_IT+0xd4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d029      	beq.n	80046a2 <HAL_DMA_Abort_IT+0xa2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a21      	ldr	r2, [pc, #132]	@ (80046d8 <HAL_DMA_Abort_IT+0xd8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d022      	beq.n	800469e <HAL_DMA_Abort_IT+0x9e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1f      	ldr	r2, [pc, #124]	@ (80046dc <HAL_DMA_Abort_IT+0xdc>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01a      	beq.n	8004698 <HAL_DMA_Abort_IT+0x98>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1e      	ldr	r2, [pc, #120]	@ (80046e0 <HAL_DMA_Abort_IT+0xe0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d012      	beq.n	8004692 <HAL_DMA_Abort_IT+0x92>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1c      	ldr	r2, [pc, #112]	@ (80046e4 <HAL_DMA_Abort_IT+0xe4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00a      	beq.n	800468c <HAL_DMA_Abort_IT+0x8c>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1b      	ldr	r2, [pc, #108]	@ (80046e8 <HAL_DMA_Abort_IT+0xe8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d102      	bne.n	8004686 <HAL_DMA_Abort_IT+0x86>
 8004680:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004684:	e00e      	b.n	80046a4 <HAL_DMA_Abort_IT+0xa4>
 8004686:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800468a:	e00b      	b.n	80046a4 <HAL_DMA_Abort_IT+0xa4>
 800468c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004690:	e008      	b.n	80046a4 <HAL_DMA_Abort_IT+0xa4>
 8004692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004696:	e005      	b.n	80046a4 <HAL_DMA_Abort_IT+0xa4>
 8004698:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800469c:	e002      	b.n	80046a4 <HAL_DMA_Abort_IT+0xa4>
 800469e:	2310      	movs	r3, #16
 80046a0:	e000      	b.n	80046a4 <HAL_DMA_Abort_IT+0xa4>
 80046a2:	2301      	movs	r3, #1
 80046a4:	4a11      	ldr	r2, [pc, #68]	@ (80046ec <HAL_DMA_Abort_IT+0xec>)
 80046a6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	4798      	blx	r3
    } 
  }
  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40020008 	.word	0x40020008
 80046d8:	4002001c 	.word	0x4002001c
 80046dc:	40020030 	.word	0x40020030
 80046e0:	40020044 	.word	0x40020044
 80046e4:	40020058 	.word	0x40020058
 80046e8:	4002006c 	.word	0x4002006c
 80046ec:	40020000 	.word	0x40020000

080046f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b08b      	sub	sp, #44	@ 0x2c
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046fa:	2300      	movs	r3, #0
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046fe:	2300      	movs	r3, #0
 8004700:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004702:	e169      	b.n	80049d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004704:	2201      	movs	r2, #1
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	429a      	cmp	r2, r3
 800471e:	f040 8158 	bne.w	80049d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4a9a      	ldr	r2, [pc, #616]	@ (8004990 <HAL_GPIO_Init+0x2a0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d05e      	beq.n	80047ea <HAL_GPIO_Init+0xfa>
 800472c:	4a98      	ldr	r2, [pc, #608]	@ (8004990 <HAL_GPIO_Init+0x2a0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d875      	bhi.n	800481e <HAL_GPIO_Init+0x12e>
 8004732:	4a98      	ldr	r2, [pc, #608]	@ (8004994 <HAL_GPIO_Init+0x2a4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d058      	beq.n	80047ea <HAL_GPIO_Init+0xfa>
 8004738:	4a96      	ldr	r2, [pc, #600]	@ (8004994 <HAL_GPIO_Init+0x2a4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d86f      	bhi.n	800481e <HAL_GPIO_Init+0x12e>
 800473e:	4a96      	ldr	r2, [pc, #600]	@ (8004998 <HAL_GPIO_Init+0x2a8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d052      	beq.n	80047ea <HAL_GPIO_Init+0xfa>
 8004744:	4a94      	ldr	r2, [pc, #592]	@ (8004998 <HAL_GPIO_Init+0x2a8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d869      	bhi.n	800481e <HAL_GPIO_Init+0x12e>
 800474a:	4a94      	ldr	r2, [pc, #592]	@ (800499c <HAL_GPIO_Init+0x2ac>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d04c      	beq.n	80047ea <HAL_GPIO_Init+0xfa>
 8004750:	4a92      	ldr	r2, [pc, #584]	@ (800499c <HAL_GPIO_Init+0x2ac>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d863      	bhi.n	800481e <HAL_GPIO_Init+0x12e>
 8004756:	4a92      	ldr	r2, [pc, #584]	@ (80049a0 <HAL_GPIO_Init+0x2b0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d046      	beq.n	80047ea <HAL_GPIO_Init+0xfa>
 800475c:	4a90      	ldr	r2, [pc, #576]	@ (80049a0 <HAL_GPIO_Init+0x2b0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d85d      	bhi.n	800481e <HAL_GPIO_Init+0x12e>
 8004762:	2b12      	cmp	r3, #18
 8004764:	d82a      	bhi.n	80047bc <HAL_GPIO_Init+0xcc>
 8004766:	2b12      	cmp	r3, #18
 8004768:	d859      	bhi.n	800481e <HAL_GPIO_Init+0x12e>
 800476a:	a201      	add	r2, pc, #4	@ (adr r2, 8004770 <HAL_GPIO_Init+0x80>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	080047eb 	.word	0x080047eb
 8004774:	080047c5 	.word	0x080047c5
 8004778:	080047d7 	.word	0x080047d7
 800477c:	08004819 	.word	0x08004819
 8004780:	0800481f 	.word	0x0800481f
 8004784:	0800481f 	.word	0x0800481f
 8004788:	0800481f 	.word	0x0800481f
 800478c:	0800481f 	.word	0x0800481f
 8004790:	0800481f 	.word	0x0800481f
 8004794:	0800481f 	.word	0x0800481f
 8004798:	0800481f 	.word	0x0800481f
 800479c:	0800481f 	.word	0x0800481f
 80047a0:	0800481f 	.word	0x0800481f
 80047a4:	0800481f 	.word	0x0800481f
 80047a8:	0800481f 	.word	0x0800481f
 80047ac:	0800481f 	.word	0x0800481f
 80047b0:	0800481f 	.word	0x0800481f
 80047b4:	080047cd 	.word	0x080047cd
 80047b8:	080047e1 	.word	0x080047e1
 80047bc:	4a79      	ldr	r2, [pc, #484]	@ (80049a4 <HAL_GPIO_Init+0x2b4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80047c2:	e02c      	b.n	800481e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	623b      	str	r3, [r7, #32]
          break;
 80047ca:	e029      	b.n	8004820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	3304      	adds	r3, #4
 80047d2:	623b      	str	r3, [r7, #32]
          break;
 80047d4:	e024      	b.n	8004820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	3308      	adds	r3, #8
 80047dc:	623b      	str	r3, [r7, #32]
          break;
 80047de:	e01f      	b.n	8004820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	330c      	adds	r3, #12
 80047e6:	623b      	str	r3, [r7, #32]
          break;
 80047e8:	e01a      	b.n	8004820 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d102      	bne.n	80047f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047f2:	2304      	movs	r3, #4
 80047f4:	623b      	str	r3, [r7, #32]
          break;
 80047f6:	e013      	b.n	8004820 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d105      	bne.n	800480c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004800:	2308      	movs	r3, #8
 8004802:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	611a      	str	r2, [r3, #16]
          break;
 800480a:	e009      	b.n	8004820 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800480c:	2308      	movs	r3, #8
 800480e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	615a      	str	r2, [r3, #20]
          break;
 8004816:	e003      	b.n	8004820 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004818:	2300      	movs	r3, #0
 800481a:	623b      	str	r3, [r7, #32]
          break;
 800481c:	e000      	b.n	8004820 <HAL_GPIO_Init+0x130>
          break;
 800481e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2bff      	cmp	r3, #255	@ 0xff
 8004824:	d801      	bhi.n	800482a <HAL_GPIO_Init+0x13a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	e001      	b.n	800482e <HAL_GPIO_Init+0x13e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3304      	adds	r3, #4
 800482e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2bff      	cmp	r3, #255	@ 0xff
 8004834:	d802      	bhi.n	800483c <HAL_GPIO_Init+0x14c>
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	e002      	b.n	8004842 <HAL_GPIO_Init+0x152>
 800483c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483e:	3b08      	subs	r3, #8
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	210f      	movs	r1, #15
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	401a      	ands	r2, r3
 8004854:	6a39      	ldr	r1, [r7, #32]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	fa01 f303 	lsl.w	r3, r1, r3
 800485c:	431a      	orrs	r2, r3
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 80b1 	beq.w	80049d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004870:	4b4d      	ldr	r3, [pc, #308]	@ (80049a8 <HAL_GPIO_Init+0x2b8>)
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	4a4c      	ldr	r2, [pc, #304]	@ (80049a8 <HAL_GPIO_Init+0x2b8>)
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	6193      	str	r3, [r2, #24]
 800487c:	4b4a      	ldr	r3, [pc, #296]	@ (80049a8 <HAL_GPIO_Init+0x2b8>)
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004888:	4a48      	ldr	r2, [pc, #288]	@ (80049ac <HAL_GPIO_Init+0x2bc>)
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	089b      	lsrs	r3, r3, #2
 800488e:	3302      	adds	r3, #2
 8004890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004894:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	220f      	movs	r2, #15
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4013      	ands	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a40      	ldr	r2, [pc, #256]	@ (80049b0 <HAL_GPIO_Init+0x2c0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d013      	beq.n	80048dc <HAL_GPIO_Init+0x1ec>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3f      	ldr	r2, [pc, #252]	@ (80049b4 <HAL_GPIO_Init+0x2c4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00d      	beq.n	80048d8 <HAL_GPIO_Init+0x1e8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3e      	ldr	r2, [pc, #248]	@ (80049b8 <HAL_GPIO_Init+0x2c8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d007      	beq.n	80048d4 <HAL_GPIO_Init+0x1e4>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3d      	ldr	r2, [pc, #244]	@ (80049bc <HAL_GPIO_Init+0x2cc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d101      	bne.n	80048d0 <HAL_GPIO_Init+0x1e0>
 80048cc:	2303      	movs	r3, #3
 80048ce:	e006      	b.n	80048de <HAL_GPIO_Init+0x1ee>
 80048d0:	2304      	movs	r3, #4
 80048d2:	e004      	b.n	80048de <HAL_GPIO_Init+0x1ee>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e002      	b.n	80048de <HAL_GPIO_Init+0x1ee>
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <HAL_GPIO_Init+0x1ee>
 80048dc:	2300      	movs	r3, #0
 80048de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e0:	f002 0203 	and.w	r2, r2, #3
 80048e4:	0092      	lsls	r2, r2, #2
 80048e6:	4093      	lsls	r3, r2
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048ee:	492f      	ldr	r1, [pc, #188]	@ (80049ac <HAL_GPIO_Init+0x2bc>)
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	089b      	lsrs	r3, r3, #2
 80048f4:	3302      	adds	r3, #2
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d006      	beq.n	8004916 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004908:	4b2d      	ldr	r3, [pc, #180]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	492c      	ldr	r1, [pc, #176]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	4313      	orrs	r3, r2
 8004912:	608b      	str	r3, [r1, #8]
 8004914:	e006      	b.n	8004924 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004916:	4b2a      	ldr	r3, [pc, #168]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	43db      	mvns	r3, r3
 800491e:	4928      	ldr	r1, [pc, #160]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 8004920:	4013      	ands	r3, r2
 8004922:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d006      	beq.n	800493e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004930:	4b23      	ldr	r3, [pc, #140]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	4922      	ldr	r1, [pc, #136]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	4313      	orrs	r3, r2
 800493a:	60cb      	str	r3, [r1, #12]
 800493c:	e006      	b.n	800494c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800493e:	4b20      	ldr	r3, [pc, #128]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	43db      	mvns	r3, r3
 8004946:	491e      	ldr	r1, [pc, #120]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 8004948:	4013      	ands	r3, r2
 800494a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d006      	beq.n	8004966 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004958:	4b19      	ldr	r3, [pc, #100]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	4918      	ldr	r1, [pc, #96]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	4313      	orrs	r3, r2
 8004962:	604b      	str	r3, [r1, #4]
 8004964:	e006      	b.n	8004974 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004966:	4b16      	ldr	r3, [pc, #88]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	43db      	mvns	r3, r3
 800496e:	4914      	ldr	r1, [pc, #80]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 8004970:	4013      	ands	r3, r2
 8004972:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d021      	beq.n	80049c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004980:	4b0f      	ldr	r3, [pc, #60]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	490e      	ldr	r1, [pc, #56]	@ (80049c0 <HAL_GPIO_Init+0x2d0>)
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	4313      	orrs	r3, r2
 800498a:	600b      	str	r3, [r1, #0]
 800498c:	e021      	b.n	80049d2 <HAL_GPIO_Init+0x2e2>
 800498e:	bf00      	nop
 8004990:	10320000 	.word	0x10320000
 8004994:	10310000 	.word	0x10310000
 8004998:	10220000 	.word	0x10220000
 800499c:	10210000 	.word	0x10210000
 80049a0:	10120000 	.word	0x10120000
 80049a4:	10110000 	.word	0x10110000
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40010800 	.word	0x40010800
 80049b4:	40010c00 	.word	0x40010c00
 80049b8:	40011000 	.word	0x40011000
 80049bc:	40011400 	.word	0x40011400
 80049c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049c4:	4b0b      	ldr	r3, [pc, #44]	@ (80049f4 <HAL_GPIO_Init+0x304>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	43db      	mvns	r3, r3
 80049cc:	4909      	ldr	r1, [pc, #36]	@ (80049f4 <HAL_GPIO_Init+0x304>)
 80049ce:	4013      	ands	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	3301      	adds	r3, #1
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	fa22 f303 	lsr.w	r3, r2, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f47f ae8e 	bne.w	8004704 <HAL_GPIO_Init+0x14>
  }
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	372c      	adds	r7, #44	@ 0x2c
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr
 80049f4:	40010400 	.word	0x40010400

080049f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	807b      	strh	r3, [r7, #2]
 8004a04:	4613      	mov	r3, r2
 8004a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a08:	787b      	ldrb	r3, [r7, #1]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a0e:	887a      	ldrh	r2, [r7, #2]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a14:	e003      	b.n	8004a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a16:	887b      	ldrh	r3, [r7, #2]
 8004a18:	041a      	lsls	r2, r3, #16
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	611a      	str	r2, [r3, #16]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e12b      	b.n	8004c92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff f97e 	bl	8003d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2224      	movs	r2, #36	@ 0x24
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f001 fbfc 	bl	8006288 <HAL_RCC_GetPCLK1Freq>
 8004a90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4a81      	ldr	r2, [pc, #516]	@ (8004c9c <HAL_I2C_Init+0x274>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d807      	bhi.n	8004aac <HAL_I2C_Init+0x84>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a80      	ldr	r2, [pc, #512]	@ (8004ca0 <HAL_I2C_Init+0x278>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bf94      	ite	ls
 8004aa4:	2301      	movls	r3, #1
 8004aa6:	2300      	movhi	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	e006      	b.n	8004aba <HAL_I2C_Init+0x92>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4a7d      	ldr	r2, [pc, #500]	@ (8004ca4 <HAL_I2C_Init+0x27c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	bf94      	ite	ls
 8004ab4:	2301      	movls	r3, #1
 8004ab6:	2300      	movhi	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e0e7      	b.n	8004c92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4a78      	ldr	r2, [pc, #480]	@ (8004ca8 <HAL_I2C_Init+0x280>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	0c9b      	lsrs	r3, r3, #18
 8004acc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a6a      	ldr	r2, [pc, #424]	@ (8004c9c <HAL_I2C_Init+0x274>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d802      	bhi.n	8004afc <HAL_I2C_Init+0xd4>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	3301      	adds	r3, #1
 8004afa:	e009      	b.n	8004b10 <HAL_I2C_Init+0xe8>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	4a69      	ldr	r2, [pc, #420]	@ (8004cac <HAL_I2C_Init+0x284>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	099b      	lsrs	r3, r3, #6
 8004b0e:	3301      	adds	r3, #1
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	430b      	orrs	r3, r1
 8004b16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	495c      	ldr	r1, [pc, #368]	@ (8004c9c <HAL_I2C_Init+0x274>)
 8004b2c:	428b      	cmp	r3, r1
 8004b2e:	d819      	bhi.n	8004b64 <HAL_I2C_Init+0x13c>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	1e59      	subs	r1, r3, #1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b3e:	1c59      	adds	r1, r3, #1
 8004b40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b44:	400b      	ands	r3, r1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_I2C_Init+0x138>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1e59      	subs	r1, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b58:	3301      	adds	r3, #1
 8004b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5e:	e051      	b.n	8004c04 <HAL_I2C_Init+0x1dc>
 8004b60:	2304      	movs	r3, #4
 8004b62:	e04f      	b.n	8004c04 <HAL_I2C_Init+0x1dc>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d111      	bne.n	8004b90 <HAL_I2C_Init+0x168>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1e58      	subs	r0, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	440b      	add	r3, r1
 8004b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e012      	b.n	8004bb6 <HAL_I2C_Init+0x18e>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	1e58      	subs	r0, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6859      	ldr	r1, [r3, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	0099      	lsls	r1, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bf0c      	ite	eq
 8004bb0:	2301      	moveq	r3, #1
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_I2C_Init+0x196>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e022      	b.n	8004c04 <HAL_I2C_Init+0x1dc>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10e      	bne.n	8004be4 <HAL_I2C_Init+0x1bc>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1e58      	subs	r0, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6859      	ldr	r1, [r3, #4]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	440b      	add	r3, r1
 8004bd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd8:	3301      	adds	r3, #1
 8004bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004be2:	e00f      	b.n	8004c04 <HAL_I2C_Init+0x1dc>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	1e58      	subs	r0, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6859      	ldr	r1, [r3, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	0099      	lsls	r1, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	6809      	ldr	r1, [r1, #0]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6911      	ldr	r1, [r2, #16]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	68d2      	ldr	r2, [r2, #12]
 8004c3e:	4311      	orrs	r1, r2
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	000186a0 	.word	0x000186a0
 8004ca0:	001e847f 	.word	0x001e847f
 8004ca4:	003d08ff 	.word	0x003d08ff
 8004ca8:	431bde83 	.word	0x431bde83
 8004cac:	10624dd3 	.word	0x10624dd3

08004cb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	4608      	mov	r0, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	817b      	strh	r3, [r7, #10]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	813b      	strh	r3, [r7, #8]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cca:	f7ff fb23 	bl	8004314 <HAL_GetTick>
 8004cce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	f040 80d9 	bne.w	8004e90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	2319      	movs	r3, #25
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	496d      	ldr	r1, [pc, #436]	@ (8004e9c <HAL_I2C_Mem_Write+0x1ec>)
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fccd 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e0cc      	b.n	8004e92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_I2C_Mem_Write+0x56>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e0c5      	b.n	8004e92 <HAL_I2C_Mem_Write+0x1e2>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d007      	beq.n	8004d2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2221      	movs	r2, #33	@ 0x21
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2240      	movs	r2, #64	@ 0x40
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a3a      	ldr	r2, [r7, #32]
 8004d56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4a4d      	ldr	r2, [pc, #308]	@ (8004ea0 <HAL_I2C_Mem_Write+0x1f0>)
 8004d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d6e:	88f8      	ldrh	r0, [r7, #6]
 8004d70:	893a      	ldrh	r2, [r7, #8]
 8004d72:	8979      	ldrh	r1, [r7, #10]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fb04 	bl	800538c <I2C_RequestMemoryWrite>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d052      	beq.n	8004e30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e081      	b.n	8004e92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 fd92 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d107      	bne.n	8004db6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004db4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e06b      	b.n	8004e92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	781a      	ldrb	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d11b      	bne.n	8004e30 <HAL_I2C_Mem_Write+0x180>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d017      	beq.n	8004e30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	781a      	ldrb	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1aa      	bne.n	8004d8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fd85 	bl	800594c <I2C_WaitOnBTFFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00d      	beq.n	8004e64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d107      	bne.n	8004e60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e016      	b.n	8004e92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e000      	b.n	8004e92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
  }
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	00100002 	.word	0x00100002
 8004ea0:	ffff0000 	.word	0xffff0000

08004ea4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08c      	sub	sp, #48	@ 0x30
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	4608      	mov	r0, r1
 8004eae:	4611      	mov	r1, r2
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	817b      	strh	r3, [r7, #10]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	813b      	strh	r3, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ec2:	f7ff fa27 	bl	8004314 <HAL_GetTick>
 8004ec6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	f040 8250 	bne.w	8005376 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2319      	movs	r3, #25
 8004edc:	2201      	movs	r2, #1
 8004ede:	4982      	ldr	r1, [pc, #520]	@ (80050e8 <HAL_I2C_Mem_Read+0x244>)
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fbd1 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004eec:	2302      	movs	r3, #2
 8004eee:	e243      	b.n	8005378 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_I2C_Mem_Read+0x5a>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e23c      	b.n	8005378 <HAL_I2C_Mem_Read+0x4d4>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d007      	beq.n	8004f24 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2222      	movs	r2, #34	@ 0x22
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2240      	movs	r2, #64	@ 0x40
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a62      	ldr	r2, [pc, #392]	@ (80050ec <HAL_I2C_Mem_Read+0x248>)
 8004f64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f66:	88f8      	ldrh	r0, [r7, #6]
 8004f68:	893a      	ldrh	r2, [r7, #8]
 8004f6a:	8979      	ldrh	r1, [r7, #10]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	4603      	mov	r3, r0
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fa9e 	bl	80054b8 <I2C_RequestMemoryRead>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e1f8      	b.n	8005378 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d113      	bne.n	8004fb6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	61fb      	str	r3, [r7, #28]
 8004fa2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	e1cc      	b.n	8005350 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d11e      	bne.n	8004ffc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004fce:	b672      	cpsid	i
}
 8004fd0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61bb      	str	r3, [r7, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ff8:	b662      	cpsie	i
}
 8004ffa:	e035      	b.n	8005068 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005000:	2b02      	cmp	r3, #2
 8005002:	d11e      	bne.n	8005042 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005012:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005014:	b672      	cpsid	i
}
 8005016:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800503c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800503e:	b662      	cpsie	i
}
 8005040:	e012      	b.n	8005068 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005050:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005068:	e172      	b.n	8005350 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506e:	2b03      	cmp	r3, #3
 8005070:	f200 811f 	bhi.w	80052b2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005078:	2b01      	cmp	r3, #1
 800507a:	d123      	bne.n	80050c4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800507e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 fcab 	bl	80059dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e173      	b.n	8005378 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050c2:	e145      	b.n	8005350 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d152      	bne.n	8005172 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d2:	2200      	movs	r2, #0
 80050d4:	4906      	ldr	r1, [pc, #24]	@ (80050f0 <HAL_I2C_Mem_Read+0x24c>)
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fad6 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e148      	b.n	8005378 <HAL_I2C_Mem_Read+0x4d4>
 80050e6:	bf00      	nop
 80050e8:	00100002 	.word	0x00100002
 80050ec:	ffff0000 	.word	0xffff0000
 80050f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80050f4:	b672      	cpsid	i
}
 80050f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005106:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800513a:	b662      	cpsie	i
}
 800513c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800515a:	3b01      	subs	r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005170:	e0ee      	b.n	8005350 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005178:	2200      	movs	r2, #0
 800517a:	4981      	ldr	r1, [pc, #516]	@ (8005380 <HAL_I2C_Mem_Read+0x4dc>)
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fa83 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0f5      	b.n	8005378 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800519a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800519c:	b672      	cpsid	i
}
 800519e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80051d2:	4b6c      	ldr	r3, [pc, #432]	@ (8005384 <HAL_I2C_Mem_Read+0x4e0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	08db      	lsrs	r3, r3, #3
 80051d8:	4a6b      	ldr	r2, [pc, #428]	@ (8005388 <HAL_I2C_Mem_Read+0x4e4>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	0a1a      	lsrs	r2, r3, #8
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	00da      	lsls	r2, r3, #3
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d118      	bne.n	800522a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	f043 0220 	orr.w	r2, r3, #32
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800521a:	b662      	cpsie	i
}
 800521c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e0a6      	b.n	8005378 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b04      	cmp	r3, #4
 8005236:	d1d9      	bne.n	80051ec <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800527a:	b662      	cpsie	i
}
 800527c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052b0:	e04e      	b.n	8005350 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 fb90 	bl	80059dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e058      	b.n	8005378 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0304 	and.w	r3, r3, #4
 8005302:	2b04      	cmp	r3, #4
 8005304:	d124      	bne.n	8005350 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530a:	2b03      	cmp	r3, #3
 800530c:	d107      	bne.n	800531e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800531c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005354:	2b00      	cmp	r3, #0
 8005356:	f47f ae88 	bne.w	800506a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	e000      	b.n	8005378 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8005376:	2302      	movs	r3, #2
  }
}
 8005378:	4618      	mov	r0, r3
 800537a:	3728      	adds	r7, #40	@ 0x28
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	00010004 	.word	0x00010004
 8005384:	20000000 	.word	0x20000000
 8005388:	14f8b589 	.word	0x14f8b589

0800538c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	4608      	mov	r0, r1
 8005396:	4611      	mov	r1, r2
 8005398:	461a      	mov	r2, r3
 800539a:	4603      	mov	r3, r0
 800539c:	817b      	strh	r3, [r7, #10]
 800539e:	460b      	mov	r3, r1
 80053a0:	813b      	strh	r3, [r7, #8]
 80053a2:	4613      	mov	r3, r2
 80053a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	2200      	movs	r2, #0
 80053be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f960 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00d      	beq.n	80053ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053dc:	d103      	bne.n	80053e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e05f      	b.n	80054aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ea:	897b      	ldrh	r3, [r7, #10]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	461a      	mov	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	6a3a      	ldr	r2, [r7, #32]
 80053fe:	492d      	ldr	r1, [pc, #180]	@ (80054b4 <I2C_RequestMemoryWrite+0x128>)
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f9bb 	bl	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e04c      	b.n	80054aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005428:	6a39      	ldr	r1, [r7, #32]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fa46 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00d      	beq.n	8005452 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543a:	2b04      	cmp	r3, #4
 800543c:	d107      	bne.n	800544e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800544c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e02b      	b.n	80054aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d105      	bne.n	8005464 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005458:	893b      	ldrh	r3, [r7, #8]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	611a      	str	r2, [r3, #16]
 8005462:	e021      	b.n	80054a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005464:	893b      	ldrh	r3, [r7, #8]
 8005466:	0a1b      	lsrs	r3, r3, #8
 8005468:	b29b      	uxth	r3, r3
 800546a:	b2da      	uxtb	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005474:	6a39      	ldr	r1, [r7, #32]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fa20 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	2b04      	cmp	r3, #4
 8005488:	d107      	bne.n	800549a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005498:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e005      	b.n	80054aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800549e:	893b      	ldrh	r3, [r7, #8]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	00010002 	.word	0x00010002

080054b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	4608      	mov	r0, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	461a      	mov	r2, r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	817b      	strh	r3, [r7, #10]
 80054ca:	460b      	mov	r3, r1
 80054cc:	813b      	strh	r3, [r7, #8]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f8c2 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005518:	d103      	bne.n	8005522 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005520:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e0aa      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005526:	897b      	ldrh	r3, [r7, #10]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005534:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	4952      	ldr	r1, [pc, #328]	@ (8005684 <I2C_RequestMemoryRead+0x1cc>)
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f91d 	bl	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e097      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005564:	6a39      	ldr	r1, [r7, #32]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f9a8 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00d      	beq.n	800558e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005576:	2b04      	cmp	r3, #4
 8005578:	d107      	bne.n	800558a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005588:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e076      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d105      	bne.n	80055a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005594:	893b      	ldrh	r3, [r7, #8]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	611a      	str	r2, [r3, #16]
 800559e:	e021      	b.n	80055e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055a0:	893b      	ldrh	r3, [r7, #8]
 80055a2:	0a1b      	lsrs	r3, r3, #8
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b0:	6a39      	ldr	r1, [r7, #32]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f982 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00d      	beq.n	80055da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d107      	bne.n	80055d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e050      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055da:	893b      	ldrh	r3, [r7, #8]
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e6:	6a39      	ldr	r1, [r7, #32]
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f967 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00d      	beq.n	8005610 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d107      	bne.n	800560c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800560a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e035      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800561e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	2200      	movs	r2, #0
 8005628:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f82b 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00d      	beq.n	8005654 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005646:	d103      	bne.n	8005650 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800564e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e013      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005654:	897b      	ldrh	r3, [r7, #10]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	6a3a      	ldr	r2, [r7, #32]
 8005668:	4906      	ldr	r1, [pc, #24]	@ (8005684 <I2C_RequestMemoryRead+0x1cc>)
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f886 	bl	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	00010002 	.word	0x00010002

08005688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005698:	e048      	b.n	800572c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d044      	beq.n	800572c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a2:	f7fe fe37 	bl	8004314 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d302      	bcc.n	80056b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d139      	bne.n	800572c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	0c1b      	lsrs	r3, r3, #16
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d10d      	bne.n	80056de <I2C_WaitOnFlagUntilTimeout+0x56>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	43da      	mvns	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	4013      	ands	r3, r2
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bf0c      	ite	eq
 80056d4:	2301      	moveq	r3, #1
 80056d6:	2300      	movne	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	461a      	mov	r2, r3
 80056dc:	e00c      	b.n	80056f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	43da      	mvns	r2, r3
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4013      	ands	r3, r2
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d116      	bne.n	800572c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005718:	f043 0220 	orr.w	r2, r3, #32
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e023      	b.n	8005774 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	0c1b      	lsrs	r3, r3, #16
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	d10d      	bne.n	8005752 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	43da      	mvns	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	4013      	ands	r3, r2
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	bf0c      	ite	eq
 8005748:	2301      	moveq	r3, #1
 800574a:	2300      	movne	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	e00c      	b.n	800576c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	43da      	mvns	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	4013      	ands	r3, r2
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	bf0c      	ite	eq
 8005764:	2301      	moveq	r3, #1
 8005766:	2300      	movne	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	429a      	cmp	r2, r3
 8005770:	d093      	beq.n	800569a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800578a:	e071      	b.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800579a:	d123      	bne.n	80057e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	f043 0204 	orr.w	r2, r3, #4
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e067      	b.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d041      	beq.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ec:	f7fe fd92 	bl	8004314 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d136      	bne.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	0c1b      	lsrs	r3, r3, #16
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	d10c      	bne.n	8005826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	43da      	mvns	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4013      	ands	r3, r2
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	bf14      	ite	ne
 800581e:	2301      	movne	r3, #1
 8005820:	2300      	moveq	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	e00b      	b.n	800583e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	43da      	mvns	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4013      	ands	r3, r2
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585c:	f043 0220 	orr.w	r2, r3, #32
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e021      	b.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	0c1b      	lsrs	r3, r3, #16
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	d10c      	bne.n	8005894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	43da      	mvns	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4013      	ands	r3, r2
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	bf14      	ite	ne
 800588c:	2301      	movne	r3, #1
 800588e:	2300      	moveq	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	e00b      	b.n	80058ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	43da      	mvns	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4013      	ands	r3, r2
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bf14      	ite	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	2300      	moveq	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f47f af6d 	bne.w	800578c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c8:	e034      	b.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f8e3 	bl	8005a96 <I2C_IsAcknowledgeFailed>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e034      	b.n	8005944 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e0:	d028      	beq.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e2:	f7fe fd17 	bl	8004314 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d302      	bcc.n	80058f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11d      	bne.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005902:	2b80      	cmp	r3, #128	@ 0x80
 8005904:	d016      	beq.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e007      	b.n	8005944 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593e:	2b80      	cmp	r3, #128	@ 0x80
 8005940:	d1c3      	bne.n	80058ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005958:	e034      	b.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 f89b 	bl	8005a96 <I2C_IsAcknowledgeFailed>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e034      	b.n	80059d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d028      	beq.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005972:	f7fe fccf 	bl	8004314 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	429a      	cmp	r2, r3
 8005980:	d302      	bcc.n	8005988 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d11d      	bne.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b04      	cmp	r3, #4
 8005994:	d016      	beq.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b0:	f043 0220 	orr.w	r2, r3, #32
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e007      	b.n	80059d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d1c3      	bne.n	800595a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059e8:	e049      	b.n	8005a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d119      	bne.n	8005a2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0210 	mvn.w	r2, #16
 8005a00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e030      	b.n	8005a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2c:	f7fe fc72 	bl	8004314 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d302      	bcc.n	8005a42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d11d      	bne.n	8005a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4c:	2b40      	cmp	r3, #64	@ 0x40
 8005a4e:	d016      	beq.n	8005a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6a:	f043 0220 	orr.w	r2, r3, #32
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e007      	b.n	8005a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a88:	2b40      	cmp	r3, #64	@ 0x40
 8005a8a:	d1ae      	bne.n	80059ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aac:	d11b      	bne.n	8005ae6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ab6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad2:	f043 0204 	orr.w	r2, r3, #4
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr
	...

08005af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e272      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 8087 	beq.w	8005c22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b14:	4b92      	ldr	r3, [pc, #584]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f003 030c 	and.w	r3, r3, #12
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d00c      	beq.n	8005b3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b20:	4b8f      	ldr	r3, [pc, #572]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f003 030c 	and.w	r3, r3, #12
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d112      	bne.n	8005b52 <HAL_RCC_OscConfig+0x5e>
 8005b2c:	4b8c      	ldr	r3, [pc, #560]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b38:	d10b      	bne.n	8005b52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b3a:	4b89      	ldr	r3, [pc, #548]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d06c      	beq.n	8005c20 <HAL_RCC_OscConfig+0x12c>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d168      	bne.n	8005c20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e24c      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b5a:	d106      	bne.n	8005b6a <HAL_RCC_OscConfig+0x76>
 8005b5c:	4b80      	ldr	r3, [pc, #512]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a7f      	ldr	r2, [pc, #508]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005b62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	e02e      	b.n	8005bc8 <HAL_RCC_OscConfig+0xd4>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10c      	bne.n	8005b8c <HAL_RCC_OscConfig+0x98>
 8005b72:	4b7b      	ldr	r3, [pc, #492]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a7a      	ldr	r2, [pc, #488]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	4b78      	ldr	r3, [pc, #480]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a77      	ldr	r2, [pc, #476]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005b84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	e01d      	b.n	8005bc8 <HAL_RCC_OscConfig+0xd4>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b94:	d10c      	bne.n	8005bb0 <HAL_RCC_OscConfig+0xbc>
 8005b96:	4b72      	ldr	r3, [pc, #456]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a71      	ldr	r2, [pc, #452]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005b9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a6e      	ldr	r2, [pc, #440]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	e00b      	b.n	8005bc8 <HAL_RCC_OscConfig+0xd4>
 8005bb0:	4b6b      	ldr	r3, [pc, #428]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a6a      	ldr	r2, [pc, #424]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	4b68      	ldr	r3, [pc, #416]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a67      	ldr	r2, [pc, #412]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d013      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd0:	f7fe fba0 	bl	8004314 <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bd8:	f7fe fb9c 	bl	8004314 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b64      	cmp	r3, #100	@ 0x64
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e200      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bea:	4b5d      	ldr	r3, [pc, #372]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f0      	beq.n	8005bd8 <HAL_RCC_OscConfig+0xe4>
 8005bf6:	e014      	b.n	8005c22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf8:	f7fe fb8c 	bl	8004314 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c00:	f7fe fb88 	bl	8004314 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b64      	cmp	r3, #100	@ 0x64
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e1ec      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c12:	4b53      	ldr	r3, [pc, #332]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f0      	bne.n	8005c00 <HAL_RCC_OscConfig+0x10c>
 8005c1e:	e000      	b.n	8005c22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d063      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f003 030c 	and.w	r3, r3, #12
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c3a:	4b49      	ldr	r3, [pc, #292]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f003 030c 	and.w	r3, r3, #12
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d11c      	bne.n	8005c80 <HAL_RCC_OscConfig+0x18c>
 8005c46:	4b46      	ldr	r3, [pc, #280]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d116      	bne.n	8005c80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c52:	4b43      	ldr	r3, [pc, #268]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_RCC_OscConfig+0x176>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d001      	beq.n	8005c6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e1c0      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4939      	ldr	r1, [pc, #228]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c7e:	e03a      	b.n	8005cf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d020      	beq.n	8005cca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c88:	4b36      	ldr	r3, [pc, #216]	@ (8005d64 <HAL_RCC_OscConfig+0x270>)
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8e:	f7fe fb41 	bl	8004314 <HAL_GetTick>
 8005c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c96:	f7fe fb3d 	bl	8004314 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e1a1      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0f0      	beq.n	8005c96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4927      	ldr	r1, [pc, #156]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	600b      	str	r3, [r1, #0]
 8005cc8:	e015      	b.n	8005cf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cca:	4b26      	ldr	r3, [pc, #152]	@ (8005d64 <HAL_RCC_OscConfig+0x270>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd0:	f7fe fb20 	bl	8004314 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cd8:	f7fe fb1c 	bl	8004314 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e180      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cea:	4b1d      	ldr	r3, [pc, #116]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f0      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0308 	and.w	r3, r3, #8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d03a      	beq.n	8005d78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d019      	beq.n	8005d3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d0a:	4b17      	ldr	r3, [pc, #92]	@ (8005d68 <HAL_RCC_OscConfig+0x274>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d10:	f7fe fb00 	bl	8004314 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d18:	f7fe fafc 	bl	8004314 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e160      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d60 <HAL_RCC_OscConfig+0x26c>)
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0f0      	beq.n	8005d18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005d36:	2001      	movs	r0, #1
 8005d38:	f000 face 	bl	80062d8 <RCC_Delay>
 8005d3c:	e01c      	b.n	8005d78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d68 <HAL_RCC_OscConfig+0x274>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d44:	f7fe fae6 	bl	8004314 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d4a:	e00f      	b.n	8005d6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d4c:	f7fe fae2 	bl	8004314 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d908      	bls.n	8005d6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e146      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
 8005d5e:	bf00      	nop
 8005d60:	40021000 	.word	0x40021000
 8005d64:	42420000 	.word	0x42420000
 8005d68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d6c:	4b92      	ldr	r3, [pc, #584]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e9      	bne.n	8005d4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80a6 	beq.w	8005ed2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d86:	2300      	movs	r3, #0
 8005d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d8a:	4b8b      	ldr	r3, [pc, #556]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10d      	bne.n	8005db2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d96:	4b88      	ldr	r3, [pc, #544]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	4a87      	ldr	r2, [pc, #540]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005da0:	61d3      	str	r3, [r2, #28]
 8005da2:	4b85      	ldr	r3, [pc, #532]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dae:	2301      	movs	r3, #1
 8005db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db2:	4b82      	ldr	r3, [pc, #520]	@ (8005fbc <HAL_RCC_OscConfig+0x4c8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d118      	bne.n	8005df0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8005fbc <HAL_RCC_OscConfig+0x4c8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8005fbc <HAL_RCC_OscConfig+0x4c8>)
 8005dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dca:	f7fe faa3 	bl	8004314 <HAL_GetTick>
 8005dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dd2:	f7fe fa9f 	bl	8004314 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b64      	cmp	r3, #100	@ 0x64
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e103      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de4:	4b75      	ldr	r3, [pc, #468]	@ (8005fbc <HAL_RCC_OscConfig+0x4c8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0f0      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d106      	bne.n	8005e06 <HAL_RCC_OscConfig+0x312>
 8005df8:	4b6f      	ldr	r3, [pc, #444]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	4a6e      	ldr	r2, [pc, #440]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005dfe:	f043 0301 	orr.w	r3, r3, #1
 8005e02:	6213      	str	r3, [r2, #32]
 8005e04:	e02d      	b.n	8005e62 <HAL_RCC_OscConfig+0x36e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x334>
 8005e0e:	4b6a      	ldr	r3, [pc, #424]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	4a69      	ldr	r2, [pc, #420]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	6213      	str	r3, [r2, #32]
 8005e1a:	4b67      	ldr	r3, [pc, #412]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	4a66      	ldr	r2, [pc, #408]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005e20:	f023 0304 	bic.w	r3, r3, #4
 8005e24:	6213      	str	r3, [r2, #32]
 8005e26:	e01c      	b.n	8005e62 <HAL_RCC_OscConfig+0x36e>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	2b05      	cmp	r3, #5
 8005e2e:	d10c      	bne.n	8005e4a <HAL_RCC_OscConfig+0x356>
 8005e30:	4b61      	ldr	r3, [pc, #388]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	4a60      	ldr	r2, [pc, #384]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005e36:	f043 0304 	orr.w	r3, r3, #4
 8005e3a:	6213      	str	r3, [r2, #32]
 8005e3c:	4b5e      	ldr	r3, [pc, #376]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	4a5d      	ldr	r2, [pc, #372]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005e42:	f043 0301 	orr.w	r3, r3, #1
 8005e46:	6213      	str	r3, [r2, #32]
 8005e48:	e00b      	b.n	8005e62 <HAL_RCC_OscConfig+0x36e>
 8005e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	4a5a      	ldr	r2, [pc, #360]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005e50:	f023 0301 	bic.w	r3, r3, #1
 8005e54:	6213      	str	r3, [r2, #32]
 8005e56:	4b58      	ldr	r3, [pc, #352]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	4a57      	ldr	r2, [pc, #348]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005e5c:	f023 0304 	bic.w	r3, r3, #4
 8005e60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d015      	beq.n	8005e96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e6a:	f7fe fa53 	bl	8004314 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e70:	e00a      	b.n	8005e88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e72:	f7fe fa4f 	bl	8004314 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e0b1      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e88:	4b4b      	ldr	r3, [pc, #300]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0ee      	beq.n	8005e72 <HAL_RCC_OscConfig+0x37e>
 8005e94:	e014      	b.n	8005ec0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e96:	f7fe fa3d 	bl	8004314 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e9c:	e00a      	b.n	8005eb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e9e:	f7fe fa39 	bl	8004314 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e09b      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eb4:	4b40      	ldr	r3, [pc, #256]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1ee      	bne.n	8005e9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d105      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	4a3b      	ldr	r2, [pc, #236]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ed0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 8087 	beq.w	8005fea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005edc:	4b36      	ldr	r3, [pc, #216]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 030c 	and.w	r3, r3, #12
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d061      	beq.n	8005fac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d146      	bne.n	8005f7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef0:	4b33      	ldr	r3, [pc, #204]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef6:	f7fe fa0d 	bl	8004314 <HAL_GetTick>
 8005efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005efc:	e008      	b.n	8005f10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005efe:	f7fe fa09 	bl	8004314 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e06d      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f10:	4b29      	ldr	r3, [pc, #164]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1f0      	bne.n	8005efe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f24:	d108      	bne.n	8005f38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f26:	4b24      	ldr	r3, [pc, #144]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	4921      	ldr	r1, [pc, #132]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f38:	4b1f      	ldr	r3, [pc, #124]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a19      	ldr	r1, [r3, #32]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	491b      	ldr	r1, [pc, #108]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f50:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f56:	f7fe f9dd 	bl	8004314 <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f5e:	f7fe f9d9 	bl	8004314 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e03d      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f70:	4b11      	ldr	r3, [pc, #68]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f0      	beq.n	8005f5e <HAL_RCC_OscConfig+0x46a>
 8005f7c:	e035      	b.n	8005fea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f7e:	4b10      	ldr	r3, [pc, #64]	@ (8005fc0 <HAL_RCC_OscConfig+0x4cc>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f84:	f7fe f9c6 	bl	8004314 <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f8c:	f7fe f9c2 	bl	8004314 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e026      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f9e:	4b06      	ldr	r3, [pc, #24]	@ (8005fb8 <HAL_RCC_OscConfig+0x4c4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f0      	bne.n	8005f8c <HAL_RCC_OscConfig+0x498>
 8005faa:	e01e      	b.n	8005fea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d107      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e019      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	40007000 	.word	0x40007000
 8005fc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff4 <HAL_RCC_OscConfig+0x500>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d106      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d001      	beq.n	8005fea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e000      	b.n	8005fec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	40021000 	.word	0x40021000

08005ff8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e0d0      	b.n	80061ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800600c:	4b6a      	ldr	r3, [pc, #424]	@ (80061b8 <HAL_RCC_ClockConfig+0x1c0>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d910      	bls.n	800603c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601a:	4b67      	ldr	r3, [pc, #412]	@ (80061b8 <HAL_RCC_ClockConfig+0x1c0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f023 0207 	bic.w	r2, r3, #7
 8006022:	4965      	ldr	r1, [pc, #404]	@ (80061b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	4313      	orrs	r3, r2
 8006028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800602a:	4b63      	ldr	r3, [pc, #396]	@ (80061b8 <HAL_RCC_ClockConfig+0x1c0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d001      	beq.n	800603c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e0b8      	b.n	80061ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d020      	beq.n	800608a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006054:	4b59      	ldr	r3, [pc, #356]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	4a58      	ldr	r2, [pc, #352]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 800605a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800605e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0308 	and.w	r3, r3, #8
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800606c:	4b53      	ldr	r3, [pc, #332]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	4a52      	ldr	r2, [pc, #328]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 8006072:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006076:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006078:	4b50      	ldr	r3, [pc, #320]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	494d      	ldr	r1, [pc, #308]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 8006086:	4313      	orrs	r3, r2
 8006088:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d040      	beq.n	8006118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d107      	bne.n	80060ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800609e:	4b47      	ldr	r3, [pc, #284]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d115      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e07f      	b.n	80061ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d107      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b6:	4b41      	ldr	r3, [pc, #260]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e073      	b.n	80061ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c6:	4b3d      	ldr	r3, [pc, #244]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e06b      	b.n	80061ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060d6:	4b39      	ldr	r3, [pc, #228]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f023 0203 	bic.w	r2, r3, #3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4936      	ldr	r1, [pc, #216]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060e8:	f7fe f914 	bl	8004314 <HAL_GetTick>
 80060ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ee:	e00a      	b.n	8006106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f0:	f7fe f910 	bl	8004314 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e053      	b.n	80061ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006106:	4b2d      	ldr	r3, [pc, #180]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f003 020c 	and.w	r2, r3, #12
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	429a      	cmp	r2, r3
 8006116:	d1eb      	bne.n	80060f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006118:	4b27      	ldr	r3, [pc, #156]	@ (80061b8 <HAL_RCC_ClockConfig+0x1c0>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d210      	bcs.n	8006148 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006126:	4b24      	ldr	r3, [pc, #144]	@ (80061b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 0207 	bic.w	r2, r3, #7
 800612e:	4922      	ldr	r1, [pc, #136]	@ (80061b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	4313      	orrs	r3, r2
 8006134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006136:	4b20      	ldr	r3, [pc, #128]	@ (80061b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d001      	beq.n	8006148 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e032      	b.n	80061ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d008      	beq.n	8006166 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006154:	4b19      	ldr	r3, [pc, #100]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4916      	ldr	r1, [pc, #88]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 8006162:	4313      	orrs	r3, r2
 8006164:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006172:	4b12      	ldr	r3, [pc, #72]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	490e      	ldr	r1, [pc, #56]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 8006182:	4313      	orrs	r3, r2
 8006184:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006186:	f000 f821 	bl	80061cc <HAL_RCC_GetSysClockFreq>
 800618a:	4602      	mov	r2, r0
 800618c:	4b0b      	ldr	r3, [pc, #44]	@ (80061bc <HAL_RCC_ClockConfig+0x1c4>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	091b      	lsrs	r3, r3, #4
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	490a      	ldr	r1, [pc, #40]	@ (80061c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006198:	5ccb      	ldrb	r3, [r1, r3]
 800619a:	fa22 f303 	lsr.w	r3, r2, r3
 800619e:	4a09      	ldr	r2, [pc, #36]	@ (80061c4 <HAL_RCC_ClockConfig+0x1cc>)
 80061a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061a2:	4b09      	ldr	r3, [pc, #36]	@ (80061c8 <HAL_RCC_ClockConfig+0x1d0>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe f872 	bl	8004290 <HAL_InitTick>

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40022000 	.word	0x40022000
 80061bc:	40021000 	.word	0x40021000
 80061c0:	0800b768 	.word	0x0800b768
 80061c4:	20000000 	.word	0x20000000
 80061c8:	20000004 	.word	0x20000004

080061cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	2300      	movs	r3, #0
 80061e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80061e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006260 <HAL_RCC_GetSysClockFreq+0x94>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f003 030c 	and.w	r3, r3, #12
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d002      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0x30>
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d003      	beq.n	8006202 <HAL_RCC_GetSysClockFreq+0x36>
 80061fa:	e027      	b.n	800624c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80061fc:	4b19      	ldr	r3, [pc, #100]	@ (8006264 <HAL_RCC_GetSysClockFreq+0x98>)
 80061fe:	613b      	str	r3, [r7, #16]
      break;
 8006200:	e027      	b.n	8006252 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	0c9b      	lsrs	r3, r3, #18
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	4a17      	ldr	r2, [pc, #92]	@ (8006268 <HAL_RCC_GetSysClockFreq+0x9c>)
 800620c:	5cd3      	ldrb	r3, [r2, r3]
 800620e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d010      	beq.n	800623c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800621a:	4b11      	ldr	r3, [pc, #68]	@ (8006260 <HAL_RCC_GetSysClockFreq+0x94>)
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	0c5b      	lsrs	r3, r3, #17
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	4a11      	ldr	r2, [pc, #68]	@ (800626c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006226:	5cd3      	ldrb	r3, [r2, r3]
 8006228:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a0d      	ldr	r2, [pc, #52]	@ (8006264 <HAL_RCC_GetSysClockFreq+0x98>)
 800622e:	fb03 f202 	mul.w	r2, r3, r2
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	fbb2 f3f3 	udiv	r3, r2, r3
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	e004      	b.n	8006246 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a0c      	ldr	r2, [pc, #48]	@ (8006270 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006240:	fb02 f303 	mul.w	r3, r2, r3
 8006244:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	613b      	str	r3, [r7, #16]
      break;
 800624a:	e002      	b.n	8006252 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800624c:	4b05      	ldr	r3, [pc, #20]	@ (8006264 <HAL_RCC_GetSysClockFreq+0x98>)
 800624e:	613b      	str	r3, [r7, #16]
      break;
 8006250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006252:	693b      	ldr	r3, [r7, #16]
}
 8006254:	4618      	mov	r0, r3
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	bc80      	pop	{r7}
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40021000 	.word	0x40021000
 8006264:	007a1200 	.word	0x007a1200
 8006268:	0800b780 	.word	0x0800b780
 800626c:	0800b790 	.word	0x0800b790
 8006270:	003d0900 	.word	0x003d0900

08006274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006278:	4b02      	ldr	r3, [pc, #8]	@ (8006284 <HAL_RCC_GetHCLKFreq+0x10>)
 800627a:	681b      	ldr	r3, [r3, #0]
}
 800627c:	4618      	mov	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	bc80      	pop	{r7}
 8006282:	4770      	bx	lr
 8006284:	20000000 	.word	0x20000000

08006288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800628c:	f7ff fff2 	bl	8006274 <HAL_RCC_GetHCLKFreq>
 8006290:	4602      	mov	r2, r0
 8006292:	4b05      	ldr	r3, [pc, #20]	@ (80062a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	0a1b      	lsrs	r3, r3, #8
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	4903      	ldr	r1, [pc, #12]	@ (80062ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800629e:	5ccb      	ldrb	r3, [r1, r3]
 80062a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	40021000 	.word	0x40021000
 80062ac:	0800b778 	.word	0x0800b778

080062b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062b4:	f7ff ffde 	bl	8006274 <HAL_RCC_GetHCLKFreq>
 80062b8:	4602      	mov	r2, r0
 80062ba:	4b05      	ldr	r3, [pc, #20]	@ (80062d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	0adb      	lsrs	r3, r3, #11
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	4903      	ldr	r1, [pc, #12]	@ (80062d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062c6:	5ccb      	ldrb	r3, [r1, r3]
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40021000 	.word	0x40021000
 80062d4:	0800b778 	.word	0x0800b778

080062d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80062e0:	4b0a      	ldr	r3, [pc, #40]	@ (800630c <RCC_Delay+0x34>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006310 <RCC_Delay+0x38>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	0a5b      	lsrs	r3, r3, #9
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	fb02 f303 	mul.w	r3, r2, r3
 80062f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80062f4:	bf00      	nop
  }
  while (Delay --);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1e5a      	subs	r2, r3, #1
 80062fa:	60fa      	str	r2, [r7, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1f9      	bne.n	80062f4 <RCC_Delay+0x1c>
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr
 800630c:	20000000 	.word	0x20000000
 8006310:	10624dd3 	.word	0x10624dd3

08006314 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e076      	b.n	8006414 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632a:	2b00      	cmp	r3, #0
 800632c:	d108      	bne.n	8006340 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006336:	d009      	beq.n	800634c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	61da      	str	r2, [r3, #28]
 800633e:	e005      	b.n	800634c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fd fd30 	bl	8003dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006382:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d0:	ea42 0103 	orr.w	r1, r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	0c1a      	lsrs	r2, r3, #16
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f002 0204 	and.w	r2, r2, #4
 80063f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	69da      	ldr	r2, [r3, #28]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006402:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	4613      	mov	r3, r2
 800642a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800642c:	f7fd ff72 	bl	8004314 <HAL_GetTick>
 8006430:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b01      	cmp	r3, #1
 8006440:	d001      	beq.n	8006446 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006442:	2302      	movs	r3, #2
 8006444:	e12a      	b.n	800669c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <HAL_SPI_Transmit+0x36>
 800644c:	88fb      	ldrh	r3, [r7, #6]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e122      	b.n	800669c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_SPI_Transmit+0x48>
 8006460:	2302      	movs	r3, #2
 8006462:	e11b      	b.n	800669c <HAL_SPI_Transmit+0x280>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2203      	movs	r2, #3
 8006470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	88fa      	ldrh	r2, [r7, #6]
 8006484:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	88fa      	ldrh	r2, [r7, #6]
 800648a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064b2:	d10f      	bne.n	80064d4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064de:	2b40      	cmp	r3, #64	@ 0x40
 80064e0:	d007      	beq.n	80064f2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064fa:	d152      	bne.n	80065a2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <HAL_SPI_Transmit+0xee>
 8006504:	8b7b      	ldrh	r3, [r7, #26]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d145      	bne.n	8006596 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650e:	881a      	ldrh	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651a:	1c9a      	adds	r2, r3, #2
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800652e:	e032      	b.n	8006596 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b02      	cmp	r3, #2
 800653c:	d112      	bne.n	8006564 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006542:	881a      	ldrh	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654e:	1c9a      	adds	r2, r3, #2
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006562:	e018      	b.n	8006596 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006564:	f7fd fed6 	bl	8004314 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d803      	bhi.n	800657c <HAL_SPI_Transmit+0x160>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657a:	d102      	bne.n	8006582 <HAL_SPI_Transmit+0x166>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d109      	bne.n	8006596 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e082      	b.n	800669c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1c7      	bne.n	8006530 <HAL_SPI_Transmit+0x114>
 80065a0:	e053      	b.n	800664a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <HAL_SPI_Transmit+0x194>
 80065aa:	8b7b      	ldrh	r3, [r7, #26]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d147      	bne.n	8006640 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	7812      	ldrb	r2, [r2, #0]
 80065bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065d6:	e033      	b.n	8006640 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d113      	bne.n	800660e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	330c      	adds	r3, #12
 80065f0:	7812      	ldrb	r2, [r2, #0]
 80065f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800660c:	e018      	b.n	8006640 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800660e:	f7fd fe81 	bl	8004314 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	d803      	bhi.n	8006626 <HAL_SPI_Transmit+0x20a>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006624:	d102      	bne.n	800662c <HAL_SPI_Transmit+0x210>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d109      	bne.n	8006640 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e02d      	b.n	800669c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1c6      	bne.n	80065d8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 fcc8 	bl	8006fe4 <SPI_EndRxTxTransaction>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2220      	movs	r2, #32
 800665e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800669a:	2300      	movs	r3, #0
  }
}
 800669c:	4618      	mov	r0, r3
 800669e:	3720      	adds	r7, #32
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af02      	add	r7, sp, #8
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	4613      	mov	r3, r2
 80066b2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d001      	beq.n	80066c4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80066c0:	2302      	movs	r3, #2
 80066c2:	e104      	b.n	80068ce <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066cc:	d112      	bne.n	80066f4 <HAL_SPI_Receive+0x50>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10e      	bne.n	80066f4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2204      	movs	r2, #4
 80066da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80066de:	88fa      	ldrh	r2, [r7, #6]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	4613      	mov	r3, r2
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 f8f3 	bl	80068d6 <HAL_SPI_TransmitReceive>
 80066f0:	4603      	mov	r3, r0
 80066f2:	e0ec      	b.n	80068ce <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066f4:	f7fd fe0e 	bl	8004314 <HAL_GetTick>
 80066f8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <HAL_SPI_Receive+0x62>
 8006700:	88fb      	ldrh	r3, [r7, #6]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e0e1      	b.n	80068ce <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_SPI_Receive+0x74>
 8006714:	2302      	movs	r3, #2
 8006716:	e0da      	b.n	80068ce <HAL_SPI_Receive+0x22a>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2204      	movs	r2, #4
 8006724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	88fa      	ldrh	r2, [r7, #6]
 8006738:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	88fa      	ldrh	r2, [r7, #6]
 800673e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006766:	d10f      	bne.n	8006788 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006776:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006786:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006792:	2b40      	cmp	r3, #64	@ 0x40
 8006794:	d007      	beq.n	80067a6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067a4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d170      	bne.n	8006890 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067ae:	e035      	b.n	800681c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d115      	bne.n	80067ea <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f103 020c 	add.w	r2, r3, #12
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ca:	7812      	ldrb	r2, [r2, #0]
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80067e8:	e018      	b.n	800681c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ea:	f7fd fd93 	bl	8004314 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d803      	bhi.n	8006802 <HAL_SPI_Receive+0x15e>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d102      	bne.n	8006808 <HAL_SPI_Receive+0x164>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d109      	bne.n	800681c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e058      	b.n	80068ce <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1c4      	bne.n	80067b0 <HAL_SPI_Receive+0x10c>
 8006826:	e038      	b.n	800689a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b01      	cmp	r3, #1
 8006834:	d113      	bne.n	800685e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006840:	b292      	uxth	r2, r2
 8006842:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006848:	1c9a      	adds	r2, r3, #2
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006852:	b29b      	uxth	r3, r3
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800685c:	e018      	b.n	8006890 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800685e:	f7fd fd59 	bl	8004314 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d803      	bhi.n	8006876 <HAL_SPI_Receive+0x1d2>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006874:	d102      	bne.n	800687c <HAL_SPI_Receive+0x1d8>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d109      	bne.n	8006890 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e01e      	b.n	80068ce <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1c6      	bne.n	8006828 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 fb4e 	bl	8006f40 <SPI_EndRxTransaction>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80068cc:	2300      	movs	r3, #0
  }
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b08a      	sub	sp, #40	@ 0x28
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	607a      	str	r2, [r7, #4]
 80068e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80068e4:	2301      	movs	r3, #1
 80068e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068e8:	f7fd fd14 	bl	8004314 <HAL_GetTick>
 80068ec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068f4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80068fc:	887b      	ldrh	r3, [r7, #2]
 80068fe:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006900:	7ffb      	ldrb	r3, [r7, #31]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d00c      	beq.n	8006920 <HAL_SPI_TransmitReceive+0x4a>
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800690c:	d106      	bne.n	800691c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d102      	bne.n	800691c <HAL_SPI_TransmitReceive+0x46>
 8006916:	7ffb      	ldrb	r3, [r7, #31]
 8006918:	2b04      	cmp	r3, #4
 800691a:	d001      	beq.n	8006920 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800691c:	2302      	movs	r3, #2
 800691e:	e17f      	b.n	8006c20 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_SPI_TransmitReceive+0x5c>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_SPI_TransmitReceive+0x5c>
 800692c:	887b      	ldrh	r3, [r7, #2]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e174      	b.n	8006c20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_SPI_TransmitReceive+0x6e>
 8006940:	2302      	movs	r3, #2
 8006942:	e16d      	b.n	8006c20 <HAL_SPI_TransmitReceive+0x34a>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b04      	cmp	r3, #4
 8006956:	d003      	beq.n	8006960 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2205      	movs	r2, #5
 800695c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	887a      	ldrh	r2, [r7, #2]
 8006970:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	887a      	ldrh	r2, [r7, #2]
 8006976:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	887a      	ldrh	r2, [r7, #2]
 8006982:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	887a      	ldrh	r2, [r7, #2]
 8006988:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a0:	2b40      	cmp	r3, #64	@ 0x40
 80069a2:	d007      	beq.n	80069b4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069bc:	d17e      	bne.n	8006abc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <HAL_SPI_TransmitReceive+0xf6>
 80069c6:	8afb      	ldrh	r3, [r7, #22]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d16c      	bne.n	8006aa6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d0:	881a      	ldrh	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069dc:	1c9a      	adds	r2, r3, #2
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069f0:	e059      	b.n	8006aa6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d11b      	bne.n	8006a38 <HAL_SPI_TransmitReceive+0x162>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d016      	beq.n	8006a38 <HAL_SPI_TransmitReceive+0x162>
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d113      	bne.n	8006a38 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a14:	881a      	ldrh	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a20:	1c9a      	adds	r2, r3, #2
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d119      	bne.n	8006a7a <HAL_SPI_TransmitReceive+0x1a4>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d014      	beq.n	8006a7a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5a:	b292      	uxth	r2, r2
 8006a5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a62:	1c9a      	adds	r2, r3, #2
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a76:	2301      	movs	r3, #1
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a7a:	f7fd fc4b 	bl	8004314 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d80d      	bhi.n	8006aa6 <HAL_SPI_TransmitReceive+0x1d0>
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a90:	d009      	beq.n	8006aa6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e0bc      	b.n	8006c20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1a0      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x11c>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d19b      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x11c>
 8006aba:	e082      	b.n	8006bc2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <HAL_SPI_TransmitReceive+0x1f4>
 8006ac4:	8afb      	ldrh	r3, [r7, #22]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d171      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	330c      	adds	r3, #12
 8006ad4:	7812      	ldrb	r2, [r2, #0]
 8006ad6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006af0:	e05d      	b.n	8006bae <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d11c      	bne.n	8006b3a <HAL_SPI_TransmitReceive+0x264>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d017      	beq.n	8006b3a <HAL_SPI_TransmitReceive+0x264>
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d114      	bne.n	8006b3a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	330c      	adds	r3, #12
 8006b1a:	7812      	ldrb	r2, [r2, #0]
 8006b1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d119      	bne.n	8006b7c <HAL_SPI_TransmitReceive+0x2a6>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d014      	beq.n	8006b7c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	3b01      	subs	r3, #1
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b7c:	f7fd fbca 	bl	8004314 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d803      	bhi.n	8006b94 <HAL_SPI_TransmitReceive+0x2be>
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b92:	d102      	bne.n	8006b9a <HAL_SPI_TransmitReceive+0x2c4>
 8006b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d109      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e038      	b.n	8006c20 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d19c      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x21c>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d197      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bc2:	6a3a      	ldr	r2, [r7, #32]
 8006bc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fa0c 	bl	8006fe4 <SPI_EndRxTxTransaction>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d008      	beq.n	8006be4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e01d      	b.n	8006c20 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bec:	2300      	movs	r3, #0
 8006bee:	613b      	str	r3, [r7, #16]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
  }
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3728      	adds	r7, #40	@ 0x28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	099b      	lsrs	r3, r3, #6
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10f      	bne.n	8006c6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	099b      	lsrs	r3, r3, #6
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d004      	beq.n	8006c6c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	4798      	blx	r3
    return;
 8006c6a:	e0be      	b.n	8006dea <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	085b      	lsrs	r3, r3, #1
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00a      	beq.n	8006c8e <HAL_SPI_IRQHandler+0x66>
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	09db      	lsrs	r3, r3, #7
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d004      	beq.n	8006c8e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	4798      	blx	r3
    return;
 8006c8c:	e0ad      	b.n	8006dea <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	095b      	lsrs	r3, r3, #5
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_SPI_IRQHandler+0x80>
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	099b      	lsrs	r3, r3, #6
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 80a1 	beq.w	8006dea <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	095b      	lsrs	r3, r3, #5
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 809a 	beq.w	8006dea <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	099b      	lsrs	r3, r3, #6
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d023      	beq.n	8006d0a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d011      	beq.n	8006cf2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd2:	f043 0204 	orr.w	r2, r3, #4
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cda:	2300      	movs	r3, #0
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	e00b      	b.n	8006d0a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	693b      	ldr	r3, [r7, #16]
        return;
 8006d08:	e06f      	b.n	8006dea <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	095b      	lsrs	r3, r3, #5
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d014      	beq.n	8006d40 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d1a:	f043 0201 	orr.w	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d04f      	beq.n	8006de8 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d56:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d104      	bne.n	8006d74 <HAL_SPI_IRQHandler+0x14c>
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d034      	beq.n	8006dde <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0203 	bic.w	r2, r2, #3
 8006d82:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d011      	beq.n	8006db0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d90:	4a17      	ldr	r2, [pc, #92]	@ (8006df0 <HAL_SPI_IRQHandler+0x1c8>)
 8006d92:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fd fc31 	bl	8004600 <HAL_DMA_Abort_IT>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d016      	beq.n	8006de6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8006df0 <HAL_SPI_IRQHandler+0x1c8>)
 8006dbe:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fd fc1b 	bl	8004600 <HAL_DMA_Abort_IT>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006ddc:	e003      	b.n	8006de6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f808 	bl	8006df4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006de4:	e000      	b.n	8006de8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006de6:	bf00      	nop
    return;
 8006de8:	bf00      	nop
  }
}
 8006dea:	3720      	adds	r7, #32
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	08006e07 	.word	0x08006e07

08006df4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr

08006e06 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e12:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff ffe7 	bl	8006df4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e26:	bf00      	nop
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
	...

08006e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e40:	f7fd fa68 	bl	8004314 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e48:	1a9b      	subs	r3, r3, r2
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e50:	f7fd fa60 	bl	8004314 <HAL_GetTick>
 8006e54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e56:	4b39      	ldr	r3, [pc, #228]	@ (8006f3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	015b      	lsls	r3, r3, #5
 8006e5c:	0d1b      	lsrs	r3, r3, #20
 8006e5e:	69fa      	ldr	r2, [r7, #28]
 8006e60:	fb02 f303 	mul.w	r3, r2, r3
 8006e64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e66:	e054      	b.n	8006f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6e:	d050      	beq.n	8006f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e70:	f7fd fa50 	bl	8004314 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	69fa      	ldr	r2, [r7, #28]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d902      	bls.n	8006e86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d13d      	bne.n	8006f02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e9e:	d111      	bne.n	8006ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ea8:	d004      	beq.n	8006eb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eb2:	d107      	bne.n	8006ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ecc:	d10f      	bne.n	8006eee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e017      	b.n	8006f32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	bf0c      	ite	eq
 8006f22:	2301      	moveq	r3, #1
 8006f24:	2300      	movne	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	79fb      	ldrb	r3, [r7, #7]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d19b      	bne.n	8006e68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3720      	adds	r7, #32
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000000 	.word	0x20000000

08006f40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f54:	d111      	bne.n	8006f7a <SPI_EndRxTransaction+0x3a>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f5e:	d004      	beq.n	8006f6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f68:	d107      	bne.n	8006f7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f78:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f82:	d117      	bne.n	8006fb4 <SPI_EndRxTransaction+0x74>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f8c:	d112      	bne.n	8006fb4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2200      	movs	r2, #0
 8006f96:	2101      	movs	r1, #1
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f7ff ff49 	bl	8006e30 <SPI_WaitFlagStateUntilTimeout>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01a      	beq.n	8006fda <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa8:	f043 0220 	orr.w	r2, r3, #32
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e013      	b.n	8006fdc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2180      	movs	r1, #128	@ 0x80
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f7ff ff36 	bl	8006e30 <SPI_WaitFlagStateUntilTimeout>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fce:	f043 0220 	orr.w	r2, r3, #32
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e000      	b.n	8006fdc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	2102      	movs	r1, #2
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff ff18 	bl	8006e30 <SPI_WaitFlagStateUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800700a:	f043 0220 	orr.w	r2, r3, #32
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e013      	b.n	800703e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2200      	movs	r2, #0
 800701e:	2180      	movs	r1, #128	@ 0x80
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f7ff ff05 	bl	8006e30 <SPI_WaitFlagStateUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007030:	f043 0220 	orr.w	r2, r3, #32
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e000      	b.n	800703e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e042      	b.n	80070de <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d106      	bne.n	8007072 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7fc feff 	bl	8003e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2224      	movs	r2, #36	@ 0x24
 8007076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007088:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fdb8 	bl	8007c00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800709e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695a      	ldr	r2, [r3, #20]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b08a      	sub	sp, #40	@ 0x28
 80070ea:	af02      	add	r7, sp, #8
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	603b      	str	r3, [r7, #0]
 80070f2:	4613      	mov	r3, r2
 80070f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b20      	cmp	r3, #32
 8007104:	d175      	bne.n	80071f2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <HAL_UART_Transmit+0x2c>
 800710c:	88fb      	ldrh	r3, [r7, #6]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e06e      	b.n	80071f4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2221      	movs	r2, #33	@ 0x21
 8007120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007124:	f7fd f8f6 	bl	8004314 <HAL_GetTick>
 8007128:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	88fa      	ldrh	r2, [r7, #6]
 800712e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	88fa      	ldrh	r2, [r7, #6]
 8007134:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800713e:	d108      	bne.n	8007152 <HAL_UART_Transmit+0x6c>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d104      	bne.n	8007152 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007148:	2300      	movs	r3, #0
 800714a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	61bb      	str	r3, [r7, #24]
 8007150:	e003      	b.n	800715a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800715a:	e02e      	b.n	80071ba <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2200      	movs	r2, #0
 8007164:	2180      	movs	r1, #128	@ 0x80
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 fb1d 	bl	80077a6 <UART_WaitOnFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2220      	movs	r2, #32
 8007176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e03a      	b.n	80071f4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10b      	bne.n	800719c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007192:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	3302      	adds	r3, #2
 8007198:	61bb      	str	r3, [r7, #24]
 800719a:	e007      	b.n	80071ac <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	781a      	ldrb	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	3301      	adds	r3, #1
 80071aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1cb      	bne.n	800715c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2200      	movs	r2, #0
 80071cc:	2140      	movs	r1, #64	@ 0x40
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fae9 	bl	80077a6 <UART_WaitOnFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d005      	beq.n	80071e6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2220      	movs	r2, #32
 80071de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e006      	b.n	80071f4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e000      	b.n	80071f4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80071f2:	2302      	movs	r3, #2
  }
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3720      	adds	r7, #32
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	4613      	mov	r3, r2
 8007208:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b20      	cmp	r3, #32
 8007214:	d112      	bne.n	800723c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <HAL_UART_Receive_IT+0x26>
 800721c:	88fb      	ldrh	r3, [r7, #6]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e00b      	b.n	800723e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800722c:	88fb      	ldrh	r3, [r7, #6]
 800722e:	461a      	mov	r2, r3
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 fb10 	bl	8007858 <UART_Start_Receive_IT>
 8007238:	4603      	mov	r3, r0
 800723a:	e000      	b.n	800723e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800723c:	2302      	movs	r3, #2
  }
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b0ba      	sub	sp, #232	@ 0xe8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800726e:	2300      	movs	r3, #0
 8007270:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007274:	2300      	movs	r3, #0
 8007276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800727a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800727e:	f003 030f 	and.w	r3, r3, #15
 8007282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10f      	bne.n	80072ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800728e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <HAL_UART_IRQHandler+0x66>
 800729a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800729e:	f003 0320 	and.w	r3, r3, #32
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fbec 	bl	8007a84 <UART_Receive_IT>
      return;
 80072ac:	e25b      	b.n	8007766 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80072ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80de 	beq.w	8007474 <HAL_UART_IRQHandler+0x22c>
 80072b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d106      	bne.n	80072d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 80d1 	beq.w	8007474 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00b      	beq.n	80072f6 <HAL_UART_IRQHandler+0xae>
 80072de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ee:	f043 0201 	orr.w	r2, r3, #1
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072fa:	f003 0304 	and.w	r3, r3, #4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00b      	beq.n	800731a <HAL_UART_IRQHandler+0xd2>
 8007302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d005      	beq.n	800731a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007312:	f043 0202 	orr.w	r2, r3, #2
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800731a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00b      	beq.n	800733e <HAL_UART_IRQHandler+0xf6>
 8007326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007336:	f043 0204 	orr.w	r2, r3, #4
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800733e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007342:	f003 0308 	and.w	r3, r3, #8
 8007346:	2b00      	cmp	r3, #0
 8007348:	d011      	beq.n	800736e <HAL_UART_IRQHandler+0x126>
 800734a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	2b00      	cmp	r3, #0
 8007354:	d105      	bne.n	8007362 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007366:	f043 0208 	orr.w	r2, r3, #8
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 81f2 	beq.w	800775c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800737c:	f003 0320 	and.w	r3, r3, #32
 8007380:	2b00      	cmp	r3, #0
 8007382:	d008      	beq.n	8007396 <HAL_UART_IRQHandler+0x14e>
 8007384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007388:	f003 0320 	and.w	r3, r3, #32
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fb77 	bl	8007a84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	bf14      	ite	ne
 80073a4:	2301      	movne	r3, #1
 80073a6:	2300      	moveq	r3, #0
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b2:	f003 0308 	and.w	r3, r3, #8
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d103      	bne.n	80073c2 <HAL_UART_IRQHandler+0x17a>
 80073ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d04f      	beq.n	8007462 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa81 	bl	80078ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d041      	beq.n	800745a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3314      	adds	r3, #20
 80073dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80073ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3314      	adds	r3, #20
 80073fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007402:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007406:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800740e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800741a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1d9      	bne.n	80073d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d013      	beq.n	8007452 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800742e:	4a7e      	ldr	r2, [pc, #504]	@ (8007628 <HAL_UART_IRQHandler+0x3e0>)
 8007430:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007436:	4618      	mov	r0, r3
 8007438:	f7fd f8e2 	bl	8004600 <HAL_DMA_Abort_IT>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d016      	beq.n	8007470 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800744c:	4610      	mov	r0, r2
 800744e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007450:	e00e      	b.n	8007470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f993 	bl	800777e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007458:	e00a      	b.n	8007470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f98f 	bl	800777e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007460:	e006      	b.n	8007470 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f98b 	bl	800777e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800746e:	e175      	b.n	800775c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007470:	bf00      	nop
    return;
 8007472:	e173      	b.n	800775c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007478:	2b01      	cmp	r3, #1
 800747a:	f040 814f 	bne.w	800771c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800747e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007482:	f003 0310 	and.w	r3, r3, #16
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 8148 	beq.w	800771c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800748c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007490:	f003 0310 	and.w	r3, r3, #16
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8141 	beq.w	800771c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800749a:	2300      	movs	r3, #0
 800749c:	60bb      	str	r3, [r7, #8]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60bb      	str	r3, [r7, #8]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	60bb      	str	r3, [r7, #8]
 80074ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 80b6 	beq.w	800762c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 8145 	beq.w	8007760 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80074da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074de:	429a      	cmp	r2, r3
 80074e0:	f080 813e 	bcs.w	8007760 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	f000 8088 	beq.w	8007608 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	330c      	adds	r3, #12
 80074fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007502:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800750e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007512:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007516:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	330c      	adds	r3, #12
 8007520:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007524:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007528:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007530:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800753c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1d9      	bne.n	80074f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3314      	adds	r3, #20
 800754a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800754e:	e853 3f00 	ldrex	r3, [r3]
 8007552:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007554:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007556:	f023 0301 	bic.w	r3, r3, #1
 800755a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3314      	adds	r3, #20
 8007564:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007568:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800756c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007570:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800757a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e1      	bne.n	8007544 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3314      	adds	r3, #20
 8007586:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007590:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3314      	adds	r3, #20
 80075a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80075a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80075a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80075aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80075ac:	e841 2300 	strex	r3, r2, [r1]
 80075b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80075b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e3      	bne.n	8007580 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	330c      	adds	r3, #12
 80075cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075d8:	f023 0310 	bic.w	r3, r3, #16
 80075dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	330c      	adds	r3, #12
 80075e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80075ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80075ec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e3      	bne.n	80075c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007602:	4618      	mov	r0, r3
 8007604:	f7fc ffc1 	bl	800458a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007616:	b29b      	uxth	r3, r3
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	b29b      	uxth	r3, r3
 800761c:	4619      	mov	r1, r3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f8b6 	bl	8007790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007624:	e09c      	b.n	8007760 <HAL_UART_IRQHandler+0x518>
 8007626:	bf00      	nop
 8007628:	0800798f 	.word	0x0800798f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007634:	b29b      	uxth	r3, r3
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 808e 	beq.w	8007764 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 8089 	beq.w	8007764 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	330c      	adds	r3, #12
 8007658:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007664:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007668:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	330c      	adds	r3, #12
 8007672:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007676:	647a      	str	r2, [r7, #68]	@ 0x44
 8007678:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800767c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e3      	bne.n	8007652 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3314      	adds	r3, #20
 8007690:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	e853 3f00 	ldrex	r3, [r3]
 8007698:	623b      	str	r3, [r7, #32]
   return(result);
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3314      	adds	r3, #20
 80076aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80076ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80076b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e3      	bne.n	800768a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	330c      	adds	r3, #12
 80076d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	60fb      	str	r3, [r7, #12]
   return(result);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0310 	bic.w	r3, r3, #16
 80076e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	330c      	adds	r3, #12
 80076f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80076f4:	61fa      	str	r2, [r7, #28]
 80076f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f8:	69b9      	ldr	r1, [r7, #24]
 80076fa:	69fa      	ldr	r2, [r7, #28]
 80076fc:	e841 2300 	strex	r3, r2, [r1]
 8007700:	617b      	str	r3, [r7, #20]
   return(result);
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1e3      	bne.n	80076d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800770e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f83b 	bl	8007790 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800771a:	e023      	b.n	8007764 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800771c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007724:	2b00      	cmp	r3, #0
 8007726:	d009      	beq.n	800773c <HAL_UART_IRQHandler+0x4f4>
 8007728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800772c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007730:	2b00      	cmp	r3, #0
 8007732:	d003      	beq.n	800773c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f93e 	bl	80079b6 <UART_Transmit_IT>
    return;
 800773a:	e014      	b.n	8007766 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800773c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00e      	beq.n	8007766 <HAL_UART_IRQHandler+0x51e>
 8007748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800774c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007750:	2b00      	cmp	r3, #0
 8007752:	d008      	beq.n	8007766 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f97d 	bl	8007a54 <UART_EndTransmit_IT>
    return;
 800775a:	e004      	b.n	8007766 <HAL_UART_IRQHandler+0x51e>
    return;
 800775c:	bf00      	nop
 800775e:	e002      	b.n	8007766 <HAL_UART_IRQHandler+0x51e>
      return;
 8007760:	bf00      	nop
 8007762:	e000      	b.n	8007766 <HAL_UART_IRQHandler+0x51e>
      return;
 8007764:	bf00      	nop
  }
}
 8007766:	37e8      	adds	r7, #232	@ 0xe8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	bc80      	pop	{r7}
 800777c:	4770      	bx	lr

0800777e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr

08007790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr

080077a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b086      	sub	sp, #24
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	603b      	str	r3, [r7, #0]
 80077b2:	4613      	mov	r3, r2
 80077b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b6:	e03b      	b.n	8007830 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077be:	d037      	beq.n	8007830 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077c0:	f7fc fda8 	bl	8004314 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	6a3a      	ldr	r2, [r7, #32]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d302      	bcc.n	80077d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e03a      	b.n	8007850 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d023      	beq.n	8007830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b80      	cmp	r3, #128	@ 0x80
 80077ec:	d020      	beq.n	8007830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b40      	cmp	r3, #64	@ 0x40
 80077f2:	d01d      	beq.n	8007830 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d116      	bne.n	8007830 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f856 	bl	80078ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2208      	movs	r2, #8
 8007822:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e00f      	b.n	8007850 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	4013      	ands	r3, r2
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	429a      	cmp	r2, r3
 800783e:	bf0c      	ite	eq
 8007840:	2301      	moveq	r3, #1
 8007842:	2300      	movne	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	461a      	mov	r2, r3
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	429a      	cmp	r2, r3
 800784c:	d0b4      	beq.n	80077b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	4613      	mov	r3, r2
 8007864:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	88fa      	ldrh	r2, [r7, #6]
 8007870:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	88fa      	ldrh	r2, [r7, #6]
 8007876:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2222      	movs	r2, #34	@ 0x22
 8007882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d007      	beq.n	800789e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800789c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	695a      	ldr	r2, [r3, #20]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f042 0201 	orr.w	r2, r2, #1
 80078ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68da      	ldr	r2, [r3, #12]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f042 0220 	orr.w	r2, r2, #32
 80078bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bc80      	pop	{r7}
 80078c8:	4770      	bx	lr

080078ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b095      	sub	sp, #84	@ 0x54
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	330c      	adds	r3, #12
 80078d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	330c      	adds	r3, #12
 80078f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80078f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e5      	bne.n	80078d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3314      	adds	r3, #20
 800790c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	61fb      	str	r3, [r7, #28]
   return(result);
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	f023 0301 	bic.w	r3, r3, #1
 800791c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3314      	adds	r3, #20
 8007924:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007928:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800792c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800792e:	e841 2300 	strex	r3, r2, [r1]
 8007932:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1e5      	bne.n	8007906 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800793e:	2b01      	cmp	r3, #1
 8007940:	d119      	bne.n	8007976 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	330c      	adds	r3, #12
 8007948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	e853 3f00 	ldrex	r3, [r3]
 8007950:	60bb      	str	r3, [r7, #8]
   return(result);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	f023 0310 	bic.w	r3, r3, #16
 8007958:	647b      	str	r3, [r7, #68]	@ 0x44
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	330c      	adds	r3, #12
 8007960:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007962:	61ba      	str	r2, [r7, #24]
 8007964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	6979      	ldr	r1, [r7, #20]
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	613b      	str	r3, [r7, #16]
   return(result);
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e5      	bne.n	8007942 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007984:	bf00      	nop
 8007986:	3754      	adds	r7, #84	@ 0x54
 8007988:	46bd      	mov	sp, r7
 800798a:	bc80      	pop	{r7}
 800798c:	4770      	bx	lr

0800798e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f7ff fee8 	bl	800777e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ae:	bf00      	nop
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b085      	sub	sp, #20
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b21      	cmp	r3, #33	@ 0x21
 80079c8:	d13e      	bne.n	8007a48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079d2:	d114      	bne.n	80079fe <UART_Transmit_IT+0x48>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d110      	bne.n	80079fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	1c9a      	adds	r2, r3, #2
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	621a      	str	r2, [r3, #32]
 80079fc:	e008      	b.n	8007a10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	1c59      	adds	r1, r3, #1
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	6211      	str	r1, [r2, #32]
 8007a08:	781a      	ldrb	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10f      	bne.n	8007a44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	e000      	b.n	8007a4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a48:	2302      	movs	r3, #2
  }
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bc80      	pop	{r7}
 8007a52:	4770      	bx	lr

08007a54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7ff fe79 	bl	800776c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b08c      	sub	sp, #48	@ 0x30
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b22      	cmp	r3, #34	@ 0x22
 8007a96:	f040 80ae 	bne.w	8007bf6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa2:	d117      	bne.n	8007ad4 <UART_Receive_IT+0x50>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d113      	bne.n	8007ad4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007aac:	2300      	movs	r3, #0
 8007aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007acc:	1c9a      	adds	r2, r3, #2
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ad2:	e026      	b.n	8007b22 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ae6:	d007      	beq.n	8007af8 <UART_Receive_IT+0x74>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <UART_Receive_IT+0x82>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d106      	bne.n	8007b06 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	e008      	b.n	8007b18 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d15d      	bne.n	8007bf2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0220 	bic.w	r2, r2, #32
 8007b44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	695a      	ldr	r2, [r3, #20]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0201 	bic.w	r2, r2, #1
 8007b64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d135      	bne.n	8007be8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	330c      	adds	r3, #12
 8007b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	613b      	str	r3, [r7, #16]
   return(result);
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	f023 0310 	bic.w	r3, r3, #16
 8007b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	330c      	adds	r3, #12
 8007ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba2:	623a      	str	r2, [r7, #32]
 8007ba4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	69f9      	ldr	r1, [r7, #28]
 8007ba8:	6a3a      	ldr	r2, [r7, #32]
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e5      	bne.n	8007b82 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	2b10      	cmp	r3, #16
 8007bc2:	d10a      	bne.n	8007bda <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fdd5 	bl	8007790 <HAL_UARTEx_RxEventCallback>
 8007be6:	e002      	b.n	8007bee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7fb f983 	bl	8002ef4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e002      	b.n	8007bf8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	e000      	b.n	8007bf8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007bf6:	2302      	movs	r3, #2
  }
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3730      	adds	r7, #48	@ 0x30
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007c3a:	f023 030c 	bic.w	r3, r3, #12
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6812      	ldr	r2, [r2, #0]
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	430b      	orrs	r3, r1
 8007c46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699a      	ldr	r2, [r3, #24]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a2c      	ldr	r2, [pc, #176]	@ (8007d14 <UART_SetConfig+0x114>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d103      	bne.n	8007c70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007c68:	f7fe fb22 	bl	80062b0 <HAL_RCC_GetPCLK2Freq>
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	e002      	b.n	8007c76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007c70:	f7fe fb0a 	bl	8006288 <HAL_RCC_GetPCLK1Freq>
 8007c74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009a      	lsls	r2, r3, #2
 8007c80:	441a      	add	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8c:	4a22      	ldr	r2, [pc, #136]	@ (8007d18 <UART_SetConfig+0x118>)
 8007c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c92:	095b      	lsrs	r3, r3, #5
 8007c94:	0119      	lsls	r1, r3, #4
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	009a      	lsls	r2, r3, #2
 8007ca0:	441a      	add	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cac:	4b1a      	ldr	r3, [pc, #104]	@ (8007d18 <UART_SetConfig+0x118>)
 8007cae:	fba3 0302 	umull	r0, r3, r3, r2
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	2064      	movs	r0, #100	@ 0x64
 8007cb6:	fb00 f303 	mul.w	r3, r0, r3
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	3332      	adds	r3, #50	@ 0x32
 8007cc0:	4a15      	ldr	r2, [pc, #84]	@ (8007d18 <UART_SetConfig+0x118>)
 8007cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc6:	095b      	lsrs	r3, r3, #5
 8007cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ccc:	4419      	add	r1, r3
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009a      	lsls	r2, r3, #2
 8007cd8:	441a      	add	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d18 <UART_SetConfig+0x118>)
 8007ce6:	fba3 0302 	umull	r0, r3, r3, r2
 8007cea:	095b      	lsrs	r3, r3, #5
 8007cec:	2064      	movs	r0, #100	@ 0x64
 8007cee:	fb00 f303 	mul.w	r3, r0, r3
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	3332      	adds	r3, #50	@ 0x32
 8007cf8:	4a07      	ldr	r2, [pc, #28]	@ (8007d18 <UART_SetConfig+0x118>)
 8007cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfe:	095b      	lsrs	r3, r3, #5
 8007d00:	f003 020f 	and.w	r2, r3, #15
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	440a      	add	r2, r1
 8007d0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007d0c:	bf00      	nop
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40013800 	.word	0x40013800
 8007d18:	51eb851f 	.word	0x51eb851f

08007d1c <__cvt>:
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d22:	461d      	mov	r5, r3
 8007d24:	bfbb      	ittet	lt
 8007d26:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007d2a:	461d      	movlt	r5, r3
 8007d2c:	2300      	movge	r3, #0
 8007d2e:	232d      	movlt	r3, #45	@ 0x2d
 8007d30:	b088      	sub	sp, #32
 8007d32:	4614      	mov	r4, r2
 8007d34:	bfb8      	it	lt
 8007d36:	4614      	movlt	r4, r2
 8007d38:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007d3a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007d3c:	7013      	strb	r3, [r2, #0]
 8007d3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d40:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007d44:	f023 0820 	bic.w	r8, r3, #32
 8007d48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d4c:	d005      	beq.n	8007d5a <__cvt+0x3e>
 8007d4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007d52:	d100      	bne.n	8007d56 <__cvt+0x3a>
 8007d54:	3601      	adds	r6, #1
 8007d56:	2302      	movs	r3, #2
 8007d58:	e000      	b.n	8007d5c <__cvt+0x40>
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	aa07      	add	r2, sp, #28
 8007d5e:	9204      	str	r2, [sp, #16]
 8007d60:	aa06      	add	r2, sp, #24
 8007d62:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007d66:	e9cd 3600 	strd	r3, r6, [sp]
 8007d6a:	4622      	mov	r2, r4
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	f000 fe8f 	bl	8008a90 <_dtoa_r>
 8007d72:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007d76:	4607      	mov	r7, r0
 8007d78:	d119      	bne.n	8007dae <__cvt+0x92>
 8007d7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007d7c:	07db      	lsls	r3, r3, #31
 8007d7e:	d50e      	bpl.n	8007d9e <__cvt+0x82>
 8007d80:	eb00 0906 	add.w	r9, r0, r6
 8007d84:	2200      	movs	r2, #0
 8007d86:	2300      	movs	r3, #0
 8007d88:	4620      	mov	r0, r4
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	f7f8 fe0c 	bl	80009a8 <__aeabi_dcmpeq>
 8007d90:	b108      	cbz	r0, 8007d96 <__cvt+0x7a>
 8007d92:	f8cd 901c 	str.w	r9, [sp, #28]
 8007d96:	2230      	movs	r2, #48	@ 0x30
 8007d98:	9b07      	ldr	r3, [sp, #28]
 8007d9a:	454b      	cmp	r3, r9
 8007d9c:	d31e      	bcc.n	8007ddc <__cvt+0xc0>
 8007d9e:	4638      	mov	r0, r7
 8007da0:	9b07      	ldr	r3, [sp, #28]
 8007da2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007da4:	1bdb      	subs	r3, r3, r7
 8007da6:	6013      	str	r3, [r2, #0]
 8007da8:	b008      	add	sp, #32
 8007daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007db2:	eb00 0906 	add.w	r9, r0, r6
 8007db6:	d1e5      	bne.n	8007d84 <__cvt+0x68>
 8007db8:	7803      	ldrb	r3, [r0, #0]
 8007dba:	2b30      	cmp	r3, #48	@ 0x30
 8007dbc:	d10a      	bne.n	8007dd4 <__cvt+0xb8>
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	f7f8 fdef 	bl	80009a8 <__aeabi_dcmpeq>
 8007dca:	b918      	cbnz	r0, 8007dd4 <__cvt+0xb8>
 8007dcc:	f1c6 0601 	rsb	r6, r6, #1
 8007dd0:	f8ca 6000 	str.w	r6, [sl]
 8007dd4:	f8da 3000 	ldr.w	r3, [sl]
 8007dd8:	4499      	add	r9, r3
 8007dda:	e7d3      	b.n	8007d84 <__cvt+0x68>
 8007ddc:	1c59      	adds	r1, r3, #1
 8007dde:	9107      	str	r1, [sp, #28]
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	e7d9      	b.n	8007d98 <__cvt+0x7c>

08007de4 <__exponent>:
 8007de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007de6:	2900      	cmp	r1, #0
 8007de8:	bfb6      	itet	lt
 8007dea:	232d      	movlt	r3, #45	@ 0x2d
 8007dec:	232b      	movge	r3, #43	@ 0x2b
 8007dee:	4249      	neglt	r1, r1
 8007df0:	2909      	cmp	r1, #9
 8007df2:	7002      	strb	r2, [r0, #0]
 8007df4:	7043      	strb	r3, [r0, #1]
 8007df6:	dd29      	ble.n	8007e4c <__exponent+0x68>
 8007df8:	f10d 0307 	add.w	r3, sp, #7
 8007dfc:	461d      	mov	r5, r3
 8007dfe:	270a      	movs	r7, #10
 8007e00:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e04:	461a      	mov	r2, r3
 8007e06:	fb07 1416 	mls	r4, r7, r6, r1
 8007e0a:	3430      	adds	r4, #48	@ 0x30
 8007e0c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e10:	460c      	mov	r4, r1
 8007e12:	2c63      	cmp	r4, #99	@ 0x63
 8007e14:	4631      	mov	r1, r6
 8007e16:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e1a:	dcf1      	bgt.n	8007e00 <__exponent+0x1c>
 8007e1c:	3130      	adds	r1, #48	@ 0x30
 8007e1e:	1e94      	subs	r4, r2, #2
 8007e20:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e24:	4623      	mov	r3, r4
 8007e26:	1c41      	adds	r1, r0, #1
 8007e28:	42ab      	cmp	r3, r5
 8007e2a:	d30a      	bcc.n	8007e42 <__exponent+0x5e>
 8007e2c:	f10d 0309 	add.w	r3, sp, #9
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	42ac      	cmp	r4, r5
 8007e34:	bf88      	it	hi
 8007e36:	2300      	movhi	r3, #0
 8007e38:	3302      	adds	r3, #2
 8007e3a:	4403      	add	r3, r0
 8007e3c:	1a18      	subs	r0, r3, r0
 8007e3e:	b003      	add	sp, #12
 8007e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e42:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e46:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e4a:	e7ed      	b.n	8007e28 <__exponent+0x44>
 8007e4c:	2330      	movs	r3, #48	@ 0x30
 8007e4e:	3130      	adds	r1, #48	@ 0x30
 8007e50:	7083      	strb	r3, [r0, #2]
 8007e52:	70c1      	strb	r1, [r0, #3]
 8007e54:	1d03      	adds	r3, r0, #4
 8007e56:	e7f1      	b.n	8007e3c <__exponent+0x58>

08007e58 <_printf_float>:
 8007e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5c:	b091      	sub	sp, #68	@ 0x44
 8007e5e:	460c      	mov	r4, r1
 8007e60:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007e64:	4616      	mov	r6, r2
 8007e66:	461f      	mov	r7, r3
 8007e68:	4605      	mov	r5, r0
 8007e6a:	f000 fcf3 	bl	8008854 <_localeconv_r>
 8007e6e:	6803      	ldr	r3, [r0, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	9308      	str	r3, [sp, #32]
 8007e74:	f7f8 f96c 	bl	8000150 <strlen>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	930e      	str	r3, [sp, #56]	@ 0x38
 8007e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8007e80:	9009      	str	r0, [sp, #36]	@ 0x24
 8007e82:	3307      	adds	r3, #7
 8007e84:	f023 0307 	bic.w	r3, r3, #7
 8007e88:	f103 0208 	add.w	r2, r3, #8
 8007e8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e90:	f8d4 b000 	ldr.w	fp, [r4]
 8007e94:	f8c8 2000 	str.w	r2, [r8]
 8007e98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007ea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ea2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007eae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8008124 <_printf_float+0x2cc>)
 8007eb4:	f7f8 fdaa 	bl	8000a0c <__aeabi_dcmpun>
 8007eb8:	bb70      	cbnz	r0, 8007f18 <_printf_float+0xc0>
 8007eba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec2:	4b98      	ldr	r3, [pc, #608]	@ (8008124 <_printf_float+0x2cc>)
 8007ec4:	f7f8 fd84 	bl	80009d0 <__aeabi_dcmple>
 8007ec8:	bb30      	cbnz	r0, 8007f18 <_printf_float+0xc0>
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2300      	movs	r3, #0
 8007ece:	4640      	mov	r0, r8
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	f7f8 fd73 	bl	80009bc <__aeabi_dcmplt>
 8007ed6:	b110      	cbz	r0, 8007ede <_printf_float+0x86>
 8007ed8:	232d      	movs	r3, #45	@ 0x2d
 8007eda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ede:	4a92      	ldr	r2, [pc, #584]	@ (8008128 <_printf_float+0x2d0>)
 8007ee0:	4b92      	ldr	r3, [pc, #584]	@ (800812c <_printf_float+0x2d4>)
 8007ee2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007ee6:	bf8c      	ite	hi
 8007ee8:	4690      	movhi	r8, r2
 8007eea:	4698      	movls	r8, r3
 8007eec:	2303      	movs	r3, #3
 8007eee:	f04f 0900 	mov.w	r9, #0
 8007ef2:	6123      	str	r3, [r4, #16]
 8007ef4:	f02b 0304 	bic.w	r3, fp, #4
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	4633      	mov	r3, r6
 8007efc:	4621      	mov	r1, r4
 8007efe:	4628      	mov	r0, r5
 8007f00:	9700      	str	r7, [sp, #0]
 8007f02:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007f04:	f000 f9d4 	bl	80082b0 <_printf_common>
 8007f08:	3001      	adds	r0, #1
 8007f0a:	f040 8090 	bne.w	800802e <_printf_float+0x1d6>
 8007f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f12:	b011      	add	sp, #68	@ 0x44
 8007f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f18:	4642      	mov	r2, r8
 8007f1a:	464b      	mov	r3, r9
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	4649      	mov	r1, r9
 8007f20:	f7f8 fd74 	bl	8000a0c <__aeabi_dcmpun>
 8007f24:	b148      	cbz	r0, 8007f3a <_printf_float+0xe2>
 8007f26:	464b      	mov	r3, r9
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	bfb8      	it	lt
 8007f2c:	232d      	movlt	r3, #45	@ 0x2d
 8007f2e:	4a80      	ldr	r2, [pc, #512]	@ (8008130 <_printf_float+0x2d8>)
 8007f30:	bfb8      	it	lt
 8007f32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f36:	4b7f      	ldr	r3, [pc, #508]	@ (8008134 <_printf_float+0x2dc>)
 8007f38:	e7d3      	b.n	8007ee2 <_printf_float+0x8a>
 8007f3a:	6863      	ldr	r3, [r4, #4]
 8007f3c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	d13f      	bne.n	8007fc4 <_printf_float+0x16c>
 8007f44:	2306      	movs	r3, #6
 8007f46:	6063      	str	r3, [r4, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007f4e:	6023      	str	r3, [r4, #0]
 8007f50:	9206      	str	r2, [sp, #24]
 8007f52:	aa0e      	add	r2, sp, #56	@ 0x38
 8007f54:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007f58:	aa0d      	add	r2, sp, #52	@ 0x34
 8007f5a:	9203      	str	r2, [sp, #12]
 8007f5c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007f60:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007f64:	6863      	ldr	r3, [r4, #4]
 8007f66:	4642      	mov	r2, r8
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	464b      	mov	r3, r9
 8007f6e:	910a      	str	r1, [sp, #40]	@ 0x28
 8007f70:	f7ff fed4 	bl	8007d1c <__cvt>
 8007f74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f76:	4680      	mov	r8, r0
 8007f78:	2947      	cmp	r1, #71	@ 0x47
 8007f7a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007f7c:	d128      	bne.n	8007fd0 <_printf_float+0x178>
 8007f7e:	1cc8      	adds	r0, r1, #3
 8007f80:	db02      	blt.n	8007f88 <_printf_float+0x130>
 8007f82:	6863      	ldr	r3, [r4, #4]
 8007f84:	4299      	cmp	r1, r3
 8007f86:	dd40      	ble.n	800800a <_printf_float+0x1b2>
 8007f88:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f8c:	fa5f fa8a 	uxtb.w	sl, sl
 8007f90:	4652      	mov	r2, sl
 8007f92:	3901      	subs	r1, #1
 8007f94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007f98:	910d      	str	r1, [sp, #52]	@ 0x34
 8007f9a:	f7ff ff23 	bl	8007de4 <__exponent>
 8007f9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007fa0:	4681      	mov	r9, r0
 8007fa2:	1813      	adds	r3, r2, r0
 8007fa4:	2a01      	cmp	r2, #1
 8007fa6:	6123      	str	r3, [r4, #16]
 8007fa8:	dc02      	bgt.n	8007fb0 <_printf_float+0x158>
 8007faa:	6822      	ldr	r2, [r4, #0]
 8007fac:	07d2      	lsls	r2, r2, #31
 8007fae:	d501      	bpl.n	8007fb4 <_printf_float+0x15c>
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	6123      	str	r3, [r4, #16]
 8007fb4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d09e      	beq.n	8007efa <_printf_float+0xa2>
 8007fbc:	232d      	movs	r3, #45	@ 0x2d
 8007fbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fc2:	e79a      	b.n	8007efa <_printf_float+0xa2>
 8007fc4:	2947      	cmp	r1, #71	@ 0x47
 8007fc6:	d1bf      	bne.n	8007f48 <_printf_float+0xf0>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1bd      	bne.n	8007f48 <_printf_float+0xf0>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e7ba      	b.n	8007f46 <_printf_float+0xee>
 8007fd0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007fd4:	d9dc      	bls.n	8007f90 <_printf_float+0x138>
 8007fd6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007fda:	d118      	bne.n	800800e <_printf_float+0x1b6>
 8007fdc:	2900      	cmp	r1, #0
 8007fde:	6863      	ldr	r3, [r4, #4]
 8007fe0:	dd0b      	ble.n	8007ffa <_printf_float+0x1a2>
 8007fe2:	6121      	str	r1, [r4, #16]
 8007fe4:	b913      	cbnz	r3, 8007fec <_printf_float+0x194>
 8007fe6:	6822      	ldr	r2, [r4, #0]
 8007fe8:	07d0      	lsls	r0, r2, #31
 8007fea:	d502      	bpl.n	8007ff2 <_printf_float+0x19a>
 8007fec:	3301      	adds	r3, #1
 8007fee:	440b      	add	r3, r1
 8007ff0:	6123      	str	r3, [r4, #16]
 8007ff2:	f04f 0900 	mov.w	r9, #0
 8007ff6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ff8:	e7dc      	b.n	8007fb4 <_printf_float+0x15c>
 8007ffa:	b913      	cbnz	r3, 8008002 <_printf_float+0x1aa>
 8007ffc:	6822      	ldr	r2, [r4, #0]
 8007ffe:	07d2      	lsls	r2, r2, #31
 8008000:	d501      	bpl.n	8008006 <_printf_float+0x1ae>
 8008002:	3302      	adds	r3, #2
 8008004:	e7f4      	b.n	8007ff0 <_printf_float+0x198>
 8008006:	2301      	movs	r3, #1
 8008008:	e7f2      	b.n	8007ff0 <_printf_float+0x198>
 800800a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800800e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008010:	4299      	cmp	r1, r3
 8008012:	db05      	blt.n	8008020 <_printf_float+0x1c8>
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	6121      	str	r1, [r4, #16]
 8008018:	07d8      	lsls	r0, r3, #31
 800801a:	d5ea      	bpl.n	8007ff2 <_printf_float+0x19a>
 800801c:	1c4b      	adds	r3, r1, #1
 800801e:	e7e7      	b.n	8007ff0 <_printf_float+0x198>
 8008020:	2900      	cmp	r1, #0
 8008022:	bfcc      	ite	gt
 8008024:	2201      	movgt	r2, #1
 8008026:	f1c1 0202 	rsble	r2, r1, #2
 800802a:	4413      	add	r3, r2
 800802c:	e7e0      	b.n	8007ff0 <_printf_float+0x198>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	055a      	lsls	r2, r3, #21
 8008032:	d407      	bmi.n	8008044 <_printf_float+0x1ec>
 8008034:	6923      	ldr	r3, [r4, #16]
 8008036:	4642      	mov	r2, r8
 8008038:	4631      	mov	r1, r6
 800803a:	4628      	mov	r0, r5
 800803c:	47b8      	blx	r7
 800803e:	3001      	adds	r0, #1
 8008040:	d12b      	bne.n	800809a <_printf_float+0x242>
 8008042:	e764      	b.n	8007f0e <_printf_float+0xb6>
 8008044:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008048:	f240 80dc 	bls.w	8008204 <_printf_float+0x3ac>
 800804c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008050:	2200      	movs	r2, #0
 8008052:	2300      	movs	r3, #0
 8008054:	f7f8 fca8 	bl	80009a8 <__aeabi_dcmpeq>
 8008058:	2800      	cmp	r0, #0
 800805a:	d033      	beq.n	80080c4 <_printf_float+0x26c>
 800805c:	2301      	movs	r3, #1
 800805e:	4631      	mov	r1, r6
 8008060:	4628      	mov	r0, r5
 8008062:	4a35      	ldr	r2, [pc, #212]	@ (8008138 <_printf_float+0x2e0>)
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	f43f af51 	beq.w	8007f0e <_printf_float+0xb6>
 800806c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008070:	4543      	cmp	r3, r8
 8008072:	db02      	blt.n	800807a <_printf_float+0x222>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	07d8      	lsls	r0, r3, #31
 8008078:	d50f      	bpl.n	800809a <_printf_float+0x242>
 800807a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800807e:	4631      	mov	r1, r6
 8008080:	4628      	mov	r0, r5
 8008082:	47b8      	blx	r7
 8008084:	3001      	adds	r0, #1
 8008086:	f43f af42 	beq.w	8007f0e <_printf_float+0xb6>
 800808a:	f04f 0900 	mov.w	r9, #0
 800808e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008092:	f104 0a1a 	add.w	sl, r4, #26
 8008096:	45c8      	cmp	r8, r9
 8008098:	dc09      	bgt.n	80080ae <_printf_float+0x256>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	079b      	lsls	r3, r3, #30
 800809e:	f100 8102 	bmi.w	80082a6 <_printf_float+0x44e>
 80080a2:	68e0      	ldr	r0, [r4, #12]
 80080a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080a6:	4298      	cmp	r0, r3
 80080a8:	bfb8      	it	lt
 80080aa:	4618      	movlt	r0, r3
 80080ac:	e731      	b.n	8007f12 <_printf_float+0xba>
 80080ae:	2301      	movs	r3, #1
 80080b0:	4652      	mov	r2, sl
 80080b2:	4631      	mov	r1, r6
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b8      	blx	r7
 80080b8:	3001      	adds	r0, #1
 80080ba:	f43f af28 	beq.w	8007f0e <_printf_float+0xb6>
 80080be:	f109 0901 	add.w	r9, r9, #1
 80080c2:	e7e8      	b.n	8008096 <_printf_float+0x23e>
 80080c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	dc38      	bgt.n	800813c <_printf_float+0x2e4>
 80080ca:	2301      	movs	r3, #1
 80080cc:	4631      	mov	r1, r6
 80080ce:	4628      	mov	r0, r5
 80080d0:	4a19      	ldr	r2, [pc, #100]	@ (8008138 <_printf_float+0x2e0>)
 80080d2:	47b8      	blx	r7
 80080d4:	3001      	adds	r0, #1
 80080d6:	f43f af1a 	beq.w	8007f0e <_printf_float+0xb6>
 80080da:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80080de:	ea59 0303 	orrs.w	r3, r9, r3
 80080e2:	d102      	bne.n	80080ea <_printf_float+0x292>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	07d9      	lsls	r1, r3, #31
 80080e8:	d5d7      	bpl.n	800809a <_printf_float+0x242>
 80080ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	f43f af0a 	beq.w	8007f0e <_printf_float+0xb6>
 80080fa:	f04f 0a00 	mov.w	sl, #0
 80080fe:	f104 0b1a 	add.w	fp, r4, #26
 8008102:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008104:	425b      	negs	r3, r3
 8008106:	4553      	cmp	r3, sl
 8008108:	dc01      	bgt.n	800810e <_printf_float+0x2b6>
 800810a:	464b      	mov	r3, r9
 800810c:	e793      	b.n	8008036 <_printf_float+0x1de>
 800810e:	2301      	movs	r3, #1
 8008110:	465a      	mov	r2, fp
 8008112:	4631      	mov	r1, r6
 8008114:	4628      	mov	r0, r5
 8008116:	47b8      	blx	r7
 8008118:	3001      	adds	r0, #1
 800811a:	f43f aef8 	beq.w	8007f0e <_printf_float+0xb6>
 800811e:	f10a 0a01 	add.w	sl, sl, #1
 8008122:	e7ee      	b.n	8008102 <_printf_float+0x2aa>
 8008124:	7fefffff 	.word	0x7fefffff
 8008128:	0800b796 	.word	0x0800b796
 800812c:	0800b792 	.word	0x0800b792
 8008130:	0800b79e 	.word	0x0800b79e
 8008134:	0800b79a 	.word	0x0800b79a
 8008138:	0800b7a2 	.word	0x0800b7a2
 800813c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800813e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008142:	4553      	cmp	r3, sl
 8008144:	bfa8      	it	ge
 8008146:	4653      	movge	r3, sl
 8008148:	2b00      	cmp	r3, #0
 800814a:	4699      	mov	r9, r3
 800814c:	dc36      	bgt.n	80081bc <_printf_float+0x364>
 800814e:	f04f 0b00 	mov.w	fp, #0
 8008152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008156:	f104 021a 	add.w	r2, r4, #26
 800815a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800815c:	930a      	str	r3, [sp, #40]	@ 0x28
 800815e:	eba3 0309 	sub.w	r3, r3, r9
 8008162:	455b      	cmp	r3, fp
 8008164:	dc31      	bgt.n	80081ca <_printf_float+0x372>
 8008166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008168:	459a      	cmp	sl, r3
 800816a:	dc3a      	bgt.n	80081e2 <_printf_float+0x38a>
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	07da      	lsls	r2, r3, #31
 8008170:	d437      	bmi.n	80081e2 <_printf_float+0x38a>
 8008172:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008174:	ebaa 0903 	sub.w	r9, sl, r3
 8008178:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800817a:	ebaa 0303 	sub.w	r3, sl, r3
 800817e:	4599      	cmp	r9, r3
 8008180:	bfa8      	it	ge
 8008182:	4699      	movge	r9, r3
 8008184:	f1b9 0f00 	cmp.w	r9, #0
 8008188:	dc33      	bgt.n	80081f2 <_printf_float+0x39a>
 800818a:	f04f 0800 	mov.w	r8, #0
 800818e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008192:	f104 0b1a 	add.w	fp, r4, #26
 8008196:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008198:	ebaa 0303 	sub.w	r3, sl, r3
 800819c:	eba3 0309 	sub.w	r3, r3, r9
 80081a0:	4543      	cmp	r3, r8
 80081a2:	f77f af7a 	ble.w	800809a <_printf_float+0x242>
 80081a6:	2301      	movs	r3, #1
 80081a8:	465a      	mov	r2, fp
 80081aa:	4631      	mov	r1, r6
 80081ac:	4628      	mov	r0, r5
 80081ae:	47b8      	blx	r7
 80081b0:	3001      	adds	r0, #1
 80081b2:	f43f aeac 	beq.w	8007f0e <_printf_float+0xb6>
 80081b6:	f108 0801 	add.w	r8, r8, #1
 80081ba:	e7ec      	b.n	8008196 <_printf_float+0x33e>
 80081bc:	4642      	mov	r2, r8
 80081be:	4631      	mov	r1, r6
 80081c0:	4628      	mov	r0, r5
 80081c2:	47b8      	blx	r7
 80081c4:	3001      	adds	r0, #1
 80081c6:	d1c2      	bne.n	800814e <_printf_float+0x2f6>
 80081c8:	e6a1      	b.n	8007f0e <_printf_float+0xb6>
 80081ca:	2301      	movs	r3, #1
 80081cc:	4631      	mov	r1, r6
 80081ce:	4628      	mov	r0, r5
 80081d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80081d2:	47b8      	blx	r7
 80081d4:	3001      	adds	r0, #1
 80081d6:	f43f ae9a 	beq.w	8007f0e <_printf_float+0xb6>
 80081da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081dc:	f10b 0b01 	add.w	fp, fp, #1
 80081e0:	e7bb      	b.n	800815a <_printf_float+0x302>
 80081e2:	4631      	mov	r1, r6
 80081e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80081e8:	4628      	mov	r0, r5
 80081ea:	47b8      	blx	r7
 80081ec:	3001      	adds	r0, #1
 80081ee:	d1c0      	bne.n	8008172 <_printf_float+0x31a>
 80081f0:	e68d      	b.n	8007f0e <_printf_float+0xb6>
 80081f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081f4:	464b      	mov	r3, r9
 80081f6:	4631      	mov	r1, r6
 80081f8:	4628      	mov	r0, r5
 80081fa:	4442      	add	r2, r8
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	d1c3      	bne.n	800818a <_printf_float+0x332>
 8008202:	e684      	b.n	8007f0e <_printf_float+0xb6>
 8008204:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008208:	f1ba 0f01 	cmp.w	sl, #1
 800820c:	dc01      	bgt.n	8008212 <_printf_float+0x3ba>
 800820e:	07db      	lsls	r3, r3, #31
 8008210:	d536      	bpl.n	8008280 <_printf_float+0x428>
 8008212:	2301      	movs	r3, #1
 8008214:	4642      	mov	r2, r8
 8008216:	4631      	mov	r1, r6
 8008218:	4628      	mov	r0, r5
 800821a:	47b8      	blx	r7
 800821c:	3001      	adds	r0, #1
 800821e:	f43f ae76 	beq.w	8007f0e <_printf_float+0xb6>
 8008222:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008226:	4631      	mov	r1, r6
 8008228:	4628      	mov	r0, r5
 800822a:	47b8      	blx	r7
 800822c:	3001      	adds	r0, #1
 800822e:	f43f ae6e 	beq.w	8007f0e <_printf_float+0xb6>
 8008232:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008236:	2200      	movs	r2, #0
 8008238:	2300      	movs	r3, #0
 800823a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800823e:	f7f8 fbb3 	bl	80009a8 <__aeabi_dcmpeq>
 8008242:	b9c0      	cbnz	r0, 8008276 <_printf_float+0x41e>
 8008244:	4653      	mov	r3, sl
 8008246:	f108 0201 	add.w	r2, r8, #1
 800824a:	4631      	mov	r1, r6
 800824c:	4628      	mov	r0, r5
 800824e:	47b8      	blx	r7
 8008250:	3001      	adds	r0, #1
 8008252:	d10c      	bne.n	800826e <_printf_float+0x416>
 8008254:	e65b      	b.n	8007f0e <_printf_float+0xb6>
 8008256:	2301      	movs	r3, #1
 8008258:	465a      	mov	r2, fp
 800825a:	4631      	mov	r1, r6
 800825c:	4628      	mov	r0, r5
 800825e:	47b8      	blx	r7
 8008260:	3001      	adds	r0, #1
 8008262:	f43f ae54 	beq.w	8007f0e <_printf_float+0xb6>
 8008266:	f108 0801 	add.w	r8, r8, #1
 800826a:	45d0      	cmp	r8, sl
 800826c:	dbf3      	blt.n	8008256 <_printf_float+0x3fe>
 800826e:	464b      	mov	r3, r9
 8008270:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008274:	e6e0      	b.n	8008038 <_printf_float+0x1e0>
 8008276:	f04f 0800 	mov.w	r8, #0
 800827a:	f104 0b1a 	add.w	fp, r4, #26
 800827e:	e7f4      	b.n	800826a <_printf_float+0x412>
 8008280:	2301      	movs	r3, #1
 8008282:	4642      	mov	r2, r8
 8008284:	e7e1      	b.n	800824a <_printf_float+0x3f2>
 8008286:	2301      	movs	r3, #1
 8008288:	464a      	mov	r2, r9
 800828a:	4631      	mov	r1, r6
 800828c:	4628      	mov	r0, r5
 800828e:	47b8      	blx	r7
 8008290:	3001      	adds	r0, #1
 8008292:	f43f ae3c 	beq.w	8007f0e <_printf_float+0xb6>
 8008296:	f108 0801 	add.w	r8, r8, #1
 800829a:	68e3      	ldr	r3, [r4, #12]
 800829c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800829e:	1a5b      	subs	r3, r3, r1
 80082a0:	4543      	cmp	r3, r8
 80082a2:	dcf0      	bgt.n	8008286 <_printf_float+0x42e>
 80082a4:	e6fd      	b.n	80080a2 <_printf_float+0x24a>
 80082a6:	f04f 0800 	mov.w	r8, #0
 80082aa:	f104 0919 	add.w	r9, r4, #25
 80082ae:	e7f4      	b.n	800829a <_printf_float+0x442>

080082b0 <_printf_common>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	4616      	mov	r6, r2
 80082b6:	4698      	mov	r8, r3
 80082b8:	688a      	ldr	r2, [r1, #8]
 80082ba:	690b      	ldr	r3, [r1, #16]
 80082bc:	4607      	mov	r7, r0
 80082be:	4293      	cmp	r3, r2
 80082c0:	bfb8      	it	lt
 80082c2:	4613      	movlt	r3, r2
 80082c4:	6033      	str	r3, [r6, #0]
 80082c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082ca:	460c      	mov	r4, r1
 80082cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082d0:	b10a      	cbz	r2, 80082d6 <_printf_common+0x26>
 80082d2:	3301      	adds	r3, #1
 80082d4:	6033      	str	r3, [r6, #0]
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	0699      	lsls	r1, r3, #26
 80082da:	bf42      	ittt	mi
 80082dc:	6833      	ldrmi	r3, [r6, #0]
 80082de:	3302      	addmi	r3, #2
 80082e0:	6033      	strmi	r3, [r6, #0]
 80082e2:	6825      	ldr	r5, [r4, #0]
 80082e4:	f015 0506 	ands.w	r5, r5, #6
 80082e8:	d106      	bne.n	80082f8 <_printf_common+0x48>
 80082ea:	f104 0a19 	add.w	sl, r4, #25
 80082ee:	68e3      	ldr	r3, [r4, #12]
 80082f0:	6832      	ldr	r2, [r6, #0]
 80082f2:	1a9b      	subs	r3, r3, r2
 80082f4:	42ab      	cmp	r3, r5
 80082f6:	dc2b      	bgt.n	8008350 <_printf_common+0xa0>
 80082f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082fc:	6822      	ldr	r2, [r4, #0]
 80082fe:	3b00      	subs	r3, #0
 8008300:	bf18      	it	ne
 8008302:	2301      	movne	r3, #1
 8008304:	0692      	lsls	r2, r2, #26
 8008306:	d430      	bmi.n	800836a <_printf_common+0xba>
 8008308:	4641      	mov	r1, r8
 800830a:	4638      	mov	r0, r7
 800830c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008310:	47c8      	blx	r9
 8008312:	3001      	adds	r0, #1
 8008314:	d023      	beq.n	800835e <_printf_common+0xae>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	6922      	ldr	r2, [r4, #16]
 800831a:	f003 0306 	and.w	r3, r3, #6
 800831e:	2b04      	cmp	r3, #4
 8008320:	bf14      	ite	ne
 8008322:	2500      	movne	r5, #0
 8008324:	6833      	ldreq	r3, [r6, #0]
 8008326:	f04f 0600 	mov.w	r6, #0
 800832a:	bf08      	it	eq
 800832c:	68e5      	ldreq	r5, [r4, #12]
 800832e:	f104 041a 	add.w	r4, r4, #26
 8008332:	bf08      	it	eq
 8008334:	1aed      	subeq	r5, r5, r3
 8008336:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800833a:	bf08      	it	eq
 800833c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008340:	4293      	cmp	r3, r2
 8008342:	bfc4      	itt	gt
 8008344:	1a9b      	subgt	r3, r3, r2
 8008346:	18ed      	addgt	r5, r5, r3
 8008348:	42b5      	cmp	r5, r6
 800834a:	d11a      	bne.n	8008382 <_printf_common+0xd2>
 800834c:	2000      	movs	r0, #0
 800834e:	e008      	b.n	8008362 <_printf_common+0xb2>
 8008350:	2301      	movs	r3, #1
 8008352:	4652      	mov	r2, sl
 8008354:	4641      	mov	r1, r8
 8008356:	4638      	mov	r0, r7
 8008358:	47c8      	blx	r9
 800835a:	3001      	adds	r0, #1
 800835c:	d103      	bne.n	8008366 <_printf_common+0xb6>
 800835e:	f04f 30ff 	mov.w	r0, #4294967295
 8008362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008366:	3501      	adds	r5, #1
 8008368:	e7c1      	b.n	80082ee <_printf_common+0x3e>
 800836a:	2030      	movs	r0, #48	@ 0x30
 800836c:	18e1      	adds	r1, r4, r3
 800836e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008372:	1c5a      	adds	r2, r3, #1
 8008374:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008378:	4422      	add	r2, r4
 800837a:	3302      	adds	r3, #2
 800837c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008380:	e7c2      	b.n	8008308 <_printf_common+0x58>
 8008382:	2301      	movs	r3, #1
 8008384:	4622      	mov	r2, r4
 8008386:	4641      	mov	r1, r8
 8008388:	4638      	mov	r0, r7
 800838a:	47c8      	blx	r9
 800838c:	3001      	adds	r0, #1
 800838e:	d0e6      	beq.n	800835e <_printf_common+0xae>
 8008390:	3601      	adds	r6, #1
 8008392:	e7d9      	b.n	8008348 <_printf_common+0x98>

08008394 <_printf_i>:
 8008394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008398:	7e0f      	ldrb	r7, [r1, #24]
 800839a:	4691      	mov	r9, r2
 800839c:	2f78      	cmp	r7, #120	@ 0x78
 800839e:	4680      	mov	r8, r0
 80083a0:	460c      	mov	r4, r1
 80083a2:	469a      	mov	sl, r3
 80083a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083aa:	d807      	bhi.n	80083bc <_printf_i+0x28>
 80083ac:	2f62      	cmp	r7, #98	@ 0x62
 80083ae:	d80a      	bhi.n	80083c6 <_printf_i+0x32>
 80083b0:	2f00      	cmp	r7, #0
 80083b2:	f000 80d1 	beq.w	8008558 <_printf_i+0x1c4>
 80083b6:	2f58      	cmp	r7, #88	@ 0x58
 80083b8:	f000 80b8 	beq.w	800852c <_printf_i+0x198>
 80083bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083c4:	e03a      	b.n	800843c <_printf_i+0xa8>
 80083c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083ca:	2b15      	cmp	r3, #21
 80083cc:	d8f6      	bhi.n	80083bc <_printf_i+0x28>
 80083ce:	a101      	add	r1, pc, #4	@ (adr r1, 80083d4 <_printf_i+0x40>)
 80083d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083d4:	0800842d 	.word	0x0800842d
 80083d8:	08008441 	.word	0x08008441
 80083dc:	080083bd 	.word	0x080083bd
 80083e0:	080083bd 	.word	0x080083bd
 80083e4:	080083bd 	.word	0x080083bd
 80083e8:	080083bd 	.word	0x080083bd
 80083ec:	08008441 	.word	0x08008441
 80083f0:	080083bd 	.word	0x080083bd
 80083f4:	080083bd 	.word	0x080083bd
 80083f8:	080083bd 	.word	0x080083bd
 80083fc:	080083bd 	.word	0x080083bd
 8008400:	0800853f 	.word	0x0800853f
 8008404:	0800846b 	.word	0x0800846b
 8008408:	080084f9 	.word	0x080084f9
 800840c:	080083bd 	.word	0x080083bd
 8008410:	080083bd 	.word	0x080083bd
 8008414:	08008561 	.word	0x08008561
 8008418:	080083bd 	.word	0x080083bd
 800841c:	0800846b 	.word	0x0800846b
 8008420:	080083bd 	.word	0x080083bd
 8008424:	080083bd 	.word	0x080083bd
 8008428:	08008501 	.word	0x08008501
 800842c:	6833      	ldr	r3, [r6, #0]
 800842e:	1d1a      	adds	r2, r3, #4
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	6032      	str	r2, [r6, #0]
 8008434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800843c:	2301      	movs	r3, #1
 800843e:	e09c      	b.n	800857a <_printf_i+0x1e6>
 8008440:	6833      	ldr	r3, [r6, #0]
 8008442:	6820      	ldr	r0, [r4, #0]
 8008444:	1d19      	adds	r1, r3, #4
 8008446:	6031      	str	r1, [r6, #0]
 8008448:	0606      	lsls	r6, r0, #24
 800844a:	d501      	bpl.n	8008450 <_printf_i+0xbc>
 800844c:	681d      	ldr	r5, [r3, #0]
 800844e:	e003      	b.n	8008458 <_printf_i+0xc4>
 8008450:	0645      	lsls	r5, r0, #25
 8008452:	d5fb      	bpl.n	800844c <_printf_i+0xb8>
 8008454:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008458:	2d00      	cmp	r5, #0
 800845a:	da03      	bge.n	8008464 <_printf_i+0xd0>
 800845c:	232d      	movs	r3, #45	@ 0x2d
 800845e:	426d      	negs	r5, r5
 8008460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008464:	230a      	movs	r3, #10
 8008466:	4858      	ldr	r0, [pc, #352]	@ (80085c8 <_printf_i+0x234>)
 8008468:	e011      	b.n	800848e <_printf_i+0xfa>
 800846a:	6821      	ldr	r1, [r4, #0]
 800846c:	6833      	ldr	r3, [r6, #0]
 800846e:	0608      	lsls	r0, r1, #24
 8008470:	f853 5b04 	ldr.w	r5, [r3], #4
 8008474:	d402      	bmi.n	800847c <_printf_i+0xe8>
 8008476:	0649      	lsls	r1, r1, #25
 8008478:	bf48      	it	mi
 800847a:	b2ad      	uxthmi	r5, r5
 800847c:	2f6f      	cmp	r7, #111	@ 0x6f
 800847e:	6033      	str	r3, [r6, #0]
 8008480:	bf14      	ite	ne
 8008482:	230a      	movne	r3, #10
 8008484:	2308      	moveq	r3, #8
 8008486:	4850      	ldr	r0, [pc, #320]	@ (80085c8 <_printf_i+0x234>)
 8008488:	2100      	movs	r1, #0
 800848a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800848e:	6866      	ldr	r6, [r4, #4]
 8008490:	2e00      	cmp	r6, #0
 8008492:	60a6      	str	r6, [r4, #8]
 8008494:	db05      	blt.n	80084a2 <_printf_i+0x10e>
 8008496:	6821      	ldr	r1, [r4, #0]
 8008498:	432e      	orrs	r6, r5
 800849a:	f021 0104 	bic.w	r1, r1, #4
 800849e:	6021      	str	r1, [r4, #0]
 80084a0:	d04b      	beq.n	800853a <_printf_i+0x1a6>
 80084a2:	4616      	mov	r6, r2
 80084a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80084a8:	fb03 5711 	mls	r7, r3, r1, r5
 80084ac:	5dc7      	ldrb	r7, [r0, r7]
 80084ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084b2:	462f      	mov	r7, r5
 80084b4:	42bb      	cmp	r3, r7
 80084b6:	460d      	mov	r5, r1
 80084b8:	d9f4      	bls.n	80084a4 <_printf_i+0x110>
 80084ba:	2b08      	cmp	r3, #8
 80084bc:	d10b      	bne.n	80084d6 <_printf_i+0x142>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	07df      	lsls	r7, r3, #31
 80084c2:	d508      	bpl.n	80084d6 <_printf_i+0x142>
 80084c4:	6923      	ldr	r3, [r4, #16]
 80084c6:	6861      	ldr	r1, [r4, #4]
 80084c8:	4299      	cmp	r1, r3
 80084ca:	bfde      	ittt	le
 80084cc:	2330      	movle	r3, #48	@ 0x30
 80084ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084d6:	1b92      	subs	r2, r2, r6
 80084d8:	6122      	str	r2, [r4, #16]
 80084da:	464b      	mov	r3, r9
 80084dc:	4621      	mov	r1, r4
 80084de:	4640      	mov	r0, r8
 80084e0:	f8cd a000 	str.w	sl, [sp]
 80084e4:	aa03      	add	r2, sp, #12
 80084e6:	f7ff fee3 	bl	80082b0 <_printf_common>
 80084ea:	3001      	adds	r0, #1
 80084ec:	d14a      	bne.n	8008584 <_printf_i+0x1f0>
 80084ee:	f04f 30ff 	mov.w	r0, #4294967295
 80084f2:	b004      	add	sp, #16
 80084f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f8:	6823      	ldr	r3, [r4, #0]
 80084fa:	f043 0320 	orr.w	r3, r3, #32
 80084fe:	6023      	str	r3, [r4, #0]
 8008500:	2778      	movs	r7, #120	@ 0x78
 8008502:	4832      	ldr	r0, [pc, #200]	@ (80085cc <_printf_i+0x238>)
 8008504:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	6831      	ldr	r1, [r6, #0]
 800850c:	061f      	lsls	r7, r3, #24
 800850e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008512:	d402      	bmi.n	800851a <_printf_i+0x186>
 8008514:	065f      	lsls	r7, r3, #25
 8008516:	bf48      	it	mi
 8008518:	b2ad      	uxthmi	r5, r5
 800851a:	6031      	str	r1, [r6, #0]
 800851c:	07d9      	lsls	r1, r3, #31
 800851e:	bf44      	itt	mi
 8008520:	f043 0320 	orrmi.w	r3, r3, #32
 8008524:	6023      	strmi	r3, [r4, #0]
 8008526:	b11d      	cbz	r5, 8008530 <_printf_i+0x19c>
 8008528:	2310      	movs	r3, #16
 800852a:	e7ad      	b.n	8008488 <_printf_i+0xf4>
 800852c:	4826      	ldr	r0, [pc, #152]	@ (80085c8 <_printf_i+0x234>)
 800852e:	e7e9      	b.n	8008504 <_printf_i+0x170>
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	f023 0320 	bic.w	r3, r3, #32
 8008536:	6023      	str	r3, [r4, #0]
 8008538:	e7f6      	b.n	8008528 <_printf_i+0x194>
 800853a:	4616      	mov	r6, r2
 800853c:	e7bd      	b.n	80084ba <_printf_i+0x126>
 800853e:	6833      	ldr	r3, [r6, #0]
 8008540:	6825      	ldr	r5, [r4, #0]
 8008542:	1d18      	adds	r0, r3, #4
 8008544:	6961      	ldr	r1, [r4, #20]
 8008546:	6030      	str	r0, [r6, #0]
 8008548:	062e      	lsls	r6, r5, #24
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	d501      	bpl.n	8008552 <_printf_i+0x1be>
 800854e:	6019      	str	r1, [r3, #0]
 8008550:	e002      	b.n	8008558 <_printf_i+0x1c4>
 8008552:	0668      	lsls	r0, r5, #25
 8008554:	d5fb      	bpl.n	800854e <_printf_i+0x1ba>
 8008556:	8019      	strh	r1, [r3, #0]
 8008558:	2300      	movs	r3, #0
 800855a:	4616      	mov	r6, r2
 800855c:	6123      	str	r3, [r4, #16]
 800855e:	e7bc      	b.n	80084da <_printf_i+0x146>
 8008560:	6833      	ldr	r3, [r6, #0]
 8008562:	2100      	movs	r1, #0
 8008564:	1d1a      	adds	r2, r3, #4
 8008566:	6032      	str	r2, [r6, #0]
 8008568:	681e      	ldr	r6, [r3, #0]
 800856a:	6862      	ldr	r2, [r4, #4]
 800856c:	4630      	mov	r0, r6
 800856e:	f000 f9e8 	bl	8008942 <memchr>
 8008572:	b108      	cbz	r0, 8008578 <_printf_i+0x1e4>
 8008574:	1b80      	subs	r0, r0, r6
 8008576:	6060      	str	r0, [r4, #4]
 8008578:	6863      	ldr	r3, [r4, #4]
 800857a:	6123      	str	r3, [r4, #16]
 800857c:	2300      	movs	r3, #0
 800857e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008582:	e7aa      	b.n	80084da <_printf_i+0x146>
 8008584:	4632      	mov	r2, r6
 8008586:	4649      	mov	r1, r9
 8008588:	4640      	mov	r0, r8
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	47d0      	blx	sl
 800858e:	3001      	adds	r0, #1
 8008590:	d0ad      	beq.n	80084ee <_printf_i+0x15a>
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	079b      	lsls	r3, r3, #30
 8008596:	d413      	bmi.n	80085c0 <_printf_i+0x22c>
 8008598:	68e0      	ldr	r0, [r4, #12]
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	4298      	cmp	r0, r3
 800859e:	bfb8      	it	lt
 80085a0:	4618      	movlt	r0, r3
 80085a2:	e7a6      	b.n	80084f2 <_printf_i+0x15e>
 80085a4:	2301      	movs	r3, #1
 80085a6:	4632      	mov	r2, r6
 80085a8:	4649      	mov	r1, r9
 80085aa:	4640      	mov	r0, r8
 80085ac:	47d0      	blx	sl
 80085ae:	3001      	adds	r0, #1
 80085b0:	d09d      	beq.n	80084ee <_printf_i+0x15a>
 80085b2:	3501      	adds	r5, #1
 80085b4:	68e3      	ldr	r3, [r4, #12]
 80085b6:	9903      	ldr	r1, [sp, #12]
 80085b8:	1a5b      	subs	r3, r3, r1
 80085ba:	42ab      	cmp	r3, r5
 80085bc:	dcf2      	bgt.n	80085a4 <_printf_i+0x210>
 80085be:	e7eb      	b.n	8008598 <_printf_i+0x204>
 80085c0:	2500      	movs	r5, #0
 80085c2:	f104 0619 	add.w	r6, r4, #25
 80085c6:	e7f5      	b.n	80085b4 <_printf_i+0x220>
 80085c8:	0800b7a4 	.word	0x0800b7a4
 80085cc:	0800b7b5 	.word	0x0800b7b5

080085d0 <std>:
 80085d0:	2300      	movs	r3, #0
 80085d2:	b510      	push	{r4, lr}
 80085d4:	4604      	mov	r4, r0
 80085d6:	e9c0 3300 	strd	r3, r3, [r0]
 80085da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085de:	6083      	str	r3, [r0, #8]
 80085e0:	8181      	strh	r1, [r0, #12]
 80085e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80085e4:	81c2      	strh	r2, [r0, #14]
 80085e6:	6183      	str	r3, [r0, #24]
 80085e8:	4619      	mov	r1, r3
 80085ea:	2208      	movs	r2, #8
 80085ec:	305c      	adds	r0, #92	@ 0x5c
 80085ee:	f000 f916 	bl	800881e <memset>
 80085f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008628 <std+0x58>)
 80085f4:	6224      	str	r4, [r4, #32]
 80085f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80085f8:	4b0c      	ldr	r3, [pc, #48]	@ (800862c <std+0x5c>)
 80085fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008630 <std+0x60>)
 80085fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008600:	4b0c      	ldr	r3, [pc, #48]	@ (8008634 <std+0x64>)
 8008602:	6323      	str	r3, [r4, #48]	@ 0x30
 8008604:	4b0c      	ldr	r3, [pc, #48]	@ (8008638 <std+0x68>)
 8008606:	429c      	cmp	r4, r3
 8008608:	d006      	beq.n	8008618 <std+0x48>
 800860a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800860e:	4294      	cmp	r4, r2
 8008610:	d002      	beq.n	8008618 <std+0x48>
 8008612:	33d0      	adds	r3, #208	@ 0xd0
 8008614:	429c      	cmp	r4, r3
 8008616:	d105      	bne.n	8008624 <std+0x54>
 8008618:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800861c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008620:	f000 b98c 	b.w	800893c <__retarget_lock_init_recursive>
 8008624:	bd10      	pop	{r4, pc}
 8008626:	bf00      	nop
 8008628:	08008799 	.word	0x08008799
 800862c:	080087bb 	.word	0x080087bb
 8008630:	080087f3 	.word	0x080087f3
 8008634:	08008817 	.word	0x08008817
 8008638:	20000550 	.word	0x20000550

0800863c <stdio_exit_handler>:
 800863c:	4a02      	ldr	r2, [pc, #8]	@ (8008648 <stdio_exit_handler+0xc>)
 800863e:	4903      	ldr	r1, [pc, #12]	@ (800864c <stdio_exit_handler+0x10>)
 8008640:	4803      	ldr	r0, [pc, #12]	@ (8008650 <stdio_exit_handler+0x14>)
 8008642:	f000 b869 	b.w	8008718 <_fwalk_sglue>
 8008646:	bf00      	nop
 8008648:	2000000c 	.word	0x2000000c
 800864c:	0800a2d9 	.word	0x0800a2d9
 8008650:	2000001c 	.word	0x2000001c

08008654 <cleanup_stdio>:
 8008654:	6841      	ldr	r1, [r0, #4]
 8008656:	4b0c      	ldr	r3, [pc, #48]	@ (8008688 <cleanup_stdio+0x34>)
 8008658:	b510      	push	{r4, lr}
 800865a:	4299      	cmp	r1, r3
 800865c:	4604      	mov	r4, r0
 800865e:	d001      	beq.n	8008664 <cleanup_stdio+0x10>
 8008660:	f001 fe3a 	bl	800a2d8 <_fflush_r>
 8008664:	68a1      	ldr	r1, [r4, #8]
 8008666:	4b09      	ldr	r3, [pc, #36]	@ (800868c <cleanup_stdio+0x38>)
 8008668:	4299      	cmp	r1, r3
 800866a:	d002      	beq.n	8008672 <cleanup_stdio+0x1e>
 800866c:	4620      	mov	r0, r4
 800866e:	f001 fe33 	bl	800a2d8 <_fflush_r>
 8008672:	68e1      	ldr	r1, [r4, #12]
 8008674:	4b06      	ldr	r3, [pc, #24]	@ (8008690 <cleanup_stdio+0x3c>)
 8008676:	4299      	cmp	r1, r3
 8008678:	d004      	beq.n	8008684 <cleanup_stdio+0x30>
 800867a:	4620      	mov	r0, r4
 800867c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008680:	f001 be2a 	b.w	800a2d8 <_fflush_r>
 8008684:	bd10      	pop	{r4, pc}
 8008686:	bf00      	nop
 8008688:	20000550 	.word	0x20000550
 800868c:	200005b8 	.word	0x200005b8
 8008690:	20000620 	.word	0x20000620

08008694 <global_stdio_init.part.0>:
 8008694:	b510      	push	{r4, lr}
 8008696:	4b0b      	ldr	r3, [pc, #44]	@ (80086c4 <global_stdio_init.part.0+0x30>)
 8008698:	4c0b      	ldr	r4, [pc, #44]	@ (80086c8 <global_stdio_init.part.0+0x34>)
 800869a:	4a0c      	ldr	r2, [pc, #48]	@ (80086cc <global_stdio_init.part.0+0x38>)
 800869c:	4620      	mov	r0, r4
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	2104      	movs	r1, #4
 80086a2:	2200      	movs	r2, #0
 80086a4:	f7ff ff94 	bl	80085d0 <std>
 80086a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80086ac:	2201      	movs	r2, #1
 80086ae:	2109      	movs	r1, #9
 80086b0:	f7ff ff8e 	bl	80085d0 <std>
 80086b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80086b8:	2202      	movs	r2, #2
 80086ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086be:	2112      	movs	r1, #18
 80086c0:	f7ff bf86 	b.w	80085d0 <std>
 80086c4:	20000688 	.word	0x20000688
 80086c8:	20000550 	.word	0x20000550
 80086cc:	0800863d 	.word	0x0800863d

080086d0 <__sfp_lock_acquire>:
 80086d0:	4801      	ldr	r0, [pc, #4]	@ (80086d8 <__sfp_lock_acquire+0x8>)
 80086d2:	f000 b934 	b.w	800893e <__retarget_lock_acquire_recursive>
 80086d6:	bf00      	nop
 80086d8:	20000691 	.word	0x20000691

080086dc <__sfp_lock_release>:
 80086dc:	4801      	ldr	r0, [pc, #4]	@ (80086e4 <__sfp_lock_release+0x8>)
 80086de:	f000 b92f 	b.w	8008940 <__retarget_lock_release_recursive>
 80086e2:	bf00      	nop
 80086e4:	20000691 	.word	0x20000691

080086e8 <__sinit>:
 80086e8:	b510      	push	{r4, lr}
 80086ea:	4604      	mov	r4, r0
 80086ec:	f7ff fff0 	bl	80086d0 <__sfp_lock_acquire>
 80086f0:	6a23      	ldr	r3, [r4, #32]
 80086f2:	b11b      	cbz	r3, 80086fc <__sinit+0x14>
 80086f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f8:	f7ff bff0 	b.w	80086dc <__sfp_lock_release>
 80086fc:	4b04      	ldr	r3, [pc, #16]	@ (8008710 <__sinit+0x28>)
 80086fe:	6223      	str	r3, [r4, #32]
 8008700:	4b04      	ldr	r3, [pc, #16]	@ (8008714 <__sinit+0x2c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1f5      	bne.n	80086f4 <__sinit+0xc>
 8008708:	f7ff ffc4 	bl	8008694 <global_stdio_init.part.0>
 800870c:	e7f2      	b.n	80086f4 <__sinit+0xc>
 800870e:	bf00      	nop
 8008710:	08008655 	.word	0x08008655
 8008714:	20000688 	.word	0x20000688

08008718 <_fwalk_sglue>:
 8008718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800871c:	4607      	mov	r7, r0
 800871e:	4688      	mov	r8, r1
 8008720:	4614      	mov	r4, r2
 8008722:	2600      	movs	r6, #0
 8008724:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008728:	f1b9 0901 	subs.w	r9, r9, #1
 800872c:	d505      	bpl.n	800873a <_fwalk_sglue+0x22>
 800872e:	6824      	ldr	r4, [r4, #0]
 8008730:	2c00      	cmp	r4, #0
 8008732:	d1f7      	bne.n	8008724 <_fwalk_sglue+0xc>
 8008734:	4630      	mov	r0, r6
 8008736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800873a:	89ab      	ldrh	r3, [r5, #12]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d907      	bls.n	8008750 <_fwalk_sglue+0x38>
 8008740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008744:	3301      	adds	r3, #1
 8008746:	d003      	beq.n	8008750 <_fwalk_sglue+0x38>
 8008748:	4629      	mov	r1, r5
 800874a:	4638      	mov	r0, r7
 800874c:	47c0      	blx	r8
 800874e:	4306      	orrs	r6, r0
 8008750:	3568      	adds	r5, #104	@ 0x68
 8008752:	e7e9      	b.n	8008728 <_fwalk_sglue+0x10>

08008754 <siprintf>:
 8008754:	b40e      	push	{r1, r2, r3}
 8008756:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800875a:	b510      	push	{r4, lr}
 800875c:	2400      	movs	r4, #0
 800875e:	b09d      	sub	sp, #116	@ 0x74
 8008760:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008762:	9002      	str	r0, [sp, #8]
 8008764:	9006      	str	r0, [sp, #24]
 8008766:	9107      	str	r1, [sp, #28]
 8008768:	9104      	str	r1, [sp, #16]
 800876a:	4809      	ldr	r0, [pc, #36]	@ (8008790 <siprintf+0x3c>)
 800876c:	4909      	ldr	r1, [pc, #36]	@ (8008794 <siprintf+0x40>)
 800876e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008772:	9105      	str	r1, [sp, #20]
 8008774:	6800      	ldr	r0, [r0, #0]
 8008776:	a902      	add	r1, sp, #8
 8008778:	9301      	str	r3, [sp, #4]
 800877a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800877c:	f001 fc30 	bl	8009fe0 <_svfiprintf_r>
 8008780:	9b02      	ldr	r3, [sp, #8]
 8008782:	701c      	strb	r4, [r3, #0]
 8008784:	b01d      	add	sp, #116	@ 0x74
 8008786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800878a:	b003      	add	sp, #12
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	20000018 	.word	0x20000018
 8008794:	ffff0208 	.word	0xffff0208

08008798 <__sread>:
 8008798:	b510      	push	{r4, lr}
 800879a:	460c      	mov	r4, r1
 800879c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a0:	f000 f87e 	bl	80088a0 <_read_r>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	bfab      	itete	ge
 80087a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80087aa:	89a3      	ldrhlt	r3, [r4, #12]
 80087ac:	181b      	addge	r3, r3, r0
 80087ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80087b2:	bfac      	ite	ge
 80087b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80087b6:	81a3      	strhlt	r3, [r4, #12]
 80087b8:	bd10      	pop	{r4, pc}

080087ba <__swrite>:
 80087ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087be:	461f      	mov	r7, r3
 80087c0:	898b      	ldrh	r3, [r1, #12]
 80087c2:	4605      	mov	r5, r0
 80087c4:	05db      	lsls	r3, r3, #23
 80087c6:	460c      	mov	r4, r1
 80087c8:	4616      	mov	r6, r2
 80087ca:	d505      	bpl.n	80087d8 <__swrite+0x1e>
 80087cc:	2302      	movs	r3, #2
 80087ce:	2200      	movs	r2, #0
 80087d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d4:	f000 f852 	bl	800887c <_lseek_r>
 80087d8:	89a3      	ldrh	r3, [r4, #12]
 80087da:	4632      	mov	r2, r6
 80087dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087e0:	81a3      	strh	r3, [r4, #12]
 80087e2:	4628      	mov	r0, r5
 80087e4:	463b      	mov	r3, r7
 80087e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ee:	f000 b869 	b.w	80088c4 <_write_r>

080087f2 <__sseek>:
 80087f2:	b510      	push	{r4, lr}
 80087f4:	460c      	mov	r4, r1
 80087f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087fa:	f000 f83f 	bl	800887c <_lseek_r>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	bf15      	itete	ne
 8008804:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800880a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800880e:	81a3      	strheq	r3, [r4, #12]
 8008810:	bf18      	it	ne
 8008812:	81a3      	strhne	r3, [r4, #12]
 8008814:	bd10      	pop	{r4, pc}

08008816 <__sclose>:
 8008816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800881a:	f000 b81f 	b.w	800885c <_close_r>

0800881e <memset>:
 800881e:	4603      	mov	r3, r0
 8008820:	4402      	add	r2, r0
 8008822:	4293      	cmp	r3, r2
 8008824:	d100      	bne.n	8008828 <memset+0xa>
 8008826:	4770      	bx	lr
 8008828:	f803 1b01 	strb.w	r1, [r3], #1
 800882c:	e7f9      	b.n	8008822 <memset+0x4>

0800882e <strncmp>:
 800882e:	b510      	push	{r4, lr}
 8008830:	b16a      	cbz	r2, 800884e <strncmp+0x20>
 8008832:	3901      	subs	r1, #1
 8008834:	1884      	adds	r4, r0, r2
 8008836:	f810 2b01 	ldrb.w	r2, [r0], #1
 800883a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800883e:	429a      	cmp	r2, r3
 8008840:	d103      	bne.n	800884a <strncmp+0x1c>
 8008842:	42a0      	cmp	r0, r4
 8008844:	d001      	beq.n	800884a <strncmp+0x1c>
 8008846:	2a00      	cmp	r2, #0
 8008848:	d1f5      	bne.n	8008836 <strncmp+0x8>
 800884a:	1ad0      	subs	r0, r2, r3
 800884c:	bd10      	pop	{r4, pc}
 800884e:	4610      	mov	r0, r2
 8008850:	e7fc      	b.n	800884c <strncmp+0x1e>
	...

08008854 <_localeconv_r>:
 8008854:	4800      	ldr	r0, [pc, #0]	@ (8008858 <_localeconv_r+0x4>)
 8008856:	4770      	bx	lr
 8008858:	20000158 	.word	0x20000158

0800885c <_close_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	2300      	movs	r3, #0
 8008860:	4d05      	ldr	r5, [pc, #20]	@ (8008878 <_close_r+0x1c>)
 8008862:	4604      	mov	r4, r0
 8008864:	4608      	mov	r0, r1
 8008866:	602b      	str	r3, [r5, #0]
 8008868:	f7fb fc69 	bl	800413e <_close>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d102      	bne.n	8008876 <_close_r+0x1a>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	b103      	cbz	r3, 8008876 <_close_r+0x1a>
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	2000068c 	.word	0x2000068c

0800887c <_lseek_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4604      	mov	r4, r0
 8008880:	4608      	mov	r0, r1
 8008882:	4611      	mov	r1, r2
 8008884:	2200      	movs	r2, #0
 8008886:	4d05      	ldr	r5, [pc, #20]	@ (800889c <_lseek_r+0x20>)
 8008888:	602a      	str	r2, [r5, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	f7fb fc7b 	bl	8004186 <_lseek>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	d102      	bne.n	800889a <_lseek_r+0x1e>
 8008894:	682b      	ldr	r3, [r5, #0]
 8008896:	b103      	cbz	r3, 800889a <_lseek_r+0x1e>
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	bd38      	pop	{r3, r4, r5, pc}
 800889c:	2000068c 	.word	0x2000068c

080088a0 <_read_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4604      	mov	r4, r0
 80088a4:	4608      	mov	r0, r1
 80088a6:	4611      	mov	r1, r2
 80088a8:	2200      	movs	r2, #0
 80088aa:	4d05      	ldr	r5, [pc, #20]	@ (80088c0 <_read_r+0x20>)
 80088ac:	602a      	str	r2, [r5, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	f7fb fc0c 	bl	80040cc <_read>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d102      	bne.n	80088be <_read_r+0x1e>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	b103      	cbz	r3, 80088be <_read_r+0x1e>
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	2000068c 	.word	0x2000068c

080088c4 <_write_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	4604      	mov	r4, r0
 80088c8:	4608      	mov	r0, r1
 80088ca:	4611      	mov	r1, r2
 80088cc:	2200      	movs	r2, #0
 80088ce:	4d05      	ldr	r5, [pc, #20]	@ (80088e4 <_write_r+0x20>)
 80088d0:	602a      	str	r2, [r5, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	f7fb fc17 	bl	8004106 <_write>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	d102      	bne.n	80088e2 <_write_r+0x1e>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	b103      	cbz	r3, 80088e2 <_write_r+0x1e>
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	2000068c 	.word	0x2000068c

080088e8 <__errno>:
 80088e8:	4b01      	ldr	r3, [pc, #4]	@ (80088f0 <__errno+0x8>)
 80088ea:	6818      	ldr	r0, [r3, #0]
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	20000018 	.word	0x20000018

080088f4 <__libc_init_array>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	2600      	movs	r6, #0
 80088f8:	4d0c      	ldr	r5, [pc, #48]	@ (800892c <__libc_init_array+0x38>)
 80088fa:	4c0d      	ldr	r4, [pc, #52]	@ (8008930 <__libc_init_array+0x3c>)
 80088fc:	1b64      	subs	r4, r4, r5
 80088fe:	10a4      	asrs	r4, r4, #2
 8008900:	42a6      	cmp	r6, r4
 8008902:	d109      	bne.n	8008918 <__libc_init_array+0x24>
 8008904:	f002 feba 	bl	800b67c <_init>
 8008908:	2600      	movs	r6, #0
 800890a:	4d0a      	ldr	r5, [pc, #40]	@ (8008934 <__libc_init_array+0x40>)
 800890c:	4c0a      	ldr	r4, [pc, #40]	@ (8008938 <__libc_init_array+0x44>)
 800890e:	1b64      	subs	r4, r4, r5
 8008910:	10a4      	asrs	r4, r4, #2
 8008912:	42a6      	cmp	r6, r4
 8008914:	d105      	bne.n	8008922 <__libc_init_array+0x2e>
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	f855 3b04 	ldr.w	r3, [r5], #4
 800891c:	4798      	blx	r3
 800891e:	3601      	adds	r6, #1
 8008920:	e7ee      	b.n	8008900 <__libc_init_array+0xc>
 8008922:	f855 3b04 	ldr.w	r3, [r5], #4
 8008926:	4798      	blx	r3
 8008928:	3601      	adds	r6, #1
 800892a:	e7f2      	b.n	8008912 <__libc_init_array+0x1e>
 800892c:	0800bb64 	.word	0x0800bb64
 8008930:	0800bb64 	.word	0x0800bb64
 8008934:	0800bb64 	.word	0x0800bb64
 8008938:	0800bb68 	.word	0x0800bb68

0800893c <__retarget_lock_init_recursive>:
 800893c:	4770      	bx	lr

0800893e <__retarget_lock_acquire_recursive>:
 800893e:	4770      	bx	lr

08008940 <__retarget_lock_release_recursive>:
 8008940:	4770      	bx	lr

08008942 <memchr>:
 8008942:	4603      	mov	r3, r0
 8008944:	b510      	push	{r4, lr}
 8008946:	b2c9      	uxtb	r1, r1
 8008948:	4402      	add	r2, r0
 800894a:	4293      	cmp	r3, r2
 800894c:	4618      	mov	r0, r3
 800894e:	d101      	bne.n	8008954 <memchr+0x12>
 8008950:	2000      	movs	r0, #0
 8008952:	e003      	b.n	800895c <memchr+0x1a>
 8008954:	7804      	ldrb	r4, [r0, #0]
 8008956:	3301      	adds	r3, #1
 8008958:	428c      	cmp	r4, r1
 800895a:	d1f6      	bne.n	800894a <memchr+0x8>
 800895c:	bd10      	pop	{r4, pc}

0800895e <memcpy>:
 800895e:	440a      	add	r2, r1
 8008960:	4291      	cmp	r1, r2
 8008962:	f100 33ff 	add.w	r3, r0, #4294967295
 8008966:	d100      	bne.n	800896a <memcpy+0xc>
 8008968:	4770      	bx	lr
 800896a:	b510      	push	{r4, lr}
 800896c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008970:	4291      	cmp	r1, r2
 8008972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008976:	d1f9      	bne.n	800896c <memcpy+0xe>
 8008978:	bd10      	pop	{r4, pc}

0800897a <quorem>:
 800897a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897e:	6903      	ldr	r3, [r0, #16]
 8008980:	690c      	ldr	r4, [r1, #16]
 8008982:	4607      	mov	r7, r0
 8008984:	42a3      	cmp	r3, r4
 8008986:	db7e      	blt.n	8008a86 <quorem+0x10c>
 8008988:	3c01      	subs	r4, #1
 800898a:	00a3      	lsls	r3, r4, #2
 800898c:	f100 0514 	add.w	r5, r0, #20
 8008990:	f101 0814 	add.w	r8, r1, #20
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089a4:	3301      	adds	r3, #1
 80089a6:	429a      	cmp	r2, r3
 80089a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80089ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089b0:	d32e      	bcc.n	8008a10 <quorem+0x96>
 80089b2:	f04f 0a00 	mov.w	sl, #0
 80089b6:	46c4      	mov	ip, r8
 80089b8:	46ae      	mov	lr, r5
 80089ba:	46d3      	mov	fp, sl
 80089bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089c0:	b298      	uxth	r0, r3
 80089c2:	fb06 a000 	mla	r0, r6, r0, sl
 80089c6:	0c1b      	lsrs	r3, r3, #16
 80089c8:	0c02      	lsrs	r2, r0, #16
 80089ca:	fb06 2303 	mla	r3, r6, r3, r2
 80089ce:	f8de 2000 	ldr.w	r2, [lr]
 80089d2:	b280      	uxth	r0, r0
 80089d4:	b292      	uxth	r2, r2
 80089d6:	1a12      	subs	r2, r2, r0
 80089d8:	445a      	add	r2, fp
 80089da:	f8de 0000 	ldr.w	r0, [lr]
 80089de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80089e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80089ec:	b292      	uxth	r2, r2
 80089ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80089f2:	45e1      	cmp	r9, ip
 80089f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80089f8:	f84e 2b04 	str.w	r2, [lr], #4
 80089fc:	d2de      	bcs.n	80089bc <quorem+0x42>
 80089fe:	9b00      	ldr	r3, [sp, #0]
 8008a00:	58eb      	ldr	r3, [r5, r3]
 8008a02:	b92b      	cbnz	r3, 8008a10 <quorem+0x96>
 8008a04:	9b01      	ldr	r3, [sp, #4]
 8008a06:	3b04      	subs	r3, #4
 8008a08:	429d      	cmp	r5, r3
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	d32f      	bcc.n	8008a6e <quorem+0xf4>
 8008a0e:	613c      	str	r4, [r7, #16]
 8008a10:	4638      	mov	r0, r7
 8008a12:	f001 f981 	bl	8009d18 <__mcmp>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	db25      	blt.n	8008a66 <quorem+0xec>
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a22:	f8d1 c000 	ldr.w	ip, [r1]
 8008a26:	fa1f fe82 	uxth.w	lr, r2
 8008a2a:	fa1f f38c 	uxth.w	r3, ip
 8008a2e:	eba3 030e 	sub.w	r3, r3, lr
 8008a32:	4403      	add	r3, r0
 8008a34:	0c12      	lsrs	r2, r2, #16
 8008a36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a44:	45c1      	cmp	r9, r8
 8008a46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a4a:	f841 3b04 	str.w	r3, [r1], #4
 8008a4e:	d2e6      	bcs.n	8008a1e <quorem+0xa4>
 8008a50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a58:	b922      	cbnz	r2, 8008a64 <quorem+0xea>
 8008a5a:	3b04      	subs	r3, #4
 8008a5c:	429d      	cmp	r5, r3
 8008a5e:	461a      	mov	r2, r3
 8008a60:	d30b      	bcc.n	8008a7a <quorem+0x100>
 8008a62:	613c      	str	r4, [r7, #16]
 8008a64:	3601      	adds	r6, #1
 8008a66:	4630      	mov	r0, r6
 8008a68:	b003      	add	sp, #12
 8008a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6e:	6812      	ldr	r2, [r2, #0]
 8008a70:	3b04      	subs	r3, #4
 8008a72:	2a00      	cmp	r2, #0
 8008a74:	d1cb      	bne.n	8008a0e <quorem+0x94>
 8008a76:	3c01      	subs	r4, #1
 8008a78:	e7c6      	b.n	8008a08 <quorem+0x8e>
 8008a7a:	6812      	ldr	r2, [r2, #0]
 8008a7c:	3b04      	subs	r3, #4
 8008a7e:	2a00      	cmp	r2, #0
 8008a80:	d1ef      	bne.n	8008a62 <quorem+0xe8>
 8008a82:	3c01      	subs	r4, #1
 8008a84:	e7ea      	b.n	8008a5c <quorem+0xe2>
 8008a86:	2000      	movs	r0, #0
 8008a88:	e7ee      	b.n	8008a68 <quorem+0xee>
 8008a8a:	0000      	movs	r0, r0
 8008a8c:	0000      	movs	r0, r0
	...

08008a90 <_dtoa_r>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	4614      	mov	r4, r2
 8008a96:	461d      	mov	r5, r3
 8008a98:	69c7      	ldr	r7, [r0, #28]
 8008a9a:	b097      	sub	sp, #92	@ 0x5c
 8008a9c:	4681      	mov	r9, r0
 8008a9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008aa2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008aa4:	b97f      	cbnz	r7, 8008ac6 <_dtoa_r+0x36>
 8008aa6:	2010      	movs	r0, #16
 8008aa8:	f000 fe0e 	bl	80096c8 <malloc>
 8008aac:	4602      	mov	r2, r0
 8008aae:	f8c9 001c 	str.w	r0, [r9, #28]
 8008ab2:	b920      	cbnz	r0, 8008abe <_dtoa_r+0x2e>
 8008ab4:	21ef      	movs	r1, #239	@ 0xef
 8008ab6:	4bac      	ldr	r3, [pc, #688]	@ (8008d68 <_dtoa_r+0x2d8>)
 8008ab8:	48ac      	ldr	r0, [pc, #688]	@ (8008d6c <_dtoa_r+0x2dc>)
 8008aba:	f001 fc5f 	bl	800a37c <__assert_func>
 8008abe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ac2:	6007      	str	r7, [r0, #0]
 8008ac4:	60c7      	str	r7, [r0, #12]
 8008ac6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008aca:	6819      	ldr	r1, [r3, #0]
 8008acc:	b159      	cbz	r1, 8008ae6 <_dtoa_r+0x56>
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	4093      	lsls	r3, r2
 8008ad4:	604a      	str	r2, [r1, #4]
 8008ad6:	608b      	str	r3, [r1, #8]
 8008ad8:	4648      	mov	r0, r9
 8008ada:	f000 feeb 	bl	80098b4 <_Bfree>
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	1e2b      	subs	r3, r5, #0
 8008ae8:	bfaf      	iteee	ge
 8008aea:	2300      	movge	r3, #0
 8008aec:	2201      	movlt	r2, #1
 8008aee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008af2:	9307      	strlt	r3, [sp, #28]
 8008af4:	bfa8      	it	ge
 8008af6:	6033      	strge	r3, [r6, #0]
 8008af8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8008afc:	4b9c      	ldr	r3, [pc, #624]	@ (8008d70 <_dtoa_r+0x2e0>)
 8008afe:	bfb8      	it	lt
 8008b00:	6032      	strlt	r2, [r6, #0]
 8008b02:	ea33 0308 	bics.w	r3, r3, r8
 8008b06:	d112      	bne.n	8008b2e <_dtoa_r+0x9e>
 8008b08:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008b0c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008b14:	4323      	orrs	r3, r4
 8008b16:	f000 855e 	beq.w	80095d6 <_dtoa_r+0xb46>
 8008b1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008b1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008d74 <_dtoa_r+0x2e4>
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 8560 	beq.w	80095e6 <_dtoa_r+0xb56>
 8008b26:	f10a 0303 	add.w	r3, sl, #3
 8008b2a:	f000 bd5a 	b.w	80095e2 <_dtoa_r+0xb52>
 8008b2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b32:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008b36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f7f7 ff33 	bl	80009a8 <__aeabi_dcmpeq>
 8008b42:	4607      	mov	r7, r0
 8008b44:	b158      	cbz	r0, 8008b5e <_dtoa_r+0xce>
 8008b46:	2301      	movs	r3, #1
 8008b48:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008b4e:	b113      	cbz	r3, 8008b56 <_dtoa_r+0xc6>
 8008b50:	4b89      	ldr	r3, [pc, #548]	@ (8008d78 <_dtoa_r+0x2e8>)
 8008b52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008d7c <_dtoa_r+0x2ec>
 8008b5a:	f000 bd44 	b.w	80095e6 <_dtoa_r+0xb56>
 8008b5e:	ab14      	add	r3, sp, #80	@ 0x50
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	ab15      	add	r3, sp, #84	@ 0x54
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	4648      	mov	r0, r9
 8008b68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008b6c:	f001 f984 	bl	8009e78 <__d2b>
 8008b70:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008b74:	9003      	str	r0, [sp, #12]
 8008b76:	2e00      	cmp	r6, #0
 8008b78:	d078      	beq.n	8008c6c <_dtoa_r+0x1dc>
 8008b7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b80:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b88:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b8c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008b90:	9712      	str	r7, [sp, #72]	@ 0x48
 8008b92:	4619      	mov	r1, r3
 8008b94:	2200      	movs	r2, #0
 8008b96:	4b7a      	ldr	r3, [pc, #488]	@ (8008d80 <_dtoa_r+0x2f0>)
 8008b98:	f7f7 fae6 	bl	8000168 <__aeabi_dsub>
 8008b9c:	a36c      	add	r3, pc, #432	@ (adr r3, 8008d50 <_dtoa_r+0x2c0>)
 8008b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba2:	f7f7 fc99 	bl	80004d8 <__aeabi_dmul>
 8008ba6:	a36c      	add	r3, pc, #432	@ (adr r3, 8008d58 <_dtoa_r+0x2c8>)
 8008ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bac:	f7f7 fade 	bl	800016c <__adddf3>
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	f7f7 fc25 	bl	8000404 <__aeabi_i2d>
 8008bba:	a369      	add	r3, pc, #420	@ (adr r3, 8008d60 <_dtoa_r+0x2d0>)
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f7f7 fc8a 	bl	80004d8 <__aeabi_dmul>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4620      	mov	r0, r4
 8008bca:	4629      	mov	r1, r5
 8008bcc:	f7f7 face 	bl	800016c <__adddf3>
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	f7f7 ff30 	bl	8000a38 <__aeabi_d2iz>
 8008bd8:	2200      	movs	r2, #0
 8008bda:	4607      	mov	r7, r0
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4620      	mov	r0, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 feeb 	bl	80009bc <__aeabi_dcmplt>
 8008be6:	b140      	cbz	r0, 8008bfa <_dtoa_r+0x16a>
 8008be8:	4638      	mov	r0, r7
 8008bea:	f7f7 fc0b 	bl	8000404 <__aeabi_i2d>
 8008bee:	4622      	mov	r2, r4
 8008bf0:	462b      	mov	r3, r5
 8008bf2:	f7f7 fed9 	bl	80009a8 <__aeabi_dcmpeq>
 8008bf6:	b900      	cbnz	r0, 8008bfa <_dtoa_r+0x16a>
 8008bf8:	3f01      	subs	r7, #1
 8008bfa:	2f16      	cmp	r7, #22
 8008bfc:	d854      	bhi.n	8008ca8 <_dtoa_r+0x218>
 8008bfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c02:	4b60      	ldr	r3, [pc, #384]	@ (8008d84 <_dtoa_r+0x2f4>)
 8008c04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	f7f7 fed6 	bl	80009bc <__aeabi_dcmplt>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d04b      	beq.n	8008cac <_dtoa_r+0x21c>
 8008c14:	2300      	movs	r3, #0
 8008c16:	3f01      	subs	r7, #1
 8008c18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c1c:	1b9b      	subs	r3, r3, r6
 8008c1e:	1e5a      	subs	r2, r3, #1
 8008c20:	bf49      	itett	mi
 8008c22:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c26:	2300      	movpl	r3, #0
 8008c28:	9304      	strmi	r3, [sp, #16]
 8008c2a:	2300      	movmi	r3, #0
 8008c2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c2e:	bf54      	ite	pl
 8008c30:	9304      	strpl	r3, [sp, #16]
 8008c32:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008c34:	2f00      	cmp	r7, #0
 8008c36:	db3b      	blt.n	8008cb0 <_dtoa_r+0x220>
 8008c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c3a:	970e      	str	r7, [sp, #56]	@ 0x38
 8008c3c:	443b      	add	r3, r7
 8008c3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c40:	2300      	movs	r3, #0
 8008c42:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c46:	2b09      	cmp	r3, #9
 8008c48:	d865      	bhi.n	8008d16 <_dtoa_r+0x286>
 8008c4a:	2b05      	cmp	r3, #5
 8008c4c:	bfc4      	itt	gt
 8008c4e:	3b04      	subgt	r3, #4
 8008c50:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008c52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c54:	bfc8      	it	gt
 8008c56:	2400      	movgt	r4, #0
 8008c58:	f1a3 0302 	sub.w	r3, r3, #2
 8008c5c:	bfd8      	it	le
 8008c5e:	2401      	movle	r4, #1
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d864      	bhi.n	8008d2e <_dtoa_r+0x29e>
 8008c64:	e8df f003 	tbb	[pc, r3]
 8008c68:	2c385553 	.word	0x2c385553
 8008c6c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008c70:	441e      	add	r6, r3
 8008c72:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008c76:	2b20      	cmp	r3, #32
 8008c78:	bfc1      	itttt	gt
 8008c7a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008c7e:	fa08 f803 	lslgt.w	r8, r8, r3
 8008c82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008c86:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008c8a:	bfd6      	itet	le
 8008c8c:	f1c3 0320 	rsble	r3, r3, #32
 8008c90:	ea48 0003 	orrgt.w	r0, r8, r3
 8008c94:	fa04 f003 	lslle.w	r0, r4, r3
 8008c98:	f7f7 fba4 	bl	80003e4 <__aeabi_ui2d>
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008ca2:	3e01      	subs	r6, #1
 8008ca4:	9212      	str	r2, [sp, #72]	@ 0x48
 8008ca6:	e774      	b.n	8008b92 <_dtoa_r+0x102>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e7b5      	b.n	8008c18 <_dtoa_r+0x188>
 8008cac:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008cae:	e7b4      	b.n	8008c1a <_dtoa_r+0x18a>
 8008cb0:	9b04      	ldr	r3, [sp, #16]
 8008cb2:	1bdb      	subs	r3, r3, r7
 8008cb4:	9304      	str	r3, [sp, #16]
 8008cb6:	427b      	negs	r3, r7
 8008cb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cba:	2300      	movs	r3, #0
 8008cbc:	930e      	str	r3, [sp, #56]	@ 0x38
 8008cbe:	e7c1      	b.n	8008c44 <_dtoa_r+0x1b4>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008cc6:	eb07 0b03 	add.w	fp, r7, r3
 8008cca:	f10b 0301 	add.w	r3, fp, #1
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	9308      	str	r3, [sp, #32]
 8008cd2:	bfb8      	it	lt
 8008cd4:	2301      	movlt	r3, #1
 8008cd6:	e006      	b.n	8008ce6 <_dtoa_r+0x256>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cdc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	dd28      	ble.n	8008d34 <_dtoa_r+0x2a4>
 8008ce2:	469b      	mov	fp, r3
 8008ce4:	9308      	str	r3, [sp, #32]
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	2204      	movs	r2, #4
 8008cea:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008cee:	f102 0514 	add.w	r5, r2, #20
 8008cf2:	429d      	cmp	r5, r3
 8008cf4:	d926      	bls.n	8008d44 <_dtoa_r+0x2b4>
 8008cf6:	6041      	str	r1, [r0, #4]
 8008cf8:	4648      	mov	r0, r9
 8008cfa:	f000 fd9b 	bl	8009834 <_Balloc>
 8008cfe:	4682      	mov	sl, r0
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d143      	bne.n	8008d8c <_dtoa_r+0x2fc>
 8008d04:	4602      	mov	r2, r0
 8008d06:	f240 11af 	movw	r1, #431	@ 0x1af
 8008d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8008d88 <_dtoa_r+0x2f8>)
 8008d0c:	e6d4      	b.n	8008ab8 <_dtoa_r+0x28>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e7e3      	b.n	8008cda <_dtoa_r+0x24a>
 8008d12:	2300      	movs	r3, #0
 8008d14:	e7d5      	b.n	8008cc2 <_dtoa_r+0x232>
 8008d16:	2401      	movs	r4, #1
 8008d18:	2300      	movs	r3, #0
 8008d1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008d1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8008d1e:	f04f 3bff 	mov.w	fp, #4294967295
 8008d22:	2200      	movs	r2, #0
 8008d24:	2312      	movs	r3, #18
 8008d26:	f8cd b020 	str.w	fp, [sp, #32]
 8008d2a:	9221      	str	r2, [sp, #132]	@ 0x84
 8008d2c:	e7db      	b.n	8008ce6 <_dtoa_r+0x256>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d32:	e7f4      	b.n	8008d1e <_dtoa_r+0x28e>
 8008d34:	f04f 0b01 	mov.w	fp, #1
 8008d38:	465b      	mov	r3, fp
 8008d3a:	f8cd b020 	str.w	fp, [sp, #32]
 8008d3e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8008d42:	e7d0      	b.n	8008ce6 <_dtoa_r+0x256>
 8008d44:	3101      	adds	r1, #1
 8008d46:	0052      	lsls	r2, r2, #1
 8008d48:	e7d1      	b.n	8008cee <_dtoa_r+0x25e>
 8008d4a:	bf00      	nop
 8008d4c:	f3af 8000 	nop.w
 8008d50:	636f4361 	.word	0x636f4361
 8008d54:	3fd287a7 	.word	0x3fd287a7
 8008d58:	8b60c8b3 	.word	0x8b60c8b3
 8008d5c:	3fc68a28 	.word	0x3fc68a28
 8008d60:	509f79fb 	.word	0x509f79fb
 8008d64:	3fd34413 	.word	0x3fd34413
 8008d68:	0800b7d3 	.word	0x0800b7d3
 8008d6c:	0800b7ea 	.word	0x0800b7ea
 8008d70:	7ff00000 	.word	0x7ff00000
 8008d74:	0800b7cf 	.word	0x0800b7cf
 8008d78:	0800b7a3 	.word	0x0800b7a3
 8008d7c:	0800b7a2 	.word	0x0800b7a2
 8008d80:	3ff80000 	.word	0x3ff80000
 8008d84:	0800b938 	.word	0x0800b938
 8008d88:	0800b842 	.word	0x0800b842
 8008d8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d90:	6018      	str	r0, [r3, #0]
 8008d92:	9b08      	ldr	r3, [sp, #32]
 8008d94:	2b0e      	cmp	r3, #14
 8008d96:	f200 80a1 	bhi.w	8008edc <_dtoa_r+0x44c>
 8008d9a:	2c00      	cmp	r4, #0
 8008d9c:	f000 809e 	beq.w	8008edc <_dtoa_r+0x44c>
 8008da0:	2f00      	cmp	r7, #0
 8008da2:	dd33      	ble.n	8008e0c <_dtoa_r+0x37c>
 8008da4:	4b9c      	ldr	r3, [pc, #624]	@ (8009018 <_dtoa_r+0x588>)
 8008da6:	f007 020f 	and.w	r2, r7, #15
 8008daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dae:	05f8      	lsls	r0, r7, #23
 8008db0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008db4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008db8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008dbc:	d516      	bpl.n	8008dec <_dtoa_r+0x35c>
 8008dbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008dc2:	4b96      	ldr	r3, [pc, #600]	@ (800901c <_dtoa_r+0x58c>)
 8008dc4:	2603      	movs	r6, #3
 8008dc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008dca:	f7f7 fcaf 	bl	800072c <__aeabi_ddiv>
 8008dce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008dd2:	f004 040f 	and.w	r4, r4, #15
 8008dd6:	4d91      	ldr	r5, [pc, #580]	@ (800901c <_dtoa_r+0x58c>)
 8008dd8:	b954      	cbnz	r4, 8008df0 <_dtoa_r+0x360>
 8008dda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008de2:	f7f7 fca3 	bl	800072c <__aeabi_ddiv>
 8008de6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008dea:	e028      	b.n	8008e3e <_dtoa_r+0x3ae>
 8008dec:	2602      	movs	r6, #2
 8008dee:	e7f2      	b.n	8008dd6 <_dtoa_r+0x346>
 8008df0:	07e1      	lsls	r1, r4, #31
 8008df2:	d508      	bpl.n	8008e06 <_dtoa_r+0x376>
 8008df4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008df8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008dfc:	f7f7 fb6c 	bl	80004d8 <__aeabi_dmul>
 8008e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e04:	3601      	adds	r6, #1
 8008e06:	1064      	asrs	r4, r4, #1
 8008e08:	3508      	adds	r5, #8
 8008e0a:	e7e5      	b.n	8008dd8 <_dtoa_r+0x348>
 8008e0c:	f000 80af 	beq.w	8008f6e <_dtoa_r+0x4de>
 8008e10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e14:	427c      	negs	r4, r7
 8008e16:	4b80      	ldr	r3, [pc, #512]	@ (8009018 <_dtoa_r+0x588>)
 8008e18:	f004 020f 	and.w	r2, r4, #15
 8008e1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	f7f7 fb58 	bl	80004d8 <__aeabi_dmul>
 8008e28:	2602      	movs	r6, #2
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e30:	4d7a      	ldr	r5, [pc, #488]	@ (800901c <_dtoa_r+0x58c>)
 8008e32:	1124      	asrs	r4, r4, #4
 8008e34:	2c00      	cmp	r4, #0
 8008e36:	f040 808f 	bne.w	8008f58 <_dtoa_r+0x4c8>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1d3      	bne.n	8008de6 <_dtoa_r+0x356>
 8008e3e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008e42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8094 	beq.w	8008f72 <_dtoa_r+0x4e2>
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4b73      	ldr	r3, [pc, #460]	@ (8009020 <_dtoa_r+0x590>)
 8008e52:	f7f7 fdb3 	bl	80009bc <__aeabi_dcmplt>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	f000 808b 	beq.w	8008f72 <_dtoa_r+0x4e2>
 8008e5c:	9b08      	ldr	r3, [sp, #32]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 8087 	beq.w	8008f72 <_dtoa_r+0x4e2>
 8008e64:	f1bb 0f00 	cmp.w	fp, #0
 8008e68:	dd34      	ble.n	8008ed4 <_dtoa_r+0x444>
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	4629      	mov	r1, r5
 8008e70:	4b6c      	ldr	r3, [pc, #432]	@ (8009024 <_dtoa_r+0x594>)
 8008e72:	f7f7 fb31 	bl	80004d8 <__aeabi_dmul>
 8008e76:	465c      	mov	r4, fp
 8008e78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e7c:	f107 38ff 	add.w	r8, r7, #4294967295
 8008e80:	3601      	adds	r6, #1
 8008e82:	4630      	mov	r0, r6
 8008e84:	f7f7 fabe 	bl	8000404 <__aeabi_i2d>
 8008e88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e8c:	f7f7 fb24 	bl	80004d8 <__aeabi_dmul>
 8008e90:	2200      	movs	r2, #0
 8008e92:	4b65      	ldr	r3, [pc, #404]	@ (8009028 <_dtoa_r+0x598>)
 8008e94:	f7f7 f96a 	bl	800016c <__adddf3>
 8008e98:	4605      	mov	r5, r0
 8008e9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008e9e:	2c00      	cmp	r4, #0
 8008ea0:	d16a      	bne.n	8008f78 <_dtoa_r+0x4e8>
 8008ea2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	4b60      	ldr	r3, [pc, #384]	@ (800902c <_dtoa_r+0x59c>)
 8008eaa:	f7f7 f95d 	bl	8000168 <__aeabi_dsub>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008eb6:	462a      	mov	r2, r5
 8008eb8:	4633      	mov	r3, r6
 8008eba:	f7f7 fd9d 	bl	80009f8 <__aeabi_dcmpgt>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	f040 8298 	bne.w	80093f4 <_dtoa_r+0x964>
 8008ec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ec8:	462a      	mov	r2, r5
 8008eca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ece:	f7f7 fd75 	bl	80009bc <__aeabi_dcmplt>
 8008ed2:	bb38      	cbnz	r0, 8008f24 <_dtoa_r+0x494>
 8008ed4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008ed8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008edc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f2c0 8157 	blt.w	8009192 <_dtoa_r+0x702>
 8008ee4:	2f0e      	cmp	r7, #14
 8008ee6:	f300 8154 	bgt.w	8009192 <_dtoa_r+0x702>
 8008eea:	4b4b      	ldr	r3, [pc, #300]	@ (8009018 <_dtoa_r+0x588>)
 8008eec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ef0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ef4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008ef8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f280 80e5 	bge.w	80090ca <_dtoa_r+0x63a>
 8008f00:	9b08      	ldr	r3, [sp, #32]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f300 80e1 	bgt.w	80090ca <_dtoa_r+0x63a>
 8008f08:	d10c      	bne.n	8008f24 <_dtoa_r+0x494>
 8008f0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	4b46      	ldr	r3, [pc, #280]	@ (800902c <_dtoa_r+0x59c>)
 8008f12:	f7f7 fae1 	bl	80004d8 <__aeabi_dmul>
 8008f16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f1a:	f7f7 fd63 	bl	80009e4 <__aeabi_dcmpge>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f000 8266 	beq.w	80093f0 <_dtoa_r+0x960>
 8008f24:	2400      	movs	r4, #0
 8008f26:	4625      	mov	r5, r4
 8008f28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008f2a:	4656      	mov	r6, sl
 8008f2c:	ea6f 0803 	mvn.w	r8, r3
 8008f30:	2700      	movs	r7, #0
 8008f32:	4621      	mov	r1, r4
 8008f34:	4648      	mov	r0, r9
 8008f36:	f000 fcbd 	bl	80098b4 <_Bfree>
 8008f3a:	2d00      	cmp	r5, #0
 8008f3c:	f000 80bd 	beq.w	80090ba <_dtoa_r+0x62a>
 8008f40:	b12f      	cbz	r7, 8008f4e <_dtoa_r+0x4be>
 8008f42:	42af      	cmp	r7, r5
 8008f44:	d003      	beq.n	8008f4e <_dtoa_r+0x4be>
 8008f46:	4639      	mov	r1, r7
 8008f48:	4648      	mov	r0, r9
 8008f4a:	f000 fcb3 	bl	80098b4 <_Bfree>
 8008f4e:	4629      	mov	r1, r5
 8008f50:	4648      	mov	r0, r9
 8008f52:	f000 fcaf 	bl	80098b4 <_Bfree>
 8008f56:	e0b0      	b.n	80090ba <_dtoa_r+0x62a>
 8008f58:	07e2      	lsls	r2, r4, #31
 8008f5a:	d505      	bpl.n	8008f68 <_dtoa_r+0x4d8>
 8008f5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f60:	f7f7 faba 	bl	80004d8 <__aeabi_dmul>
 8008f64:	2301      	movs	r3, #1
 8008f66:	3601      	adds	r6, #1
 8008f68:	1064      	asrs	r4, r4, #1
 8008f6a:	3508      	adds	r5, #8
 8008f6c:	e762      	b.n	8008e34 <_dtoa_r+0x3a4>
 8008f6e:	2602      	movs	r6, #2
 8008f70:	e765      	b.n	8008e3e <_dtoa_r+0x3ae>
 8008f72:	46b8      	mov	r8, r7
 8008f74:	9c08      	ldr	r4, [sp, #32]
 8008f76:	e784      	b.n	8008e82 <_dtoa_r+0x3f2>
 8008f78:	4b27      	ldr	r3, [pc, #156]	@ (8009018 <_dtoa_r+0x588>)
 8008f7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f84:	4454      	add	r4, sl
 8008f86:	2900      	cmp	r1, #0
 8008f88:	d054      	beq.n	8009034 <_dtoa_r+0x5a4>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	4928      	ldr	r1, [pc, #160]	@ (8009030 <_dtoa_r+0x5a0>)
 8008f8e:	f7f7 fbcd 	bl	800072c <__aeabi_ddiv>
 8008f92:	4633      	mov	r3, r6
 8008f94:	462a      	mov	r2, r5
 8008f96:	f7f7 f8e7 	bl	8000168 <__aeabi_dsub>
 8008f9a:	4656      	mov	r6, sl
 8008f9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008fa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fa4:	f7f7 fd48 	bl	8000a38 <__aeabi_d2iz>
 8008fa8:	4605      	mov	r5, r0
 8008faa:	f7f7 fa2b 	bl	8000404 <__aeabi_i2d>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fb6:	f7f7 f8d7 	bl	8000168 <__aeabi_dsub>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	3530      	adds	r5, #48	@ 0x30
 8008fc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008fc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fc8:	f806 5b01 	strb.w	r5, [r6], #1
 8008fcc:	f7f7 fcf6 	bl	80009bc <__aeabi_dcmplt>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d172      	bne.n	80090ba <_dtoa_r+0x62a>
 8008fd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fd8:	2000      	movs	r0, #0
 8008fda:	4911      	ldr	r1, [pc, #68]	@ (8009020 <_dtoa_r+0x590>)
 8008fdc:	f7f7 f8c4 	bl	8000168 <__aeabi_dsub>
 8008fe0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fe4:	f7f7 fcea 	bl	80009bc <__aeabi_dcmplt>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	f040 80b4 	bne.w	8009156 <_dtoa_r+0x6c6>
 8008fee:	42a6      	cmp	r6, r4
 8008ff0:	f43f af70 	beq.w	8008ed4 <_dtoa_r+0x444>
 8008ff4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8009024 <_dtoa_r+0x594>)
 8008ffc:	f7f7 fa6c 	bl	80004d8 <__aeabi_dmul>
 8009000:	2200      	movs	r2, #0
 8009002:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800900a:	4b06      	ldr	r3, [pc, #24]	@ (8009024 <_dtoa_r+0x594>)
 800900c:	f7f7 fa64 	bl	80004d8 <__aeabi_dmul>
 8009010:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009014:	e7c4      	b.n	8008fa0 <_dtoa_r+0x510>
 8009016:	bf00      	nop
 8009018:	0800b938 	.word	0x0800b938
 800901c:	0800b910 	.word	0x0800b910
 8009020:	3ff00000 	.word	0x3ff00000
 8009024:	40240000 	.word	0x40240000
 8009028:	401c0000 	.word	0x401c0000
 800902c:	40140000 	.word	0x40140000
 8009030:	3fe00000 	.word	0x3fe00000
 8009034:	4631      	mov	r1, r6
 8009036:	4628      	mov	r0, r5
 8009038:	f7f7 fa4e 	bl	80004d8 <__aeabi_dmul>
 800903c:	4656      	mov	r6, sl
 800903e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009042:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009044:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009048:	f7f7 fcf6 	bl	8000a38 <__aeabi_d2iz>
 800904c:	4605      	mov	r5, r0
 800904e:	f7f7 f9d9 	bl	8000404 <__aeabi_i2d>
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800905a:	f7f7 f885 	bl	8000168 <__aeabi_dsub>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	3530      	adds	r5, #48	@ 0x30
 8009064:	f806 5b01 	strb.w	r5, [r6], #1
 8009068:	42a6      	cmp	r6, r4
 800906a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800906e:	f04f 0200 	mov.w	r2, #0
 8009072:	d124      	bne.n	80090be <_dtoa_r+0x62e>
 8009074:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009078:	4bae      	ldr	r3, [pc, #696]	@ (8009334 <_dtoa_r+0x8a4>)
 800907a:	f7f7 f877 	bl	800016c <__adddf3>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009086:	f7f7 fcb7 	bl	80009f8 <__aeabi_dcmpgt>
 800908a:	2800      	cmp	r0, #0
 800908c:	d163      	bne.n	8009156 <_dtoa_r+0x6c6>
 800908e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009092:	2000      	movs	r0, #0
 8009094:	49a7      	ldr	r1, [pc, #668]	@ (8009334 <_dtoa_r+0x8a4>)
 8009096:	f7f7 f867 	bl	8000168 <__aeabi_dsub>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090a2:	f7f7 fc8b 	bl	80009bc <__aeabi_dcmplt>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f43f af14 	beq.w	8008ed4 <_dtoa_r+0x444>
 80090ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80090ae:	1e73      	subs	r3, r6, #1
 80090b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090b6:	2b30      	cmp	r3, #48	@ 0x30
 80090b8:	d0f8      	beq.n	80090ac <_dtoa_r+0x61c>
 80090ba:	4647      	mov	r7, r8
 80090bc:	e03b      	b.n	8009136 <_dtoa_r+0x6a6>
 80090be:	4b9e      	ldr	r3, [pc, #632]	@ (8009338 <_dtoa_r+0x8a8>)
 80090c0:	f7f7 fa0a 	bl	80004d8 <__aeabi_dmul>
 80090c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090c8:	e7bc      	b.n	8009044 <_dtoa_r+0x5b4>
 80090ca:	4656      	mov	r6, sl
 80090cc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80090d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090d4:	4620      	mov	r0, r4
 80090d6:	4629      	mov	r1, r5
 80090d8:	f7f7 fb28 	bl	800072c <__aeabi_ddiv>
 80090dc:	f7f7 fcac 	bl	8000a38 <__aeabi_d2iz>
 80090e0:	4680      	mov	r8, r0
 80090e2:	f7f7 f98f 	bl	8000404 <__aeabi_i2d>
 80090e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ea:	f7f7 f9f5 	bl	80004d8 <__aeabi_dmul>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4620      	mov	r0, r4
 80090f4:	4629      	mov	r1, r5
 80090f6:	f7f7 f837 	bl	8000168 <__aeabi_dsub>
 80090fa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80090fe:	9d08      	ldr	r5, [sp, #32]
 8009100:	f806 4b01 	strb.w	r4, [r6], #1
 8009104:	eba6 040a 	sub.w	r4, r6, sl
 8009108:	42a5      	cmp	r5, r4
 800910a:	4602      	mov	r2, r0
 800910c:	460b      	mov	r3, r1
 800910e:	d133      	bne.n	8009178 <_dtoa_r+0x6e8>
 8009110:	f7f7 f82c 	bl	800016c <__adddf3>
 8009114:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009118:	4604      	mov	r4, r0
 800911a:	460d      	mov	r5, r1
 800911c:	f7f7 fc6c 	bl	80009f8 <__aeabi_dcmpgt>
 8009120:	b9c0      	cbnz	r0, 8009154 <_dtoa_r+0x6c4>
 8009122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009126:	4620      	mov	r0, r4
 8009128:	4629      	mov	r1, r5
 800912a:	f7f7 fc3d 	bl	80009a8 <__aeabi_dcmpeq>
 800912e:	b110      	cbz	r0, 8009136 <_dtoa_r+0x6a6>
 8009130:	f018 0f01 	tst.w	r8, #1
 8009134:	d10e      	bne.n	8009154 <_dtoa_r+0x6c4>
 8009136:	4648      	mov	r0, r9
 8009138:	9903      	ldr	r1, [sp, #12]
 800913a:	f000 fbbb 	bl	80098b4 <_Bfree>
 800913e:	2300      	movs	r3, #0
 8009140:	7033      	strb	r3, [r6, #0]
 8009142:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009144:	3701      	adds	r7, #1
 8009146:	601f      	str	r7, [r3, #0]
 8009148:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 824b 	beq.w	80095e6 <_dtoa_r+0xb56>
 8009150:	601e      	str	r6, [r3, #0]
 8009152:	e248      	b.n	80095e6 <_dtoa_r+0xb56>
 8009154:	46b8      	mov	r8, r7
 8009156:	4633      	mov	r3, r6
 8009158:	461e      	mov	r6, r3
 800915a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800915e:	2a39      	cmp	r2, #57	@ 0x39
 8009160:	d106      	bne.n	8009170 <_dtoa_r+0x6e0>
 8009162:	459a      	cmp	sl, r3
 8009164:	d1f8      	bne.n	8009158 <_dtoa_r+0x6c8>
 8009166:	2230      	movs	r2, #48	@ 0x30
 8009168:	f108 0801 	add.w	r8, r8, #1
 800916c:	f88a 2000 	strb.w	r2, [sl]
 8009170:	781a      	ldrb	r2, [r3, #0]
 8009172:	3201      	adds	r2, #1
 8009174:	701a      	strb	r2, [r3, #0]
 8009176:	e7a0      	b.n	80090ba <_dtoa_r+0x62a>
 8009178:	2200      	movs	r2, #0
 800917a:	4b6f      	ldr	r3, [pc, #444]	@ (8009338 <_dtoa_r+0x8a8>)
 800917c:	f7f7 f9ac 	bl	80004d8 <__aeabi_dmul>
 8009180:	2200      	movs	r2, #0
 8009182:	2300      	movs	r3, #0
 8009184:	4604      	mov	r4, r0
 8009186:	460d      	mov	r5, r1
 8009188:	f7f7 fc0e 	bl	80009a8 <__aeabi_dcmpeq>
 800918c:	2800      	cmp	r0, #0
 800918e:	d09f      	beq.n	80090d0 <_dtoa_r+0x640>
 8009190:	e7d1      	b.n	8009136 <_dtoa_r+0x6a6>
 8009192:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009194:	2a00      	cmp	r2, #0
 8009196:	f000 80ea 	beq.w	800936e <_dtoa_r+0x8de>
 800919a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800919c:	2a01      	cmp	r2, #1
 800919e:	f300 80cd 	bgt.w	800933c <_dtoa_r+0x8ac>
 80091a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80091a4:	2a00      	cmp	r2, #0
 80091a6:	f000 80c1 	beq.w	800932c <_dtoa_r+0x89c>
 80091aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80091ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80091b0:	9e04      	ldr	r6, [sp, #16]
 80091b2:	9a04      	ldr	r2, [sp, #16]
 80091b4:	2101      	movs	r1, #1
 80091b6:	441a      	add	r2, r3
 80091b8:	9204      	str	r2, [sp, #16]
 80091ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091bc:	4648      	mov	r0, r9
 80091be:	441a      	add	r2, r3
 80091c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80091c2:	f000 fc2b 	bl	8009a1c <__i2b>
 80091c6:	4605      	mov	r5, r0
 80091c8:	b166      	cbz	r6, 80091e4 <_dtoa_r+0x754>
 80091ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dd09      	ble.n	80091e4 <_dtoa_r+0x754>
 80091d0:	42b3      	cmp	r3, r6
 80091d2:	bfa8      	it	ge
 80091d4:	4633      	movge	r3, r6
 80091d6:	9a04      	ldr	r2, [sp, #16]
 80091d8:	1af6      	subs	r6, r6, r3
 80091da:	1ad2      	subs	r2, r2, r3
 80091dc:	9204      	str	r2, [sp, #16]
 80091de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091e6:	b30b      	cbz	r3, 800922c <_dtoa_r+0x79c>
 80091e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 80c6 	beq.w	800937c <_dtoa_r+0x8ec>
 80091f0:	2c00      	cmp	r4, #0
 80091f2:	f000 80c0 	beq.w	8009376 <_dtoa_r+0x8e6>
 80091f6:	4629      	mov	r1, r5
 80091f8:	4622      	mov	r2, r4
 80091fa:	4648      	mov	r0, r9
 80091fc:	f000 fcc6 	bl	8009b8c <__pow5mult>
 8009200:	9a03      	ldr	r2, [sp, #12]
 8009202:	4601      	mov	r1, r0
 8009204:	4605      	mov	r5, r0
 8009206:	4648      	mov	r0, r9
 8009208:	f000 fc1e 	bl	8009a48 <__multiply>
 800920c:	9903      	ldr	r1, [sp, #12]
 800920e:	4680      	mov	r8, r0
 8009210:	4648      	mov	r0, r9
 8009212:	f000 fb4f 	bl	80098b4 <_Bfree>
 8009216:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009218:	1b1b      	subs	r3, r3, r4
 800921a:	930a      	str	r3, [sp, #40]	@ 0x28
 800921c:	f000 80b1 	beq.w	8009382 <_dtoa_r+0x8f2>
 8009220:	4641      	mov	r1, r8
 8009222:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009224:	4648      	mov	r0, r9
 8009226:	f000 fcb1 	bl	8009b8c <__pow5mult>
 800922a:	9003      	str	r0, [sp, #12]
 800922c:	2101      	movs	r1, #1
 800922e:	4648      	mov	r0, r9
 8009230:	f000 fbf4 	bl	8009a1c <__i2b>
 8009234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009236:	4604      	mov	r4, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 81d8 	beq.w	80095ee <_dtoa_r+0xb5e>
 800923e:	461a      	mov	r2, r3
 8009240:	4601      	mov	r1, r0
 8009242:	4648      	mov	r0, r9
 8009244:	f000 fca2 	bl	8009b8c <__pow5mult>
 8009248:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800924a:	4604      	mov	r4, r0
 800924c:	2b01      	cmp	r3, #1
 800924e:	f300 809f 	bgt.w	8009390 <_dtoa_r+0x900>
 8009252:	9b06      	ldr	r3, [sp, #24]
 8009254:	2b00      	cmp	r3, #0
 8009256:	f040 8097 	bne.w	8009388 <_dtoa_r+0x8f8>
 800925a:	9b07      	ldr	r3, [sp, #28]
 800925c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009260:	2b00      	cmp	r3, #0
 8009262:	f040 8093 	bne.w	800938c <_dtoa_r+0x8fc>
 8009266:	9b07      	ldr	r3, [sp, #28]
 8009268:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800926c:	0d1b      	lsrs	r3, r3, #20
 800926e:	051b      	lsls	r3, r3, #20
 8009270:	b133      	cbz	r3, 8009280 <_dtoa_r+0x7f0>
 8009272:	9b04      	ldr	r3, [sp, #16]
 8009274:	3301      	adds	r3, #1
 8009276:	9304      	str	r3, [sp, #16]
 8009278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800927a:	3301      	adds	r3, #1
 800927c:	9309      	str	r3, [sp, #36]	@ 0x24
 800927e:	2301      	movs	r3, #1
 8009280:	930a      	str	r3, [sp, #40]	@ 0x28
 8009282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 81b8 	beq.w	80095fa <_dtoa_r+0xb6a>
 800928a:	6923      	ldr	r3, [r4, #16]
 800928c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009290:	6918      	ldr	r0, [r3, #16]
 8009292:	f000 fb77 	bl	8009984 <__hi0bits>
 8009296:	f1c0 0020 	rsb	r0, r0, #32
 800929a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929c:	4418      	add	r0, r3
 800929e:	f010 001f 	ands.w	r0, r0, #31
 80092a2:	f000 8082 	beq.w	80093aa <_dtoa_r+0x91a>
 80092a6:	f1c0 0320 	rsb	r3, r0, #32
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	dd73      	ble.n	8009396 <_dtoa_r+0x906>
 80092ae:	9b04      	ldr	r3, [sp, #16]
 80092b0:	f1c0 001c 	rsb	r0, r0, #28
 80092b4:	4403      	add	r3, r0
 80092b6:	9304      	str	r3, [sp, #16]
 80092b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ba:	4406      	add	r6, r0
 80092bc:	4403      	add	r3, r0
 80092be:	9309      	str	r3, [sp, #36]	@ 0x24
 80092c0:	9b04      	ldr	r3, [sp, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	dd05      	ble.n	80092d2 <_dtoa_r+0x842>
 80092c6:	461a      	mov	r2, r3
 80092c8:	4648      	mov	r0, r9
 80092ca:	9903      	ldr	r1, [sp, #12]
 80092cc:	f000 fcb8 	bl	8009c40 <__lshift>
 80092d0:	9003      	str	r0, [sp, #12]
 80092d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	dd05      	ble.n	80092e4 <_dtoa_r+0x854>
 80092d8:	4621      	mov	r1, r4
 80092da:	461a      	mov	r2, r3
 80092dc:	4648      	mov	r0, r9
 80092de:	f000 fcaf 	bl	8009c40 <__lshift>
 80092e2:	4604      	mov	r4, r0
 80092e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d061      	beq.n	80093ae <_dtoa_r+0x91e>
 80092ea:	4621      	mov	r1, r4
 80092ec:	9803      	ldr	r0, [sp, #12]
 80092ee:	f000 fd13 	bl	8009d18 <__mcmp>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	da5b      	bge.n	80093ae <_dtoa_r+0x91e>
 80092f6:	2300      	movs	r3, #0
 80092f8:	220a      	movs	r2, #10
 80092fa:	4648      	mov	r0, r9
 80092fc:	9903      	ldr	r1, [sp, #12]
 80092fe:	f000 fafb 	bl	80098f8 <__multadd>
 8009302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009304:	f107 38ff 	add.w	r8, r7, #4294967295
 8009308:	9003      	str	r0, [sp, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 8177 	beq.w	80095fe <_dtoa_r+0xb6e>
 8009310:	4629      	mov	r1, r5
 8009312:	2300      	movs	r3, #0
 8009314:	220a      	movs	r2, #10
 8009316:	4648      	mov	r0, r9
 8009318:	f000 faee 	bl	80098f8 <__multadd>
 800931c:	f1bb 0f00 	cmp.w	fp, #0
 8009320:	4605      	mov	r5, r0
 8009322:	dc6f      	bgt.n	8009404 <_dtoa_r+0x974>
 8009324:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009326:	2b02      	cmp	r3, #2
 8009328:	dc49      	bgt.n	80093be <_dtoa_r+0x92e>
 800932a:	e06b      	b.n	8009404 <_dtoa_r+0x974>
 800932c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800932e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009332:	e73c      	b.n	80091ae <_dtoa_r+0x71e>
 8009334:	3fe00000 	.word	0x3fe00000
 8009338:	40240000 	.word	0x40240000
 800933c:	9b08      	ldr	r3, [sp, #32]
 800933e:	1e5c      	subs	r4, r3, #1
 8009340:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009342:	42a3      	cmp	r3, r4
 8009344:	db09      	blt.n	800935a <_dtoa_r+0x8ca>
 8009346:	1b1c      	subs	r4, r3, r4
 8009348:	9b08      	ldr	r3, [sp, #32]
 800934a:	2b00      	cmp	r3, #0
 800934c:	f6bf af30 	bge.w	80091b0 <_dtoa_r+0x720>
 8009350:	9b04      	ldr	r3, [sp, #16]
 8009352:	9a08      	ldr	r2, [sp, #32]
 8009354:	1a9e      	subs	r6, r3, r2
 8009356:	2300      	movs	r3, #0
 8009358:	e72b      	b.n	80091b2 <_dtoa_r+0x722>
 800935a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800935c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800935e:	1ae3      	subs	r3, r4, r3
 8009360:	441a      	add	r2, r3
 8009362:	940a      	str	r4, [sp, #40]	@ 0x28
 8009364:	9e04      	ldr	r6, [sp, #16]
 8009366:	2400      	movs	r4, #0
 8009368:	9b08      	ldr	r3, [sp, #32]
 800936a:	920e      	str	r2, [sp, #56]	@ 0x38
 800936c:	e721      	b.n	80091b2 <_dtoa_r+0x722>
 800936e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009370:	9e04      	ldr	r6, [sp, #16]
 8009372:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009374:	e728      	b.n	80091c8 <_dtoa_r+0x738>
 8009376:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800937a:	e751      	b.n	8009220 <_dtoa_r+0x790>
 800937c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800937e:	9903      	ldr	r1, [sp, #12]
 8009380:	e750      	b.n	8009224 <_dtoa_r+0x794>
 8009382:	f8cd 800c 	str.w	r8, [sp, #12]
 8009386:	e751      	b.n	800922c <_dtoa_r+0x79c>
 8009388:	2300      	movs	r3, #0
 800938a:	e779      	b.n	8009280 <_dtoa_r+0x7f0>
 800938c:	9b06      	ldr	r3, [sp, #24]
 800938e:	e777      	b.n	8009280 <_dtoa_r+0x7f0>
 8009390:	2300      	movs	r3, #0
 8009392:	930a      	str	r3, [sp, #40]	@ 0x28
 8009394:	e779      	b.n	800928a <_dtoa_r+0x7fa>
 8009396:	d093      	beq.n	80092c0 <_dtoa_r+0x830>
 8009398:	9a04      	ldr	r2, [sp, #16]
 800939a:	331c      	adds	r3, #28
 800939c:	441a      	add	r2, r3
 800939e:	9204      	str	r2, [sp, #16]
 80093a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093a2:	441e      	add	r6, r3
 80093a4:	441a      	add	r2, r3
 80093a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80093a8:	e78a      	b.n	80092c0 <_dtoa_r+0x830>
 80093aa:	4603      	mov	r3, r0
 80093ac:	e7f4      	b.n	8009398 <_dtoa_r+0x908>
 80093ae:	9b08      	ldr	r3, [sp, #32]
 80093b0:	46b8      	mov	r8, r7
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	dc20      	bgt.n	80093f8 <_dtoa_r+0x968>
 80093b6:	469b      	mov	fp, r3
 80093b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	dd1e      	ble.n	80093fc <_dtoa_r+0x96c>
 80093be:	f1bb 0f00 	cmp.w	fp, #0
 80093c2:	f47f adb1 	bne.w	8008f28 <_dtoa_r+0x498>
 80093c6:	4621      	mov	r1, r4
 80093c8:	465b      	mov	r3, fp
 80093ca:	2205      	movs	r2, #5
 80093cc:	4648      	mov	r0, r9
 80093ce:	f000 fa93 	bl	80098f8 <__multadd>
 80093d2:	4601      	mov	r1, r0
 80093d4:	4604      	mov	r4, r0
 80093d6:	9803      	ldr	r0, [sp, #12]
 80093d8:	f000 fc9e 	bl	8009d18 <__mcmp>
 80093dc:	2800      	cmp	r0, #0
 80093de:	f77f ada3 	ble.w	8008f28 <_dtoa_r+0x498>
 80093e2:	4656      	mov	r6, sl
 80093e4:	2331      	movs	r3, #49	@ 0x31
 80093e6:	f108 0801 	add.w	r8, r8, #1
 80093ea:	f806 3b01 	strb.w	r3, [r6], #1
 80093ee:	e59f      	b.n	8008f30 <_dtoa_r+0x4a0>
 80093f0:	46b8      	mov	r8, r7
 80093f2:	9c08      	ldr	r4, [sp, #32]
 80093f4:	4625      	mov	r5, r4
 80093f6:	e7f4      	b.n	80093e2 <_dtoa_r+0x952>
 80093f8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80093fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f000 8101 	beq.w	8009606 <_dtoa_r+0xb76>
 8009404:	2e00      	cmp	r6, #0
 8009406:	dd05      	ble.n	8009414 <_dtoa_r+0x984>
 8009408:	4629      	mov	r1, r5
 800940a:	4632      	mov	r2, r6
 800940c:	4648      	mov	r0, r9
 800940e:	f000 fc17 	bl	8009c40 <__lshift>
 8009412:	4605      	mov	r5, r0
 8009414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009416:	2b00      	cmp	r3, #0
 8009418:	d05c      	beq.n	80094d4 <_dtoa_r+0xa44>
 800941a:	4648      	mov	r0, r9
 800941c:	6869      	ldr	r1, [r5, #4]
 800941e:	f000 fa09 	bl	8009834 <_Balloc>
 8009422:	4606      	mov	r6, r0
 8009424:	b928      	cbnz	r0, 8009432 <_dtoa_r+0x9a2>
 8009426:	4602      	mov	r2, r0
 8009428:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800942c:	4b80      	ldr	r3, [pc, #512]	@ (8009630 <_dtoa_r+0xba0>)
 800942e:	f7ff bb43 	b.w	8008ab8 <_dtoa_r+0x28>
 8009432:	692a      	ldr	r2, [r5, #16]
 8009434:	f105 010c 	add.w	r1, r5, #12
 8009438:	3202      	adds	r2, #2
 800943a:	0092      	lsls	r2, r2, #2
 800943c:	300c      	adds	r0, #12
 800943e:	f7ff fa8e 	bl	800895e <memcpy>
 8009442:	2201      	movs	r2, #1
 8009444:	4631      	mov	r1, r6
 8009446:	4648      	mov	r0, r9
 8009448:	f000 fbfa 	bl	8009c40 <__lshift>
 800944c:	462f      	mov	r7, r5
 800944e:	4605      	mov	r5, r0
 8009450:	f10a 0301 	add.w	r3, sl, #1
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	eb0a 030b 	add.w	r3, sl, fp
 800945a:	930a      	str	r3, [sp, #40]	@ 0x28
 800945c:	9b06      	ldr	r3, [sp, #24]
 800945e:	f003 0301 	and.w	r3, r3, #1
 8009462:	9309      	str	r3, [sp, #36]	@ 0x24
 8009464:	9b04      	ldr	r3, [sp, #16]
 8009466:	4621      	mov	r1, r4
 8009468:	9803      	ldr	r0, [sp, #12]
 800946a:	f103 3bff 	add.w	fp, r3, #4294967295
 800946e:	f7ff fa84 	bl	800897a <quorem>
 8009472:	4603      	mov	r3, r0
 8009474:	4639      	mov	r1, r7
 8009476:	3330      	adds	r3, #48	@ 0x30
 8009478:	9006      	str	r0, [sp, #24]
 800947a:	9803      	ldr	r0, [sp, #12]
 800947c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800947e:	f000 fc4b 	bl	8009d18 <__mcmp>
 8009482:	462a      	mov	r2, r5
 8009484:	9008      	str	r0, [sp, #32]
 8009486:	4621      	mov	r1, r4
 8009488:	4648      	mov	r0, r9
 800948a:	f000 fc61 	bl	8009d50 <__mdiff>
 800948e:	68c2      	ldr	r2, [r0, #12]
 8009490:	4606      	mov	r6, r0
 8009492:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009494:	bb02      	cbnz	r2, 80094d8 <_dtoa_r+0xa48>
 8009496:	4601      	mov	r1, r0
 8009498:	9803      	ldr	r0, [sp, #12]
 800949a:	f000 fc3d 	bl	8009d18 <__mcmp>
 800949e:	4602      	mov	r2, r0
 80094a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094a2:	4631      	mov	r1, r6
 80094a4:	4648      	mov	r0, r9
 80094a6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80094aa:	f000 fa03 	bl	80098b4 <_Bfree>
 80094ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80094b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80094b2:	9e04      	ldr	r6, [sp, #16]
 80094b4:	ea42 0103 	orr.w	r1, r2, r3
 80094b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ba:	4319      	orrs	r1, r3
 80094bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094be:	d10d      	bne.n	80094dc <_dtoa_r+0xa4c>
 80094c0:	2b39      	cmp	r3, #57	@ 0x39
 80094c2:	d027      	beq.n	8009514 <_dtoa_r+0xa84>
 80094c4:	9a08      	ldr	r2, [sp, #32]
 80094c6:	2a00      	cmp	r2, #0
 80094c8:	dd01      	ble.n	80094ce <_dtoa_r+0xa3e>
 80094ca:	9b06      	ldr	r3, [sp, #24]
 80094cc:	3331      	adds	r3, #49	@ 0x31
 80094ce:	f88b 3000 	strb.w	r3, [fp]
 80094d2:	e52e      	b.n	8008f32 <_dtoa_r+0x4a2>
 80094d4:	4628      	mov	r0, r5
 80094d6:	e7b9      	b.n	800944c <_dtoa_r+0x9bc>
 80094d8:	2201      	movs	r2, #1
 80094da:	e7e2      	b.n	80094a2 <_dtoa_r+0xa12>
 80094dc:	9908      	ldr	r1, [sp, #32]
 80094de:	2900      	cmp	r1, #0
 80094e0:	db04      	blt.n	80094ec <_dtoa_r+0xa5c>
 80094e2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80094e4:	4301      	orrs	r1, r0
 80094e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094e8:	4301      	orrs	r1, r0
 80094ea:	d120      	bne.n	800952e <_dtoa_r+0xa9e>
 80094ec:	2a00      	cmp	r2, #0
 80094ee:	ddee      	ble.n	80094ce <_dtoa_r+0xa3e>
 80094f0:	2201      	movs	r2, #1
 80094f2:	9903      	ldr	r1, [sp, #12]
 80094f4:	4648      	mov	r0, r9
 80094f6:	9304      	str	r3, [sp, #16]
 80094f8:	f000 fba2 	bl	8009c40 <__lshift>
 80094fc:	4621      	mov	r1, r4
 80094fe:	9003      	str	r0, [sp, #12]
 8009500:	f000 fc0a 	bl	8009d18 <__mcmp>
 8009504:	2800      	cmp	r0, #0
 8009506:	9b04      	ldr	r3, [sp, #16]
 8009508:	dc02      	bgt.n	8009510 <_dtoa_r+0xa80>
 800950a:	d1e0      	bne.n	80094ce <_dtoa_r+0xa3e>
 800950c:	07da      	lsls	r2, r3, #31
 800950e:	d5de      	bpl.n	80094ce <_dtoa_r+0xa3e>
 8009510:	2b39      	cmp	r3, #57	@ 0x39
 8009512:	d1da      	bne.n	80094ca <_dtoa_r+0xa3a>
 8009514:	2339      	movs	r3, #57	@ 0x39
 8009516:	f88b 3000 	strb.w	r3, [fp]
 800951a:	4633      	mov	r3, r6
 800951c:	461e      	mov	r6, r3
 800951e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009522:	3b01      	subs	r3, #1
 8009524:	2a39      	cmp	r2, #57	@ 0x39
 8009526:	d04e      	beq.n	80095c6 <_dtoa_r+0xb36>
 8009528:	3201      	adds	r2, #1
 800952a:	701a      	strb	r2, [r3, #0]
 800952c:	e501      	b.n	8008f32 <_dtoa_r+0x4a2>
 800952e:	2a00      	cmp	r2, #0
 8009530:	dd03      	ble.n	800953a <_dtoa_r+0xaaa>
 8009532:	2b39      	cmp	r3, #57	@ 0x39
 8009534:	d0ee      	beq.n	8009514 <_dtoa_r+0xa84>
 8009536:	3301      	adds	r3, #1
 8009538:	e7c9      	b.n	80094ce <_dtoa_r+0xa3e>
 800953a:	9a04      	ldr	r2, [sp, #16]
 800953c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800953e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009542:	428a      	cmp	r2, r1
 8009544:	d028      	beq.n	8009598 <_dtoa_r+0xb08>
 8009546:	2300      	movs	r3, #0
 8009548:	220a      	movs	r2, #10
 800954a:	9903      	ldr	r1, [sp, #12]
 800954c:	4648      	mov	r0, r9
 800954e:	f000 f9d3 	bl	80098f8 <__multadd>
 8009552:	42af      	cmp	r7, r5
 8009554:	9003      	str	r0, [sp, #12]
 8009556:	f04f 0300 	mov.w	r3, #0
 800955a:	f04f 020a 	mov.w	r2, #10
 800955e:	4639      	mov	r1, r7
 8009560:	4648      	mov	r0, r9
 8009562:	d107      	bne.n	8009574 <_dtoa_r+0xae4>
 8009564:	f000 f9c8 	bl	80098f8 <__multadd>
 8009568:	4607      	mov	r7, r0
 800956a:	4605      	mov	r5, r0
 800956c:	9b04      	ldr	r3, [sp, #16]
 800956e:	3301      	adds	r3, #1
 8009570:	9304      	str	r3, [sp, #16]
 8009572:	e777      	b.n	8009464 <_dtoa_r+0x9d4>
 8009574:	f000 f9c0 	bl	80098f8 <__multadd>
 8009578:	4629      	mov	r1, r5
 800957a:	4607      	mov	r7, r0
 800957c:	2300      	movs	r3, #0
 800957e:	220a      	movs	r2, #10
 8009580:	4648      	mov	r0, r9
 8009582:	f000 f9b9 	bl	80098f8 <__multadd>
 8009586:	4605      	mov	r5, r0
 8009588:	e7f0      	b.n	800956c <_dtoa_r+0xadc>
 800958a:	f1bb 0f00 	cmp.w	fp, #0
 800958e:	bfcc      	ite	gt
 8009590:	465e      	movgt	r6, fp
 8009592:	2601      	movle	r6, #1
 8009594:	2700      	movs	r7, #0
 8009596:	4456      	add	r6, sl
 8009598:	2201      	movs	r2, #1
 800959a:	9903      	ldr	r1, [sp, #12]
 800959c:	4648      	mov	r0, r9
 800959e:	9304      	str	r3, [sp, #16]
 80095a0:	f000 fb4e 	bl	8009c40 <__lshift>
 80095a4:	4621      	mov	r1, r4
 80095a6:	9003      	str	r0, [sp, #12]
 80095a8:	f000 fbb6 	bl	8009d18 <__mcmp>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	dcb4      	bgt.n	800951a <_dtoa_r+0xa8a>
 80095b0:	d102      	bne.n	80095b8 <_dtoa_r+0xb28>
 80095b2:	9b04      	ldr	r3, [sp, #16]
 80095b4:	07db      	lsls	r3, r3, #31
 80095b6:	d4b0      	bmi.n	800951a <_dtoa_r+0xa8a>
 80095b8:	4633      	mov	r3, r6
 80095ba:	461e      	mov	r6, r3
 80095bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095c0:	2a30      	cmp	r2, #48	@ 0x30
 80095c2:	d0fa      	beq.n	80095ba <_dtoa_r+0xb2a>
 80095c4:	e4b5      	b.n	8008f32 <_dtoa_r+0x4a2>
 80095c6:	459a      	cmp	sl, r3
 80095c8:	d1a8      	bne.n	800951c <_dtoa_r+0xa8c>
 80095ca:	2331      	movs	r3, #49	@ 0x31
 80095cc:	f108 0801 	add.w	r8, r8, #1
 80095d0:	f88a 3000 	strb.w	r3, [sl]
 80095d4:	e4ad      	b.n	8008f32 <_dtoa_r+0x4a2>
 80095d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80095d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009634 <_dtoa_r+0xba4>
 80095dc:	b11b      	cbz	r3, 80095e6 <_dtoa_r+0xb56>
 80095de:	f10a 0308 	add.w	r3, sl, #8
 80095e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	4650      	mov	r0, sl
 80095e8:	b017      	add	sp, #92	@ 0x5c
 80095ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	f77f ae2e 	ble.w	8009252 <_dtoa_r+0x7c2>
 80095f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80095fa:	2001      	movs	r0, #1
 80095fc:	e64d      	b.n	800929a <_dtoa_r+0x80a>
 80095fe:	f1bb 0f00 	cmp.w	fp, #0
 8009602:	f77f aed9 	ble.w	80093b8 <_dtoa_r+0x928>
 8009606:	4656      	mov	r6, sl
 8009608:	4621      	mov	r1, r4
 800960a:	9803      	ldr	r0, [sp, #12]
 800960c:	f7ff f9b5 	bl	800897a <quorem>
 8009610:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009614:	f806 3b01 	strb.w	r3, [r6], #1
 8009618:	eba6 020a 	sub.w	r2, r6, sl
 800961c:	4593      	cmp	fp, r2
 800961e:	ddb4      	ble.n	800958a <_dtoa_r+0xafa>
 8009620:	2300      	movs	r3, #0
 8009622:	220a      	movs	r2, #10
 8009624:	4648      	mov	r0, r9
 8009626:	9903      	ldr	r1, [sp, #12]
 8009628:	f000 f966 	bl	80098f8 <__multadd>
 800962c:	9003      	str	r0, [sp, #12]
 800962e:	e7eb      	b.n	8009608 <_dtoa_r+0xb78>
 8009630:	0800b842 	.word	0x0800b842
 8009634:	0800b7c6 	.word	0x0800b7c6

08009638 <_free_r>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	4605      	mov	r5, r0
 800963c:	2900      	cmp	r1, #0
 800963e:	d040      	beq.n	80096c2 <_free_r+0x8a>
 8009640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009644:	1f0c      	subs	r4, r1, #4
 8009646:	2b00      	cmp	r3, #0
 8009648:	bfb8      	it	lt
 800964a:	18e4      	addlt	r4, r4, r3
 800964c:	f000 f8e6 	bl	800981c <__malloc_lock>
 8009650:	4a1c      	ldr	r2, [pc, #112]	@ (80096c4 <_free_r+0x8c>)
 8009652:	6813      	ldr	r3, [r2, #0]
 8009654:	b933      	cbnz	r3, 8009664 <_free_r+0x2c>
 8009656:	6063      	str	r3, [r4, #4]
 8009658:	6014      	str	r4, [r2, #0]
 800965a:	4628      	mov	r0, r5
 800965c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009660:	f000 b8e2 	b.w	8009828 <__malloc_unlock>
 8009664:	42a3      	cmp	r3, r4
 8009666:	d908      	bls.n	800967a <_free_r+0x42>
 8009668:	6820      	ldr	r0, [r4, #0]
 800966a:	1821      	adds	r1, r4, r0
 800966c:	428b      	cmp	r3, r1
 800966e:	bf01      	itttt	eq
 8009670:	6819      	ldreq	r1, [r3, #0]
 8009672:	685b      	ldreq	r3, [r3, #4]
 8009674:	1809      	addeq	r1, r1, r0
 8009676:	6021      	streq	r1, [r4, #0]
 8009678:	e7ed      	b.n	8009656 <_free_r+0x1e>
 800967a:	461a      	mov	r2, r3
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	b10b      	cbz	r3, 8009684 <_free_r+0x4c>
 8009680:	42a3      	cmp	r3, r4
 8009682:	d9fa      	bls.n	800967a <_free_r+0x42>
 8009684:	6811      	ldr	r1, [r2, #0]
 8009686:	1850      	adds	r0, r2, r1
 8009688:	42a0      	cmp	r0, r4
 800968a:	d10b      	bne.n	80096a4 <_free_r+0x6c>
 800968c:	6820      	ldr	r0, [r4, #0]
 800968e:	4401      	add	r1, r0
 8009690:	1850      	adds	r0, r2, r1
 8009692:	4283      	cmp	r3, r0
 8009694:	6011      	str	r1, [r2, #0]
 8009696:	d1e0      	bne.n	800965a <_free_r+0x22>
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	4408      	add	r0, r1
 800969e:	6010      	str	r0, [r2, #0]
 80096a0:	6053      	str	r3, [r2, #4]
 80096a2:	e7da      	b.n	800965a <_free_r+0x22>
 80096a4:	d902      	bls.n	80096ac <_free_r+0x74>
 80096a6:	230c      	movs	r3, #12
 80096a8:	602b      	str	r3, [r5, #0]
 80096aa:	e7d6      	b.n	800965a <_free_r+0x22>
 80096ac:	6820      	ldr	r0, [r4, #0]
 80096ae:	1821      	adds	r1, r4, r0
 80096b0:	428b      	cmp	r3, r1
 80096b2:	bf01      	itttt	eq
 80096b4:	6819      	ldreq	r1, [r3, #0]
 80096b6:	685b      	ldreq	r3, [r3, #4]
 80096b8:	1809      	addeq	r1, r1, r0
 80096ba:	6021      	streq	r1, [r4, #0]
 80096bc:	6063      	str	r3, [r4, #4]
 80096be:	6054      	str	r4, [r2, #4]
 80096c0:	e7cb      	b.n	800965a <_free_r+0x22>
 80096c2:	bd38      	pop	{r3, r4, r5, pc}
 80096c4:	20000698 	.word	0x20000698

080096c8 <malloc>:
 80096c8:	4b02      	ldr	r3, [pc, #8]	@ (80096d4 <malloc+0xc>)
 80096ca:	4601      	mov	r1, r0
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	f000 b825 	b.w	800971c <_malloc_r>
 80096d2:	bf00      	nop
 80096d4:	20000018 	.word	0x20000018

080096d8 <sbrk_aligned>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	4e0f      	ldr	r6, [pc, #60]	@ (8009718 <sbrk_aligned+0x40>)
 80096dc:	460c      	mov	r4, r1
 80096de:	6831      	ldr	r1, [r6, #0]
 80096e0:	4605      	mov	r5, r0
 80096e2:	b911      	cbnz	r1, 80096ea <sbrk_aligned+0x12>
 80096e4:	f000 fe3a 	bl	800a35c <_sbrk_r>
 80096e8:	6030      	str	r0, [r6, #0]
 80096ea:	4621      	mov	r1, r4
 80096ec:	4628      	mov	r0, r5
 80096ee:	f000 fe35 	bl	800a35c <_sbrk_r>
 80096f2:	1c43      	adds	r3, r0, #1
 80096f4:	d103      	bne.n	80096fe <sbrk_aligned+0x26>
 80096f6:	f04f 34ff 	mov.w	r4, #4294967295
 80096fa:	4620      	mov	r0, r4
 80096fc:	bd70      	pop	{r4, r5, r6, pc}
 80096fe:	1cc4      	adds	r4, r0, #3
 8009700:	f024 0403 	bic.w	r4, r4, #3
 8009704:	42a0      	cmp	r0, r4
 8009706:	d0f8      	beq.n	80096fa <sbrk_aligned+0x22>
 8009708:	1a21      	subs	r1, r4, r0
 800970a:	4628      	mov	r0, r5
 800970c:	f000 fe26 	bl	800a35c <_sbrk_r>
 8009710:	3001      	adds	r0, #1
 8009712:	d1f2      	bne.n	80096fa <sbrk_aligned+0x22>
 8009714:	e7ef      	b.n	80096f6 <sbrk_aligned+0x1e>
 8009716:	bf00      	nop
 8009718:	20000694 	.word	0x20000694

0800971c <_malloc_r>:
 800971c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009720:	1ccd      	adds	r5, r1, #3
 8009722:	f025 0503 	bic.w	r5, r5, #3
 8009726:	3508      	adds	r5, #8
 8009728:	2d0c      	cmp	r5, #12
 800972a:	bf38      	it	cc
 800972c:	250c      	movcc	r5, #12
 800972e:	2d00      	cmp	r5, #0
 8009730:	4606      	mov	r6, r0
 8009732:	db01      	blt.n	8009738 <_malloc_r+0x1c>
 8009734:	42a9      	cmp	r1, r5
 8009736:	d904      	bls.n	8009742 <_malloc_r+0x26>
 8009738:	230c      	movs	r3, #12
 800973a:	6033      	str	r3, [r6, #0]
 800973c:	2000      	movs	r0, #0
 800973e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009742:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009818 <_malloc_r+0xfc>
 8009746:	f000 f869 	bl	800981c <__malloc_lock>
 800974a:	f8d8 3000 	ldr.w	r3, [r8]
 800974e:	461c      	mov	r4, r3
 8009750:	bb44      	cbnz	r4, 80097a4 <_malloc_r+0x88>
 8009752:	4629      	mov	r1, r5
 8009754:	4630      	mov	r0, r6
 8009756:	f7ff ffbf 	bl	80096d8 <sbrk_aligned>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	4604      	mov	r4, r0
 800975e:	d158      	bne.n	8009812 <_malloc_r+0xf6>
 8009760:	f8d8 4000 	ldr.w	r4, [r8]
 8009764:	4627      	mov	r7, r4
 8009766:	2f00      	cmp	r7, #0
 8009768:	d143      	bne.n	80097f2 <_malloc_r+0xd6>
 800976a:	2c00      	cmp	r4, #0
 800976c:	d04b      	beq.n	8009806 <_malloc_r+0xea>
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	4639      	mov	r1, r7
 8009772:	4630      	mov	r0, r6
 8009774:	eb04 0903 	add.w	r9, r4, r3
 8009778:	f000 fdf0 	bl	800a35c <_sbrk_r>
 800977c:	4581      	cmp	r9, r0
 800977e:	d142      	bne.n	8009806 <_malloc_r+0xea>
 8009780:	6821      	ldr	r1, [r4, #0]
 8009782:	4630      	mov	r0, r6
 8009784:	1a6d      	subs	r5, r5, r1
 8009786:	4629      	mov	r1, r5
 8009788:	f7ff ffa6 	bl	80096d8 <sbrk_aligned>
 800978c:	3001      	adds	r0, #1
 800978e:	d03a      	beq.n	8009806 <_malloc_r+0xea>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	442b      	add	r3, r5
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	f8d8 3000 	ldr.w	r3, [r8]
 800979a:	685a      	ldr	r2, [r3, #4]
 800979c:	bb62      	cbnz	r2, 80097f8 <_malloc_r+0xdc>
 800979e:	f8c8 7000 	str.w	r7, [r8]
 80097a2:	e00f      	b.n	80097c4 <_malloc_r+0xa8>
 80097a4:	6822      	ldr	r2, [r4, #0]
 80097a6:	1b52      	subs	r2, r2, r5
 80097a8:	d420      	bmi.n	80097ec <_malloc_r+0xd0>
 80097aa:	2a0b      	cmp	r2, #11
 80097ac:	d917      	bls.n	80097de <_malloc_r+0xc2>
 80097ae:	1961      	adds	r1, r4, r5
 80097b0:	42a3      	cmp	r3, r4
 80097b2:	6025      	str	r5, [r4, #0]
 80097b4:	bf18      	it	ne
 80097b6:	6059      	strne	r1, [r3, #4]
 80097b8:	6863      	ldr	r3, [r4, #4]
 80097ba:	bf08      	it	eq
 80097bc:	f8c8 1000 	streq.w	r1, [r8]
 80097c0:	5162      	str	r2, [r4, r5]
 80097c2:	604b      	str	r3, [r1, #4]
 80097c4:	4630      	mov	r0, r6
 80097c6:	f000 f82f 	bl	8009828 <__malloc_unlock>
 80097ca:	f104 000b 	add.w	r0, r4, #11
 80097ce:	1d23      	adds	r3, r4, #4
 80097d0:	f020 0007 	bic.w	r0, r0, #7
 80097d4:	1ac2      	subs	r2, r0, r3
 80097d6:	bf1c      	itt	ne
 80097d8:	1a1b      	subne	r3, r3, r0
 80097da:	50a3      	strne	r3, [r4, r2]
 80097dc:	e7af      	b.n	800973e <_malloc_r+0x22>
 80097de:	6862      	ldr	r2, [r4, #4]
 80097e0:	42a3      	cmp	r3, r4
 80097e2:	bf0c      	ite	eq
 80097e4:	f8c8 2000 	streq.w	r2, [r8]
 80097e8:	605a      	strne	r2, [r3, #4]
 80097ea:	e7eb      	b.n	80097c4 <_malloc_r+0xa8>
 80097ec:	4623      	mov	r3, r4
 80097ee:	6864      	ldr	r4, [r4, #4]
 80097f0:	e7ae      	b.n	8009750 <_malloc_r+0x34>
 80097f2:	463c      	mov	r4, r7
 80097f4:	687f      	ldr	r7, [r7, #4]
 80097f6:	e7b6      	b.n	8009766 <_malloc_r+0x4a>
 80097f8:	461a      	mov	r2, r3
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	42a3      	cmp	r3, r4
 80097fe:	d1fb      	bne.n	80097f8 <_malloc_r+0xdc>
 8009800:	2300      	movs	r3, #0
 8009802:	6053      	str	r3, [r2, #4]
 8009804:	e7de      	b.n	80097c4 <_malloc_r+0xa8>
 8009806:	230c      	movs	r3, #12
 8009808:	4630      	mov	r0, r6
 800980a:	6033      	str	r3, [r6, #0]
 800980c:	f000 f80c 	bl	8009828 <__malloc_unlock>
 8009810:	e794      	b.n	800973c <_malloc_r+0x20>
 8009812:	6005      	str	r5, [r0, #0]
 8009814:	e7d6      	b.n	80097c4 <_malloc_r+0xa8>
 8009816:	bf00      	nop
 8009818:	20000698 	.word	0x20000698

0800981c <__malloc_lock>:
 800981c:	4801      	ldr	r0, [pc, #4]	@ (8009824 <__malloc_lock+0x8>)
 800981e:	f7ff b88e 	b.w	800893e <__retarget_lock_acquire_recursive>
 8009822:	bf00      	nop
 8009824:	20000690 	.word	0x20000690

08009828 <__malloc_unlock>:
 8009828:	4801      	ldr	r0, [pc, #4]	@ (8009830 <__malloc_unlock+0x8>)
 800982a:	f7ff b889 	b.w	8008940 <__retarget_lock_release_recursive>
 800982e:	bf00      	nop
 8009830:	20000690 	.word	0x20000690

08009834 <_Balloc>:
 8009834:	b570      	push	{r4, r5, r6, lr}
 8009836:	69c6      	ldr	r6, [r0, #28]
 8009838:	4604      	mov	r4, r0
 800983a:	460d      	mov	r5, r1
 800983c:	b976      	cbnz	r6, 800985c <_Balloc+0x28>
 800983e:	2010      	movs	r0, #16
 8009840:	f7ff ff42 	bl	80096c8 <malloc>
 8009844:	4602      	mov	r2, r0
 8009846:	61e0      	str	r0, [r4, #28]
 8009848:	b920      	cbnz	r0, 8009854 <_Balloc+0x20>
 800984a:	216b      	movs	r1, #107	@ 0x6b
 800984c:	4b17      	ldr	r3, [pc, #92]	@ (80098ac <_Balloc+0x78>)
 800984e:	4818      	ldr	r0, [pc, #96]	@ (80098b0 <_Balloc+0x7c>)
 8009850:	f000 fd94 	bl	800a37c <__assert_func>
 8009854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009858:	6006      	str	r6, [r0, #0]
 800985a:	60c6      	str	r6, [r0, #12]
 800985c:	69e6      	ldr	r6, [r4, #28]
 800985e:	68f3      	ldr	r3, [r6, #12]
 8009860:	b183      	cbz	r3, 8009884 <_Balloc+0x50>
 8009862:	69e3      	ldr	r3, [r4, #28]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800986a:	b9b8      	cbnz	r0, 800989c <_Balloc+0x68>
 800986c:	2101      	movs	r1, #1
 800986e:	fa01 f605 	lsl.w	r6, r1, r5
 8009872:	1d72      	adds	r2, r6, #5
 8009874:	4620      	mov	r0, r4
 8009876:	0092      	lsls	r2, r2, #2
 8009878:	f000 fd9e 	bl	800a3b8 <_calloc_r>
 800987c:	b160      	cbz	r0, 8009898 <_Balloc+0x64>
 800987e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009882:	e00e      	b.n	80098a2 <_Balloc+0x6e>
 8009884:	2221      	movs	r2, #33	@ 0x21
 8009886:	2104      	movs	r1, #4
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fd95 	bl	800a3b8 <_calloc_r>
 800988e:	69e3      	ldr	r3, [r4, #28]
 8009890:	60f0      	str	r0, [r6, #12]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1e4      	bne.n	8009862 <_Balloc+0x2e>
 8009898:	2000      	movs	r0, #0
 800989a:	bd70      	pop	{r4, r5, r6, pc}
 800989c:	6802      	ldr	r2, [r0, #0]
 800989e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098a2:	2300      	movs	r3, #0
 80098a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098a8:	e7f7      	b.n	800989a <_Balloc+0x66>
 80098aa:	bf00      	nop
 80098ac:	0800b7d3 	.word	0x0800b7d3
 80098b0:	0800b853 	.word	0x0800b853

080098b4 <_Bfree>:
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	69c6      	ldr	r6, [r0, #28]
 80098b8:	4605      	mov	r5, r0
 80098ba:	460c      	mov	r4, r1
 80098bc:	b976      	cbnz	r6, 80098dc <_Bfree+0x28>
 80098be:	2010      	movs	r0, #16
 80098c0:	f7ff ff02 	bl	80096c8 <malloc>
 80098c4:	4602      	mov	r2, r0
 80098c6:	61e8      	str	r0, [r5, #28]
 80098c8:	b920      	cbnz	r0, 80098d4 <_Bfree+0x20>
 80098ca:	218f      	movs	r1, #143	@ 0x8f
 80098cc:	4b08      	ldr	r3, [pc, #32]	@ (80098f0 <_Bfree+0x3c>)
 80098ce:	4809      	ldr	r0, [pc, #36]	@ (80098f4 <_Bfree+0x40>)
 80098d0:	f000 fd54 	bl	800a37c <__assert_func>
 80098d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098d8:	6006      	str	r6, [r0, #0]
 80098da:	60c6      	str	r6, [r0, #12]
 80098dc:	b13c      	cbz	r4, 80098ee <_Bfree+0x3a>
 80098de:	69eb      	ldr	r3, [r5, #28]
 80098e0:	6862      	ldr	r2, [r4, #4]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098e8:	6021      	str	r1, [r4, #0]
 80098ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
 80098f0:	0800b7d3 	.word	0x0800b7d3
 80098f4:	0800b853 	.word	0x0800b853

080098f8 <__multadd>:
 80098f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fc:	4607      	mov	r7, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	461e      	mov	r6, r3
 8009902:	2000      	movs	r0, #0
 8009904:	690d      	ldr	r5, [r1, #16]
 8009906:	f101 0c14 	add.w	ip, r1, #20
 800990a:	f8dc 3000 	ldr.w	r3, [ip]
 800990e:	3001      	adds	r0, #1
 8009910:	b299      	uxth	r1, r3
 8009912:	fb02 6101 	mla	r1, r2, r1, r6
 8009916:	0c1e      	lsrs	r6, r3, #16
 8009918:	0c0b      	lsrs	r3, r1, #16
 800991a:	fb02 3306 	mla	r3, r2, r6, r3
 800991e:	b289      	uxth	r1, r1
 8009920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009924:	4285      	cmp	r5, r0
 8009926:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800992a:	f84c 1b04 	str.w	r1, [ip], #4
 800992e:	dcec      	bgt.n	800990a <__multadd+0x12>
 8009930:	b30e      	cbz	r6, 8009976 <__multadd+0x7e>
 8009932:	68a3      	ldr	r3, [r4, #8]
 8009934:	42ab      	cmp	r3, r5
 8009936:	dc19      	bgt.n	800996c <__multadd+0x74>
 8009938:	6861      	ldr	r1, [r4, #4]
 800993a:	4638      	mov	r0, r7
 800993c:	3101      	adds	r1, #1
 800993e:	f7ff ff79 	bl	8009834 <_Balloc>
 8009942:	4680      	mov	r8, r0
 8009944:	b928      	cbnz	r0, 8009952 <__multadd+0x5a>
 8009946:	4602      	mov	r2, r0
 8009948:	21ba      	movs	r1, #186	@ 0xba
 800994a:	4b0c      	ldr	r3, [pc, #48]	@ (800997c <__multadd+0x84>)
 800994c:	480c      	ldr	r0, [pc, #48]	@ (8009980 <__multadd+0x88>)
 800994e:	f000 fd15 	bl	800a37c <__assert_func>
 8009952:	6922      	ldr	r2, [r4, #16]
 8009954:	f104 010c 	add.w	r1, r4, #12
 8009958:	3202      	adds	r2, #2
 800995a:	0092      	lsls	r2, r2, #2
 800995c:	300c      	adds	r0, #12
 800995e:	f7fe fffe 	bl	800895e <memcpy>
 8009962:	4621      	mov	r1, r4
 8009964:	4638      	mov	r0, r7
 8009966:	f7ff ffa5 	bl	80098b4 <_Bfree>
 800996a:	4644      	mov	r4, r8
 800996c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009970:	3501      	adds	r5, #1
 8009972:	615e      	str	r6, [r3, #20]
 8009974:	6125      	str	r5, [r4, #16]
 8009976:	4620      	mov	r0, r4
 8009978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800997c:	0800b842 	.word	0x0800b842
 8009980:	0800b853 	.word	0x0800b853

08009984 <__hi0bits>:
 8009984:	4603      	mov	r3, r0
 8009986:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800998a:	bf3a      	itte	cc
 800998c:	0403      	lslcc	r3, r0, #16
 800998e:	2010      	movcc	r0, #16
 8009990:	2000      	movcs	r0, #0
 8009992:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009996:	bf3c      	itt	cc
 8009998:	021b      	lslcc	r3, r3, #8
 800999a:	3008      	addcc	r0, #8
 800999c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099a0:	bf3c      	itt	cc
 80099a2:	011b      	lslcc	r3, r3, #4
 80099a4:	3004      	addcc	r0, #4
 80099a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099aa:	bf3c      	itt	cc
 80099ac:	009b      	lslcc	r3, r3, #2
 80099ae:	3002      	addcc	r0, #2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	db05      	blt.n	80099c0 <__hi0bits+0x3c>
 80099b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80099b8:	f100 0001 	add.w	r0, r0, #1
 80099bc:	bf08      	it	eq
 80099be:	2020      	moveq	r0, #32
 80099c0:	4770      	bx	lr

080099c2 <__lo0bits>:
 80099c2:	6803      	ldr	r3, [r0, #0]
 80099c4:	4602      	mov	r2, r0
 80099c6:	f013 0007 	ands.w	r0, r3, #7
 80099ca:	d00b      	beq.n	80099e4 <__lo0bits+0x22>
 80099cc:	07d9      	lsls	r1, r3, #31
 80099ce:	d421      	bmi.n	8009a14 <__lo0bits+0x52>
 80099d0:	0798      	lsls	r0, r3, #30
 80099d2:	bf49      	itett	mi
 80099d4:	085b      	lsrmi	r3, r3, #1
 80099d6:	089b      	lsrpl	r3, r3, #2
 80099d8:	2001      	movmi	r0, #1
 80099da:	6013      	strmi	r3, [r2, #0]
 80099dc:	bf5c      	itt	pl
 80099de:	2002      	movpl	r0, #2
 80099e0:	6013      	strpl	r3, [r2, #0]
 80099e2:	4770      	bx	lr
 80099e4:	b299      	uxth	r1, r3
 80099e6:	b909      	cbnz	r1, 80099ec <__lo0bits+0x2a>
 80099e8:	2010      	movs	r0, #16
 80099ea:	0c1b      	lsrs	r3, r3, #16
 80099ec:	b2d9      	uxtb	r1, r3
 80099ee:	b909      	cbnz	r1, 80099f4 <__lo0bits+0x32>
 80099f0:	3008      	adds	r0, #8
 80099f2:	0a1b      	lsrs	r3, r3, #8
 80099f4:	0719      	lsls	r1, r3, #28
 80099f6:	bf04      	itt	eq
 80099f8:	091b      	lsreq	r3, r3, #4
 80099fa:	3004      	addeq	r0, #4
 80099fc:	0799      	lsls	r1, r3, #30
 80099fe:	bf04      	itt	eq
 8009a00:	089b      	lsreq	r3, r3, #2
 8009a02:	3002      	addeq	r0, #2
 8009a04:	07d9      	lsls	r1, r3, #31
 8009a06:	d403      	bmi.n	8009a10 <__lo0bits+0x4e>
 8009a08:	085b      	lsrs	r3, r3, #1
 8009a0a:	f100 0001 	add.w	r0, r0, #1
 8009a0e:	d003      	beq.n	8009a18 <__lo0bits+0x56>
 8009a10:	6013      	str	r3, [r2, #0]
 8009a12:	4770      	bx	lr
 8009a14:	2000      	movs	r0, #0
 8009a16:	4770      	bx	lr
 8009a18:	2020      	movs	r0, #32
 8009a1a:	4770      	bx	lr

08009a1c <__i2b>:
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	460c      	mov	r4, r1
 8009a20:	2101      	movs	r1, #1
 8009a22:	f7ff ff07 	bl	8009834 <_Balloc>
 8009a26:	4602      	mov	r2, r0
 8009a28:	b928      	cbnz	r0, 8009a36 <__i2b+0x1a>
 8009a2a:	f240 1145 	movw	r1, #325	@ 0x145
 8009a2e:	4b04      	ldr	r3, [pc, #16]	@ (8009a40 <__i2b+0x24>)
 8009a30:	4804      	ldr	r0, [pc, #16]	@ (8009a44 <__i2b+0x28>)
 8009a32:	f000 fca3 	bl	800a37c <__assert_func>
 8009a36:	2301      	movs	r3, #1
 8009a38:	6144      	str	r4, [r0, #20]
 8009a3a:	6103      	str	r3, [r0, #16]
 8009a3c:	bd10      	pop	{r4, pc}
 8009a3e:	bf00      	nop
 8009a40:	0800b842 	.word	0x0800b842
 8009a44:	0800b853 	.word	0x0800b853

08009a48 <__multiply>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	4617      	mov	r7, r2
 8009a4e:	690a      	ldr	r2, [r1, #16]
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	4689      	mov	r9, r1
 8009a54:	429a      	cmp	r2, r3
 8009a56:	bfa2      	ittt	ge
 8009a58:	463b      	movge	r3, r7
 8009a5a:	460f      	movge	r7, r1
 8009a5c:	4699      	movge	r9, r3
 8009a5e:	693d      	ldr	r5, [r7, #16]
 8009a60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	eb05 060a 	add.w	r6, r5, sl
 8009a6c:	42b3      	cmp	r3, r6
 8009a6e:	b085      	sub	sp, #20
 8009a70:	bfb8      	it	lt
 8009a72:	3101      	addlt	r1, #1
 8009a74:	f7ff fede 	bl	8009834 <_Balloc>
 8009a78:	b930      	cbnz	r0, 8009a88 <__multiply+0x40>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a80:	4b40      	ldr	r3, [pc, #256]	@ (8009b84 <__multiply+0x13c>)
 8009a82:	4841      	ldr	r0, [pc, #260]	@ (8009b88 <__multiply+0x140>)
 8009a84:	f000 fc7a 	bl	800a37c <__assert_func>
 8009a88:	f100 0414 	add.w	r4, r0, #20
 8009a8c:	4623      	mov	r3, r4
 8009a8e:	2200      	movs	r2, #0
 8009a90:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009a94:	4573      	cmp	r3, lr
 8009a96:	d320      	bcc.n	8009ada <__multiply+0x92>
 8009a98:	f107 0814 	add.w	r8, r7, #20
 8009a9c:	f109 0114 	add.w	r1, r9, #20
 8009aa0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009aa4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009aa8:	9302      	str	r3, [sp, #8]
 8009aaa:	1beb      	subs	r3, r5, r7
 8009aac:	3b15      	subs	r3, #21
 8009aae:	f023 0303 	bic.w	r3, r3, #3
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	3715      	adds	r7, #21
 8009ab6:	42bd      	cmp	r5, r7
 8009ab8:	bf38      	it	cc
 8009aba:	2304      	movcc	r3, #4
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	9b02      	ldr	r3, [sp, #8]
 8009ac0:	9103      	str	r1, [sp, #12]
 8009ac2:	428b      	cmp	r3, r1
 8009ac4:	d80c      	bhi.n	8009ae0 <__multiply+0x98>
 8009ac6:	2e00      	cmp	r6, #0
 8009ac8:	dd03      	ble.n	8009ad2 <__multiply+0x8a>
 8009aca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d055      	beq.n	8009b7e <__multiply+0x136>
 8009ad2:	6106      	str	r6, [r0, #16]
 8009ad4:	b005      	add	sp, #20
 8009ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ada:	f843 2b04 	str.w	r2, [r3], #4
 8009ade:	e7d9      	b.n	8009a94 <__multiply+0x4c>
 8009ae0:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ae4:	f1ba 0f00 	cmp.w	sl, #0
 8009ae8:	d01f      	beq.n	8009b2a <__multiply+0xe2>
 8009aea:	46c4      	mov	ip, r8
 8009aec:	46a1      	mov	r9, r4
 8009aee:	2700      	movs	r7, #0
 8009af0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009af4:	f8d9 3000 	ldr.w	r3, [r9]
 8009af8:	fa1f fb82 	uxth.w	fp, r2
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b02:	443b      	add	r3, r7
 8009b04:	f8d9 7000 	ldr.w	r7, [r9]
 8009b08:	0c12      	lsrs	r2, r2, #16
 8009b0a:	0c3f      	lsrs	r7, r7, #16
 8009b0c:	fb0a 7202 	mla	r2, sl, r2, r7
 8009b10:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b1a:	4565      	cmp	r5, ip
 8009b1c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009b20:	f849 3b04 	str.w	r3, [r9], #4
 8009b24:	d8e4      	bhi.n	8009af0 <__multiply+0xa8>
 8009b26:	9b01      	ldr	r3, [sp, #4]
 8009b28:	50e7      	str	r7, [r4, r3]
 8009b2a:	9b03      	ldr	r3, [sp, #12]
 8009b2c:	3104      	adds	r1, #4
 8009b2e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009b32:	f1b9 0f00 	cmp.w	r9, #0
 8009b36:	d020      	beq.n	8009b7a <__multiply+0x132>
 8009b38:	4647      	mov	r7, r8
 8009b3a:	46a4      	mov	ip, r4
 8009b3c:	f04f 0a00 	mov.w	sl, #0
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	f8b7 b000 	ldrh.w	fp, [r7]
 8009b46:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	fb09 220b 	mla	r2, r9, fp, r2
 8009b50:	4452      	add	r2, sl
 8009b52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b56:	f84c 3b04 	str.w	r3, [ip], #4
 8009b5a:	f857 3b04 	ldr.w	r3, [r7], #4
 8009b5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b62:	f8bc 3000 	ldrh.w	r3, [ip]
 8009b66:	42bd      	cmp	r5, r7
 8009b68:	fb09 330a 	mla	r3, r9, sl, r3
 8009b6c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009b70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b74:	d8e5      	bhi.n	8009b42 <__multiply+0xfa>
 8009b76:	9a01      	ldr	r2, [sp, #4]
 8009b78:	50a3      	str	r3, [r4, r2]
 8009b7a:	3404      	adds	r4, #4
 8009b7c:	e79f      	b.n	8009abe <__multiply+0x76>
 8009b7e:	3e01      	subs	r6, #1
 8009b80:	e7a1      	b.n	8009ac6 <__multiply+0x7e>
 8009b82:	bf00      	nop
 8009b84:	0800b842 	.word	0x0800b842
 8009b88:	0800b853 	.word	0x0800b853

08009b8c <__pow5mult>:
 8009b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b90:	4615      	mov	r5, r2
 8009b92:	f012 0203 	ands.w	r2, r2, #3
 8009b96:	4607      	mov	r7, r0
 8009b98:	460e      	mov	r6, r1
 8009b9a:	d007      	beq.n	8009bac <__pow5mult+0x20>
 8009b9c:	4c25      	ldr	r4, [pc, #148]	@ (8009c34 <__pow5mult+0xa8>)
 8009b9e:	3a01      	subs	r2, #1
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ba6:	f7ff fea7 	bl	80098f8 <__multadd>
 8009baa:	4606      	mov	r6, r0
 8009bac:	10ad      	asrs	r5, r5, #2
 8009bae:	d03d      	beq.n	8009c2c <__pow5mult+0xa0>
 8009bb0:	69fc      	ldr	r4, [r7, #28]
 8009bb2:	b97c      	cbnz	r4, 8009bd4 <__pow5mult+0x48>
 8009bb4:	2010      	movs	r0, #16
 8009bb6:	f7ff fd87 	bl	80096c8 <malloc>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	61f8      	str	r0, [r7, #28]
 8009bbe:	b928      	cbnz	r0, 8009bcc <__pow5mult+0x40>
 8009bc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8009c38 <__pow5mult+0xac>)
 8009bc6:	481d      	ldr	r0, [pc, #116]	@ (8009c3c <__pow5mult+0xb0>)
 8009bc8:	f000 fbd8 	bl	800a37c <__assert_func>
 8009bcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bd0:	6004      	str	r4, [r0, #0]
 8009bd2:	60c4      	str	r4, [r0, #12]
 8009bd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009bd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bdc:	b94c      	cbnz	r4, 8009bf2 <__pow5mult+0x66>
 8009bde:	f240 2171 	movw	r1, #625	@ 0x271
 8009be2:	4638      	mov	r0, r7
 8009be4:	f7ff ff1a 	bl	8009a1c <__i2b>
 8009be8:	2300      	movs	r3, #0
 8009bea:	4604      	mov	r4, r0
 8009bec:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bf0:	6003      	str	r3, [r0, #0]
 8009bf2:	f04f 0900 	mov.w	r9, #0
 8009bf6:	07eb      	lsls	r3, r5, #31
 8009bf8:	d50a      	bpl.n	8009c10 <__pow5mult+0x84>
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	4638      	mov	r0, r7
 8009c00:	f7ff ff22 	bl	8009a48 <__multiply>
 8009c04:	4680      	mov	r8, r0
 8009c06:	4631      	mov	r1, r6
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f7ff fe53 	bl	80098b4 <_Bfree>
 8009c0e:	4646      	mov	r6, r8
 8009c10:	106d      	asrs	r5, r5, #1
 8009c12:	d00b      	beq.n	8009c2c <__pow5mult+0xa0>
 8009c14:	6820      	ldr	r0, [r4, #0]
 8009c16:	b938      	cbnz	r0, 8009c28 <__pow5mult+0x9c>
 8009c18:	4622      	mov	r2, r4
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	f7ff ff13 	bl	8009a48 <__multiply>
 8009c22:	6020      	str	r0, [r4, #0]
 8009c24:	f8c0 9000 	str.w	r9, [r0]
 8009c28:	4604      	mov	r4, r0
 8009c2a:	e7e4      	b.n	8009bf6 <__pow5mult+0x6a>
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c32:	bf00      	nop
 8009c34:	0800b904 	.word	0x0800b904
 8009c38:	0800b7d3 	.word	0x0800b7d3
 8009c3c:	0800b853 	.word	0x0800b853

08009c40 <__lshift>:
 8009c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c44:	460c      	mov	r4, r1
 8009c46:	4607      	mov	r7, r0
 8009c48:	4691      	mov	r9, r2
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	6849      	ldr	r1, [r1, #4]
 8009c4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c52:	68a3      	ldr	r3, [r4, #8]
 8009c54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c58:	f108 0601 	add.w	r6, r8, #1
 8009c5c:	42b3      	cmp	r3, r6
 8009c5e:	db0b      	blt.n	8009c78 <__lshift+0x38>
 8009c60:	4638      	mov	r0, r7
 8009c62:	f7ff fde7 	bl	8009834 <_Balloc>
 8009c66:	4605      	mov	r5, r0
 8009c68:	b948      	cbnz	r0, 8009c7e <__lshift+0x3e>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c70:	4b27      	ldr	r3, [pc, #156]	@ (8009d10 <__lshift+0xd0>)
 8009c72:	4828      	ldr	r0, [pc, #160]	@ (8009d14 <__lshift+0xd4>)
 8009c74:	f000 fb82 	bl	800a37c <__assert_func>
 8009c78:	3101      	adds	r1, #1
 8009c7a:	005b      	lsls	r3, r3, #1
 8009c7c:	e7ee      	b.n	8009c5c <__lshift+0x1c>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	f100 0114 	add.w	r1, r0, #20
 8009c84:	f100 0210 	add.w	r2, r0, #16
 8009c88:	4618      	mov	r0, r3
 8009c8a:	4553      	cmp	r3, sl
 8009c8c:	db33      	blt.n	8009cf6 <__lshift+0xb6>
 8009c8e:	6920      	ldr	r0, [r4, #16]
 8009c90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c94:	f104 0314 	add.w	r3, r4, #20
 8009c98:	f019 091f 	ands.w	r9, r9, #31
 8009c9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ca0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ca4:	d02b      	beq.n	8009cfe <__lshift+0xbe>
 8009ca6:	468a      	mov	sl, r1
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f1c9 0e20 	rsb	lr, r9, #32
 8009cae:	6818      	ldr	r0, [r3, #0]
 8009cb0:	fa00 f009 	lsl.w	r0, r0, r9
 8009cb4:	4310      	orrs	r0, r2
 8009cb6:	f84a 0b04 	str.w	r0, [sl], #4
 8009cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cbe:	459c      	cmp	ip, r3
 8009cc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009cc4:	d8f3      	bhi.n	8009cae <__lshift+0x6e>
 8009cc6:	ebac 0304 	sub.w	r3, ip, r4
 8009cca:	3b15      	subs	r3, #21
 8009ccc:	f023 0303 	bic.w	r3, r3, #3
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	f104 0015 	add.w	r0, r4, #21
 8009cd6:	4560      	cmp	r0, ip
 8009cd8:	bf88      	it	hi
 8009cda:	2304      	movhi	r3, #4
 8009cdc:	50ca      	str	r2, [r1, r3]
 8009cde:	b10a      	cbz	r2, 8009ce4 <__lshift+0xa4>
 8009ce0:	f108 0602 	add.w	r6, r8, #2
 8009ce4:	3e01      	subs	r6, #1
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	4621      	mov	r1, r4
 8009cea:	612e      	str	r6, [r5, #16]
 8009cec:	f7ff fde2 	bl	80098b4 <_Bfree>
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	e7c5      	b.n	8009c8a <__lshift+0x4a>
 8009cfe:	3904      	subs	r1, #4
 8009d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d04:	459c      	cmp	ip, r3
 8009d06:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d0a:	d8f9      	bhi.n	8009d00 <__lshift+0xc0>
 8009d0c:	e7ea      	b.n	8009ce4 <__lshift+0xa4>
 8009d0e:	bf00      	nop
 8009d10:	0800b842 	.word	0x0800b842
 8009d14:	0800b853 	.word	0x0800b853

08009d18 <__mcmp>:
 8009d18:	4603      	mov	r3, r0
 8009d1a:	690a      	ldr	r2, [r1, #16]
 8009d1c:	6900      	ldr	r0, [r0, #16]
 8009d1e:	b530      	push	{r4, r5, lr}
 8009d20:	1a80      	subs	r0, r0, r2
 8009d22:	d10e      	bne.n	8009d42 <__mcmp+0x2a>
 8009d24:	3314      	adds	r3, #20
 8009d26:	3114      	adds	r1, #20
 8009d28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d38:	4295      	cmp	r5, r2
 8009d3a:	d003      	beq.n	8009d44 <__mcmp+0x2c>
 8009d3c:	d205      	bcs.n	8009d4a <__mcmp+0x32>
 8009d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d42:	bd30      	pop	{r4, r5, pc}
 8009d44:	42a3      	cmp	r3, r4
 8009d46:	d3f3      	bcc.n	8009d30 <__mcmp+0x18>
 8009d48:	e7fb      	b.n	8009d42 <__mcmp+0x2a>
 8009d4a:	2001      	movs	r0, #1
 8009d4c:	e7f9      	b.n	8009d42 <__mcmp+0x2a>
	...

08009d50 <__mdiff>:
 8009d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	4689      	mov	r9, r1
 8009d56:	4606      	mov	r6, r0
 8009d58:	4611      	mov	r1, r2
 8009d5a:	4648      	mov	r0, r9
 8009d5c:	4614      	mov	r4, r2
 8009d5e:	f7ff ffdb 	bl	8009d18 <__mcmp>
 8009d62:	1e05      	subs	r5, r0, #0
 8009d64:	d112      	bne.n	8009d8c <__mdiff+0x3c>
 8009d66:	4629      	mov	r1, r5
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f7ff fd63 	bl	8009834 <_Balloc>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	b928      	cbnz	r0, 8009d7e <__mdiff+0x2e>
 8009d72:	f240 2137 	movw	r1, #567	@ 0x237
 8009d76:	4b3e      	ldr	r3, [pc, #248]	@ (8009e70 <__mdiff+0x120>)
 8009d78:	483e      	ldr	r0, [pc, #248]	@ (8009e74 <__mdiff+0x124>)
 8009d7a:	f000 faff 	bl	800a37c <__assert_func>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d84:	4610      	mov	r0, r2
 8009d86:	b003      	add	sp, #12
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8c:	bfbc      	itt	lt
 8009d8e:	464b      	movlt	r3, r9
 8009d90:	46a1      	movlt	r9, r4
 8009d92:	4630      	mov	r0, r6
 8009d94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009d98:	bfba      	itte	lt
 8009d9a:	461c      	movlt	r4, r3
 8009d9c:	2501      	movlt	r5, #1
 8009d9e:	2500      	movge	r5, #0
 8009da0:	f7ff fd48 	bl	8009834 <_Balloc>
 8009da4:	4602      	mov	r2, r0
 8009da6:	b918      	cbnz	r0, 8009db0 <__mdiff+0x60>
 8009da8:	f240 2145 	movw	r1, #581	@ 0x245
 8009dac:	4b30      	ldr	r3, [pc, #192]	@ (8009e70 <__mdiff+0x120>)
 8009dae:	e7e3      	b.n	8009d78 <__mdiff+0x28>
 8009db0:	f100 0b14 	add.w	fp, r0, #20
 8009db4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009db8:	f109 0310 	add.w	r3, r9, #16
 8009dbc:	60c5      	str	r5, [r0, #12]
 8009dbe:	f04f 0c00 	mov.w	ip, #0
 8009dc2:	f109 0514 	add.w	r5, r9, #20
 8009dc6:	46d9      	mov	r9, fp
 8009dc8:	6926      	ldr	r6, [r4, #16]
 8009dca:	f104 0e14 	add.w	lr, r4, #20
 8009dce:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009dd2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009dd6:	9301      	str	r3, [sp, #4]
 8009dd8:	9b01      	ldr	r3, [sp, #4]
 8009dda:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009dde:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009de2:	b281      	uxth	r1, r0
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	fa1f f38a 	uxth.w	r3, sl
 8009dea:	1a5b      	subs	r3, r3, r1
 8009dec:	0c00      	lsrs	r0, r0, #16
 8009dee:	4463      	add	r3, ip
 8009df0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009df4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009dfe:	4576      	cmp	r6, lr
 8009e00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e04:	f849 3b04 	str.w	r3, [r9], #4
 8009e08:	d8e6      	bhi.n	8009dd8 <__mdiff+0x88>
 8009e0a:	1b33      	subs	r3, r6, r4
 8009e0c:	3b15      	subs	r3, #21
 8009e0e:	f023 0303 	bic.w	r3, r3, #3
 8009e12:	3415      	adds	r4, #21
 8009e14:	3304      	adds	r3, #4
 8009e16:	42a6      	cmp	r6, r4
 8009e18:	bf38      	it	cc
 8009e1a:	2304      	movcc	r3, #4
 8009e1c:	441d      	add	r5, r3
 8009e1e:	445b      	add	r3, fp
 8009e20:	461e      	mov	r6, r3
 8009e22:	462c      	mov	r4, r5
 8009e24:	4544      	cmp	r4, r8
 8009e26:	d30e      	bcc.n	8009e46 <__mdiff+0xf6>
 8009e28:	f108 0103 	add.w	r1, r8, #3
 8009e2c:	1b49      	subs	r1, r1, r5
 8009e2e:	f021 0103 	bic.w	r1, r1, #3
 8009e32:	3d03      	subs	r5, #3
 8009e34:	45a8      	cmp	r8, r5
 8009e36:	bf38      	it	cc
 8009e38:	2100      	movcc	r1, #0
 8009e3a:	440b      	add	r3, r1
 8009e3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e40:	b199      	cbz	r1, 8009e6a <__mdiff+0x11a>
 8009e42:	6117      	str	r7, [r2, #16]
 8009e44:	e79e      	b.n	8009d84 <__mdiff+0x34>
 8009e46:	46e6      	mov	lr, ip
 8009e48:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e4c:	fa1f fc81 	uxth.w	ip, r1
 8009e50:	44f4      	add	ip, lr
 8009e52:	0c08      	lsrs	r0, r1, #16
 8009e54:	4471      	add	r1, lr
 8009e56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e5a:	b289      	uxth	r1, r1
 8009e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e64:	f846 1b04 	str.w	r1, [r6], #4
 8009e68:	e7dc      	b.n	8009e24 <__mdiff+0xd4>
 8009e6a:	3f01      	subs	r7, #1
 8009e6c:	e7e6      	b.n	8009e3c <__mdiff+0xec>
 8009e6e:	bf00      	nop
 8009e70:	0800b842 	.word	0x0800b842
 8009e74:	0800b853 	.word	0x0800b853

08009e78 <__d2b>:
 8009e78:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	4690      	mov	r8, r2
 8009e80:	4699      	mov	r9, r3
 8009e82:	9e08      	ldr	r6, [sp, #32]
 8009e84:	f7ff fcd6 	bl	8009834 <_Balloc>
 8009e88:	4604      	mov	r4, r0
 8009e8a:	b930      	cbnz	r0, 8009e9a <__d2b+0x22>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009e92:	4b23      	ldr	r3, [pc, #140]	@ (8009f20 <__d2b+0xa8>)
 8009e94:	4823      	ldr	r0, [pc, #140]	@ (8009f24 <__d2b+0xac>)
 8009e96:	f000 fa71 	bl	800a37c <__assert_func>
 8009e9a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009e9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ea2:	b10d      	cbz	r5, 8009ea8 <__d2b+0x30>
 8009ea4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ea8:	9301      	str	r3, [sp, #4]
 8009eaa:	f1b8 0300 	subs.w	r3, r8, #0
 8009eae:	d024      	beq.n	8009efa <__d2b+0x82>
 8009eb0:	4668      	mov	r0, sp
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	f7ff fd85 	bl	80099c2 <__lo0bits>
 8009eb8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009ebc:	b1d8      	cbz	r0, 8009ef6 <__d2b+0x7e>
 8009ebe:	f1c0 0320 	rsb	r3, r0, #32
 8009ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec6:	430b      	orrs	r3, r1
 8009ec8:	40c2      	lsrs	r2, r0
 8009eca:	6163      	str	r3, [r4, #20]
 8009ecc:	9201      	str	r2, [sp, #4]
 8009ece:	9b01      	ldr	r3, [sp, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	bf0c      	ite	eq
 8009ed4:	2201      	moveq	r2, #1
 8009ed6:	2202      	movne	r2, #2
 8009ed8:	61a3      	str	r3, [r4, #24]
 8009eda:	6122      	str	r2, [r4, #16]
 8009edc:	b1ad      	cbz	r5, 8009f0a <__d2b+0x92>
 8009ede:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009ee2:	4405      	add	r5, r0
 8009ee4:	6035      	str	r5, [r6, #0]
 8009ee6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eec:	6018      	str	r0, [r3, #0]
 8009eee:	4620      	mov	r0, r4
 8009ef0:	b002      	add	sp, #8
 8009ef2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009ef6:	6161      	str	r1, [r4, #20]
 8009ef8:	e7e9      	b.n	8009ece <__d2b+0x56>
 8009efa:	a801      	add	r0, sp, #4
 8009efc:	f7ff fd61 	bl	80099c2 <__lo0bits>
 8009f00:	9b01      	ldr	r3, [sp, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	6163      	str	r3, [r4, #20]
 8009f06:	3020      	adds	r0, #32
 8009f08:	e7e7      	b.n	8009eda <__d2b+0x62>
 8009f0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009f0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f12:	6030      	str	r0, [r6, #0]
 8009f14:	6918      	ldr	r0, [r3, #16]
 8009f16:	f7ff fd35 	bl	8009984 <__hi0bits>
 8009f1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f1e:	e7e4      	b.n	8009eea <__d2b+0x72>
 8009f20:	0800b842 	.word	0x0800b842
 8009f24:	0800b853 	.word	0x0800b853

08009f28 <__ssputs_r>:
 8009f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f2c:	461f      	mov	r7, r3
 8009f2e:	688e      	ldr	r6, [r1, #8]
 8009f30:	4682      	mov	sl, r0
 8009f32:	42be      	cmp	r6, r7
 8009f34:	460c      	mov	r4, r1
 8009f36:	4690      	mov	r8, r2
 8009f38:	680b      	ldr	r3, [r1, #0]
 8009f3a:	d82d      	bhi.n	8009f98 <__ssputs_r+0x70>
 8009f3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f44:	d026      	beq.n	8009f94 <__ssputs_r+0x6c>
 8009f46:	6965      	ldr	r5, [r4, #20]
 8009f48:	6909      	ldr	r1, [r1, #16]
 8009f4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f4e:	eba3 0901 	sub.w	r9, r3, r1
 8009f52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f56:	1c7b      	adds	r3, r7, #1
 8009f58:	444b      	add	r3, r9
 8009f5a:	106d      	asrs	r5, r5, #1
 8009f5c:	429d      	cmp	r5, r3
 8009f5e:	bf38      	it	cc
 8009f60:	461d      	movcc	r5, r3
 8009f62:	0553      	lsls	r3, r2, #21
 8009f64:	d527      	bpl.n	8009fb6 <__ssputs_r+0x8e>
 8009f66:	4629      	mov	r1, r5
 8009f68:	f7ff fbd8 	bl	800971c <_malloc_r>
 8009f6c:	4606      	mov	r6, r0
 8009f6e:	b360      	cbz	r0, 8009fca <__ssputs_r+0xa2>
 8009f70:	464a      	mov	r2, r9
 8009f72:	6921      	ldr	r1, [r4, #16]
 8009f74:	f7fe fcf3 	bl	800895e <memcpy>
 8009f78:	89a3      	ldrh	r3, [r4, #12]
 8009f7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f82:	81a3      	strh	r3, [r4, #12]
 8009f84:	6126      	str	r6, [r4, #16]
 8009f86:	444e      	add	r6, r9
 8009f88:	6026      	str	r6, [r4, #0]
 8009f8a:	463e      	mov	r6, r7
 8009f8c:	6165      	str	r5, [r4, #20]
 8009f8e:	eba5 0509 	sub.w	r5, r5, r9
 8009f92:	60a5      	str	r5, [r4, #8]
 8009f94:	42be      	cmp	r6, r7
 8009f96:	d900      	bls.n	8009f9a <__ssputs_r+0x72>
 8009f98:	463e      	mov	r6, r7
 8009f9a:	4632      	mov	r2, r6
 8009f9c:	4641      	mov	r1, r8
 8009f9e:	6820      	ldr	r0, [r4, #0]
 8009fa0:	f000 f9c2 	bl	800a328 <memmove>
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	68a3      	ldr	r3, [r4, #8]
 8009fa8:	1b9b      	subs	r3, r3, r6
 8009faa:	60a3      	str	r3, [r4, #8]
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	4433      	add	r3, r6
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb6:	462a      	mov	r2, r5
 8009fb8:	f000 fa24 	bl	800a404 <_realloc_r>
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d1e0      	bne.n	8009f84 <__ssputs_r+0x5c>
 8009fc2:	4650      	mov	r0, sl
 8009fc4:	6921      	ldr	r1, [r4, #16]
 8009fc6:	f7ff fb37 	bl	8009638 <_free_r>
 8009fca:	230c      	movs	r3, #12
 8009fcc:	f8ca 3000 	str.w	r3, [sl]
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fda:	81a3      	strh	r3, [r4, #12]
 8009fdc:	e7e9      	b.n	8009fb2 <__ssputs_r+0x8a>
	...

08009fe0 <_svfiprintf_r>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	4698      	mov	r8, r3
 8009fe6:	898b      	ldrh	r3, [r1, #12]
 8009fe8:	4607      	mov	r7, r0
 8009fea:	061b      	lsls	r3, r3, #24
 8009fec:	460d      	mov	r5, r1
 8009fee:	4614      	mov	r4, r2
 8009ff0:	b09d      	sub	sp, #116	@ 0x74
 8009ff2:	d510      	bpl.n	800a016 <_svfiprintf_r+0x36>
 8009ff4:	690b      	ldr	r3, [r1, #16]
 8009ff6:	b973      	cbnz	r3, 800a016 <_svfiprintf_r+0x36>
 8009ff8:	2140      	movs	r1, #64	@ 0x40
 8009ffa:	f7ff fb8f 	bl	800971c <_malloc_r>
 8009ffe:	6028      	str	r0, [r5, #0]
 800a000:	6128      	str	r0, [r5, #16]
 800a002:	b930      	cbnz	r0, 800a012 <_svfiprintf_r+0x32>
 800a004:	230c      	movs	r3, #12
 800a006:	603b      	str	r3, [r7, #0]
 800a008:	f04f 30ff 	mov.w	r0, #4294967295
 800a00c:	b01d      	add	sp, #116	@ 0x74
 800a00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a012:	2340      	movs	r3, #64	@ 0x40
 800a014:	616b      	str	r3, [r5, #20]
 800a016:	2300      	movs	r3, #0
 800a018:	9309      	str	r3, [sp, #36]	@ 0x24
 800a01a:	2320      	movs	r3, #32
 800a01c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a020:	2330      	movs	r3, #48	@ 0x30
 800a022:	f04f 0901 	mov.w	r9, #1
 800a026:	f8cd 800c 	str.w	r8, [sp, #12]
 800a02a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a1c4 <_svfiprintf_r+0x1e4>
 800a02e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a032:	4623      	mov	r3, r4
 800a034:	469a      	mov	sl, r3
 800a036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a03a:	b10a      	cbz	r2, 800a040 <_svfiprintf_r+0x60>
 800a03c:	2a25      	cmp	r2, #37	@ 0x25
 800a03e:	d1f9      	bne.n	800a034 <_svfiprintf_r+0x54>
 800a040:	ebba 0b04 	subs.w	fp, sl, r4
 800a044:	d00b      	beq.n	800a05e <_svfiprintf_r+0x7e>
 800a046:	465b      	mov	r3, fp
 800a048:	4622      	mov	r2, r4
 800a04a:	4629      	mov	r1, r5
 800a04c:	4638      	mov	r0, r7
 800a04e:	f7ff ff6b 	bl	8009f28 <__ssputs_r>
 800a052:	3001      	adds	r0, #1
 800a054:	f000 80a7 	beq.w	800a1a6 <_svfiprintf_r+0x1c6>
 800a058:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a05a:	445a      	add	r2, fp
 800a05c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a05e:	f89a 3000 	ldrb.w	r3, [sl]
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 809f 	beq.w	800a1a6 <_svfiprintf_r+0x1c6>
 800a068:	2300      	movs	r3, #0
 800a06a:	f04f 32ff 	mov.w	r2, #4294967295
 800a06e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a072:	f10a 0a01 	add.w	sl, sl, #1
 800a076:	9304      	str	r3, [sp, #16]
 800a078:	9307      	str	r3, [sp, #28]
 800a07a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a07e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a080:	4654      	mov	r4, sl
 800a082:	2205      	movs	r2, #5
 800a084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a088:	484e      	ldr	r0, [pc, #312]	@ (800a1c4 <_svfiprintf_r+0x1e4>)
 800a08a:	f7fe fc5a 	bl	8008942 <memchr>
 800a08e:	9a04      	ldr	r2, [sp, #16]
 800a090:	b9d8      	cbnz	r0, 800a0ca <_svfiprintf_r+0xea>
 800a092:	06d0      	lsls	r0, r2, #27
 800a094:	bf44      	itt	mi
 800a096:	2320      	movmi	r3, #32
 800a098:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a09c:	0711      	lsls	r1, r2, #28
 800a09e:	bf44      	itt	mi
 800a0a0:	232b      	movmi	r3, #43	@ 0x2b
 800a0a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0ac:	d015      	beq.n	800a0da <_svfiprintf_r+0xfa>
 800a0ae:	4654      	mov	r4, sl
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	f04f 0c0a 	mov.w	ip, #10
 800a0b6:	9a07      	ldr	r2, [sp, #28]
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0be:	3b30      	subs	r3, #48	@ 0x30
 800a0c0:	2b09      	cmp	r3, #9
 800a0c2:	d94b      	bls.n	800a15c <_svfiprintf_r+0x17c>
 800a0c4:	b1b0      	cbz	r0, 800a0f4 <_svfiprintf_r+0x114>
 800a0c6:	9207      	str	r2, [sp, #28]
 800a0c8:	e014      	b.n	800a0f4 <_svfiprintf_r+0x114>
 800a0ca:	eba0 0308 	sub.w	r3, r0, r8
 800a0ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	46a2      	mov	sl, r4
 800a0d6:	9304      	str	r3, [sp, #16]
 800a0d8:	e7d2      	b.n	800a080 <_svfiprintf_r+0xa0>
 800a0da:	9b03      	ldr	r3, [sp, #12]
 800a0dc:	1d19      	adds	r1, r3, #4
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	9103      	str	r1, [sp, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	bfbb      	ittet	lt
 800a0e6:	425b      	neglt	r3, r3
 800a0e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a0ec:	9307      	strge	r3, [sp, #28]
 800a0ee:	9307      	strlt	r3, [sp, #28]
 800a0f0:	bfb8      	it	lt
 800a0f2:	9204      	strlt	r2, [sp, #16]
 800a0f4:	7823      	ldrb	r3, [r4, #0]
 800a0f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0f8:	d10a      	bne.n	800a110 <_svfiprintf_r+0x130>
 800a0fa:	7863      	ldrb	r3, [r4, #1]
 800a0fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0fe:	d132      	bne.n	800a166 <_svfiprintf_r+0x186>
 800a100:	9b03      	ldr	r3, [sp, #12]
 800a102:	3402      	adds	r4, #2
 800a104:	1d1a      	adds	r2, r3, #4
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	9203      	str	r2, [sp, #12]
 800a10a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a10e:	9305      	str	r3, [sp, #20]
 800a110:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a1c8 <_svfiprintf_r+0x1e8>
 800a114:	2203      	movs	r2, #3
 800a116:	4650      	mov	r0, sl
 800a118:	7821      	ldrb	r1, [r4, #0]
 800a11a:	f7fe fc12 	bl	8008942 <memchr>
 800a11e:	b138      	cbz	r0, 800a130 <_svfiprintf_r+0x150>
 800a120:	2240      	movs	r2, #64	@ 0x40
 800a122:	9b04      	ldr	r3, [sp, #16]
 800a124:	eba0 000a 	sub.w	r0, r0, sl
 800a128:	4082      	lsls	r2, r0
 800a12a:	4313      	orrs	r3, r2
 800a12c:	3401      	adds	r4, #1
 800a12e:	9304      	str	r3, [sp, #16]
 800a130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a134:	2206      	movs	r2, #6
 800a136:	4825      	ldr	r0, [pc, #148]	@ (800a1cc <_svfiprintf_r+0x1ec>)
 800a138:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a13c:	f7fe fc01 	bl	8008942 <memchr>
 800a140:	2800      	cmp	r0, #0
 800a142:	d036      	beq.n	800a1b2 <_svfiprintf_r+0x1d2>
 800a144:	4b22      	ldr	r3, [pc, #136]	@ (800a1d0 <_svfiprintf_r+0x1f0>)
 800a146:	bb1b      	cbnz	r3, 800a190 <_svfiprintf_r+0x1b0>
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	3307      	adds	r3, #7
 800a14c:	f023 0307 	bic.w	r3, r3, #7
 800a150:	3308      	adds	r3, #8
 800a152:	9303      	str	r3, [sp, #12]
 800a154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a156:	4433      	add	r3, r6
 800a158:	9309      	str	r3, [sp, #36]	@ 0x24
 800a15a:	e76a      	b.n	800a032 <_svfiprintf_r+0x52>
 800a15c:	460c      	mov	r4, r1
 800a15e:	2001      	movs	r0, #1
 800a160:	fb0c 3202 	mla	r2, ip, r2, r3
 800a164:	e7a8      	b.n	800a0b8 <_svfiprintf_r+0xd8>
 800a166:	2300      	movs	r3, #0
 800a168:	f04f 0c0a 	mov.w	ip, #10
 800a16c:	4619      	mov	r1, r3
 800a16e:	3401      	adds	r4, #1
 800a170:	9305      	str	r3, [sp, #20]
 800a172:	4620      	mov	r0, r4
 800a174:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a178:	3a30      	subs	r2, #48	@ 0x30
 800a17a:	2a09      	cmp	r2, #9
 800a17c:	d903      	bls.n	800a186 <_svfiprintf_r+0x1a6>
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0c6      	beq.n	800a110 <_svfiprintf_r+0x130>
 800a182:	9105      	str	r1, [sp, #20]
 800a184:	e7c4      	b.n	800a110 <_svfiprintf_r+0x130>
 800a186:	4604      	mov	r4, r0
 800a188:	2301      	movs	r3, #1
 800a18a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a18e:	e7f0      	b.n	800a172 <_svfiprintf_r+0x192>
 800a190:	ab03      	add	r3, sp, #12
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	462a      	mov	r2, r5
 800a196:	4638      	mov	r0, r7
 800a198:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d4 <_svfiprintf_r+0x1f4>)
 800a19a:	a904      	add	r1, sp, #16
 800a19c:	f7fd fe5c 	bl	8007e58 <_printf_float>
 800a1a0:	1c42      	adds	r2, r0, #1
 800a1a2:	4606      	mov	r6, r0
 800a1a4:	d1d6      	bne.n	800a154 <_svfiprintf_r+0x174>
 800a1a6:	89ab      	ldrh	r3, [r5, #12]
 800a1a8:	065b      	lsls	r3, r3, #25
 800a1aa:	f53f af2d 	bmi.w	800a008 <_svfiprintf_r+0x28>
 800a1ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1b0:	e72c      	b.n	800a00c <_svfiprintf_r+0x2c>
 800a1b2:	ab03      	add	r3, sp, #12
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	462a      	mov	r2, r5
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	4b06      	ldr	r3, [pc, #24]	@ (800a1d4 <_svfiprintf_r+0x1f4>)
 800a1bc:	a904      	add	r1, sp, #16
 800a1be:	f7fe f8e9 	bl	8008394 <_printf_i>
 800a1c2:	e7ed      	b.n	800a1a0 <_svfiprintf_r+0x1c0>
 800a1c4:	0800b8ac 	.word	0x0800b8ac
 800a1c8:	0800b8b2 	.word	0x0800b8b2
 800a1cc:	0800b8b6 	.word	0x0800b8b6
 800a1d0:	08007e59 	.word	0x08007e59
 800a1d4:	08009f29 	.word	0x08009f29

0800a1d8 <__sflush_r>:
 800a1d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	0716      	lsls	r6, r2, #28
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	d454      	bmi.n	800a290 <__sflush_r+0xb8>
 800a1e6:	684b      	ldr	r3, [r1, #4]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	dc02      	bgt.n	800a1f2 <__sflush_r+0x1a>
 800a1ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	dd48      	ble.n	800a284 <__sflush_r+0xac>
 800a1f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1f4:	2e00      	cmp	r6, #0
 800a1f6:	d045      	beq.n	800a284 <__sflush_r+0xac>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a1fe:	682f      	ldr	r7, [r5, #0]
 800a200:	6a21      	ldr	r1, [r4, #32]
 800a202:	602b      	str	r3, [r5, #0]
 800a204:	d030      	beq.n	800a268 <__sflush_r+0x90>
 800a206:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	0759      	lsls	r1, r3, #29
 800a20c:	d505      	bpl.n	800a21a <__sflush_r+0x42>
 800a20e:	6863      	ldr	r3, [r4, #4]
 800a210:	1ad2      	subs	r2, r2, r3
 800a212:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a214:	b10b      	cbz	r3, 800a21a <__sflush_r+0x42>
 800a216:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a218:	1ad2      	subs	r2, r2, r3
 800a21a:	2300      	movs	r3, #0
 800a21c:	4628      	mov	r0, r5
 800a21e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a220:	6a21      	ldr	r1, [r4, #32]
 800a222:	47b0      	blx	r6
 800a224:	1c43      	adds	r3, r0, #1
 800a226:	89a3      	ldrh	r3, [r4, #12]
 800a228:	d106      	bne.n	800a238 <__sflush_r+0x60>
 800a22a:	6829      	ldr	r1, [r5, #0]
 800a22c:	291d      	cmp	r1, #29
 800a22e:	d82b      	bhi.n	800a288 <__sflush_r+0xb0>
 800a230:	4a28      	ldr	r2, [pc, #160]	@ (800a2d4 <__sflush_r+0xfc>)
 800a232:	40ca      	lsrs	r2, r1
 800a234:	07d6      	lsls	r6, r2, #31
 800a236:	d527      	bpl.n	800a288 <__sflush_r+0xb0>
 800a238:	2200      	movs	r2, #0
 800a23a:	6062      	str	r2, [r4, #4]
 800a23c:	6922      	ldr	r2, [r4, #16]
 800a23e:	04d9      	lsls	r1, r3, #19
 800a240:	6022      	str	r2, [r4, #0]
 800a242:	d504      	bpl.n	800a24e <__sflush_r+0x76>
 800a244:	1c42      	adds	r2, r0, #1
 800a246:	d101      	bne.n	800a24c <__sflush_r+0x74>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	b903      	cbnz	r3, 800a24e <__sflush_r+0x76>
 800a24c:	6560      	str	r0, [r4, #84]	@ 0x54
 800a24e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a250:	602f      	str	r7, [r5, #0]
 800a252:	b1b9      	cbz	r1, 800a284 <__sflush_r+0xac>
 800a254:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a258:	4299      	cmp	r1, r3
 800a25a:	d002      	beq.n	800a262 <__sflush_r+0x8a>
 800a25c:	4628      	mov	r0, r5
 800a25e:	f7ff f9eb 	bl	8009638 <_free_r>
 800a262:	2300      	movs	r3, #0
 800a264:	6363      	str	r3, [r4, #52]	@ 0x34
 800a266:	e00d      	b.n	800a284 <__sflush_r+0xac>
 800a268:	2301      	movs	r3, #1
 800a26a:	4628      	mov	r0, r5
 800a26c:	47b0      	blx	r6
 800a26e:	4602      	mov	r2, r0
 800a270:	1c50      	adds	r0, r2, #1
 800a272:	d1c9      	bne.n	800a208 <__sflush_r+0x30>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d0c6      	beq.n	800a208 <__sflush_r+0x30>
 800a27a:	2b1d      	cmp	r3, #29
 800a27c:	d001      	beq.n	800a282 <__sflush_r+0xaa>
 800a27e:	2b16      	cmp	r3, #22
 800a280:	d11d      	bne.n	800a2be <__sflush_r+0xe6>
 800a282:	602f      	str	r7, [r5, #0]
 800a284:	2000      	movs	r0, #0
 800a286:	e021      	b.n	800a2cc <__sflush_r+0xf4>
 800a288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a28c:	b21b      	sxth	r3, r3
 800a28e:	e01a      	b.n	800a2c6 <__sflush_r+0xee>
 800a290:	690f      	ldr	r7, [r1, #16]
 800a292:	2f00      	cmp	r7, #0
 800a294:	d0f6      	beq.n	800a284 <__sflush_r+0xac>
 800a296:	0793      	lsls	r3, r2, #30
 800a298:	bf18      	it	ne
 800a29a:	2300      	movne	r3, #0
 800a29c:	680e      	ldr	r6, [r1, #0]
 800a29e:	bf08      	it	eq
 800a2a0:	694b      	ldreq	r3, [r1, #20]
 800a2a2:	1bf6      	subs	r6, r6, r7
 800a2a4:	600f      	str	r7, [r1, #0]
 800a2a6:	608b      	str	r3, [r1, #8]
 800a2a8:	2e00      	cmp	r6, #0
 800a2aa:	ddeb      	ble.n	800a284 <__sflush_r+0xac>
 800a2ac:	4633      	mov	r3, r6
 800a2ae:	463a      	mov	r2, r7
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	6a21      	ldr	r1, [r4, #32]
 800a2b4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a2b8:	47e0      	blx	ip
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	dc07      	bgt.n	800a2ce <__sflush_r+0xf6>
 800a2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ca:	81a3      	strh	r3, [r4, #12]
 800a2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ce:	4407      	add	r7, r0
 800a2d0:	1a36      	subs	r6, r6, r0
 800a2d2:	e7e9      	b.n	800a2a8 <__sflush_r+0xd0>
 800a2d4:	20400001 	.word	0x20400001

0800a2d8 <_fflush_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	690b      	ldr	r3, [r1, #16]
 800a2dc:	4605      	mov	r5, r0
 800a2de:	460c      	mov	r4, r1
 800a2e0:	b913      	cbnz	r3, 800a2e8 <_fflush_r+0x10>
 800a2e2:	2500      	movs	r5, #0
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	bd38      	pop	{r3, r4, r5, pc}
 800a2e8:	b118      	cbz	r0, 800a2f2 <_fflush_r+0x1a>
 800a2ea:	6a03      	ldr	r3, [r0, #32]
 800a2ec:	b90b      	cbnz	r3, 800a2f2 <_fflush_r+0x1a>
 800a2ee:	f7fe f9fb 	bl	80086e8 <__sinit>
 800a2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d0f3      	beq.n	800a2e2 <_fflush_r+0xa>
 800a2fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a2fc:	07d0      	lsls	r0, r2, #31
 800a2fe:	d404      	bmi.n	800a30a <_fflush_r+0x32>
 800a300:	0599      	lsls	r1, r3, #22
 800a302:	d402      	bmi.n	800a30a <_fflush_r+0x32>
 800a304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a306:	f7fe fb1a 	bl	800893e <__retarget_lock_acquire_recursive>
 800a30a:	4628      	mov	r0, r5
 800a30c:	4621      	mov	r1, r4
 800a30e:	f7ff ff63 	bl	800a1d8 <__sflush_r>
 800a312:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a314:	4605      	mov	r5, r0
 800a316:	07da      	lsls	r2, r3, #31
 800a318:	d4e4      	bmi.n	800a2e4 <_fflush_r+0xc>
 800a31a:	89a3      	ldrh	r3, [r4, #12]
 800a31c:	059b      	lsls	r3, r3, #22
 800a31e:	d4e1      	bmi.n	800a2e4 <_fflush_r+0xc>
 800a320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a322:	f7fe fb0d 	bl	8008940 <__retarget_lock_release_recursive>
 800a326:	e7dd      	b.n	800a2e4 <_fflush_r+0xc>

0800a328 <memmove>:
 800a328:	4288      	cmp	r0, r1
 800a32a:	b510      	push	{r4, lr}
 800a32c:	eb01 0402 	add.w	r4, r1, r2
 800a330:	d902      	bls.n	800a338 <memmove+0x10>
 800a332:	4284      	cmp	r4, r0
 800a334:	4623      	mov	r3, r4
 800a336:	d807      	bhi.n	800a348 <memmove+0x20>
 800a338:	1e43      	subs	r3, r0, #1
 800a33a:	42a1      	cmp	r1, r4
 800a33c:	d008      	beq.n	800a350 <memmove+0x28>
 800a33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a342:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a346:	e7f8      	b.n	800a33a <memmove+0x12>
 800a348:	4601      	mov	r1, r0
 800a34a:	4402      	add	r2, r0
 800a34c:	428a      	cmp	r2, r1
 800a34e:	d100      	bne.n	800a352 <memmove+0x2a>
 800a350:	bd10      	pop	{r4, pc}
 800a352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a35a:	e7f7      	b.n	800a34c <memmove+0x24>

0800a35c <_sbrk_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	2300      	movs	r3, #0
 800a360:	4d05      	ldr	r5, [pc, #20]	@ (800a378 <_sbrk_r+0x1c>)
 800a362:	4604      	mov	r4, r0
 800a364:	4608      	mov	r0, r1
 800a366:	602b      	str	r3, [r5, #0]
 800a368:	f7f9 ff1a 	bl	80041a0 <_sbrk>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d102      	bne.n	800a376 <_sbrk_r+0x1a>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	b103      	cbz	r3, 800a376 <_sbrk_r+0x1a>
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	2000068c 	.word	0x2000068c

0800a37c <__assert_func>:
 800a37c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a37e:	4614      	mov	r4, r2
 800a380:	461a      	mov	r2, r3
 800a382:	4b09      	ldr	r3, [pc, #36]	@ (800a3a8 <__assert_func+0x2c>)
 800a384:	4605      	mov	r5, r0
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68d8      	ldr	r0, [r3, #12]
 800a38a:	b14c      	cbz	r4, 800a3a0 <__assert_func+0x24>
 800a38c:	4b07      	ldr	r3, [pc, #28]	@ (800a3ac <__assert_func+0x30>)
 800a38e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a392:	9100      	str	r1, [sp, #0]
 800a394:	462b      	mov	r3, r5
 800a396:	4906      	ldr	r1, [pc, #24]	@ (800a3b0 <__assert_func+0x34>)
 800a398:	f000 f870 	bl	800a47c <fiprintf>
 800a39c:	f000 f880 	bl	800a4a0 <abort>
 800a3a0:	4b04      	ldr	r3, [pc, #16]	@ (800a3b4 <__assert_func+0x38>)
 800a3a2:	461c      	mov	r4, r3
 800a3a4:	e7f3      	b.n	800a38e <__assert_func+0x12>
 800a3a6:	bf00      	nop
 800a3a8:	20000018 	.word	0x20000018
 800a3ac:	0800b8c7 	.word	0x0800b8c7
 800a3b0:	0800b8d4 	.word	0x0800b8d4
 800a3b4:	0800b902 	.word	0x0800b902

0800a3b8 <_calloc_r>:
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	fba1 5402 	umull	r5, r4, r1, r2
 800a3be:	b934      	cbnz	r4, 800a3ce <_calloc_r+0x16>
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	f7ff f9ab 	bl	800971c <_malloc_r>
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	b928      	cbnz	r0, 800a3d6 <_calloc_r+0x1e>
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	bd70      	pop	{r4, r5, r6, pc}
 800a3ce:	220c      	movs	r2, #12
 800a3d0:	2600      	movs	r6, #0
 800a3d2:	6002      	str	r2, [r0, #0]
 800a3d4:	e7f9      	b.n	800a3ca <_calloc_r+0x12>
 800a3d6:	462a      	mov	r2, r5
 800a3d8:	4621      	mov	r1, r4
 800a3da:	f7fe fa20 	bl	800881e <memset>
 800a3de:	e7f4      	b.n	800a3ca <_calloc_r+0x12>

0800a3e0 <__ascii_mbtowc>:
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	b901      	cbnz	r1, 800a3e6 <__ascii_mbtowc+0x6>
 800a3e4:	a901      	add	r1, sp, #4
 800a3e6:	b142      	cbz	r2, 800a3fa <__ascii_mbtowc+0x1a>
 800a3e8:	b14b      	cbz	r3, 800a3fe <__ascii_mbtowc+0x1e>
 800a3ea:	7813      	ldrb	r3, [r2, #0]
 800a3ec:	600b      	str	r3, [r1, #0]
 800a3ee:	7812      	ldrb	r2, [r2, #0]
 800a3f0:	1e10      	subs	r0, r2, #0
 800a3f2:	bf18      	it	ne
 800a3f4:	2001      	movne	r0, #1
 800a3f6:	b002      	add	sp, #8
 800a3f8:	4770      	bx	lr
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	e7fb      	b.n	800a3f6 <__ascii_mbtowc+0x16>
 800a3fe:	f06f 0001 	mvn.w	r0, #1
 800a402:	e7f8      	b.n	800a3f6 <__ascii_mbtowc+0x16>

0800a404 <_realloc_r>:
 800a404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a408:	4607      	mov	r7, r0
 800a40a:	4614      	mov	r4, r2
 800a40c:	460d      	mov	r5, r1
 800a40e:	b921      	cbnz	r1, 800a41a <_realloc_r+0x16>
 800a410:	4611      	mov	r1, r2
 800a412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a416:	f7ff b981 	b.w	800971c <_malloc_r>
 800a41a:	b92a      	cbnz	r2, 800a428 <_realloc_r+0x24>
 800a41c:	f7ff f90c 	bl	8009638 <_free_r>
 800a420:	4625      	mov	r5, r4
 800a422:	4628      	mov	r0, r5
 800a424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a428:	f000 f841 	bl	800a4ae <_malloc_usable_size_r>
 800a42c:	4284      	cmp	r4, r0
 800a42e:	4606      	mov	r6, r0
 800a430:	d802      	bhi.n	800a438 <_realloc_r+0x34>
 800a432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a436:	d8f4      	bhi.n	800a422 <_realloc_r+0x1e>
 800a438:	4621      	mov	r1, r4
 800a43a:	4638      	mov	r0, r7
 800a43c:	f7ff f96e 	bl	800971c <_malloc_r>
 800a440:	4680      	mov	r8, r0
 800a442:	b908      	cbnz	r0, 800a448 <_realloc_r+0x44>
 800a444:	4645      	mov	r5, r8
 800a446:	e7ec      	b.n	800a422 <_realloc_r+0x1e>
 800a448:	42b4      	cmp	r4, r6
 800a44a:	4622      	mov	r2, r4
 800a44c:	4629      	mov	r1, r5
 800a44e:	bf28      	it	cs
 800a450:	4632      	movcs	r2, r6
 800a452:	f7fe fa84 	bl	800895e <memcpy>
 800a456:	4629      	mov	r1, r5
 800a458:	4638      	mov	r0, r7
 800a45a:	f7ff f8ed 	bl	8009638 <_free_r>
 800a45e:	e7f1      	b.n	800a444 <_realloc_r+0x40>

0800a460 <__ascii_wctomb>:
 800a460:	4603      	mov	r3, r0
 800a462:	4608      	mov	r0, r1
 800a464:	b141      	cbz	r1, 800a478 <__ascii_wctomb+0x18>
 800a466:	2aff      	cmp	r2, #255	@ 0xff
 800a468:	d904      	bls.n	800a474 <__ascii_wctomb+0x14>
 800a46a:	228a      	movs	r2, #138	@ 0x8a
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	601a      	str	r2, [r3, #0]
 800a472:	4770      	bx	lr
 800a474:	2001      	movs	r0, #1
 800a476:	700a      	strb	r2, [r1, #0]
 800a478:	4770      	bx	lr
	...

0800a47c <fiprintf>:
 800a47c:	b40e      	push	{r1, r2, r3}
 800a47e:	b503      	push	{r0, r1, lr}
 800a480:	4601      	mov	r1, r0
 800a482:	ab03      	add	r3, sp, #12
 800a484:	4805      	ldr	r0, [pc, #20]	@ (800a49c <fiprintf+0x20>)
 800a486:	f853 2b04 	ldr.w	r2, [r3], #4
 800a48a:	6800      	ldr	r0, [r0, #0]
 800a48c:	9301      	str	r3, [sp, #4]
 800a48e:	f000 f83d 	bl	800a50c <_vfiprintf_r>
 800a492:	b002      	add	sp, #8
 800a494:	f85d eb04 	ldr.w	lr, [sp], #4
 800a498:	b003      	add	sp, #12
 800a49a:	4770      	bx	lr
 800a49c:	20000018 	.word	0x20000018

0800a4a0 <abort>:
 800a4a0:	2006      	movs	r0, #6
 800a4a2:	b508      	push	{r3, lr}
 800a4a4:	f000 fa06 	bl	800a8b4 <raise>
 800a4a8:	2001      	movs	r0, #1
 800a4aa:	f7f9 fe04 	bl	80040b6 <_exit>

0800a4ae <_malloc_usable_size_r>:
 800a4ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4b2:	1f18      	subs	r0, r3, #4
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	bfbc      	itt	lt
 800a4b8:	580b      	ldrlt	r3, [r1, r0]
 800a4ba:	18c0      	addlt	r0, r0, r3
 800a4bc:	4770      	bx	lr

0800a4be <__sfputc_r>:
 800a4be:	6893      	ldr	r3, [r2, #8]
 800a4c0:	b410      	push	{r4}
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	6093      	str	r3, [r2, #8]
 800a4c8:	da07      	bge.n	800a4da <__sfputc_r+0x1c>
 800a4ca:	6994      	ldr	r4, [r2, #24]
 800a4cc:	42a3      	cmp	r3, r4
 800a4ce:	db01      	blt.n	800a4d4 <__sfputc_r+0x16>
 800a4d0:	290a      	cmp	r1, #10
 800a4d2:	d102      	bne.n	800a4da <__sfputc_r+0x1c>
 800a4d4:	bc10      	pop	{r4}
 800a4d6:	f000 b931 	b.w	800a73c <__swbuf_r>
 800a4da:	6813      	ldr	r3, [r2, #0]
 800a4dc:	1c58      	adds	r0, r3, #1
 800a4de:	6010      	str	r0, [r2, #0]
 800a4e0:	7019      	strb	r1, [r3, #0]
 800a4e2:	4608      	mov	r0, r1
 800a4e4:	bc10      	pop	{r4}
 800a4e6:	4770      	bx	lr

0800a4e8 <__sfputs_r>:
 800a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	460f      	mov	r7, r1
 800a4ee:	4614      	mov	r4, r2
 800a4f0:	18d5      	adds	r5, r2, r3
 800a4f2:	42ac      	cmp	r4, r5
 800a4f4:	d101      	bne.n	800a4fa <__sfputs_r+0x12>
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	e007      	b.n	800a50a <__sfputs_r+0x22>
 800a4fa:	463a      	mov	r2, r7
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a502:	f7ff ffdc 	bl	800a4be <__sfputc_r>
 800a506:	1c43      	adds	r3, r0, #1
 800a508:	d1f3      	bne.n	800a4f2 <__sfputs_r+0xa>
 800a50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a50c <_vfiprintf_r>:
 800a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a510:	460d      	mov	r5, r1
 800a512:	4614      	mov	r4, r2
 800a514:	4698      	mov	r8, r3
 800a516:	4606      	mov	r6, r0
 800a518:	b09d      	sub	sp, #116	@ 0x74
 800a51a:	b118      	cbz	r0, 800a524 <_vfiprintf_r+0x18>
 800a51c:	6a03      	ldr	r3, [r0, #32]
 800a51e:	b90b      	cbnz	r3, 800a524 <_vfiprintf_r+0x18>
 800a520:	f7fe f8e2 	bl	80086e8 <__sinit>
 800a524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a526:	07d9      	lsls	r1, r3, #31
 800a528:	d405      	bmi.n	800a536 <_vfiprintf_r+0x2a>
 800a52a:	89ab      	ldrh	r3, [r5, #12]
 800a52c:	059a      	lsls	r2, r3, #22
 800a52e:	d402      	bmi.n	800a536 <_vfiprintf_r+0x2a>
 800a530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a532:	f7fe fa04 	bl	800893e <__retarget_lock_acquire_recursive>
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	071b      	lsls	r3, r3, #28
 800a53a:	d501      	bpl.n	800a540 <_vfiprintf_r+0x34>
 800a53c:	692b      	ldr	r3, [r5, #16]
 800a53e:	b99b      	cbnz	r3, 800a568 <_vfiprintf_r+0x5c>
 800a540:	4629      	mov	r1, r5
 800a542:	4630      	mov	r0, r6
 800a544:	f000 f938 	bl	800a7b8 <__swsetup_r>
 800a548:	b170      	cbz	r0, 800a568 <_vfiprintf_r+0x5c>
 800a54a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a54c:	07dc      	lsls	r4, r3, #31
 800a54e:	d504      	bpl.n	800a55a <_vfiprintf_r+0x4e>
 800a550:	f04f 30ff 	mov.w	r0, #4294967295
 800a554:	b01d      	add	sp, #116	@ 0x74
 800a556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55a:	89ab      	ldrh	r3, [r5, #12]
 800a55c:	0598      	lsls	r0, r3, #22
 800a55e:	d4f7      	bmi.n	800a550 <_vfiprintf_r+0x44>
 800a560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a562:	f7fe f9ed 	bl	8008940 <__retarget_lock_release_recursive>
 800a566:	e7f3      	b.n	800a550 <_vfiprintf_r+0x44>
 800a568:	2300      	movs	r3, #0
 800a56a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a56c:	2320      	movs	r3, #32
 800a56e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a572:	2330      	movs	r3, #48	@ 0x30
 800a574:	f04f 0901 	mov.w	r9, #1
 800a578:	f8cd 800c 	str.w	r8, [sp, #12]
 800a57c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a728 <_vfiprintf_r+0x21c>
 800a580:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a584:	4623      	mov	r3, r4
 800a586:	469a      	mov	sl, r3
 800a588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a58c:	b10a      	cbz	r2, 800a592 <_vfiprintf_r+0x86>
 800a58e:	2a25      	cmp	r2, #37	@ 0x25
 800a590:	d1f9      	bne.n	800a586 <_vfiprintf_r+0x7a>
 800a592:	ebba 0b04 	subs.w	fp, sl, r4
 800a596:	d00b      	beq.n	800a5b0 <_vfiprintf_r+0xa4>
 800a598:	465b      	mov	r3, fp
 800a59a:	4622      	mov	r2, r4
 800a59c:	4629      	mov	r1, r5
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f7ff ffa2 	bl	800a4e8 <__sfputs_r>
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	f000 80a7 	beq.w	800a6f8 <_vfiprintf_r+0x1ec>
 800a5aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5ac:	445a      	add	r2, fp
 800a5ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 809f 	beq.w	800a6f8 <_vfiprintf_r+0x1ec>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5c4:	f10a 0a01 	add.w	sl, sl, #1
 800a5c8:	9304      	str	r3, [sp, #16]
 800a5ca:	9307      	str	r3, [sp, #28]
 800a5cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5d2:	4654      	mov	r4, sl
 800a5d4:	2205      	movs	r2, #5
 800a5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5da:	4853      	ldr	r0, [pc, #332]	@ (800a728 <_vfiprintf_r+0x21c>)
 800a5dc:	f7fe f9b1 	bl	8008942 <memchr>
 800a5e0:	9a04      	ldr	r2, [sp, #16]
 800a5e2:	b9d8      	cbnz	r0, 800a61c <_vfiprintf_r+0x110>
 800a5e4:	06d1      	lsls	r1, r2, #27
 800a5e6:	bf44      	itt	mi
 800a5e8:	2320      	movmi	r3, #32
 800a5ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5ee:	0713      	lsls	r3, r2, #28
 800a5f0:	bf44      	itt	mi
 800a5f2:	232b      	movmi	r3, #43	@ 0x2b
 800a5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5fe:	d015      	beq.n	800a62c <_vfiprintf_r+0x120>
 800a600:	4654      	mov	r4, sl
 800a602:	2000      	movs	r0, #0
 800a604:	f04f 0c0a 	mov.w	ip, #10
 800a608:	9a07      	ldr	r2, [sp, #28]
 800a60a:	4621      	mov	r1, r4
 800a60c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a610:	3b30      	subs	r3, #48	@ 0x30
 800a612:	2b09      	cmp	r3, #9
 800a614:	d94b      	bls.n	800a6ae <_vfiprintf_r+0x1a2>
 800a616:	b1b0      	cbz	r0, 800a646 <_vfiprintf_r+0x13a>
 800a618:	9207      	str	r2, [sp, #28]
 800a61a:	e014      	b.n	800a646 <_vfiprintf_r+0x13a>
 800a61c:	eba0 0308 	sub.w	r3, r0, r8
 800a620:	fa09 f303 	lsl.w	r3, r9, r3
 800a624:	4313      	orrs	r3, r2
 800a626:	46a2      	mov	sl, r4
 800a628:	9304      	str	r3, [sp, #16]
 800a62a:	e7d2      	b.n	800a5d2 <_vfiprintf_r+0xc6>
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	1d19      	adds	r1, r3, #4
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	9103      	str	r1, [sp, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	bfbb      	ittet	lt
 800a638:	425b      	neglt	r3, r3
 800a63a:	f042 0202 	orrlt.w	r2, r2, #2
 800a63e:	9307      	strge	r3, [sp, #28]
 800a640:	9307      	strlt	r3, [sp, #28]
 800a642:	bfb8      	it	lt
 800a644:	9204      	strlt	r2, [sp, #16]
 800a646:	7823      	ldrb	r3, [r4, #0]
 800a648:	2b2e      	cmp	r3, #46	@ 0x2e
 800a64a:	d10a      	bne.n	800a662 <_vfiprintf_r+0x156>
 800a64c:	7863      	ldrb	r3, [r4, #1]
 800a64e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a650:	d132      	bne.n	800a6b8 <_vfiprintf_r+0x1ac>
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	3402      	adds	r4, #2
 800a656:	1d1a      	adds	r2, r3, #4
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	9203      	str	r2, [sp, #12]
 800a65c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a660:	9305      	str	r3, [sp, #20]
 800a662:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a72c <_vfiprintf_r+0x220>
 800a666:	2203      	movs	r2, #3
 800a668:	4650      	mov	r0, sl
 800a66a:	7821      	ldrb	r1, [r4, #0]
 800a66c:	f7fe f969 	bl	8008942 <memchr>
 800a670:	b138      	cbz	r0, 800a682 <_vfiprintf_r+0x176>
 800a672:	2240      	movs	r2, #64	@ 0x40
 800a674:	9b04      	ldr	r3, [sp, #16]
 800a676:	eba0 000a 	sub.w	r0, r0, sl
 800a67a:	4082      	lsls	r2, r0
 800a67c:	4313      	orrs	r3, r2
 800a67e:	3401      	adds	r4, #1
 800a680:	9304      	str	r3, [sp, #16]
 800a682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a686:	2206      	movs	r2, #6
 800a688:	4829      	ldr	r0, [pc, #164]	@ (800a730 <_vfiprintf_r+0x224>)
 800a68a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a68e:	f7fe f958 	bl	8008942 <memchr>
 800a692:	2800      	cmp	r0, #0
 800a694:	d03f      	beq.n	800a716 <_vfiprintf_r+0x20a>
 800a696:	4b27      	ldr	r3, [pc, #156]	@ (800a734 <_vfiprintf_r+0x228>)
 800a698:	bb1b      	cbnz	r3, 800a6e2 <_vfiprintf_r+0x1d6>
 800a69a:	9b03      	ldr	r3, [sp, #12]
 800a69c:	3307      	adds	r3, #7
 800a69e:	f023 0307 	bic.w	r3, r3, #7
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	9303      	str	r3, [sp, #12]
 800a6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a8:	443b      	add	r3, r7
 800a6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ac:	e76a      	b.n	800a584 <_vfiprintf_r+0x78>
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	2001      	movs	r0, #1
 800a6b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6b6:	e7a8      	b.n	800a60a <_vfiprintf_r+0xfe>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f04f 0c0a 	mov.w	ip, #10
 800a6be:	4619      	mov	r1, r3
 800a6c0:	3401      	adds	r4, #1
 800a6c2:	9305      	str	r3, [sp, #20]
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6ca:	3a30      	subs	r2, #48	@ 0x30
 800a6cc:	2a09      	cmp	r2, #9
 800a6ce:	d903      	bls.n	800a6d8 <_vfiprintf_r+0x1cc>
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d0c6      	beq.n	800a662 <_vfiprintf_r+0x156>
 800a6d4:	9105      	str	r1, [sp, #20]
 800a6d6:	e7c4      	b.n	800a662 <_vfiprintf_r+0x156>
 800a6d8:	4604      	mov	r4, r0
 800a6da:	2301      	movs	r3, #1
 800a6dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6e0:	e7f0      	b.n	800a6c4 <_vfiprintf_r+0x1b8>
 800a6e2:	ab03      	add	r3, sp, #12
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	462a      	mov	r2, r5
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	4b13      	ldr	r3, [pc, #76]	@ (800a738 <_vfiprintf_r+0x22c>)
 800a6ec:	a904      	add	r1, sp, #16
 800a6ee:	f7fd fbb3 	bl	8007e58 <_printf_float>
 800a6f2:	4607      	mov	r7, r0
 800a6f4:	1c78      	adds	r0, r7, #1
 800a6f6:	d1d6      	bne.n	800a6a6 <_vfiprintf_r+0x19a>
 800a6f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6fa:	07d9      	lsls	r1, r3, #31
 800a6fc:	d405      	bmi.n	800a70a <_vfiprintf_r+0x1fe>
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	059a      	lsls	r2, r3, #22
 800a702:	d402      	bmi.n	800a70a <_vfiprintf_r+0x1fe>
 800a704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a706:	f7fe f91b 	bl	8008940 <__retarget_lock_release_recursive>
 800a70a:	89ab      	ldrh	r3, [r5, #12]
 800a70c:	065b      	lsls	r3, r3, #25
 800a70e:	f53f af1f 	bmi.w	800a550 <_vfiprintf_r+0x44>
 800a712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a714:	e71e      	b.n	800a554 <_vfiprintf_r+0x48>
 800a716:	ab03      	add	r3, sp, #12
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	462a      	mov	r2, r5
 800a71c:	4630      	mov	r0, r6
 800a71e:	4b06      	ldr	r3, [pc, #24]	@ (800a738 <_vfiprintf_r+0x22c>)
 800a720:	a904      	add	r1, sp, #16
 800a722:	f7fd fe37 	bl	8008394 <_printf_i>
 800a726:	e7e4      	b.n	800a6f2 <_vfiprintf_r+0x1e6>
 800a728:	0800b8ac 	.word	0x0800b8ac
 800a72c:	0800b8b2 	.word	0x0800b8b2
 800a730:	0800b8b6 	.word	0x0800b8b6
 800a734:	08007e59 	.word	0x08007e59
 800a738:	0800a4e9 	.word	0x0800a4e9

0800a73c <__swbuf_r>:
 800a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73e:	460e      	mov	r6, r1
 800a740:	4614      	mov	r4, r2
 800a742:	4605      	mov	r5, r0
 800a744:	b118      	cbz	r0, 800a74e <__swbuf_r+0x12>
 800a746:	6a03      	ldr	r3, [r0, #32]
 800a748:	b90b      	cbnz	r3, 800a74e <__swbuf_r+0x12>
 800a74a:	f7fd ffcd 	bl	80086e8 <__sinit>
 800a74e:	69a3      	ldr	r3, [r4, #24]
 800a750:	60a3      	str	r3, [r4, #8]
 800a752:	89a3      	ldrh	r3, [r4, #12]
 800a754:	071a      	lsls	r2, r3, #28
 800a756:	d501      	bpl.n	800a75c <__swbuf_r+0x20>
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	b943      	cbnz	r3, 800a76e <__swbuf_r+0x32>
 800a75c:	4621      	mov	r1, r4
 800a75e:	4628      	mov	r0, r5
 800a760:	f000 f82a 	bl	800a7b8 <__swsetup_r>
 800a764:	b118      	cbz	r0, 800a76e <__swbuf_r+0x32>
 800a766:	f04f 37ff 	mov.w	r7, #4294967295
 800a76a:	4638      	mov	r0, r7
 800a76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	6922      	ldr	r2, [r4, #16]
 800a772:	b2f6      	uxtb	r6, r6
 800a774:	1a98      	subs	r0, r3, r2
 800a776:	6963      	ldr	r3, [r4, #20]
 800a778:	4637      	mov	r7, r6
 800a77a:	4283      	cmp	r3, r0
 800a77c:	dc05      	bgt.n	800a78a <__swbuf_r+0x4e>
 800a77e:	4621      	mov	r1, r4
 800a780:	4628      	mov	r0, r5
 800a782:	f7ff fda9 	bl	800a2d8 <_fflush_r>
 800a786:	2800      	cmp	r0, #0
 800a788:	d1ed      	bne.n	800a766 <__swbuf_r+0x2a>
 800a78a:	68a3      	ldr	r3, [r4, #8]
 800a78c:	3b01      	subs	r3, #1
 800a78e:	60a3      	str	r3, [r4, #8]
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	1c5a      	adds	r2, r3, #1
 800a794:	6022      	str	r2, [r4, #0]
 800a796:	701e      	strb	r6, [r3, #0]
 800a798:	6962      	ldr	r2, [r4, #20]
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d004      	beq.n	800a7aa <__swbuf_r+0x6e>
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	07db      	lsls	r3, r3, #31
 800a7a4:	d5e1      	bpl.n	800a76a <__swbuf_r+0x2e>
 800a7a6:	2e0a      	cmp	r6, #10
 800a7a8:	d1df      	bne.n	800a76a <__swbuf_r+0x2e>
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	f7ff fd93 	bl	800a2d8 <_fflush_r>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d0d9      	beq.n	800a76a <__swbuf_r+0x2e>
 800a7b6:	e7d6      	b.n	800a766 <__swbuf_r+0x2a>

0800a7b8 <__swsetup_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4b29      	ldr	r3, [pc, #164]	@ (800a860 <__swsetup_r+0xa8>)
 800a7bc:	4605      	mov	r5, r0
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	b118      	cbz	r0, 800a7cc <__swsetup_r+0x14>
 800a7c4:	6a03      	ldr	r3, [r0, #32]
 800a7c6:	b90b      	cbnz	r3, 800a7cc <__swsetup_r+0x14>
 800a7c8:	f7fd ff8e 	bl	80086e8 <__sinit>
 800a7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7d0:	0719      	lsls	r1, r3, #28
 800a7d2:	d422      	bmi.n	800a81a <__swsetup_r+0x62>
 800a7d4:	06da      	lsls	r2, r3, #27
 800a7d6:	d407      	bmi.n	800a7e8 <__swsetup_r+0x30>
 800a7d8:	2209      	movs	r2, #9
 800a7da:	602a      	str	r2, [r5, #0]
 800a7dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e4:	81a3      	strh	r3, [r4, #12]
 800a7e6:	e033      	b.n	800a850 <__swsetup_r+0x98>
 800a7e8:	0758      	lsls	r0, r3, #29
 800a7ea:	d512      	bpl.n	800a812 <__swsetup_r+0x5a>
 800a7ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7ee:	b141      	cbz	r1, 800a802 <__swsetup_r+0x4a>
 800a7f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7f4:	4299      	cmp	r1, r3
 800a7f6:	d002      	beq.n	800a7fe <__swsetup_r+0x46>
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	f7fe ff1d 	bl	8009638 <_free_r>
 800a7fe:	2300      	movs	r3, #0
 800a800:	6363      	str	r3, [r4, #52]	@ 0x34
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	2300      	movs	r3, #0
 800a80c:	6063      	str	r3, [r4, #4]
 800a80e:	6923      	ldr	r3, [r4, #16]
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	f043 0308 	orr.w	r3, r3, #8
 800a818:	81a3      	strh	r3, [r4, #12]
 800a81a:	6923      	ldr	r3, [r4, #16]
 800a81c:	b94b      	cbnz	r3, 800a832 <__swsetup_r+0x7a>
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a828:	d003      	beq.n	800a832 <__swsetup_r+0x7a>
 800a82a:	4621      	mov	r1, r4
 800a82c:	4628      	mov	r0, r5
 800a82e:	f000 f882 	bl	800a936 <__smakebuf_r>
 800a832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a836:	f013 0201 	ands.w	r2, r3, #1
 800a83a:	d00a      	beq.n	800a852 <__swsetup_r+0x9a>
 800a83c:	2200      	movs	r2, #0
 800a83e:	60a2      	str	r2, [r4, #8]
 800a840:	6962      	ldr	r2, [r4, #20]
 800a842:	4252      	negs	r2, r2
 800a844:	61a2      	str	r2, [r4, #24]
 800a846:	6922      	ldr	r2, [r4, #16]
 800a848:	b942      	cbnz	r2, 800a85c <__swsetup_r+0xa4>
 800a84a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a84e:	d1c5      	bne.n	800a7dc <__swsetup_r+0x24>
 800a850:	bd38      	pop	{r3, r4, r5, pc}
 800a852:	0799      	lsls	r1, r3, #30
 800a854:	bf58      	it	pl
 800a856:	6962      	ldrpl	r2, [r4, #20]
 800a858:	60a2      	str	r2, [r4, #8]
 800a85a:	e7f4      	b.n	800a846 <__swsetup_r+0x8e>
 800a85c:	2000      	movs	r0, #0
 800a85e:	e7f7      	b.n	800a850 <__swsetup_r+0x98>
 800a860:	20000018 	.word	0x20000018

0800a864 <_raise_r>:
 800a864:	291f      	cmp	r1, #31
 800a866:	b538      	push	{r3, r4, r5, lr}
 800a868:	4605      	mov	r5, r0
 800a86a:	460c      	mov	r4, r1
 800a86c:	d904      	bls.n	800a878 <_raise_r+0x14>
 800a86e:	2316      	movs	r3, #22
 800a870:	6003      	str	r3, [r0, #0]
 800a872:	f04f 30ff 	mov.w	r0, #4294967295
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a87a:	b112      	cbz	r2, 800a882 <_raise_r+0x1e>
 800a87c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a880:	b94b      	cbnz	r3, 800a896 <_raise_r+0x32>
 800a882:	4628      	mov	r0, r5
 800a884:	f000 f830 	bl	800a8e8 <_getpid_r>
 800a888:	4622      	mov	r2, r4
 800a88a:	4601      	mov	r1, r0
 800a88c:	4628      	mov	r0, r5
 800a88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a892:	f000 b817 	b.w	800a8c4 <_kill_r>
 800a896:	2b01      	cmp	r3, #1
 800a898:	d00a      	beq.n	800a8b0 <_raise_r+0x4c>
 800a89a:	1c59      	adds	r1, r3, #1
 800a89c:	d103      	bne.n	800a8a6 <_raise_r+0x42>
 800a89e:	2316      	movs	r3, #22
 800a8a0:	6003      	str	r3, [r0, #0]
 800a8a2:	2001      	movs	r0, #1
 800a8a4:	e7e7      	b.n	800a876 <_raise_r+0x12>
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a8ae:	4798      	blx	r3
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	e7e0      	b.n	800a876 <_raise_r+0x12>

0800a8b4 <raise>:
 800a8b4:	4b02      	ldr	r3, [pc, #8]	@ (800a8c0 <raise+0xc>)
 800a8b6:	4601      	mov	r1, r0
 800a8b8:	6818      	ldr	r0, [r3, #0]
 800a8ba:	f7ff bfd3 	b.w	800a864 <_raise_r>
 800a8be:	bf00      	nop
 800a8c0:	20000018 	.word	0x20000018

0800a8c4 <_kill_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	4d06      	ldr	r5, [pc, #24]	@ (800a8e4 <_kill_r+0x20>)
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	602b      	str	r3, [r5, #0]
 800a8d2:	f7f9 fbe0 	bl	8004096 <_kill>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	d102      	bne.n	800a8e0 <_kill_r+0x1c>
 800a8da:	682b      	ldr	r3, [r5, #0]
 800a8dc:	b103      	cbz	r3, 800a8e0 <_kill_r+0x1c>
 800a8de:	6023      	str	r3, [r4, #0]
 800a8e0:	bd38      	pop	{r3, r4, r5, pc}
 800a8e2:	bf00      	nop
 800a8e4:	2000068c 	.word	0x2000068c

0800a8e8 <_getpid_r>:
 800a8e8:	f7f9 bbce 	b.w	8004088 <_getpid>

0800a8ec <__swhatbuf_r>:
 800a8ec:	b570      	push	{r4, r5, r6, lr}
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f4:	4615      	mov	r5, r2
 800a8f6:	2900      	cmp	r1, #0
 800a8f8:	461e      	mov	r6, r3
 800a8fa:	b096      	sub	sp, #88	@ 0x58
 800a8fc:	da0c      	bge.n	800a918 <__swhatbuf_r+0x2c>
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	2100      	movs	r1, #0
 800a902:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a906:	bf14      	ite	ne
 800a908:	2340      	movne	r3, #64	@ 0x40
 800a90a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a90e:	2000      	movs	r0, #0
 800a910:	6031      	str	r1, [r6, #0]
 800a912:	602b      	str	r3, [r5, #0]
 800a914:	b016      	add	sp, #88	@ 0x58
 800a916:	bd70      	pop	{r4, r5, r6, pc}
 800a918:	466a      	mov	r2, sp
 800a91a:	f000 f849 	bl	800a9b0 <_fstat_r>
 800a91e:	2800      	cmp	r0, #0
 800a920:	dbed      	blt.n	800a8fe <__swhatbuf_r+0x12>
 800a922:	9901      	ldr	r1, [sp, #4]
 800a924:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a928:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a92c:	4259      	negs	r1, r3
 800a92e:	4159      	adcs	r1, r3
 800a930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a934:	e7eb      	b.n	800a90e <__swhatbuf_r+0x22>

0800a936 <__smakebuf_r>:
 800a936:	898b      	ldrh	r3, [r1, #12]
 800a938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a93a:	079d      	lsls	r5, r3, #30
 800a93c:	4606      	mov	r6, r0
 800a93e:	460c      	mov	r4, r1
 800a940:	d507      	bpl.n	800a952 <__smakebuf_r+0x1c>
 800a942:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a946:	6023      	str	r3, [r4, #0]
 800a948:	6123      	str	r3, [r4, #16]
 800a94a:	2301      	movs	r3, #1
 800a94c:	6163      	str	r3, [r4, #20]
 800a94e:	b003      	add	sp, #12
 800a950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a952:	466a      	mov	r2, sp
 800a954:	ab01      	add	r3, sp, #4
 800a956:	f7ff ffc9 	bl	800a8ec <__swhatbuf_r>
 800a95a:	9f00      	ldr	r7, [sp, #0]
 800a95c:	4605      	mov	r5, r0
 800a95e:	4639      	mov	r1, r7
 800a960:	4630      	mov	r0, r6
 800a962:	f7fe fedb 	bl	800971c <_malloc_r>
 800a966:	b948      	cbnz	r0, 800a97c <__smakebuf_r+0x46>
 800a968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a96c:	059a      	lsls	r2, r3, #22
 800a96e:	d4ee      	bmi.n	800a94e <__smakebuf_r+0x18>
 800a970:	f023 0303 	bic.w	r3, r3, #3
 800a974:	f043 0302 	orr.w	r3, r3, #2
 800a978:	81a3      	strh	r3, [r4, #12]
 800a97a:	e7e2      	b.n	800a942 <__smakebuf_r+0xc>
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a986:	81a3      	strh	r3, [r4, #12]
 800a988:	9b01      	ldr	r3, [sp, #4]
 800a98a:	6020      	str	r0, [r4, #0]
 800a98c:	b15b      	cbz	r3, 800a9a6 <__smakebuf_r+0x70>
 800a98e:	4630      	mov	r0, r6
 800a990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a994:	f000 f81e 	bl	800a9d4 <_isatty_r>
 800a998:	b128      	cbz	r0, 800a9a6 <__smakebuf_r+0x70>
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	f023 0303 	bic.w	r3, r3, #3
 800a9a0:	f043 0301 	orr.w	r3, r3, #1
 800a9a4:	81a3      	strh	r3, [r4, #12]
 800a9a6:	89a3      	ldrh	r3, [r4, #12]
 800a9a8:	431d      	orrs	r5, r3
 800a9aa:	81a5      	strh	r5, [r4, #12]
 800a9ac:	e7cf      	b.n	800a94e <__smakebuf_r+0x18>
	...

0800a9b0 <_fstat_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	4d06      	ldr	r5, [pc, #24]	@ (800a9d0 <_fstat_r+0x20>)
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	f7f9 fbc9 	bl	8004154 <_fstat>
 800a9c2:	1c43      	adds	r3, r0, #1
 800a9c4:	d102      	bne.n	800a9cc <_fstat_r+0x1c>
 800a9c6:	682b      	ldr	r3, [r5, #0]
 800a9c8:	b103      	cbz	r3, 800a9cc <_fstat_r+0x1c>
 800a9ca:	6023      	str	r3, [r4, #0]
 800a9cc:	bd38      	pop	{r3, r4, r5, pc}
 800a9ce:	bf00      	nop
 800a9d0:	2000068c 	.word	0x2000068c

0800a9d4 <_isatty_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	4d05      	ldr	r5, [pc, #20]	@ (800a9f0 <_isatty_r+0x1c>)
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	f7f9 fbc7 	bl	8004172 <_isatty>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d102      	bne.n	800a9ee <_isatty_r+0x1a>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	b103      	cbz	r3, 800a9ee <_isatty_r+0x1a>
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	2000068c 	.word	0x2000068c

0800a9f4 <atan2f>:
 800a9f4:	f000 b8e0 	b.w	800abb8 <__ieee754_atan2f>

0800a9f8 <powf>:
 800a9f8:	b570      	push	{r4, r5, r6, lr}
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	f000 f963 	bl	800acc8 <__ieee754_powf>
 800aa02:	4621      	mov	r1, r4
 800aa04:	4605      	mov	r5, r0
 800aa06:	4620      	mov	r0, r4
 800aa08:	f7f6 fb62 	bl	80010d0 <__aeabi_fcmpun>
 800aa0c:	bb68      	cbnz	r0, 800aa6a <powf+0x72>
 800aa0e:	2100      	movs	r1, #0
 800aa10:	4630      	mov	r0, r6
 800aa12:	f7f6 fb2b 	bl	800106c <__aeabi_fcmpeq>
 800aa16:	b190      	cbz	r0, 800aa3e <powf+0x46>
 800aa18:	2100      	movs	r1, #0
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f7f6 fb26 	bl	800106c <__aeabi_fcmpeq>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d133      	bne.n	800aa8c <powf+0x94>
 800aa24:	4620      	mov	r0, r4
 800aa26:	f000 f84e 	bl	800aac6 <finitef>
 800aa2a:	b1f0      	cbz	r0, 800aa6a <powf+0x72>
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f7f6 fb26 	bl	8001080 <__aeabi_fcmplt>
 800aa34:	b1c8      	cbz	r0, 800aa6a <powf+0x72>
 800aa36:	f7fd ff57 	bl	80088e8 <__errno>
 800aa3a:	2322      	movs	r3, #34	@ 0x22
 800aa3c:	e014      	b.n	800aa68 <powf+0x70>
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f000 f841 	bl	800aac6 <finitef>
 800aa44:	b998      	cbnz	r0, 800aa6e <powf+0x76>
 800aa46:	4630      	mov	r0, r6
 800aa48:	f000 f83d 	bl	800aac6 <finitef>
 800aa4c:	b178      	cbz	r0, 800aa6e <powf+0x76>
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f000 f839 	bl	800aac6 <finitef>
 800aa54:	b158      	cbz	r0, 800aa6e <powf+0x76>
 800aa56:	4629      	mov	r1, r5
 800aa58:	4628      	mov	r0, r5
 800aa5a:	f7f6 fb39 	bl	80010d0 <__aeabi_fcmpun>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d0e9      	beq.n	800aa36 <powf+0x3e>
 800aa62:	f7fd ff41 	bl	80088e8 <__errno>
 800aa66:	2321      	movs	r3, #33	@ 0x21
 800aa68:	6003      	str	r3, [r0, #0]
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	bd70      	pop	{r4, r5, r6, pc}
 800aa6e:	2100      	movs	r1, #0
 800aa70:	4628      	mov	r0, r5
 800aa72:	f7f6 fafb 	bl	800106c <__aeabi_fcmpeq>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d0f7      	beq.n	800aa6a <powf+0x72>
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f000 f823 	bl	800aac6 <finitef>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d0f2      	beq.n	800aa6a <powf+0x72>
 800aa84:	4620      	mov	r0, r4
 800aa86:	f000 f81e 	bl	800aac6 <finitef>
 800aa8a:	e7d3      	b.n	800aa34 <powf+0x3c>
 800aa8c:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 800aa90:	e7eb      	b.n	800aa6a <powf+0x72>

0800aa92 <sqrtf>:
 800aa92:	b538      	push	{r3, r4, r5, lr}
 800aa94:	4605      	mov	r5, r0
 800aa96:	f000 f81f 	bl	800aad8 <__ieee754_sqrtf>
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f7f6 fb16 	bl	80010d0 <__aeabi_fcmpun>
 800aaa4:	b968      	cbnz	r0, 800aac2 <sqrtf+0x30>
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	f7f6 fae9 	bl	8001080 <__aeabi_fcmplt>
 800aaae:	b140      	cbz	r0, 800aac2 <sqrtf+0x30>
 800aab0:	f7fd ff1a 	bl	80088e8 <__errno>
 800aab4:	2321      	movs	r3, #33	@ 0x21
 800aab6:	2100      	movs	r1, #0
 800aab8:	6003      	str	r3, [r0, #0]
 800aaba:	4608      	mov	r0, r1
 800aabc:	f7f6 f9f6 	bl	8000eac <__aeabi_fdiv>
 800aac0:	4604      	mov	r4, r0
 800aac2:	4620      	mov	r0, r4
 800aac4:	bd38      	pop	{r3, r4, r5, pc}

0800aac6 <finitef>:
 800aac6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800aaca:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800aace:	bfac      	ite	ge
 800aad0:	2000      	movge	r0, #0
 800aad2:	2001      	movlt	r0, #1
 800aad4:	4770      	bx	lr
	...

0800aad8 <__ieee754_sqrtf>:
 800aad8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800aadc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800aae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae4:	4603      	mov	r3, r0
 800aae6:	4604      	mov	r4, r0
 800aae8:	d30a      	bcc.n	800ab00 <__ieee754_sqrtf+0x28>
 800aaea:	4601      	mov	r1, r0
 800aaec:	f7f6 f92a 	bl	8000d44 <__aeabi_fmul>
 800aaf0:	4601      	mov	r1, r0
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f7f6 f81e 	bl	8000b34 <__addsf3>
 800aaf8:	4604      	mov	r4, r0
 800aafa:	4620      	mov	r0, r4
 800aafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab00:	2a00      	cmp	r2, #0
 800ab02:	d0fa      	beq.n	800aafa <__ieee754_sqrtf+0x22>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	da06      	bge.n	800ab16 <__ieee754_sqrtf+0x3e>
 800ab08:	4601      	mov	r1, r0
 800ab0a:	f7f6 f811 	bl	8000b30 <__aeabi_fsub>
 800ab0e:	4601      	mov	r1, r0
 800ab10:	f7f6 f9cc 	bl	8000eac <__aeabi_fdiv>
 800ab14:	e7f0      	b.n	800aaf8 <__ieee754_sqrtf+0x20>
 800ab16:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800ab1a:	d03c      	beq.n	800ab96 <__ieee754_sqrtf+0xbe>
 800ab1c:	15c2      	asrs	r2, r0, #23
 800ab1e:	2400      	movs	r4, #0
 800ab20:	2019      	movs	r0, #25
 800ab22:	4626      	mov	r6, r4
 800ab24:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800ab28:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ab2c:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800ab30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ab34:	07d2      	lsls	r2, r2, #31
 800ab36:	bf58      	it	pl
 800ab38:	005b      	lslpl	r3, r3, #1
 800ab3a:	106d      	asrs	r5, r5, #1
 800ab3c:	005b      	lsls	r3, r3, #1
 800ab3e:	1872      	adds	r2, r6, r1
 800ab40:	429a      	cmp	r2, r3
 800ab42:	bfcf      	iteee	gt
 800ab44:	461a      	movgt	r2, r3
 800ab46:	1856      	addle	r6, r2, r1
 800ab48:	1864      	addle	r4, r4, r1
 800ab4a:	1a9a      	suble	r2, r3, r2
 800ab4c:	3801      	subs	r0, #1
 800ab4e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800ab52:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ab56:	d1f2      	bne.n	800ab3e <__ieee754_sqrtf+0x66>
 800ab58:	b1ba      	cbz	r2, 800ab8a <__ieee754_sqrtf+0xb2>
 800ab5a:	4e15      	ldr	r6, [pc, #84]	@ (800abb0 <__ieee754_sqrtf+0xd8>)
 800ab5c:	4f15      	ldr	r7, [pc, #84]	@ (800abb4 <__ieee754_sqrtf+0xdc>)
 800ab5e:	6830      	ldr	r0, [r6, #0]
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	f7f5 ffe5 	bl	8000b30 <__aeabi_fsub>
 800ab66:	f8d6 8000 	ldr.w	r8, [r6]
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	4640      	mov	r0, r8
 800ab6e:	f7f6 fa91 	bl	8001094 <__aeabi_fcmple>
 800ab72:	b150      	cbz	r0, 800ab8a <__ieee754_sqrtf+0xb2>
 800ab74:	6830      	ldr	r0, [r6, #0]
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	f7f5 ffdc 	bl	8000b34 <__addsf3>
 800ab7c:	6836      	ldr	r6, [r6, #0]
 800ab7e:	4601      	mov	r1, r0
 800ab80:	4630      	mov	r0, r6
 800ab82:	f7f6 fa7d 	bl	8001080 <__aeabi_fcmplt>
 800ab86:	b170      	cbz	r0, 800aba6 <__ieee754_sqrtf+0xce>
 800ab88:	3402      	adds	r4, #2
 800ab8a:	1064      	asrs	r4, r4, #1
 800ab8c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800ab90:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800ab94:	e7b1      	b.n	800aafa <__ieee754_sqrtf+0x22>
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	0218      	lsls	r0, r3, #8
 800ab9a:	460a      	mov	r2, r1
 800ab9c:	f101 0101 	add.w	r1, r1, #1
 800aba0:	d5f9      	bpl.n	800ab96 <__ieee754_sqrtf+0xbe>
 800aba2:	4252      	negs	r2, r2
 800aba4:	e7bb      	b.n	800ab1e <__ieee754_sqrtf+0x46>
 800aba6:	3401      	adds	r4, #1
 800aba8:	f024 0401 	bic.w	r4, r4, #1
 800abac:	e7ed      	b.n	800ab8a <__ieee754_sqrtf+0xb2>
 800abae:	bf00      	nop
 800abb0:	0800bb08 	.word	0x0800bb08
 800abb4:	0800bb04 	.word	0x0800bb04

0800abb8 <__ieee754_atan2f>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800abbe:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800abc2:	4603      	mov	r3, r0
 800abc4:	d805      	bhi.n	800abd2 <__ieee754_atan2f+0x1a>
 800abc6:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800abca:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800abce:	4607      	mov	r7, r0
 800abd0:	d904      	bls.n	800abdc <__ieee754_atan2f+0x24>
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7f5 ffae 	bl	8000b34 <__addsf3>
 800abd8:	4603      	mov	r3, r0
 800abda:	e010      	b.n	800abfe <__ieee754_atan2f+0x46>
 800abdc:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800abe0:	d103      	bne.n	800abea <__ieee754_atan2f+0x32>
 800abe2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800abe6:	f000 bbcf 	b.w	800b388 <atanf>
 800abea:	178c      	asrs	r4, r1, #30
 800abec:	f004 0402 	and.w	r4, r4, #2
 800abf0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800abf4:	b92a      	cbnz	r2, 800ac02 <__ieee754_atan2f+0x4a>
 800abf6:	2c02      	cmp	r4, #2
 800abf8:	d04b      	beq.n	800ac92 <__ieee754_atan2f+0xda>
 800abfa:	2c03      	cmp	r4, #3
 800abfc:	d04b      	beq.n	800ac96 <__ieee754_atan2f+0xde>
 800abfe:	4618      	mov	r0, r3
 800ac00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac02:	b91e      	cbnz	r6, 800ac0c <__ieee754_atan2f+0x54>
 800ac04:	2f00      	cmp	r7, #0
 800ac06:	db4c      	blt.n	800aca2 <__ieee754_atan2f+0xea>
 800ac08:	4b27      	ldr	r3, [pc, #156]	@ (800aca8 <__ieee754_atan2f+0xf0>)
 800ac0a:	e7f8      	b.n	800abfe <__ieee754_atan2f+0x46>
 800ac0c:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800ac10:	d10e      	bne.n	800ac30 <__ieee754_atan2f+0x78>
 800ac12:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ac16:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac1a:	d105      	bne.n	800ac28 <__ieee754_atan2f+0x70>
 800ac1c:	2c02      	cmp	r4, #2
 800ac1e:	d83c      	bhi.n	800ac9a <__ieee754_atan2f+0xe2>
 800ac20:	4b22      	ldr	r3, [pc, #136]	@ (800acac <__ieee754_atan2f+0xf4>)
 800ac22:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ac26:	e7ea      	b.n	800abfe <__ieee754_atan2f+0x46>
 800ac28:	2c02      	cmp	r4, #2
 800ac2a:	d838      	bhi.n	800ac9e <__ieee754_atan2f+0xe6>
 800ac2c:	4b20      	ldr	r3, [pc, #128]	@ (800acb0 <__ieee754_atan2f+0xf8>)
 800ac2e:	e7f8      	b.n	800ac22 <__ieee754_atan2f+0x6a>
 800ac30:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ac34:	d0e6      	beq.n	800ac04 <__ieee754_atan2f+0x4c>
 800ac36:	1b92      	subs	r2, r2, r6
 800ac38:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800ac3c:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800ac40:	da17      	bge.n	800ac72 <__ieee754_atan2f+0xba>
 800ac42:	2900      	cmp	r1, #0
 800ac44:	da01      	bge.n	800ac4a <__ieee754_atan2f+0x92>
 800ac46:	303c      	adds	r0, #60	@ 0x3c
 800ac48:	db15      	blt.n	800ac76 <__ieee754_atan2f+0xbe>
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7f6 f92e 	bl	8000eac <__aeabi_fdiv>
 800ac50:	f000 fca6 	bl	800b5a0 <fabsf>
 800ac54:	f000 fb98 	bl	800b388 <atanf>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2c01      	cmp	r4, #1
 800ac5c:	d00d      	beq.n	800ac7a <__ieee754_atan2f+0xc2>
 800ac5e:	2c02      	cmp	r4, #2
 800ac60:	d00e      	beq.n	800ac80 <__ieee754_atan2f+0xc8>
 800ac62:	2c00      	cmp	r4, #0
 800ac64:	d0cb      	beq.n	800abfe <__ieee754_atan2f+0x46>
 800ac66:	4913      	ldr	r1, [pc, #76]	@ (800acb4 <__ieee754_atan2f+0xfc>)
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7f5 ff63 	bl	8000b34 <__addsf3>
 800ac6e:	4912      	ldr	r1, [pc, #72]	@ (800acb8 <__ieee754_atan2f+0x100>)
 800ac70:	e00c      	b.n	800ac8c <__ieee754_atan2f+0xd4>
 800ac72:	4b0d      	ldr	r3, [pc, #52]	@ (800aca8 <__ieee754_atan2f+0xf0>)
 800ac74:	e7f1      	b.n	800ac5a <__ieee754_atan2f+0xa2>
 800ac76:	2300      	movs	r3, #0
 800ac78:	e7ef      	b.n	800ac5a <__ieee754_atan2f+0xa2>
 800ac7a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ac7e:	e7be      	b.n	800abfe <__ieee754_atan2f+0x46>
 800ac80:	490c      	ldr	r1, [pc, #48]	@ (800acb4 <__ieee754_atan2f+0xfc>)
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7f5 ff56 	bl	8000b34 <__addsf3>
 800ac88:	4601      	mov	r1, r0
 800ac8a:	480b      	ldr	r0, [pc, #44]	@ (800acb8 <__ieee754_atan2f+0x100>)
 800ac8c:	f7f5 ff50 	bl	8000b30 <__aeabi_fsub>
 800ac90:	e7a2      	b.n	800abd8 <__ieee754_atan2f+0x20>
 800ac92:	4b09      	ldr	r3, [pc, #36]	@ (800acb8 <__ieee754_atan2f+0x100>)
 800ac94:	e7b3      	b.n	800abfe <__ieee754_atan2f+0x46>
 800ac96:	4b09      	ldr	r3, [pc, #36]	@ (800acbc <__ieee754_atan2f+0x104>)
 800ac98:	e7b1      	b.n	800abfe <__ieee754_atan2f+0x46>
 800ac9a:	4b09      	ldr	r3, [pc, #36]	@ (800acc0 <__ieee754_atan2f+0x108>)
 800ac9c:	e7af      	b.n	800abfe <__ieee754_atan2f+0x46>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	e7ad      	b.n	800abfe <__ieee754_atan2f+0x46>
 800aca2:	4b08      	ldr	r3, [pc, #32]	@ (800acc4 <__ieee754_atan2f+0x10c>)
 800aca4:	e7ab      	b.n	800abfe <__ieee754_atan2f+0x46>
 800aca6:	bf00      	nop
 800aca8:	3fc90fdb 	.word	0x3fc90fdb
 800acac:	0800bb18 	.word	0x0800bb18
 800acb0:	0800bb0c 	.word	0x0800bb0c
 800acb4:	33bbbd2e 	.word	0x33bbbd2e
 800acb8:	40490fdb 	.word	0x40490fdb
 800acbc:	c0490fdb 	.word	0xc0490fdb
 800acc0:	3f490fdb 	.word	0x3f490fdb
 800acc4:	bfc90fdb 	.word	0xbfc90fdb

0800acc8 <__ieee754_powf>:
 800acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800accc:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 800acd0:	4681      	mov	r9, r0
 800acd2:	460f      	mov	r7, r1
 800acd4:	4606      	mov	r6, r0
 800acd6:	460c      	mov	r4, r1
 800acd8:	b087      	sub	sp, #28
 800acda:	d10c      	bne.n	800acf6 <__ieee754_powf+0x2e>
 800acdc:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 800ace0:	0076      	lsls	r6, r6, #1
 800ace2:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800ace6:	f240 8310 	bls.w	800b30a <__ieee754_powf+0x642>
 800acea:	4639      	mov	r1, r7
 800acec:	4648      	mov	r0, r9
 800acee:	f7f5 ff21 	bl	8000b34 <__addsf3>
 800acf2:	4601      	mov	r1, r0
 800acf4:	e043      	b.n	800ad7e <__ieee754_powf+0xb6>
 800acf6:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800acfa:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800acfe:	d802      	bhi.n	800ad06 <__ieee754_powf+0x3e>
 800ad00:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800ad04:	d908      	bls.n	800ad18 <__ieee754_powf+0x50>
 800ad06:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800ad0a:	d1ee      	bne.n	800acea <__ieee754_powf+0x22>
 800ad0c:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800ad10:	0064      	lsls	r4, r4, #1
 800ad12:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800ad16:	e7e6      	b.n	800ace6 <__ieee754_powf+0x1e>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	da1f      	bge.n	800ad5c <__ieee754_powf+0x94>
 800ad1c:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 800ad20:	f080 82f8 	bcs.w	800b314 <__ieee754_powf+0x64c>
 800ad24:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800ad28:	d32f      	bcc.n	800ad8a <__ieee754_powf+0xc2>
 800ad2a:	ea4f 53eb 	mov.w	r3, fp, asr #23
 800ad2e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ad32:	fa4b f503 	asr.w	r5, fp, r3
 800ad36:	fa05 f303 	lsl.w	r3, r5, r3
 800ad3a:	455b      	cmp	r3, fp
 800ad3c:	d123      	bne.n	800ad86 <__ieee754_powf+0xbe>
 800ad3e:	f005 0501 	and.w	r5, r5, #1
 800ad42:	f1c5 0502 	rsb	r5, r5, #2
 800ad46:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800ad4a:	d11f      	bne.n	800ad8c <__ieee754_powf+0xc4>
 800ad4c:	2c00      	cmp	r4, #0
 800ad4e:	4649      	mov	r1, r9
 800ad50:	da15      	bge.n	800ad7e <__ieee754_powf+0xb6>
 800ad52:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800ad56:	f7f6 f8a9 	bl	8000eac <__aeabi_fdiv>
 800ad5a:	e7ca      	b.n	800acf2 <__ieee754_powf+0x2a>
 800ad5c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800ad60:	d111      	bne.n	800ad86 <__ieee754_powf+0xbe>
 800ad62:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800ad66:	f000 82d0 	beq.w	800b30a <__ieee754_powf+0x642>
 800ad6a:	d904      	bls.n	800ad76 <__ieee754_powf+0xae>
 800ad6c:	2c00      	cmp	r4, #0
 800ad6e:	f280 82cf 	bge.w	800b310 <__ieee754_powf+0x648>
 800ad72:	2100      	movs	r1, #0
 800ad74:	e003      	b.n	800ad7e <__ieee754_powf+0xb6>
 800ad76:	2c00      	cmp	r4, #0
 800ad78:	dafb      	bge.n	800ad72 <__ieee754_powf+0xaa>
 800ad7a:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800ad7e:	4608      	mov	r0, r1
 800ad80:	b007      	add	sp, #28
 800ad82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad86:	2500      	movs	r5, #0
 800ad88:	e7dd      	b.n	800ad46 <__ieee754_powf+0x7e>
 800ad8a:	2500      	movs	r5, #0
 800ad8c:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ad90:	d104      	bne.n	800ad9c <__ieee754_powf+0xd4>
 800ad92:	4649      	mov	r1, r9
 800ad94:	4648      	mov	r0, r9
 800ad96:	f7f5 ffd5 	bl	8000d44 <__aeabi_fmul>
 800ad9a:	e7aa      	b.n	800acf2 <__ieee754_powf+0x2a>
 800ad9c:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800ada0:	f040 82bd 	bne.w	800b31e <__ieee754_powf+0x656>
 800ada4:	2e00      	cmp	r6, #0
 800ada6:	f2c0 82ba 	blt.w	800b31e <__ieee754_powf+0x656>
 800adaa:	4648      	mov	r0, r9
 800adac:	b007      	add	sp, #28
 800adae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb2:	f7ff be91 	b.w	800aad8 <__ieee754_sqrtf>
 800adb6:	2d01      	cmp	r5, #1
 800adb8:	d1e1      	bne.n	800ad7e <__ieee754_powf+0xb6>
 800adba:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800adbe:	e798      	b.n	800acf2 <__ieee754_powf+0x2a>
 800adc0:	0ff3      	lsrs	r3, r6, #31
 800adc2:	3b01      	subs	r3, #1
 800adc4:	9303      	str	r3, [sp, #12]
 800adc6:	432b      	orrs	r3, r5
 800adc8:	d101      	bne.n	800adce <__ieee754_powf+0x106>
 800adca:	4649      	mov	r1, r9
 800adcc:	e2c5      	b.n	800b35a <__ieee754_powf+0x692>
 800adce:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800add2:	f240 809b 	bls.w	800af0c <__ieee754_powf+0x244>
 800add6:	4b46      	ldr	r3, [pc, #280]	@ (800aef0 <__ieee754_powf+0x228>)
 800add8:	4598      	cmp	r8, r3
 800adda:	d807      	bhi.n	800adec <__ieee754_powf+0x124>
 800addc:	2c00      	cmp	r4, #0
 800adde:	da0a      	bge.n	800adf6 <__ieee754_powf+0x12e>
 800ade0:	2000      	movs	r0, #0
 800ade2:	b007      	add	sp, #28
 800ade4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade8:	f000 bc43 	b.w	800b672 <__math_oflowf>
 800adec:	4b41      	ldr	r3, [pc, #260]	@ (800aef4 <__ieee754_powf+0x22c>)
 800adee:	4598      	cmp	r8, r3
 800adf0:	d907      	bls.n	800ae02 <__ieee754_powf+0x13a>
 800adf2:	2c00      	cmp	r4, #0
 800adf4:	dcf4      	bgt.n	800ade0 <__ieee754_powf+0x118>
 800adf6:	2000      	movs	r0, #0
 800adf8:	b007      	add	sp, #28
 800adfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfe:	f000 bc34 	b.w	800b66a <__math_uflowf>
 800ae02:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ae06:	f7f5 fe93 	bl	8000b30 <__aeabi_fsub>
 800ae0a:	493b      	ldr	r1, [pc, #236]	@ (800aef8 <__ieee754_powf+0x230>)
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	f7f5 ff99 	bl	8000d44 <__aeabi_fmul>
 800ae12:	493a      	ldr	r1, [pc, #232]	@ (800aefc <__ieee754_powf+0x234>)
 800ae14:	4680      	mov	r8, r0
 800ae16:	4630      	mov	r0, r6
 800ae18:	f7f5 ff94 	bl	8000d44 <__aeabi_fmul>
 800ae1c:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800ae20:	4681      	mov	r9, r0
 800ae22:	4630      	mov	r0, r6
 800ae24:	f7f5 ff8e 	bl	8000d44 <__aeabi_fmul>
 800ae28:	4601      	mov	r1, r0
 800ae2a:	4835      	ldr	r0, [pc, #212]	@ (800af00 <__ieee754_powf+0x238>)
 800ae2c:	f7f5 fe80 	bl	8000b30 <__aeabi_fsub>
 800ae30:	4631      	mov	r1, r6
 800ae32:	f7f5 ff87 	bl	8000d44 <__aeabi_fmul>
 800ae36:	4601      	mov	r1, r0
 800ae38:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800ae3c:	f7f5 fe78 	bl	8000b30 <__aeabi_fsub>
 800ae40:	4631      	mov	r1, r6
 800ae42:	4682      	mov	sl, r0
 800ae44:	4630      	mov	r0, r6
 800ae46:	f7f5 ff7d 	bl	8000d44 <__aeabi_fmul>
 800ae4a:	4601      	mov	r1, r0
 800ae4c:	4650      	mov	r0, sl
 800ae4e:	f7f5 ff79 	bl	8000d44 <__aeabi_fmul>
 800ae52:	492c      	ldr	r1, [pc, #176]	@ (800af04 <__ieee754_powf+0x23c>)
 800ae54:	f7f5 ff76 	bl	8000d44 <__aeabi_fmul>
 800ae58:	4601      	mov	r1, r0
 800ae5a:	4648      	mov	r0, r9
 800ae5c:	f7f5 fe68 	bl	8000b30 <__aeabi_fsub>
 800ae60:	4601      	mov	r1, r0
 800ae62:	4606      	mov	r6, r0
 800ae64:	4640      	mov	r0, r8
 800ae66:	f7f5 fe65 	bl	8000b34 <__addsf3>
 800ae6a:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800ae6e:	f02b 0b0f 	bic.w	fp, fp, #15
 800ae72:	4641      	mov	r1, r8
 800ae74:	4658      	mov	r0, fp
 800ae76:	f7f5 fe5b 	bl	8000b30 <__aeabi_fsub>
 800ae7a:	4601      	mov	r1, r0
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f7f5 fe57 	bl	8000b30 <__aeabi_fsub>
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	3d01      	subs	r5, #1
 800ae86:	f36f 040b 	bfc	r4, #0, #12
 800ae8a:	431d      	orrs	r5, r3
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	4621      	mov	r1, r4
 800ae90:	4638      	mov	r0, r7
 800ae92:	bf14      	ite	ne
 800ae94:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 800ae98:	4d1b      	ldreq	r5, [pc, #108]	@ (800af08 <__ieee754_powf+0x240>)
 800ae9a:	f7f5 fe49 	bl	8000b30 <__aeabi_fsub>
 800ae9e:	4659      	mov	r1, fp
 800aea0:	f7f5 ff50 	bl	8000d44 <__aeabi_fmul>
 800aea4:	4639      	mov	r1, r7
 800aea6:	4680      	mov	r8, r0
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f7f5 ff4b 	bl	8000d44 <__aeabi_fmul>
 800aeae:	4601      	mov	r1, r0
 800aeb0:	4640      	mov	r0, r8
 800aeb2:	f7f5 fe3f 	bl	8000b34 <__addsf3>
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	4606      	mov	r6, r0
 800aeba:	4658      	mov	r0, fp
 800aebc:	f7f5 ff42 	bl	8000d44 <__aeabi_fmul>
 800aec0:	4601      	mov	r1, r0
 800aec2:	4607      	mov	r7, r0
 800aec4:	4630      	mov	r0, r6
 800aec6:	f7f5 fe35 	bl	8000b34 <__addsf3>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	4604      	mov	r4, r0
 800aece:	4680      	mov	r8, r0
 800aed0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800aed4:	f340 813f 	ble.w	800b156 <__ieee754_powf+0x48e>
 800aed8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800aedc:	f240 8128 	bls.w	800b130 <__ieee754_powf+0x468>
 800aee0:	2100      	movs	r1, #0
 800aee2:	4628      	mov	r0, r5
 800aee4:	f7f6 f8cc 	bl	8001080 <__aeabi_fcmplt>
 800aee8:	3800      	subs	r0, #0
 800aeea:	bf18      	it	ne
 800aeec:	2001      	movne	r0, #1
 800aeee:	e778      	b.n	800ade2 <__ieee754_powf+0x11a>
 800aef0:	3f7ffff3 	.word	0x3f7ffff3
 800aef4:	3f800007 	.word	0x3f800007
 800aef8:	3fb8aa00 	.word	0x3fb8aa00
 800aefc:	36eca570 	.word	0x36eca570
 800af00:	3eaaaaab 	.word	0x3eaaaaab
 800af04:	3fb8aa3b 	.word	0x3fb8aa3b
 800af08:	bf800000 	.word	0xbf800000
 800af0c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800af10:	f040 810a 	bne.w	800b128 <__ieee754_powf+0x460>
 800af14:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800af18:	f7f5 ff14 	bl	8000d44 <__aeabi_fmul>
 800af1c:	f06f 0217 	mvn.w	r2, #23
 800af20:	4682      	mov	sl, r0
 800af22:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800af26:	3b7f      	subs	r3, #127	@ 0x7f
 800af28:	441a      	add	r2, r3
 800af2a:	4b95      	ldr	r3, [pc, #596]	@ (800b180 <__ieee754_powf+0x4b8>)
 800af2c:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 800af30:	459a      	cmp	sl, r3
 800af32:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800af36:	dd06      	ble.n	800af46 <__ieee754_powf+0x27e>
 800af38:	4b92      	ldr	r3, [pc, #584]	@ (800b184 <__ieee754_powf+0x4bc>)
 800af3a:	459a      	cmp	sl, r3
 800af3c:	f340 80f6 	ble.w	800b12c <__ieee754_powf+0x464>
 800af40:	3201      	adds	r2, #1
 800af42:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800af46:	2300      	movs	r3, #0
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	9205      	str	r2, [sp, #20]
 800af4c:	4b8e      	ldr	r3, [pc, #568]	@ (800b188 <__ieee754_powf+0x4c0>)
 800af4e:	9a01      	ldr	r2, [sp, #4]
 800af50:	4630      	mov	r0, r6
 800af52:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800af56:	46b2      	mov	sl, r6
 800af58:	4659      	mov	r1, fp
 800af5a:	f7f5 fde9 	bl	8000b30 <__aeabi_fsub>
 800af5e:	4631      	mov	r1, r6
 800af60:	4681      	mov	r9, r0
 800af62:	4658      	mov	r0, fp
 800af64:	f7f5 fde6 	bl	8000b34 <__addsf3>
 800af68:	4601      	mov	r1, r0
 800af6a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800af6e:	f7f5 ff9d 	bl	8000eac <__aeabi_fdiv>
 800af72:	4601      	mov	r1, r0
 800af74:	9004      	str	r0, [sp, #16]
 800af76:	4648      	mov	r0, r9
 800af78:	f7f5 fee4 	bl	8000d44 <__aeabi_fmul>
 800af7c:	9002      	str	r0, [sp, #8]
 800af7e:	9b02      	ldr	r3, [sp, #8]
 800af80:	1076      	asrs	r6, r6, #1
 800af82:	f36f 030b 	bfc	r3, #0, #12
 800af86:	4698      	mov	r8, r3
 800af88:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 800af8c:	9b01      	ldr	r3, [sp, #4]
 800af8e:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 800af92:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800af96:	4631      	mov	r1, r6
 800af98:	4640      	mov	r0, r8
 800af9a:	f7f5 fed3 	bl	8000d44 <__aeabi_fmul>
 800af9e:	4601      	mov	r1, r0
 800afa0:	4648      	mov	r0, r9
 800afa2:	f7f5 fdc5 	bl	8000b30 <__aeabi_fsub>
 800afa6:	4659      	mov	r1, fp
 800afa8:	4681      	mov	r9, r0
 800afaa:	4630      	mov	r0, r6
 800afac:	f7f5 fdc0 	bl	8000b30 <__aeabi_fsub>
 800afb0:	4601      	mov	r1, r0
 800afb2:	4650      	mov	r0, sl
 800afb4:	f7f5 fdbc 	bl	8000b30 <__aeabi_fsub>
 800afb8:	4641      	mov	r1, r8
 800afba:	f7f5 fec3 	bl	8000d44 <__aeabi_fmul>
 800afbe:	4601      	mov	r1, r0
 800afc0:	4648      	mov	r0, r9
 800afc2:	f7f5 fdb5 	bl	8000b30 <__aeabi_fsub>
 800afc6:	9b04      	ldr	r3, [sp, #16]
 800afc8:	4619      	mov	r1, r3
 800afca:	f7f5 febb 	bl	8000d44 <__aeabi_fmul>
 800afce:	9902      	ldr	r1, [sp, #8]
 800afd0:	4683      	mov	fp, r0
 800afd2:	4608      	mov	r0, r1
 800afd4:	f7f5 feb6 	bl	8000d44 <__aeabi_fmul>
 800afd8:	4606      	mov	r6, r0
 800afda:	496c      	ldr	r1, [pc, #432]	@ (800b18c <__ieee754_powf+0x4c4>)
 800afdc:	f7f5 feb2 	bl	8000d44 <__aeabi_fmul>
 800afe0:	496b      	ldr	r1, [pc, #428]	@ (800b190 <__ieee754_powf+0x4c8>)
 800afe2:	f7f5 fda7 	bl	8000b34 <__addsf3>
 800afe6:	4631      	mov	r1, r6
 800afe8:	f7f5 feac 	bl	8000d44 <__aeabi_fmul>
 800afec:	4969      	ldr	r1, [pc, #420]	@ (800b194 <__ieee754_powf+0x4cc>)
 800afee:	f7f5 fda1 	bl	8000b34 <__addsf3>
 800aff2:	4631      	mov	r1, r6
 800aff4:	f7f5 fea6 	bl	8000d44 <__aeabi_fmul>
 800aff8:	4967      	ldr	r1, [pc, #412]	@ (800b198 <__ieee754_powf+0x4d0>)
 800affa:	f7f5 fd9b 	bl	8000b34 <__addsf3>
 800affe:	4631      	mov	r1, r6
 800b000:	f7f5 fea0 	bl	8000d44 <__aeabi_fmul>
 800b004:	4965      	ldr	r1, [pc, #404]	@ (800b19c <__ieee754_powf+0x4d4>)
 800b006:	f7f5 fd95 	bl	8000b34 <__addsf3>
 800b00a:	4631      	mov	r1, r6
 800b00c:	f7f5 fe9a 	bl	8000d44 <__aeabi_fmul>
 800b010:	4963      	ldr	r1, [pc, #396]	@ (800b1a0 <__ieee754_powf+0x4d8>)
 800b012:	f7f5 fd8f 	bl	8000b34 <__addsf3>
 800b016:	4631      	mov	r1, r6
 800b018:	4681      	mov	r9, r0
 800b01a:	4630      	mov	r0, r6
 800b01c:	f7f5 fe92 	bl	8000d44 <__aeabi_fmul>
 800b020:	4601      	mov	r1, r0
 800b022:	4648      	mov	r0, r9
 800b024:	f7f5 fe8e 	bl	8000d44 <__aeabi_fmul>
 800b028:	4606      	mov	r6, r0
 800b02a:	4641      	mov	r1, r8
 800b02c:	9802      	ldr	r0, [sp, #8]
 800b02e:	f7f5 fd81 	bl	8000b34 <__addsf3>
 800b032:	4659      	mov	r1, fp
 800b034:	f7f5 fe86 	bl	8000d44 <__aeabi_fmul>
 800b038:	4631      	mov	r1, r6
 800b03a:	f7f5 fd7b 	bl	8000b34 <__addsf3>
 800b03e:	4641      	mov	r1, r8
 800b040:	4681      	mov	r9, r0
 800b042:	4640      	mov	r0, r8
 800b044:	f7f5 fe7e 	bl	8000d44 <__aeabi_fmul>
 800b048:	4956      	ldr	r1, [pc, #344]	@ (800b1a4 <__ieee754_powf+0x4dc>)
 800b04a:	4682      	mov	sl, r0
 800b04c:	f7f5 fd72 	bl	8000b34 <__addsf3>
 800b050:	4649      	mov	r1, r9
 800b052:	f7f5 fd6f 	bl	8000b34 <__addsf3>
 800b056:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800b05a:	f026 060f 	bic.w	r6, r6, #15
 800b05e:	4631      	mov	r1, r6
 800b060:	4640      	mov	r0, r8
 800b062:	f7f5 fe6f 	bl	8000d44 <__aeabi_fmul>
 800b066:	494f      	ldr	r1, [pc, #316]	@ (800b1a4 <__ieee754_powf+0x4dc>)
 800b068:	4680      	mov	r8, r0
 800b06a:	4630      	mov	r0, r6
 800b06c:	f7f5 fd60 	bl	8000b30 <__aeabi_fsub>
 800b070:	4651      	mov	r1, sl
 800b072:	f7f5 fd5d 	bl	8000b30 <__aeabi_fsub>
 800b076:	4601      	mov	r1, r0
 800b078:	4648      	mov	r0, r9
 800b07a:	f7f5 fd59 	bl	8000b30 <__aeabi_fsub>
 800b07e:	9902      	ldr	r1, [sp, #8]
 800b080:	f7f5 fe60 	bl	8000d44 <__aeabi_fmul>
 800b084:	4631      	mov	r1, r6
 800b086:	4681      	mov	r9, r0
 800b088:	4658      	mov	r0, fp
 800b08a:	f7f5 fe5b 	bl	8000d44 <__aeabi_fmul>
 800b08e:	4601      	mov	r1, r0
 800b090:	4648      	mov	r0, r9
 800b092:	f7f5 fd4f 	bl	8000b34 <__addsf3>
 800b096:	4682      	mov	sl, r0
 800b098:	4601      	mov	r1, r0
 800b09a:	4640      	mov	r0, r8
 800b09c:	f7f5 fd4a 	bl	8000b34 <__addsf3>
 800b0a0:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800b0a4:	f026 060f 	bic.w	r6, r6, #15
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	493f      	ldr	r1, [pc, #252]	@ (800b1a8 <__ieee754_powf+0x4e0>)
 800b0ac:	f7f5 fe4a 	bl	8000d44 <__aeabi_fmul>
 800b0b0:	4641      	mov	r1, r8
 800b0b2:	4681      	mov	r9, r0
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f7f5 fd3b 	bl	8000b30 <__aeabi_fsub>
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	4650      	mov	r0, sl
 800b0be:	f7f5 fd37 	bl	8000b30 <__aeabi_fsub>
 800b0c2:	493a      	ldr	r1, [pc, #232]	@ (800b1ac <__ieee754_powf+0x4e4>)
 800b0c4:	f7f5 fe3e 	bl	8000d44 <__aeabi_fmul>
 800b0c8:	4939      	ldr	r1, [pc, #228]	@ (800b1b0 <__ieee754_powf+0x4e8>)
 800b0ca:	4680      	mov	r8, r0
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f7f5 fe39 	bl	8000d44 <__aeabi_fmul>
 800b0d2:	4601      	mov	r1, r0
 800b0d4:	4640      	mov	r0, r8
 800b0d6:	f7f5 fd2d 	bl	8000b34 <__addsf3>
 800b0da:	4b36      	ldr	r3, [pc, #216]	@ (800b1b4 <__ieee754_powf+0x4ec>)
 800b0dc:	9a01      	ldr	r2, [sp, #4]
 800b0de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0e2:	f7f5 fd27 	bl	8000b34 <__addsf3>
 800b0e6:	9a05      	ldr	r2, [sp, #20]
 800b0e8:	4606      	mov	r6, r0
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	f7f5 fdd6 	bl	8000c9c <__aeabi_i2f>
 800b0f0:	4680      	mov	r8, r0
 800b0f2:	4b31      	ldr	r3, [pc, #196]	@ (800b1b8 <__ieee754_powf+0x4f0>)
 800b0f4:	9a01      	ldr	r2, [sp, #4]
 800b0f6:	4631      	mov	r1, r6
 800b0f8:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800b0fc:	4648      	mov	r0, r9
 800b0fe:	f7f5 fd19 	bl	8000b34 <__addsf3>
 800b102:	4651      	mov	r1, sl
 800b104:	f7f5 fd16 	bl	8000b34 <__addsf3>
 800b108:	4641      	mov	r1, r8
 800b10a:	f7f5 fd13 	bl	8000b34 <__addsf3>
 800b10e:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800b112:	f02b 0b0f 	bic.w	fp, fp, #15
 800b116:	4641      	mov	r1, r8
 800b118:	4658      	mov	r0, fp
 800b11a:	f7f5 fd09 	bl	8000b30 <__aeabi_fsub>
 800b11e:	4651      	mov	r1, sl
 800b120:	f7f5 fd06 	bl	8000b30 <__aeabi_fsub>
 800b124:	4649      	mov	r1, r9
 800b126:	e6a6      	b.n	800ae76 <__ieee754_powf+0x1ae>
 800b128:	2200      	movs	r2, #0
 800b12a:	e6fa      	b.n	800af22 <__ieee754_powf+0x25a>
 800b12c:	2301      	movs	r3, #1
 800b12e:	e70b      	b.n	800af48 <__ieee754_powf+0x280>
 800b130:	d148      	bne.n	800b1c4 <__ieee754_powf+0x4fc>
 800b132:	4922      	ldr	r1, [pc, #136]	@ (800b1bc <__ieee754_powf+0x4f4>)
 800b134:	4630      	mov	r0, r6
 800b136:	f7f5 fcfd 	bl	8000b34 <__addsf3>
 800b13a:	4639      	mov	r1, r7
 800b13c:	4681      	mov	r9, r0
 800b13e:	4620      	mov	r0, r4
 800b140:	f7f5 fcf6 	bl	8000b30 <__aeabi_fsub>
 800b144:	4601      	mov	r1, r0
 800b146:	4648      	mov	r0, r9
 800b148:	f7f5 ffb8 	bl	80010bc <__aeabi_fcmpgt>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	f47f aec7 	bne.w	800aee0 <__ieee754_powf+0x218>
 800b152:	2386      	movs	r3, #134	@ 0x86
 800b154:	e03b      	b.n	800b1ce <__ieee754_powf+0x506>
 800b156:	4a1a      	ldr	r2, [pc, #104]	@ (800b1c0 <__ieee754_powf+0x4f8>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d907      	bls.n	800b16c <__ieee754_powf+0x4a4>
 800b15c:	2100      	movs	r1, #0
 800b15e:	4628      	mov	r0, r5
 800b160:	f7f5 ff8e 	bl	8001080 <__aeabi_fcmplt>
 800b164:	3800      	subs	r0, #0
 800b166:	bf18      	it	ne
 800b168:	2001      	movne	r0, #1
 800b16a:	e645      	b.n	800adf8 <__ieee754_powf+0x130>
 800b16c:	d12a      	bne.n	800b1c4 <__ieee754_powf+0x4fc>
 800b16e:	4639      	mov	r1, r7
 800b170:	f7f5 fcde 	bl	8000b30 <__aeabi_fsub>
 800b174:	4631      	mov	r1, r6
 800b176:	f7f5 ff97 	bl	80010a8 <__aeabi_fcmpge>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d0e9      	beq.n	800b152 <__ieee754_powf+0x48a>
 800b17e:	e7ed      	b.n	800b15c <__ieee754_powf+0x494>
 800b180:	001cc471 	.word	0x001cc471
 800b184:	005db3d6 	.word	0x005db3d6
 800b188:	0800bb34 	.word	0x0800bb34
 800b18c:	3e53f142 	.word	0x3e53f142
 800b190:	3e6c3255 	.word	0x3e6c3255
 800b194:	3e8ba305 	.word	0x3e8ba305
 800b198:	3eaaaaab 	.word	0x3eaaaaab
 800b19c:	3edb6db7 	.word	0x3edb6db7
 800b1a0:	3f19999a 	.word	0x3f19999a
 800b1a4:	40400000 	.word	0x40400000
 800b1a8:	3f763800 	.word	0x3f763800
 800b1ac:	3f76384f 	.word	0x3f76384f
 800b1b0:	369dc3a0 	.word	0x369dc3a0
 800b1b4:	0800bb24 	.word	0x0800bb24
 800b1b8:	0800bb2c 	.word	0x0800bb2c
 800b1bc:	3338aa3c 	.word	0x3338aa3c
 800b1c0:	43160000 	.word	0x43160000
 800b1c4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800b1c8:	f240 809b 	bls.w	800b302 <__ieee754_powf+0x63a>
 800b1cc:	15db      	asrs	r3, r3, #23
 800b1ce:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800b1d2:	3b7e      	subs	r3, #126	@ 0x7e
 800b1d4:	411c      	asrs	r4, r3
 800b1d6:	4444      	add	r4, r8
 800b1d8:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 800b1dc:	4961      	ldr	r1, [pc, #388]	@ (800b364 <__ieee754_powf+0x69c>)
 800b1de:	3b7f      	subs	r3, #127	@ 0x7f
 800b1e0:	4119      	asrs	r1, r3
 800b1e2:	4021      	ands	r1, r4
 800b1e4:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800b1e8:	f1c3 0317 	rsb	r3, r3, #23
 800b1ec:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 800b1f0:	4638      	mov	r0, r7
 800b1f2:	411c      	asrs	r4, r3
 800b1f4:	f1b8 0f00 	cmp.w	r8, #0
 800b1f8:	bfb8      	it	lt
 800b1fa:	4264      	neglt	r4, r4
 800b1fc:	f7f5 fc98 	bl	8000b30 <__aeabi_fsub>
 800b200:	4607      	mov	r7, r0
 800b202:	4631      	mov	r1, r6
 800b204:	4638      	mov	r0, r7
 800b206:	f7f5 fc95 	bl	8000b34 <__addsf3>
 800b20a:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800b20e:	f028 080f 	bic.w	r8, r8, #15
 800b212:	4640      	mov	r0, r8
 800b214:	4954      	ldr	r1, [pc, #336]	@ (800b368 <__ieee754_powf+0x6a0>)
 800b216:	f7f5 fd95 	bl	8000d44 <__aeabi_fmul>
 800b21a:	4639      	mov	r1, r7
 800b21c:	4681      	mov	r9, r0
 800b21e:	4640      	mov	r0, r8
 800b220:	f7f5 fc86 	bl	8000b30 <__aeabi_fsub>
 800b224:	4601      	mov	r1, r0
 800b226:	4630      	mov	r0, r6
 800b228:	f7f5 fc82 	bl	8000b30 <__aeabi_fsub>
 800b22c:	494f      	ldr	r1, [pc, #316]	@ (800b36c <__ieee754_powf+0x6a4>)
 800b22e:	f7f5 fd89 	bl	8000d44 <__aeabi_fmul>
 800b232:	494f      	ldr	r1, [pc, #316]	@ (800b370 <__ieee754_powf+0x6a8>)
 800b234:	4606      	mov	r6, r0
 800b236:	4640      	mov	r0, r8
 800b238:	f7f5 fd84 	bl	8000d44 <__aeabi_fmul>
 800b23c:	4601      	mov	r1, r0
 800b23e:	4630      	mov	r0, r6
 800b240:	f7f5 fc78 	bl	8000b34 <__addsf3>
 800b244:	4607      	mov	r7, r0
 800b246:	4601      	mov	r1, r0
 800b248:	4648      	mov	r0, r9
 800b24a:	f7f5 fc73 	bl	8000b34 <__addsf3>
 800b24e:	4649      	mov	r1, r9
 800b250:	4606      	mov	r6, r0
 800b252:	f7f5 fc6d 	bl	8000b30 <__aeabi_fsub>
 800b256:	4601      	mov	r1, r0
 800b258:	4638      	mov	r0, r7
 800b25a:	f7f5 fc69 	bl	8000b30 <__aeabi_fsub>
 800b25e:	4631      	mov	r1, r6
 800b260:	4680      	mov	r8, r0
 800b262:	4630      	mov	r0, r6
 800b264:	f7f5 fd6e 	bl	8000d44 <__aeabi_fmul>
 800b268:	4607      	mov	r7, r0
 800b26a:	4942      	ldr	r1, [pc, #264]	@ (800b374 <__ieee754_powf+0x6ac>)
 800b26c:	f7f5 fd6a 	bl	8000d44 <__aeabi_fmul>
 800b270:	4941      	ldr	r1, [pc, #260]	@ (800b378 <__ieee754_powf+0x6b0>)
 800b272:	f7f5 fc5d 	bl	8000b30 <__aeabi_fsub>
 800b276:	4639      	mov	r1, r7
 800b278:	f7f5 fd64 	bl	8000d44 <__aeabi_fmul>
 800b27c:	493f      	ldr	r1, [pc, #252]	@ (800b37c <__ieee754_powf+0x6b4>)
 800b27e:	f7f5 fc59 	bl	8000b34 <__addsf3>
 800b282:	4639      	mov	r1, r7
 800b284:	f7f5 fd5e 	bl	8000d44 <__aeabi_fmul>
 800b288:	493d      	ldr	r1, [pc, #244]	@ (800b380 <__ieee754_powf+0x6b8>)
 800b28a:	f7f5 fc51 	bl	8000b30 <__aeabi_fsub>
 800b28e:	4639      	mov	r1, r7
 800b290:	f7f5 fd58 	bl	8000d44 <__aeabi_fmul>
 800b294:	493b      	ldr	r1, [pc, #236]	@ (800b384 <__ieee754_powf+0x6bc>)
 800b296:	f7f5 fc4d 	bl	8000b34 <__addsf3>
 800b29a:	4639      	mov	r1, r7
 800b29c:	f7f5 fd52 	bl	8000d44 <__aeabi_fmul>
 800b2a0:	4601      	mov	r1, r0
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	f7f5 fc44 	bl	8000b30 <__aeabi_fsub>
 800b2a8:	4607      	mov	r7, r0
 800b2aa:	4601      	mov	r1, r0
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7f5 fd49 	bl	8000d44 <__aeabi_fmul>
 800b2b2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b2b6:	4681      	mov	r9, r0
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	f7f5 fc39 	bl	8000b30 <__aeabi_fsub>
 800b2be:	4601      	mov	r1, r0
 800b2c0:	4648      	mov	r0, r9
 800b2c2:	f7f5 fdf3 	bl	8000eac <__aeabi_fdiv>
 800b2c6:	4641      	mov	r1, r8
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f7f5 fd3a 	bl	8000d44 <__aeabi_fmul>
 800b2d0:	4641      	mov	r1, r8
 800b2d2:	f7f5 fc2f 	bl	8000b34 <__addsf3>
 800b2d6:	4601      	mov	r1, r0
 800b2d8:	4638      	mov	r0, r7
 800b2da:	f7f5 fc29 	bl	8000b30 <__aeabi_fsub>
 800b2de:	4631      	mov	r1, r6
 800b2e0:	f7f5 fc26 	bl	8000b30 <__aeabi_fsub>
 800b2e4:	4601      	mov	r1, r0
 800b2e6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b2ea:	f7f5 fc21 	bl	8000b30 <__aeabi_fsub>
 800b2ee:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800b2f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b2f6:	da06      	bge.n	800b306 <__ieee754_powf+0x63e>
 800b2f8:	4621      	mov	r1, r4
 800b2fa:	f000 f955 	bl	800b5a8 <scalbnf>
 800b2fe:	4629      	mov	r1, r5
 800b300:	e549      	b.n	800ad96 <__ieee754_powf+0xce>
 800b302:	2400      	movs	r4, #0
 800b304:	e77d      	b.n	800b202 <__ieee754_powf+0x53a>
 800b306:	4618      	mov	r0, r3
 800b308:	e7f9      	b.n	800b2fe <__ieee754_powf+0x636>
 800b30a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b30e:	e536      	b.n	800ad7e <__ieee754_powf+0xb6>
 800b310:	4639      	mov	r1, r7
 800b312:	e534      	b.n	800ad7e <__ieee754_powf+0xb6>
 800b314:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800b318:	f43f ad23 	beq.w	800ad62 <__ieee754_powf+0x9a>
 800b31c:	2502      	movs	r5, #2
 800b31e:	4648      	mov	r0, r9
 800b320:	f000 f93e 	bl	800b5a0 <fabsf>
 800b324:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800b328:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800b32c:	46c2      	mov	sl, r8
 800b32e:	4601      	mov	r1, r0
 800b330:	d003      	beq.n	800b33a <__ieee754_powf+0x672>
 800b332:	f1b8 0f00 	cmp.w	r8, #0
 800b336:	f47f ad43 	bne.w	800adc0 <__ieee754_powf+0xf8>
 800b33a:	2c00      	cmp	r4, #0
 800b33c:	da04      	bge.n	800b348 <__ieee754_powf+0x680>
 800b33e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b342:	f7f5 fdb3 	bl	8000eac <__aeabi_fdiv>
 800b346:	4601      	mov	r1, r0
 800b348:	2e00      	cmp	r6, #0
 800b34a:	f6bf ad18 	bge.w	800ad7e <__ieee754_powf+0xb6>
 800b34e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800b352:	ea58 0805 	orrs.w	r8, r8, r5
 800b356:	f47f ad2e 	bne.w	800adb6 <__ieee754_powf+0xee>
 800b35a:	4608      	mov	r0, r1
 800b35c:	f7f5 fbe8 	bl	8000b30 <__aeabi_fsub>
 800b360:	4601      	mov	r1, r0
 800b362:	e4f8      	b.n	800ad56 <__ieee754_powf+0x8e>
 800b364:	ff800000 	.word	0xff800000
 800b368:	3f317200 	.word	0x3f317200
 800b36c:	3f317218 	.word	0x3f317218
 800b370:	35bfbe8c 	.word	0x35bfbe8c
 800b374:	3331bb4c 	.word	0x3331bb4c
 800b378:	35ddea0e 	.word	0x35ddea0e
 800b37c:	388ab355 	.word	0x388ab355
 800b380:	3b360b61 	.word	0x3b360b61
 800b384:	3e2aaaab 	.word	0x3e2aaaab

0800b388 <atanf>:
 800b388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800b390:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800b394:	4604      	mov	r4, r0
 800b396:	4680      	mov	r8, r0
 800b398:	d30e      	bcc.n	800b3b8 <atanf+0x30>
 800b39a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b39e:	d904      	bls.n	800b3aa <atanf+0x22>
 800b3a0:	4601      	mov	r1, r0
 800b3a2:	f7f5 fbc7 	bl	8000b34 <__addsf3>
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	e003      	b.n	800b3b2 <atanf+0x2a>
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	f340 80ce 	ble.w	800b54c <atanf+0x1c4>
 800b3b0:	4c67      	ldr	r4, [pc, #412]	@ (800b550 <atanf+0x1c8>)
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b8:	4b66      	ldr	r3, [pc, #408]	@ (800b554 <atanf+0x1cc>)
 800b3ba:	429d      	cmp	r5, r3
 800b3bc:	d80e      	bhi.n	800b3dc <atanf+0x54>
 800b3be:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800b3c2:	d208      	bcs.n	800b3d6 <atanf+0x4e>
 800b3c4:	4964      	ldr	r1, [pc, #400]	@ (800b558 <atanf+0x1d0>)
 800b3c6:	f7f5 fbb5 	bl	8000b34 <__addsf3>
 800b3ca:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b3ce:	f7f5 fe75 	bl	80010bc <__aeabi_fcmpgt>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d1ed      	bne.n	800b3b2 <atanf+0x2a>
 800b3d6:	f04f 36ff 	mov.w	r6, #4294967295
 800b3da:	e01c      	b.n	800b416 <atanf+0x8e>
 800b3dc:	f000 f8e0 	bl	800b5a0 <fabsf>
 800b3e0:	4b5e      	ldr	r3, [pc, #376]	@ (800b55c <atanf+0x1d4>)
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	429d      	cmp	r5, r3
 800b3e6:	d87c      	bhi.n	800b4e2 <atanf+0x15a>
 800b3e8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800b3ec:	429d      	cmp	r5, r3
 800b3ee:	d867      	bhi.n	800b4c0 <atanf+0x138>
 800b3f0:	4601      	mov	r1, r0
 800b3f2:	f7f5 fb9f 	bl	8000b34 <__addsf3>
 800b3f6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b3fa:	f7f5 fb99 	bl	8000b30 <__aeabi_fsub>
 800b3fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b402:	4605      	mov	r5, r0
 800b404:	4620      	mov	r0, r4
 800b406:	f7f5 fb95 	bl	8000b34 <__addsf3>
 800b40a:	4601      	mov	r1, r0
 800b40c:	4628      	mov	r0, r5
 800b40e:	f7f5 fd4d 	bl	8000eac <__aeabi_fdiv>
 800b412:	2600      	movs	r6, #0
 800b414:	4604      	mov	r4, r0
 800b416:	4621      	mov	r1, r4
 800b418:	4620      	mov	r0, r4
 800b41a:	f7f5 fc93 	bl	8000d44 <__aeabi_fmul>
 800b41e:	4601      	mov	r1, r0
 800b420:	4607      	mov	r7, r0
 800b422:	f7f5 fc8f 	bl	8000d44 <__aeabi_fmul>
 800b426:	4605      	mov	r5, r0
 800b428:	494d      	ldr	r1, [pc, #308]	@ (800b560 <atanf+0x1d8>)
 800b42a:	f7f5 fc8b 	bl	8000d44 <__aeabi_fmul>
 800b42e:	494d      	ldr	r1, [pc, #308]	@ (800b564 <atanf+0x1dc>)
 800b430:	f7f5 fb80 	bl	8000b34 <__addsf3>
 800b434:	4629      	mov	r1, r5
 800b436:	f7f5 fc85 	bl	8000d44 <__aeabi_fmul>
 800b43a:	494b      	ldr	r1, [pc, #300]	@ (800b568 <atanf+0x1e0>)
 800b43c:	f7f5 fb7a 	bl	8000b34 <__addsf3>
 800b440:	4629      	mov	r1, r5
 800b442:	f7f5 fc7f 	bl	8000d44 <__aeabi_fmul>
 800b446:	4949      	ldr	r1, [pc, #292]	@ (800b56c <atanf+0x1e4>)
 800b448:	f7f5 fb74 	bl	8000b34 <__addsf3>
 800b44c:	4629      	mov	r1, r5
 800b44e:	f7f5 fc79 	bl	8000d44 <__aeabi_fmul>
 800b452:	4947      	ldr	r1, [pc, #284]	@ (800b570 <atanf+0x1e8>)
 800b454:	f7f5 fb6e 	bl	8000b34 <__addsf3>
 800b458:	4629      	mov	r1, r5
 800b45a:	f7f5 fc73 	bl	8000d44 <__aeabi_fmul>
 800b45e:	4945      	ldr	r1, [pc, #276]	@ (800b574 <atanf+0x1ec>)
 800b460:	f7f5 fb68 	bl	8000b34 <__addsf3>
 800b464:	4639      	mov	r1, r7
 800b466:	f7f5 fc6d 	bl	8000d44 <__aeabi_fmul>
 800b46a:	4943      	ldr	r1, [pc, #268]	@ (800b578 <atanf+0x1f0>)
 800b46c:	4607      	mov	r7, r0
 800b46e:	4628      	mov	r0, r5
 800b470:	f7f5 fc68 	bl	8000d44 <__aeabi_fmul>
 800b474:	4941      	ldr	r1, [pc, #260]	@ (800b57c <atanf+0x1f4>)
 800b476:	f7f5 fb5b 	bl	8000b30 <__aeabi_fsub>
 800b47a:	4629      	mov	r1, r5
 800b47c:	f7f5 fc62 	bl	8000d44 <__aeabi_fmul>
 800b480:	493f      	ldr	r1, [pc, #252]	@ (800b580 <atanf+0x1f8>)
 800b482:	f7f5 fb55 	bl	8000b30 <__aeabi_fsub>
 800b486:	4629      	mov	r1, r5
 800b488:	f7f5 fc5c 	bl	8000d44 <__aeabi_fmul>
 800b48c:	493d      	ldr	r1, [pc, #244]	@ (800b584 <atanf+0x1fc>)
 800b48e:	f7f5 fb4f 	bl	8000b30 <__aeabi_fsub>
 800b492:	4629      	mov	r1, r5
 800b494:	f7f5 fc56 	bl	8000d44 <__aeabi_fmul>
 800b498:	493b      	ldr	r1, [pc, #236]	@ (800b588 <atanf+0x200>)
 800b49a:	f7f5 fb49 	bl	8000b30 <__aeabi_fsub>
 800b49e:	4629      	mov	r1, r5
 800b4a0:	f7f5 fc50 	bl	8000d44 <__aeabi_fmul>
 800b4a4:	4601      	mov	r1, r0
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	f7f5 fb44 	bl	8000b34 <__addsf3>
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	f7f5 fc49 	bl	8000d44 <__aeabi_fmul>
 800b4b2:	1c73      	adds	r3, r6, #1
 800b4b4:	4601      	mov	r1, r0
 800b4b6:	d133      	bne.n	800b520 <atanf+0x198>
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f7f5 fb39 	bl	8000b30 <__aeabi_fsub>
 800b4be:	e772      	b.n	800b3a6 <atanf+0x1e>
 800b4c0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b4c4:	f7f5 fb34 	bl	8000b30 <__aeabi_fsub>
 800b4c8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f7f5 fb30 	bl	8000b34 <__addsf3>
 800b4d4:	4601      	mov	r1, r0
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f7f5 fce8 	bl	8000eac <__aeabi_fdiv>
 800b4dc:	2601      	movs	r6, #1
 800b4de:	4604      	mov	r4, r0
 800b4e0:	e799      	b.n	800b416 <atanf+0x8e>
 800b4e2:	4b2a      	ldr	r3, [pc, #168]	@ (800b58c <atanf+0x204>)
 800b4e4:	429d      	cmp	r5, r3
 800b4e6:	d814      	bhi.n	800b512 <atanf+0x18a>
 800b4e8:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800b4ec:	f7f5 fb20 	bl	8000b30 <__aeabi_fsub>
 800b4f0:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800b4f4:	4605      	mov	r5, r0
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f7f5 fc24 	bl	8000d44 <__aeabi_fmul>
 800b4fc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b500:	f7f5 fb18 	bl	8000b34 <__addsf3>
 800b504:	4601      	mov	r1, r0
 800b506:	4628      	mov	r0, r5
 800b508:	f7f5 fcd0 	bl	8000eac <__aeabi_fdiv>
 800b50c:	2602      	movs	r6, #2
 800b50e:	4604      	mov	r4, r0
 800b510:	e781      	b.n	800b416 <atanf+0x8e>
 800b512:	4601      	mov	r1, r0
 800b514:	481e      	ldr	r0, [pc, #120]	@ (800b590 <atanf+0x208>)
 800b516:	f7f5 fcc9 	bl	8000eac <__aeabi_fdiv>
 800b51a:	2603      	movs	r6, #3
 800b51c:	4604      	mov	r4, r0
 800b51e:	e77a      	b.n	800b416 <atanf+0x8e>
 800b520:	4b1c      	ldr	r3, [pc, #112]	@ (800b594 <atanf+0x20c>)
 800b522:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b526:	f7f5 fb03 	bl	8000b30 <__aeabi_fsub>
 800b52a:	4621      	mov	r1, r4
 800b52c:	f7f5 fb00 	bl	8000b30 <__aeabi_fsub>
 800b530:	4b19      	ldr	r3, [pc, #100]	@ (800b598 <atanf+0x210>)
 800b532:	4601      	mov	r1, r0
 800b534:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b538:	f7f5 fafa 	bl	8000b30 <__aeabi_fsub>
 800b53c:	f1b8 0f00 	cmp.w	r8, #0
 800b540:	4604      	mov	r4, r0
 800b542:	f6bf af36 	bge.w	800b3b2 <atanf+0x2a>
 800b546:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800b54a:	e732      	b.n	800b3b2 <atanf+0x2a>
 800b54c:	4c13      	ldr	r4, [pc, #76]	@ (800b59c <atanf+0x214>)
 800b54e:	e730      	b.n	800b3b2 <atanf+0x2a>
 800b550:	3fc90fdb 	.word	0x3fc90fdb
 800b554:	3edfffff 	.word	0x3edfffff
 800b558:	7149f2ca 	.word	0x7149f2ca
 800b55c:	3f97ffff 	.word	0x3f97ffff
 800b560:	3c8569d7 	.word	0x3c8569d7
 800b564:	3d4bda59 	.word	0x3d4bda59
 800b568:	3d886b35 	.word	0x3d886b35
 800b56c:	3dba2e6e 	.word	0x3dba2e6e
 800b570:	3e124925 	.word	0x3e124925
 800b574:	3eaaaaab 	.word	0x3eaaaaab
 800b578:	bd15a221 	.word	0xbd15a221
 800b57c:	3d6ef16b 	.word	0x3d6ef16b
 800b580:	3d9d8795 	.word	0x3d9d8795
 800b584:	3de38e38 	.word	0x3de38e38
 800b588:	3e4ccccd 	.word	0x3e4ccccd
 800b58c:	401bffff 	.word	0x401bffff
 800b590:	bf800000 	.word	0xbf800000
 800b594:	0800bb3c 	.word	0x0800bb3c
 800b598:	0800bb4c 	.word	0x0800bb4c
 800b59c:	bfc90fdb 	.word	0xbfc90fdb

0800b5a0 <fabsf>:
 800b5a0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b5a4:	4770      	bx	lr
	...

0800b5a8 <scalbnf>:
 800b5a8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	460d      	mov	r5, r1
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	d02e      	beq.n	800b614 <scalbnf+0x6c>
 800b5b6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b5ba:	d304      	bcc.n	800b5c6 <scalbnf+0x1e>
 800b5bc:	4601      	mov	r1, r0
 800b5be:	f7f5 fab9 	bl	8000b34 <__addsf3>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	e026      	b.n	800b614 <scalbnf+0x6c>
 800b5c6:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800b5ca:	d118      	bne.n	800b5fe <scalbnf+0x56>
 800b5cc:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800b5d0:	f7f5 fbb8 	bl	8000d44 <__aeabi_fmul>
 800b5d4:	4a17      	ldr	r2, [pc, #92]	@ (800b634 <scalbnf+0x8c>)
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	4295      	cmp	r5, r2
 800b5da:	db0c      	blt.n	800b5f6 <scalbnf+0x4e>
 800b5dc:	4604      	mov	r4, r0
 800b5de:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800b5e2:	3a19      	subs	r2, #25
 800b5e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b5e8:	428d      	cmp	r5, r1
 800b5ea:	dd0a      	ble.n	800b602 <scalbnf+0x5a>
 800b5ec:	4912      	ldr	r1, [pc, #72]	@ (800b638 <scalbnf+0x90>)
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f361 001e 	bfi	r0, r1, #0, #31
 800b5f4:	e000      	b.n	800b5f8 <scalbnf+0x50>
 800b5f6:	4911      	ldr	r1, [pc, #68]	@ (800b63c <scalbnf+0x94>)
 800b5f8:	f7f5 fba4 	bl	8000d44 <__aeabi_fmul>
 800b5fc:	e7e1      	b.n	800b5c2 <scalbnf+0x1a>
 800b5fe:	0dd2      	lsrs	r2, r2, #23
 800b600:	e7f0      	b.n	800b5e4 <scalbnf+0x3c>
 800b602:	1951      	adds	r1, r2, r5
 800b604:	29fe      	cmp	r1, #254	@ 0xfe
 800b606:	dcf1      	bgt.n	800b5ec <scalbnf+0x44>
 800b608:	2900      	cmp	r1, #0
 800b60a:	dd05      	ble.n	800b618 <scalbnf+0x70>
 800b60c:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800b610:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800b614:	4618      	mov	r0, r3
 800b616:	bd38      	pop	{r3, r4, r5, pc}
 800b618:	f111 0f16 	cmn.w	r1, #22
 800b61c:	da01      	bge.n	800b622 <scalbnf+0x7a>
 800b61e:	4907      	ldr	r1, [pc, #28]	@ (800b63c <scalbnf+0x94>)
 800b620:	e7e5      	b.n	800b5ee <scalbnf+0x46>
 800b622:	f101 0019 	add.w	r0, r1, #25
 800b626:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800b62a:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800b62e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800b632:	e7e1      	b.n	800b5f8 <scalbnf+0x50>
 800b634:	ffff3cb0 	.word	0xffff3cb0
 800b638:	7149f2ca 	.word	0x7149f2ca
 800b63c:	0da24260 	.word	0x0da24260

0800b640 <with_errnof>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4604      	mov	r4, r0
 800b644:	460d      	mov	r5, r1
 800b646:	f7fd f94f 	bl	80088e8 <__errno>
 800b64a:	6005      	str	r5, [r0, #0]
 800b64c:	4620      	mov	r0, r4
 800b64e:	bd38      	pop	{r3, r4, r5, pc}

0800b650 <xflowf>:
 800b650:	b508      	push	{r3, lr}
 800b652:	b140      	cbz	r0, 800b666 <xflowf+0x16>
 800b654:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800b658:	f7f5 fb74 	bl	8000d44 <__aeabi_fmul>
 800b65c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b660:	2122      	movs	r1, #34	@ 0x22
 800b662:	f7ff bfed 	b.w	800b640 <with_errnof>
 800b666:	4608      	mov	r0, r1
 800b668:	e7f6      	b.n	800b658 <xflowf+0x8>

0800b66a <__math_uflowf>:
 800b66a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800b66e:	f7ff bfef 	b.w	800b650 <xflowf>

0800b672 <__math_oflowf>:
 800b672:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800b676:	f7ff bfeb 	b.w	800b650 <xflowf>
	...

0800b67c <_init>:
 800b67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67e:	bf00      	nop
 800b680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b682:	bc08      	pop	{r3}
 800b684:	469e      	mov	lr, r3
 800b686:	4770      	bx	lr

0800b688 <_fini>:
 800b688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68a:	bf00      	nop
 800b68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b68e:	bc08      	pop	{r3}
 800b690:	469e      	mov	lr, r3
 800b692:	4770      	bx	lr
