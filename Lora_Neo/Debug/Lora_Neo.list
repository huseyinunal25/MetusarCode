
Lora_Neo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065fc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08006710  08006710  00007710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b1c  08006b1c  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b1c  08006b1c  00007b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b24  08006b24  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b24  08006b24  00007b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b28  08006b28  00007b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006b2c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001d8  08006d00  000081d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08006d00  00008510  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000858d  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa6  00000000  00000000  0001078a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  00012230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e2  00000000  00000000  000129f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001823f  00000000  00000000  00012fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c0d  00000000  00000000  0002b211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000853dc  00000000  00000000  00034e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba1fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa4  00000000  00000000  000ba240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000bd1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080066f4 	.word	0x080066f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080066f4 	.word	0x080066f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d106      	bne.n	8000aaa <prv_parse_number+0x22>
        t = gh->p.term_str;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3371      	adds	r3, #113	@ 0x71
 8000aa0:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 8000aa2:	e002      	b.n	8000aaa <prv_parse_number+0x22>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <prv_parse_number+0x30>
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b20      	cmp	r3, #32
 8000ab6:	d0f5      	beq.n	8000aa4 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b2d      	cmp	r3, #45	@ 0x2d
 8000abe:	d104      	bne.n	8000aca <prv_parse_number+0x42>
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <prv_parse_number+0x44>
 8000aca:	2300      	movs	r3, #0
 8000acc:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8000ace:	e00d      	b.n	8000aec <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	461a      	mov	r2, r3
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	3b30      	subs	r3, #48	@ 0x30
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <prv_parse_number+0x7a>
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b2f      	cmp	r3, #47	@ 0x2f
 8000af8:	d903      	bls.n	8000b02 <prv_parse_number+0x7a>
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b39      	cmp	r3, #57	@ 0x39
 8000b00:	d9e6      	bls.n	8000ad0 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8000b02:	7afb      	ldrb	r3, [r7, #11]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <prv_parse_number+0x86>
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	425b      	negs	r3, r3
 8000b0c:	e000      	b.n	8000b10 <prv_parse_number+0x88>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
	...

08000b1c <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1;
 8000b26:	f04f 0200 	mov.w	r2, #0
 8000b2a:	f04f 0300 	mov.w	r3, #0
 8000b2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000b32:	f04f 0200 	mov.w	r2, #0
 8000b36:	4b4b      	ldr	r3, [pc, #300]	@ (8000c64 <prv_parse_float_number+0x148>)
 8000b38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int sign = 1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]

    if (t == NULL) {
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d106      	bne.n	8000b54 <prv_parse_float_number+0x38>
        t = gh->p.term_str;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3371      	adds	r3, #113	@ 0x71
 8000b4a:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 8000b4c:	e002      	b.n	8000b54 <prv_parse_float_number+0x38>
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <prv_parse_float_number+0x46>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b20      	cmp	r3, #32
 8000b60:	d0f5      	beq.n	8000b4e <prv_parse_float_number+0x32>

    if (*t == '-') { /* Check sign */
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b2d      	cmp	r3, #45	@ 0x2d
 8000b68:	d124      	bne.n	8000bb4 <prv_parse_float_number+0x98>
        sign = -1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	60fb      	str	r3, [r7, #12]
        ++t;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Convert main part */
 8000b76:	e01d      	b.n	8000bb4 <prv_parse_float_number+0x98>
        value = value * (lwgps_float_t)10 + CTN(*t);
 8000b78:	f04f 0200 	mov.w	r2, #0
 8000b7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c68 <prv_parse_float_number+0x14c>)
 8000b7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b82:	f7ff fca9 	bl	80004d8 <__aeabi_dmul>
 8000b86:	4602      	mov	r2, r0
 8000b88:	460b      	mov	r3, r1
 8000b8a:	4614      	mov	r4, r2
 8000b8c:	461d      	mov	r5, r3
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	3b30      	subs	r3, #48	@ 0x30
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fc35 	bl	8000404 <__aeabi_i2d>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	4629      	mov	r1, r5
 8000ba2:	f7ff fae3 	bl	800016c <__adddf3>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	460b      	mov	r3, r1
 8000baa:	e9c7 2306 	strd	r2, r3, [r7, #24]
        ++t;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Convert main part */
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b2f      	cmp	r3, #47	@ 0x2f
 8000bba:	d903      	bls.n	8000bc4 <prv_parse_float_number+0xa8>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b39      	cmp	r3, #57	@ 0x39
 8000bc2:	d9d9      	bls.n	8000b78 <prv_parse_float_number+0x5c>
    }
    if (*t == '.') { /* Skip the dot character */
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bca:	d12c      	bne.n	8000c26 <prv_parse_float_number+0x10a>
        ++t;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Get the power */
 8000bd2:	e028      	b.n	8000c26 <prv_parse_float_number+0x10a>
        value = value * (lwgps_float_t)10 + CTN(*t);
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	4b23      	ldr	r3, [pc, #140]	@ (8000c68 <prv_parse_float_number+0x14c>)
 8000bda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000bde:	f7ff fc7b 	bl	80004d8 <__aeabi_dmul>
 8000be2:	4602      	mov	r2, r0
 8000be4:	460b      	mov	r3, r1
 8000be6:	4614      	mov	r4, r2
 8000be8:	461d      	mov	r5, r3
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	3b30      	subs	r3, #48	@ 0x30
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fc07 	bl	8000404 <__aeabi_i2d>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	4629      	mov	r1, r5
 8000bfe:	f7ff fab5 	bl	800016c <__adddf3>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	e9c7 2306 	strd	r2, r3, [r7, #24]
        power *= (lwgps_float_t)10.0;
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <prv_parse_float_number+0x14c>)
 8000c10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c14:	f7ff fc60 	bl	80004d8 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ++t;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Get the power */
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c2c:	d903      	bls.n	8000c36 <prv_parse_float_number+0x11a>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b39      	cmp	r3, #57	@ 0x39
 8000c34:	d9ce      	bls.n	8000bd4 <prv_parse_float_number+0xb8>
    }
    return sign * value / power;
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f7ff fbe4 	bl	8000404 <__aeabi_i2d>
 8000c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000c40:	f7ff fc4a 	bl	80004d8 <__aeabi_dmul>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4610      	mov	r0, r2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c50:	f7ff fd6c 	bl	800072c <__aeabi_ddiv>
 8000c54:	4602      	mov	r2, r0
 8000c56:	460b      	mov	r3, r1
}
 8000c58:	4610      	mov	r0, r2
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	3720      	adds	r7, #32
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bdb0      	pop	{r4, r5, r7, pc}
 8000c62:	bf00      	nop
 8000c64:	3ff00000 	.word	0x3ff00000
 8000c68:	40240000 	.word	0x40240000

08000c6c <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL); /* Parse value as double */
 8000c74:	2100      	movs	r1, #0
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ff50 	bl	8000b1c <prv_parse_float_number>
 8000c7c:	e9c7 0106 	strd	r0, r1, [r7, #24]
    deg = FLT((int)((int)ll / 100));       /* Get absolute degrees value, interested in integer part only */
 8000c80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c84:	f7ff fed8 	bl	8000a38 <__aeabi_d2iz>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf8 <prv_parse_lat_long+0x8c>)
 8000c8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c90:	1152      	asrs	r2, r2, #5
 8000c92:	17db      	asrs	r3, r3, #31
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fbb4 	bl	8000404 <__aeabi_i2d>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));           /* Get remaining part from full number, minutes */
 8000ca4:	f04f 0200 	mov.w	r2, #0
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <prv_parse_lat_long+0x90>)
 8000caa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cae:	f7ff fc13 	bl	80004d8 <__aeabi_dmul>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cba:	f7ff fa55 	bl	8000168 <__aeabi_dsub>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));          /* Calculate latitude/longitude */
 8000cc6:	f04f 0200 	mov.w	r2, #0
 8000cca:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <prv_parse_lat_long+0x94>)
 8000ccc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cd0:	f7ff fd2c 	bl	800072c <__aeabi_ddiv>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cdc:	f7ff fa46 	bl	800016c <__adddf3>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8000ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8000cec:	4610      	mov	r0, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	51eb851f 	.word	0x51eb851f
 8000cfc:	40590000 	.word	0x40590000
 8000d00:	404e0000 	.word	0x404e0000

08000d04 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8000d04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) { /* Check string type */
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8000d14:	2900      	cmp	r1, #0
 8000d16:	d169      	bne.n	8000dec <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3371      	adds	r3, #113	@ 0x71
 8000d1c:	2206      	movs	r2, #6
 8000d1e:	49b6      	ldr	r1, [pc, #728]	@ (8000ff8 <prv_parse_term+0x2f4>)
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 fc06 	bl	8004532 <strncmp>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d009      	beq.n	8000d40 <prv_parse_term+0x3c>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3371      	adds	r3, #113	@ 0x71
 8000d30:	2206      	movs	r2, #6
 8000d32:	49b2      	ldr	r1, [pc, #712]	@ (8000ffc <prv_parse_term+0x2f8>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 fbfc 	bl	8004532 <strncmp>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d104      	bne.n	8000d4a <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2201      	movs	r2, #1
 8000d44:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8000d48:	e04e      	b.n	8000de8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3371      	adds	r3, #113	@ 0x71
 8000d4e:	2206      	movs	r2, #6
 8000d50:	49ab      	ldr	r1, [pc, #684]	@ (8001000 <prv_parse_term+0x2fc>)
 8000d52:	4618      	mov	r0, r3
 8000d54:	f003 fbed 	bl	8004532 <strncmp>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d009      	beq.n	8000d72 <prv_parse_term+0x6e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3371      	adds	r3, #113	@ 0x71
 8000d62:	2206      	movs	r2, #6
 8000d64:	49a7      	ldr	r1, [pc, #668]	@ (8001004 <prv_parse_term+0x300>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 fbe3 	bl	8004532 <strncmp>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d104      	bne.n	8000d7c <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2202      	movs	r2, #2
 8000d76:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8000d7a:	e035      	b.n	8000de8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3371      	adds	r3, #113	@ 0x71
 8000d80:	2206      	movs	r2, #6
 8000d82:	49a1      	ldr	r1, [pc, #644]	@ (8001008 <prv_parse_term+0x304>)
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 fbd4 	bl	8004532 <strncmp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d009      	beq.n	8000da4 <prv_parse_term+0xa0>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3371      	adds	r3, #113	@ 0x71
 8000d94:	2206      	movs	r2, #6
 8000d96:	499d      	ldr	r1, [pc, #628]	@ (800100c <prv_parse_term+0x308>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 fbca 	bl	8004532 <strncmp>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d104      	bne.n	8000dae <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2203      	movs	r2, #3
 8000da8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8000dac:	e01c      	b.n	8000de8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3371      	adds	r3, #113	@ 0x71
 8000db2:	2206      	movs	r2, #6
 8000db4:	4996      	ldr	r1, [pc, #600]	@ (8001010 <prv_parse_term+0x30c>)
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 fbbb 	bl	8004532 <strncmp>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d009      	beq.n	8000dd6 <prv_parse_term+0xd2>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3371      	adds	r3, #113	@ 0x71
 8000dc6:	2206      	movs	r2, #6
 8000dc8:	4992      	ldr	r1, [pc, #584]	@ (8001014 <prv_parse_term+0x310>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f003 fbb1 	bl	8004532 <strncmp>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d104      	bne.n	8000de0 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2204      	movs	r2, #4
 8000dda:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8000dde:	e003      	b.n	8000de8 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e21d      	b.n	8001228 <prv_parse_term+0x524>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8000df2:	2900      	cmp	r1, #0
 8000df4:	f000 8217 	beq.w	8001226 <prv_parse_term+0x522>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) { /* Process GPGGA statement */
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8000dfe:	2901      	cmp	r1, #1
 8000e00:	f040 80c1 	bne.w	8000f86 <prv_parse_term+0x282>
        switch (gh->p.term_num) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	2b0a      	cmp	r3, #10
 8000e0e:	f200 81ff 	bhi.w	8001210 <prv_parse_term+0x50c>
 8000e12:	a201      	add	r2, pc, #4	@ (adr r2, 8000e18 <prv_parse_term+0x114>)
 8000e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e18:	08000e45 	.word	0x08000e45
 8000e1c:	08000ebf 	.word	0x08000ebf
 8000e20:	08000ed1 	.word	0x08000ed1
 8000e24:	08000efb 	.word	0x08000efb
 8000e28:	08000f0d 	.word	0x08000f0d
 8000e2c:	08000f37 	.word	0x08000f37
 8000e30:	08000f4b 	.word	0x08000f4b
 8000e34:	08001211 	.word	0x08001211
 8000e38:	08000f5f 	.word	0x08000f5f
 8000e3c:	08001211 	.word	0x08001211
 8000e40:	08000f73 	.word	0x08000f73
            case 1: /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000e4a:	3b30      	subs	r3, #48	@ 0x30
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	461a      	mov	r2, r3
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8000e5e:	4413      	add	r3, r2
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	3b30      	subs	r3, #48	@ 0x30
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8000e72:	3b30      	subs	r3, #48	@ 0x30
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	461a      	mov	r2, r3
 8000e78:	0092      	lsls	r2, r2, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8000e86:	4413      	add	r3, r2
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	3b30      	subs	r3, #48	@ 0x30
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8000e9a:	3b30      	subs	r3, #48	@ 0x30
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	0092      	lsls	r2, r2, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8000eae:	4413      	add	r3, r2
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	3b30      	subs	r3, #48	@ 0x30
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 8000ebc:	e1b3      	b.n	8001226 <prv_parse_term+0x522>
            case 2:                                               /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh); /* Parse latitude */
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fed4 	bl	8000c6c <prv_parse_lat_long>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
                break;
 8000ece:	e1aa      	b.n	8001226 <prv_parse_term+0x522>
            case 3: /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000ed6:	2b53      	cmp	r3, #83	@ 0x53
 8000ed8:	d005      	beq.n	8000ee6 <prv_parse_term+0x1e2>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000ee0:	2b73      	cmp	r3, #115	@ 0x73
 8000ee2:	f040 8197 	bne.w	8001214 <prv_parse_term+0x510>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8000eec:	4690      	mov	r8, r2
 8000eee:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 8000ef8:	e18c      	b.n	8001214 <prv_parse_term+0x510>
            case 4:                                                /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh); /* Parse longitude */
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff feb6 	bl	8000c6c <prv_parse_lat_long>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
                break;
 8000f0a:	e18c      	b.n	8001226 <prv_parse_term+0x522>
            case 5: /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000f12:	2b57      	cmp	r3, #87	@ 0x57
 8000f14:	d005      	beq.n	8000f22 <prv_parse_term+0x21e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8000f1c:	2b77      	cmp	r3, #119	@ 0x77
 8000f1e:	f040 817b 	bne.w	8001218 <prv_parse_term+0x514>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8000f28:	4614      	mov	r4, r2
 8000f2a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 8000f34:	e170      	b.n	8001218 <prv_parse_term+0x514>
            case 6: /* Fix status */ gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL); break;
 8000f36:	2100      	movs	r1, #0
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fda5 	bl	8000a88 <prv_parse_number>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
 8000f48:	e16d      	b.n	8001226 <prv_parse_term+0x522>
            case 7: /* Satellites in use */ gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL); break;
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff fd9b 	bl	8000a88 <prv_parse_number>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
 8000f5c:	e163      	b.n	8001226 <prv_parse_term+0x522>
            case 9: /* Altitude */ gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL); break;
 8000f5e:	2100      	movs	r1, #0
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff fddb 	bl	8000b1c <prv_parse_float_number>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
 8000f70:	e159      	b.n	8001226 <prv_parse_term+0x522>
            case 11: /* Altitude above ellipsoid */ gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL); break;
 8000f72:	2100      	movs	r1, #0
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fdd1 	bl	8000b1c <prv_parse_float_number>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
 8000f84:	e14f      	b.n	8001226 <prv_parse_term+0x522>
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) { /* Process GPGSA statement */
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8000f8c:	2902      	cmp	r1, #2
 8000f8e:	d17d      	bne.n	800108c <prv_parse_term+0x388>
        switch (gh->p.term_num) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8000f96:	3b02      	subs	r3, #2
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d85b      	bhi.n	8001054 <prv_parse_term+0x350>
 8000f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa4 <prv_parse_term+0x2a0>)
 8000f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa2:	bf00      	nop
 8000fa4:	08000fe5 	.word	0x08000fe5
 8000fa8:	08001055 	.word	0x08001055
 8000fac:	08001055 	.word	0x08001055
 8000fb0:	08001055 	.word	0x08001055
 8000fb4:	08001055 	.word	0x08001055
 8000fb8:	08001055 	.word	0x08001055
 8000fbc:	08001055 	.word	0x08001055
 8000fc0:	08001055 	.word	0x08001055
 8000fc4:	08001055 	.word	0x08001055
 8000fc8:	08001055 	.word	0x08001055
 8000fcc:	08001055 	.word	0x08001055
 8000fd0:	08001055 	.word	0x08001055
 8000fd4:	08001055 	.word	0x08001055
 8000fd8:	08001019 	.word	0x08001019
 8000fdc:	0800102d 	.word	0x0800102d
 8000fe0:	08001041 	.word	0x08001041
            case 2: /* Process fix mode */ gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL); break;
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fd4e 	bl	8000a88 <prv_parse_number>
 8000fec:	4603      	mov	r3, r0
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8000ff6:	e116      	b.n	8001226 <prv_parse_term+0x522>
 8000ff8:	08006710 	.word	0x08006710
 8000ffc:	08006718 	.word	0x08006718
 8001000:	08006720 	.word	0x08006720
 8001004:	08006728 	.word	0x08006728
 8001008:	08006730 	.word	0x08006730
 800100c:	08006738 	.word	0x08006738
 8001010:	08006740 	.word	0x08006740
 8001014:	08006748 	.word	0x08006748
            case 15: /* Process PDOP */ gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL); break;
 8001018:	2100      	movs	r1, #0
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fd7e 	bl	8000b1c <prv_parse_float_number>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
 800102a:	e0fc      	b.n	8001226 <prv_parse_term+0x522>
            case 16: /* Process HDOP */ gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL); break;
 800102c:	2100      	movs	r1, #0
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fd74 	bl	8000b1c <prv_parse_float_number>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
 800103e:	e0f2      	b.n	8001226 <prv_parse_term+0x522>
            case 17: /* Process VDOP */ gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL); break;
 8001040:	2100      	movs	r1, #0
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fd6a 	bl	8000b1c <prv_parse_float_number>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
 8001052:	e0e8      	b.n	8001226 <prv_parse_term+0x522>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800105a:	2b02      	cmp	r3, #2
 800105c:	f240 80de 	bls.w	800121c <prv_parse_term+0x518>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001066:	2b0e      	cmp	r3, #14
 8001068:	f200 80d8 	bhi.w	800121c <prv_parse_term+0x518>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 800106c:	2100      	movs	r1, #0
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff fd0a 	bl	8000a88 <prv_parse_number>
 8001074:	4602      	mov	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800107c:	3b03      	subs	r3, #3
 800107e:	b2d1      	uxtb	r1, r2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	460a      	mov	r2, r1
 8001086:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 800108a:	e0c7      	b.n	800121c <prv_parse_term+0x518>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) { /* Process GPGSV statement */
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 8001092:	2903      	cmp	r1, #3
 8001094:	d11b      	bne.n	80010ce <prv_parse_term+0x3ca>
        switch (gh->p.term_num) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800109c:	2b02      	cmp	r3, #2
 800109e:	d002      	beq.n	80010a6 <prv_parse_term+0x3a2>
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d00a      	beq.n	80010ba <prv_parse_term+0x3b6>
                            default: break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80010a4:	e0bf      	b.n	8001226 <prv_parse_term+0x522>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80010a6:	2100      	movs	r1, #0
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff fced 	bl	8000a88 <prv_parse_number>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 80010b8:	e0b5      	b.n	8001226 <prv_parse_term+0x522>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80010ba:	2100      	movs	r1, #0
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff fce3 	bl	8000a88 <prv_parse_number>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 80010cc:	e0ab      	b.n	8001226 <prv_parse_term+0x522>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) { /* Process GPRMC statement */
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80010d4:	2904      	cmp	r1, #4
 80010d6:	f040 80a6 	bne.w	8001226 <prv_parse_term+0x522>
        switch (gh->p.term_num) {
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80010e0:	3902      	subs	r1, #2
 80010e2:	2909      	cmp	r1, #9
 80010e4:	f200 809c 	bhi.w	8001220 <prv_parse_term+0x51c>
 80010e8:	a001      	add	r0, pc, #4	@ (adr r0, 80010f0 <prv_parse_term+0x3ec>)
 80010ea:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	08001119 	.word	0x08001119
 80010f4:	08001221 	.word	0x08001221
 80010f8:	08001221 	.word	0x08001221
 80010fc:	08001221 	.word	0x08001221
 8001100:	08001221 	.word	0x08001221
 8001104:	08001133 	.word	0x08001133
 8001108:	08001147 	.word	0x08001147
 800110c:	0800115b 	.word	0x0800115b
 8001110:	080011d5 	.word	0x080011d5
 8001114:	080011e9 	.word	0x080011e9
            case 2: /* Process valid status */ gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A'); break;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800111e:	2b41      	cmp	r3, #65	@ 0x41
 8001120:	bf0c      	ite	eq
 8001122:	2301      	moveq	r3, #1
 8001124:	2300      	movne	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
 8001130:	e079      	b.n	8001226 <prv_parse_term+0x522>
            case 7: /* Process ground speed in knots */ gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL); break;
 8001132:	2100      	movs	r1, #0
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff fcf1 	bl	8000b1c <prv_parse_float_number>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
 8001144:	e06f      	b.n	8001226 <prv_parse_term+0x522>
            case 8: /* Process true ground coarse */ gh->p.data.rmc.course = prv_parse_float_number(gh, NULL); break;
 8001146:	2100      	movs	r1, #0
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fce7 	bl	8000b1c <prv_parse_float_number>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
 8001158:	e065      	b.n	8001226 <prv_parse_term+0x522>
            case 9: /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001160:	3b30      	subs	r3, #48	@ 0x30
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4413      	add	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	b2da      	uxtb	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001174:	4413      	add	r3, r2
 8001176:	b2db      	uxtb	r3, r3
 8001178:	3b30      	subs	r3, #48	@ 0x30
 800117a:	b2da      	uxtb	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001188:	3b30      	subs	r3, #48	@ 0x30
 800118a:	b2db      	uxtb	r3, r3
 800118c:	461a      	mov	r2, r3
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	4413      	add	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800119c:	4413      	add	r3, r2
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3b30      	subs	r3, #48	@ 0x30
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80011b0:	3b30      	subs	r3, #48	@ 0x30
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80011c4:	4413      	add	r3, r2
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	3b30      	subs	r3, #48	@ 0x30
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 80011d2:	e028      	b.n	8001226 <prv_parse_term+0x522>
            case 10: /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80011d4:	2100      	movs	r1, #0
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fca0 	bl	8000b1c <prv_parse_float_number>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                break;
 80011e6:	e01e      	b.n	8001226 <prv_parse_term+0x522>
            case 11: /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80011ee:	2957      	cmp	r1, #87	@ 0x57
 80011f0:	d004      	beq.n	80011fc <prv_parse_term+0x4f8>
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 80011f8:	2977      	cmp	r1, #119	@ 0x77
 80011fa:	d113      	bne.n	8001224 <prv_parse_term+0x520>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 8001202:	4602      	mov	r2, r0
 8001204:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 800120e:	e009      	b.n	8001224 <prv_parse_term+0x520>
            default: break;
 8001210:	bf00      	nop
 8001212:	e008      	b.n	8001226 <prv_parse_term+0x522>
                break;
 8001214:	bf00      	nop
 8001216:	e006      	b.n	8001226 <prv_parse_term+0x522>
                break;
 8001218:	bf00      	nop
 800121a:	e004      	b.n	8001226 <prv_parse_term+0x522>
                break;
 800121c:	bf00      	nop
 800121e:	e002      	b.n	8001226 <prv_parse_term+0x522>
            default: break;
 8001220:	bf00      	nop
 8001222:	e000      	b.n	8001226 <prv_parse_term+0x522>
                break;
 8001224:	bf00      	nop
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001232:	bf00      	nop

08001234 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8001242:	2b2f      	cmp	r3, #47	@ 0x2f
 8001244:	d90d      	bls.n	8001262 <prv_check_crc+0x2e>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800124c:	2b39      	cmp	r3, #57	@ 0x39
 800124e:	d808      	bhi.n	8001262 <prv_check_crc+0x2e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001256:	3b30      	subs	r3, #48	@ 0x30
 8001258:	b2db      	uxtb	r3, r3
 800125a:	b25b      	sxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	b25a      	sxtb	r2, r3
 8001260:	e026      	b.n	80012b0 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8001268:	2b60      	cmp	r3, #96	@ 0x60
 800126a:	d90d      	bls.n	8001288 <prv_check_crc+0x54>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001272:	2b7a      	cmp	r3, #122	@ 0x7a
 8001274:	d808      	bhi.n	8001288 <prv_check_crc+0x54>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800127c:	3b57      	subs	r3, #87	@ 0x57
 800127e:	b2db      	uxtb	r3, r3
 8001280:	b25b      	sxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	b25a      	sxtb	r2, r3
 8001286:	e013      	b.n	80012b0 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 800128e:	2b40      	cmp	r3, #64	@ 0x40
 8001290:	d90d      	bls.n	80012ae <prv_check_crc+0x7a>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001298:	2b5a      	cmp	r3, #90	@ 0x5a
 800129a:	d808      	bhi.n	80012ae <prv_check_crc+0x7a>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80012a2:	3b37      	subs	r3, #55	@ 0x37
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	b25b      	sxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	b25a      	sxtb	r2, r3
 80012ac:	e000      	b.n	80012b0 <prv_check_crc+0x7c>
 80012ae:	2200      	movs	r2, #0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80012b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80012b8:	d90c      	bls.n	80012d4 <prv_check_crc+0xa0>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80012c0:	2b39      	cmp	r3, #57	@ 0x39
 80012c2:	d807      	bhi.n	80012d4 <prv_check_crc+0xa0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	e028      	b.n	8001326 <prv_check_crc+0xf2>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80012da:	2b60      	cmp	r3, #96	@ 0x60
 80012dc:	d90e      	bls.n	80012fc <prv_check_crc+0xc8>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80012e4:	2b7a      	cmp	r3, #122	@ 0x7a
 80012e6:	d809      	bhi.n	80012fc <prv_check_crc+0xc8>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80012ee:	3b57      	subs	r3, #87	@ 0x57
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	e014      	b.n	8001326 <prv_check_crc+0xf2>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001302:	2b40      	cmp	r3, #64	@ 0x40
 8001304:	d90e      	bls.n	8001324 <prv_check_crc+0xf0>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800130c:	2b5a      	cmp	r3, #90	@ 0x5a
 800130e:	d809      	bhi.n	8001324 <prv_check_crc+0xf0>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001316:	3b37      	subs	r3, #55	@ 0x37
 8001318:	b2db      	uxtb	r3, r3
 800131a:	b25b      	sxtb	r3, r3
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	b25b      	sxtb	r3, r3
 8001322:	e000      	b.n	8001326 <prv_check_crc+0xf2>
 8001324:	2300      	movs	r3, #0
 8001326:	4313      	orrs	r3, r2
 8001328:	b25b      	sxtb	r3, r3
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 800132a:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;             /* They must match! */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	429a      	cmp	r2, r3
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001356:	2b01      	cmp	r3, #1
 8001358:	d136      	bne.n	80013c8 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        gh->hours = gh->p.data.gga.hours;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        gh->minutes = gh->p.data.gga.minutes;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        gh->seconds = gh->p.data.gga.seconds;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80013c6:	e061      	b.n	800148c <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d121      	bne.n	8001416 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	33a1      	adds	r3, #161	@ 0xa1
 800140c:	220c      	movs	r2, #12
 800140e:	4619      	mov	r1, r3
 8001410:	f003 f927 	bl	8004662 <memcpy>
 8001414:	e03a      	b.n	800148c <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800141c:	2b03      	cmp	r3, #3
 800141e:	d106      	bne.n	800142e <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800142c:	e02e      	b.n	800148c <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001434:	2b04      	cmp	r3, #4
 8001436:	d129      	bne.n	800148c <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        gh->variation = gh->p.data.rmc.variation;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        gh->date = gh->p.data.rmc.date;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        gh->month = gh->p.data.rmc.month;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        gh->year = gh->p.data.rmc.year;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800148c:	2301      	movs	r3, #1
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh)); /* Reset structure */
 800149e:	22b0      	movs	r2, #176	@ 0xb0
 80014a0:	2100      	movs	r1, #0
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f003 f83d 	bl	8004522 <memset>
    return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                /* Process all bytes */
 80014c2:	e0ad      	b.n	8001620 <lwgps_process+0x16e>
        if (*d == '$') {                         /* Check for beginning of NMEA line */
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b24      	cmp	r3, #36	@ 0x24
 80014ca:	d128      	bne.n	800151e <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p)); /* Reset private memory */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3370      	adds	r3, #112	@ 0x70
 80014d0:	2240      	movs	r2, #64	@ 0x40
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 f824 	bl	8004522 <memset>
            TERM_ADD(gh, *d);                    /* Add character to term */
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80014e0:	2b0b      	cmp	r3, #11
 80014e2:	f200 8097 	bhi.w	8001614 <lwgps_process+0x162>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80014ec:	4619      	mov	r1, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	440b      	add	r3, r1
 80014f6:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001500:	3301      	adds	r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001510:	461a      	mov	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4413      	add	r3, r2
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 800151c:	e07a      	b.n	8001614 <lwgps_process+0x162>
        } else if (*d == ',') {                  /* Term separator character */
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b2c      	cmp	r3, #44	@ 0x2c
 8001524:	d11d      	bne.n	8001562 <lwgps_process+0xb0>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7ff fbec 	bl	8000d04 <prv_parse_term>
            CRC_ADD(gh, *d);                     /* Add character to CRC computation */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	4053      	eors	r3, r2
 8001538:	b2da      	uxtb	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(gh);                       /* Start with next term */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001556:	3301      	adds	r3, #1
 8001558:	b2da      	uxtb	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001560:	e058      	b.n	8001614 <lwgps_process+0x162>
        } else if (*d == '*') {                  /* Start indicates end of data for CRC computation */
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b2a      	cmp	r3, #42	@ 0x2a
 8001568:	d117      	bne.n	800159a <lwgps_process+0xe8>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f7ff fbca 	bl	8000d04 <prv_parse_term>
            gh->p.star = 1;                      /* STAR detected */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(gh);                       /* Start with next term */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800158e:	3301      	adds	r3, #1
 8001590:	b2da      	uxtb	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001598:	e03c      	b.n	8001614 <lwgps_process+0x162>
        } else if (*d == '\r') {
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b0d      	cmp	r3, #13
 80015a0:	d109      	bne.n	80015b6 <lwgps_process+0x104>
            if (prv_check_crc(gh)) { /* Check for CRC result */
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f7ff fe46 	bl	8001234 <prv_check_crc>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d032      	beq.n	8001614 <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh); /* Copy memory from temporary to user memory */
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f7ff feca 	bl	8001348 <prv_copy_from_tmp_memory>
 80015b4:	e02e      	b.n	8001614 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {   /* Add to CRC only if star not yet detected */
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d109      	bne.n	80015d4 <lwgps_process+0x122>
                CRC_ADD(gh, *d); /* Add to CRC */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	4053      	eors	r3, r2
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(gh, *d); /* Add character to term */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80015da:	2b0b      	cmp	r3, #11
 80015dc:	d81a      	bhi.n	8001614 <lwgps_process+0x162>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80015e4:	4619      	mov	r1, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	781a      	ldrb	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	440b      	add	r3, r1
 80015ee:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80015f8:	3301      	adds	r3, #1
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001608:	461a      	mov	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4413      	add	r3, r2
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {                /* Process all bytes */
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3b01      	subs	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f47f af4e 	bne.w	80014c4 <lwgps_process+0x12>
        }
    }
    return 1;
 8001628:	2301      	movs	r3, #1
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_UART_RxCpltCallback>:
uint8_t rx_buffer[128];
uint8_t rx_index = 0;
uint8_t rx_data = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a17      	ldr	r2, [pc, #92]	@ (800169c <HAL_UART_RxCpltCallback+0x68>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d127      	bne.n	8001694 <HAL_UART_RxCpltCallback+0x60>
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001644:	2201      	movs	r2, #1
 8001646:	4916      	ldr	r1, [pc, #88]	@ (80016a0 <HAL_UART_RxCpltCallback+0x6c>)
 8001648:	4814      	ldr	r0, [pc, #80]	@ (800169c <HAL_UART_RxCpltCallback+0x68>)
 800164a:	f001 fc5a 	bl	8002f02 <HAL_UART_Receive_IT>

		if(rx_data != '\n' && rx_index < sizeof(rx_buffer)){
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <HAL_UART_RxCpltCallback+0x6c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b0a      	cmp	r3, #10
 8001654:	d010      	beq.n	8001678 <HAL_UART_RxCpltCallback+0x44>
 8001656:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <HAL_UART_RxCpltCallback+0x70>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b25b      	sxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0b      	blt.n	8001678 <HAL_UART_RxCpltCallback+0x44>
			rx_buffer[rx_index++] = rx_data;
 8001660:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <HAL_UART_RxCpltCallback+0x70>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	b2d1      	uxtb	r1, r2
 8001668:	4a0e      	ldr	r2, [pc, #56]	@ (80016a4 <HAL_UART_RxCpltCallback+0x70>)
 800166a:	7011      	strb	r1, [r2, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <HAL_UART_RxCpltCallback+0x6c>)
 8001670:	7819      	ldrb	r1, [r3, #0]
 8001672:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <HAL_UART_RxCpltCallback+0x74>)
 8001674:	5499      	strb	r1, [r3, r2]
		}


	}

}
 8001676:	e00d      	b.n	8001694 <HAL_UART_RxCpltCallback+0x60>
			lwgps_process(&gps, rx_buffer, rx_index+1);
 8001678:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_UART_RxCpltCallback+0x70>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	461a      	mov	r2, r3
 8001680:	4909      	ldr	r1, [pc, #36]	@ (80016a8 <HAL_UART_RxCpltCallback+0x74>)
 8001682:	480a      	ldr	r0, [pc, #40]	@ (80016ac <HAL_UART_RxCpltCallback+0x78>)
 8001684:	f7ff ff15 	bl	80014b2 <lwgps_process>
			rx_index = 0;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <HAL_UART_RxCpltCallback+0x70>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 800168e:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <HAL_UART_RxCpltCallback+0x6c>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200001f4 	.word	0x200001f4
 80016a0:	200003b9 	.word	0x200003b9
 80016a4:	200003b8 	.word	0x200003b8
 80016a8:	20000338 	.word	0x20000338
 80016ac:	20000288 	.word	0x20000288

080016b0 <print_gps_data>:
void print_gps_data(void) {
 80016b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016b4:	b0a6      	sub	sp, #152	@ 0x98
 80016b6:	af06      	add	r7, sp, #24

	char buffer[100];
	uint16_t len;


	uint8_t hedef_adres_h = 0x00;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	uint8_t hedef_adres_l = 0x02;
 80016be:	2302      	movs	r3, #2
 80016c0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	uint8_t kanal = 0x17;
 80016c4:	2317      	movs	r3, #23
 80016c6:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

    if (gps.is_valid) {
 80016ca:	4b3b      	ldr	r3, [pc, #236]	@ (80017b8 <print_gps_data+0x108>)
 80016cc:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d06c      	beq.n	80017ae <print_gps_data+0xfe>
 80016d4:	466b      	mov	r3, sp
 80016d6:	469a      	mov	sl, r3
        len = sprintf(buffer, "T: %d-%d-%d,E: %f, B: %f\r\n",
                      gps.year, gps.month, gps.date,
 80016d8:	4b37      	ldr	r3, [pc, #220]	@ (80017b8 <print_gps_data+0x108>)
 80016da:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
        len = sprintf(buffer, "T: %d-%d-%d,E: %f, B: %f\r\n",
 80016de:	469c      	mov	ip, r3
                      gps.year, gps.month, gps.date,
 80016e0:	4b35      	ldr	r3, [pc, #212]	@ (80017b8 <print_gps_data+0x108>)
 80016e2:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
        len = sprintf(buffer, "T: %d-%d-%d,E: %f, B: %f\r\n",
 80016e6:	469e      	mov	lr, r3
                      gps.year, gps.month, gps.date,
 80016e8:	4b33      	ldr	r3, [pc, #204]	@ (80017b8 <print_gps_data+0x108>)
 80016ea:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
        len = sprintf(buffer, "T: %d-%d-%d,E: %f, B: %f\r\n",
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	4b31      	ldr	r3, [pc, #196]	@ (80017b8 <print_gps_data+0x108>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	4930      	ldr	r1, [pc, #192]	@ (80017b8 <print_gps_data+0x108>)
 80016f8:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80016fc:	f107 060c 	add.w	r6, r7, #12
 8001700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001704:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4673      	mov	r3, lr
 800170e:	4662      	mov	r2, ip
 8001710:	492a      	ldr	r1, [pc, #168]	@ (80017bc <print_gps_data+0x10c>)
 8001712:	4630      	mov	r0, r6
 8001714:	f002 fea0 	bl	8004458 <siprintf>
 8001718:	4603      	mov	r3, r0
 800171a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
                      gps.latitude, gps.longitude);

        uint8_t paket[3 + len];
 800171e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8001722:	1cd9      	adds	r1, r3, #3
 8001724:	1e4b      	subs	r3, r1, #1
 8001726:	677b      	str	r3, [r7, #116]	@ 0x74
 8001728:	460a      	mov	r2, r1
 800172a:	2300      	movs	r3, #0
 800172c:	4690      	mov	r8, r2
 800172e:	4699      	mov	r9, r3
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800173c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001740:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001744:	460a      	mov	r2, r1
 8001746:	2300      	movs	r3, #0
 8001748:	4614      	mov	r4, r2
 800174a:	461d      	mov	r5, r3
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	00eb      	lsls	r3, r5, #3
 8001756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800175a:	00e2      	lsls	r2, r4, #3
 800175c:	460b      	mov	r3, r1
 800175e:	3307      	adds	r3, #7
 8001760:	08db      	lsrs	r3, r3, #3
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	ebad 0d03 	sub.w	sp, sp, r3
 8001768:	ab06      	add	r3, sp, #24
 800176a:	3300      	adds	r3, #0
 800176c:	673b      	str	r3, [r7, #112]	@ 0x70
        paket[0] = hedef_adres_h;
 800176e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001770:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8001774:	701a      	strb	r2, [r3, #0]
        paket[1] = hedef_adres_l;
 8001776:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001778:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 800177c:	705a      	strb	r2, [r3, #1]
        paket[2] = kanal;
 800177e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001780:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 8001784:	709a      	strb	r2, [r3, #2]
        memcpy(&paket[3], buffer, len);
 8001786:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001788:	3303      	adds	r3, #3
 800178a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 800178e:	f107 010c 	add.w	r1, r7, #12
 8001792:	4618      	mov	r0, r3
 8001794:	f002 ff65 	bl	8004662 <memcpy>

        HAL_UART_Transmit(&huart3, paket, 3 + len , HAL_MAX_DELAY);
 8001798:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800179c:	3303      	adds	r3, #3
 800179e:	b29a      	uxth	r2, r3
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295
 80017a4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80017a6:	4806      	ldr	r0, [pc, #24]	@ (80017c0 <print_gps_data+0x110>)
 80017a8:	f001 fb20 	bl	8002dec <HAL_UART_Transmit>
 80017ac:	46d5      	mov	sp, sl
    }
}
 80017ae:	bf00      	nop
 80017b0:	3780      	adds	r7, #128	@ 0x80
 80017b2:	46bd      	mov	sp, r7
 80017b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017b8:	20000288 	.word	0x20000288
 80017bc:	08006750 	.word	0x08006750
 80017c0:	2000023c 	.word	0x2000023c

080017c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ca:	f000 fae5 	bl	8001d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ce:	f000 f831 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d2:	f000 f8c9 	bl	8001968 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017d6:	f000 f873 	bl	80018c0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80017da:	f000 f89b 	bl	8001914 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */



  uint8_t setRate5Hz[] = {
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <main+0x60>)
 80017e0:	463c      	mov	r4, r7
 80017e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e4:	c407      	stmia	r4!, {r0, r1, r2}
 80017e6:	8023      	strh	r3, [r4, #0]
      0x01, 0x00,   // navRate = 1
      0x01, 0x00,   // timeRef = GPS time
      0xDE, 0x6A    // Checksum
  };

  HAL_Delay(1000);
 80017e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ec:	f000 fb36 	bl	8001e5c <HAL_Delay>
  HAL_UART_Transmit(&huart2, setRate5Hz, sizeof(setRate5Hz), HAL_MAX_DELAY);
 80017f0:	4639      	mov	r1, r7
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	220e      	movs	r2, #14
 80017f8:	480b      	ldr	r0, [pc, #44]	@ (8001828 <main+0x64>)
 80017fa:	f001 faf7 	bl	8002dec <HAL_UART_Transmit>
  HAL_Delay(1000);
 80017fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001802:	f000 fb2b 	bl	8001e5c <HAL_Delay>
  lwgps_init(&gps);
 8001806:	4809      	ldr	r0, [pc, #36]	@ (800182c <main+0x68>)
 8001808:	f7ff fe45 	bl	8001496 <lwgps_init>

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800180c:	2201      	movs	r2, #1
 800180e:	4908      	ldr	r1, [pc, #32]	@ (8001830 <main+0x6c>)
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <main+0x64>)
 8001812:	f001 fb76 	bl	8002f02 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	      print_gps_data();
 8001816:	f7ff ff4b 	bl	80016b0 <print_gps_data>
	      HAL_Delay(200);
 800181a:	20c8      	movs	r0, #200	@ 0xc8
 800181c:	f000 fb1e 	bl	8001e5c <HAL_Delay>
	      print_gps_data();
 8001820:	bf00      	nop
 8001822:	e7f8      	b.n	8001816 <main+0x52>
 8001824:	0800676c 	.word	0x0800676c
 8001828:	200001f4 	.word	0x200001f4
 800182c:	20000288 	.word	0x20000288
 8001830:	200003b9 	.word	0x200003b9

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b090      	sub	sp, #64	@ 0x40
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0318 	add.w	r3, r7, #24
 800183e:	2228      	movs	r2, #40	@ 0x28
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fe6d 	bl	8004522 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001856:	2301      	movs	r3, #1
 8001858:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800185a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800185e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001864:	2301      	movs	r3, #1
 8001866:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001868:	2302      	movs	r3, #2
 800186a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001870:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001872:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001878:	f107 0318 	add.w	r3, r7, #24
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fe55 	bl	800252c <HAL_RCC_OscConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001888:	f000 f89c 	bl	80019c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188c:	230f      	movs	r3, #15
 800188e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001890:	2302      	movs	r3, #2
 8001892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001898:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800189c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2102      	movs	r1, #2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f001 f8c2 	bl	8002a30 <HAL_RCC_ClockConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018b2:	f000 f887 	bl	80019c4 <Error_Handler>
  }
}
 80018b6:	bf00      	nop
 80018b8:	3740      	adds	r7, #64	@ 0x40
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	@ (8001910 <MX_USART2_UART_Init+0x50>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	@ (800190c <MX_USART2_UART_Init+0x4c>)
 80018f8:	f001 fa28 	bl	8002d4c <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001902:	f000 f85f 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200001f4 	.word	0x200001f4
 8001910:	40004400 	.word	0x40004400

08001914 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 800191a:	4a12      	ldr	r2, [pc, #72]	@ (8001964 <MX_USART3_UART_Init+0x50>)
 800191c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 8001920:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001924:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_USART3_UART_Init+0x4c>)
 800194c:	f001 f9fe 	bl	8002d4c <HAL_UART_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001956:	f000 f835 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000023c 	.word	0x2000023c
 8001964:	40004800 	.word	0x40004800

08001968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196e:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <MX_GPIO_Init+0x58>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a13      	ldr	r2, [pc, #76]	@ (80019c0 <MX_GPIO_Init+0x58>)
 8001974:	f043 0320 	orr.w	r3, r3, #32
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <MX_GPIO_Init+0x58>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0320 	and.w	r3, r3, #32
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <MX_GPIO_Init+0x58>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <MX_GPIO_Init+0x58>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6193      	str	r3, [r2, #24]
 8001992:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <MX_GPIO_Init+0x58>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <MX_GPIO_Init+0x58>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	4a07      	ldr	r2, [pc, #28]	@ (80019c0 <MX_GPIO_Init+0x58>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	6193      	str	r3, [r2, #24]
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <MX_GPIO_Init+0x58>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c8:	b672      	cpsid	i
}
 80019ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <Error_Handler+0x8>

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6193      	str	r3, [r2, #24]
 80019e2:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f8:	61d3      	str	r3, [r2, #28]
 80019fa:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <HAL_MspInit+0x60>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <HAL_MspInit+0x60>)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000

08001a34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	@ 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0318 	add.w	r3, r7, #24
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b3c <HAL_UART_MspInit+0x108>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d138      	bne.n	8001ac6 <HAL_UART_MspInit+0x92>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a54:	4b3a      	ldr	r3, [pc, #232]	@ (8001b40 <HAL_UART_MspInit+0x10c>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	4a39      	ldr	r2, [pc, #228]	@ (8001b40 <HAL_UART_MspInit+0x10c>)
 8001a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a5e:	61d3      	str	r3, [r2, #28]
 8001a60:	4b37      	ldr	r3, [pc, #220]	@ (8001b40 <HAL_UART_MspInit+0x10c>)
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	4b34      	ldr	r3, [pc, #208]	@ (8001b40 <HAL_UART_MspInit+0x10c>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a33      	ldr	r2, [pc, #204]	@ (8001b40 <HAL_UART_MspInit+0x10c>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b31      	ldr	r3, [pc, #196]	@ (8001b40 <HAL_UART_MspInit+0x10c>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a84:	2304      	movs	r3, #4
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 0318 	add.w	r3, r7, #24
 8001a94:	4619      	mov	r1, r3
 8001a96:	482b      	ldr	r0, [pc, #172]	@ (8001b44 <HAL_UART_MspInit+0x110>)
 8001a98:	f000 fbc4 	bl	8002224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	4619      	mov	r1, r3
 8001aae:	4825      	ldr	r0, [pc, #148]	@ (8001b44 <HAL_UART_MspInit+0x110>)
 8001ab0:	f000 fbb8 	bl	8002224 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2026      	movs	r0, #38	@ 0x26
 8001aba:	f000 faca 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001abe:	2026      	movs	r0, #38	@ 0x26
 8001ac0:	f000 fae3 	bl	800208a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ac4:	e036      	b.n	8001b34 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1f      	ldr	r2, [pc, #124]	@ (8001b48 <HAL_UART_MspInit+0x114>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d131      	bne.n	8001b34 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_UART_MspInit+0x10c>)
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b40 <HAL_UART_MspInit+0x10c>)
 8001ad6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ada:	61d3      	str	r3, [r2, #28]
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_UART_MspInit+0x10c>)
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae8:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_UART_MspInit+0x10c>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a14      	ldr	r2, [pc, #80]	@ (8001b40 <HAL_UART_MspInit+0x10c>)
 8001aee:	f043 0308 	orr.w	r3, r3, #8
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <HAL_UART_MspInit+0x10c>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	4619      	mov	r1, r3
 8001b14:	480d      	ldr	r0, [pc, #52]	@ (8001b4c <HAL_UART_MspInit+0x118>)
 8001b16:	f000 fb85 	bl	8002224 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4807      	ldr	r0, [pc, #28]	@ (8001b4c <HAL_UART_MspInit+0x118>)
 8001b30:	f000 fb78 	bl	8002224 <HAL_GPIO_Init>
}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	@ 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40004400 	.word	0x40004400
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010800 	.word	0x40010800
 8001b48:	40004800 	.word	0x40004800
 8001b4c:	40010c00 	.word	0x40010c00

08001b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <NMI_Handler+0x4>

08001b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <MemManage_Handler+0x4>

08001b68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba0:	f000 f940 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bac:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <USART2_IRQHandler+0x10>)
 8001bae:	f001 f9cd 	bl	8002f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200001f4 	.word	0x200001f4

08001bbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <_kill>:

int _kill(int pid, int sig)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bd4:	f002 fd0a 	bl	80045ec <__errno>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2216      	movs	r2, #22
 8001bdc:	601a      	str	r2, [r3, #0]
  return -1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_exit>:

void _exit (int status)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bf2:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffe7 	bl	8001bca <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <_exit+0x12>

08001c00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	e00a      	b.n	8001c28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c12:	f3af 8000 	nop.w
 8001c16:	4601      	mov	r1, r0
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60ba      	str	r2, [r7, #8]
 8001c1e:	b2ca      	uxtb	r2, r1
 8001c20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dbf0      	blt.n	8001c12 <_read+0x12>
  }

  return len;
 8001c30:	687b      	ldr	r3, [r7, #4]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e009      	b.n	8001c60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	60ba      	str	r2, [r7, #8]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbf1      	blt.n	8001c4c <_write+0x12>
  }
  return len;
 8001c68:	687b      	ldr	r3, [r7, #4]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_close>:

int _close(int file)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c98:	605a      	str	r2, [r3, #4]
  return 0;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <_isatty>:

int _isatty(int file)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
	...

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	@ (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	@ (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f002 fc72 	bl	80045ec <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	@ (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20005000 	.word	0x20005000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	200003bc 	.word	0x200003bc
 8001d3c:	20000510 	.word	0x20000510

08001d40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d4c:	f7ff fff8 	bl	8001d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d50:	480b      	ldr	r0, [pc, #44]	@ (8001d80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d52:	490c      	ldr	r1, [pc, #48]	@ (8001d84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d54:	4a0c      	ldr	r2, [pc, #48]	@ (8001d88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d58:	e002      	b.n	8001d60 <LoopCopyDataInit>

08001d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5e:	3304      	adds	r3, #4

08001d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d64:	d3f9      	bcc.n	8001d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d66:	4a09      	ldr	r2, [pc, #36]	@ (8001d8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d68:	4c09      	ldr	r4, [pc, #36]	@ (8001d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d6c:	e001      	b.n	8001d72 <LoopFillZerobss>

08001d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d70:	3204      	adds	r2, #4

08001d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d74:	d3fb      	bcc.n	8001d6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d76:	f002 fc3f 	bl	80045f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d7a:	f7ff fd23 	bl	80017c4 <main>
  bx lr
 8001d7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d84:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d88:	08006b2c 	.word	0x08006b2c
  ldr r2, =_sbss
 8001d8c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001d90:	20000510 	.word	0x20000510

08001d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d94:	e7fe      	b.n	8001d94 <ADC1_2_IRQHandler>
	...

08001d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <HAL_Init+0x28>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a07      	ldr	r2, [pc, #28]	@ (8001dc0 <HAL_Init+0x28>)
 8001da2:	f043 0310 	orr.w	r3, r3, #16
 8001da6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 f947 	bl	800203c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dae:	200f      	movs	r0, #15
 8001db0:	f000 f808 	bl	8001dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db4:	f7ff fe0c 	bl	80019d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40022000 	.word	0x40022000

08001dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dcc:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <HAL_InitTick+0x54>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	@ (8001e1c <HAL_InitTick+0x58>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f95f 	bl	80020a6 <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00e      	b.n	8001e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d80a      	bhi.n	8001e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f000 f927 	bl	8002052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e04:	4a06      	ldr	r2, [pc, #24]	@ (8001e20 <HAL_InitTick+0x5c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	20000004 	.word	0x20000004

08001e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_IncTick+0x1c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_IncTick+0x20>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a03      	ldr	r2, [pc, #12]	@ (8001e44 <HAL_IncTick+0x20>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	20000008 	.word	0x20000008
 8001e44:	200003c0 	.word	0x200003c0

08001e48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b02      	ldr	r3, [pc, #8]	@ (8001e58 <HAL_GetTick+0x10>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	200003c0 	.word	0x200003c0

08001e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff fff0 	bl	8001e48 <HAL_GetTick>
 8001e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d005      	beq.n	8001e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_Delay+0x44>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e82:	bf00      	nop
 8001e84:	f7ff ffe0 	bl	8001e48 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d8f7      	bhi.n	8001e84 <HAL_Delay+0x28>
  {
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000008 	.word	0x20000008

08001ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ecc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed6:	4a04      	ldr	r2, [pc, #16]	@ (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	60d3      	str	r3, [r2, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef0:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	f003 0307 	and.w	r3, r3, #7
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	db0b      	blt.n	8001f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	4906      	ldr	r1, [pc, #24]	@ (8001f3c <__NVIC_EnableIRQ+0x34>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	2001      	movs	r0, #1
 8001f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100

08001f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	@ (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	@ (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	@ 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f1c3 0307 	rsb	r3, r3, #7
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	bf28      	it	cs
 8001fb2:	2304      	movcs	r3, #4
 8001fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d902      	bls.n	8001fc4 <NVIC_EncodePriority+0x30>
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3b03      	subs	r3, #3
 8001fc2:	e000      	b.n	8001fc6 <NVIC_EncodePriority+0x32>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	43d9      	mvns	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	4313      	orrs	r3, r2
         );
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3724      	adds	r7, #36	@ 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr

08001ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002008:	d301      	bcc.n	800200e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200a:	2301      	movs	r3, #1
 800200c:	e00f      	b.n	800202e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200e:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <SysTick_Config+0x40>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002016:	210f      	movs	r1, #15
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f7ff ff90 	bl	8001f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <SysTick_Config+0x40>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002026:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <SysTick_Config+0x40>)
 8002028:	2207      	movs	r2, #7
 800202a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	e000e010 	.word	0xe000e010

0800203c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff2d 	bl	8001ea4 <__NVIC_SetPriorityGrouping>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002064:	f7ff ff42 	bl	8001eec <__NVIC_GetPriorityGrouping>
 8002068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f7ff ff90 	bl	8001f94 <NVIC_EncodePriority>
 8002074:	4602      	mov	r2, r0
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff5f 	bl	8001f40 <__NVIC_SetPriority>
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff35 	bl	8001f08 <__NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffa2 	bl	8001ff8 <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d008      	beq.n	80020e8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2204      	movs	r2, #4
 80020da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e020      	b.n	800212a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 020e 	bic.w	r2, r2, #14
 80020f6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002128:	7bfb      	ldrb	r3, [r7, #15]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d005      	beq.n	8002158 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2204      	movs	r2, #4
 8002150:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	e051      	b.n	80021fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 020e 	bic.w	r2, r2, #14
 8002166:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a22      	ldr	r2, [pc, #136]	@ (8002208 <HAL_DMA_Abort_IT+0xd4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d029      	beq.n	80021d6 <HAL_DMA_Abort_IT+0xa2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a21      	ldr	r2, [pc, #132]	@ (800220c <HAL_DMA_Abort_IT+0xd8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d022      	beq.n	80021d2 <HAL_DMA_Abort_IT+0x9e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1f      	ldr	r2, [pc, #124]	@ (8002210 <HAL_DMA_Abort_IT+0xdc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01a      	beq.n	80021cc <HAL_DMA_Abort_IT+0x98>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1e      	ldr	r2, [pc, #120]	@ (8002214 <HAL_DMA_Abort_IT+0xe0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d012      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x92>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002218 <HAL_DMA_Abort_IT+0xe4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00a      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x8c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1b      	ldr	r2, [pc, #108]	@ (800221c <HAL_DMA_Abort_IT+0xe8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d102      	bne.n	80021ba <HAL_DMA_Abort_IT+0x86>
 80021b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021b8:	e00e      	b.n	80021d8 <HAL_DMA_Abort_IT+0xa4>
 80021ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021be:	e00b      	b.n	80021d8 <HAL_DMA_Abort_IT+0xa4>
 80021c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021c4:	e008      	b.n	80021d8 <HAL_DMA_Abort_IT+0xa4>
 80021c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ca:	e005      	b.n	80021d8 <HAL_DMA_Abort_IT+0xa4>
 80021cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021d0:	e002      	b.n	80021d8 <HAL_DMA_Abort_IT+0xa4>
 80021d2:	2310      	movs	r3, #16
 80021d4:	e000      	b.n	80021d8 <HAL_DMA_Abort_IT+0xa4>
 80021d6:	2301      	movs	r3, #1
 80021d8:	4a11      	ldr	r2, [pc, #68]	@ (8002220 <HAL_DMA_Abort_IT+0xec>)
 80021da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
    } 
  }
  return status;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40020008 	.word	0x40020008
 800220c:	4002001c 	.word	0x4002001c
 8002210:	40020030 	.word	0x40020030
 8002214:	40020044 	.word	0x40020044
 8002218:	40020058 	.word	0x40020058
 800221c:	4002006c 	.word	0x4002006c
 8002220:	40020000 	.word	0x40020000

08002224 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002224:	b480      	push	{r7}
 8002226:	b08b      	sub	sp, #44	@ 0x2c
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002236:	e169      	b.n	800250c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002238:	2201      	movs	r2, #1
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	429a      	cmp	r2, r3
 8002252:	f040 8158 	bne.w	8002506 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4a9a      	ldr	r2, [pc, #616]	@ (80024c4 <HAL_GPIO_Init+0x2a0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d05e      	beq.n	800231e <HAL_GPIO_Init+0xfa>
 8002260:	4a98      	ldr	r2, [pc, #608]	@ (80024c4 <HAL_GPIO_Init+0x2a0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d875      	bhi.n	8002352 <HAL_GPIO_Init+0x12e>
 8002266:	4a98      	ldr	r2, [pc, #608]	@ (80024c8 <HAL_GPIO_Init+0x2a4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d058      	beq.n	800231e <HAL_GPIO_Init+0xfa>
 800226c:	4a96      	ldr	r2, [pc, #600]	@ (80024c8 <HAL_GPIO_Init+0x2a4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d86f      	bhi.n	8002352 <HAL_GPIO_Init+0x12e>
 8002272:	4a96      	ldr	r2, [pc, #600]	@ (80024cc <HAL_GPIO_Init+0x2a8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d052      	beq.n	800231e <HAL_GPIO_Init+0xfa>
 8002278:	4a94      	ldr	r2, [pc, #592]	@ (80024cc <HAL_GPIO_Init+0x2a8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d869      	bhi.n	8002352 <HAL_GPIO_Init+0x12e>
 800227e:	4a94      	ldr	r2, [pc, #592]	@ (80024d0 <HAL_GPIO_Init+0x2ac>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d04c      	beq.n	800231e <HAL_GPIO_Init+0xfa>
 8002284:	4a92      	ldr	r2, [pc, #584]	@ (80024d0 <HAL_GPIO_Init+0x2ac>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d863      	bhi.n	8002352 <HAL_GPIO_Init+0x12e>
 800228a:	4a92      	ldr	r2, [pc, #584]	@ (80024d4 <HAL_GPIO_Init+0x2b0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d046      	beq.n	800231e <HAL_GPIO_Init+0xfa>
 8002290:	4a90      	ldr	r2, [pc, #576]	@ (80024d4 <HAL_GPIO_Init+0x2b0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d85d      	bhi.n	8002352 <HAL_GPIO_Init+0x12e>
 8002296:	2b12      	cmp	r3, #18
 8002298:	d82a      	bhi.n	80022f0 <HAL_GPIO_Init+0xcc>
 800229a:	2b12      	cmp	r3, #18
 800229c:	d859      	bhi.n	8002352 <HAL_GPIO_Init+0x12e>
 800229e:	a201      	add	r2, pc, #4	@ (adr r2, 80022a4 <HAL_GPIO_Init+0x80>)
 80022a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a4:	0800231f 	.word	0x0800231f
 80022a8:	080022f9 	.word	0x080022f9
 80022ac:	0800230b 	.word	0x0800230b
 80022b0:	0800234d 	.word	0x0800234d
 80022b4:	08002353 	.word	0x08002353
 80022b8:	08002353 	.word	0x08002353
 80022bc:	08002353 	.word	0x08002353
 80022c0:	08002353 	.word	0x08002353
 80022c4:	08002353 	.word	0x08002353
 80022c8:	08002353 	.word	0x08002353
 80022cc:	08002353 	.word	0x08002353
 80022d0:	08002353 	.word	0x08002353
 80022d4:	08002353 	.word	0x08002353
 80022d8:	08002353 	.word	0x08002353
 80022dc:	08002353 	.word	0x08002353
 80022e0:	08002353 	.word	0x08002353
 80022e4:	08002353 	.word	0x08002353
 80022e8:	08002301 	.word	0x08002301
 80022ec:	08002315 	.word	0x08002315
 80022f0:	4a79      	ldr	r2, [pc, #484]	@ (80024d8 <HAL_GPIO_Init+0x2b4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022f6:	e02c      	b.n	8002352 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	623b      	str	r3, [r7, #32]
          break;
 80022fe:	e029      	b.n	8002354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	3304      	adds	r3, #4
 8002306:	623b      	str	r3, [r7, #32]
          break;
 8002308:	e024      	b.n	8002354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	3308      	adds	r3, #8
 8002310:	623b      	str	r3, [r7, #32]
          break;
 8002312:	e01f      	b.n	8002354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	330c      	adds	r3, #12
 800231a:	623b      	str	r3, [r7, #32]
          break;
 800231c:	e01a      	b.n	8002354 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002326:	2304      	movs	r3, #4
 8002328:	623b      	str	r3, [r7, #32]
          break;
 800232a:	e013      	b.n	8002354 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d105      	bne.n	8002340 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002334:	2308      	movs	r3, #8
 8002336:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	611a      	str	r2, [r3, #16]
          break;
 800233e:	e009      	b.n	8002354 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002340:	2308      	movs	r3, #8
 8002342:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	615a      	str	r2, [r3, #20]
          break;
 800234a:	e003      	b.n	8002354 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
          break;
 8002350:	e000      	b.n	8002354 <HAL_GPIO_Init+0x130>
          break;
 8002352:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2bff      	cmp	r3, #255	@ 0xff
 8002358:	d801      	bhi.n	800235e <HAL_GPIO_Init+0x13a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	e001      	b.n	8002362 <HAL_GPIO_Init+0x13e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3304      	adds	r3, #4
 8002362:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2bff      	cmp	r3, #255	@ 0xff
 8002368:	d802      	bhi.n	8002370 <HAL_GPIO_Init+0x14c>
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	e002      	b.n	8002376 <HAL_GPIO_Init+0x152>
 8002370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002372:	3b08      	subs	r3, #8
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	210f      	movs	r1, #15
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	401a      	ands	r2, r3
 8002388:	6a39      	ldr	r1, [r7, #32]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	431a      	orrs	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 80b1 	beq.w	8002506 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023a4:	4b4d      	ldr	r3, [pc, #308]	@ (80024dc <HAL_GPIO_Init+0x2b8>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4a4c      	ldr	r2, [pc, #304]	@ (80024dc <HAL_GPIO_Init+0x2b8>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6193      	str	r3, [r2, #24]
 80023b0:	4b4a      	ldr	r3, [pc, #296]	@ (80024dc <HAL_GPIO_Init+0x2b8>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023bc:	4a48      	ldr	r2, [pc, #288]	@ (80024e0 <HAL_GPIO_Init+0x2bc>)
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	3302      	adds	r3, #2
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4013      	ands	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a40      	ldr	r2, [pc, #256]	@ (80024e4 <HAL_GPIO_Init+0x2c0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d013      	beq.n	8002410 <HAL_GPIO_Init+0x1ec>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a3f      	ldr	r2, [pc, #252]	@ (80024e8 <HAL_GPIO_Init+0x2c4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00d      	beq.n	800240c <HAL_GPIO_Init+0x1e8>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a3e      	ldr	r2, [pc, #248]	@ (80024ec <HAL_GPIO_Init+0x2c8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d007      	beq.n	8002408 <HAL_GPIO_Init+0x1e4>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a3d      	ldr	r2, [pc, #244]	@ (80024f0 <HAL_GPIO_Init+0x2cc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_GPIO_Init+0x1e0>
 8002400:	2303      	movs	r3, #3
 8002402:	e006      	b.n	8002412 <HAL_GPIO_Init+0x1ee>
 8002404:	2304      	movs	r3, #4
 8002406:	e004      	b.n	8002412 <HAL_GPIO_Init+0x1ee>
 8002408:	2302      	movs	r3, #2
 800240a:	e002      	b.n	8002412 <HAL_GPIO_Init+0x1ee>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_GPIO_Init+0x1ee>
 8002410:	2300      	movs	r3, #0
 8002412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002414:	f002 0203 	and.w	r2, r2, #3
 8002418:	0092      	lsls	r2, r2, #2
 800241a:	4093      	lsls	r3, r2
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002422:	492f      	ldr	r1, [pc, #188]	@ (80024e0 <HAL_GPIO_Init+0x2bc>)
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800243c:	4b2d      	ldr	r3, [pc, #180]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	492c      	ldr	r1, [pc, #176]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800244a:	4b2a      	ldr	r3, [pc, #168]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	43db      	mvns	r3, r3
 8002452:	4928      	ldr	r1, [pc, #160]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 8002454:	4013      	ands	r3, r2
 8002456:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002464:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	4922      	ldr	r1, [pc, #136]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	60cb      	str	r3, [r1, #12]
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002472:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	43db      	mvns	r3, r3
 800247a:	491e      	ldr	r1, [pc, #120]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 800247c:	4013      	ands	r3, r2
 800247e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800248c:	4b19      	ldr	r3, [pc, #100]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	4918      	ldr	r1, [pc, #96]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800249a:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	4914      	ldr	r1, [pc, #80]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d021      	beq.n	80024f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024b4:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	490e      	ldr	r1, [pc, #56]	@ (80024f4 <HAL_GPIO_Init+0x2d0>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
 80024c0:	e021      	b.n	8002506 <HAL_GPIO_Init+0x2e2>
 80024c2:	bf00      	nop
 80024c4:	10320000 	.word	0x10320000
 80024c8:	10310000 	.word	0x10310000
 80024cc:	10220000 	.word	0x10220000
 80024d0:	10210000 	.word	0x10210000
 80024d4:	10120000 	.word	0x10120000
 80024d8:	10110000 	.word	0x10110000
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40010800 	.word	0x40010800
 80024e8:	40010c00 	.word	0x40010c00
 80024ec:	40011000 	.word	0x40011000
 80024f0:	40011400 	.word	0x40011400
 80024f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_GPIO_Init+0x304>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	43db      	mvns	r3, r3
 8002500:	4909      	ldr	r1, [pc, #36]	@ (8002528 <HAL_GPIO_Init+0x304>)
 8002502:	4013      	ands	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	3301      	adds	r3, #1
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	fa22 f303 	lsr.w	r3, r2, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	f47f ae8e 	bne.w	8002238 <HAL_GPIO_Init+0x14>
  }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	372c      	adds	r7, #44	@ 0x2c
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	40010400 	.word	0x40010400

0800252c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e272      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8087 	beq.w	800265a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800254c:	4b92      	ldr	r3, [pc, #584]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b04      	cmp	r3, #4
 8002556:	d00c      	beq.n	8002572 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002558:	4b8f      	ldr	r3, [pc, #572]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d112      	bne.n	800258a <HAL_RCC_OscConfig+0x5e>
 8002564:	4b8c      	ldr	r3, [pc, #560]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002570:	d10b      	bne.n	800258a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002572:	4b89      	ldr	r3, [pc, #548]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d06c      	beq.n	8002658 <HAL_RCC_OscConfig+0x12c>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d168      	bne.n	8002658 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e24c      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x76>
 8002594:	4b80      	ldr	r3, [pc, #512]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a7f      	ldr	r2, [pc, #508]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 800259a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e02e      	b.n	8002600 <HAL_RCC_OscConfig+0xd4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x98>
 80025aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7a      	ldr	r2, [pc, #488]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b78      	ldr	r3, [pc, #480]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a77      	ldr	r2, [pc, #476]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e01d      	b.n	8002600 <HAL_RCC_OscConfig+0xd4>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0xbc>
 80025ce:	4b72      	ldr	r3, [pc, #456]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a71      	ldr	r2, [pc, #452]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b6f      	ldr	r3, [pc, #444]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6e      	ldr	r2, [pc, #440]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e00b      	b.n	8002600 <HAL_RCC_OscConfig+0xd4>
 80025e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b68      	ldr	r3, [pc, #416]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a67      	ldr	r2, [pc, #412]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7ff fc1e 	bl	8001e48 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7ff fc1a 	bl	8001e48 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	@ 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e200      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	4b5d      	ldr	r3, [pc, #372]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0xe4>
 800262e:	e014      	b.n	800265a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7ff fc0a 	bl	8001e48 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7ff fc06 	bl	8001e48 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	@ 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e1ec      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	4b53      	ldr	r3, [pc, #332]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x10c>
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d063      	beq.n	800272e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002666:	4b4c      	ldr	r3, [pc, #304]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002672:	4b49      	ldr	r3, [pc, #292]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b08      	cmp	r3, #8
 800267c:	d11c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x18c>
 800267e:	4b46      	ldr	r3, [pc, #280]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d116      	bne.n	80026b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268a:	4b43      	ldr	r3, [pc, #268]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_RCC_OscConfig+0x176>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e1c0      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4939      	ldr	r1, [pc, #228]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b6:	e03a      	b.n	800272e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d020      	beq.n	8002702 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c0:	4b36      	ldr	r3, [pc, #216]	@ (800279c <HAL_RCC_OscConfig+0x270>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7ff fbbf 	bl	8001e48 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ce:	f7ff fbbb 	bl	8001e48 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e1a1      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4927      	ldr	r1, [pc, #156]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
 8002700:	e015      	b.n	800272e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002702:	4b26      	ldr	r3, [pc, #152]	@ (800279c <HAL_RCC_OscConfig+0x270>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff fb9e 	bl	8001e48 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002710:	f7ff fb9a 	bl	8001e48 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e180      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d03a      	beq.n	80027b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d019      	beq.n	8002776 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002742:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <HAL_RCC_OscConfig+0x274>)
 8002744:	2201      	movs	r2, #1
 8002746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002748:	f7ff fb7e 	bl	8001e48 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002750:	f7ff fb7a 	bl	8001e48 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e160      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	4b0d      	ldr	r3, [pc, #52]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800276e:	2001      	movs	r0, #1
 8002770:	f000 face 	bl	8002d10 <RCC_Delay>
 8002774:	e01c      	b.n	80027b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <HAL_RCC_OscConfig+0x274>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277c:	f7ff fb64 	bl	8001e48 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002782:	e00f      	b.n	80027a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002784:	f7ff fb60 	bl	8001e48 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d908      	bls.n	80027a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e146      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	42420000 	.word	0x42420000
 80027a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	4b92      	ldr	r3, [pc, #584]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e9      	bne.n	8002784 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80a6 	beq.w	800290a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c2:	4b8b      	ldr	r3, [pc, #556]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10d      	bne.n	80027ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	4b88      	ldr	r3, [pc, #544]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4a87      	ldr	r2, [pc, #540]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d8:	61d3      	str	r3, [r2, #28]
 80027da:	4b85      	ldr	r3, [pc, #532]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e6:	2301      	movs	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ea:	4b82      	ldr	r3, [pc, #520]	@ (80029f4 <HAL_RCC_OscConfig+0x4c8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d118      	bne.n	8002828 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f6:	4b7f      	ldr	r3, [pc, #508]	@ (80029f4 <HAL_RCC_OscConfig+0x4c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a7e      	ldr	r2, [pc, #504]	@ (80029f4 <HAL_RCC_OscConfig+0x4c8>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7ff fb21 	bl	8001e48 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7ff fb1d 	bl	8001e48 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b64      	cmp	r3, #100	@ 0x64
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e103      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b75      	ldr	r3, [pc, #468]	@ (80029f4 <HAL_RCC_OscConfig+0x4c8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x312>
 8002830:	4b6f      	ldr	r3, [pc, #444]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a6e      	ldr	r2, [pc, #440]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	e02d      	b.n	800289a <HAL_RCC_OscConfig+0x36e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0x334>
 8002846:	4b6a      	ldr	r3, [pc, #424]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4a69      	ldr	r2, [pc, #420]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6213      	str	r3, [r2, #32]
 8002852:	4b67      	ldr	r3, [pc, #412]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4a66      	ldr	r2, [pc, #408]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	f023 0304 	bic.w	r3, r3, #4
 800285c:	6213      	str	r3, [r2, #32]
 800285e:	e01c      	b.n	800289a <HAL_RCC_OscConfig+0x36e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d10c      	bne.n	8002882 <HAL_RCC_OscConfig+0x356>
 8002868:	4b61      	ldr	r3, [pc, #388]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4a60      	ldr	r2, [pc, #384]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	f043 0304 	orr.w	r3, r3, #4
 8002872:	6213      	str	r3, [r2, #32]
 8002874:	4b5e      	ldr	r3, [pc, #376]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4a5d      	ldr	r2, [pc, #372]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6213      	str	r3, [r2, #32]
 8002880:	e00b      	b.n	800289a <HAL_RCC_OscConfig+0x36e>
 8002882:	4b5b      	ldr	r3, [pc, #364]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4a5a      	ldr	r2, [pc, #360]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	6213      	str	r3, [r2, #32]
 800288e:	4b58      	ldr	r3, [pc, #352]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4a57      	ldr	r2, [pc, #348]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002894:	f023 0304 	bic.w	r3, r3, #4
 8002898:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d015      	beq.n	80028ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a2:	f7ff fad1 	bl	8001e48 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7ff facd 	bl	8001e48 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0b1      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c0:	4b4b      	ldr	r3, [pc, #300]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ee      	beq.n	80028aa <HAL_RCC_OscConfig+0x37e>
 80028cc:	e014      	b.n	80028f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7ff fabb 	bl	8001e48 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7ff fab7 	bl	8001e48 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e09b      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ec:	4b40      	ldr	r3, [pc, #256]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ee      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	4b3c      	ldr	r3, [pc, #240]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a3b      	ldr	r2, [pc, #236]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002908:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8087 	beq.w	8002a22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002914:	4b36      	ldr	r3, [pc, #216]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 030c 	and.w	r3, r3, #12
 800291c:	2b08      	cmp	r3, #8
 800291e:	d061      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d146      	bne.n	80029b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002928:	4b33      	ldr	r3, [pc, #204]	@ (80029f8 <HAL_RCC_OscConfig+0x4cc>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7ff fa8b 	bl	8001e48 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002936:	f7ff fa87 	bl	8001e48 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e06d      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002948:	4b29      	ldr	r3, [pc, #164]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f0      	bne.n	8002936 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800295c:	d108      	bne.n	8002970 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800295e:	4b24      	ldr	r3, [pc, #144]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	4921      	ldr	r1, [pc, #132]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002970:	4b1f      	ldr	r3, [pc, #124]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a19      	ldr	r1, [r3, #32]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	430b      	orrs	r3, r1
 8002982:	491b      	ldr	r1, [pc, #108]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_RCC_OscConfig+0x4cc>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7ff fa5b 	bl	8001e48 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002996:	f7ff fa57 	bl	8001e48 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e03d      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a8:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x46a>
 80029b4:	e035      	b.n	8002a22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	4b10      	ldr	r3, [pc, #64]	@ (80029f8 <HAL_RCC_OscConfig+0x4cc>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7ff fa44 	bl	8001e48 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7ff fa40 	bl	8001e48 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e026      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d6:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x498>
 80029e2:	e01e      	b.n	8002a22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e019      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40007000 	.word	0x40007000
 80029f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <HAL_RCC_OscConfig+0x500>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000

08002a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0d0      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a44:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d910      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b67      	ldr	r3, [pc, #412]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 0207 	bic.w	r2, r3, #7
 8002a5a:	4965      	ldr	r1, [pc, #404]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b63      	ldr	r3, [pc, #396]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0b8      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a8c:	4b59      	ldr	r3, [pc, #356]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a58      	ldr	r2, [pc, #352]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa4:	4b53      	ldr	r3, [pc, #332]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002aae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b50      	ldr	r3, [pc, #320]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	494d      	ldr	r1, [pc, #308]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d040      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b47      	ldr	r3, [pc, #284]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d115      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e07f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aee:	4b41      	ldr	r3, [pc, #260]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e073      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afe:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e06b      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0e:	4b39      	ldr	r3, [pc, #228]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f023 0203 	bic.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4936      	ldr	r1, [pc, #216]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b20:	f7ff f992 	bl	8001e48 <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7ff f98e 	bl	8001e48 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e053      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 020c 	and.w	r2, r3, #12
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1eb      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b50:	4b27      	ldr	r3, [pc, #156]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d210      	bcs.n	8002b80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 0207 	bic.w	r2, r3, #7
 8002b66:	4922      	ldr	r1, [pc, #136]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e032      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b8c:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4916      	ldr	r1, [pc, #88]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002baa:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	490e      	ldr	r1, [pc, #56]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bbe:	f000 f821 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	490a      	ldr	r1, [pc, #40]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd0:	5ccb      	ldrb	r3, [r1, r3]
 8002bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd6:	4a09      	ldr	r2, [pc, #36]	@ (8002bfc <HAL_RCC_ClockConfig+0x1cc>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bda:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <HAL_RCC_ClockConfig+0x1d0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff f8f0 	bl	8001dc4 <HAL_InitTick>

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40022000 	.word	0x40022000
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	0800677c 	.word	0x0800677c
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	20000004 	.word	0x20000004

08002c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d002      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x30>
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_GetSysClockFreq+0x36>
 8002c32:	e027      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c34:	4b19      	ldr	r3, [pc, #100]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c36:	613b      	str	r3, [r7, #16]
      break;
 8002c38:	e027      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	0c9b      	lsrs	r3, r3, #18
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	4a17      	ldr	r2, [pc, #92]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c44:	5cd3      	ldrb	r3, [r2, r3]
 8002c46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d010      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c52:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	0c5b      	lsrs	r3, r3, #17
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a0d      	ldr	r2, [pc, #52]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c66:	fb03 f202 	mul.w	r2, r3, r2
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e004      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c78:	fb02 f303 	mul.w	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	613b      	str	r3, [r7, #16]
      break;
 8002c82:	e002      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c86:	613b      	str	r3, [r7, #16]
      break;
 8002c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8a:	693b      	ldr	r3, [r7, #16]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	007a1200 	.word	0x007a1200
 8002ca0:	08006794 	.word	0x08006794
 8002ca4:	080067a4 	.word	0x080067a4
 8002ca8:	003d0900 	.word	0x003d0900

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	@ (8002cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff2 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	@ (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	0800678c 	.word	0x0800678c

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cec:	f7ff ffde 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0adb      	lsrs	r3, r3, #11
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	@ (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	0800678c 	.word	0x0800678c

08002d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d18:	4b0a      	ldr	r3, [pc, #40]	@ (8002d44 <RCC_Delay+0x34>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d48 <RCC_Delay+0x38>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0a5b      	lsrs	r3, r3, #9
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d2c:	bf00      	nop
  }
  while (Delay --);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	60fa      	str	r2, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f9      	bne.n	8002d2c <RCC_Delay+0x1c>
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	20000000 	.word	0x20000000
 8002d48:	10624dd3 	.word	0x10624dd3

08002d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e042      	b.n	8002de4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe fe5e 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2224      	movs	r2, #36	@ 0x24
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fdb7 	bl	8003904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	@ 0x28
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d175      	bne.n	8002ef8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_UART_Transmit+0x2c>
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e06e      	b.n	8002efa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2221      	movs	r2, #33	@ 0x21
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e2a:	f7ff f80d 	bl	8001e48 <HAL_GetTick>
 8002e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e44:	d108      	bne.n	8002e58 <HAL_UART_Transmit+0x6c>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e003      	b.n	8002e60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e60:	e02e      	b.n	8002ec0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2180      	movs	r1, #128	@ 0x80
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fb1c 	bl	80034aa <UART_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e03a      	b.n	8002efa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	e007      	b.n	8002eb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1cb      	bne.n	8002e62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2140      	movs	r1, #64	@ 0x40
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fae8 	bl	80034aa <UART_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e006      	b.n	8002efa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d112      	bne.n	8002f42 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_UART_Receive_IT+0x26>
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e00b      	b.n	8002f44 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	461a      	mov	r2, r3
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fb0f 	bl	800355c <UART_Start_Receive_IT>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	e000      	b.n	8002f44 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
  }
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b0ba      	sub	sp, #232	@ 0xe8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002f8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x66>
 8002f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fbec 	bl	8003788 <UART_Receive_IT>
      return;
 8002fb0:	e25b      	b.n	800346a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80de 	beq.w	8003178 <HAL_UART_IRQHandler+0x22c>
 8002fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fcc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80d1 	beq.w	8003178 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_UART_IRQHandler+0xae>
 8002fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff2:	f043 0201 	orr.w	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_UART_IRQHandler+0xd2>
 8003006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003016:	f043 0202 	orr.w	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800301e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00b      	beq.n	8003042 <HAL_UART_IRQHandler+0xf6>
 800302a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d005      	beq.n	8003042 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303a:	f043 0204 	orr.w	r2, r3, #4
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d011      	beq.n	8003072 <HAL_UART_IRQHandler+0x126>
 800304e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d105      	bne.n	8003066 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800305a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306a:	f043 0208 	orr.w	r2, r3, #8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 81f2 	beq.w	8003460 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_UART_IRQHandler+0x14e>
 8003088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fb77 	bl	8003788 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d103      	bne.n	80030c6 <HAL_UART_IRQHandler+0x17a>
 80030be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d04f      	beq.n	8003166 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fa81 	bl	80035ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d041      	beq.n	800315e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3314      	adds	r3, #20
 80030e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80030f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3314      	adds	r3, #20
 8003102:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003106:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800310a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003112:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800311e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1d9      	bne.n	80030da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d013      	beq.n	8003156 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003132:	4a7e      	ldr	r2, [pc, #504]	@ (800332c <HAL_UART_IRQHandler+0x3e0>)
 8003134:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe fffa 	bl	8002134 <HAL_DMA_Abort_IT>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d016      	beq.n	8003174 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003150:	4610      	mov	r0, r2
 8003152:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003154:	e00e      	b.n	8003174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f993 	bl	8003482 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315c:	e00a      	b.n	8003174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f98f 	bl	8003482 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003164:	e006      	b.n	8003174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f98b 	bl	8003482 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003172:	e175      	b.n	8003460 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003174:	bf00      	nop
    return;
 8003176:	e173      	b.n	8003460 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317c:	2b01      	cmp	r3, #1
 800317e:	f040 814f 	bne.w	8003420 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8148 	beq.w	8003420 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8141 	beq.w	8003420 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80b6 	beq.w	8003330 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8145 	beq.w	8003464 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031e2:	429a      	cmp	r2, r3
 80031e4:	f080 813e 	bcs.w	8003464 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	f000 8088 	beq.w	800330c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	330c      	adds	r3, #12
 8003202:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003206:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003212:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003216:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800321a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	330c      	adds	r3, #12
 8003224:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003228:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800322c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003234:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003238:	e841 2300 	strex	r3, r2, [r1]
 800323c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003240:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1d9      	bne.n	80031fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3314      	adds	r3, #20
 800324e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003252:	e853 3f00 	ldrex	r3, [r3]
 8003256:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003258:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3314      	adds	r3, #20
 8003268:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800326c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003270:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003274:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003278:	e841 2300 	strex	r3, r2, [r1]
 800327c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800327e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e1      	bne.n	8003248 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3314      	adds	r3, #20
 800328a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800328e:	e853 3f00 	ldrex	r3, [r3]
 8003292:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800329a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3314      	adds	r3, #20
 80032a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032b0:	e841 2300 	strex	r3, r2, [r1]
 80032b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80032b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e3      	bne.n	8003284 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	330c      	adds	r3, #12
 80032d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80032da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032dc:	f023 0310 	bic.w	r3, r3, #16
 80032e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	330c      	adds	r3, #12
 80032ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80032ee:	65ba      	str	r2, [r7, #88]	@ 0x58
 80032f0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80032fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e3      	bne.n	80032ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fed9 	bl	80020be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800331a:	b29b      	uxth	r3, r3
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	b29b      	uxth	r3, r3
 8003320:	4619      	mov	r1, r3
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8b6 	bl	8003494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003328:	e09c      	b.n	8003464 <HAL_UART_IRQHandler+0x518>
 800332a:	bf00      	nop
 800332c:	08003693 	.word	0x08003693
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003338:	b29b      	uxth	r3, r3
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 808e 	beq.w	8003468 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800334c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8089 	beq.w	8003468 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	330c      	adds	r3, #12
 800335c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003368:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800336c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800337a:	647a      	str	r2, [r7, #68]	@ 0x44
 800337c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003380:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e3      	bne.n	8003356 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3314      	adds	r3, #20
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	623b      	str	r3, [r7, #32]
   return(result);
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3314      	adds	r3, #20
 80033ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80033b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ba:	e841 2300 	strex	r3, r2, [r1]
 80033be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1e3      	bne.n	800338e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	330c      	adds	r3, #12
 80033da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	e853 3f00 	ldrex	r3, [r3]
 80033e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0310 	bic.w	r3, r3, #16
 80033ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	330c      	adds	r3, #12
 80033f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80033f8:	61fa      	str	r2, [r7, #28]
 80033fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	69b9      	ldr	r1, [r7, #24]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	e841 2300 	strex	r3, r2, [r1]
 8003404:	617b      	str	r3, [r7, #20]
   return(result);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e3      	bne.n	80033d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003412:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f83b 	bl	8003494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800341e:	e023      	b.n	8003468 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003428:	2b00      	cmp	r3, #0
 800342a:	d009      	beq.n	8003440 <HAL_UART_IRQHandler+0x4f4>
 800342c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f93e 	bl	80036ba <UART_Transmit_IT>
    return;
 800343e:	e014      	b.n	800346a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00e      	beq.n	800346a <HAL_UART_IRQHandler+0x51e>
 800344c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f97d 	bl	8003758 <UART_EndTransmit_IT>
    return;
 800345e:	e004      	b.n	800346a <HAL_UART_IRQHandler+0x51e>
    return;
 8003460:	bf00      	nop
 8003462:	e002      	b.n	800346a <HAL_UART_IRQHandler+0x51e>
      return;
 8003464:	bf00      	nop
 8003466:	e000      	b.n	800346a <HAL_UART_IRQHandler+0x51e>
      return;
 8003468:	bf00      	nop
  }
}
 800346a:	37e8      	adds	r7, #232	@ 0xe8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	4613      	mov	r3, r2
 80034b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ba:	e03b      	b.n	8003534 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d037      	beq.n	8003534 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c4:	f7fe fcc0 	bl	8001e48 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	6a3a      	ldr	r2, [r7, #32]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d302      	bcc.n	80034da <UART_WaitOnFlagUntilTimeout+0x30>
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e03a      	b.n	8003554 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d023      	beq.n	8003534 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b80      	cmp	r3, #128	@ 0x80
 80034f0:	d020      	beq.n	8003534 <UART_WaitOnFlagUntilTimeout+0x8a>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b40      	cmp	r3, #64	@ 0x40
 80034f6:	d01d      	beq.n	8003534 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b08      	cmp	r3, #8
 8003504:	d116      	bne.n	8003534 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f856 	bl	80035ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2208      	movs	r2, #8
 8003526:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e00f      	b.n	8003554 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4013      	ands	r3, r2
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	429a      	cmp	r2, r3
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	429a      	cmp	r2, r3
 8003550:	d0b4      	beq.n	80034bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	88fa      	ldrh	r2, [r7, #6]
 8003574:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	88fa      	ldrh	r2, [r7, #6]
 800357a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2222      	movs	r2, #34	@ 0x22
 8003586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0220 	orr.w	r2, r2, #32
 80035c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr

080035ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b095      	sub	sp, #84	@ 0x54
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	330c      	adds	r3, #12
 80035dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	330c      	adds	r3, #12
 80035f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80035f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e5      	bne.n	80035d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3314      	adds	r3, #20
 8003610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	61fb      	str	r3, [r7, #28]
   return(result);
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3314      	adds	r3, #20
 8003628:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800362a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800362c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003630:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e5      	bne.n	800360a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	2b01      	cmp	r3, #1
 8003644:	d119      	bne.n	800367a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	330c      	adds	r3, #12
 800364c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	60bb      	str	r3, [r7, #8]
   return(result);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f023 0310 	bic.w	r3, r3, #16
 800365c:	647b      	str	r3, [r7, #68]	@ 0x44
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003666:	61ba      	str	r2, [r7, #24]
 8003668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366a:	6979      	ldr	r1, [r7, #20]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	e841 2300 	strex	r3, r2, [r1]
 8003672:	613b      	str	r3, [r7, #16]
   return(result);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1e5      	bne.n	8003646 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003688:	bf00      	nop
 800368a:	3754      	adds	r7, #84	@ 0x54
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7ff fee8 	bl	8003482 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b21      	cmp	r3, #33	@ 0x21
 80036cc:	d13e      	bne.n	800374c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d6:	d114      	bne.n	8003702 <UART_Transmit_IT+0x48>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d110      	bne.n	8003702 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	1c9a      	adds	r2, r3, #2
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	621a      	str	r2, [r3, #32]
 8003700:	e008      	b.n	8003714 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	1c59      	adds	r1, r3, #1
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6211      	str	r1, [r2, #32]
 800370c:	781a      	ldrb	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29b      	uxth	r3, r3
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4619      	mov	r1, r3
 8003722:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10f      	bne.n	8003748 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003736:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003746:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	e000      	b.n	800374e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800374c:	2302      	movs	r3, #2
  }
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800376e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff fe79 	bl	8003470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08c      	sub	sp, #48	@ 0x30
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b22      	cmp	r3, #34	@ 0x22
 800379a:	f040 80ae 	bne.w	80038fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a6:	d117      	bne.n	80037d8 <UART_Receive_IT+0x50>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d113      	bne.n	80037d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d0:	1c9a      	adds	r2, r3, #2
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80037d6:	e026      	b.n	8003826 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ea:	d007      	beq.n	80037fc <UART_Receive_IT+0x74>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <UART_Receive_IT+0x82>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d106      	bne.n	800380a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	b2da      	uxtb	r2, r3
 8003804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e008      	b.n	800381c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003816:	b2da      	uxtb	r2, r3
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29b      	uxth	r3, r3
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4619      	mov	r1, r3
 8003834:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003836:	2b00      	cmp	r3, #0
 8003838:	d15d      	bne.n	80038f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0220 	bic.w	r2, r2, #32
 8003848:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003858:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	2b01      	cmp	r3, #1
 800387e:	d135      	bne.n	80038ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	613b      	str	r3, [r7, #16]
   return(result);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f023 0310 	bic.w	r3, r3, #16
 800389c:	627b      	str	r3, [r7, #36]	@ 0x24
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	330c      	adds	r3, #12
 80038a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a6:	623a      	str	r2, [r7, #32]
 80038a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	69f9      	ldr	r1, [r7, #28]
 80038ac:	6a3a      	ldr	r2, [r7, #32]
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e5      	bne.n	8003886 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d10a      	bne.n	80038de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff fdd5 	bl	8003494 <HAL_UARTEx_RxEventCallback>
 80038ea:	e002      	b.n	80038f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fd fea1 	bl	8001634 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e002      	b.n	80038fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e000      	b.n	80038fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80038fa:	2302      	movs	r3, #2
  }
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3730      	adds	r7, #48	@ 0x30
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800393e:	f023 030c 	bic.w	r3, r3, #12
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	430b      	orrs	r3, r1
 800394a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2c      	ldr	r2, [pc, #176]	@ (8003a18 <UART_SetConfig+0x114>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d103      	bne.n	8003974 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7ff f9bc 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	e002      	b.n	800397a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003974:	f7ff f9a4 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8003978:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009a      	lsls	r2, r3, #2
 8003984:	441a      	add	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	4a22      	ldr	r2, [pc, #136]	@ (8003a1c <UART_SetConfig+0x118>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	0119      	lsls	r1, r3, #4
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009a      	lsls	r2, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80039b0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a1c <UART_SetConfig+0x118>)
 80039b2:	fba3 0302 	umull	r0, r3, r3, r2
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	2064      	movs	r0, #100	@ 0x64
 80039ba:	fb00 f303 	mul.w	r3, r0, r3
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	3332      	adds	r3, #50	@ 0x32
 80039c4:	4a15      	ldr	r2, [pc, #84]	@ (8003a1c <UART_SetConfig+0x118>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039d0:	4419      	add	r1, r3
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	009a      	lsls	r2, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a1c <UART_SetConfig+0x118>)
 80039ea:	fba3 0302 	umull	r0, r3, r3, r2
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2064      	movs	r0, #100	@ 0x64
 80039f2:	fb00 f303 	mul.w	r3, r0, r3
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	3332      	adds	r3, #50	@ 0x32
 80039fc:	4a07      	ldr	r2, [pc, #28]	@ (8003a1c <UART_SetConfig+0x118>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	f003 020f 	and.w	r2, r3, #15
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	440a      	add	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40013800 	.word	0x40013800
 8003a1c:	51eb851f 	.word	0x51eb851f

08003a20 <__cvt>:
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a26:	461d      	mov	r5, r3
 8003a28:	bfbb      	ittet	lt
 8003a2a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003a2e:	461d      	movlt	r5, r3
 8003a30:	2300      	movge	r3, #0
 8003a32:	232d      	movlt	r3, #45	@ 0x2d
 8003a34:	b088      	sub	sp, #32
 8003a36:	4614      	mov	r4, r2
 8003a38:	bfb8      	it	lt
 8003a3a:	4614      	movlt	r4, r2
 8003a3c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003a3e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003a40:	7013      	strb	r3, [r2, #0]
 8003a42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003a44:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003a48:	f023 0820 	bic.w	r8, r3, #32
 8003a4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a50:	d005      	beq.n	8003a5e <__cvt+0x3e>
 8003a52:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003a56:	d100      	bne.n	8003a5a <__cvt+0x3a>
 8003a58:	3601      	adds	r6, #1
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e000      	b.n	8003a60 <__cvt+0x40>
 8003a5e:	2303      	movs	r3, #3
 8003a60:	aa07      	add	r2, sp, #28
 8003a62:	9204      	str	r2, [sp, #16]
 8003a64:	aa06      	add	r2, sp, #24
 8003a66:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003a6a:	e9cd 3600 	strd	r3, r6, [sp]
 8003a6e:	4622      	mov	r2, r4
 8003a70:	462b      	mov	r3, r5
 8003a72:	f000 fe8d 	bl	8004790 <_dtoa_r>
 8003a76:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003a7a:	4607      	mov	r7, r0
 8003a7c:	d119      	bne.n	8003ab2 <__cvt+0x92>
 8003a7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003a80:	07db      	lsls	r3, r3, #31
 8003a82:	d50e      	bpl.n	8003aa2 <__cvt+0x82>
 8003a84:	eb00 0906 	add.w	r9, r0, r6
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	4629      	mov	r1, r5
 8003a90:	f7fc ff8a 	bl	80009a8 <__aeabi_dcmpeq>
 8003a94:	b108      	cbz	r0, 8003a9a <__cvt+0x7a>
 8003a96:	f8cd 901c 	str.w	r9, [sp, #28]
 8003a9a:	2230      	movs	r2, #48	@ 0x30
 8003a9c:	9b07      	ldr	r3, [sp, #28]
 8003a9e:	454b      	cmp	r3, r9
 8003aa0:	d31e      	bcc.n	8003ae0 <__cvt+0xc0>
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	9b07      	ldr	r3, [sp, #28]
 8003aa6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003aa8:	1bdb      	subs	r3, r3, r7
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	b008      	add	sp, #32
 8003aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ab6:	eb00 0906 	add.w	r9, r0, r6
 8003aba:	d1e5      	bne.n	8003a88 <__cvt+0x68>
 8003abc:	7803      	ldrb	r3, [r0, #0]
 8003abe:	2b30      	cmp	r3, #48	@ 0x30
 8003ac0:	d10a      	bne.n	8003ad8 <__cvt+0xb8>
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	4629      	mov	r1, r5
 8003aca:	f7fc ff6d 	bl	80009a8 <__aeabi_dcmpeq>
 8003ace:	b918      	cbnz	r0, 8003ad8 <__cvt+0xb8>
 8003ad0:	f1c6 0601 	rsb	r6, r6, #1
 8003ad4:	f8ca 6000 	str.w	r6, [sl]
 8003ad8:	f8da 3000 	ldr.w	r3, [sl]
 8003adc:	4499      	add	r9, r3
 8003ade:	e7d3      	b.n	8003a88 <__cvt+0x68>
 8003ae0:	1c59      	adds	r1, r3, #1
 8003ae2:	9107      	str	r1, [sp, #28]
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	e7d9      	b.n	8003a9c <__cvt+0x7c>

08003ae8 <__exponent>:
 8003ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aea:	2900      	cmp	r1, #0
 8003aec:	bfb6      	itet	lt
 8003aee:	232d      	movlt	r3, #45	@ 0x2d
 8003af0:	232b      	movge	r3, #43	@ 0x2b
 8003af2:	4249      	neglt	r1, r1
 8003af4:	2909      	cmp	r1, #9
 8003af6:	7002      	strb	r2, [r0, #0]
 8003af8:	7043      	strb	r3, [r0, #1]
 8003afa:	dd29      	ble.n	8003b50 <__exponent+0x68>
 8003afc:	f10d 0307 	add.w	r3, sp, #7
 8003b00:	461d      	mov	r5, r3
 8003b02:	270a      	movs	r7, #10
 8003b04:	fbb1 f6f7 	udiv	r6, r1, r7
 8003b08:	461a      	mov	r2, r3
 8003b0a:	fb07 1416 	mls	r4, r7, r6, r1
 8003b0e:	3430      	adds	r4, #48	@ 0x30
 8003b10:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003b14:	460c      	mov	r4, r1
 8003b16:	2c63      	cmp	r4, #99	@ 0x63
 8003b18:	4631      	mov	r1, r6
 8003b1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b1e:	dcf1      	bgt.n	8003b04 <__exponent+0x1c>
 8003b20:	3130      	adds	r1, #48	@ 0x30
 8003b22:	1e94      	subs	r4, r2, #2
 8003b24:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003b28:	4623      	mov	r3, r4
 8003b2a:	1c41      	adds	r1, r0, #1
 8003b2c:	42ab      	cmp	r3, r5
 8003b2e:	d30a      	bcc.n	8003b46 <__exponent+0x5e>
 8003b30:	f10d 0309 	add.w	r3, sp, #9
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	42ac      	cmp	r4, r5
 8003b38:	bf88      	it	hi
 8003b3a:	2300      	movhi	r3, #0
 8003b3c:	3302      	adds	r3, #2
 8003b3e:	4403      	add	r3, r0
 8003b40:	1a18      	subs	r0, r3, r0
 8003b42:	b003      	add	sp, #12
 8003b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b46:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003b4a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003b4e:	e7ed      	b.n	8003b2c <__exponent+0x44>
 8003b50:	2330      	movs	r3, #48	@ 0x30
 8003b52:	3130      	adds	r1, #48	@ 0x30
 8003b54:	7083      	strb	r3, [r0, #2]
 8003b56:	70c1      	strb	r1, [r0, #3]
 8003b58:	1d03      	adds	r3, r0, #4
 8003b5a:	e7f1      	b.n	8003b40 <__exponent+0x58>

08003b5c <_printf_float>:
 8003b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b60:	b091      	sub	sp, #68	@ 0x44
 8003b62:	460c      	mov	r4, r1
 8003b64:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003b68:	4616      	mov	r6, r2
 8003b6a:	461f      	mov	r7, r3
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	f000 fcf3 	bl	8004558 <_localeconv_r>
 8003b72:	6803      	ldr	r3, [r0, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	9308      	str	r3, [sp, #32]
 8003b78:	f7fc faea 	bl	8000150 <strlen>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003b80:	f8d8 3000 	ldr.w	r3, [r8]
 8003b84:	9009      	str	r0, [sp, #36]	@ 0x24
 8003b86:	3307      	adds	r3, #7
 8003b88:	f023 0307 	bic.w	r3, r3, #7
 8003b8c:	f103 0208 	add.w	r2, r3, #8
 8003b90:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003b94:	f8d4 b000 	ldr.w	fp, [r4]
 8003b98:	f8c8 2000 	str.w	r2, [r8]
 8003b9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003ba0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003ba4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ba6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003baa:	f04f 32ff 	mov.w	r2, #4294967295
 8003bae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003bb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003bb6:	4b9c      	ldr	r3, [pc, #624]	@ (8003e28 <_printf_float+0x2cc>)
 8003bb8:	f7fc ff28 	bl	8000a0c <__aeabi_dcmpun>
 8003bbc:	bb70      	cbnz	r0, 8003c1c <_printf_float+0xc0>
 8003bbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc6:	4b98      	ldr	r3, [pc, #608]	@ (8003e28 <_printf_float+0x2cc>)
 8003bc8:	f7fc ff02 	bl	80009d0 <__aeabi_dcmple>
 8003bcc:	bb30      	cbnz	r0, 8003c1c <_printf_float+0xc0>
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	f7fc fef1 	bl	80009bc <__aeabi_dcmplt>
 8003bda:	b110      	cbz	r0, 8003be2 <_printf_float+0x86>
 8003bdc:	232d      	movs	r3, #45	@ 0x2d
 8003bde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003be2:	4a92      	ldr	r2, [pc, #584]	@ (8003e2c <_printf_float+0x2d0>)
 8003be4:	4b92      	ldr	r3, [pc, #584]	@ (8003e30 <_printf_float+0x2d4>)
 8003be6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003bea:	bf8c      	ite	hi
 8003bec:	4690      	movhi	r8, r2
 8003bee:	4698      	movls	r8, r3
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	f04f 0900 	mov.w	r9, #0
 8003bf6:	6123      	str	r3, [r4, #16]
 8003bf8:	f02b 0304 	bic.w	r3, fp, #4
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	4633      	mov	r3, r6
 8003c00:	4621      	mov	r1, r4
 8003c02:	4628      	mov	r0, r5
 8003c04:	9700      	str	r7, [sp, #0]
 8003c06:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003c08:	f000 f9d4 	bl	8003fb4 <_printf_common>
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	f040 8090 	bne.w	8003d32 <_printf_float+0x1d6>
 8003c12:	f04f 30ff 	mov.w	r0, #4294967295
 8003c16:	b011      	add	sp, #68	@ 0x44
 8003c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	464b      	mov	r3, r9
 8003c20:	4640      	mov	r0, r8
 8003c22:	4649      	mov	r1, r9
 8003c24:	f7fc fef2 	bl	8000a0c <__aeabi_dcmpun>
 8003c28:	b148      	cbz	r0, 8003c3e <_printf_float+0xe2>
 8003c2a:	464b      	mov	r3, r9
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bfb8      	it	lt
 8003c30:	232d      	movlt	r3, #45	@ 0x2d
 8003c32:	4a80      	ldr	r2, [pc, #512]	@ (8003e34 <_printf_float+0x2d8>)
 8003c34:	bfb8      	it	lt
 8003c36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e38 <_printf_float+0x2dc>)
 8003c3c:	e7d3      	b.n	8003be6 <_printf_float+0x8a>
 8003c3e:	6863      	ldr	r3, [r4, #4]
 8003c40:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	d13f      	bne.n	8003cc8 <_printf_float+0x16c>
 8003c48:	2306      	movs	r3, #6
 8003c4a:	6063      	str	r3, [r4, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003c52:	6023      	str	r3, [r4, #0]
 8003c54:	9206      	str	r2, [sp, #24]
 8003c56:	aa0e      	add	r2, sp, #56	@ 0x38
 8003c58:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003c5c:	aa0d      	add	r2, sp, #52	@ 0x34
 8003c5e:	9203      	str	r2, [sp, #12]
 8003c60:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003c64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c68:	6863      	ldr	r3, [r4, #4]
 8003c6a:	4642      	mov	r2, r8
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	4628      	mov	r0, r5
 8003c70:	464b      	mov	r3, r9
 8003c72:	910a      	str	r1, [sp, #40]	@ 0x28
 8003c74:	f7ff fed4 	bl	8003a20 <__cvt>
 8003c78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003c7a:	4680      	mov	r8, r0
 8003c7c:	2947      	cmp	r1, #71	@ 0x47
 8003c7e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003c80:	d128      	bne.n	8003cd4 <_printf_float+0x178>
 8003c82:	1cc8      	adds	r0, r1, #3
 8003c84:	db02      	blt.n	8003c8c <_printf_float+0x130>
 8003c86:	6863      	ldr	r3, [r4, #4]
 8003c88:	4299      	cmp	r1, r3
 8003c8a:	dd40      	ble.n	8003d0e <_printf_float+0x1b2>
 8003c8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003c90:	fa5f fa8a 	uxtb.w	sl, sl
 8003c94:	4652      	mov	r2, sl
 8003c96:	3901      	subs	r1, #1
 8003c98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003c9c:	910d      	str	r1, [sp, #52]	@ 0x34
 8003c9e:	f7ff ff23 	bl	8003ae8 <__exponent>
 8003ca2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003ca4:	4681      	mov	r9, r0
 8003ca6:	1813      	adds	r3, r2, r0
 8003ca8:	2a01      	cmp	r2, #1
 8003caa:	6123      	str	r3, [r4, #16]
 8003cac:	dc02      	bgt.n	8003cb4 <_printf_float+0x158>
 8003cae:	6822      	ldr	r2, [r4, #0]
 8003cb0:	07d2      	lsls	r2, r2, #31
 8003cb2:	d501      	bpl.n	8003cb8 <_printf_float+0x15c>
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	6123      	str	r3, [r4, #16]
 8003cb8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d09e      	beq.n	8003bfe <_printf_float+0xa2>
 8003cc0:	232d      	movs	r3, #45	@ 0x2d
 8003cc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cc6:	e79a      	b.n	8003bfe <_printf_float+0xa2>
 8003cc8:	2947      	cmp	r1, #71	@ 0x47
 8003cca:	d1bf      	bne.n	8003c4c <_printf_float+0xf0>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1bd      	bne.n	8003c4c <_printf_float+0xf0>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e7ba      	b.n	8003c4a <_printf_float+0xee>
 8003cd4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003cd8:	d9dc      	bls.n	8003c94 <_printf_float+0x138>
 8003cda:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003cde:	d118      	bne.n	8003d12 <_printf_float+0x1b6>
 8003ce0:	2900      	cmp	r1, #0
 8003ce2:	6863      	ldr	r3, [r4, #4]
 8003ce4:	dd0b      	ble.n	8003cfe <_printf_float+0x1a2>
 8003ce6:	6121      	str	r1, [r4, #16]
 8003ce8:	b913      	cbnz	r3, 8003cf0 <_printf_float+0x194>
 8003cea:	6822      	ldr	r2, [r4, #0]
 8003cec:	07d0      	lsls	r0, r2, #31
 8003cee:	d502      	bpl.n	8003cf6 <_printf_float+0x19a>
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	440b      	add	r3, r1
 8003cf4:	6123      	str	r3, [r4, #16]
 8003cf6:	f04f 0900 	mov.w	r9, #0
 8003cfa:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003cfc:	e7dc      	b.n	8003cb8 <_printf_float+0x15c>
 8003cfe:	b913      	cbnz	r3, 8003d06 <_printf_float+0x1aa>
 8003d00:	6822      	ldr	r2, [r4, #0]
 8003d02:	07d2      	lsls	r2, r2, #31
 8003d04:	d501      	bpl.n	8003d0a <_printf_float+0x1ae>
 8003d06:	3302      	adds	r3, #2
 8003d08:	e7f4      	b.n	8003cf4 <_printf_float+0x198>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e7f2      	b.n	8003cf4 <_printf_float+0x198>
 8003d0e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003d12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d14:	4299      	cmp	r1, r3
 8003d16:	db05      	blt.n	8003d24 <_printf_float+0x1c8>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	6121      	str	r1, [r4, #16]
 8003d1c:	07d8      	lsls	r0, r3, #31
 8003d1e:	d5ea      	bpl.n	8003cf6 <_printf_float+0x19a>
 8003d20:	1c4b      	adds	r3, r1, #1
 8003d22:	e7e7      	b.n	8003cf4 <_printf_float+0x198>
 8003d24:	2900      	cmp	r1, #0
 8003d26:	bfcc      	ite	gt
 8003d28:	2201      	movgt	r2, #1
 8003d2a:	f1c1 0202 	rsble	r2, r1, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	e7e0      	b.n	8003cf4 <_printf_float+0x198>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	055a      	lsls	r2, r3, #21
 8003d36:	d407      	bmi.n	8003d48 <_printf_float+0x1ec>
 8003d38:	6923      	ldr	r3, [r4, #16]
 8003d3a:	4642      	mov	r2, r8
 8003d3c:	4631      	mov	r1, r6
 8003d3e:	4628      	mov	r0, r5
 8003d40:	47b8      	blx	r7
 8003d42:	3001      	adds	r0, #1
 8003d44:	d12b      	bne.n	8003d9e <_printf_float+0x242>
 8003d46:	e764      	b.n	8003c12 <_printf_float+0xb6>
 8003d48:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d4c:	f240 80dc 	bls.w	8003f08 <_printf_float+0x3ac>
 8003d50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d54:	2200      	movs	r2, #0
 8003d56:	2300      	movs	r3, #0
 8003d58:	f7fc fe26 	bl	80009a8 <__aeabi_dcmpeq>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d033      	beq.n	8003dc8 <_printf_float+0x26c>
 8003d60:	2301      	movs	r3, #1
 8003d62:	4631      	mov	r1, r6
 8003d64:	4628      	mov	r0, r5
 8003d66:	4a35      	ldr	r2, [pc, #212]	@ (8003e3c <_printf_float+0x2e0>)
 8003d68:	47b8      	blx	r7
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	f43f af51 	beq.w	8003c12 <_printf_float+0xb6>
 8003d70:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003d74:	4543      	cmp	r3, r8
 8003d76:	db02      	blt.n	8003d7e <_printf_float+0x222>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	07d8      	lsls	r0, r3, #31
 8003d7c:	d50f      	bpl.n	8003d9e <_printf_float+0x242>
 8003d7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d82:	4631      	mov	r1, r6
 8003d84:	4628      	mov	r0, r5
 8003d86:	47b8      	blx	r7
 8003d88:	3001      	adds	r0, #1
 8003d8a:	f43f af42 	beq.w	8003c12 <_printf_float+0xb6>
 8003d8e:	f04f 0900 	mov.w	r9, #0
 8003d92:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d96:	f104 0a1a 	add.w	sl, r4, #26
 8003d9a:	45c8      	cmp	r8, r9
 8003d9c:	dc09      	bgt.n	8003db2 <_printf_float+0x256>
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	079b      	lsls	r3, r3, #30
 8003da2:	f100 8102 	bmi.w	8003faa <_printf_float+0x44e>
 8003da6:	68e0      	ldr	r0, [r4, #12]
 8003da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003daa:	4298      	cmp	r0, r3
 8003dac:	bfb8      	it	lt
 8003dae:	4618      	movlt	r0, r3
 8003db0:	e731      	b.n	8003c16 <_printf_float+0xba>
 8003db2:	2301      	movs	r3, #1
 8003db4:	4652      	mov	r2, sl
 8003db6:	4631      	mov	r1, r6
 8003db8:	4628      	mov	r0, r5
 8003dba:	47b8      	blx	r7
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	f43f af28 	beq.w	8003c12 <_printf_float+0xb6>
 8003dc2:	f109 0901 	add.w	r9, r9, #1
 8003dc6:	e7e8      	b.n	8003d9a <_printf_float+0x23e>
 8003dc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	dc38      	bgt.n	8003e40 <_printf_float+0x2e4>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	4631      	mov	r1, r6
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	4a19      	ldr	r2, [pc, #100]	@ (8003e3c <_printf_float+0x2e0>)
 8003dd6:	47b8      	blx	r7
 8003dd8:	3001      	adds	r0, #1
 8003dda:	f43f af1a 	beq.w	8003c12 <_printf_float+0xb6>
 8003dde:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003de2:	ea59 0303 	orrs.w	r3, r9, r3
 8003de6:	d102      	bne.n	8003dee <_printf_float+0x292>
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	07d9      	lsls	r1, r3, #31
 8003dec:	d5d7      	bpl.n	8003d9e <_printf_float+0x242>
 8003dee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003df2:	4631      	mov	r1, r6
 8003df4:	4628      	mov	r0, r5
 8003df6:	47b8      	blx	r7
 8003df8:	3001      	adds	r0, #1
 8003dfa:	f43f af0a 	beq.w	8003c12 <_printf_float+0xb6>
 8003dfe:	f04f 0a00 	mov.w	sl, #0
 8003e02:	f104 0b1a 	add.w	fp, r4, #26
 8003e06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e08:	425b      	negs	r3, r3
 8003e0a:	4553      	cmp	r3, sl
 8003e0c:	dc01      	bgt.n	8003e12 <_printf_float+0x2b6>
 8003e0e:	464b      	mov	r3, r9
 8003e10:	e793      	b.n	8003d3a <_printf_float+0x1de>
 8003e12:	2301      	movs	r3, #1
 8003e14:	465a      	mov	r2, fp
 8003e16:	4631      	mov	r1, r6
 8003e18:	4628      	mov	r0, r5
 8003e1a:	47b8      	blx	r7
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	f43f aef8 	beq.w	8003c12 <_printf_float+0xb6>
 8003e22:	f10a 0a01 	add.w	sl, sl, #1
 8003e26:	e7ee      	b.n	8003e06 <_printf_float+0x2aa>
 8003e28:	7fefffff 	.word	0x7fefffff
 8003e2c:	080067aa 	.word	0x080067aa
 8003e30:	080067a6 	.word	0x080067a6
 8003e34:	080067b2 	.word	0x080067b2
 8003e38:	080067ae 	.word	0x080067ae
 8003e3c:	080067b6 	.word	0x080067b6
 8003e40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e42:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003e46:	4553      	cmp	r3, sl
 8003e48:	bfa8      	it	ge
 8003e4a:	4653      	movge	r3, sl
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	4699      	mov	r9, r3
 8003e50:	dc36      	bgt.n	8003ec0 <_printf_float+0x364>
 8003e52:	f04f 0b00 	mov.w	fp, #0
 8003e56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e5a:	f104 021a 	add.w	r2, r4, #26
 8003e5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e60:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e62:	eba3 0309 	sub.w	r3, r3, r9
 8003e66:	455b      	cmp	r3, fp
 8003e68:	dc31      	bgt.n	8003ece <_printf_float+0x372>
 8003e6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e6c:	459a      	cmp	sl, r3
 8003e6e:	dc3a      	bgt.n	8003ee6 <_printf_float+0x38a>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	07da      	lsls	r2, r3, #31
 8003e74:	d437      	bmi.n	8003ee6 <_printf_float+0x38a>
 8003e76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e78:	ebaa 0903 	sub.w	r9, sl, r3
 8003e7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e7e:	ebaa 0303 	sub.w	r3, sl, r3
 8003e82:	4599      	cmp	r9, r3
 8003e84:	bfa8      	it	ge
 8003e86:	4699      	movge	r9, r3
 8003e88:	f1b9 0f00 	cmp.w	r9, #0
 8003e8c:	dc33      	bgt.n	8003ef6 <_printf_float+0x39a>
 8003e8e:	f04f 0800 	mov.w	r8, #0
 8003e92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e96:	f104 0b1a 	add.w	fp, r4, #26
 8003e9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e9c:	ebaa 0303 	sub.w	r3, sl, r3
 8003ea0:	eba3 0309 	sub.w	r3, r3, r9
 8003ea4:	4543      	cmp	r3, r8
 8003ea6:	f77f af7a 	ble.w	8003d9e <_printf_float+0x242>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	465a      	mov	r2, fp
 8003eae:	4631      	mov	r1, r6
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	47b8      	blx	r7
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	f43f aeac 	beq.w	8003c12 <_printf_float+0xb6>
 8003eba:	f108 0801 	add.w	r8, r8, #1
 8003ebe:	e7ec      	b.n	8003e9a <_printf_float+0x33e>
 8003ec0:	4642      	mov	r2, r8
 8003ec2:	4631      	mov	r1, r6
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	47b8      	blx	r7
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d1c2      	bne.n	8003e52 <_printf_float+0x2f6>
 8003ecc:	e6a1      	b.n	8003c12 <_printf_float+0xb6>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	920a      	str	r2, [sp, #40]	@ 0x28
 8003ed6:	47b8      	blx	r7
 8003ed8:	3001      	adds	r0, #1
 8003eda:	f43f ae9a 	beq.w	8003c12 <_printf_float+0xb6>
 8003ede:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ee0:	f10b 0b01 	add.w	fp, fp, #1
 8003ee4:	e7bb      	b.n	8003e5e <_printf_float+0x302>
 8003ee6:	4631      	mov	r1, r6
 8003ee8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003eec:	4628      	mov	r0, r5
 8003eee:	47b8      	blx	r7
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	d1c0      	bne.n	8003e76 <_printf_float+0x31a>
 8003ef4:	e68d      	b.n	8003c12 <_printf_float+0xb6>
 8003ef6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ef8:	464b      	mov	r3, r9
 8003efa:	4631      	mov	r1, r6
 8003efc:	4628      	mov	r0, r5
 8003efe:	4442      	add	r2, r8
 8003f00:	47b8      	blx	r7
 8003f02:	3001      	adds	r0, #1
 8003f04:	d1c3      	bne.n	8003e8e <_printf_float+0x332>
 8003f06:	e684      	b.n	8003c12 <_printf_float+0xb6>
 8003f08:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003f0c:	f1ba 0f01 	cmp.w	sl, #1
 8003f10:	dc01      	bgt.n	8003f16 <_printf_float+0x3ba>
 8003f12:	07db      	lsls	r3, r3, #31
 8003f14:	d536      	bpl.n	8003f84 <_printf_float+0x428>
 8003f16:	2301      	movs	r3, #1
 8003f18:	4642      	mov	r2, r8
 8003f1a:	4631      	mov	r1, r6
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	47b8      	blx	r7
 8003f20:	3001      	adds	r0, #1
 8003f22:	f43f ae76 	beq.w	8003c12 <_printf_float+0xb6>
 8003f26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f2a:	4631      	mov	r1, r6
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	47b8      	blx	r7
 8003f30:	3001      	adds	r0, #1
 8003f32:	f43f ae6e 	beq.w	8003c12 <_printf_float+0xb6>
 8003f36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f42:	f7fc fd31 	bl	80009a8 <__aeabi_dcmpeq>
 8003f46:	b9c0      	cbnz	r0, 8003f7a <_printf_float+0x41e>
 8003f48:	4653      	mov	r3, sl
 8003f4a:	f108 0201 	add.w	r2, r8, #1
 8003f4e:	4631      	mov	r1, r6
 8003f50:	4628      	mov	r0, r5
 8003f52:	47b8      	blx	r7
 8003f54:	3001      	adds	r0, #1
 8003f56:	d10c      	bne.n	8003f72 <_printf_float+0x416>
 8003f58:	e65b      	b.n	8003c12 <_printf_float+0xb6>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	465a      	mov	r2, fp
 8003f5e:	4631      	mov	r1, r6
 8003f60:	4628      	mov	r0, r5
 8003f62:	47b8      	blx	r7
 8003f64:	3001      	adds	r0, #1
 8003f66:	f43f ae54 	beq.w	8003c12 <_printf_float+0xb6>
 8003f6a:	f108 0801 	add.w	r8, r8, #1
 8003f6e:	45d0      	cmp	r8, sl
 8003f70:	dbf3      	blt.n	8003f5a <_printf_float+0x3fe>
 8003f72:	464b      	mov	r3, r9
 8003f74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003f78:	e6e0      	b.n	8003d3c <_printf_float+0x1e0>
 8003f7a:	f04f 0800 	mov.w	r8, #0
 8003f7e:	f104 0b1a 	add.w	fp, r4, #26
 8003f82:	e7f4      	b.n	8003f6e <_printf_float+0x412>
 8003f84:	2301      	movs	r3, #1
 8003f86:	4642      	mov	r2, r8
 8003f88:	e7e1      	b.n	8003f4e <_printf_float+0x3f2>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	464a      	mov	r2, r9
 8003f8e:	4631      	mov	r1, r6
 8003f90:	4628      	mov	r0, r5
 8003f92:	47b8      	blx	r7
 8003f94:	3001      	adds	r0, #1
 8003f96:	f43f ae3c 	beq.w	8003c12 <_printf_float+0xb6>
 8003f9a:	f108 0801 	add.w	r8, r8, #1
 8003f9e:	68e3      	ldr	r3, [r4, #12]
 8003fa0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003fa2:	1a5b      	subs	r3, r3, r1
 8003fa4:	4543      	cmp	r3, r8
 8003fa6:	dcf0      	bgt.n	8003f8a <_printf_float+0x42e>
 8003fa8:	e6fd      	b.n	8003da6 <_printf_float+0x24a>
 8003faa:	f04f 0800 	mov.w	r8, #0
 8003fae:	f104 0919 	add.w	r9, r4, #25
 8003fb2:	e7f4      	b.n	8003f9e <_printf_float+0x442>

08003fb4 <_printf_common>:
 8003fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb8:	4616      	mov	r6, r2
 8003fba:	4698      	mov	r8, r3
 8003fbc:	688a      	ldr	r2, [r1, #8]
 8003fbe:	690b      	ldr	r3, [r1, #16]
 8003fc0:	4607      	mov	r7, r0
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	bfb8      	it	lt
 8003fc6:	4613      	movlt	r3, r2
 8003fc8:	6033      	str	r3, [r6, #0]
 8003fca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fce:	460c      	mov	r4, r1
 8003fd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fd4:	b10a      	cbz	r2, 8003fda <_printf_common+0x26>
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	6033      	str	r3, [r6, #0]
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	0699      	lsls	r1, r3, #26
 8003fde:	bf42      	ittt	mi
 8003fe0:	6833      	ldrmi	r3, [r6, #0]
 8003fe2:	3302      	addmi	r3, #2
 8003fe4:	6033      	strmi	r3, [r6, #0]
 8003fe6:	6825      	ldr	r5, [r4, #0]
 8003fe8:	f015 0506 	ands.w	r5, r5, #6
 8003fec:	d106      	bne.n	8003ffc <_printf_common+0x48>
 8003fee:	f104 0a19 	add.w	sl, r4, #25
 8003ff2:	68e3      	ldr	r3, [r4, #12]
 8003ff4:	6832      	ldr	r2, [r6, #0]
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	42ab      	cmp	r3, r5
 8003ffa:	dc2b      	bgt.n	8004054 <_printf_common+0xa0>
 8003ffc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004000:	6822      	ldr	r2, [r4, #0]
 8004002:	3b00      	subs	r3, #0
 8004004:	bf18      	it	ne
 8004006:	2301      	movne	r3, #1
 8004008:	0692      	lsls	r2, r2, #26
 800400a:	d430      	bmi.n	800406e <_printf_common+0xba>
 800400c:	4641      	mov	r1, r8
 800400e:	4638      	mov	r0, r7
 8004010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004014:	47c8      	blx	r9
 8004016:	3001      	adds	r0, #1
 8004018:	d023      	beq.n	8004062 <_printf_common+0xae>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	6922      	ldr	r2, [r4, #16]
 800401e:	f003 0306 	and.w	r3, r3, #6
 8004022:	2b04      	cmp	r3, #4
 8004024:	bf14      	ite	ne
 8004026:	2500      	movne	r5, #0
 8004028:	6833      	ldreq	r3, [r6, #0]
 800402a:	f04f 0600 	mov.w	r6, #0
 800402e:	bf08      	it	eq
 8004030:	68e5      	ldreq	r5, [r4, #12]
 8004032:	f104 041a 	add.w	r4, r4, #26
 8004036:	bf08      	it	eq
 8004038:	1aed      	subeq	r5, r5, r3
 800403a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800403e:	bf08      	it	eq
 8004040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004044:	4293      	cmp	r3, r2
 8004046:	bfc4      	itt	gt
 8004048:	1a9b      	subgt	r3, r3, r2
 800404a:	18ed      	addgt	r5, r5, r3
 800404c:	42b5      	cmp	r5, r6
 800404e:	d11a      	bne.n	8004086 <_printf_common+0xd2>
 8004050:	2000      	movs	r0, #0
 8004052:	e008      	b.n	8004066 <_printf_common+0xb2>
 8004054:	2301      	movs	r3, #1
 8004056:	4652      	mov	r2, sl
 8004058:	4641      	mov	r1, r8
 800405a:	4638      	mov	r0, r7
 800405c:	47c8      	blx	r9
 800405e:	3001      	adds	r0, #1
 8004060:	d103      	bne.n	800406a <_printf_common+0xb6>
 8004062:	f04f 30ff 	mov.w	r0, #4294967295
 8004066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800406a:	3501      	adds	r5, #1
 800406c:	e7c1      	b.n	8003ff2 <_printf_common+0x3e>
 800406e:	2030      	movs	r0, #48	@ 0x30
 8004070:	18e1      	adds	r1, r4, r3
 8004072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800407c:	4422      	add	r2, r4
 800407e:	3302      	adds	r3, #2
 8004080:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004084:	e7c2      	b.n	800400c <_printf_common+0x58>
 8004086:	2301      	movs	r3, #1
 8004088:	4622      	mov	r2, r4
 800408a:	4641      	mov	r1, r8
 800408c:	4638      	mov	r0, r7
 800408e:	47c8      	blx	r9
 8004090:	3001      	adds	r0, #1
 8004092:	d0e6      	beq.n	8004062 <_printf_common+0xae>
 8004094:	3601      	adds	r6, #1
 8004096:	e7d9      	b.n	800404c <_printf_common+0x98>

08004098 <_printf_i>:
 8004098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800409c:	7e0f      	ldrb	r7, [r1, #24]
 800409e:	4691      	mov	r9, r2
 80040a0:	2f78      	cmp	r7, #120	@ 0x78
 80040a2:	4680      	mov	r8, r0
 80040a4:	460c      	mov	r4, r1
 80040a6:	469a      	mov	sl, r3
 80040a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040ae:	d807      	bhi.n	80040c0 <_printf_i+0x28>
 80040b0:	2f62      	cmp	r7, #98	@ 0x62
 80040b2:	d80a      	bhi.n	80040ca <_printf_i+0x32>
 80040b4:	2f00      	cmp	r7, #0
 80040b6:	f000 80d1 	beq.w	800425c <_printf_i+0x1c4>
 80040ba:	2f58      	cmp	r7, #88	@ 0x58
 80040bc:	f000 80b8 	beq.w	8004230 <_printf_i+0x198>
 80040c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040c8:	e03a      	b.n	8004140 <_printf_i+0xa8>
 80040ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040ce:	2b15      	cmp	r3, #21
 80040d0:	d8f6      	bhi.n	80040c0 <_printf_i+0x28>
 80040d2:	a101      	add	r1, pc, #4	@ (adr r1, 80040d8 <_printf_i+0x40>)
 80040d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040d8:	08004131 	.word	0x08004131
 80040dc:	08004145 	.word	0x08004145
 80040e0:	080040c1 	.word	0x080040c1
 80040e4:	080040c1 	.word	0x080040c1
 80040e8:	080040c1 	.word	0x080040c1
 80040ec:	080040c1 	.word	0x080040c1
 80040f0:	08004145 	.word	0x08004145
 80040f4:	080040c1 	.word	0x080040c1
 80040f8:	080040c1 	.word	0x080040c1
 80040fc:	080040c1 	.word	0x080040c1
 8004100:	080040c1 	.word	0x080040c1
 8004104:	08004243 	.word	0x08004243
 8004108:	0800416f 	.word	0x0800416f
 800410c:	080041fd 	.word	0x080041fd
 8004110:	080040c1 	.word	0x080040c1
 8004114:	080040c1 	.word	0x080040c1
 8004118:	08004265 	.word	0x08004265
 800411c:	080040c1 	.word	0x080040c1
 8004120:	0800416f 	.word	0x0800416f
 8004124:	080040c1 	.word	0x080040c1
 8004128:	080040c1 	.word	0x080040c1
 800412c:	08004205 	.word	0x08004205
 8004130:	6833      	ldr	r3, [r6, #0]
 8004132:	1d1a      	adds	r2, r3, #4
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6032      	str	r2, [r6, #0]
 8004138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800413c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004140:	2301      	movs	r3, #1
 8004142:	e09c      	b.n	800427e <_printf_i+0x1e6>
 8004144:	6833      	ldr	r3, [r6, #0]
 8004146:	6820      	ldr	r0, [r4, #0]
 8004148:	1d19      	adds	r1, r3, #4
 800414a:	6031      	str	r1, [r6, #0]
 800414c:	0606      	lsls	r6, r0, #24
 800414e:	d501      	bpl.n	8004154 <_printf_i+0xbc>
 8004150:	681d      	ldr	r5, [r3, #0]
 8004152:	e003      	b.n	800415c <_printf_i+0xc4>
 8004154:	0645      	lsls	r5, r0, #25
 8004156:	d5fb      	bpl.n	8004150 <_printf_i+0xb8>
 8004158:	f9b3 5000 	ldrsh.w	r5, [r3]
 800415c:	2d00      	cmp	r5, #0
 800415e:	da03      	bge.n	8004168 <_printf_i+0xd0>
 8004160:	232d      	movs	r3, #45	@ 0x2d
 8004162:	426d      	negs	r5, r5
 8004164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004168:	230a      	movs	r3, #10
 800416a:	4858      	ldr	r0, [pc, #352]	@ (80042cc <_printf_i+0x234>)
 800416c:	e011      	b.n	8004192 <_printf_i+0xfa>
 800416e:	6821      	ldr	r1, [r4, #0]
 8004170:	6833      	ldr	r3, [r6, #0]
 8004172:	0608      	lsls	r0, r1, #24
 8004174:	f853 5b04 	ldr.w	r5, [r3], #4
 8004178:	d402      	bmi.n	8004180 <_printf_i+0xe8>
 800417a:	0649      	lsls	r1, r1, #25
 800417c:	bf48      	it	mi
 800417e:	b2ad      	uxthmi	r5, r5
 8004180:	2f6f      	cmp	r7, #111	@ 0x6f
 8004182:	6033      	str	r3, [r6, #0]
 8004184:	bf14      	ite	ne
 8004186:	230a      	movne	r3, #10
 8004188:	2308      	moveq	r3, #8
 800418a:	4850      	ldr	r0, [pc, #320]	@ (80042cc <_printf_i+0x234>)
 800418c:	2100      	movs	r1, #0
 800418e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004192:	6866      	ldr	r6, [r4, #4]
 8004194:	2e00      	cmp	r6, #0
 8004196:	60a6      	str	r6, [r4, #8]
 8004198:	db05      	blt.n	80041a6 <_printf_i+0x10e>
 800419a:	6821      	ldr	r1, [r4, #0]
 800419c:	432e      	orrs	r6, r5
 800419e:	f021 0104 	bic.w	r1, r1, #4
 80041a2:	6021      	str	r1, [r4, #0]
 80041a4:	d04b      	beq.n	800423e <_printf_i+0x1a6>
 80041a6:	4616      	mov	r6, r2
 80041a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80041ac:	fb03 5711 	mls	r7, r3, r1, r5
 80041b0:	5dc7      	ldrb	r7, [r0, r7]
 80041b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041b6:	462f      	mov	r7, r5
 80041b8:	42bb      	cmp	r3, r7
 80041ba:	460d      	mov	r5, r1
 80041bc:	d9f4      	bls.n	80041a8 <_printf_i+0x110>
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d10b      	bne.n	80041da <_printf_i+0x142>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	07df      	lsls	r7, r3, #31
 80041c6:	d508      	bpl.n	80041da <_printf_i+0x142>
 80041c8:	6923      	ldr	r3, [r4, #16]
 80041ca:	6861      	ldr	r1, [r4, #4]
 80041cc:	4299      	cmp	r1, r3
 80041ce:	bfde      	ittt	le
 80041d0:	2330      	movle	r3, #48	@ 0x30
 80041d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041da:	1b92      	subs	r2, r2, r6
 80041dc:	6122      	str	r2, [r4, #16]
 80041de:	464b      	mov	r3, r9
 80041e0:	4621      	mov	r1, r4
 80041e2:	4640      	mov	r0, r8
 80041e4:	f8cd a000 	str.w	sl, [sp]
 80041e8:	aa03      	add	r2, sp, #12
 80041ea:	f7ff fee3 	bl	8003fb4 <_printf_common>
 80041ee:	3001      	adds	r0, #1
 80041f0:	d14a      	bne.n	8004288 <_printf_i+0x1f0>
 80041f2:	f04f 30ff 	mov.w	r0, #4294967295
 80041f6:	b004      	add	sp, #16
 80041f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	f043 0320 	orr.w	r3, r3, #32
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	2778      	movs	r7, #120	@ 0x78
 8004206:	4832      	ldr	r0, [pc, #200]	@ (80042d0 <_printf_i+0x238>)
 8004208:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	6831      	ldr	r1, [r6, #0]
 8004210:	061f      	lsls	r7, r3, #24
 8004212:	f851 5b04 	ldr.w	r5, [r1], #4
 8004216:	d402      	bmi.n	800421e <_printf_i+0x186>
 8004218:	065f      	lsls	r7, r3, #25
 800421a:	bf48      	it	mi
 800421c:	b2ad      	uxthmi	r5, r5
 800421e:	6031      	str	r1, [r6, #0]
 8004220:	07d9      	lsls	r1, r3, #31
 8004222:	bf44      	itt	mi
 8004224:	f043 0320 	orrmi.w	r3, r3, #32
 8004228:	6023      	strmi	r3, [r4, #0]
 800422a:	b11d      	cbz	r5, 8004234 <_printf_i+0x19c>
 800422c:	2310      	movs	r3, #16
 800422e:	e7ad      	b.n	800418c <_printf_i+0xf4>
 8004230:	4826      	ldr	r0, [pc, #152]	@ (80042cc <_printf_i+0x234>)
 8004232:	e7e9      	b.n	8004208 <_printf_i+0x170>
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	f023 0320 	bic.w	r3, r3, #32
 800423a:	6023      	str	r3, [r4, #0]
 800423c:	e7f6      	b.n	800422c <_printf_i+0x194>
 800423e:	4616      	mov	r6, r2
 8004240:	e7bd      	b.n	80041be <_printf_i+0x126>
 8004242:	6833      	ldr	r3, [r6, #0]
 8004244:	6825      	ldr	r5, [r4, #0]
 8004246:	1d18      	adds	r0, r3, #4
 8004248:	6961      	ldr	r1, [r4, #20]
 800424a:	6030      	str	r0, [r6, #0]
 800424c:	062e      	lsls	r6, r5, #24
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	d501      	bpl.n	8004256 <_printf_i+0x1be>
 8004252:	6019      	str	r1, [r3, #0]
 8004254:	e002      	b.n	800425c <_printf_i+0x1c4>
 8004256:	0668      	lsls	r0, r5, #25
 8004258:	d5fb      	bpl.n	8004252 <_printf_i+0x1ba>
 800425a:	8019      	strh	r1, [r3, #0]
 800425c:	2300      	movs	r3, #0
 800425e:	4616      	mov	r6, r2
 8004260:	6123      	str	r3, [r4, #16]
 8004262:	e7bc      	b.n	80041de <_printf_i+0x146>
 8004264:	6833      	ldr	r3, [r6, #0]
 8004266:	2100      	movs	r1, #0
 8004268:	1d1a      	adds	r2, r3, #4
 800426a:	6032      	str	r2, [r6, #0]
 800426c:	681e      	ldr	r6, [r3, #0]
 800426e:	6862      	ldr	r2, [r4, #4]
 8004270:	4630      	mov	r0, r6
 8004272:	f000 f9e8 	bl	8004646 <memchr>
 8004276:	b108      	cbz	r0, 800427c <_printf_i+0x1e4>
 8004278:	1b80      	subs	r0, r0, r6
 800427a:	6060      	str	r0, [r4, #4]
 800427c:	6863      	ldr	r3, [r4, #4]
 800427e:	6123      	str	r3, [r4, #16]
 8004280:	2300      	movs	r3, #0
 8004282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004286:	e7aa      	b.n	80041de <_printf_i+0x146>
 8004288:	4632      	mov	r2, r6
 800428a:	4649      	mov	r1, r9
 800428c:	4640      	mov	r0, r8
 800428e:	6923      	ldr	r3, [r4, #16]
 8004290:	47d0      	blx	sl
 8004292:	3001      	adds	r0, #1
 8004294:	d0ad      	beq.n	80041f2 <_printf_i+0x15a>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	079b      	lsls	r3, r3, #30
 800429a:	d413      	bmi.n	80042c4 <_printf_i+0x22c>
 800429c:	68e0      	ldr	r0, [r4, #12]
 800429e:	9b03      	ldr	r3, [sp, #12]
 80042a0:	4298      	cmp	r0, r3
 80042a2:	bfb8      	it	lt
 80042a4:	4618      	movlt	r0, r3
 80042a6:	e7a6      	b.n	80041f6 <_printf_i+0x15e>
 80042a8:	2301      	movs	r3, #1
 80042aa:	4632      	mov	r2, r6
 80042ac:	4649      	mov	r1, r9
 80042ae:	4640      	mov	r0, r8
 80042b0:	47d0      	blx	sl
 80042b2:	3001      	adds	r0, #1
 80042b4:	d09d      	beq.n	80041f2 <_printf_i+0x15a>
 80042b6:	3501      	adds	r5, #1
 80042b8:	68e3      	ldr	r3, [r4, #12]
 80042ba:	9903      	ldr	r1, [sp, #12]
 80042bc:	1a5b      	subs	r3, r3, r1
 80042be:	42ab      	cmp	r3, r5
 80042c0:	dcf2      	bgt.n	80042a8 <_printf_i+0x210>
 80042c2:	e7eb      	b.n	800429c <_printf_i+0x204>
 80042c4:	2500      	movs	r5, #0
 80042c6:	f104 0619 	add.w	r6, r4, #25
 80042ca:	e7f5      	b.n	80042b8 <_printf_i+0x220>
 80042cc:	080067b8 	.word	0x080067b8
 80042d0:	080067c9 	.word	0x080067c9

080042d4 <std>:
 80042d4:	2300      	movs	r3, #0
 80042d6:	b510      	push	{r4, lr}
 80042d8:	4604      	mov	r4, r0
 80042da:	e9c0 3300 	strd	r3, r3, [r0]
 80042de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042e2:	6083      	str	r3, [r0, #8]
 80042e4:	8181      	strh	r1, [r0, #12]
 80042e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80042e8:	81c2      	strh	r2, [r0, #14]
 80042ea:	6183      	str	r3, [r0, #24]
 80042ec:	4619      	mov	r1, r3
 80042ee:	2208      	movs	r2, #8
 80042f0:	305c      	adds	r0, #92	@ 0x5c
 80042f2:	f000 f916 	bl	8004522 <memset>
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <std+0x58>)
 80042f8:	6224      	str	r4, [r4, #32]
 80042fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80042fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004330 <std+0x5c>)
 80042fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004300:	4b0c      	ldr	r3, [pc, #48]	@ (8004334 <std+0x60>)
 8004302:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004304:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <std+0x64>)
 8004306:	6323      	str	r3, [r4, #48]	@ 0x30
 8004308:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <std+0x68>)
 800430a:	429c      	cmp	r4, r3
 800430c:	d006      	beq.n	800431c <std+0x48>
 800430e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004312:	4294      	cmp	r4, r2
 8004314:	d002      	beq.n	800431c <std+0x48>
 8004316:	33d0      	adds	r3, #208	@ 0xd0
 8004318:	429c      	cmp	r4, r3
 800431a:	d105      	bne.n	8004328 <std+0x54>
 800431c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004324:	f000 b98c 	b.w	8004640 <__retarget_lock_init_recursive>
 8004328:	bd10      	pop	{r4, pc}
 800432a:	bf00      	nop
 800432c:	0800449d 	.word	0x0800449d
 8004330:	080044bf 	.word	0x080044bf
 8004334:	080044f7 	.word	0x080044f7
 8004338:	0800451b 	.word	0x0800451b
 800433c:	200003c4 	.word	0x200003c4

08004340 <stdio_exit_handler>:
 8004340:	4a02      	ldr	r2, [pc, #8]	@ (800434c <stdio_exit_handler+0xc>)
 8004342:	4903      	ldr	r1, [pc, #12]	@ (8004350 <stdio_exit_handler+0x10>)
 8004344:	4803      	ldr	r0, [pc, #12]	@ (8004354 <stdio_exit_handler+0x14>)
 8004346:	f000 b869 	b.w	800441c <_fwalk_sglue>
 800434a:	bf00      	nop
 800434c:	2000000c 	.word	0x2000000c
 8004350:	08005fd9 	.word	0x08005fd9
 8004354:	2000001c 	.word	0x2000001c

08004358 <cleanup_stdio>:
 8004358:	6841      	ldr	r1, [r0, #4]
 800435a:	4b0c      	ldr	r3, [pc, #48]	@ (800438c <cleanup_stdio+0x34>)
 800435c:	b510      	push	{r4, lr}
 800435e:	4299      	cmp	r1, r3
 8004360:	4604      	mov	r4, r0
 8004362:	d001      	beq.n	8004368 <cleanup_stdio+0x10>
 8004364:	f001 fe38 	bl	8005fd8 <_fflush_r>
 8004368:	68a1      	ldr	r1, [r4, #8]
 800436a:	4b09      	ldr	r3, [pc, #36]	@ (8004390 <cleanup_stdio+0x38>)
 800436c:	4299      	cmp	r1, r3
 800436e:	d002      	beq.n	8004376 <cleanup_stdio+0x1e>
 8004370:	4620      	mov	r0, r4
 8004372:	f001 fe31 	bl	8005fd8 <_fflush_r>
 8004376:	68e1      	ldr	r1, [r4, #12]
 8004378:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <cleanup_stdio+0x3c>)
 800437a:	4299      	cmp	r1, r3
 800437c:	d004      	beq.n	8004388 <cleanup_stdio+0x30>
 800437e:	4620      	mov	r0, r4
 8004380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004384:	f001 be28 	b.w	8005fd8 <_fflush_r>
 8004388:	bd10      	pop	{r4, pc}
 800438a:	bf00      	nop
 800438c:	200003c4 	.word	0x200003c4
 8004390:	2000042c 	.word	0x2000042c
 8004394:	20000494 	.word	0x20000494

08004398 <global_stdio_init.part.0>:
 8004398:	b510      	push	{r4, lr}
 800439a:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <global_stdio_init.part.0+0x30>)
 800439c:	4c0b      	ldr	r4, [pc, #44]	@ (80043cc <global_stdio_init.part.0+0x34>)
 800439e:	4a0c      	ldr	r2, [pc, #48]	@ (80043d0 <global_stdio_init.part.0+0x38>)
 80043a0:	4620      	mov	r0, r4
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	2104      	movs	r1, #4
 80043a6:	2200      	movs	r2, #0
 80043a8:	f7ff ff94 	bl	80042d4 <std>
 80043ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043b0:	2201      	movs	r2, #1
 80043b2:	2109      	movs	r1, #9
 80043b4:	f7ff ff8e 	bl	80042d4 <std>
 80043b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043bc:	2202      	movs	r2, #2
 80043be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c2:	2112      	movs	r1, #18
 80043c4:	f7ff bf86 	b.w	80042d4 <std>
 80043c8:	200004fc 	.word	0x200004fc
 80043cc:	200003c4 	.word	0x200003c4
 80043d0:	08004341 	.word	0x08004341

080043d4 <__sfp_lock_acquire>:
 80043d4:	4801      	ldr	r0, [pc, #4]	@ (80043dc <__sfp_lock_acquire+0x8>)
 80043d6:	f000 b934 	b.w	8004642 <__retarget_lock_acquire_recursive>
 80043da:	bf00      	nop
 80043dc:	20000505 	.word	0x20000505

080043e0 <__sfp_lock_release>:
 80043e0:	4801      	ldr	r0, [pc, #4]	@ (80043e8 <__sfp_lock_release+0x8>)
 80043e2:	f000 b92f 	b.w	8004644 <__retarget_lock_release_recursive>
 80043e6:	bf00      	nop
 80043e8:	20000505 	.word	0x20000505

080043ec <__sinit>:
 80043ec:	b510      	push	{r4, lr}
 80043ee:	4604      	mov	r4, r0
 80043f0:	f7ff fff0 	bl	80043d4 <__sfp_lock_acquire>
 80043f4:	6a23      	ldr	r3, [r4, #32]
 80043f6:	b11b      	cbz	r3, 8004400 <__sinit+0x14>
 80043f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043fc:	f7ff bff0 	b.w	80043e0 <__sfp_lock_release>
 8004400:	4b04      	ldr	r3, [pc, #16]	@ (8004414 <__sinit+0x28>)
 8004402:	6223      	str	r3, [r4, #32]
 8004404:	4b04      	ldr	r3, [pc, #16]	@ (8004418 <__sinit+0x2c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f5      	bne.n	80043f8 <__sinit+0xc>
 800440c:	f7ff ffc4 	bl	8004398 <global_stdio_init.part.0>
 8004410:	e7f2      	b.n	80043f8 <__sinit+0xc>
 8004412:	bf00      	nop
 8004414:	08004359 	.word	0x08004359
 8004418:	200004fc 	.word	0x200004fc

0800441c <_fwalk_sglue>:
 800441c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004420:	4607      	mov	r7, r0
 8004422:	4688      	mov	r8, r1
 8004424:	4614      	mov	r4, r2
 8004426:	2600      	movs	r6, #0
 8004428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800442c:	f1b9 0901 	subs.w	r9, r9, #1
 8004430:	d505      	bpl.n	800443e <_fwalk_sglue+0x22>
 8004432:	6824      	ldr	r4, [r4, #0]
 8004434:	2c00      	cmp	r4, #0
 8004436:	d1f7      	bne.n	8004428 <_fwalk_sglue+0xc>
 8004438:	4630      	mov	r0, r6
 800443a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800443e:	89ab      	ldrh	r3, [r5, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d907      	bls.n	8004454 <_fwalk_sglue+0x38>
 8004444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004448:	3301      	adds	r3, #1
 800444a:	d003      	beq.n	8004454 <_fwalk_sglue+0x38>
 800444c:	4629      	mov	r1, r5
 800444e:	4638      	mov	r0, r7
 8004450:	47c0      	blx	r8
 8004452:	4306      	orrs	r6, r0
 8004454:	3568      	adds	r5, #104	@ 0x68
 8004456:	e7e9      	b.n	800442c <_fwalk_sglue+0x10>

08004458 <siprintf>:
 8004458:	b40e      	push	{r1, r2, r3}
 800445a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800445e:	b510      	push	{r4, lr}
 8004460:	2400      	movs	r4, #0
 8004462:	b09d      	sub	sp, #116	@ 0x74
 8004464:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004466:	9002      	str	r0, [sp, #8]
 8004468:	9006      	str	r0, [sp, #24]
 800446a:	9107      	str	r1, [sp, #28]
 800446c:	9104      	str	r1, [sp, #16]
 800446e:	4809      	ldr	r0, [pc, #36]	@ (8004494 <siprintf+0x3c>)
 8004470:	4909      	ldr	r1, [pc, #36]	@ (8004498 <siprintf+0x40>)
 8004472:	f853 2b04 	ldr.w	r2, [r3], #4
 8004476:	9105      	str	r1, [sp, #20]
 8004478:	6800      	ldr	r0, [r0, #0]
 800447a:	a902      	add	r1, sp, #8
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004480:	f001 fc2e 	bl	8005ce0 <_svfiprintf_r>
 8004484:	9b02      	ldr	r3, [sp, #8]
 8004486:	701c      	strb	r4, [r3, #0]
 8004488:	b01d      	add	sp, #116	@ 0x74
 800448a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800448e:	b003      	add	sp, #12
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000018 	.word	0x20000018
 8004498:	ffff0208 	.word	0xffff0208

0800449c <__sread>:
 800449c:	b510      	push	{r4, lr}
 800449e:	460c      	mov	r4, r1
 80044a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a4:	f000 f87e 	bl	80045a4 <_read_r>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	bfab      	itete	ge
 80044ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044ae:	89a3      	ldrhlt	r3, [r4, #12]
 80044b0:	181b      	addge	r3, r3, r0
 80044b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044b6:	bfac      	ite	ge
 80044b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044ba:	81a3      	strhlt	r3, [r4, #12]
 80044bc:	bd10      	pop	{r4, pc}

080044be <__swrite>:
 80044be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c2:	461f      	mov	r7, r3
 80044c4:	898b      	ldrh	r3, [r1, #12]
 80044c6:	4605      	mov	r5, r0
 80044c8:	05db      	lsls	r3, r3, #23
 80044ca:	460c      	mov	r4, r1
 80044cc:	4616      	mov	r6, r2
 80044ce:	d505      	bpl.n	80044dc <__swrite+0x1e>
 80044d0:	2302      	movs	r3, #2
 80044d2:	2200      	movs	r2, #0
 80044d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d8:	f000 f852 	bl	8004580 <_lseek_r>
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	4632      	mov	r2, r6
 80044e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044e4:	81a3      	strh	r3, [r4, #12]
 80044e6:	4628      	mov	r0, r5
 80044e8:	463b      	mov	r3, r7
 80044ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044f2:	f000 b869 	b.w	80045c8 <_write_r>

080044f6 <__sseek>:
 80044f6:	b510      	push	{r4, lr}
 80044f8:	460c      	mov	r4, r1
 80044fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fe:	f000 f83f 	bl	8004580 <_lseek_r>
 8004502:	1c43      	adds	r3, r0, #1
 8004504:	89a3      	ldrh	r3, [r4, #12]
 8004506:	bf15      	itete	ne
 8004508:	6560      	strne	r0, [r4, #84]	@ 0x54
 800450a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800450e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004512:	81a3      	strheq	r3, [r4, #12]
 8004514:	bf18      	it	ne
 8004516:	81a3      	strhne	r3, [r4, #12]
 8004518:	bd10      	pop	{r4, pc}

0800451a <__sclose>:
 800451a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451e:	f000 b81f 	b.w	8004560 <_close_r>

08004522 <memset>:
 8004522:	4603      	mov	r3, r0
 8004524:	4402      	add	r2, r0
 8004526:	4293      	cmp	r3, r2
 8004528:	d100      	bne.n	800452c <memset+0xa>
 800452a:	4770      	bx	lr
 800452c:	f803 1b01 	strb.w	r1, [r3], #1
 8004530:	e7f9      	b.n	8004526 <memset+0x4>

08004532 <strncmp>:
 8004532:	b510      	push	{r4, lr}
 8004534:	b16a      	cbz	r2, 8004552 <strncmp+0x20>
 8004536:	3901      	subs	r1, #1
 8004538:	1884      	adds	r4, r0, r2
 800453a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800453e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004542:	429a      	cmp	r2, r3
 8004544:	d103      	bne.n	800454e <strncmp+0x1c>
 8004546:	42a0      	cmp	r0, r4
 8004548:	d001      	beq.n	800454e <strncmp+0x1c>
 800454a:	2a00      	cmp	r2, #0
 800454c:	d1f5      	bne.n	800453a <strncmp+0x8>
 800454e:	1ad0      	subs	r0, r2, r3
 8004550:	bd10      	pop	{r4, pc}
 8004552:	4610      	mov	r0, r2
 8004554:	e7fc      	b.n	8004550 <strncmp+0x1e>
	...

08004558 <_localeconv_r>:
 8004558:	4800      	ldr	r0, [pc, #0]	@ (800455c <_localeconv_r+0x4>)
 800455a:	4770      	bx	lr
 800455c:	20000158 	.word	0x20000158

08004560 <_close_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	2300      	movs	r3, #0
 8004564:	4d05      	ldr	r5, [pc, #20]	@ (800457c <_close_r+0x1c>)
 8004566:	4604      	mov	r4, r0
 8004568:	4608      	mov	r0, r1
 800456a:	602b      	str	r3, [r5, #0]
 800456c:	f7fd fb81 	bl	8001c72 <_close>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d102      	bne.n	800457a <_close_r+0x1a>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	b103      	cbz	r3, 800457a <_close_r+0x1a>
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	20000500 	.word	0x20000500

08004580 <_lseek_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4604      	mov	r4, r0
 8004584:	4608      	mov	r0, r1
 8004586:	4611      	mov	r1, r2
 8004588:	2200      	movs	r2, #0
 800458a:	4d05      	ldr	r5, [pc, #20]	@ (80045a0 <_lseek_r+0x20>)
 800458c:	602a      	str	r2, [r5, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	f7fd fb93 	bl	8001cba <_lseek>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_lseek_r+0x1e>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_lseek_r+0x1e>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	20000500 	.word	0x20000500

080045a4 <_read_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4604      	mov	r4, r0
 80045a8:	4608      	mov	r0, r1
 80045aa:	4611      	mov	r1, r2
 80045ac:	2200      	movs	r2, #0
 80045ae:	4d05      	ldr	r5, [pc, #20]	@ (80045c4 <_read_r+0x20>)
 80045b0:	602a      	str	r2, [r5, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f7fd fb24 	bl	8001c00 <_read>
 80045b8:	1c43      	adds	r3, r0, #1
 80045ba:	d102      	bne.n	80045c2 <_read_r+0x1e>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	b103      	cbz	r3, 80045c2 <_read_r+0x1e>
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
 80045c4:	20000500 	.word	0x20000500

080045c8 <_write_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4604      	mov	r4, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	4611      	mov	r1, r2
 80045d0:	2200      	movs	r2, #0
 80045d2:	4d05      	ldr	r5, [pc, #20]	@ (80045e8 <_write_r+0x20>)
 80045d4:	602a      	str	r2, [r5, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f7fd fb2f 	bl	8001c3a <_write>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d102      	bne.n	80045e6 <_write_r+0x1e>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	b103      	cbz	r3, 80045e6 <_write_r+0x1e>
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	20000500 	.word	0x20000500

080045ec <__errno>:
 80045ec:	4b01      	ldr	r3, [pc, #4]	@ (80045f4 <__errno+0x8>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000018 	.word	0x20000018

080045f8 <__libc_init_array>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	2600      	movs	r6, #0
 80045fc:	4d0c      	ldr	r5, [pc, #48]	@ (8004630 <__libc_init_array+0x38>)
 80045fe:	4c0d      	ldr	r4, [pc, #52]	@ (8004634 <__libc_init_array+0x3c>)
 8004600:	1b64      	subs	r4, r4, r5
 8004602:	10a4      	asrs	r4, r4, #2
 8004604:	42a6      	cmp	r6, r4
 8004606:	d109      	bne.n	800461c <__libc_init_array+0x24>
 8004608:	f002 f874 	bl	80066f4 <_init>
 800460c:	2600      	movs	r6, #0
 800460e:	4d0a      	ldr	r5, [pc, #40]	@ (8004638 <__libc_init_array+0x40>)
 8004610:	4c0a      	ldr	r4, [pc, #40]	@ (800463c <__libc_init_array+0x44>)
 8004612:	1b64      	subs	r4, r4, r5
 8004614:	10a4      	asrs	r4, r4, #2
 8004616:	42a6      	cmp	r6, r4
 8004618:	d105      	bne.n	8004626 <__libc_init_array+0x2e>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004620:	4798      	blx	r3
 8004622:	3601      	adds	r6, #1
 8004624:	e7ee      	b.n	8004604 <__libc_init_array+0xc>
 8004626:	f855 3b04 	ldr.w	r3, [r5], #4
 800462a:	4798      	blx	r3
 800462c:	3601      	adds	r6, #1
 800462e:	e7f2      	b.n	8004616 <__libc_init_array+0x1e>
 8004630:	08006b24 	.word	0x08006b24
 8004634:	08006b24 	.word	0x08006b24
 8004638:	08006b24 	.word	0x08006b24
 800463c:	08006b28 	.word	0x08006b28

08004640 <__retarget_lock_init_recursive>:
 8004640:	4770      	bx	lr

08004642 <__retarget_lock_acquire_recursive>:
 8004642:	4770      	bx	lr

08004644 <__retarget_lock_release_recursive>:
 8004644:	4770      	bx	lr

08004646 <memchr>:
 8004646:	4603      	mov	r3, r0
 8004648:	b510      	push	{r4, lr}
 800464a:	b2c9      	uxtb	r1, r1
 800464c:	4402      	add	r2, r0
 800464e:	4293      	cmp	r3, r2
 8004650:	4618      	mov	r0, r3
 8004652:	d101      	bne.n	8004658 <memchr+0x12>
 8004654:	2000      	movs	r0, #0
 8004656:	e003      	b.n	8004660 <memchr+0x1a>
 8004658:	7804      	ldrb	r4, [r0, #0]
 800465a:	3301      	adds	r3, #1
 800465c:	428c      	cmp	r4, r1
 800465e:	d1f6      	bne.n	800464e <memchr+0x8>
 8004660:	bd10      	pop	{r4, pc}

08004662 <memcpy>:
 8004662:	440a      	add	r2, r1
 8004664:	4291      	cmp	r1, r2
 8004666:	f100 33ff 	add.w	r3, r0, #4294967295
 800466a:	d100      	bne.n	800466e <memcpy+0xc>
 800466c:	4770      	bx	lr
 800466e:	b510      	push	{r4, lr}
 8004670:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004674:	4291      	cmp	r1, r2
 8004676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800467a:	d1f9      	bne.n	8004670 <memcpy+0xe>
 800467c:	bd10      	pop	{r4, pc}

0800467e <quorem>:
 800467e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004682:	6903      	ldr	r3, [r0, #16]
 8004684:	690c      	ldr	r4, [r1, #16]
 8004686:	4607      	mov	r7, r0
 8004688:	42a3      	cmp	r3, r4
 800468a:	db7e      	blt.n	800478a <quorem+0x10c>
 800468c:	3c01      	subs	r4, #1
 800468e:	00a3      	lsls	r3, r4, #2
 8004690:	f100 0514 	add.w	r5, r0, #20
 8004694:	f101 0814 	add.w	r8, r1, #20
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046a8:	3301      	adds	r3, #1
 80046aa:	429a      	cmp	r2, r3
 80046ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80046b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046b4:	d32e      	bcc.n	8004714 <quorem+0x96>
 80046b6:	f04f 0a00 	mov.w	sl, #0
 80046ba:	46c4      	mov	ip, r8
 80046bc:	46ae      	mov	lr, r5
 80046be:	46d3      	mov	fp, sl
 80046c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80046c4:	b298      	uxth	r0, r3
 80046c6:	fb06 a000 	mla	r0, r6, r0, sl
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	0c02      	lsrs	r2, r0, #16
 80046ce:	fb06 2303 	mla	r3, r6, r3, r2
 80046d2:	f8de 2000 	ldr.w	r2, [lr]
 80046d6:	b280      	uxth	r0, r0
 80046d8:	b292      	uxth	r2, r2
 80046da:	1a12      	subs	r2, r2, r0
 80046dc:	445a      	add	r2, fp
 80046de:	f8de 0000 	ldr.w	r0, [lr]
 80046e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80046ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80046f0:	b292      	uxth	r2, r2
 80046f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80046f6:	45e1      	cmp	r9, ip
 80046f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80046fc:	f84e 2b04 	str.w	r2, [lr], #4
 8004700:	d2de      	bcs.n	80046c0 <quorem+0x42>
 8004702:	9b00      	ldr	r3, [sp, #0]
 8004704:	58eb      	ldr	r3, [r5, r3]
 8004706:	b92b      	cbnz	r3, 8004714 <quorem+0x96>
 8004708:	9b01      	ldr	r3, [sp, #4]
 800470a:	3b04      	subs	r3, #4
 800470c:	429d      	cmp	r5, r3
 800470e:	461a      	mov	r2, r3
 8004710:	d32f      	bcc.n	8004772 <quorem+0xf4>
 8004712:	613c      	str	r4, [r7, #16]
 8004714:	4638      	mov	r0, r7
 8004716:	f001 f97f 	bl	8005a18 <__mcmp>
 800471a:	2800      	cmp	r0, #0
 800471c:	db25      	blt.n	800476a <quorem+0xec>
 800471e:	4629      	mov	r1, r5
 8004720:	2000      	movs	r0, #0
 8004722:	f858 2b04 	ldr.w	r2, [r8], #4
 8004726:	f8d1 c000 	ldr.w	ip, [r1]
 800472a:	fa1f fe82 	uxth.w	lr, r2
 800472e:	fa1f f38c 	uxth.w	r3, ip
 8004732:	eba3 030e 	sub.w	r3, r3, lr
 8004736:	4403      	add	r3, r0
 8004738:	0c12      	lsrs	r2, r2, #16
 800473a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800473e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004742:	b29b      	uxth	r3, r3
 8004744:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004748:	45c1      	cmp	r9, r8
 800474a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800474e:	f841 3b04 	str.w	r3, [r1], #4
 8004752:	d2e6      	bcs.n	8004722 <quorem+0xa4>
 8004754:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004758:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800475c:	b922      	cbnz	r2, 8004768 <quorem+0xea>
 800475e:	3b04      	subs	r3, #4
 8004760:	429d      	cmp	r5, r3
 8004762:	461a      	mov	r2, r3
 8004764:	d30b      	bcc.n	800477e <quorem+0x100>
 8004766:	613c      	str	r4, [r7, #16]
 8004768:	3601      	adds	r6, #1
 800476a:	4630      	mov	r0, r6
 800476c:	b003      	add	sp, #12
 800476e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	3b04      	subs	r3, #4
 8004776:	2a00      	cmp	r2, #0
 8004778:	d1cb      	bne.n	8004712 <quorem+0x94>
 800477a:	3c01      	subs	r4, #1
 800477c:	e7c6      	b.n	800470c <quorem+0x8e>
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	3b04      	subs	r3, #4
 8004782:	2a00      	cmp	r2, #0
 8004784:	d1ef      	bne.n	8004766 <quorem+0xe8>
 8004786:	3c01      	subs	r4, #1
 8004788:	e7ea      	b.n	8004760 <quorem+0xe2>
 800478a:	2000      	movs	r0, #0
 800478c:	e7ee      	b.n	800476c <quorem+0xee>
	...

08004790 <_dtoa_r>:
 8004790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004794:	4614      	mov	r4, r2
 8004796:	461d      	mov	r5, r3
 8004798:	69c7      	ldr	r7, [r0, #28]
 800479a:	b097      	sub	sp, #92	@ 0x5c
 800479c:	4681      	mov	r9, r0
 800479e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80047a2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80047a4:	b97f      	cbnz	r7, 80047c6 <_dtoa_r+0x36>
 80047a6:	2010      	movs	r0, #16
 80047a8:	f000 fe0e 	bl	80053c8 <malloc>
 80047ac:	4602      	mov	r2, r0
 80047ae:	f8c9 001c 	str.w	r0, [r9, #28]
 80047b2:	b920      	cbnz	r0, 80047be <_dtoa_r+0x2e>
 80047b4:	21ef      	movs	r1, #239	@ 0xef
 80047b6:	4bac      	ldr	r3, [pc, #688]	@ (8004a68 <_dtoa_r+0x2d8>)
 80047b8:	48ac      	ldr	r0, [pc, #688]	@ (8004a6c <_dtoa_r+0x2dc>)
 80047ba:	f001 fc5f 	bl	800607c <__assert_func>
 80047be:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80047c2:	6007      	str	r7, [r0, #0]
 80047c4:	60c7      	str	r7, [r0, #12]
 80047c6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80047ca:	6819      	ldr	r1, [r3, #0]
 80047cc:	b159      	cbz	r1, 80047e6 <_dtoa_r+0x56>
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	2301      	movs	r3, #1
 80047d2:	4093      	lsls	r3, r2
 80047d4:	604a      	str	r2, [r1, #4]
 80047d6:	608b      	str	r3, [r1, #8]
 80047d8:	4648      	mov	r0, r9
 80047da:	f000 feeb 	bl	80055b4 <_Bfree>
 80047de:	2200      	movs	r2, #0
 80047e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	1e2b      	subs	r3, r5, #0
 80047e8:	bfaf      	iteee	ge
 80047ea:	2300      	movge	r3, #0
 80047ec:	2201      	movlt	r2, #1
 80047ee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80047f2:	9307      	strlt	r3, [sp, #28]
 80047f4:	bfa8      	it	ge
 80047f6:	6033      	strge	r3, [r6, #0]
 80047f8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80047fc:	4b9c      	ldr	r3, [pc, #624]	@ (8004a70 <_dtoa_r+0x2e0>)
 80047fe:	bfb8      	it	lt
 8004800:	6032      	strlt	r2, [r6, #0]
 8004802:	ea33 0308 	bics.w	r3, r3, r8
 8004806:	d112      	bne.n	800482e <_dtoa_r+0x9e>
 8004808:	f242 730f 	movw	r3, #9999	@ 0x270f
 800480c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004814:	4323      	orrs	r3, r4
 8004816:	f000 855e 	beq.w	80052d6 <_dtoa_r+0xb46>
 800481a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800481c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004a74 <_dtoa_r+0x2e4>
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8560 	beq.w	80052e6 <_dtoa_r+0xb56>
 8004826:	f10a 0303 	add.w	r3, sl, #3
 800482a:	f000 bd5a 	b.w	80052e2 <_dtoa_r+0xb52>
 800482e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004832:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004836:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800483a:	2200      	movs	r2, #0
 800483c:	2300      	movs	r3, #0
 800483e:	f7fc f8b3 	bl	80009a8 <__aeabi_dcmpeq>
 8004842:	4607      	mov	r7, r0
 8004844:	b158      	cbz	r0, 800485e <_dtoa_r+0xce>
 8004846:	2301      	movs	r3, #1
 8004848:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800484e:	b113      	cbz	r3, 8004856 <_dtoa_r+0xc6>
 8004850:	4b89      	ldr	r3, [pc, #548]	@ (8004a78 <_dtoa_r+0x2e8>)
 8004852:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004a7c <_dtoa_r+0x2ec>
 800485a:	f000 bd44 	b.w	80052e6 <_dtoa_r+0xb56>
 800485e:	ab14      	add	r3, sp, #80	@ 0x50
 8004860:	9301      	str	r3, [sp, #4]
 8004862:	ab15      	add	r3, sp, #84	@ 0x54
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	4648      	mov	r0, r9
 8004868:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800486c:	f001 f984 	bl	8005b78 <__d2b>
 8004870:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004874:	9003      	str	r0, [sp, #12]
 8004876:	2e00      	cmp	r6, #0
 8004878:	d078      	beq.n	800496c <_dtoa_r+0x1dc>
 800487a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800487e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004880:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004888:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800488c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004890:	9712      	str	r7, [sp, #72]	@ 0x48
 8004892:	4619      	mov	r1, r3
 8004894:	2200      	movs	r2, #0
 8004896:	4b7a      	ldr	r3, [pc, #488]	@ (8004a80 <_dtoa_r+0x2f0>)
 8004898:	f7fb fc66 	bl	8000168 <__aeabi_dsub>
 800489c:	a36c      	add	r3, pc, #432	@ (adr r3, 8004a50 <_dtoa_r+0x2c0>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f7fb fe19 	bl	80004d8 <__aeabi_dmul>
 80048a6:	a36c      	add	r3, pc, #432	@ (adr r3, 8004a58 <_dtoa_r+0x2c8>)
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f7fb fc5e 	bl	800016c <__adddf3>
 80048b0:	4604      	mov	r4, r0
 80048b2:	4630      	mov	r0, r6
 80048b4:	460d      	mov	r5, r1
 80048b6:	f7fb fda5 	bl	8000404 <__aeabi_i2d>
 80048ba:	a369      	add	r3, pc, #420	@ (adr r3, 8004a60 <_dtoa_r+0x2d0>)
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f7fb fe0a 	bl	80004d8 <__aeabi_dmul>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4620      	mov	r0, r4
 80048ca:	4629      	mov	r1, r5
 80048cc:	f7fb fc4e 	bl	800016c <__adddf3>
 80048d0:	4604      	mov	r4, r0
 80048d2:	460d      	mov	r5, r1
 80048d4:	f7fc f8b0 	bl	8000a38 <__aeabi_d2iz>
 80048d8:	2200      	movs	r2, #0
 80048da:	4607      	mov	r7, r0
 80048dc:	2300      	movs	r3, #0
 80048de:	4620      	mov	r0, r4
 80048e0:	4629      	mov	r1, r5
 80048e2:	f7fc f86b 	bl	80009bc <__aeabi_dcmplt>
 80048e6:	b140      	cbz	r0, 80048fa <_dtoa_r+0x16a>
 80048e8:	4638      	mov	r0, r7
 80048ea:	f7fb fd8b 	bl	8000404 <__aeabi_i2d>
 80048ee:	4622      	mov	r2, r4
 80048f0:	462b      	mov	r3, r5
 80048f2:	f7fc f859 	bl	80009a8 <__aeabi_dcmpeq>
 80048f6:	b900      	cbnz	r0, 80048fa <_dtoa_r+0x16a>
 80048f8:	3f01      	subs	r7, #1
 80048fa:	2f16      	cmp	r7, #22
 80048fc:	d854      	bhi.n	80049a8 <_dtoa_r+0x218>
 80048fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004902:	4b60      	ldr	r3, [pc, #384]	@ (8004a84 <_dtoa_r+0x2f4>)
 8004904:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	f7fc f856 	bl	80009bc <__aeabi_dcmplt>
 8004910:	2800      	cmp	r0, #0
 8004912:	d04b      	beq.n	80049ac <_dtoa_r+0x21c>
 8004914:	2300      	movs	r3, #0
 8004916:	3f01      	subs	r7, #1
 8004918:	930f      	str	r3, [sp, #60]	@ 0x3c
 800491a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800491c:	1b9b      	subs	r3, r3, r6
 800491e:	1e5a      	subs	r2, r3, #1
 8004920:	bf49      	itett	mi
 8004922:	f1c3 0301 	rsbmi	r3, r3, #1
 8004926:	2300      	movpl	r3, #0
 8004928:	9304      	strmi	r3, [sp, #16]
 800492a:	2300      	movmi	r3, #0
 800492c:	9209      	str	r2, [sp, #36]	@ 0x24
 800492e:	bf54      	ite	pl
 8004930:	9304      	strpl	r3, [sp, #16]
 8004932:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004934:	2f00      	cmp	r7, #0
 8004936:	db3b      	blt.n	80049b0 <_dtoa_r+0x220>
 8004938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800493a:	970e      	str	r7, [sp, #56]	@ 0x38
 800493c:	443b      	add	r3, r7
 800493e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004940:	2300      	movs	r3, #0
 8004942:	930a      	str	r3, [sp, #40]	@ 0x28
 8004944:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004946:	2b09      	cmp	r3, #9
 8004948:	d865      	bhi.n	8004a16 <_dtoa_r+0x286>
 800494a:	2b05      	cmp	r3, #5
 800494c:	bfc4      	itt	gt
 800494e:	3b04      	subgt	r3, #4
 8004950:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004952:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004954:	bfc8      	it	gt
 8004956:	2400      	movgt	r4, #0
 8004958:	f1a3 0302 	sub.w	r3, r3, #2
 800495c:	bfd8      	it	le
 800495e:	2401      	movle	r4, #1
 8004960:	2b03      	cmp	r3, #3
 8004962:	d864      	bhi.n	8004a2e <_dtoa_r+0x29e>
 8004964:	e8df f003 	tbb	[pc, r3]
 8004968:	2c385553 	.word	0x2c385553
 800496c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004970:	441e      	add	r6, r3
 8004972:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004976:	2b20      	cmp	r3, #32
 8004978:	bfc1      	itttt	gt
 800497a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800497e:	fa08 f803 	lslgt.w	r8, r8, r3
 8004982:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004986:	fa24 f303 	lsrgt.w	r3, r4, r3
 800498a:	bfd6      	itet	le
 800498c:	f1c3 0320 	rsble	r3, r3, #32
 8004990:	ea48 0003 	orrgt.w	r0, r8, r3
 8004994:	fa04 f003 	lslle.w	r0, r4, r3
 8004998:	f7fb fd24 	bl	80003e4 <__aeabi_ui2d>
 800499c:	2201      	movs	r2, #1
 800499e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80049a2:	3e01      	subs	r6, #1
 80049a4:	9212      	str	r2, [sp, #72]	@ 0x48
 80049a6:	e774      	b.n	8004892 <_dtoa_r+0x102>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e7b5      	b.n	8004918 <_dtoa_r+0x188>
 80049ac:	900f      	str	r0, [sp, #60]	@ 0x3c
 80049ae:	e7b4      	b.n	800491a <_dtoa_r+0x18a>
 80049b0:	9b04      	ldr	r3, [sp, #16]
 80049b2:	1bdb      	subs	r3, r3, r7
 80049b4:	9304      	str	r3, [sp, #16]
 80049b6:	427b      	negs	r3, r7
 80049b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80049ba:	2300      	movs	r3, #0
 80049bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80049be:	e7c1      	b.n	8004944 <_dtoa_r+0x1b4>
 80049c0:	2301      	movs	r3, #1
 80049c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049c6:	eb07 0b03 	add.w	fp, r7, r3
 80049ca:	f10b 0301 	add.w	r3, fp, #1
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	9308      	str	r3, [sp, #32]
 80049d2:	bfb8      	it	lt
 80049d4:	2301      	movlt	r3, #1
 80049d6:	e006      	b.n	80049e6 <_dtoa_r+0x256>
 80049d8:	2301      	movs	r3, #1
 80049da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049de:	2b00      	cmp	r3, #0
 80049e0:	dd28      	ble.n	8004a34 <_dtoa_r+0x2a4>
 80049e2:	469b      	mov	fp, r3
 80049e4:	9308      	str	r3, [sp, #32]
 80049e6:	2100      	movs	r1, #0
 80049e8:	2204      	movs	r2, #4
 80049ea:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80049ee:	f102 0514 	add.w	r5, r2, #20
 80049f2:	429d      	cmp	r5, r3
 80049f4:	d926      	bls.n	8004a44 <_dtoa_r+0x2b4>
 80049f6:	6041      	str	r1, [r0, #4]
 80049f8:	4648      	mov	r0, r9
 80049fa:	f000 fd9b 	bl	8005534 <_Balloc>
 80049fe:	4682      	mov	sl, r0
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d143      	bne.n	8004a8c <_dtoa_r+0x2fc>
 8004a04:	4602      	mov	r2, r0
 8004a06:	f240 11af 	movw	r1, #431	@ 0x1af
 8004a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004a88 <_dtoa_r+0x2f8>)
 8004a0c:	e6d4      	b.n	80047b8 <_dtoa_r+0x28>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e7e3      	b.n	80049da <_dtoa_r+0x24a>
 8004a12:	2300      	movs	r3, #0
 8004a14:	e7d5      	b.n	80049c2 <_dtoa_r+0x232>
 8004a16:	2401      	movs	r4, #1
 8004a18:	2300      	movs	r3, #0
 8004a1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004a1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8004a1e:	f04f 3bff 	mov.w	fp, #4294967295
 8004a22:	2200      	movs	r2, #0
 8004a24:	2312      	movs	r3, #18
 8004a26:	f8cd b020 	str.w	fp, [sp, #32]
 8004a2a:	9221      	str	r2, [sp, #132]	@ 0x84
 8004a2c:	e7db      	b.n	80049e6 <_dtoa_r+0x256>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a32:	e7f4      	b.n	8004a1e <_dtoa_r+0x28e>
 8004a34:	f04f 0b01 	mov.w	fp, #1
 8004a38:	465b      	mov	r3, fp
 8004a3a:	f8cd b020 	str.w	fp, [sp, #32]
 8004a3e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004a42:	e7d0      	b.n	80049e6 <_dtoa_r+0x256>
 8004a44:	3101      	adds	r1, #1
 8004a46:	0052      	lsls	r2, r2, #1
 8004a48:	e7d1      	b.n	80049ee <_dtoa_r+0x25e>
 8004a4a:	bf00      	nop
 8004a4c:	f3af 8000 	nop.w
 8004a50:	636f4361 	.word	0x636f4361
 8004a54:	3fd287a7 	.word	0x3fd287a7
 8004a58:	8b60c8b3 	.word	0x8b60c8b3
 8004a5c:	3fc68a28 	.word	0x3fc68a28
 8004a60:	509f79fb 	.word	0x509f79fb
 8004a64:	3fd34413 	.word	0x3fd34413
 8004a68:	080067e7 	.word	0x080067e7
 8004a6c:	080067fe 	.word	0x080067fe
 8004a70:	7ff00000 	.word	0x7ff00000
 8004a74:	080067e3 	.word	0x080067e3
 8004a78:	080067b7 	.word	0x080067b7
 8004a7c:	080067b6 	.word	0x080067b6
 8004a80:	3ff80000 	.word	0x3ff80000
 8004a84:	08006950 	.word	0x08006950
 8004a88:	08006856 	.word	0x08006856
 8004a8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004a90:	6018      	str	r0, [r3, #0]
 8004a92:	9b08      	ldr	r3, [sp, #32]
 8004a94:	2b0e      	cmp	r3, #14
 8004a96:	f200 80a1 	bhi.w	8004bdc <_dtoa_r+0x44c>
 8004a9a:	2c00      	cmp	r4, #0
 8004a9c:	f000 809e 	beq.w	8004bdc <_dtoa_r+0x44c>
 8004aa0:	2f00      	cmp	r7, #0
 8004aa2:	dd33      	ble.n	8004b0c <_dtoa_r+0x37c>
 8004aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8004d18 <_dtoa_r+0x588>)
 8004aa6:	f007 020f 	and.w	r2, r7, #15
 8004aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004aae:	05f8      	lsls	r0, r7, #23
 8004ab0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ab4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004ab8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004abc:	d516      	bpl.n	8004aec <_dtoa_r+0x35c>
 8004abe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ac2:	4b96      	ldr	r3, [pc, #600]	@ (8004d1c <_dtoa_r+0x58c>)
 8004ac4:	2603      	movs	r6, #3
 8004ac6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004aca:	f7fb fe2f 	bl	800072c <__aeabi_ddiv>
 8004ace:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ad2:	f004 040f 	and.w	r4, r4, #15
 8004ad6:	4d91      	ldr	r5, [pc, #580]	@ (8004d1c <_dtoa_r+0x58c>)
 8004ad8:	b954      	cbnz	r4, 8004af0 <_dtoa_r+0x360>
 8004ada:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ae2:	f7fb fe23 	bl	800072c <__aeabi_ddiv>
 8004ae6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004aea:	e028      	b.n	8004b3e <_dtoa_r+0x3ae>
 8004aec:	2602      	movs	r6, #2
 8004aee:	e7f2      	b.n	8004ad6 <_dtoa_r+0x346>
 8004af0:	07e1      	lsls	r1, r4, #31
 8004af2:	d508      	bpl.n	8004b06 <_dtoa_r+0x376>
 8004af4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004af8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004afc:	f7fb fcec 	bl	80004d8 <__aeabi_dmul>
 8004b00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b04:	3601      	adds	r6, #1
 8004b06:	1064      	asrs	r4, r4, #1
 8004b08:	3508      	adds	r5, #8
 8004b0a:	e7e5      	b.n	8004ad8 <_dtoa_r+0x348>
 8004b0c:	f000 80af 	beq.w	8004c6e <_dtoa_r+0x4de>
 8004b10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b14:	427c      	negs	r4, r7
 8004b16:	4b80      	ldr	r3, [pc, #512]	@ (8004d18 <_dtoa_r+0x588>)
 8004b18:	f004 020f 	and.w	r2, r4, #15
 8004b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f7fb fcd8 	bl	80004d8 <__aeabi_dmul>
 8004b28:	2602      	movs	r6, #2
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b30:	4d7a      	ldr	r5, [pc, #488]	@ (8004d1c <_dtoa_r+0x58c>)
 8004b32:	1124      	asrs	r4, r4, #4
 8004b34:	2c00      	cmp	r4, #0
 8004b36:	f040 808f 	bne.w	8004c58 <_dtoa_r+0x4c8>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1d3      	bne.n	8004ae6 <_dtoa_r+0x356>
 8004b3e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004b42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8094 	beq.w	8004c72 <_dtoa_r+0x4e2>
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	4629      	mov	r1, r5
 8004b50:	4b73      	ldr	r3, [pc, #460]	@ (8004d20 <_dtoa_r+0x590>)
 8004b52:	f7fb ff33 	bl	80009bc <__aeabi_dcmplt>
 8004b56:	2800      	cmp	r0, #0
 8004b58:	f000 808b 	beq.w	8004c72 <_dtoa_r+0x4e2>
 8004b5c:	9b08      	ldr	r3, [sp, #32]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8087 	beq.w	8004c72 <_dtoa_r+0x4e2>
 8004b64:	f1bb 0f00 	cmp.w	fp, #0
 8004b68:	dd34      	ble.n	8004bd4 <_dtoa_r+0x444>
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4629      	mov	r1, r5
 8004b70:	4b6c      	ldr	r3, [pc, #432]	@ (8004d24 <_dtoa_r+0x594>)
 8004b72:	f7fb fcb1 	bl	80004d8 <__aeabi_dmul>
 8004b76:	465c      	mov	r4, fp
 8004b78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b7c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004b80:	3601      	adds	r6, #1
 8004b82:	4630      	mov	r0, r6
 8004b84:	f7fb fc3e 	bl	8000404 <__aeabi_i2d>
 8004b88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b8c:	f7fb fca4 	bl	80004d8 <__aeabi_dmul>
 8004b90:	2200      	movs	r2, #0
 8004b92:	4b65      	ldr	r3, [pc, #404]	@ (8004d28 <_dtoa_r+0x598>)
 8004b94:	f7fb faea 	bl	800016c <__adddf3>
 8004b98:	4605      	mov	r5, r0
 8004b9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004b9e:	2c00      	cmp	r4, #0
 8004ba0:	d16a      	bne.n	8004c78 <_dtoa_r+0x4e8>
 8004ba2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	4b60      	ldr	r3, [pc, #384]	@ (8004d2c <_dtoa_r+0x59c>)
 8004baa:	f7fb fadd 	bl	8000168 <__aeabi_dsub>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004bb6:	462a      	mov	r2, r5
 8004bb8:	4633      	mov	r3, r6
 8004bba:	f7fb ff1d 	bl	80009f8 <__aeabi_dcmpgt>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	f040 8298 	bne.w	80050f4 <_dtoa_r+0x964>
 8004bc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bc8:	462a      	mov	r2, r5
 8004bca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004bce:	f7fb fef5 	bl	80009bc <__aeabi_dcmplt>
 8004bd2:	bb38      	cbnz	r0, 8004c24 <_dtoa_r+0x494>
 8004bd4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004bd8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004bdc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f2c0 8157 	blt.w	8004e92 <_dtoa_r+0x702>
 8004be4:	2f0e      	cmp	r7, #14
 8004be6:	f300 8154 	bgt.w	8004e92 <_dtoa_r+0x702>
 8004bea:	4b4b      	ldr	r3, [pc, #300]	@ (8004d18 <_dtoa_r+0x588>)
 8004bec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004bf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bf4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004bf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f280 80e5 	bge.w	8004dca <_dtoa_r+0x63a>
 8004c00:	9b08      	ldr	r3, [sp, #32]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f300 80e1 	bgt.w	8004dca <_dtoa_r+0x63a>
 8004c08:	d10c      	bne.n	8004c24 <_dtoa_r+0x494>
 8004c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	4b46      	ldr	r3, [pc, #280]	@ (8004d2c <_dtoa_r+0x59c>)
 8004c12:	f7fb fc61 	bl	80004d8 <__aeabi_dmul>
 8004c16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c1a:	f7fb fee3 	bl	80009e4 <__aeabi_dcmpge>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	f000 8266 	beq.w	80050f0 <_dtoa_r+0x960>
 8004c24:	2400      	movs	r4, #0
 8004c26:	4625      	mov	r5, r4
 8004c28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c2a:	4656      	mov	r6, sl
 8004c2c:	ea6f 0803 	mvn.w	r8, r3
 8004c30:	2700      	movs	r7, #0
 8004c32:	4621      	mov	r1, r4
 8004c34:	4648      	mov	r0, r9
 8004c36:	f000 fcbd 	bl	80055b4 <_Bfree>
 8004c3a:	2d00      	cmp	r5, #0
 8004c3c:	f000 80bd 	beq.w	8004dba <_dtoa_r+0x62a>
 8004c40:	b12f      	cbz	r7, 8004c4e <_dtoa_r+0x4be>
 8004c42:	42af      	cmp	r7, r5
 8004c44:	d003      	beq.n	8004c4e <_dtoa_r+0x4be>
 8004c46:	4639      	mov	r1, r7
 8004c48:	4648      	mov	r0, r9
 8004c4a:	f000 fcb3 	bl	80055b4 <_Bfree>
 8004c4e:	4629      	mov	r1, r5
 8004c50:	4648      	mov	r0, r9
 8004c52:	f000 fcaf 	bl	80055b4 <_Bfree>
 8004c56:	e0b0      	b.n	8004dba <_dtoa_r+0x62a>
 8004c58:	07e2      	lsls	r2, r4, #31
 8004c5a:	d505      	bpl.n	8004c68 <_dtoa_r+0x4d8>
 8004c5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c60:	f7fb fc3a 	bl	80004d8 <__aeabi_dmul>
 8004c64:	2301      	movs	r3, #1
 8004c66:	3601      	adds	r6, #1
 8004c68:	1064      	asrs	r4, r4, #1
 8004c6a:	3508      	adds	r5, #8
 8004c6c:	e762      	b.n	8004b34 <_dtoa_r+0x3a4>
 8004c6e:	2602      	movs	r6, #2
 8004c70:	e765      	b.n	8004b3e <_dtoa_r+0x3ae>
 8004c72:	46b8      	mov	r8, r7
 8004c74:	9c08      	ldr	r4, [sp, #32]
 8004c76:	e784      	b.n	8004b82 <_dtoa_r+0x3f2>
 8004c78:	4b27      	ldr	r3, [pc, #156]	@ (8004d18 <_dtoa_r+0x588>)
 8004c7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c84:	4454      	add	r4, sl
 8004c86:	2900      	cmp	r1, #0
 8004c88:	d054      	beq.n	8004d34 <_dtoa_r+0x5a4>
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	4928      	ldr	r1, [pc, #160]	@ (8004d30 <_dtoa_r+0x5a0>)
 8004c8e:	f7fb fd4d 	bl	800072c <__aeabi_ddiv>
 8004c92:	4633      	mov	r3, r6
 8004c94:	462a      	mov	r2, r5
 8004c96:	f7fb fa67 	bl	8000168 <__aeabi_dsub>
 8004c9a:	4656      	mov	r6, sl
 8004c9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ca4:	f7fb fec8 	bl	8000a38 <__aeabi_d2iz>
 8004ca8:	4605      	mov	r5, r0
 8004caa:	f7fb fbab 	bl	8000404 <__aeabi_i2d>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cb6:	f7fb fa57 	bl	8000168 <__aeabi_dsub>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	3530      	adds	r5, #48	@ 0x30
 8004cc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004cc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004cc8:	f806 5b01 	strb.w	r5, [r6], #1
 8004ccc:	f7fb fe76 	bl	80009bc <__aeabi_dcmplt>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d172      	bne.n	8004dba <_dtoa_r+0x62a>
 8004cd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cd8:	2000      	movs	r0, #0
 8004cda:	4911      	ldr	r1, [pc, #68]	@ (8004d20 <_dtoa_r+0x590>)
 8004cdc:	f7fb fa44 	bl	8000168 <__aeabi_dsub>
 8004ce0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ce4:	f7fb fe6a 	bl	80009bc <__aeabi_dcmplt>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	f040 80b4 	bne.w	8004e56 <_dtoa_r+0x6c6>
 8004cee:	42a6      	cmp	r6, r4
 8004cf0:	f43f af70 	beq.w	8004bd4 <_dtoa_r+0x444>
 8004cf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004d24 <_dtoa_r+0x594>)
 8004cfc:	f7fb fbec 	bl	80004d8 <__aeabi_dmul>
 8004d00:	2200      	movs	r2, #0
 8004d02:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d0a:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <_dtoa_r+0x594>)
 8004d0c:	f7fb fbe4 	bl	80004d8 <__aeabi_dmul>
 8004d10:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d14:	e7c4      	b.n	8004ca0 <_dtoa_r+0x510>
 8004d16:	bf00      	nop
 8004d18:	08006950 	.word	0x08006950
 8004d1c:	08006928 	.word	0x08006928
 8004d20:	3ff00000 	.word	0x3ff00000
 8004d24:	40240000 	.word	0x40240000
 8004d28:	401c0000 	.word	0x401c0000
 8004d2c:	40140000 	.word	0x40140000
 8004d30:	3fe00000 	.word	0x3fe00000
 8004d34:	4631      	mov	r1, r6
 8004d36:	4628      	mov	r0, r5
 8004d38:	f7fb fbce 	bl	80004d8 <__aeabi_dmul>
 8004d3c:	4656      	mov	r6, sl
 8004d3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d42:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004d44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d48:	f7fb fe76 	bl	8000a38 <__aeabi_d2iz>
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	f7fb fb59 	bl	8000404 <__aeabi_i2d>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d5a:	f7fb fa05 	bl	8000168 <__aeabi_dsub>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	3530      	adds	r5, #48	@ 0x30
 8004d64:	f806 5b01 	strb.w	r5, [r6], #1
 8004d68:	42a6      	cmp	r6, r4
 8004d6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	d124      	bne.n	8004dbe <_dtoa_r+0x62e>
 8004d74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004d78:	4bae      	ldr	r3, [pc, #696]	@ (8005034 <_dtoa_r+0x8a4>)
 8004d7a:	f7fb f9f7 	bl	800016c <__adddf3>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d86:	f7fb fe37 	bl	80009f8 <__aeabi_dcmpgt>
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d163      	bne.n	8004e56 <_dtoa_r+0x6c6>
 8004d8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d92:	2000      	movs	r0, #0
 8004d94:	49a7      	ldr	r1, [pc, #668]	@ (8005034 <_dtoa_r+0x8a4>)
 8004d96:	f7fb f9e7 	bl	8000168 <__aeabi_dsub>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004da2:	f7fb fe0b 	bl	80009bc <__aeabi_dcmplt>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	f43f af14 	beq.w	8004bd4 <_dtoa_r+0x444>
 8004dac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004dae:	1e73      	subs	r3, r6, #1
 8004db0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004db2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004db6:	2b30      	cmp	r3, #48	@ 0x30
 8004db8:	d0f8      	beq.n	8004dac <_dtoa_r+0x61c>
 8004dba:	4647      	mov	r7, r8
 8004dbc:	e03b      	b.n	8004e36 <_dtoa_r+0x6a6>
 8004dbe:	4b9e      	ldr	r3, [pc, #632]	@ (8005038 <_dtoa_r+0x8a8>)
 8004dc0:	f7fb fb8a 	bl	80004d8 <__aeabi_dmul>
 8004dc4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004dc8:	e7bc      	b.n	8004d44 <_dtoa_r+0x5b4>
 8004dca:	4656      	mov	r6, sl
 8004dcc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	f7fb fca8 	bl	800072c <__aeabi_ddiv>
 8004ddc:	f7fb fe2c 	bl	8000a38 <__aeabi_d2iz>
 8004de0:	4680      	mov	r8, r0
 8004de2:	f7fb fb0f 	bl	8000404 <__aeabi_i2d>
 8004de6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dea:	f7fb fb75 	bl	80004d8 <__aeabi_dmul>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4620      	mov	r0, r4
 8004df4:	4629      	mov	r1, r5
 8004df6:	f7fb f9b7 	bl	8000168 <__aeabi_dsub>
 8004dfa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004dfe:	9d08      	ldr	r5, [sp, #32]
 8004e00:	f806 4b01 	strb.w	r4, [r6], #1
 8004e04:	eba6 040a 	sub.w	r4, r6, sl
 8004e08:	42a5      	cmp	r5, r4
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	d133      	bne.n	8004e78 <_dtoa_r+0x6e8>
 8004e10:	f7fb f9ac 	bl	800016c <__adddf3>
 8004e14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e18:	4604      	mov	r4, r0
 8004e1a:	460d      	mov	r5, r1
 8004e1c:	f7fb fdec 	bl	80009f8 <__aeabi_dcmpgt>
 8004e20:	b9c0      	cbnz	r0, 8004e54 <_dtoa_r+0x6c4>
 8004e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e26:	4620      	mov	r0, r4
 8004e28:	4629      	mov	r1, r5
 8004e2a:	f7fb fdbd 	bl	80009a8 <__aeabi_dcmpeq>
 8004e2e:	b110      	cbz	r0, 8004e36 <_dtoa_r+0x6a6>
 8004e30:	f018 0f01 	tst.w	r8, #1
 8004e34:	d10e      	bne.n	8004e54 <_dtoa_r+0x6c4>
 8004e36:	4648      	mov	r0, r9
 8004e38:	9903      	ldr	r1, [sp, #12]
 8004e3a:	f000 fbbb 	bl	80055b4 <_Bfree>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	7033      	strb	r3, [r6, #0]
 8004e42:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004e44:	3701      	adds	r7, #1
 8004e46:	601f      	str	r7, [r3, #0]
 8004e48:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 824b 	beq.w	80052e6 <_dtoa_r+0xb56>
 8004e50:	601e      	str	r6, [r3, #0]
 8004e52:	e248      	b.n	80052e6 <_dtoa_r+0xb56>
 8004e54:	46b8      	mov	r8, r7
 8004e56:	4633      	mov	r3, r6
 8004e58:	461e      	mov	r6, r3
 8004e5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e5e:	2a39      	cmp	r2, #57	@ 0x39
 8004e60:	d106      	bne.n	8004e70 <_dtoa_r+0x6e0>
 8004e62:	459a      	cmp	sl, r3
 8004e64:	d1f8      	bne.n	8004e58 <_dtoa_r+0x6c8>
 8004e66:	2230      	movs	r2, #48	@ 0x30
 8004e68:	f108 0801 	add.w	r8, r8, #1
 8004e6c:	f88a 2000 	strb.w	r2, [sl]
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	3201      	adds	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	e7a0      	b.n	8004dba <_dtoa_r+0x62a>
 8004e78:	2200      	movs	r2, #0
 8004e7a:	4b6f      	ldr	r3, [pc, #444]	@ (8005038 <_dtoa_r+0x8a8>)
 8004e7c:	f7fb fb2c 	bl	80004d8 <__aeabi_dmul>
 8004e80:	2200      	movs	r2, #0
 8004e82:	2300      	movs	r3, #0
 8004e84:	4604      	mov	r4, r0
 8004e86:	460d      	mov	r5, r1
 8004e88:	f7fb fd8e 	bl	80009a8 <__aeabi_dcmpeq>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d09f      	beq.n	8004dd0 <_dtoa_r+0x640>
 8004e90:	e7d1      	b.n	8004e36 <_dtoa_r+0x6a6>
 8004e92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004e94:	2a00      	cmp	r2, #0
 8004e96:	f000 80ea 	beq.w	800506e <_dtoa_r+0x8de>
 8004e9a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004e9c:	2a01      	cmp	r2, #1
 8004e9e:	f300 80cd 	bgt.w	800503c <_dtoa_r+0x8ac>
 8004ea2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004ea4:	2a00      	cmp	r2, #0
 8004ea6:	f000 80c1 	beq.w	800502c <_dtoa_r+0x89c>
 8004eaa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004eae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004eb0:	9e04      	ldr	r6, [sp, #16]
 8004eb2:	9a04      	ldr	r2, [sp, #16]
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	441a      	add	r2, r3
 8004eb8:	9204      	str	r2, [sp, #16]
 8004eba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ebc:	4648      	mov	r0, r9
 8004ebe:	441a      	add	r2, r3
 8004ec0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ec2:	f000 fc2b 	bl	800571c <__i2b>
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	b166      	cbz	r6, 8004ee4 <_dtoa_r+0x754>
 8004eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dd09      	ble.n	8004ee4 <_dtoa_r+0x754>
 8004ed0:	42b3      	cmp	r3, r6
 8004ed2:	bfa8      	it	ge
 8004ed4:	4633      	movge	r3, r6
 8004ed6:	9a04      	ldr	r2, [sp, #16]
 8004ed8:	1af6      	subs	r6, r6, r3
 8004eda:	1ad2      	subs	r2, r2, r3
 8004edc:	9204      	str	r2, [sp, #16]
 8004ede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ee6:	b30b      	cbz	r3, 8004f2c <_dtoa_r+0x79c>
 8004ee8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 80c6 	beq.w	800507c <_dtoa_r+0x8ec>
 8004ef0:	2c00      	cmp	r4, #0
 8004ef2:	f000 80c0 	beq.w	8005076 <_dtoa_r+0x8e6>
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	4622      	mov	r2, r4
 8004efa:	4648      	mov	r0, r9
 8004efc:	f000 fcc6 	bl	800588c <__pow5mult>
 8004f00:	9a03      	ldr	r2, [sp, #12]
 8004f02:	4601      	mov	r1, r0
 8004f04:	4605      	mov	r5, r0
 8004f06:	4648      	mov	r0, r9
 8004f08:	f000 fc1e 	bl	8005748 <__multiply>
 8004f0c:	9903      	ldr	r1, [sp, #12]
 8004f0e:	4680      	mov	r8, r0
 8004f10:	4648      	mov	r0, r9
 8004f12:	f000 fb4f 	bl	80055b4 <_Bfree>
 8004f16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f18:	1b1b      	subs	r3, r3, r4
 8004f1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f1c:	f000 80b1 	beq.w	8005082 <_dtoa_r+0x8f2>
 8004f20:	4641      	mov	r1, r8
 8004f22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f24:	4648      	mov	r0, r9
 8004f26:	f000 fcb1 	bl	800588c <__pow5mult>
 8004f2a:	9003      	str	r0, [sp, #12]
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	4648      	mov	r0, r9
 8004f30:	f000 fbf4 	bl	800571c <__i2b>
 8004f34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f36:	4604      	mov	r4, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 81d8 	beq.w	80052ee <_dtoa_r+0xb5e>
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4601      	mov	r1, r0
 8004f42:	4648      	mov	r0, r9
 8004f44:	f000 fca2 	bl	800588c <__pow5mult>
 8004f48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	f300 809f 	bgt.w	8005090 <_dtoa_r+0x900>
 8004f52:	9b06      	ldr	r3, [sp, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f040 8097 	bne.w	8005088 <_dtoa_r+0x8f8>
 8004f5a:	9b07      	ldr	r3, [sp, #28]
 8004f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 8093 	bne.w	800508c <_dtoa_r+0x8fc>
 8004f66:	9b07      	ldr	r3, [sp, #28]
 8004f68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f6c:	0d1b      	lsrs	r3, r3, #20
 8004f6e:	051b      	lsls	r3, r3, #20
 8004f70:	b133      	cbz	r3, 8004f80 <_dtoa_r+0x7f0>
 8004f72:	9b04      	ldr	r3, [sp, #16]
 8004f74:	3301      	adds	r3, #1
 8004f76:	9304      	str	r3, [sp, #16]
 8004f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f7e:	2301      	movs	r3, #1
 8004f80:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 81b8 	beq.w	80052fa <_dtoa_r+0xb6a>
 8004f8a:	6923      	ldr	r3, [r4, #16]
 8004f8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f90:	6918      	ldr	r0, [r3, #16]
 8004f92:	f000 fb77 	bl	8005684 <__hi0bits>
 8004f96:	f1c0 0020 	rsb	r0, r0, #32
 8004f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f9c:	4418      	add	r0, r3
 8004f9e:	f010 001f 	ands.w	r0, r0, #31
 8004fa2:	f000 8082 	beq.w	80050aa <_dtoa_r+0x91a>
 8004fa6:	f1c0 0320 	rsb	r3, r0, #32
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	dd73      	ble.n	8005096 <_dtoa_r+0x906>
 8004fae:	9b04      	ldr	r3, [sp, #16]
 8004fb0:	f1c0 001c 	rsb	r0, r0, #28
 8004fb4:	4403      	add	r3, r0
 8004fb6:	9304      	str	r3, [sp, #16]
 8004fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fba:	4406      	add	r6, r0
 8004fbc:	4403      	add	r3, r0
 8004fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fc0:	9b04      	ldr	r3, [sp, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	dd05      	ble.n	8004fd2 <_dtoa_r+0x842>
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4648      	mov	r0, r9
 8004fca:	9903      	ldr	r1, [sp, #12]
 8004fcc:	f000 fcb8 	bl	8005940 <__lshift>
 8004fd0:	9003      	str	r0, [sp, #12]
 8004fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	dd05      	ble.n	8004fe4 <_dtoa_r+0x854>
 8004fd8:	4621      	mov	r1, r4
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4648      	mov	r0, r9
 8004fde:	f000 fcaf 	bl	8005940 <__lshift>
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d061      	beq.n	80050ae <_dtoa_r+0x91e>
 8004fea:	4621      	mov	r1, r4
 8004fec:	9803      	ldr	r0, [sp, #12]
 8004fee:	f000 fd13 	bl	8005a18 <__mcmp>
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	da5b      	bge.n	80050ae <_dtoa_r+0x91e>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	220a      	movs	r2, #10
 8004ffa:	4648      	mov	r0, r9
 8004ffc:	9903      	ldr	r1, [sp, #12]
 8004ffe:	f000 fafb 	bl	80055f8 <__multadd>
 8005002:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005004:	f107 38ff 	add.w	r8, r7, #4294967295
 8005008:	9003      	str	r0, [sp, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8177 	beq.w	80052fe <_dtoa_r+0xb6e>
 8005010:	4629      	mov	r1, r5
 8005012:	2300      	movs	r3, #0
 8005014:	220a      	movs	r2, #10
 8005016:	4648      	mov	r0, r9
 8005018:	f000 faee 	bl	80055f8 <__multadd>
 800501c:	f1bb 0f00 	cmp.w	fp, #0
 8005020:	4605      	mov	r5, r0
 8005022:	dc6f      	bgt.n	8005104 <_dtoa_r+0x974>
 8005024:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005026:	2b02      	cmp	r3, #2
 8005028:	dc49      	bgt.n	80050be <_dtoa_r+0x92e>
 800502a:	e06b      	b.n	8005104 <_dtoa_r+0x974>
 800502c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800502e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005032:	e73c      	b.n	8004eae <_dtoa_r+0x71e>
 8005034:	3fe00000 	.word	0x3fe00000
 8005038:	40240000 	.word	0x40240000
 800503c:	9b08      	ldr	r3, [sp, #32]
 800503e:	1e5c      	subs	r4, r3, #1
 8005040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005042:	42a3      	cmp	r3, r4
 8005044:	db09      	blt.n	800505a <_dtoa_r+0x8ca>
 8005046:	1b1c      	subs	r4, r3, r4
 8005048:	9b08      	ldr	r3, [sp, #32]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f6bf af30 	bge.w	8004eb0 <_dtoa_r+0x720>
 8005050:	9b04      	ldr	r3, [sp, #16]
 8005052:	9a08      	ldr	r2, [sp, #32]
 8005054:	1a9e      	subs	r6, r3, r2
 8005056:	2300      	movs	r3, #0
 8005058:	e72b      	b.n	8004eb2 <_dtoa_r+0x722>
 800505a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800505c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800505e:	1ae3      	subs	r3, r4, r3
 8005060:	441a      	add	r2, r3
 8005062:	940a      	str	r4, [sp, #40]	@ 0x28
 8005064:	9e04      	ldr	r6, [sp, #16]
 8005066:	2400      	movs	r4, #0
 8005068:	9b08      	ldr	r3, [sp, #32]
 800506a:	920e      	str	r2, [sp, #56]	@ 0x38
 800506c:	e721      	b.n	8004eb2 <_dtoa_r+0x722>
 800506e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005070:	9e04      	ldr	r6, [sp, #16]
 8005072:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005074:	e728      	b.n	8004ec8 <_dtoa_r+0x738>
 8005076:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800507a:	e751      	b.n	8004f20 <_dtoa_r+0x790>
 800507c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800507e:	9903      	ldr	r1, [sp, #12]
 8005080:	e750      	b.n	8004f24 <_dtoa_r+0x794>
 8005082:	f8cd 800c 	str.w	r8, [sp, #12]
 8005086:	e751      	b.n	8004f2c <_dtoa_r+0x79c>
 8005088:	2300      	movs	r3, #0
 800508a:	e779      	b.n	8004f80 <_dtoa_r+0x7f0>
 800508c:	9b06      	ldr	r3, [sp, #24]
 800508e:	e777      	b.n	8004f80 <_dtoa_r+0x7f0>
 8005090:	2300      	movs	r3, #0
 8005092:	930a      	str	r3, [sp, #40]	@ 0x28
 8005094:	e779      	b.n	8004f8a <_dtoa_r+0x7fa>
 8005096:	d093      	beq.n	8004fc0 <_dtoa_r+0x830>
 8005098:	9a04      	ldr	r2, [sp, #16]
 800509a:	331c      	adds	r3, #28
 800509c:	441a      	add	r2, r3
 800509e:	9204      	str	r2, [sp, #16]
 80050a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050a2:	441e      	add	r6, r3
 80050a4:	441a      	add	r2, r3
 80050a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80050a8:	e78a      	b.n	8004fc0 <_dtoa_r+0x830>
 80050aa:	4603      	mov	r3, r0
 80050ac:	e7f4      	b.n	8005098 <_dtoa_r+0x908>
 80050ae:	9b08      	ldr	r3, [sp, #32]
 80050b0:	46b8      	mov	r8, r7
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	dc20      	bgt.n	80050f8 <_dtoa_r+0x968>
 80050b6:	469b      	mov	fp, r3
 80050b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	dd1e      	ble.n	80050fc <_dtoa_r+0x96c>
 80050be:	f1bb 0f00 	cmp.w	fp, #0
 80050c2:	f47f adb1 	bne.w	8004c28 <_dtoa_r+0x498>
 80050c6:	4621      	mov	r1, r4
 80050c8:	465b      	mov	r3, fp
 80050ca:	2205      	movs	r2, #5
 80050cc:	4648      	mov	r0, r9
 80050ce:	f000 fa93 	bl	80055f8 <__multadd>
 80050d2:	4601      	mov	r1, r0
 80050d4:	4604      	mov	r4, r0
 80050d6:	9803      	ldr	r0, [sp, #12]
 80050d8:	f000 fc9e 	bl	8005a18 <__mcmp>
 80050dc:	2800      	cmp	r0, #0
 80050de:	f77f ada3 	ble.w	8004c28 <_dtoa_r+0x498>
 80050e2:	4656      	mov	r6, sl
 80050e4:	2331      	movs	r3, #49	@ 0x31
 80050e6:	f108 0801 	add.w	r8, r8, #1
 80050ea:	f806 3b01 	strb.w	r3, [r6], #1
 80050ee:	e59f      	b.n	8004c30 <_dtoa_r+0x4a0>
 80050f0:	46b8      	mov	r8, r7
 80050f2:	9c08      	ldr	r4, [sp, #32]
 80050f4:	4625      	mov	r5, r4
 80050f6:	e7f4      	b.n	80050e2 <_dtoa_r+0x952>
 80050f8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80050fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8101 	beq.w	8005306 <_dtoa_r+0xb76>
 8005104:	2e00      	cmp	r6, #0
 8005106:	dd05      	ble.n	8005114 <_dtoa_r+0x984>
 8005108:	4629      	mov	r1, r5
 800510a:	4632      	mov	r2, r6
 800510c:	4648      	mov	r0, r9
 800510e:	f000 fc17 	bl	8005940 <__lshift>
 8005112:	4605      	mov	r5, r0
 8005114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005116:	2b00      	cmp	r3, #0
 8005118:	d05c      	beq.n	80051d4 <_dtoa_r+0xa44>
 800511a:	4648      	mov	r0, r9
 800511c:	6869      	ldr	r1, [r5, #4]
 800511e:	f000 fa09 	bl	8005534 <_Balloc>
 8005122:	4606      	mov	r6, r0
 8005124:	b928      	cbnz	r0, 8005132 <_dtoa_r+0x9a2>
 8005126:	4602      	mov	r2, r0
 8005128:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800512c:	4b80      	ldr	r3, [pc, #512]	@ (8005330 <_dtoa_r+0xba0>)
 800512e:	f7ff bb43 	b.w	80047b8 <_dtoa_r+0x28>
 8005132:	692a      	ldr	r2, [r5, #16]
 8005134:	f105 010c 	add.w	r1, r5, #12
 8005138:	3202      	adds	r2, #2
 800513a:	0092      	lsls	r2, r2, #2
 800513c:	300c      	adds	r0, #12
 800513e:	f7ff fa90 	bl	8004662 <memcpy>
 8005142:	2201      	movs	r2, #1
 8005144:	4631      	mov	r1, r6
 8005146:	4648      	mov	r0, r9
 8005148:	f000 fbfa 	bl	8005940 <__lshift>
 800514c:	462f      	mov	r7, r5
 800514e:	4605      	mov	r5, r0
 8005150:	f10a 0301 	add.w	r3, sl, #1
 8005154:	9304      	str	r3, [sp, #16]
 8005156:	eb0a 030b 	add.w	r3, sl, fp
 800515a:	930a      	str	r3, [sp, #40]	@ 0x28
 800515c:	9b06      	ldr	r3, [sp, #24]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	9309      	str	r3, [sp, #36]	@ 0x24
 8005164:	9b04      	ldr	r3, [sp, #16]
 8005166:	4621      	mov	r1, r4
 8005168:	9803      	ldr	r0, [sp, #12]
 800516a:	f103 3bff 	add.w	fp, r3, #4294967295
 800516e:	f7ff fa86 	bl	800467e <quorem>
 8005172:	4603      	mov	r3, r0
 8005174:	4639      	mov	r1, r7
 8005176:	3330      	adds	r3, #48	@ 0x30
 8005178:	9006      	str	r0, [sp, #24]
 800517a:	9803      	ldr	r0, [sp, #12]
 800517c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800517e:	f000 fc4b 	bl	8005a18 <__mcmp>
 8005182:	462a      	mov	r2, r5
 8005184:	9008      	str	r0, [sp, #32]
 8005186:	4621      	mov	r1, r4
 8005188:	4648      	mov	r0, r9
 800518a:	f000 fc61 	bl	8005a50 <__mdiff>
 800518e:	68c2      	ldr	r2, [r0, #12]
 8005190:	4606      	mov	r6, r0
 8005192:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005194:	bb02      	cbnz	r2, 80051d8 <_dtoa_r+0xa48>
 8005196:	4601      	mov	r1, r0
 8005198:	9803      	ldr	r0, [sp, #12]
 800519a:	f000 fc3d 	bl	8005a18 <__mcmp>
 800519e:	4602      	mov	r2, r0
 80051a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051a2:	4631      	mov	r1, r6
 80051a4:	4648      	mov	r0, r9
 80051a6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80051aa:	f000 fa03 	bl	80055b4 <_Bfree>
 80051ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80051b2:	9e04      	ldr	r6, [sp, #16]
 80051b4:	ea42 0103 	orr.w	r1, r2, r3
 80051b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051ba:	4319      	orrs	r1, r3
 80051bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051be:	d10d      	bne.n	80051dc <_dtoa_r+0xa4c>
 80051c0:	2b39      	cmp	r3, #57	@ 0x39
 80051c2:	d027      	beq.n	8005214 <_dtoa_r+0xa84>
 80051c4:	9a08      	ldr	r2, [sp, #32]
 80051c6:	2a00      	cmp	r2, #0
 80051c8:	dd01      	ble.n	80051ce <_dtoa_r+0xa3e>
 80051ca:	9b06      	ldr	r3, [sp, #24]
 80051cc:	3331      	adds	r3, #49	@ 0x31
 80051ce:	f88b 3000 	strb.w	r3, [fp]
 80051d2:	e52e      	b.n	8004c32 <_dtoa_r+0x4a2>
 80051d4:	4628      	mov	r0, r5
 80051d6:	e7b9      	b.n	800514c <_dtoa_r+0x9bc>
 80051d8:	2201      	movs	r2, #1
 80051da:	e7e2      	b.n	80051a2 <_dtoa_r+0xa12>
 80051dc:	9908      	ldr	r1, [sp, #32]
 80051de:	2900      	cmp	r1, #0
 80051e0:	db04      	blt.n	80051ec <_dtoa_r+0xa5c>
 80051e2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80051e4:	4301      	orrs	r1, r0
 80051e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051e8:	4301      	orrs	r1, r0
 80051ea:	d120      	bne.n	800522e <_dtoa_r+0xa9e>
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	ddee      	ble.n	80051ce <_dtoa_r+0xa3e>
 80051f0:	2201      	movs	r2, #1
 80051f2:	9903      	ldr	r1, [sp, #12]
 80051f4:	4648      	mov	r0, r9
 80051f6:	9304      	str	r3, [sp, #16]
 80051f8:	f000 fba2 	bl	8005940 <__lshift>
 80051fc:	4621      	mov	r1, r4
 80051fe:	9003      	str	r0, [sp, #12]
 8005200:	f000 fc0a 	bl	8005a18 <__mcmp>
 8005204:	2800      	cmp	r0, #0
 8005206:	9b04      	ldr	r3, [sp, #16]
 8005208:	dc02      	bgt.n	8005210 <_dtoa_r+0xa80>
 800520a:	d1e0      	bne.n	80051ce <_dtoa_r+0xa3e>
 800520c:	07da      	lsls	r2, r3, #31
 800520e:	d5de      	bpl.n	80051ce <_dtoa_r+0xa3e>
 8005210:	2b39      	cmp	r3, #57	@ 0x39
 8005212:	d1da      	bne.n	80051ca <_dtoa_r+0xa3a>
 8005214:	2339      	movs	r3, #57	@ 0x39
 8005216:	f88b 3000 	strb.w	r3, [fp]
 800521a:	4633      	mov	r3, r6
 800521c:	461e      	mov	r6, r3
 800521e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005222:	3b01      	subs	r3, #1
 8005224:	2a39      	cmp	r2, #57	@ 0x39
 8005226:	d04e      	beq.n	80052c6 <_dtoa_r+0xb36>
 8005228:	3201      	adds	r2, #1
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	e501      	b.n	8004c32 <_dtoa_r+0x4a2>
 800522e:	2a00      	cmp	r2, #0
 8005230:	dd03      	ble.n	800523a <_dtoa_r+0xaaa>
 8005232:	2b39      	cmp	r3, #57	@ 0x39
 8005234:	d0ee      	beq.n	8005214 <_dtoa_r+0xa84>
 8005236:	3301      	adds	r3, #1
 8005238:	e7c9      	b.n	80051ce <_dtoa_r+0xa3e>
 800523a:	9a04      	ldr	r2, [sp, #16]
 800523c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800523e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005242:	428a      	cmp	r2, r1
 8005244:	d028      	beq.n	8005298 <_dtoa_r+0xb08>
 8005246:	2300      	movs	r3, #0
 8005248:	220a      	movs	r2, #10
 800524a:	9903      	ldr	r1, [sp, #12]
 800524c:	4648      	mov	r0, r9
 800524e:	f000 f9d3 	bl	80055f8 <__multadd>
 8005252:	42af      	cmp	r7, r5
 8005254:	9003      	str	r0, [sp, #12]
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	f04f 020a 	mov.w	r2, #10
 800525e:	4639      	mov	r1, r7
 8005260:	4648      	mov	r0, r9
 8005262:	d107      	bne.n	8005274 <_dtoa_r+0xae4>
 8005264:	f000 f9c8 	bl	80055f8 <__multadd>
 8005268:	4607      	mov	r7, r0
 800526a:	4605      	mov	r5, r0
 800526c:	9b04      	ldr	r3, [sp, #16]
 800526e:	3301      	adds	r3, #1
 8005270:	9304      	str	r3, [sp, #16]
 8005272:	e777      	b.n	8005164 <_dtoa_r+0x9d4>
 8005274:	f000 f9c0 	bl	80055f8 <__multadd>
 8005278:	4629      	mov	r1, r5
 800527a:	4607      	mov	r7, r0
 800527c:	2300      	movs	r3, #0
 800527e:	220a      	movs	r2, #10
 8005280:	4648      	mov	r0, r9
 8005282:	f000 f9b9 	bl	80055f8 <__multadd>
 8005286:	4605      	mov	r5, r0
 8005288:	e7f0      	b.n	800526c <_dtoa_r+0xadc>
 800528a:	f1bb 0f00 	cmp.w	fp, #0
 800528e:	bfcc      	ite	gt
 8005290:	465e      	movgt	r6, fp
 8005292:	2601      	movle	r6, #1
 8005294:	2700      	movs	r7, #0
 8005296:	4456      	add	r6, sl
 8005298:	2201      	movs	r2, #1
 800529a:	9903      	ldr	r1, [sp, #12]
 800529c:	4648      	mov	r0, r9
 800529e:	9304      	str	r3, [sp, #16]
 80052a0:	f000 fb4e 	bl	8005940 <__lshift>
 80052a4:	4621      	mov	r1, r4
 80052a6:	9003      	str	r0, [sp, #12]
 80052a8:	f000 fbb6 	bl	8005a18 <__mcmp>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	dcb4      	bgt.n	800521a <_dtoa_r+0xa8a>
 80052b0:	d102      	bne.n	80052b8 <_dtoa_r+0xb28>
 80052b2:	9b04      	ldr	r3, [sp, #16]
 80052b4:	07db      	lsls	r3, r3, #31
 80052b6:	d4b0      	bmi.n	800521a <_dtoa_r+0xa8a>
 80052b8:	4633      	mov	r3, r6
 80052ba:	461e      	mov	r6, r3
 80052bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052c0:	2a30      	cmp	r2, #48	@ 0x30
 80052c2:	d0fa      	beq.n	80052ba <_dtoa_r+0xb2a>
 80052c4:	e4b5      	b.n	8004c32 <_dtoa_r+0x4a2>
 80052c6:	459a      	cmp	sl, r3
 80052c8:	d1a8      	bne.n	800521c <_dtoa_r+0xa8c>
 80052ca:	2331      	movs	r3, #49	@ 0x31
 80052cc:	f108 0801 	add.w	r8, r8, #1
 80052d0:	f88a 3000 	strb.w	r3, [sl]
 80052d4:	e4ad      	b.n	8004c32 <_dtoa_r+0x4a2>
 80052d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80052d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005334 <_dtoa_r+0xba4>
 80052dc:	b11b      	cbz	r3, 80052e6 <_dtoa_r+0xb56>
 80052de:	f10a 0308 	add.w	r3, sl, #8
 80052e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4650      	mov	r0, sl
 80052e8:	b017      	add	sp, #92	@ 0x5c
 80052ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	f77f ae2e 	ble.w	8004f52 <_dtoa_r+0x7c2>
 80052f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80052fa:	2001      	movs	r0, #1
 80052fc:	e64d      	b.n	8004f9a <_dtoa_r+0x80a>
 80052fe:	f1bb 0f00 	cmp.w	fp, #0
 8005302:	f77f aed9 	ble.w	80050b8 <_dtoa_r+0x928>
 8005306:	4656      	mov	r6, sl
 8005308:	4621      	mov	r1, r4
 800530a:	9803      	ldr	r0, [sp, #12]
 800530c:	f7ff f9b7 	bl	800467e <quorem>
 8005310:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005314:	f806 3b01 	strb.w	r3, [r6], #1
 8005318:	eba6 020a 	sub.w	r2, r6, sl
 800531c:	4593      	cmp	fp, r2
 800531e:	ddb4      	ble.n	800528a <_dtoa_r+0xafa>
 8005320:	2300      	movs	r3, #0
 8005322:	220a      	movs	r2, #10
 8005324:	4648      	mov	r0, r9
 8005326:	9903      	ldr	r1, [sp, #12]
 8005328:	f000 f966 	bl	80055f8 <__multadd>
 800532c:	9003      	str	r0, [sp, #12]
 800532e:	e7eb      	b.n	8005308 <_dtoa_r+0xb78>
 8005330:	08006856 	.word	0x08006856
 8005334:	080067da 	.word	0x080067da

08005338 <_free_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4605      	mov	r5, r0
 800533c:	2900      	cmp	r1, #0
 800533e:	d040      	beq.n	80053c2 <_free_r+0x8a>
 8005340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005344:	1f0c      	subs	r4, r1, #4
 8005346:	2b00      	cmp	r3, #0
 8005348:	bfb8      	it	lt
 800534a:	18e4      	addlt	r4, r4, r3
 800534c:	f000 f8e6 	bl	800551c <__malloc_lock>
 8005350:	4a1c      	ldr	r2, [pc, #112]	@ (80053c4 <_free_r+0x8c>)
 8005352:	6813      	ldr	r3, [r2, #0]
 8005354:	b933      	cbnz	r3, 8005364 <_free_r+0x2c>
 8005356:	6063      	str	r3, [r4, #4]
 8005358:	6014      	str	r4, [r2, #0]
 800535a:	4628      	mov	r0, r5
 800535c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005360:	f000 b8e2 	b.w	8005528 <__malloc_unlock>
 8005364:	42a3      	cmp	r3, r4
 8005366:	d908      	bls.n	800537a <_free_r+0x42>
 8005368:	6820      	ldr	r0, [r4, #0]
 800536a:	1821      	adds	r1, r4, r0
 800536c:	428b      	cmp	r3, r1
 800536e:	bf01      	itttt	eq
 8005370:	6819      	ldreq	r1, [r3, #0]
 8005372:	685b      	ldreq	r3, [r3, #4]
 8005374:	1809      	addeq	r1, r1, r0
 8005376:	6021      	streq	r1, [r4, #0]
 8005378:	e7ed      	b.n	8005356 <_free_r+0x1e>
 800537a:	461a      	mov	r2, r3
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	b10b      	cbz	r3, 8005384 <_free_r+0x4c>
 8005380:	42a3      	cmp	r3, r4
 8005382:	d9fa      	bls.n	800537a <_free_r+0x42>
 8005384:	6811      	ldr	r1, [r2, #0]
 8005386:	1850      	adds	r0, r2, r1
 8005388:	42a0      	cmp	r0, r4
 800538a:	d10b      	bne.n	80053a4 <_free_r+0x6c>
 800538c:	6820      	ldr	r0, [r4, #0]
 800538e:	4401      	add	r1, r0
 8005390:	1850      	adds	r0, r2, r1
 8005392:	4283      	cmp	r3, r0
 8005394:	6011      	str	r1, [r2, #0]
 8005396:	d1e0      	bne.n	800535a <_free_r+0x22>
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	4408      	add	r0, r1
 800539e:	6010      	str	r0, [r2, #0]
 80053a0:	6053      	str	r3, [r2, #4]
 80053a2:	e7da      	b.n	800535a <_free_r+0x22>
 80053a4:	d902      	bls.n	80053ac <_free_r+0x74>
 80053a6:	230c      	movs	r3, #12
 80053a8:	602b      	str	r3, [r5, #0]
 80053aa:	e7d6      	b.n	800535a <_free_r+0x22>
 80053ac:	6820      	ldr	r0, [r4, #0]
 80053ae:	1821      	adds	r1, r4, r0
 80053b0:	428b      	cmp	r3, r1
 80053b2:	bf01      	itttt	eq
 80053b4:	6819      	ldreq	r1, [r3, #0]
 80053b6:	685b      	ldreq	r3, [r3, #4]
 80053b8:	1809      	addeq	r1, r1, r0
 80053ba:	6021      	streq	r1, [r4, #0]
 80053bc:	6063      	str	r3, [r4, #4]
 80053be:	6054      	str	r4, [r2, #4]
 80053c0:	e7cb      	b.n	800535a <_free_r+0x22>
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	2000050c 	.word	0x2000050c

080053c8 <malloc>:
 80053c8:	4b02      	ldr	r3, [pc, #8]	@ (80053d4 <malloc+0xc>)
 80053ca:	4601      	mov	r1, r0
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	f000 b825 	b.w	800541c <_malloc_r>
 80053d2:	bf00      	nop
 80053d4:	20000018 	.word	0x20000018

080053d8 <sbrk_aligned>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	4e0f      	ldr	r6, [pc, #60]	@ (8005418 <sbrk_aligned+0x40>)
 80053dc:	460c      	mov	r4, r1
 80053de:	6831      	ldr	r1, [r6, #0]
 80053e0:	4605      	mov	r5, r0
 80053e2:	b911      	cbnz	r1, 80053ea <sbrk_aligned+0x12>
 80053e4:	f000 fe3a 	bl	800605c <_sbrk_r>
 80053e8:	6030      	str	r0, [r6, #0]
 80053ea:	4621      	mov	r1, r4
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 fe35 	bl	800605c <_sbrk_r>
 80053f2:	1c43      	adds	r3, r0, #1
 80053f4:	d103      	bne.n	80053fe <sbrk_aligned+0x26>
 80053f6:	f04f 34ff 	mov.w	r4, #4294967295
 80053fa:	4620      	mov	r0, r4
 80053fc:	bd70      	pop	{r4, r5, r6, pc}
 80053fe:	1cc4      	adds	r4, r0, #3
 8005400:	f024 0403 	bic.w	r4, r4, #3
 8005404:	42a0      	cmp	r0, r4
 8005406:	d0f8      	beq.n	80053fa <sbrk_aligned+0x22>
 8005408:	1a21      	subs	r1, r4, r0
 800540a:	4628      	mov	r0, r5
 800540c:	f000 fe26 	bl	800605c <_sbrk_r>
 8005410:	3001      	adds	r0, #1
 8005412:	d1f2      	bne.n	80053fa <sbrk_aligned+0x22>
 8005414:	e7ef      	b.n	80053f6 <sbrk_aligned+0x1e>
 8005416:	bf00      	nop
 8005418:	20000508 	.word	0x20000508

0800541c <_malloc_r>:
 800541c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005420:	1ccd      	adds	r5, r1, #3
 8005422:	f025 0503 	bic.w	r5, r5, #3
 8005426:	3508      	adds	r5, #8
 8005428:	2d0c      	cmp	r5, #12
 800542a:	bf38      	it	cc
 800542c:	250c      	movcc	r5, #12
 800542e:	2d00      	cmp	r5, #0
 8005430:	4606      	mov	r6, r0
 8005432:	db01      	blt.n	8005438 <_malloc_r+0x1c>
 8005434:	42a9      	cmp	r1, r5
 8005436:	d904      	bls.n	8005442 <_malloc_r+0x26>
 8005438:	230c      	movs	r3, #12
 800543a:	6033      	str	r3, [r6, #0]
 800543c:	2000      	movs	r0, #0
 800543e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005442:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005518 <_malloc_r+0xfc>
 8005446:	f000 f869 	bl	800551c <__malloc_lock>
 800544a:	f8d8 3000 	ldr.w	r3, [r8]
 800544e:	461c      	mov	r4, r3
 8005450:	bb44      	cbnz	r4, 80054a4 <_malloc_r+0x88>
 8005452:	4629      	mov	r1, r5
 8005454:	4630      	mov	r0, r6
 8005456:	f7ff ffbf 	bl	80053d8 <sbrk_aligned>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	4604      	mov	r4, r0
 800545e:	d158      	bne.n	8005512 <_malloc_r+0xf6>
 8005460:	f8d8 4000 	ldr.w	r4, [r8]
 8005464:	4627      	mov	r7, r4
 8005466:	2f00      	cmp	r7, #0
 8005468:	d143      	bne.n	80054f2 <_malloc_r+0xd6>
 800546a:	2c00      	cmp	r4, #0
 800546c:	d04b      	beq.n	8005506 <_malloc_r+0xea>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	4639      	mov	r1, r7
 8005472:	4630      	mov	r0, r6
 8005474:	eb04 0903 	add.w	r9, r4, r3
 8005478:	f000 fdf0 	bl	800605c <_sbrk_r>
 800547c:	4581      	cmp	r9, r0
 800547e:	d142      	bne.n	8005506 <_malloc_r+0xea>
 8005480:	6821      	ldr	r1, [r4, #0]
 8005482:	4630      	mov	r0, r6
 8005484:	1a6d      	subs	r5, r5, r1
 8005486:	4629      	mov	r1, r5
 8005488:	f7ff ffa6 	bl	80053d8 <sbrk_aligned>
 800548c:	3001      	adds	r0, #1
 800548e:	d03a      	beq.n	8005506 <_malloc_r+0xea>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	442b      	add	r3, r5
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	f8d8 3000 	ldr.w	r3, [r8]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	bb62      	cbnz	r2, 80054f8 <_malloc_r+0xdc>
 800549e:	f8c8 7000 	str.w	r7, [r8]
 80054a2:	e00f      	b.n	80054c4 <_malloc_r+0xa8>
 80054a4:	6822      	ldr	r2, [r4, #0]
 80054a6:	1b52      	subs	r2, r2, r5
 80054a8:	d420      	bmi.n	80054ec <_malloc_r+0xd0>
 80054aa:	2a0b      	cmp	r2, #11
 80054ac:	d917      	bls.n	80054de <_malloc_r+0xc2>
 80054ae:	1961      	adds	r1, r4, r5
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	6025      	str	r5, [r4, #0]
 80054b4:	bf18      	it	ne
 80054b6:	6059      	strne	r1, [r3, #4]
 80054b8:	6863      	ldr	r3, [r4, #4]
 80054ba:	bf08      	it	eq
 80054bc:	f8c8 1000 	streq.w	r1, [r8]
 80054c0:	5162      	str	r2, [r4, r5]
 80054c2:	604b      	str	r3, [r1, #4]
 80054c4:	4630      	mov	r0, r6
 80054c6:	f000 f82f 	bl	8005528 <__malloc_unlock>
 80054ca:	f104 000b 	add.w	r0, r4, #11
 80054ce:	1d23      	adds	r3, r4, #4
 80054d0:	f020 0007 	bic.w	r0, r0, #7
 80054d4:	1ac2      	subs	r2, r0, r3
 80054d6:	bf1c      	itt	ne
 80054d8:	1a1b      	subne	r3, r3, r0
 80054da:	50a3      	strne	r3, [r4, r2]
 80054dc:	e7af      	b.n	800543e <_malloc_r+0x22>
 80054de:	6862      	ldr	r2, [r4, #4]
 80054e0:	42a3      	cmp	r3, r4
 80054e2:	bf0c      	ite	eq
 80054e4:	f8c8 2000 	streq.w	r2, [r8]
 80054e8:	605a      	strne	r2, [r3, #4]
 80054ea:	e7eb      	b.n	80054c4 <_malloc_r+0xa8>
 80054ec:	4623      	mov	r3, r4
 80054ee:	6864      	ldr	r4, [r4, #4]
 80054f0:	e7ae      	b.n	8005450 <_malloc_r+0x34>
 80054f2:	463c      	mov	r4, r7
 80054f4:	687f      	ldr	r7, [r7, #4]
 80054f6:	e7b6      	b.n	8005466 <_malloc_r+0x4a>
 80054f8:	461a      	mov	r2, r3
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	d1fb      	bne.n	80054f8 <_malloc_r+0xdc>
 8005500:	2300      	movs	r3, #0
 8005502:	6053      	str	r3, [r2, #4]
 8005504:	e7de      	b.n	80054c4 <_malloc_r+0xa8>
 8005506:	230c      	movs	r3, #12
 8005508:	4630      	mov	r0, r6
 800550a:	6033      	str	r3, [r6, #0]
 800550c:	f000 f80c 	bl	8005528 <__malloc_unlock>
 8005510:	e794      	b.n	800543c <_malloc_r+0x20>
 8005512:	6005      	str	r5, [r0, #0]
 8005514:	e7d6      	b.n	80054c4 <_malloc_r+0xa8>
 8005516:	bf00      	nop
 8005518:	2000050c 	.word	0x2000050c

0800551c <__malloc_lock>:
 800551c:	4801      	ldr	r0, [pc, #4]	@ (8005524 <__malloc_lock+0x8>)
 800551e:	f7ff b890 	b.w	8004642 <__retarget_lock_acquire_recursive>
 8005522:	bf00      	nop
 8005524:	20000504 	.word	0x20000504

08005528 <__malloc_unlock>:
 8005528:	4801      	ldr	r0, [pc, #4]	@ (8005530 <__malloc_unlock+0x8>)
 800552a:	f7ff b88b 	b.w	8004644 <__retarget_lock_release_recursive>
 800552e:	bf00      	nop
 8005530:	20000504 	.word	0x20000504

08005534 <_Balloc>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	69c6      	ldr	r6, [r0, #28]
 8005538:	4604      	mov	r4, r0
 800553a:	460d      	mov	r5, r1
 800553c:	b976      	cbnz	r6, 800555c <_Balloc+0x28>
 800553e:	2010      	movs	r0, #16
 8005540:	f7ff ff42 	bl	80053c8 <malloc>
 8005544:	4602      	mov	r2, r0
 8005546:	61e0      	str	r0, [r4, #28]
 8005548:	b920      	cbnz	r0, 8005554 <_Balloc+0x20>
 800554a:	216b      	movs	r1, #107	@ 0x6b
 800554c:	4b17      	ldr	r3, [pc, #92]	@ (80055ac <_Balloc+0x78>)
 800554e:	4818      	ldr	r0, [pc, #96]	@ (80055b0 <_Balloc+0x7c>)
 8005550:	f000 fd94 	bl	800607c <__assert_func>
 8005554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005558:	6006      	str	r6, [r0, #0]
 800555a:	60c6      	str	r6, [r0, #12]
 800555c:	69e6      	ldr	r6, [r4, #28]
 800555e:	68f3      	ldr	r3, [r6, #12]
 8005560:	b183      	cbz	r3, 8005584 <_Balloc+0x50>
 8005562:	69e3      	ldr	r3, [r4, #28]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800556a:	b9b8      	cbnz	r0, 800559c <_Balloc+0x68>
 800556c:	2101      	movs	r1, #1
 800556e:	fa01 f605 	lsl.w	r6, r1, r5
 8005572:	1d72      	adds	r2, r6, #5
 8005574:	4620      	mov	r0, r4
 8005576:	0092      	lsls	r2, r2, #2
 8005578:	f000 fd9e 	bl	80060b8 <_calloc_r>
 800557c:	b160      	cbz	r0, 8005598 <_Balloc+0x64>
 800557e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005582:	e00e      	b.n	80055a2 <_Balloc+0x6e>
 8005584:	2221      	movs	r2, #33	@ 0x21
 8005586:	2104      	movs	r1, #4
 8005588:	4620      	mov	r0, r4
 800558a:	f000 fd95 	bl	80060b8 <_calloc_r>
 800558e:	69e3      	ldr	r3, [r4, #28]
 8005590:	60f0      	str	r0, [r6, #12]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e4      	bne.n	8005562 <_Balloc+0x2e>
 8005598:	2000      	movs	r0, #0
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	6802      	ldr	r2, [r0, #0]
 800559e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055a2:	2300      	movs	r3, #0
 80055a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055a8:	e7f7      	b.n	800559a <_Balloc+0x66>
 80055aa:	bf00      	nop
 80055ac:	080067e7 	.word	0x080067e7
 80055b0:	08006867 	.word	0x08006867

080055b4 <_Bfree>:
 80055b4:	b570      	push	{r4, r5, r6, lr}
 80055b6:	69c6      	ldr	r6, [r0, #28]
 80055b8:	4605      	mov	r5, r0
 80055ba:	460c      	mov	r4, r1
 80055bc:	b976      	cbnz	r6, 80055dc <_Bfree+0x28>
 80055be:	2010      	movs	r0, #16
 80055c0:	f7ff ff02 	bl	80053c8 <malloc>
 80055c4:	4602      	mov	r2, r0
 80055c6:	61e8      	str	r0, [r5, #28]
 80055c8:	b920      	cbnz	r0, 80055d4 <_Bfree+0x20>
 80055ca:	218f      	movs	r1, #143	@ 0x8f
 80055cc:	4b08      	ldr	r3, [pc, #32]	@ (80055f0 <_Bfree+0x3c>)
 80055ce:	4809      	ldr	r0, [pc, #36]	@ (80055f4 <_Bfree+0x40>)
 80055d0:	f000 fd54 	bl	800607c <__assert_func>
 80055d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055d8:	6006      	str	r6, [r0, #0]
 80055da:	60c6      	str	r6, [r0, #12]
 80055dc:	b13c      	cbz	r4, 80055ee <_Bfree+0x3a>
 80055de:	69eb      	ldr	r3, [r5, #28]
 80055e0:	6862      	ldr	r2, [r4, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055e8:	6021      	str	r1, [r4, #0]
 80055ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
 80055f0:	080067e7 	.word	0x080067e7
 80055f4:	08006867 	.word	0x08006867

080055f8 <__multadd>:
 80055f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055fc:	4607      	mov	r7, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	461e      	mov	r6, r3
 8005602:	2000      	movs	r0, #0
 8005604:	690d      	ldr	r5, [r1, #16]
 8005606:	f101 0c14 	add.w	ip, r1, #20
 800560a:	f8dc 3000 	ldr.w	r3, [ip]
 800560e:	3001      	adds	r0, #1
 8005610:	b299      	uxth	r1, r3
 8005612:	fb02 6101 	mla	r1, r2, r1, r6
 8005616:	0c1e      	lsrs	r6, r3, #16
 8005618:	0c0b      	lsrs	r3, r1, #16
 800561a:	fb02 3306 	mla	r3, r2, r6, r3
 800561e:	b289      	uxth	r1, r1
 8005620:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005624:	4285      	cmp	r5, r0
 8005626:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800562a:	f84c 1b04 	str.w	r1, [ip], #4
 800562e:	dcec      	bgt.n	800560a <__multadd+0x12>
 8005630:	b30e      	cbz	r6, 8005676 <__multadd+0x7e>
 8005632:	68a3      	ldr	r3, [r4, #8]
 8005634:	42ab      	cmp	r3, r5
 8005636:	dc19      	bgt.n	800566c <__multadd+0x74>
 8005638:	6861      	ldr	r1, [r4, #4]
 800563a:	4638      	mov	r0, r7
 800563c:	3101      	adds	r1, #1
 800563e:	f7ff ff79 	bl	8005534 <_Balloc>
 8005642:	4680      	mov	r8, r0
 8005644:	b928      	cbnz	r0, 8005652 <__multadd+0x5a>
 8005646:	4602      	mov	r2, r0
 8005648:	21ba      	movs	r1, #186	@ 0xba
 800564a:	4b0c      	ldr	r3, [pc, #48]	@ (800567c <__multadd+0x84>)
 800564c:	480c      	ldr	r0, [pc, #48]	@ (8005680 <__multadd+0x88>)
 800564e:	f000 fd15 	bl	800607c <__assert_func>
 8005652:	6922      	ldr	r2, [r4, #16]
 8005654:	f104 010c 	add.w	r1, r4, #12
 8005658:	3202      	adds	r2, #2
 800565a:	0092      	lsls	r2, r2, #2
 800565c:	300c      	adds	r0, #12
 800565e:	f7ff f800 	bl	8004662 <memcpy>
 8005662:	4621      	mov	r1, r4
 8005664:	4638      	mov	r0, r7
 8005666:	f7ff ffa5 	bl	80055b4 <_Bfree>
 800566a:	4644      	mov	r4, r8
 800566c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005670:	3501      	adds	r5, #1
 8005672:	615e      	str	r6, [r3, #20]
 8005674:	6125      	str	r5, [r4, #16]
 8005676:	4620      	mov	r0, r4
 8005678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800567c:	08006856 	.word	0x08006856
 8005680:	08006867 	.word	0x08006867

08005684 <__hi0bits>:
 8005684:	4603      	mov	r3, r0
 8005686:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800568a:	bf3a      	itte	cc
 800568c:	0403      	lslcc	r3, r0, #16
 800568e:	2010      	movcc	r0, #16
 8005690:	2000      	movcs	r0, #0
 8005692:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005696:	bf3c      	itt	cc
 8005698:	021b      	lslcc	r3, r3, #8
 800569a:	3008      	addcc	r0, #8
 800569c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056a0:	bf3c      	itt	cc
 80056a2:	011b      	lslcc	r3, r3, #4
 80056a4:	3004      	addcc	r0, #4
 80056a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056aa:	bf3c      	itt	cc
 80056ac:	009b      	lslcc	r3, r3, #2
 80056ae:	3002      	addcc	r0, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	db05      	blt.n	80056c0 <__hi0bits+0x3c>
 80056b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80056b8:	f100 0001 	add.w	r0, r0, #1
 80056bc:	bf08      	it	eq
 80056be:	2020      	moveq	r0, #32
 80056c0:	4770      	bx	lr

080056c2 <__lo0bits>:
 80056c2:	6803      	ldr	r3, [r0, #0]
 80056c4:	4602      	mov	r2, r0
 80056c6:	f013 0007 	ands.w	r0, r3, #7
 80056ca:	d00b      	beq.n	80056e4 <__lo0bits+0x22>
 80056cc:	07d9      	lsls	r1, r3, #31
 80056ce:	d421      	bmi.n	8005714 <__lo0bits+0x52>
 80056d0:	0798      	lsls	r0, r3, #30
 80056d2:	bf49      	itett	mi
 80056d4:	085b      	lsrmi	r3, r3, #1
 80056d6:	089b      	lsrpl	r3, r3, #2
 80056d8:	2001      	movmi	r0, #1
 80056da:	6013      	strmi	r3, [r2, #0]
 80056dc:	bf5c      	itt	pl
 80056de:	2002      	movpl	r0, #2
 80056e0:	6013      	strpl	r3, [r2, #0]
 80056e2:	4770      	bx	lr
 80056e4:	b299      	uxth	r1, r3
 80056e6:	b909      	cbnz	r1, 80056ec <__lo0bits+0x2a>
 80056e8:	2010      	movs	r0, #16
 80056ea:	0c1b      	lsrs	r3, r3, #16
 80056ec:	b2d9      	uxtb	r1, r3
 80056ee:	b909      	cbnz	r1, 80056f4 <__lo0bits+0x32>
 80056f0:	3008      	adds	r0, #8
 80056f2:	0a1b      	lsrs	r3, r3, #8
 80056f4:	0719      	lsls	r1, r3, #28
 80056f6:	bf04      	itt	eq
 80056f8:	091b      	lsreq	r3, r3, #4
 80056fa:	3004      	addeq	r0, #4
 80056fc:	0799      	lsls	r1, r3, #30
 80056fe:	bf04      	itt	eq
 8005700:	089b      	lsreq	r3, r3, #2
 8005702:	3002      	addeq	r0, #2
 8005704:	07d9      	lsls	r1, r3, #31
 8005706:	d403      	bmi.n	8005710 <__lo0bits+0x4e>
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	f100 0001 	add.w	r0, r0, #1
 800570e:	d003      	beq.n	8005718 <__lo0bits+0x56>
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	4770      	bx	lr
 8005714:	2000      	movs	r0, #0
 8005716:	4770      	bx	lr
 8005718:	2020      	movs	r0, #32
 800571a:	4770      	bx	lr

0800571c <__i2b>:
 800571c:	b510      	push	{r4, lr}
 800571e:	460c      	mov	r4, r1
 8005720:	2101      	movs	r1, #1
 8005722:	f7ff ff07 	bl	8005534 <_Balloc>
 8005726:	4602      	mov	r2, r0
 8005728:	b928      	cbnz	r0, 8005736 <__i2b+0x1a>
 800572a:	f240 1145 	movw	r1, #325	@ 0x145
 800572e:	4b04      	ldr	r3, [pc, #16]	@ (8005740 <__i2b+0x24>)
 8005730:	4804      	ldr	r0, [pc, #16]	@ (8005744 <__i2b+0x28>)
 8005732:	f000 fca3 	bl	800607c <__assert_func>
 8005736:	2301      	movs	r3, #1
 8005738:	6144      	str	r4, [r0, #20]
 800573a:	6103      	str	r3, [r0, #16]
 800573c:	bd10      	pop	{r4, pc}
 800573e:	bf00      	nop
 8005740:	08006856 	.word	0x08006856
 8005744:	08006867 	.word	0x08006867

08005748 <__multiply>:
 8005748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574c:	4617      	mov	r7, r2
 800574e:	690a      	ldr	r2, [r1, #16]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4689      	mov	r9, r1
 8005754:	429a      	cmp	r2, r3
 8005756:	bfa2      	ittt	ge
 8005758:	463b      	movge	r3, r7
 800575a:	460f      	movge	r7, r1
 800575c:	4699      	movge	r9, r3
 800575e:	693d      	ldr	r5, [r7, #16]
 8005760:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	eb05 060a 	add.w	r6, r5, sl
 800576c:	42b3      	cmp	r3, r6
 800576e:	b085      	sub	sp, #20
 8005770:	bfb8      	it	lt
 8005772:	3101      	addlt	r1, #1
 8005774:	f7ff fede 	bl	8005534 <_Balloc>
 8005778:	b930      	cbnz	r0, 8005788 <__multiply+0x40>
 800577a:	4602      	mov	r2, r0
 800577c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005780:	4b40      	ldr	r3, [pc, #256]	@ (8005884 <__multiply+0x13c>)
 8005782:	4841      	ldr	r0, [pc, #260]	@ (8005888 <__multiply+0x140>)
 8005784:	f000 fc7a 	bl	800607c <__assert_func>
 8005788:	f100 0414 	add.w	r4, r0, #20
 800578c:	4623      	mov	r3, r4
 800578e:	2200      	movs	r2, #0
 8005790:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005794:	4573      	cmp	r3, lr
 8005796:	d320      	bcc.n	80057da <__multiply+0x92>
 8005798:	f107 0814 	add.w	r8, r7, #20
 800579c:	f109 0114 	add.w	r1, r9, #20
 80057a0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80057a4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80057a8:	9302      	str	r3, [sp, #8]
 80057aa:	1beb      	subs	r3, r5, r7
 80057ac:	3b15      	subs	r3, #21
 80057ae:	f023 0303 	bic.w	r3, r3, #3
 80057b2:	3304      	adds	r3, #4
 80057b4:	3715      	adds	r7, #21
 80057b6:	42bd      	cmp	r5, r7
 80057b8:	bf38      	it	cc
 80057ba:	2304      	movcc	r3, #4
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	9b02      	ldr	r3, [sp, #8]
 80057c0:	9103      	str	r1, [sp, #12]
 80057c2:	428b      	cmp	r3, r1
 80057c4:	d80c      	bhi.n	80057e0 <__multiply+0x98>
 80057c6:	2e00      	cmp	r6, #0
 80057c8:	dd03      	ble.n	80057d2 <__multiply+0x8a>
 80057ca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d055      	beq.n	800587e <__multiply+0x136>
 80057d2:	6106      	str	r6, [r0, #16]
 80057d4:	b005      	add	sp, #20
 80057d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057da:	f843 2b04 	str.w	r2, [r3], #4
 80057de:	e7d9      	b.n	8005794 <__multiply+0x4c>
 80057e0:	f8b1 a000 	ldrh.w	sl, [r1]
 80057e4:	f1ba 0f00 	cmp.w	sl, #0
 80057e8:	d01f      	beq.n	800582a <__multiply+0xe2>
 80057ea:	46c4      	mov	ip, r8
 80057ec:	46a1      	mov	r9, r4
 80057ee:	2700      	movs	r7, #0
 80057f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80057f4:	f8d9 3000 	ldr.w	r3, [r9]
 80057f8:	fa1f fb82 	uxth.w	fp, r2
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	fb0a 330b 	mla	r3, sl, fp, r3
 8005802:	443b      	add	r3, r7
 8005804:	f8d9 7000 	ldr.w	r7, [r9]
 8005808:	0c12      	lsrs	r2, r2, #16
 800580a:	0c3f      	lsrs	r7, r7, #16
 800580c:	fb0a 7202 	mla	r2, sl, r2, r7
 8005810:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005814:	b29b      	uxth	r3, r3
 8005816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800581a:	4565      	cmp	r5, ip
 800581c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005820:	f849 3b04 	str.w	r3, [r9], #4
 8005824:	d8e4      	bhi.n	80057f0 <__multiply+0xa8>
 8005826:	9b01      	ldr	r3, [sp, #4]
 8005828:	50e7      	str	r7, [r4, r3]
 800582a:	9b03      	ldr	r3, [sp, #12]
 800582c:	3104      	adds	r1, #4
 800582e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005832:	f1b9 0f00 	cmp.w	r9, #0
 8005836:	d020      	beq.n	800587a <__multiply+0x132>
 8005838:	4647      	mov	r7, r8
 800583a:	46a4      	mov	ip, r4
 800583c:	f04f 0a00 	mov.w	sl, #0
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	f8b7 b000 	ldrh.w	fp, [r7]
 8005846:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800584a:	b29b      	uxth	r3, r3
 800584c:	fb09 220b 	mla	r2, r9, fp, r2
 8005850:	4452      	add	r2, sl
 8005852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005856:	f84c 3b04 	str.w	r3, [ip], #4
 800585a:	f857 3b04 	ldr.w	r3, [r7], #4
 800585e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005862:	f8bc 3000 	ldrh.w	r3, [ip]
 8005866:	42bd      	cmp	r5, r7
 8005868:	fb09 330a 	mla	r3, r9, sl, r3
 800586c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005870:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005874:	d8e5      	bhi.n	8005842 <__multiply+0xfa>
 8005876:	9a01      	ldr	r2, [sp, #4]
 8005878:	50a3      	str	r3, [r4, r2]
 800587a:	3404      	adds	r4, #4
 800587c:	e79f      	b.n	80057be <__multiply+0x76>
 800587e:	3e01      	subs	r6, #1
 8005880:	e7a1      	b.n	80057c6 <__multiply+0x7e>
 8005882:	bf00      	nop
 8005884:	08006856 	.word	0x08006856
 8005888:	08006867 	.word	0x08006867

0800588c <__pow5mult>:
 800588c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005890:	4615      	mov	r5, r2
 8005892:	f012 0203 	ands.w	r2, r2, #3
 8005896:	4607      	mov	r7, r0
 8005898:	460e      	mov	r6, r1
 800589a:	d007      	beq.n	80058ac <__pow5mult+0x20>
 800589c:	4c25      	ldr	r4, [pc, #148]	@ (8005934 <__pow5mult+0xa8>)
 800589e:	3a01      	subs	r2, #1
 80058a0:	2300      	movs	r3, #0
 80058a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058a6:	f7ff fea7 	bl	80055f8 <__multadd>
 80058aa:	4606      	mov	r6, r0
 80058ac:	10ad      	asrs	r5, r5, #2
 80058ae:	d03d      	beq.n	800592c <__pow5mult+0xa0>
 80058b0:	69fc      	ldr	r4, [r7, #28]
 80058b2:	b97c      	cbnz	r4, 80058d4 <__pow5mult+0x48>
 80058b4:	2010      	movs	r0, #16
 80058b6:	f7ff fd87 	bl	80053c8 <malloc>
 80058ba:	4602      	mov	r2, r0
 80058bc:	61f8      	str	r0, [r7, #28]
 80058be:	b928      	cbnz	r0, 80058cc <__pow5mult+0x40>
 80058c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80058c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005938 <__pow5mult+0xac>)
 80058c6:	481d      	ldr	r0, [pc, #116]	@ (800593c <__pow5mult+0xb0>)
 80058c8:	f000 fbd8 	bl	800607c <__assert_func>
 80058cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058d0:	6004      	str	r4, [r0, #0]
 80058d2:	60c4      	str	r4, [r0, #12]
 80058d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80058d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058dc:	b94c      	cbnz	r4, 80058f2 <__pow5mult+0x66>
 80058de:	f240 2171 	movw	r1, #625	@ 0x271
 80058e2:	4638      	mov	r0, r7
 80058e4:	f7ff ff1a 	bl	800571c <__i2b>
 80058e8:	2300      	movs	r3, #0
 80058ea:	4604      	mov	r4, r0
 80058ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80058f0:	6003      	str	r3, [r0, #0]
 80058f2:	f04f 0900 	mov.w	r9, #0
 80058f6:	07eb      	lsls	r3, r5, #31
 80058f8:	d50a      	bpl.n	8005910 <__pow5mult+0x84>
 80058fa:	4631      	mov	r1, r6
 80058fc:	4622      	mov	r2, r4
 80058fe:	4638      	mov	r0, r7
 8005900:	f7ff ff22 	bl	8005748 <__multiply>
 8005904:	4680      	mov	r8, r0
 8005906:	4631      	mov	r1, r6
 8005908:	4638      	mov	r0, r7
 800590a:	f7ff fe53 	bl	80055b4 <_Bfree>
 800590e:	4646      	mov	r6, r8
 8005910:	106d      	asrs	r5, r5, #1
 8005912:	d00b      	beq.n	800592c <__pow5mult+0xa0>
 8005914:	6820      	ldr	r0, [r4, #0]
 8005916:	b938      	cbnz	r0, 8005928 <__pow5mult+0x9c>
 8005918:	4622      	mov	r2, r4
 800591a:	4621      	mov	r1, r4
 800591c:	4638      	mov	r0, r7
 800591e:	f7ff ff13 	bl	8005748 <__multiply>
 8005922:	6020      	str	r0, [r4, #0]
 8005924:	f8c0 9000 	str.w	r9, [r0]
 8005928:	4604      	mov	r4, r0
 800592a:	e7e4      	b.n	80058f6 <__pow5mult+0x6a>
 800592c:	4630      	mov	r0, r6
 800592e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005932:	bf00      	nop
 8005934:	08006918 	.word	0x08006918
 8005938:	080067e7 	.word	0x080067e7
 800593c:	08006867 	.word	0x08006867

08005940 <__lshift>:
 8005940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005944:	460c      	mov	r4, r1
 8005946:	4607      	mov	r7, r0
 8005948:	4691      	mov	r9, r2
 800594a:	6923      	ldr	r3, [r4, #16]
 800594c:	6849      	ldr	r1, [r1, #4]
 800594e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005952:	68a3      	ldr	r3, [r4, #8]
 8005954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005958:	f108 0601 	add.w	r6, r8, #1
 800595c:	42b3      	cmp	r3, r6
 800595e:	db0b      	blt.n	8005978 <__lshift+0x38>
 8005960:	4638      	mov	r0, r7
 8005962:	f7ff fde7 	bl	8005534 <_Balloc>
 8005966:	4605      	mov	r5, r0
 8005968:	b948      	cbnz	r0, 800597e <__lshift+0x3e>
 800596a:	4602      	mov	r2, r0
 800596c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005970:	4b27      	ldr	r3, [pc, #156]	@ (8005a10 <__lshift+0xd0>)
 8005972:	4828      	ldr	r0, [pc, #160]	@ (8005a14 <__lshift+0xd4>)
 8005974:	f000 fb82 	bl	800607c <__assert_func>
 8005978:	3101      	adds	r1, #1
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	e7ee      	b.n	800595c <__lshift+0x1c>
 800597e:	2300      	movs	r3, #0
 8005980:	f100 0114 	add.w	r1, r0, #20
 8005984:	f100 0210 	add.w	r2, r0, #16
 8005988:	4618      	mov	r0, r3
 800598a:	4553      	cmp	r3, sl
 800598c:	db33      	blt.n	80059f6 <__lshift+0xb6>
 800598e:	6920      	ldr	r0, [r4, #16]
 8005990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005994:	f104 0314 	add.w	r3, r4, #20
 8005998:	f019 091f 	ands.w	r9, r9, #31
 800599c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80059a4:	d02b      	beq.n	80059fe <__lshift+0xbe>
 80059a6:	468a      	mov	sl, r1
 80059a8:	2200      	movs	r2, #0
 80059aa:	f1c9 0e20 	rsb	lr, r9, #32
 80059ae:	6818      	ldr	r0, [r3, #0]
 80059b0:	fa00 f009 	lsl.w	r0, r0, r9
 80059b4:	4310      	orrs	r0, r2
 80059b6:	f84a 0b04 	str.w	r0, [sl], #4
 80059ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80059be:	459c      	cmp	ip, r3
 80059c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80059c4:	d8f3      	bhi.n	80059ae <__lshift+0x6e>
 80059c6:	ebac 0304 	sub.w	r3, ip, r4
 80059ca:	3b15      	subs	r3, #21
 80059cc:	f023 0303 	bic.w	r3, r3, #3
 80059d0:	3304      	adds	r3, #4
 80059d2:	f104 0015 	add.w	r0, r4, #21
 80059d6:	4560      	cmp	r0, ip
 80059d8:	bf88      	it	hi
 80059da:	2304      	movhi	r3, #4
 80059dc:	50ca      	str	r2, [r1, r3]
 80059de:	b10a      	cbz	r2, 80059e4 <__lshift+0xa4>
 80059e0:	f108 0602 	add.w	r6, r8, #2
 80059e4:	3e01      	subs	r6, #1
 80059e6:	4638      	mov	r0, r7
 80059e8:	4621      	mov	r1, r4
 80059ea:	612e      	str	r6, [r5, #16]
 80059ec:	f7ff fde2 	bl	80055b4 <_Bfree>
 80059f0:	4628      	mov	r0, r5
 80059f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80059fa:	3301      	adds	r3, #1
 80059fc:	e7c5      	b.n	800598a <__lshift+0x4a>
 80059fe:	3904      	subs	r1, #4
 8005a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a04:	459c      	cmp	ip, r3
 8005a06:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a0a:	d8f9      	bhi.n	8005a00 <__lshift+0xc0>
 8005a0c:	e7ea      	b.n	80059e4 <__lshift+0xa4>
 8005a0e:	bf00      	nop
 8005a10:	08006856 	.word	0x08006856
 8005a14:	08006867 	.word	0x08006867

08005a18 <__mcmp>:
 8005a18:	4603      	mov	r3, r0
 8005a1a:	690a      	ldr	r2, [r1, #16]
 8005a1c:	6900      	ldr	r0, [r0, #16]
 8005a1e:	b530      	push	{r4, r5, lr}
 8005a20:	1a80      	subs	r0, r0, r2
 8005a22:	d10e      	bne.n	8005a42 <__mcmp+0x2a>
 8005a24:	3314      	adds	r3, #20
 8005a26:	3114      	adds	r1, #20
 8005a28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a38:	4295      	cmp	r5, r2
 8005a3a:	d003      	beq.n	8005a44 <__mcmp+0x2c>
 8005a3c:	d205      	bcs.n	8005a4a <__mcmp+0x32>
 8005a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a42:	bd30      	pop	{r4, r5, pc}
 8005a44:	42a3      	cmp	r3, r4
 8005a46:	d3f3      	bcc.n	8005a30 <__mcmp+0x18>
 8005a48:	e7fb      	b.n	8005a42 <__mcmp+0x2a>
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	e7f9      	b.n	8005a42 <__mcmp+0x2a>
	...

08005a50 <__mdiff>:
 8005a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	4689      	mov	r9, r1
 8005a56:	4606      	mov	r6, r0
 8005a58:	4611      	mov	r1, r2
 8005a5a:	4648      	mov	r0, r9
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	f7ff ffdb 	bl	8005a18 <__mcmp>
 8005a62:	1e05      	subs	r5, r0, #0
 8005a64:	d112      	bne.n	8005a8c <__mdiff+0x3c>
 8005a66:	4629      	mov	r1, r5
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f7ff fd63 	bl	8005534 <_Balloc>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	b928      	cbnz	r0, 8005a7e <__mdiff+0x2e>
 8005a72:	f240 2137 	movw	r1, #567	@ 0x237
 8005a76:	4b3e      	ldr	r3, [pc, #248]	@ (8005b70 <__mdiff+0x120>)
 8005a78:	483e      	ldr	r0, [pc, #248]	@ (8005b74 <__mdiff+0x124>)
 8005a7a:	f000 faff 	bl	800607c <__assert_func>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a84:	4610      	mov	r0, r2
 8005a86:	b003      	add	sp, #12
 8005a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8c:	bfbc      	itt	lt
 8005a8e:	464b      	movlt	r3, r9
 8005a90:	46a1      	movlt	r9, r4
 8005a92:	4630      	mov	r0, r6
 8005a94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005a98:	bfba      	itte	lt
 8005a9a:	461c      	movlt	r4, r3
 8005a9c:	2501      	movlt	r5, #1
 8005a9e:	2500      	movge	r5, #0
 8005aa0:	f7ff fd48 	bl	8005534 <_Balloc>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	b918      	cbnz	r0, 8005ab0 <__mdiff+0x60>
 8005aa8:	f240 2145 	movw	r1, #581	@ 0x245
 8005aac:	4b30      	ldr	r3, [pc, #192]	@ (8005b70 <__mdiff+0x120>)
 8005aae:	e7e3      	b.n	8005a78 <__mdiff+0x28>
 8005ab0:	f100 0b14 	add.w	fp, r0, #20
 8005ab4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005ab8:	f109 0310 	add.w	r3, r9, #16
 8005abc:	60c5      	str	r5, [r0, #12]
 8005abe:	f04f 0c00 	mov.w	ip, #0
 8005ac2:	f109 0514 	add.w	r5, r9, #20
 8005ac6:	46d9      	mov	r9, fp
 8005ac8:	6926      	ldr	r6, [r4, #16]
 8005aca:	f104 0e14 	add.w	lr, r4, #20
 8005ace:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005ad2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	9b01      	ldr	r3, [sp, #4]
 8005ada:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005ade:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005ae2:	b281      	uxth	r1, r0
 8005ae4:	9301      	str	r3, [sp, #4]
 8005ae6:	fa1f f38a 	uxth.w	r3, sl
 8005aea:	1a5b      	subs	r3, r3, r1
 8005aec:	0c00      	lsrs	r0, r0, #16
 8005aee:	4463      	add	r3, ip
 8005af0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005af4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005afe:	4576      	cmp	r6, lr
 8005b00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b04:	f849 3b04 	str.w	r3, [r9], #4
 8005b08:	d8e6      	bhi.n	8005ad8 <__mdiff+0x88>
 8005b0a:	1b33      	subs	r3, r6, r4
 8005b0c:	3b15      	subs	r3, #21
 8005b0e:	f023 0303 	bic.w	r3, r3, #3
 8005b12:	3415      	adds	r4, #21
 8005b14:	3304      	adds	r3, #4
 8005b16:	42a6      	cmp	r6, r4
 8005b18:	bf38      	it	cc
 8005b1a:	2304      	movcc	r3, #4
 8005b1c:	441d      	add	r5, r3
 8005b1e:	445b      	add	r3, fp
 8005b20:	461e      	mov	r6, r3
 8005b22:	462c      	mov	r4, r5
 8005b24:	4544      	cmp	r4, r8
 8005b26:	d30e      	bcc.n	8005b46 <__mdiff+0xf6>
 8005b28:	f108 0103 	add.w	r1, r8, #3
 8005b2c:	1b49      	subs	r1, r1, r5
 8005b2e:	f021 0103 	bic.w	r1, r1, #3
 8005b32:	3d03      	subs	r5, #3
 8005b34:	45a8      	cmp	r8, r5
 8005b36:	bf38      	it	cc
 8005b38:	2100      	movcc	r1, #0
 8005b3a:	440b      	add	r3, r1
 8005b3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b40:	b199      	cbz	r1, 8005b6a <__mdiff+0x11a>
 8005b42:	6117      	str	r7, [r2, #16]
 8005b44:	e79e      	b.n	8005a84 <__mdiff+0x34>
 8005b46:	46e6      	mov	lr, ip
 8005b48:	f854 1b04 	ldr.w	r1, [r4], #4
 8005b4c:	fa1f fc81 	uxth.w	ip, r1
 8005b50:	44f4      	add	ip, lr
 8005b52:	0c08      	lsrs	r0, r1, #16
 8005b54:	4471      	add	r1, lr
 8005b56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005b5a:	b289      	uxth	r1, r1
 8005b5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005b60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b64:	f846 1b04 	str.w	r1, [r6], #4
 8005b68:	e7dc      	b.n	8005b24 <__mdiff+0xd4>
 8005b6a:	3f01      	subs	r7, #1
 8005b6c:	e7e6      	b.n	8005b3c <__mdiff+0xec>
 8005b6e:	bf00      	nop
 8005b70:	08006856 	.word	0x08006856
 8005b74:	08006867 	.word	0x08006867

08005b78 <__d2b>:
 8005b78:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	4690      	mov	r8, r2
 8005b80:	4699      	mov	r9, r3
 8005b82:	9e08      	ldr	r6, [sp, #32]
 8005b84:	f7ff fcd6 	bl	8005534 <_Balloc>
 8005b88:	4604      	mov	r4, r0
 8005b8a:	b930      	cbnz	r0, 8005b9a <__d2b+0x22>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b92:	4b23      	ldr	r3, [pc, #140]	@ (8005c20 <__d2b+0xa8>)
 8005b94:	4823      	ldr	r0, [pc, #140]	@ (8005c24 <__d2b+0xac>)
 8005b96:	f000 fa71 	bl	800607c <__assert_func>
 8005b9a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ba2:	b10d      	cbz	r5, 8005ba8 <__d2b+0x30>
 8005ba4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	f1b8 0300 	subs.w	r3, r8, #0
 8005bae:	d024      	beq.n	8005bfa <__d2b+0x82>
 8005bb0:	4668      	mov	r0, sp
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	f7ff fd85 	bl	80056c2 <__lo0bits>
 8005bb8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005bbc:	b1d8      	cbz	r0, 8005bf6 <__d2b+0x7e>
 8005bbe:	f1c0 0320 	rsb	r3, r0, #32
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	40c2      	lsrs	r2, r0
 8005bca:	6163      	str	r3, [r4, #20]
 8005bcc:	9201      	str	r2, [sp, #4]
 8005bce:	9b01      	ldr	r3, [sp, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2201      	moveq	r2, #1
 8005bd6:	2202      	movne	r2, #2
 8005bd8:	61a3      	str	r3, [r4, #24]
 8005bda:	6122      	str	r2, [r4, #16]
 8005bdc:	b1ad      	cbz	r5, 8005c0a <__d2b+0x92>
 8005bde:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005be2:	4405      	add	r5, r0
 8005be4:	6035      	str	r5, [r6, #0]
 8005be6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bec:	6018      	str	r0, [r3, #0]
 8005bee:	4620      	mov	r0, r4
 8005bf0:	b002      	add	sp, #8
 8005bf2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005bf6:	6161      	str	r1, [r4, #20]
 8005bf8:	e7e9      	b.n	8005bce <__d2b+0x56>
 8005bfa:	a801      	add	r0, sp, #4
 8005bfc:	f7ff fd61 	bl	80056c2 <__lo0bits>
 8005c00:	9b01      	ldr	r3, [sp, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	6163      	str	r3, [r4, #20]
 8005c06:	3020      	adds	r0, #32
 8005c08:	e7e7      	b.n	8005bda <__d2b+0x62>
 8005c0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005c0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c12:	6030      	str	r0, [r6, #0]
 8005c14:	6918      	ldr	r0, [r3, #16]
 8005c16:	f7ff fd35 	bl	8005684 <__hi0bits>
 8005c1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c1e:	e7e4      	b.n	8005bea <__d2b+0x72>
 8005c20:	08006856 	.word	0x08006856
 8005c24:	08006867 	.word	0x08006867

08005c28 <__ssputs_r>:
 8005c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2c:	461f      	mov	r7, r3
 8005c2e:	688e      	ldr	r6, [r1, #8]
 8005c30:	4682      	mov	sl, r0
 8005c32:	42be      	cmp	r6, r7
 8005c34:	460c      	mov	r4, r1
 8005c36:	4690      	mov	r8, r2
 8005c38:	680b      	ldr	r3, [r1, #0]
 8005c3a:	d82d      	bhi.n	8005c98 <__ssputs_r+0x70>
 8005c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c44:	d026      	beq.n	8005c94 <__ssputs_r+0x6c>
 8005c46:	6965      	ldr	r5, [r4, #20]
 8005c48:	6909      	ldr	r1, [r1, #16]
 8005c4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c4e:	eba3 0901 	sub.w	r9, r3, r1
 8005c52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c56:	1c7b      	adds	r3, r7, #1
 8005c58:	444b      	add	r3, r9
 8005c5a:	106d      	asrs	r5, r5, #1
 8005c5c:	429d      	cmp	r5, r3
 8005c5e:	bf38      	it	cc
 8005c60:	461d      	movcc	r5, r3
 8005c62:	0553      	lsls	r3, r2, #21
 8005c64:	d527      	bpl.n	8005cb6 <__ssputs_r+0x8e>
 8005c66:	4629      	mov	r1, r5
 8005c68:	f7ff fbd8 	bl	800541c <_malloc_r>
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	b360      	cbz	r0, 8005cca <__ssputs_r+0xa2>
 8005c70:	464a      	mov	r2, r9
 8005c72:	6921      	ldr	r1, [r4, #16]
 8005c74:	f7fe fcf5 	bl	8004662 <memcpy>
 8005c78:	89a3      	ldrh	r3, [r4, #12]
 8005c7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	6126      	str	r6, [r4, #16]
 8005c86:	444e      	add	r6, r9
 8005c88:	6026      	str	r6, [r4, #0]
 8005c8a:	463e      	mov	r6, r7
 8005c8c:	6165      	str	r5, [r4, #20]
 8005c8e:	eba5 0509 	sub.w	r5, r5, r9
 8005c92:	60a5      	str	r5, [r4, #8]
 8005c94:	42be      	cmp	r6, r7
 8005c96:	d900      	bls.n	8005c9a <__ssputs_r+0x72>
 8005c98:	463e      	mov	r6, r7
 8005c9a:	4632      	mov	r2, r6
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	6820      	ldr	r0, [r4, #0]
 8005ca0:	f000 f9c2 	bl	8006028 <memmove>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	68a3      	ldr	r3, [r4, #8]
 8005ca8:	1b9b      	subs	r3, r3, r6
 8005caa:	60a3      	str	r3, [r4, #8]
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	4433      	add	r3, r6
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb6:	462a      	mov	r2, r5
 8005cb8:	f000 fa24 	bl	8006104 <_realloc_r>
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d1e0      	bne.n	8005c84 <__ssputs_r+0x5c>
 8005cc2:	4650      	mov	r0, sl
 8005cc4:	6921      	ldr	r1, [r4, #16]
 8005cc6:	f7ff fb37 	bl	8005338 <_free_r>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	f8ca 3000 	str.w	r3, [sl]
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cda:	81a3      	strh	r3, [r4, #12]
 8005cdc:	e7e9      	b.n	8005cb2 <__ssputs_r+0x8a>
	...

08005ce0 <_svfiprintf_r>:
 8005ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce4:	4698      	mov	r8, r3
 8005ce6:	898b      	ldrh	r3, [r1, #12]
 8005ce8:	4607      	mov	r7, r0
 8005cea:	061b      	lsls	r3, r3, #24
 8005cec:	460d      	mov	r5, r1
 8005cee:	4614      	mov	r4, r2
 8005cf0:	b09d      	sub	sp, #116	@ 0x74
 8005cf2:	d510      	bpl.n	8005d16 <_svfiprintf_r+0x36>
 8005cf4:	690b      	ldr	r3, [r1, #16]
 8005cf6:	b973      	cbnz	r3, 8005d16 <_svfiprintf_r+0x36>
 8005cf8:	2140      	movs	r1, #64	@ 0x40
 8005cfa:	f7ff fb8f 	bl	800541c <_malloc_r>
 8005cfe:	6028      	str	r0, [r5, #0]
 8005d00:	6128      	str	r0, [r5, #16]
 8005d02:	b930      	cbnz	r0, 8005d12 <_svfiprintf_r+0x32>
 8005d04:	230c      	movs	r3, #12
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	b01d      	add	sp, #116	@ 0x74
 8005d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d12:	2340      	movs	r3, #64	@ 0x40
 8005d14:	616b      	str	r3, [r5, #20]
 8005d16:	2300      	movs	r3, #0
 8005d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d1a:	2320      	movs	r3, #32
 8005d1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d20:	2330      	movs	r3, #48	@ 0x30
 8005d22:	f04f 0901 	mov.w	r9, #1
 8005d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d2a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005ec4 <_svfiprintf_r+0x1e4>
 8005d2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d32:	4623      	mov	r3, r4
 8005d34:	469a      	mov	sl, r3
 8005d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d3a:	b10a      	cbz	r2, 8005d40 <_svfiprintf_r+0x60>
 8005d3c:	2a25      	cmp	r2, #37	@ 0x25
 8005d3e:	d1f9      	bne.n	8005d34 <_svfiprintf_r+0x54>
 8005d40:	ebba 0b04 	subs.w	fp, sl, r4
 8005d44:	d00b      	beq.n	8005d5e <_svfiprintf_r+0x7e>
 8005d46:	465b      	mov	r3, fp
 8005d48:	4622      	mov	r2, r4
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f7ff ff6b 	bl	8005c28 <__ssputs_r>
 8005d52:	3001      	adds	r0, #1
 8005d54:	f000 80a7 	beq.w	8005ea6 <_svfiprintf_r+0x1c6>
 8005d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d5a:	445a      	add	r2, fp
 8005d5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 809f 	beq.w	8005ea6 <_svfiprintf_r+0x1c6>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d72:	f10a 0a01 	add.w	sl, sl, #1
 8005d76:	9304      	str	r3, [sp, #16]
 8005d78:	9307      	str	r3, [sp, #28]
 8005d7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d80:	4654      	mov	r4, sl
 8005d82:	2205      	movs	r2, #5
 8005d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d88:	484e      	ldr	r0, [pc, #312]	@ (8005ec4 <_svfiprintf_r+0x1e4>)
 8005d8a:	f7fe fc5c 	bl	8004646 <memchr>
 8005d8e:	9a04      	ldr	r2, [sp, #16]
 8005d90:	b9d8      	cbnz	r0, 8005dca <_svfiprintf_r+0xea>
 8005d92:	06d0      	lsls	r0, r2, #27
 8005d94:	bf44      	itt	mi
 8005d96:	2320      	movmi	r3, #32
 8005d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d9c:	0711      	lsls	r1, r2, #28
 8005d9e:	bf44      	itt	mi
 8005da0:	232b      	movmi	r3, #43	@ 0x2b
 8005da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005da6:	f89a 3000 	ldrb.w	r3, [sl]
 8005daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dac:	d015      	beq.n	8005dda <_svfiprintf_r+0xfa>
 8005dae:	4654      	mov	r4, sl
 8005db0:	2000      	movs	r0, #0
 8005db2:	f04f 0c0a 	mov.w	ip, #10
 8005db6:	9a07      	ldr	r2, [sp, #28]
 8005db8:	4621      	mov	r1, r4
 8005dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dbe:	3b30      	subs	r3, #48	@ 0x30
 8005dc0:	2b09      	cmp	r3, #9
 8005dc2:	d94b      	bls.n	8005e5c <_svfiprintf_r+0x17c>
 8005dc4:	b1b0      	cbz	r0, 8005df4 <_svfiprintf_r+0x114>
 8005dc6:	9207      	str	r2, [sp, #28]
 8005dc8:	e014      	b.n	8005df4 <_svfiprintf_r+0x114>
 8005dca:	eba0 0308 	sub.w	r3, r0, r8
 8005dce:	fa09 f303 	lsl.w	r3, r9, r3
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	46a2      	mov	sl, r4
 8005dd6:	9304      	str	r3, [sp, #16]
 8005dd8:	e7d2      	b.n	8005d80 <_svfiprintf_r+0xa0>
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	1d19      	adds	r1, r3, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	9103      	str	r1, [sp, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bfbb      	ittet	lt
 8005de6:	425b      	neglt	r3, r3
 8005de8:	f042 0202 	orrlt.w	r2, r2, #2
 8005dec:	9307      	strge	r3, [sp, #28]
 8005dee:	9307      	strlt	r3, [sp, #28]
 8005df0:	bfb8      	it	lt
 8005df2:	9204      	strlt	r2, [sp, #16]
 8005df4:	7823      	ldrb	r3, [r4, #0]
 8005df6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005df8:	d10a      	bne.n	8005e10 <_svfiprintf_r+0x130>
 8005dfa:	7863      	ldrb	r3, [r4, #1]
 8005dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dfe:	d132      	bne.n	8005e66 <_svfiprintf_r+0x186>
 8005e00:	9b03      	ldr	r3, [sp, #12]
 8005e02:	3402      	adds	r4, #2
 8005e04:	1d1a      	adds	r2, r3, #4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	9203      	str	r2, [sp, #12]
 8005e0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e0e:	9305      	str	r3, [sp, #20]
 8005e10:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005ec8 <_svfiprintf_r+0x1e8>
 8005e14:	2203      	movs	r2, #3
 8005e16:	4650      	mov	r0, sl
 8005e18:	7821      	ldrb	r1, [r4, #0]
 8005e1a:	f7fe fc14 	bl	8004646 <memchr>
 8005e1e:	b138      	cbz	r0, 8005e30 <_svfiprintf_r+0x150>
 8005e20:	2240      	movs	r2, #64	@ 0x40
 8005e22:	9b04      	ldr	r3, [sp, #16]
 8005e24:	eba0 000a 	sub.w	r0, r0, sl
 8005e28:	4082      	lsls	r2, r0
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	3401      	adds	r4, #1
 8005e2e:	9304      	str	r3, [sp, #16]
 8005e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e34:	2206      	movs	r2, #6
 8005e36:	4825      	ldr	r0, [pc, #148]	@ (8005ecc <_svfiprintf_r+0x1ec>)
 8005e38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e3c:	f7fe fc03 	bl	8004646 <memchr>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d036      	beq.n	8005eb2 <_svfiprintf_r+0x1d2>
 8005e44:	4b22      	ldr	r3, [pc, #136]	@ (8005ed0 <_svfiprintf_r+0x1f0>)
 8005e46:	bb1b      	cbnz	r3, 8005e90 <_svfiprintf_r+0x1b0>
 8005e48:	9b03      	ldr	r3, [sp, #12]
 8005e4a:	3307      	adds	r3, #7
 8005e4c:	f023 0307 	bic.w	r3, r3, #7
 8005e50:	3308      	adds	r3, #8
 8005e52:	9303      	str	r3, [sp, #12]
 8005e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e56:	4433      	add	r3, r6
 8005e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e5a:	e76a      	b.n	8005d32 <_svfiprintf_r+0x52>
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	2001      	movs	r0, #1
 8005e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e64:	e7a8      	b.n	8005db8 <_svfiprintf_r+0xd8>
 8005e66:	2300      	movs	r3, #0
 8005e68:	f04f 0c0a 	mov.w	ip, #10
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	3401      	adds	r4, #1
 8005e70:	9305      	str	r3, [sp, #20]
 8005e72:	4620      	mov	r0, r4
 8005e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e78:	3a30      	subs	r2, #48	@ 0x30
 8005e7a:	2a09      	cmp	r2, #9
 8005e7c:	d903      	bls.n	8005e86 <_svfiprintf_r+0x1a6>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0c6      	beq.n	8005e10 <_svfiprintf_r+0x130>
 8005e82:	9105      	str	r1, [sp, #20]
 8005e84:	e7c4      	b.n	8005e10 <_svfiprintf_r+0x130>
 8005e86:	4604      	mov	r4, r0
 8005e88:	2301      	movs	r3, #1
 8005e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e8e:	e7f0      	b.n	8005e72 <_svfiprintf_r+0x192>
 8005e90:	ab03      	add	r3, sp, #12
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	462a      	mov	r2, r5
 8005e96:	4638      	mov	r0, r7
 8005e98:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed4 <_svfiprintf_r+0x1f4>)
 8005e9a:	a904      	add	r1, sp, #16
 8005e9c:	f7fd fe5e 	bl	8003b5c <_printf_float>
 8005ea0:	1c42      	adds	r2, r0, #1
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	d1d6      	bne.n	8005e54 <_svfiprintf_r+0x174>
 8005ea6:	89ab      	ldrh	r3, [r5, #12]
 8005ea8:	065b      	lsls	r3, r3, #25
 8005eaa:	f53f af2d 	bmi.w	8005d08 <_svfiprintf_r+0x28>
 8005eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005eb0:	e72c      	b.n	8005d0c <_svfiprintf_r+0x2c>
 8005eb2:	ab03      	add	r3, sp, #12
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	462a      	mov	r2, r5
 8005eb8:	4638      	mov	r0, r7
 8005eba:	4b06      	ldr	r3, [pc, #24]	@ (8005ed4 <_svfiprintf_r+0x1f4>)
 8005ebc:	a904      	add	r1, sp, #16
 8005ebe:	f7fe f8eb 	bl	8004098 <_printf_i>
 8005ec2:	e7ed      	b.n	8005ea0 <_svfiprintf_r+0x1c0>
 8005ec4:	080068c0 	.word	0x080068c0
 8005ec8:	080068c6 	.word	0x080068c6
 8005ecc:	080068ca 	.word	0x080068ca
 8005ed0:	08003b5d 	.word	0x08003b5d
 8005ed4:	08005c29 	.word	0x08005c29

08005ed8 <__sflush_r>:
 8005ed8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	0716      	lsls	r6, r2, #28
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	d454      	bmi.n	8005f90 <__sflush_r+0xb8>
 8005ee6:	684b      	ldr	r3, [r1, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	dc02      	bgt.n	8005ef2 <__sflush_r+0x1a>
 8005eec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	dd48      	ble.n	8005f84 <__sflush_r+0xac>
 8005ef2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ef4:	2e00      	cmp	r6, #0
 8005ef6:	d045      	beq.n	8005f84 <__sflush_r+0xac>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005efe:	682f      	ldr	r7, [r5, #0]
 8005f00:	6a21      	ldr	r1, [r4, #32]
 8005f02:	602b      	str	r3, [r5, #0]
 8005f04:	d030      	beq.n	8005f68 <__sflush_r+0x90>
 8005f06:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	0759      	lsls	r1, r3, #29
 8005f0c:	d505      	bpl.n	8005f1a <__sflush_r+0x42>
 8005f0e:	6863      	ldr	r3, [r4, #4]
 8005f10:	1ad2      	subs	r2, r2, r3
 8005f12:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f14:	b10b      	cbz	r3, 8005f1a <__sflush_r+0x42>
 8005f16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f18:	1ad2      	subs	r2, r2, r3
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f20:	6a21      	ldr	r1, [r4, #32]
 8005f22:	47b0      	blx	r6
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	d106      	bne.n	8005f38 <__sflush_r+0x60>
 8005f2a:	6829      	ldr	r1, [r5, #0]
 8005f2c:	291d      	cmp	r1, #29
 8005f2e:	d82b      	bhi.n	8005f88 <__sflush_r+0xb0>
 8005f30:	4a28      	ldr	r2, [pc, #160]	@ (8005fd4 <__sflush_r+0xfc>)
 8005f32:	40ca      	lsrs	r2, r1
 8005f34:	07d6      	lsls	r6, r2, #31
 8005f36:	d527      	bpl.n	8005f88 <__sflush_r+0xb0>
 8005f38:	2200      	movs	r2, #0
 8005f3a:	6062      	str	r2, [r4, #4]
 8005f3c:	6922      	ldr	r2, [r4, #16]
 8005f3e:	04d9      	lsls	r1, r3, #19
 8005f40:	6022      	str	r2, [r4, #0]
 8005f42:	d504      	bpl.n	8005f4e <__sflush_r+0x76>
 8005f44:	1c42      	adds	r2, r0, #1
 8005f46:	d101      	bne.n	8005f4c <__sflush_r+0x74>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b903      	cbnz	r3, 8005f4e <__sflush_r+0x76>
 8005f4c:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f4e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f50:	602f      	str	r7, [r5, #0]
 8005f52:	b1b9      	cbz	r1, 8005f84 <__sflush_r+0xac>
 8005f54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f58:	4299      	cmp	r1, r3
 8005f5a:	d002      	beq.n	8005f62 <__sflush_r+0x8a>
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f7ff f9eb 	bl	8005338 <_free_r>
 8005f62:	2300      	movs	r3, #0
 8005f64:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f66:	e00d      	b.n	8005f84 <__sflush_r+0xac>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	47b0      	blx	r6
 8005f6e:	4602      	mov	r2, r0
 8005f70:	1c50      	adds	r0, r2, #1
 8005f72:	d1c9      	bne.n	8005f08 <__sflush_r+0x30>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0c6      	beq.n	8005f08 <__sflush_r+0x30>
 8005f7a:	2b1d      	cmp	r3, #29
 8005f7c:	d001      	beq.n	8005f82 <__sflush_r+0xaa>
 8005f7e:	2b16      	cmp	r3, #22
 8005f80:	d11d      	bne.n	8005fbe <__sflush_r+0xe6>
 8005f82:	602f      	str	r7, [r5, #0]
 8005f84:	2000      	movs	r0, #0
 8005f86:	e021      	b.n	8005fcc <__sflush_r+0xf4>
 8005f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f8c:	b21b      	sxth	r3, r3
 8005f8e:	e01a      	b.n	8005fc6 <__sflush_r+0xee>
 8005f90:	690f      	ldr	r7, [r1, #16]
 8005f92:	2f00      	cmp	r7, #0
 8005f94:	d0f6      	beq.n	8005f84 <__sflush_r+0xac>
 8005f96:	0793      	lsls	r3, r2, #30
 8005f98:	bf18      	it	ne
 8005f9a:	2300      	movne	r3, #0
 8005f9c:	680e      	ldr	r6, [r1, #0]
 8005f9e:	bf08      	it	eq
 8005fa0:	694b      	ldreq	r3, [r1, #20]
 8005fa2:	1bf6      	subs	r6, r6, r7
 8005fa4:	600f      	str	r7, [r1, #0]
 8005fa6:	608b      	str	r3, [r1, #8]
 8005fa8:	2e00      	cmp	r6, #0
 8005faa:	ddeb      	ble.n	8005f84 <__sflush_r+0xac>
 8005fac:	4633      	mov	r3, r6
 8005fae:	463a      	mov	r2, r7
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	6a21      	ldr	r1, [r4, #32]
 8005fb4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005fb8:	47e0      	blx	ip
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	dc07      	bgt.n	8005fce <__sflush_r+0xf6>
 8005fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fce:	4407      	add	r7, r0
 8005fd0:	1a36      	subs	r6, r6, r0
 8005fd2:	e7e9      	b.n	8005fa8 <__sflush_r+0xd0>
 8005fd4:	20400001 	.word	0x20400001

08005fd8 <_fflush_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	690b      	ldr	r3, [r1, #16]
 8005fdc:	4605      	mov	r5, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	b913      	cbnz	r3, 8005fe8 <_fflush_r+0x10>
 8005fe2:	2500      	movs	r5, #0
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	b118      	cbz	r0, 8005ff2 <_fflush_r+0x1a>
 8005fea:	6a03      	ldr	r3, [r0, #32]
 8005fec:	b90b      	cbnz	r3, 8005ff2 <_fflush_r+0x1a>
 8005fee:	f7fe f9fd 	bl	80043ec <__sinit>
 8005ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0f3      	beq.n	8005fe2 <_fflush_r+0xa>
 8005ffa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ffc:	07d0      	lsls	r0, r2, #31
 8005ffe:	d404      	bmi.n	800600a <_fflush_r+0x32>
 8006000:	0599      	lsls	r1, r3, #22
 8006002:	d402      	bmi.n	800600a <_fflush_r+0x32>
 8006004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006006:	f7fe fb1c 	bl	8004642 <__retarget_lock_acquire_recursive>
 800600a:	4628      	mov	r0, r5
 800600c:	4621      	mov	r1, r4
 800600e:	f7ff ff63 	bl	8005ed8 <__sflush_r>
 8006012:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006014:	4605      	mov	r5, r0
 8006016:	07da      	lsls	r2, r3, #31
 8006018:	d4e4      	bmi.n	8005fe4 <_fflush_r+0xc>
 800601a:	89a3      	ldrh	r3, [r4, #12]
 800601c:	059b      	lsls	r3, r3, #22
 800601e:	d4e1      	bmi.n	8005fe4 <_fflush_r+0xc>
 8006020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006022:	f7fe fb0f 	bl	8004644 <__retarget_lock_release_recursive>
 8006026:	e7dd      	b.n	8005fe4 <_fflush_r+0xc>

08006028 <memmove>:
 8006028:	4288      	cmp	r0, r1
 800602a:	b510      	push	{r4, lr}
 800602c:	eb01 0402 	add.w	r4, r1, r2
 8006030:	d902      	bls.n	8006038 <memmove+0x10>
 8006032:	4284      	cmp	r4, r0
 8006034:	4623      	mov	r3, r4
 8006036:	d807      	bhi.n	8006048 <memmove+0x20>
 8006038:	1e43      	subs	r3, r0, #1
 800603a:	42a1      	cmp	r1, r4
 800603c:	d008      	beq.n	8006050 <memmove+0x28>
 800603e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006042:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006046:	e7f8      	b.n	800603a <memmove+0x12>
 8006048:	4601      	mov	r1, r0
 800604a:	4402      	add	r2, r0
 800604c:	428a      	cmp	r2, r1
 800604e:	d100      	bne.n	8006052 <memmove+0x2a>
 8006050:	bd10      	pop	{r4, pc}
 8006052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800605a:	e7f7      	b.n	800604c <memmove+0x24>

0800605c <_sbrk_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	2300      	movs	r3, #0
 8006060:	4d05      	ldr	r5, [pc, #20]	@ (8006078 <_sbrk_r+0x1c>)
 8006062:	4604      	mov	r4, r0
 8006064:	4608      	mov	r0, r1
 8006066:	602b      	str	r3, [r5, #0]
 8006068:	f7fb fe34 	bl	8001cd4 <_sbrk>
 800606c:	1c43      	adds	r3, r0, #1
 800606e:	d102      	bne.n	8006076 <_sbrk_r+0x1a>
 8006070:	682b      	ldr	r3, [r5, #0]
 8006072:	b103      	cbz	r3, 8006076 <_sbrk_r+0x1a>
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	20000500 	.word	0x20000500

0800607c <__assert_func>:
 800607c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800607e:	4614      	mov	r4, r2
 8006080:	461a      	mov	r2, r3
 8006082:	4b09      	ldr	r3, [pc, #36]	@ (80060a8 <__assert_func+0x2c>)
 8006084:	4605      	mov	r5, r0
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68d8      	ldr	r0, [r3, #12]
 800608a:	b14c      	cbz	r4, 80060a0 <__assert_func+0x24>
 800608c:	4b07      	ldr	r3, [pc, #28]	@ (80060ac <__assert_func+0x30>)
 800608e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006092:	9100      	str	r1, [sp, #0]
 8006094:	462b      	mov	r3, r5
 8006096:	4906      	ldr	r1, [pc, #24]	@ (80060b0 <__assert_func+0x34>)
 8006098:	f000 f870 	bl	800617c <fiprintf>
 800609c:	f000 f880 	bl	80061a0 <abort>
 80060a0:	4b04      	ldr	r3, [pc, #16]	@ (80060b4 <__assert_func+0x38>)
 80060a2:	461c      	mov	r4, r3
 80060a4:	e7f3      	b.n	800608e <__assert_func+0x12>
 80060a6:	bf00      	nop
 80060a8:	20000018 	.word	0x20000018
 80060ac:	080068db 	.word	0x080068db
 80060b0:	080068e8 	.word	0x080068e8
 80060b4:	08006916 	.word	0x08006916

080060b8 <_calloc_r>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	fba1 5402 	umull	r5, r4, r1, r2
 80060be:	b934      	cbnz	r4, 80060ce <_calloc_r+0x16>
 80060c0:	4629      	mov	r1, r5
 80060c2:	f7ff f9ab 	bl	800541c <_malloc_r>
 80060c6:	4606      	mov	r6, r0
 80060c8:	b928      	cbnz	r0, 80060d6 <_calloc_r+0x1e>
 80060ca:	4630      	mov	r0, r6
 80060cc:	bd70      	pop	{r4, r5, r6, pc}
 80060ce:	220c      	movs	r2, #12
 80060d0:	2600      	movs	r6, #0
 80060d2:	6002      	str	r2, [r0, #0]
 80060d4:	e7f9      	b.n	80060ca <_calloc_r+0x12>
 80060d6:	462a      	mov	r2, r5
 80060d8:	4621      	mov	r1, r4
 80060da:	f7fe fa22 	bl	8004522 <memset>
 80060de:	e7f4      	b.n	80060ca <_calloc_r+0x12>

080060e0 <__ascii_mbtowc>:
 80060e0:	b082      	sub	sp, #8
 80060e2:	b901      	cbnz	r1, 80060e6 <__ascii_mbtowc+0x6>
 80060e4:	a901      	add	r1, sp, #4
 80060e6:	b142      	cbz	r2, 80060fa <__ascii_mbtowc+0x1a>
 80060e8:	b14b      	cbz	r3, 80060fe <__ascii_mbtowc+0x1e>
 80060ea:	7813      	ldrb	r3, [r2, #0]
 80060ec:	600b      	str	r3, [r1, #0]
 80060ee:	7812      	ldrb	r2, [r2, #0]
 80060f0:	1e10      	subs	r0, r2, #0
 80060f2:	bf18      	it	ne
 80060f4:	2001      	movne	r0, #1
 80060f6:	b002      	add	sp, #8
 80060f8:	4770      	bx	lr
 80060fa:	4610      	mov	r0, r2
 80060fc:	e7fb      	b.n	80060f6 <__ascii_mbtowc+0x16>
 80060fe:	f06f 0001 	mvn.w	r0, #1
 8006102:	e7f8      	b.n	80060f6 <__ascii_mbtowc+0x16>

08006104 <_realloc_r>:
 8006104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006108:	4607      	mov	r7, r0
 800610a:	4614      	mov	r4, r2
 800610c:	460d      	mov	r5, r1
 800610e:	b921      	cbnz	r1, 800611a <_realloc_r+0x16>
 8006110:	4611      	mov	r1, r2
 8006112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006116:	f7ff b981 	b.w	800541c <_malloc_r>
 800611a:	b92a      	cbnz	r2, 8006128 <_realloc_r+0x24>
 800611c:	f7ff f90c 	bl	8005338 <_free_r>
 8006120:	4625      	mov	r5, r4
 8006122:	4628      	mov	r0, r5
 8006124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006128:	f000 f841 	bl	80061ae <_malloc_usable_size_r>
 800612c:	4284      	cmp	r4, r0
 800612e:	4606      	mov	r6, r0
 8006130:	d802      	bhi.n	8006138 <_realloc_r+0x34>
 8006132:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006136:	d8f4      	bhi.n	8006122 <_realloc_r+0x1e>
 8006138:	4621      	mov	r1, r4
 800613a:	4638      	mov	r0, r7
 800613c:	f7ff f96e 	bl	800541c <_malloc_r>
 8006140:	4680      	mov	r8, r0
 8006142:	b908      	cbnz	r0, 8006148 <_realloc_r+0x44>
 8006144:	4645      	mov	r5, r8
 8006146:	e7ec      	b.n	8006122 <_realloc_r+0x1e>
 8006148:	42b4      	cmp	r4, r6
 800614a:	4622      	mov	r2, r4
 800614c:	4629      	mov	r1, r5
 800614e:	bf28      	it	cs
 8006150:	4632      	movcs	r2, r6
 8006152:	f7fe fa86 	bl	8004662 <memcpy>
 8006156:	4629      	mov	r1, r5
 8006158:	4638      	mov	r0, r7
 800615a:	f7ff f8ed 	bl	8005338 <_free_r>
 800615e:	e7f1      	b.n	8006144 <_realloc_r+0x40>

08006160 <__ascii_wctomb>:
 8006160:	4603      	mov	r3, r0
 8006162:	4608      	mov	r0, r1
 8006164:	b141      	cbz	r1, 8006178 <__ascii_wctomb+0x18>
 8006166:	2aff      	cmp	r2, #255	@ 0xff
 8006168:	d904      	bls.n	8006174 <__ascii_wctomb+0x14>
 800616a:	228a      	movs	r2, #138	@ 0x8a
 800616c:	f04f 30ff 	mov.w	r0, #4294967295
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	4770      	bx	lr
 8006174:	2001      	movs	r0, #1
 8006176:	700a      	strb	r2, [r1, #0]
 8006178:	4770      	bx	lr
	...

0800617c <fiprintf>:
 800617c:	b40e      	push	{r1, r2, r3}
 800617e:	b503      	push	{r0, r1, lr}
 8006180:	4601      	mov	r1, r0
 8006182:	ab03      	add	r3, sp, #12
 8006184:	4805      	ldr	r0, [pc, #20]	@ (800619c <fiprintf+0x20>)
 8006186:	f853 2b04 	ldr.w	r2, [r3], #4
 800618a:	6800      	ldr	r0, [r0, #0]
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	f000 f83d 	bl	800620c <_vfiprintf_r>
 8006192:	b002      	add	sp, #8
 8006194:	f85d eb04 	ldr.w	lr, [sp], #4
 8006198:	b003      	add	sp, #12
 800619a:	4770      	bx	lr
 800619c:	20000018 	.word	0x20000018

080061a0 <abort>:
 80061a0:	2006      	movs	r0, #6
 80061a2:	b508      	push	{r3, lr}
 80061a4:	f000 fa06 	bl	80065b4 <raise>
 80061a8:	2001      	movs	r0, #1
 80061aa:	f7fb fd1e 	bl	8001bea <_exit>

080061ae <_malloc_usable_size_r>:
 80061ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061b2:	1f18      	subs	r0, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bfbc      	itt	lt
 80061b8:	580b      	ldrlt	r3, [r1, r0]
 80061ba:	18c0      	addlt	r0, r0, r3
 80061bc:	4770      	bx	lr

080061be <__sfputc_r>:
 80061be:	6893      	ldr	r3, [r2, #8]
 80061c0:	b410      	push	{r4}
 80061c2:	3b01      	subs	r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	6093      	str	r3, [r2, #8]
 80061c8:	da07      	bge.n	80061da <__sfputc_r+0x1c>
 80061ca:	6994      	ldr	r4, [r2, #24]
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	db01      	blt.n	80061d4 <__sfputc_r+0x16>
 80061d0:	290a      	cmp	r1, #10
 80061d2:	d102      	bne.n	80061da <__sfputc_r+0x1c>
 80061d4:	bc10      	pop	{r4}
 80061d6:	f000 b931 	b.w	800643c <__swbuf_r>
 80061da:	6813      	ldr	r3, [r2, #0]
 80061dc:	1c58      	adds	r0, r3, #1
 80061de:	6010      	str	r0, [r2, #0]
 80061e0:	7019      	strb	r1, [r3, #0]
 80061e2:	4608      	mov	r0, r1
 80061e4:	bc10      	pop	{r4}
 80061e6:	4770      	bx	lr

080061e8 <__sfputs_r>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	4606      	mov	r6, r0
 80061ec:	460f      	mov	r7, r1
 80061ee:	4614      	mov	r4, r2
 80061f0:	18d5      	adds	r5, r2, r3
 80061f2:	42ac      	cmp	r4, r5
 80061f4:	d101      	bne.n	80061fa <__sfputs_r+0x12>
 80061f6:	2000      	movs	r0, #0
 80061f8:	e007      	b.n	800620a <__sfputs_r+0x22>
 80061fa:	463a      	mov	r2, r7
 80061fc:	4630      	mov	r0, r6
 80061fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006202:	f7ff ffdc 	bl	80061be <__sfputc_r>
 8006206:	1c43      	adds	r3, r0, #1
 8006208:	d1f3      	bne.n	80061f2 <__sfputs_r+0xa>
 800620a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800620c <_vfiprintf_r>:
 800620c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006210:	460d      	mov	r5, r1
 8006212:	4614      	mov	r4, r2
 8006214:	4698      	mov	r8, r3
 8006216:	4606      	mov	r6, r0
 8006218:	b09d      	sub	sp, #116	@ 0x74
 800621a:	b118      	cbz	r0, 8006224 <_vfiprintf_r+0x18>
 800621c:	6a03      	ldr	r3, [r0, #32]
 800621e:	b90b      	cbnz	r3, 8006224 <_vfiprintf_r+0x18>
 8006220:	f7fe f8e4 	bl	80043ec <__sinit>
 8006224:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006226:	07d9      	lsls	r1, r3, #31
 8006228:	d405      	bmi.n	8006236 <_vfiprintf_r+0x2a>
 800622a:	89ab      	ldrh	r3, [r5, #12]
 800622c:	059a      	lsls	r2, r3, #22
 800622e:	d402      	bmi.n	8006236 <_vfiprintf_r+0x2a>
 8006230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006232:	f7fe fa06 	bl	8004642 <__retarget_lock_acquire_recursive>
 8006236:	89ab      	ldrh	r3, [r5, #12]
 8006238:	071b      	lsls	r3, r3, #28
 800623a:	d501      	bpl.n	8006240 <_vfiprintf_r+0x34>
 800623c:	692b      	ldr	r3, [r5, #16]
 800623e:	b99b      	cbnz	r3, 8006268 <_vfiprintf_r+0x5c>
 8006240:	4629      	mov	r1, r5
 8006242:	4630      	mov	r0, r6
 8006244:	f000 f938 	bl	80064b8 <__swsetup_r>
 8006248:	b170      	cbz	r0, 8006268 <_vfiprintf_r+0x5c>
 800624a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800624c:	07dc      	lsls	r4, r3, #31
 800624e:	d504      	bpl.n	800625a <_vfiprintf_r+0x4e>
 8006250:	f04f 30ff 	mov.w	r0, #4294967295
 8006254:	b01d      	add	sp, #116	@ 0x74
 8006256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625a:	89ab      	ldrh	r3, [r5, #12]
 800625c:	0598      	lsls	r0, r3, #22
 800625e:	d4f7      	bmi.n	8006250 <_vfiprintf_r+0x44>
 8006260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006262:	f7fe f9ef 	bl	8004644 <__retarget_lock_release_recursive>
 8006266:	e7f3      	b.n	8006250 <_vfiprintf_r+0x44>
 8006268:	2300      	movs	r3, #0
 800626a:	9309      	str	r3, [sp, #36]	@ 0x24
 800626c:	2320      	movs	r3, #32
 800626e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006272:	2330      	movs	r3, #48	@ 0x30
 8006274:	f04f 0901 	mov.w	r9, #1
 8006278:	f8cd 800c 	str.w	r8, [sp, #12]
 800627c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006428 <_vfiprintf_r+0x21c>
 8006280:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006284:	4623      	mov	r3, r4
 8006286:	469a      	mov	sl, r3
 8006288:	f813 2b01 	ldrb.w	r2, [r3], #1
 800628c:	b10a      	cbz	r2, 8006292 <_vfiprintf_r+0x86>
 800628e:	2a25      	cmp	r2, #37	@ 0x25
 8006290:	d1f9      	bne.n	8006286 <_vfiprintf_r+0x7a>
 8006292:	ebba 0b04 	subs.w	fp, sl, r4
 8006296:	d00b      	beq.n	80062b0 <_vfiprintf_r+0xa4>
 8006298:	465b      	mov	r3, fp
 800629a:	4622      	mov	r2, r4
 800629c:	4629      	mov	r1, r5
 800629e:	4630      	mov	r0, r6
 80062a0:	f7ff ffa2 	bl	80061e8 <__sfputs_r>
 80062a4:	3001      	adds	r0, #1
 80062a6:	f000 80a7 	beq.w	80063f8 <_vfiprintf_r+0x1ec>
 80062aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062ac:	445a      	add	r2, fp
 80062ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80062b0:	f89a 3000 	ldrb.w	r3, [sl]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 809f 	beq.w	80063f8 <_vfiprintf_r+0x1ec>
 80062ba:	2300      	movs	r3, #0
 80062bc:	f04f 32ff 	mov.w	r2, #4294967295
 80062c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062c4:	f10a 0a01 	add.w	sl, sl, #1
 80062c8:	9304      	str	r3, [sp, #16]
 80062ca:	9307      	str	r3, [sp, #28]
 80062cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80062d2:	4654      	mov	r4, sl
 80062d4:	2205      	movs	r2, #5
 80062d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062da:	4853      	ldr	r0, [pc, #332]	@ (8006428 <_vfiprintf_r+0x21c>)
 80062dc:	f7fe f9b3 	bl	8004646 <memchr>
 80062e0:	9a04      	ldr	r2, [sp, #16]
 80062e2:	b9d8      	cbnz	r0, 800631c <_vfiprintf_r+0x110>
 80062e4:	06d1      	lsls	r1, r2, #27
 80062e6:	bf44      	itt	mi
 80062e8:	2320      	movmi	r3, #32
 80062ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062ee:	0713      	lsls	r3, r2, #28
 80062f0:	bf44      	itt	mi
 80062f2:	232b      	movmi	r3, #43	@ 0x2b
 80062f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062f8:	f89a 3000 	ldrb.w	r3, [sl]
 80062fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80062fe:	d015      	beq.n	800632c <_vfiprintf_r+0x120>
 8006300:	4654      	mov	r4, sl
 8006302:	2000      	movs	r0, #0
 8006304:	f04f 0c0a 	mov.w	ip, #10
 8006308:	9a07      	ldr	r2, [sp, #28]
 800630a:	4621      	mov	r1, r4
 800630c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006310:	3b30      	subs	r3, #48	@ 0x30
 8006312:	2b09      	cmp	r3, #9
 8006314:	d94b      	bls.n	80063ae <_vfiprintf_r+0x1a2>
 8006316:	b1b0      	cbz	r0, 8006346 <_vfiprintf_r+0x13a>
 8006318:	9207      	str	r2, [sp, #28]
 800631a:	e014      	b.n	8006346 <_vfiprintf_r+0x13a>
 800631c:	eba0 0308 	sub.w	r3, r0, r8
 8006320:	fa09 f303 	lsl.w	r3, r9, r3
 8006324:	4313      	orrs	r3, r2
 8006326:	46a2      	mov	sl, r4
 8006328:	9304      	str	r3, [sp, #16]
 800632a:	e7d2      	b.n	80062d2 <_vfiprintf_r+0xc6>
 800632c:	9b03      	ldr	r3, [sp, #12]
 800632e:	1d19      	adds	r1, r3, #4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	9103      	str	r1, [sp, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	bfbb      	ittet	lt
 8006338:	425b      	neglt	r3, r3
 800633a:	f042 0202 	orrlt.w	r2, r2, #2
 800633e:	9307      	strge	r3, [sp, #28]
 8006340:	9307      	strlt	r3, [sp, #28]
 8006342:	bfb8      	it	lt
 8006344:	9204      	strlt	r2, [sp, #16]
 8006346:	7823      	ldrb	r3, [r4, #0]
 8006348:	2b2e      	cmp	r3, #46	@ 0x2e
 800634a:	d10a      	bne.n	8006362 <_vfiprintf_r+0x156>
 800634c:	7863      	ldrb	r3, [r4, #1]
 800634e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006350:	d132      	bne.n	80063b8 <_vfiprintf_r+0x1ac>
 8006352:	9b03      	ldr	r3, [sp, #12]
 8006354:	3402      	adds	r4, #2
 8006356:	1d1a      	adds	r2, r3, #4
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	9203      	str	r2, [sp, #12]
 800635c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006360:	9305      	str	r3, [sp, #20]
 8006362:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800642c <_vfiprintf_r+0x220>
 8006366:	2203      	movs	r2, #3
 8006368:	4650      	mov	r0, sl
 800636a:	7821      	ldrb	r1, [r4, #0]
 800636c:	f7fe f96b 	bl	8004646 <memchr>
 8006370:	b138      	cbz	r0, 8006382 <_vfiprintf_r+0x176>
 8006372:	2240      	movs	r2, #64	@ 0x40
 8006374:	9b04      	ldr	r3, [sp, #16]
 8006376:	eba0 000a 	sub.w	r0, r0, sl
 800637a:	4082      	lsls	r2, r0
 800637c:	4313      	orrs	r3, r2
 800637e:	3401      	adds	r4, #1
 8006380:	9304      	str	r3, [sp, #16]
 8006382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006386:	2206      	movs	r2, #6
 8006388:	4829      	ldr	r0, [pc, #164]	@ (8006430 <_vfiprintf_r+0x224>)
 800638a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800638e:	f7fe f95a 	bl	8004646 <memchr>
 8006392:	2800      	cmp	r0, #0
 8006394:	d03f      	beq.n	8006416 <_vfiprintf_r+0x20a>
 8006396:	4b27      	ldr	r3, [pc, #156]	@ (8006434 <_vfiprintf_r+0x228>)
 8006398:	bb1b      	cbnz	r3, 80063e2 <_vfiprintf_r+0x1d6>
 800639a:	9b03      	ldr	r3, [sp, #12]
 800639c:	3307      	adds	r3, #7
 800639e:	f023 0307 	bic.w	r3, r3, #7
 80063a2:	3308      	adds	r3, #8
 80063a4:	9303      	str	r3, [sp, #12]
 80063a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a8:	443b      	add	r3, r7
 80063aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ac:	e76a      	b.n	8006284 <_vfiprintf_r+0x78>
 80063ae:	460c      	mov	r4, r1
 80063b0:	2001      	movs	r0, #1
 80063b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80063b6:	e7a8      	b.n	800630a <_vfiprintf_r+0xfe>
 80063b8:	2300      	movs	r3, #0
 80063ba:	f04f 0c0a 	mov.w	ip, #10
 80063be:	4619      	mov	r1, r3
 80063c0:	3401      	adds	r4, #1
 80063c2:	9305      	str	r3, [sp, #20]
 80063c4:	4620      	mov	r0, r4
 80063c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063ca:	3a30      	subs	r2, #48	@ 0x30
 80063cc:	2a09      	cmp	r2, #9
 80063ce:	d903      	bls.n	80063d8 <_vfiprintf_r+0x1cc>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0c6      	beq.n	8006362 <_vfiprintf_r+0x156>
 80063d4:	9105      	str	r1, [sp, #20]
 80063d6:	e7c4      	b.n	8006362 <_vfiprintf_r+0x156>
 80063d8:	4604      	mov	r4, r0
 80063da:	2301      	movs	r3, #1
 80063dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80063e0:	e7f0      	b.n	80063c4 <_vfiprintf_r+0x1b8>
 80063e2:	ab03      	add	r3, sp, #12
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	462a      	mov	r2, r5
 80063e8:	4630      	mov	r0, r6
 80063ea:	4b13      	ldr	r3, [pc, #76]	@ (8006438 <_vfiprintf_r+0x22c>)
 80063ec:	a904      	add	r1, sp, #16
 80063ee:	f7fd fbb5 	bl	8003b5c <_printf_float>
 80063f2:	4607      	mov	r7, r0
 80063f4:	1c78      	adds	r0, r7, #1
 80063f6:	d1d6      	bne.n	80063a6 <_vfiprintf_r+0x19a>
 80063f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063fa:	07d9      	lsls	r1, r3, #31
 80063fc:	d405      	bmi.n	800640a <_vfiprintf_r+0x1fe>
 80063fe:	89ab      	ldrh	r3, [r5, #12]
 8006400:	059a      	lsls	r2, r3, #22
 8006402:	d402      	bmi.n	800640a <_vfiprintf_r+0x1fe>
 8006404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006406:	f7fe f91d 	bl	8004644 <__retarget_lock_release_recursive>
 800640a:	89ab      	ldrh	r3, [r5, #12]
 800640c:	065b      	lsls	r3, r3, #25
 800640e:	f53f af1f 	bmi.w	8006250 <_vfiprintf_r+0x44>
 8006412:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006414:	e71e      	b.n	8006254 <_vfiprintf_r+0x48>
 8006416:	ab03      	add	r3, sp, #12
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	462a      	mov	r2, r5
 800641c:	4630      	mov	r0, r6
 800641e:	4b06      	ldr	r3, [pc, #24]	@ (8006438 <_vfiprintf_r+0x22c>)
 8006420:	a904      	add	r1, sp, #16
 8006422:	f7fd fe39 	bl	8004098 <_printf_i>
 8006426:	e7e4      	b.n	80063f2 <_vfiprintf_r+0x1e6>
 8006428:	080068c0 	.word	0x080068c0
 800642c:	080068c6 	.word	0x080068c6
 8006430:	080068ca 	.word	0x080068ca
 8006434:	08003b5d 	.word	0x08003b5d
 8006438:	080061e9 	.word	0x080061e9

0800643c <__swbuf_r>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	460e      	mov	r6, r1
 8006440:	4614      	mov	r4, r2
 8006442:	4605      	mov	r5, r0
 8006444:	b118      	cbz	r0, 800644e <__swbuf_r+0x12>
 8006446:	6a03      	ldr	r3, [r0, #32]
 8006448:	b90b      	cbnz	r3, 800644e <__swbuf_r+0x12>
 800644a:	f7fd ffcf 	bl	80043ec <__sinit>
 800644e:	69a3      	ldr	r3, [r4, #24]
 8006450:	60a3      	str	r3, [r4, #8]
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	071a      	lsls	r2, r3, #28
 8006456:	d501      	bpl.n	800645c <__swbuf_r+0x20>
 8006458:	6923      	ldr	r3, [r4, #16]
 800645a:	b943      	cbnz	r3, 800646e <__swbuf_r+0x32>
 800645c:	4621      	mov	r1, r4
 800645e:	4628      	mov	r0, r5
 8006460:	f000 f82a 	bl	80064b8 <__swsetup_r>
 8006464:	b118      	cbz	r0, 800646e <__swbuf_r+0x32>
 8006466:	f04f 37ff 	mov.w	r7, #4294967295
 800646a:	4638      	mov	r0, r7
 800646c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	6922      	ldr	r2, [r4, #16]
 8006472:	b2f6      	uxtb	r6, r6
 8006474:	1a98      	subs	r0, r3, r2
 8006476:	6963      	ldr	r3, [r4, #20]
 8006478:	4637      	mov	r7, r6
 800647a:	4283      	cmp	r3, r0
 800647c:	dc05      	bgt.n	800648a <__swbuf_r+0x4e>
 800647e:	4621      	mov	r1, r4
 8006480:	4628      	mov	r0, r5
 8006482:	f7ff fda9 	bl	8005fd8 <_fflush_r>
 8006486:	2800      	cmp	r0, #0
 8006488:	d1ed      	bne.n	8006466 <__swbuf_r+0x2a>
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	3b01      	subs	r3, #1
 800648e:	60a3      	str	r3, [r4, #8]
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	6022      	str	r2, [r4, #0]
 8006496:	701e      	strb	r6, [r3, #0]
 8006498:	6962      	ldr	r2, [r4, #20]
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	429a      	cmp	r2, r3
 800649e:	d004      	beq.n	80064aa <__swbuf_r+0x6e>
 80064a0:	89a3      	ldrh	r3, [r4, #12]
 80064a2:	07db      	lsls	r3, r3, #31
 80064a4:	d5e1      	bpl.n	800646a <__swbuf_r+0x2e>
 80064a6:	2e0a      	cmp	r6, #10
 80064a8:	d1df      	bne.n	800646a <__swbuf_r+0x2e>
 80064aa:	4621      	mov	r1, r4
 80064ac:	4628      	mov	r0, r5
 80064ae:	f7ff fd93 	bl	8005fd8 <_fflush_r>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d0d9      	beq.n	800646a <__swbuf_r+0x2e>
 80064b6:	e7d6      	b.n	8006466 <__swbuf_r+0x2a>

080064b8 <__swsetup_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4b29      	ldr	r3, [pc, #164]	@ (8006560 <__swsetup_r+0xa8>)
 80064bc:	4605      	mov	r5, r0
 80064be:	6818      	ldr	r0, [r3, #0]
 80064c0:	460c      	mov	r4, r1
 80064c2:	b118      	cbz	r0, 80064cc <__swsetup_r+0x14>
 80064c4:	6a03      	ldr	r3, [r0, #32]
 80064c6:	b90b      	cbnz	r3, 80064cc <__swsetup_r+0x14>
 80064c8:	f7fd ff90 	bl	80043ec <__sinit>
 80064cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064d0:	0719      	lsls	r1, r3, #28
 80064d2:	d422      	bmi.n	800651a <__swsetup_r+0x62>
 80064d4:	06da      	lsls	r2, r3, #27
 80064d6:	d407      	bmi.n	80064e8 <__swsetup_r+0x30>
 80064d8:	2209      	movs	r2, #9
 80064da:	602a      	str	r2, [r5, #0]
 80064dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064e0:	f04f 30ff 	mov.w	r0, #4294967295
 80064e4:	81a3      	strh	r3, [r4, #12]
 80064e6:	e033      	b.n	8006550 <__swsetup_r+0x98>
 80064e8:	0758      	lsls	r0, r3, #29
 80064ea:	d512      	bpl.n	8006512 <__swsetup_r+0x5a>
 80064ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064ee:	b141      	cbz	r1, 8006502 <__swsetup_r+0x4a>
 80064f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064f4:	4299      	cmp	r1, r3
 80064f6:	d002      	beq.n	80064fe <__swsetup_r+0x46>
 80064f8:	4628      	mov	r0, r5
 80064fa:	f7fe ff1d 	bl	8005338 <_free_r>
 80064fe:	2300      	movs	r3, #0
 8006500:	6363      	str	r3, [r4, #52]	@ 0x34
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006508:	81a3      	strh	r3, [r4, #12]
 800650a:	2300      	movs	r3, #0
 800650c:	6063      	str	r3, [r4, #4]
 800650e:	6923      	ldr	r3, [r4, #16]
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	f043 0308 	orr.w	r3, r3, #8
 8006518:	81a3      	strh	r3, [r4, #12]
 800651a:	6923      	ldr	r3, [r4, #16]
 800651c:	b94b      	cbnz	r3, 8006532 <__swsetup_r+0x7a>
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006528:	d003      	beq.n	8006532 <__swsetup_r+0x7a>
 800652a:	4621      	mov	r1, r4
 800652c:	4628      	mov	r0, r5
 800652e:	f000 f882 	bl	8006636 <__smakebuf_r>
 8006532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006536:	f013 0201 	ands.w	r2, r3, #1
 800653a:	d00a      	beq.n	8006552 <__swsetup_r+0x9a>
 800653c:	2200      	movs	r2, #0
 800653e:	60a2      	str	r2, [r4, #8]
 8006540:	6962      	ldr	r2, [r4, #20]
 8006542:	4252      	negs	r2, r2
 8006544:	61a2      	str	r2, [r4, #24]
 8006546:	6922      	ldr	r2, [r4, #16]
 8006548:	b942      	cbnz	r2, 800655c <__swsetup_r+0xa4>
 800654a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800654e:	d1c5      	bne.n	80064dc <__swsetup_r+0x24>
 8006550:	bd38      	pop	{r3, r4, r5, pc}
 8006552:	0799      	lsls	r1, r3, #30
 8006554:	bf58      	it	pl
 8006556:	6962      	ldrpl	r2, [r4, #20]
 8006558:	60a2      	str	r2, [r4, #8]
 800655a:	e7f4      	b.n	8006546 <__swsetup_r+0x8e>
 800655c:	2000      	movs	r0, #0
 800655e:	e7f7      	b.n	8006550 <__swsetup_r+0x98>
 8006560:	20000018 	.word	0x20000018

08006564 <_raise_r>:
 8006564:	291f      	cmp	r1, #31
 8006566:	b538      	push	{r3, r4, r5, lr}
 8006568:	4605      	mov	r5, r0
 800656a:	460c      	mov	r4, r1
 800656c:	d904      	bls.n	8006578 <_raise_r+0x14>
 800656e:	2316      	movs	r3, #22
 8006570:	6003      	str	r3, [r0, #0]
 8006572:	f04f 30ff 	mov.w	r0, #4294967295
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800657a:	b112      	cbz	r2, 8006582 <_raise_r+0x1e>
 800657c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006580:	b94b      	cbnz	r3, 8006596 <_raise_r+0x32>
 8006582:	4628      	mov	r0, r5
 8006584:	f000 f830 	bl	80065e8 <_getpid_r>
 8006588:	4622      	mov	r2, r4
 800658a:	4601      	mov	r1, r0
 800658c:	4628      	mov	r0, r5
 800658e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006592:	f000 b817 	b.w	80065c4 <_kill_r>
 8006596:	2b01      	cmp	r3, #1
 8006598:	d00a      	beq.n	80065b0 <_raise_r+0x4c>
 800659a:	1c59      	adds	r1, r3, #1
 800659c:	d103      	bne.n	80065a6 <_raise_r+0x42>
 800659e:	2316      	movs	r3, #22
 80065a0:	6003      	str	r3, [r0, #0]
 80065a2:	2001      	movs	r0, #1
 80065a4:	e7e7      	b.n	8006576 <_raise_r+0x12>
 80065a6:	2100      	movs	r1, #0
 80065a8:	4620      	mov	r0, r4
 80065aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065ae:	4798      	blx	r3
 80065b0:	2000      	movs	r0, #0
 80065b2:	e7e0      	b.n	8006576 <_raise_r+0x12>

080065b4 <raise>:
 80065b4:	4b02      	ldr	r3, [pc, #8]	@ (80065c0 <raise+0xc>)
 80065b6:	4601      	mov	r1, r0
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	f7ff bfd3 	b.w	8006564 <_raise_r>
 80065be:	bf00      	nop
 80065c0:	20000018 	.word	0x20000018

080065c4 <_kill_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	2300      	movs	r3, #0
 80065c8:	4d06      	ldr	r5, [pc, #24]	@ (80065e4 <_kill_r+0x20>)
 80065ca:	4604      	mov	r4, r0
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	602b      	str	r3, [r5, #0]
 80065d2:	f7fb fafa 	bl	8001bca <_kill>
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	d102      	bne.n	80065e0 <_kill_r+0x1c>
 80065da:	682b      	ldr	r3, [r5, #0]
 80065dc:	b103      	cbz	r3, 80065e0 <_kill_r+0x1c>
 80065de:	6023      	str	r3, [r4, #0]
 80065e0:	bd38      	pop	{r3, r4, r5, pc}
 80065e2:	bf00      	nop
 80065e4:	20000500 	.word	0x20000500

080065e8 <_getpid_r>:
 80065e8:	f7fb bae8 	b.w	8001bbc <_getpid>

080065ec <__swhatbuf_r>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	460c      	mov	r4, r1
 80065f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f4:	4615      	mov	r5, r2
 80065f6:	2900      	cmp	r1, #0
 80065f8:	461e      	mov	r6, r3
 80065fa:	b096      	sub	sp, #88	@ 0x58
 80065fc:	da0c      	bge.n	8006618 <__swhatbuf_r+0x2c>
 80065fe:	89a3      	ldrh	r3, [r4, #12]
 8006600:	2100      	movs	r1, #0
 8006602:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006606:	bf14      	ite	ne
 8006608:	2340      	movne	r3, #64	@ 0x40
 800660a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800660e:	2000      	movs	r0, #0
 8006610:	6031      	str	r1, [r6, #0]
 8006612:	602b      	str	r3, [r5, #0]
 8006614:	b016      	add	sp, #88	@ 0x58
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	466a      	mov	r2, sp
 800661a:	f000 f849 	bl	80066b0 <_fstat_r>
 800661e:	2800      	cmp	r0, #0
 8006620:	dbed      	blt.n	80065fe <__swhatbuf_r+0x12>
 8006622:	9901      	ldr	r1, [sp, #4]
 8006624:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006628:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800662c:	4259      	negs	r1, r3
 800662e:	4159      	adcs	r1, r3
 8006630:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006634:	e7eb      	b.n	800660e <__swhatbuf_r+0x22>

08006636 <__smakebuf_r>:
 8006636:	898b      	ldrh	r3, [r1, #12]
 8006638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800663a:	079d      	lsls	r5, r3, #30
 800663c:	4606      	mov	r6, r0
 800663e:	460c      	mov	r4, r1
 8006640:	d507      	bpl.n	8006652 <__smakebuf_r+0x1c>
 8006642:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006646:	6023      	str	r3, [r4, #0]
 8006648:	6123      	str	r3, [r4, #16]
 800664a:	2301      	movs	r3, #1
 800664c:	6163      	str	r3, [r4, #20]
 800664e:	b003      	add	sp, #12
 8006650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006652:	466a      	mov	r2, sp
 8006654:	ab01      	add	r3, sp, #4
 8006656:	f7ff ffc9 	bl	80065ec <__swhatbuf_r>
 800665a:	9f00      	ldr	r7, [sp, #0]
 800665c:	4605      	mov	r5, r0
 800665e:	4639      	mov	r1, r7
 8006660:	4630      	mov	r0, r6
 8006662:	f7fe fedb 	bl	800541c <_malloc_r>
 8006666:	b948      	cbnz	r0, 800667c <__smakebuf_r+0x46>
 8006668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800666c:	059a      	lsls	r2, r3, #22
 800666e:	d4ee      	bmi.n	800664e <__smakebuf_r+0x18>
 8006670:	f023 0303 	bic.w	r3, r3, #3
 8006674:	f043 0302 	orr.w	r3, r3, #2
 8006678:	81a3      	strh	r3, [r4, #12]
 800667a:	e7e2      	b.n	8006642 <__smakebuf_r+0xc>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006686:	81a3      	strh	r3, [r4, #12]
 8006688:	9b01      	ldr	r3, [sp, #4]
 800668a:	6020      	str	r0, [r4, #0]
 800668c:	b15b      	cbz	r3, 80066a6 <__smakebuf_r+0x70>
 800668e:	4630      	mov	r0, r6
 8006690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006694:	f000 f81e 	bl	80066d4 <_isatty_r>
 8006698:	b128      	cbz	r0, 80066a6 <__smakebuf_r+0x70>
 800669a:	89a3      	ldrh	r3, [r4, #12]
 800669c:	f023 0303 	bic.w	r3, r3, #3
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	81a3      	strh	r3, [r4, #12]
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	431d      	orrs	r5, r3
 80066aa:	81a5      	strh	r5, [r4, #12]
 80066ac:	e7cf      	b.n	800664e <__smakebuf_r+0x18>
	...

080066b0 <_fstat_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	2300      	movs	r3, #0
 80066b4:	4d06      	ldr	r5, [pc, #24]	@ (80066d0 <_fstat_r+0x20>)
 80066b6:	4604      	mov	r4, r0
 80066b8:	4608      	mov	r0, r1
 80066ba:	4611      	mov	r1, r2
 80066bc:	602b      	str	r3, [r5, #0]
 80066be:	f7fb fae3 	bl	8001c88 <_fstat>
 80066c2:	1c43      	adds	r3, r0, #1
 80066c4:	d102      	bne.n	80066cc <_fstat_r+0x1c>
 80066c6:	682b      	ldr	r3, [r5, #0]
 80066c8:	b103      	cbz	r3, 80066cc <_fstat_r+0x1c>
 80066ca:	6023      	str	r3, [r4, #0]
 80066cc:	bd38      	pop	{r3, r4, r5, pc}
 80066ce:	bf00      	nop
 80066d0:	20000500 	.word	0x20000500

080066d4 <_isatty_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	2300      	movs	r3, #0
 80066d8:	4d05      	ldr	r5, [pc, #20]	@ (80066f0 <_isatty_r+0x1c>)
 80066da:	4604      	mov	r4, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	602b      	str	r3, [r5, #0]
 80066e0:	f7fb fae1 	bl	8001ca6 <_isatty>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_isatty_r+0x1a>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_isatty_r+0x1a>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	20000500 	.word	0x20000500

080066f4 <_init>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr

08006700 <_fini>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	bf00      	nop
 8006704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006706:	bc08      	pop	{r3}
 8006708:	469e      	mov	lr, r3
 800670a:	4770      	bx	lr
