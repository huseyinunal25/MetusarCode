
SUT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000719c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  080072b0  080072b0  000082b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d4  080077d4  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080077d4  080077d4  000087d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077dc  080077dc  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077dc  080077dc  000087dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077e0  080077e0  000087e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080077e4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200001d4  080079b8  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  080079b8  000095b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e0c  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002380  00000000  00000000  0001a009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  0001c390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ddb  00000000  00000000  0001d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001906c  00000000  00000000  0001e2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b0d  00000000  00000000  00037357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009059d  00000000  00000000  0004ae64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db401  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d14  00000000  00000000  000db444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e1158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007294 	.word	0x08007294

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007294 	.word	0x08007294

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b0e0      	sub	sp, #384	@ 0x180
 8000f48:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 ff4d 	bl	8001de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f8e3 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f000 fa07 	bl	8001364 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f56:	f000 f925 	bl	80011a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f5a:	f000 f951 	bl	8001200 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f5e:	f000 f9d7 	bl	8001310 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000f62:	f000 f983 	bl	800126c <MX_TIM1_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f66:	b662      	cpsie	i
}
 8000f68:	bf00      	nop
  /* USER CODE BEGIN 2 */
  // Enable global interrupts
  __enable_irq();
  
  // Send ready message via UART1
  uint8_t ready_msg[] = "Telemetry Parser Ready - Using UART1 for both RX and TX\r\n";
 8000f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80010d8 <main+0x194>)
 8000f6c:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 8000f70:	461d      	mov	r5, r3
 8000f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f82:	c403      	stmia	r4!, {r0, r1}
 8000f84:	8022      	strh	r2, [r4, #0]
  HAL_UART_Transmit(&huart1, ready_msg, sizeof(ready_msg)-1, 100);
 8000f86:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8000f8a:	2364      	movs	r3, #100	@ 0x64
 8000f8c:	2239      	movs	r2, #57	@ 0x39
 8000f8e:	4853      	ldr	r0, [pc, #332]	@ (80010dc <main+0x198>)
 8000f90:	f002 fd0e 	bl	80039b0 <HAL_UART_Transmit>
  
  // Test the parsing function once to verify it works
  uint8_t test_msg[] = "Testing parser with sample data...\r\n";
 8000f94:	4b52      	ldr	r3, [pc, #328]	@ (80010e0 <main+0x19c>)
 8000f96:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 8000f9a:	461d      	mov	r5, r3
 8000f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fa8:	6020      	str	r0, [r4, #0]
 8000faa:	3404      	adds	r4, #4
 8000fac:	7021      	strb	r1, [r4, #0]
  HAL_UART_Transmit(&huart1, test_msg, sizeof(test_msg)-1, 100);
 8000fae:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000fb2:	2364      	movs	r3, #100	@ 0x64
 8000fb4:	2224      	movs	r2, #36	@ 0x24
 8000fb6:	4849      	ldr	r0, [pc, #292]	@ (80010dc <main+0x198>)
 8000fb8:	f002 fcfa 	bl	80039b0 <HAL_UART_Transmit>
  
  // Test with your sample data
  uint8_t test_packet[36] = {
 8000fbc:	4b49      	ldr	r3, [pc, #292]	@ (80010e4 <main+0x1a0>)
 8000fbe:	f107 04ec 	add.w	r4, r7, #236	@ 0xec
 8000fc2:	461d      	mov	r5, r3
 8000fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fcc:	682b      	ldr	r3, [r5, #0]
 8000fce:	6023      	str	r3, [r4, #0]
      0xAB, 0x44, 0x09, 0x61, 0x48, 0x44, 0x09, 0x61, 0x48, 0x40, 0x38, 0x51, 0xEC, 0x00, 0x00, 0x00,
      0x00, 0x40, 0xD0, 0xA3, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xE6, 0x66, 0x66, 0x00, 0x00, 0x00,
      0x00, 0xC7, 0x0D, 0x0A
  };
  ParseTelemetryPacket(test_packet);
 8000fd0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fa1d 	bl	8001414 <ParseTelemetryPacket>
  PrintTelemetryData();
 8000fda:	f000 fab9 	bl	8001550 <PrintTelemetryData>
  
  // Start interrupt-driven UART reception on UART1
  HAL_UART_Receive_IT(&huart1, &incoming_buffer[buffer_index], 1);
 8000fde:	4b42      	ldr	r3, [pc, #264]	@ (80010e8 <main+0x1a4>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b41      	ldr	r3, [pc, #260]	@ (80010ec <main+0x1a8>)
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4619      	mov	r1, r3
 8000fec:	483b      	ldr	r0, [pc, #236]	@ (80010dc <main+0x198>)
 8000fee:	f002 fd6a 	bl	8003ac6 <HAL_UART_Receive_IT>
  
  // Configure NVIC for TIM2 interrupt
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	201c      	movs	r0, #28
 8000ff8:	f001 f82f 	bl	800205a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ffc:	201c      	movs	r0, #28
 8000ffe:	f001 f848 	bl	8002092 <HAL_NVIC_EnableIRQ>
  
  // Configure NVIC for UART1 interrupt
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2101      	movs	r1, #1
 8001006:	2025      	movs	r0, #37	@ 0x25
 8001008:	f001 f827 	bl	800205a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800100c:	2025      	movs	r0, #37	@ 0x25
 800100e:	f001 f840 	bl	8002092 <HAL_NVIC_EnableIRQ>
  
  // Start timer interrupt (every 5ms for better performance)
  HAL_TIM_Base_Start_IT(&htim2);
 8001012:	4837      	ldr	r0, [pc, #220]	@ (80010f0 <main+0x1ac>)
 8001014:	f002 f8e8 	bl	80031e8 <HAL_TIM_Base_Start_IT>
  
  // Send timer started message
  uint8_t timer_msg[] = "Timer started - UART1 interrupt-driven reception enabled (5ms timer)\r\n";
 8001018:	4a36      	ldr	r2, [pc, #216]	@ (80010f4 <main+0x1b0>)
 800101a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800101e:	4611      	mov	r1, r2
 8001020:	2247      	movs	r2, #71	@ 0x47
 8001022:	4618      	mov	r0, r3
 8001024:	f004 f8ed 	bl	8005202 <memcpy>
  HAL_UART_Transmit(&huart1, timer_msg, sizeof(timer_msg)-1, 100);
 8001028:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800102c:	2364      	movs	r3, #100	@ 0x64
 800102e:	2246      	movs	r2, #70	@ 0x46
 8001030:	482a      	ldr	r0, [pc, #168]	@ (80010dc <main+0x198>)
 8001032:	f002 fcbd 	bl	80039b0 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Check if we have received data
    if (packet_received) {
 8001036:	4b30      	ldr	r3, [pc, #192]	@ (80010f8 <main+0x1b4>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d016      	beq.n	800106c <main+0x128>
      packet_received = 0;
 800103e:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <main+0x1b4>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
      
      // Send quick acknowledgment
      uint8_t ack_msg[] = "PKT\r\n";
 8001044:	4a2d      	ldr	r2, [pc, #180]	@ (80010fc <main+0x1b8>)
 8001046:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800104a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800104e:	6018      	str	r0, [r3, #0]
 8001050:	3304      	adds	r3, #4
 8001052:	8019      	strh	r1, [r3, #0]
      HAL_UART_Transmit(&huart1, ack_msg, sizeof(ack_msg)-1, 10);
 8001054:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8001058:	230a      	movs	r3, #10
 800105a:	2205      	movs	r2, #5
 800105c:	481f      	ldr	r0, [pc, #124]	@ (80010dc <main+0x198>)
 800105e:	f002 fca7 	bl	80039b0 <HAL_UART_Transmit>
      
      // Process the received packet
      ParseTelemetryPacket(rx_buffer);
 8001062:	4827      	ldr	r0, [pc, #156]	@ (8001100 <main+0x1bc>)
 8001064:	f000 f9d6 	bl	8001414 <ParseTelemetryPacket>
      PrintTelemetryData();
 8001068:	f000 fa72 	bl	8001550 <PrintTelemetryData>
    }
    
    // Print status every 5 seconds to show system is alive
    static uint32_t last_status = 0;
    if (HAL_GetTick() - last_status > 5000) {
 800106c:	f000 ff14 	bl	8001e98 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <main+0x1c0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800107c:	4293      	cmp	r3, r2
 800107e:	d9da      	bls.n	8001036 <main+0xf2>
      char status_msg[150];
      int len = sprintf(status_msg, "System running, timer ticks: %lu, packets received: %lu, rate: %.1f Hz\r\n", 
 8001080:	4b21      	ldr	r3, [pc, #132]	@ (8001108 <main+0x1c4>)
 8001082:	681c      	ldr	r4, [r3, #0]
 8001084:	4b21      	ldr	r3, [pc, #132]	@ (800110c <main+0x1c8>)
 8001086:	681d      	ldr	r5, [r3, #0]
                       timer_tick, packets_received_count, (float)packets_received_count / 5.0f);
 8001088:	4b20      	ldr	r3, [pc, #128]	@ (800110c <main+0x1c8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fdb1 	bl	8000bf4 <__aeabi_ui2f>
 8001092:	4603      	mov	r3, r0
 8001094:	491e      	ldr	r1, [pc, #120]	@ (8001110 <main+0x1cc>)
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff feb8 	bl	8000e0c <__aeabi_fdiv>
 800109c:	4603      	mov	r3, r0
      int len = sprintf(status_msg, "System running, timer ticks: %lu, packets received: %lu, rate: %.1f Hz\r\n", 
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff f9c2 	bl	8000428 <__aeabi_f2d>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	1d38      	adds	r0, r7, #4
 80010aa:	e9cd 2300 	strd	r2, r3, [sp]
 80010ae:	462b      	mov	r3, r5
 80010b0:	4622      	mov	r2, r4
 80010b2:	4918      	ldr	r1, [pc, #96]	@ (8001114 <main+0x1d0>)
 80010b4:	f003 ffb2 	bl	800501c <siprintf>
 80010b8:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
      HAL_UART_Transmit(&huart1, (uint8_t*)status_msg, len, 100);
 80010bc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	1d39      	adds	r1, r7, #4
 80010c4:	2364      	movs	r3, #100	@ 0x64
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <main+0x198>)
 80010c8:	f002 fc72 	bl	80039b0 <HAL_UART_Transmit>
      last_status = HAL_GetTick();
 80010cc:	f000 fee4 	bl	8001e98 <HAL_GetTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001104 <main+0x1c0>)
 80010d4:	6013      	str	r3, [r2, #0]
  {
 80010d6:	e7ae      	b.n	8001036 <main+0xf2>
 80010d8:	080072fc 	.word	0x080072fc
 80010dc:	200002e4 	.word	0x200002e4
 80010e0:	08007338 	.word	0x08007338
 80010e4:	08007360 	.word	0x08007360
 80010e8:	20000404 	.word	0x20000404
 80010ec:	20000374 	.word	0x20000374
 80010f0:	20000408 	.word	0x20000408
 80010f4:	08007384 	.word	0x08007384
 80010f8:	20000370 	.word	0x20000370
 80010fc:	080073cc 	.word	0x080073cc
 8001100:	2000034c 	.word	0x2000034c
 8001104:	20000458 	.word	0x20000458
 8001108:	20000450 	.word	0x20000450
 800110c:	20000454 	.word	0x20000454
 8001110:	40a00000 	.word	0x40a00000
 8001114:	080072b0 	.word	0x080072b0

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b090      	sub	sp, #64	@ 0x40
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	2228      	movs	r2, #40	@ 0x28
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f003 ffdd 	bl	80050e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001142:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114c:	2302      	movs	r3, #2
 800114e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001150:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001154:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001156:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800115a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	4618      	mov	r0, r3
 8001162:	f001 fb5d 	bl	8002820 <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800116c:	f000 fb67 	bl	800183e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	230f      	movs	r3, #15
 8001172:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001174:	2302      	movs	r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2102      	movs	r1, #2
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fdca 	bl	8002d24 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001196:	f000 fb52 	bl	800183e <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	3740      	adds	r7, #64	@ 0x40
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011aa:	4a13      	ldr	r2, [pc, #76]	@ (80011f8 <MX_I2C1_Init+0x54>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011b0:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <MX_I2C1_Init+0x58>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	@ (80011f4 <MX_I2C1_Init+0x50>)
 80011e2:	f001 f9d9 	bl	8002598 <HAL_I2C_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011ec:	f000 fb27 	bl	800183e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001f0 	.word	0x200001f0
 80011f8:	40005400 	.word	0x40005400
 80011fc:	000186a0 	.word	0x000186a0

08001200 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001204:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001206:	4a18      	ldr	r2, [pc, #96]	@ (8001268 <MX_SPI1_Init+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <MX_SPI1_Init+0x64>)
 800120c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001210:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001212:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_SPI1_Init+0x64>)
 800122c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001230:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001234:	2210      	movs	r2, #16
 8001236:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001238:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <MX_SPI1_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_SPI1_Init+0x64>)
 800124c:	220a      	movs	r2, #10
 800124e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	@ (8001264 <MX_SPI1_Init+0x64>)
 8001252:	f001 fef5 	bl	8003040 <HAL_SPI_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800125c:	f000 faef 	bl	800183e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000244 	.word	0x20000244
 8001268:	40013000 	.word	0x40013000

0800126c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800128a:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <MX_TIM1_Init+0x9c>)
 800128c:	4a1f      	ldr	r2, [pc, #124]	@ (800130c <MX_TIM1_Init+0xa0>)
 800128e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001290:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <MX_TIM1_Init+0x9c>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_TIM1_Init+0x9c>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <MX_TIM1_Init+0x9c>)
 800129e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_TIM1_Init+0x9c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012aa:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_TIM1_Init+0x9c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_TIM1_Init+0x9c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012b6:	4814      	ldr	r0, [pc, #80]	@ (8001308 <MX_TIM1_Init+0x9c>)
 80012b8:	f001 ff46 	bl	8003148 <HAL_TIM_Base_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80012c2:	f000 fabc 	bl	800183e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80012c6:	2307      	movs	r3, #7
 80012c8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <MX_TIM1_Init+0x9c>)
 80012d6:	f002 f8c9 	bl	800346c <HAL_TIM_SlaveConfigSynchro>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80012e0:	f000 faad 	bl	800183e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_TIM1_Init+0x9c>)
 80012f2:	f002 fa9d 	bl	8003830 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80012fc:	f000 fa9f 	bl	800183e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000029c 	.word	0x2000029c
 800130c:	40012c00 	.word	0x40012c00

08001310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  // UART1 configured for both TX and RX (115200 baud, 8N1)
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001314:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_USART1_UART_Init+0x4c>)
 8001316:	4a12      	ldr	r2, [pc, #72]	@ (8001360 <MX_USART1_UART_Init+0x50>)
 8001318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131a:	4b10      	ldr	r3, [pc, #64]	@ (800135c <MX_USART1_UART_Init+0x4c>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_USART1_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_USART1_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <MX_USART1_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_USART1_UART_Init+0x4c>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b08      	ldr	r3, [pc, #32]	@ (800135c <MX_USART1_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_USART1_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_USART1_UART_Init+0x4c>)
 8001348:	f002 fae2 	bl	8003910 <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001352:	f000 fa74 	bl	800183e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200002e4 	.word	0x200002e4
 8001360:	40013800 	.word	0x40013800

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001378:	4b24      	ldr	r3, [pc, #144]	@ (800140c <MX_GPIO_Init+0xa8>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a23      	ldr	r2, [pc, #140]	@ (800140c <MX_GPIO_Init+0xa8>)
 800137e:	f043 0320 	orr.w	r3, r3, #32
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b21      	ldr	r3, [pc, #132]	@ (800140c <MX_GPIO_Init+0xa8>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b1e      	ldr	r3, [pc, #120]	@ (800140c <MX_GPIO_Init+0xa8>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a1d      	ldr	r2, [pc, #116]	@ (800140c <MX_GPIO_Init+0xa8>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <MX_GPIO_Init+0xa8>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b18      	ldr	r3, [pc, #96]	@ (800140c <MX_GPIO_Init+0xa8>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a17      	ldr	r2, [pc, #92]	@ (800140c <MX_GPIO_Init+0xa8>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <MX_GPIO_Init+0xa8>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <MX_GPIO_Init+0xa8>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a11      	ldr	r2, [pc, #68]	@ (800140c <MX_GPIO_Init+0xa8>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <MX_GPIO_Init+0xa8>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013de:	480c      	ldr	r0, [pc, #48]	@ (8001410 <MX_GPIO_Init+0xac>)
 80013e0:	f001 f8a8 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 (Built-in LED) */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	4619      	mov	r1, r3
 80013fc:	4804      	ldr	r0, [pc, #16]	@ (8001410 <MX_GPIO_Init+0xac>)
 80013fe:	f000 ff15 	bl	800222c <HAL_GPIO_Init>
}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	40011000 	.word	0x40011000

08001414 <ParseTelemetryPacket>:
/**
 * @brief Parse telemetry packet from UART
 * @param packet: Pointer to 36-byte packet
 */
void ParseTelemetryPacket(uint8_t* packet)
{
 8001414:	b480      	push	{r7}
 8001416:	b08b      	sub	sp, #44	@ 0x2c
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    // Check header and footer
    if (packet[0] != TELEMETRY_HEADER || 
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2bab      	cmp	r3, #171	@ 0xab
 8001422:	f040 808e 	bne.w	8001542 <ParseTelemetryPacket+0x12e>
        packet[34] != FOOTER_1 || 
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3322      	adds	r3, #34	@ 0x22
 800142a:	781b      	ldrb	r3, [r3, #0]
    if (packet[0] != TELEMETRY_HEADER || 
 800142c:	2b0d      	cmp	r3, #13
 800142e:	f040 8088 	bne.w	8001542 <ParseTelemetryPacket+0x12e>
        packet[35] != FOOTER_2) {
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3323      	adds	r3, #35	@ 0x23
 8001436:	781b      	ldrb	r3, [r3, #0]
        packet[34] != FOOTER_1 || 
 8001438:	2b0a      	cmp	r3, #10
 800143a:	f040 8082 	bne.w	8001542 <ParseTelemetryPacket+0x12e>
        return;
    }
    
    // Parse big-endian float values - need to reverse byte order for ARM (little-endian)
    // Altitude (bytes 2-5) - reverse order: 4,3,2,1
    uint8_t alt_bytes[4] = {packet[4], packet[3], packet[2], packet[1]};
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	791b      	ldrb	r3, [r3, #4]
 8001442:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	78db      	ldrb	r3, [r3, #3]
 800144a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	789b      	ldrb	r3, [r3, #2]
 8001452:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    memcpy(&telemetry_data.altitude, alt_bytes, 4);
 800145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001460:	4a3a      	ldr	r2, [pc, #232]	@ (800154c <ParseTelemetryPacket+0x138>)
 8001462:	6013      	str	r3, [r2, #0]
    
    // Pressure (bytes 6-9) - reverse order: 8,7,6,5
    uint8_t press_bytes[4] = {packet[8], packet[7], packet[6], packet[5]};
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7a1b      	ldrb	r3, [r3, #8]
 8001468:	f887 3020 	strb.w	r3, [r7, #32]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	79db      	ldrb	r3, [r3, #7]
 8001470:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	799b      	ldrb	r3, [r3, #6]
 8001478:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	795b      	ldrb	r3, [r3, #5]
 8001480:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    memcpy(&telemetry_data.pressure, press_bytes, 4);
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	4a31      	ldr	r2, [pc, #196]	@ (800154c <ParseTelemetryPacket+0x138>)
 8001488:	6053      	str	r3, [r2, #4]
    
    // Acceleration X (bytes 10-13) - reverse order: 12,11,10,9
    uint8_t accel_x_bytes[4] = {packet[12], packet[11], packet[10], packet[9]};
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7b1b      	ldrb	r3, [r3, #12]
 800148e:	773b      	strb	r3, [r7, #28]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7adb      	ldrb	r3, [r3, #11]
 8001494:	777b      	strb	r3, [r7, #29]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7a9b      	ldrb	r3, [r3, #10]
 800149a:	77bb      	strb	r3, [r7, #30]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7a5b      	ldrb	r3, [r3, #9]
 80014a0:	77fb      	strb	r3, [r7, #31]
    memcpy(&telemetry_data.accel_x, accel_x_bytes, 4);
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	4a29      	ldr	r2, [pc, #164]	@ (800154c <ParseTelemetryPacket+0x138>)
 80014a6:	6093      	str	r3, [r2, #8]
    
    // Acceleration Y (bytes 14-17) - reverse order: 16,15,14,13
    uint8_t accel_y_bytes[4] = {packet[16], packet[15], packet[14], packet[13]};
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7c1b      	ldrb	r3, [r3, #16]
 80014ac:	763b      	strb	r3, [r7, #24]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7bdb      	ldrb	r3, [r3, #15]
 80014b2:	767b      	strb	r3, [r7, #25]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7b9b      	ldrb	r3, [r3, #14]
 80014b8:	76bb      	strb	r3, [r7, #26]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7b5b      	ldrb	r3, [r3, #13]
 80014be:	76fb      	strb	r3, [r7, #27]
    memcpy(&telemetry_data.accel_y, accel_y_bytes, 4);
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	4a22      	ldr	r2, [pc, #136]	@ (800154c <ParseTelemetryPacket+0x138>)
 80014c4:	60d3      	str	r3, [r2, #12]
    
    // Acceleration Z (bytes 18-21) - reverse order: 20,19,18,17
    uint8_t accel_z_bytes[4] = {packet[20], packet[19], packet[18], packet[17]};
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7d1b      	ldrb	r3, [r3, #20]
 80014ca:	753b      	strb	r3, [r7, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7cdb      	ldrb	r3, [r3, #19]
 80014d0:	757b      	strb	r3, [r7, #21]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7c9b      	ldrb	r3, [r3, #18]
 80014d6:	75bb      	strb	r3, [r7, #22]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7c5b      	ldrb	r3, [r3, #17]
 80014dc:	75fb      	strb	r3, [r7, #23]
    memcpy(&telemetry_data.accel_z, accel_z_bytes, 4);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	4a1a      	ldr	r2, [pc, #104]	@ (800154c <ParseTelemetryPacket+0x138>)
 80014e2:	6113      	str	r3, [r2, #16]
    
    // Angle X (bytes 22-25) - reverse order: 24,23,22,21
    uint8_t angle_x_bytes[4] = {packet[24], packet[23], packet[22], packet[21]};
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7e1b      	ldrb	r3, [r3, #24]
 80014e8:	743b      	strb	r3, [r7, #16]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7ddb      	ldrb	r3, [r3, #23]
 80014ee:	747b      	strb	r3, [r7, #17]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7d9b      	ldrb	r3, [r3, #22]
 80014f4:	74bb      	strb	r3, [r7, #18]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7d5b      	ldrb	r3, [r3, #21]
 80014fa:	74fb      	strb	r3, [r7, #19]
    memcpy(&telemetry_data.angle_x, angle_x_bytes, 4);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4a13      	ldr	r2, [pc, #76]	@ (800154c <ParseTelemetryPacket+0x138>)
 8001500:	6153      	str	r3, [r2, #20]
    
    // Angle Y (bytes 26-29) - reverse order: 28,27,26,25
    uint8_t angle_y_bytes[4] = {packet[28], packet[27], packet[26], packet[25]};
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7f1b      	ldrb	r3, [r3, #28]
 8001506:	733b      	strb	r3, [r7, #12]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7edb      	ldrb	r3, [r3, #27]
 800150c:	737b      	strb	r3, [r7, #13]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7e9b      	ldrb	r3, [r3, #26]
 8001512:	73bb      	strb	r3, [r7, #14]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7e5b      	ldrb	r3, [r3, #25]
 8001518:	73fb      	strb	r3, [r7, #15]
    memcpy(&telemetry_data.angle_y, angle_y_bytes, 4);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <ParseTelemetryPacket+0x138>)
 800151e:	6193      	str	r3, [r2, #24]
    
    // Angle Z (bytes 30-33) - reverse order: 32,31,30,29
    uint8_t angle_z_bytes[4] = {packet[32], packet[31], packet[30], packet[29]};
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001526:	723b      	strb	r3, [r7, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7fdb      	ldrb	r3, [r3, #31]
 800152c:	727b      	strb	r3, [r7, #9]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7f9b      	ldrb	r3, [r3, #30]
 8001532:	72bb      	strb	r3, [r7, #10]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	7f5b      	ldrb	r3, [r3, #29]
 8001538:	72fb      	strb	r3, [r7, #11]
    memcpy(&telemetry_data.angle_z, angle_z_bytes, 4);
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	4a03      	ldr	r2, [pc, #12]	@ (800154c <ParseTelemetryPacket+0x138>)
 800153e:	61d3      	str	r3, [r2, #28]
 8001540:	e000      	b.n	8001544 <ParseTelemetryPacket+0x130>
        return;
 8001542:	bf00      	nop
}
 8001544:	372c      	adds	r7, #44	@ 0x2c
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	2000032c 	.word	0x2000032c

08001550 <PrintTelemetryData>:

/**
 * @brief Print parsed telemetry data via UART
 */
void PrintTelemetryData(void)
{
 8001550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001554:	b0ca      	sub	sp, #296	@ 0x128
 8001556:	af0e      	add	r7, sp, #56	@ 0x38
    char msg[200];
    int len = sprintf(msg, "Alt:%.2f P:%.2f Ax:%.2f Ay:%.2f Az:%.2f Rx:%.2f Ry:%.2f Rz:%.2f\r\n",
                     telemetry_data.altitude,
 8001558:	4b31      	ldr	r3, [pc, #196]	@ (8001620 <PrintTelemetryData+0xd0>)
 800155a:	681b      	ldr	r3, [r3, #0]
    int len = sprintf(msg, "Alt:%.2f P:%.2f Ax:%.2f Ay:%.2f Az:%.2f Rx:%.2f Ry:%.2f Rz:%.2f\r\n",
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ff63 	bl	8000428 <__aeabi_f2d>
 8001562:	e9c7 0106 	strd	r0, r1, [r7, #24]
                     telemetry_data.pressure,
 8001566:	4b2e      	ldr	r3, [pc, #184]	@ (8001620 <PrintTelemetryData+0xd0>)
 8001568:	685b      	ldr	r3, [r3, #4]
    int len = sprintf(msg, "Alt:%.2f P:%.2f Ax:%.2f Ay:%.2f Az:%.2f Rx:%.2f Ry:%.2f Rz:%.2f\r\n",
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ff5c 	bl	8000428 <__aeabi_f2d>
 8001570:	4682      	mov	sl, r0
 8001572:	468b      	mov	fp, r1
                     telemetry_data.accel_x,
 8001574:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <PrintTelemetryData+0xd0>)
 8001576:	689b      	ldr	r3, [r3, #8]
    int len = sprintf(msg, "Alt:%.2f P:%.2f Ax:%.2f Ay:%.2f Az:%.2f Rx:%.2f Ry:%.2f Rz:%.2f\r\n",
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff55 	bl	8000428 <__aeabi_f2d>
 800157e:	e9c7 0104 	strd	r0, r1, [r7, #16]
                     telemetry_data.accel_y,
 8001582:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <PrintTelemetryData+0xd0>)
 8001584:	68db      	ldr	r3, [r3, #12]
    int len = sprintf(msg, "Alt:%.2f P:%.2f Ax:%.2f Ay:%.2f Az:%.2f Rx:%.2f Ry:%.2f Rz:%.2f\r\n",
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ff4e 	bl	8000428 <__aeabi_f2d>
 800158c:	e9c7 0102 	strd	r0, r1, [r7, #8]
                     telemetry_data.accel_z,
 8001590:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <PrintTelemetryData+0xd0>)
 8001592:	691b      	ldr	r3, [r3, #16]
    int len = sprintf(msg, "Alt:%.2f P:%.2f Ax:%.2f Ay:%.2f Az:%.2f Rx:%.2f Ry:%.2f Rz:%.2f\r\n",
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ff47 	bl	8000428 <__aeabi_f2d>
 800159a:	e9c7 0100 	strd	r0, r1, [r7]
                     telemetry_data.angle_x,
 800159e:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <PrintTelemetryData+0xd0>)
 80015a0:	695b      	ldr	r3, [r3, #20]
    int len = sprintf(msg, "Alt:%.2f P:%.2f Ax:%.2f Ay:%.2f Az:%.2f Rx:%.2f Ry:%.2f Rz:%.2f\r\n",
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff40 	bl	8000428 <__aeabi_f2d>
 80015a8:	4680      	mov	r8, r0
 80015aa:	4689      	mov	r9, r1
                     telemetry_data.angle_y,
 80015ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <PrintTelemetryData+0xd0>)
 80015ae:	699b      	ldr	r3, [r3, #24]
    int len = sprintf(msg, "Alt:%.2f P:%.2f Ax:%.2f Ay:%.2f Az:%.2f Rx:%.2f Ry:%.2f Rz:%.2f\r\n",
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ff39 	bl	8000428 <__aeabi_f2d>
 80015b6:	4604      	mov	r4, r0
 80015b8:	460d      	mov	r5, r1
                     telemetry_data.angle_z);
 80015ba:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <PrintTelemetryData+0xd0>)
 80015bc:	69db      	ldr	r3, [r3, #28]
    int len = sprintf(msg, "Alt:%.2f P:%.2f Ax:%.2f Ay:%.2f Az:%.2f Rx:%.2f Ry:%.2f Rz:%.2f\r\n",
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ff32 	bl	8000428 <__aeabi_f2d>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80015cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80015d0:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 80015d4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80015d8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80015dc:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80015e0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80015e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80015e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80015ec:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80015f0:	e9cd ab00 	strd	sl, fp, [sp]
 80015f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015f8:	490a      	ldr	r1, [pc, #40]	@ (8001624 <PrintTelemetryData+0xd4>)
 80015fa:	f003 fd0f 	bl	800501c <siprintf>
 80015fe:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    
    // Use blocking transmission to ensure completion before next operation
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, len, 100);
 8001602:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001606:	b29a      	uxth	r2, r3
 8001608:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800160c:	2364      	movs	r3, #100	@ 0x64
 800160e:	4806      	ldr	r0, [pc, #24]	@ (8001628 <PrintTelemetryData+0xd8>)
 8001610:	f002 f9ce 	bl	80039b0 <HAL_UART_Transmit>
}
 8001614:	bf00      	nop
 8001616:	37f0      	adds	r7, #240	@ 0xf0
 8001618:	46bd      	mov	sp, r7
 800161a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800161e:	bf00      	nop
 8001620:	2000032c 	.word	0x2000032c
 8001624:	080073d4 	.word	0x080073d4
 8001628:	200002e4 	.word	0x200002e4

0800162c <ProcessIncomingData>:
/**
 * @brief Process incoming byte and look for complete packets
 * @param new_byte: New byte received
 */
void ProcessIncomingData(uint8_t new_byte)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
    // Store byte in buffer
    incoming_buffer[buffer_index] = new_byte;
 8001636:	4b44      	ldr	r3, [pc, #272]	@ (8001748 <ProcessIncomingData+0x11c>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	4619      	mov	r1, r3
 800163c:	4a43      	ldr	r2, [pc, #268]	@ (800174c <ProcessIncomingData+0x120>)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	5453      	strb	r3, [r2, r1]
    
    // Simple and fast packet detection
    static uint8_t packet_state = 0;
    static uint8_t byte_count = 0;
    
    switch (packet_state) {
 8001642:	4b43      	ldr	r3, [pc, #268]	@ (8001750 <ProcessIncomingData+0x124>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <ProcessIncomingData+0x24>
 800164a:	2b01      	cmp	r3, #1
 800164c:	d00a      	beq.n	8001664 <ProcessIncomingData+0x38>
                packet_state = 0;
                byte_count = 0;
            }
            break;
    }
}
 800164e:	e076      	b.n	800173e <ProcessIncomingData+0x112>
            if (new_byte == TELEMETRY_HEADER) {
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	2bab      	cmp	r3, #171	@ 0xab
 8001654:	d170      	bne.n	8001738 <ProcessIncomingData+0x10c>
                packet_state = 1;
 8001656:	4b3e      	ldr	r3, [pc, #248]	@ (8001750 <ProcessIncomingData+0x124>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
                byte_count = 1;
 800165c:	4b3d      	ldr	r3, [pc, #244]	@ (8001754 <ProcessIncomingData+0x128>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
            break;
 8001662:	e069      	b.n	8001738 <ProcessIncomingData+0x10c>
            byte_count++;
 8001664:	4b3b      	ldr	r3, [pc, #236]	@ (8001754 <ProcessIncomingData+0x128>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <ProcessIncomingData+0x128>)
 800166e:	701a      	strb	r2, [r3, #0]
            if (byte_count >= PACKET_SIZE) {
 8001670:	4b38      	ldr	r3, [pc, #224]	@ (8001754 <ProcessIncomingData+0x128>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b23      	cmp	r3, #35	@ 0x23
 8001676:	d961      	bls.n	800173c <ProcessIncomingData+0x110>
                if (incoming_buffer[(buffer_index - PACKET_SIZE + 1 + PACKET_SIZE - 2) % (PACKET_SIZE * 4)] == FOOTER_1 &&
 8001678:	4b33      	ldr	r3, [pc, #204]	@ (8001748 <ProcessIncomingData+0x11c>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	1e59      	subs	r1, r3, #1
 800167e:	4b36      	ldr	r3, [pc, #216]	@ (8001758 <ProcessIncomingData+0x12c>)
 8001680:	fb83 2301 	smull	r2, r3, r3, r1
 8001684:	115a      	asrs	r2, r3, #5
 8001686:	17cb      	asrs	r3, r1, #31
 8001688:	1ad2      	subs	r2, r2, r3
 800168a:	4613      	mov	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	1aca      	subs	r2, r1, r3
 8001694:	4b2d      	ldr	r3, [pc, #180]	@ (800174c <ProcessIncomingData+0x120>)
 8001696:	5c9b      	ldrb	r3, [r3, r2]
 8001698:	2b0d      	cmp	r3, #13
 800169a:	d146      	bne.n	800172a <ProcessIncomingData+0xfe>
                    incoming_buffer[(buffer_index - PACKET_SIZE + 1 + PACKET_SIZE - 1) % (PACKET_SIZE * 4)] == FOOTER_2) {
 800169c:	4b2a      	ldr	r3, [pc, #168]	@ (8001748 <ProcessIncomingData+0x11c>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001758 <ProcessIncomingData+0x12c>)
 80016a4:	fb83 2301 	smull	r2, r3, r3, r1
 80016a8:	115a      	asrs	r2, r3, #5
 80016aa:	17cb      	asrs	r3, r1, #31
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	1aca      	subs	r2, r1, r3
 80016b8:	4b24      	ldr	r3, [pc, #144]	@ (800174c <ProcessIncomingData+0x120>)
 80016ba:	5c9b      	ldrb	r3, [r3, r2]
                if (incoming_buffer[(buffer_index - PACKET_SIZE + 1 + PACKET_SIZE - 2) % (PACKET_SIZE * 4)] == FOOTER_1 &&
 80016bc:	2b0a      	cmp	r3, #10
 80016be:	d134      	bne.n	800172a <ProcessIncomingData+0xfe>
                    uint16_t start_idx = (buffer_index - PACKET_SIZE + 1) % (PACKET_SIZE * 4);
 80016c0:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <ProcessIncomingData+0x11c>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	f1a3 0223 	sub.w	r2, r3, #35	@ 0x23
 80016c8:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <ProcessIncomingData+0x12c>)
 80016ca:	fb83 1302 	smull	r1, r3, r3, r2
 80016ce:	1159      	asrs	r1, r3, #5
 80016d0:	17d3      	asrs	r3, r2, #31
 80016d2:	1ac9      	subs	r1, r1, r3
 80016d4:	460b      	mov	r3, r1
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	440b      	add	r3, r1
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	1ad1      	subs	r1, r2, r3
 80016de:	460b      	mov	r3, r1
 80016e0:	81bb      	strh	r3, [r7, #12]
                    for (uint8_t i = 0; i < PACKET_SIZE; i++) {
 80016e2:	2300      	movs	r3, #0
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e015      	b.n	8001714 <ProcessIncomingData+0xe8>
                        rx_buffer[i] = incoming_buffer[(start_idx + i) % (PACKET_SIZE * 4)];
 80016e8:	89ba      	ldrh	r2, [r7, #12]
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	18d1      	adds	r1, r2, r3
 80016ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <ProcessIncomingData+0x12c>)
 80016f0:	fb83 2301 	smull	r2, r3, r3, r1
 80016f4:	115a      	asrs	r2, r3, #5
 80016f6:	17cb      	asrs	r3, r1, #31
 80016f8:	1ad2      	subs	r2, r2, r3
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	1aca      	subs	r2, r1, r3
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	4911      	ldr	r1, [pc, #68]	@ (800174c <ProcessIncomingData+0x120>)
 8001708:	5c89      	ldrb	r1, [r1, r2]
 800170a:	4a14      	ldr	r2, [pc, #80]	@ (800175c <ProcessIncomingData+0x130>)
 800170c:	54d1      	strb	r1, [r2, r3]
                    for (uint8_t i = 0; i < PACKET_SIZE; i++) {
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	3301      	adds	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b23      	cmp	r3, #35	@ 0x23
 8001718:	d9e6      	bls.n	80016e8 <ProcessIncomingData+0xbc>
                    packet_received = 1;
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <ProcessIncomingData+0x134>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
                    packets_received_count++; // Increment packet counter
 8001720:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <ProcessIncomingData+0x138>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	4a0f      	ldr	r2, [pc, #60]	@ (8001764 <ProcessIncomingData+0x138>)
 8001728:	6013      	str	r3, [r2, #0]
                packet_state = 0;
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <ProcessIncomingData+0x124>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
                byte_count = 0;
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <ProcessIncomingData+0x128>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
            break;
 8001736:	e001      	b.n	800173c <ProcessIncomingData+0x110>
            break;
 8001738:	bf00      	nop
 800173a:	e000      	b.n	800173e <ProcessIncomingData+0x112>
            break;
 800173c:	bf00      	nop
}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000404 	.word	0x20000404
 800174c:	20000374 	.word	0x20000374
 8001750:	2000045c 	.word	0x2000045c
 8001754:	2000045d 	.word	0x2000045d
 8001758:	38e38e39 	.word	0x38e38e39
 800175c:	2000034c 	.word	0x2000034c
 8001760:	20000370 	.word	0x20000370
 8001764:	20000454 	.word	0x20000454

08001768 <HAL_UART_RxCpltCallback>:
/**
 * @brief UART receive complete callback
 * @param huart: UART handle
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <HAL_UART_RxCpltCallback+0x60>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d122      	bne.n	80017c0 <HAL_UART_RxCpltCallback+0x58>
    // Process the received byte immediately
    ProcessIncomingData(incoming_buffer[buffer_index]);
 800177a:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <HAL_UART_RxCpltCallback+0x64>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <HAL_UART_RxCpltCallback+0x68>)
 8001782:	5c9b      	ldrb	r3, [r3, r2]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff51 	bl	800162c <ProcessIncomingData>
    
    // Move to next buffer position
    buffer_index = (buffer_index + 1) % (PACKET_SIZE * 4);
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <HAL_UART_RxCpltCallback+0x64>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <HAL_UART_RxCpltCallback+0x6c>)
 8001792:	fb83 1302 	smull	r1, r3, r3, r2
 8001796:	1159      	asrs	r1, r3, #5
 8001798:	17d3      	asrs	r3, r2, #31
 800179a:	1ac9      	subs	r1, r1, r3
 800179c:	460b      	mov	r3, r1
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	1ad1      	subs	r1, r2, r3
 80017a6:	b28a      	uxth	r2, r1
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <HAL_UART_RxCpltCallback+0x64>)
 80017aa:	801a      	strh	r2, [r3, #0]
    
    // Continue receiving next byte immediately - no delays
    HAL_UART_Receive_IT(&huart1, &incoming_buffer[buffer_index], 1);
 80017ac:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <HAL_UART_RxCpltCallback+0x64>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <HAL_UART_RxCpltCallback+0x68>)
 80017b4:	4413      	add	r3, r2
 80017b6:	2201      	movs	r2, #1
 80017b8:	4619      	mov	r1, r3
 80017ba:	4807      	ldr	r0, [pc, #28]	@ (80017d8 <HAL_UART_RxCpltCallback+0x70>)
 80017bc:	f002 f983 	bl	8003ac6 <HAL_UART_Receive_IT>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40013800 	.word	0x40013800
 80017cc:	20000404 	.word	0x20000404
 80017d0:	20000374 	.word	0x20000374
 80017d4:	38e38e39 	.word	0x38e38e39
 80017d8:	200002e4 	.word	0x200002e4

080017dc <TimerCallback>:

/**
 * @brief Timer callback function - called every 5ms
 */
void TimerCallback(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  timer_tick++;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <TimerCallback+0x38>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001814 <TimerCallback+0x38>)
 80017e8:	6013      	str	r3, [r2, #0]
  
  // Toggle LED every 200ms (40 timer ticks) to show interrupts are working
  if (timer_tick % 40 == 0) {
 80017ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <TimerCallback+0x38>)
 80017ec:	6819      	ldr	r1, [r3, #0]
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <TimerCallback+0x3c>)
 80017f0:	fba3 2301 	umull	r2, r3, r3, r1
 80017f4:	095a      	lsrs	r2, r3, #5
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	1aca      	subs	r2, r1, r3
 8001800:	2a00      	cmp	r2, #0
 8001802:	d104      	bne.n	800180e <TimerCallback+0x32>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Built-in LED on PC13
 8001804:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001808:	4804      	ldr	r0, [pc, #16]	@ (800181c <TimerCallback+0x40>)
 800180a:	f000 feab 	bl	8002564 <HAL_GPIO_TogglePin>
  }
  
  // No need to poll UART1 anymore since we're using interrupts
  // Just keep track of timer ticks for status messages
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000450 	.word	0x20000450
 8001818:	cccccccd 	.word	0xcccccccd
 800181c:	40011000 	.word	0x40011000

08001820 <HAL_TIM_PeriodElapsedCallback>:

/**
 * @brief Timer period elapsed callback
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001830:	d101      	bne.n	8001836 <HAL_TIM_PeriodElapsedCallback+0x16>
    TimerCallback();
 8001832:	f7ff ffd3 	bl	80017dc <TimerCallback>
  }
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001842:	b672      	cpsid	i
}
 8001844:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001846:	bf00      	nop
 8001848:	e7fd      	b.n	8001846 <Error_Handler+0x8>
	...

0800184c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_MspInit+0x5c>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	4a14      	ldr	r2, [pc, #80]	@ (80018a8 <HAL_MspInit+0x5c>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6193      	str	r3, [r2, #24]
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_MspInit+0x5c>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <HAL_MspInit+0x5c>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a0e      	ldr	r2, [pc, #56]	@ (80018a8 <HAL_MspInit+0x5c>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001874:	61d3      	str	r3, [r2, #28]
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <HAL_MspInit+0x5c>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <HAL_MspInit+0x60>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <HAL_MspInit+0x60>)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000

080018b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a15      	ldr	r2, [pc, #84]	@ (8001920 <HAL_I2C_MspInit+0x70>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d123      	bne.n	8001918 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d0:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <HAL_I2C_MspInit+0x74>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a13      	ldr	r2, [pc, #76]	@ (8001924 <HAL_I2C_MspInit+0x74>)
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <HAL_I2C_MspInit+0x74>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e8:	23c0      	movs	r3, #192	@ 0xc0
 80018ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ec:	2312      	movs	r3, #18
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4619      	mov	r1, r3
 80018fa:	480b      	ldr	r0, [pc, #44]	@ (8001928 <HAL_I2C_MspInit+0x78>)
 80018fc:	f000 fc96 	bl	800222c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <HAL_I2C_MspInit+0x74>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	4a07      	ldr	r2, [pc, #28]	@ (8001924 <HAL_I2C_MspInit+0x74>)
 8001906:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800190a:	61d3      	str	r3, [r2, #28]
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <HAL_I2C_MspInit+0x74>)
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001918:	bf00      	nop
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40005400 	.word	0x40005400
 8001924:	40021000 	.word	0x40021000
 8001928:	40010c00 	.word	0x40010c00

0800192c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1b      	ldr	r2, [pc, #108]	@ (80019b4 <HAL_SPI_MspInit+0x88>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d12f      	bne.n	80019ac <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_SPI_MspInit+0x8c>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_SPI_MspInit+0x8c>)
 8001952:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <HAL_SPI_MspInit+0x8c>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <HAL_SPI_MspInit+0x8c>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a13      	ldr	r2, [pc, #76]	@ (80019b8 <HAL_SPI_MspInit+0x8c>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <HAL_SPI_MspInit+0x8c>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800197c:	23a0      	movs	r3, #160	@ 0xa0
 800197e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	4619      	mov	r1, r3
 800198e:	480b      	ldr	r0, [pc, #44]	@ (80019bc <HAL_SPI_MspInit+0x90>)
 8001990:	f000 fc4c 	bl	800222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001994:	2340      	movs	r3, #64	@ 0x40
 8001996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4619      	mov	r1, r3
 80019a6:	4805      	ldr	r0, [pc, #20]	@ (80019bc <HAL_SPI_MspInit+0x90>)
 80019a8:	f000 fc40 	bl	800222c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019ac:	bf00      	nop
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40013000 	.word	0x40013000
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010800 	.word	0x40010800

080019c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a09      	ldr	r2, [pc, #36]	@ (80019f4 <HAL_TIM_Base_MspInit+0x34>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d10b      	bne.n	80019ea <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_TIM_Base_MspInit+0x38>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	4a08      	ldr	r2, [pc, #32]	@ (80019f8 <HAL_TIM_Base_MspInit+0x38>)
 80019d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019dc:	6193      	str	r3, [r2, #24]
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_TIM_Base_MspInit+0x38>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	@ 0x30
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0320 	add.w	r3, r7, #32
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a57      	ldr	r2, [pc, #348]	@ (8001b74 <HAL_UART_MspInit+0x178>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d13a      	bne.n	8001a92 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a1c:	4b56      	ldr	r3, [pc, #344]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a55      	ldr	r2, [pc, #340]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001a22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b53      	ldr	r3, [pc, #332]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a34:	4b50      	ldr	r3, [pc, #320]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a4f      	ldr	r2, [pc, #316]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b4d      	ldr	r3, [pc, #308]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0320 	add.w	r3, r7, #32
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4846      	ldr	r0, [pc, #280]	@ (8001b7c <HAL_UART_MspInit+0x180>)
 8001a62:	f000 fbe3 	bl	800222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0320 	add.w	r3, r7, #32
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4840      	ldr	r0, [pc, #256]	@ (8001b7c <HAL_UART_MspInit+0x180>)
 8001a7c:	f000 fbd6 	bl	800222c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	2025      	movs	r0, #37	@ 0x25
 8001a86:	f000 fae8 	bl	800205a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a8a:	2025      	movs	r0, #37	@ 0x25
 8001a8c:	f000 fb01 	bl	8002092 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a90:	e06c      	b.n	8001b6c <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a3a      	ldr	r2, [pc, #232]	@ (8001b80 <HAL_UART_MspInit+0x184>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d130      	bne.n	8001afe <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9c:	4b36      	ldr	r3, [pc, #216]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	4a35      	ldr	r2, [pc, #212]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa6:	61d3      	str	r3, [r2, #28]
 8001aa8:	4b33      	ldr	r3, [pc, #204]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	4b30      	ldr	r3, [pc, #192]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a2f      	ldr	r2, [pc, #188]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001acc:	2304      	movs	r3, #4
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 0320 	add.w	r3, r7, #32
 8001adc:	4619      	mov	r1, r3
 8001ade:	4827      	ldr	r0, [pc, #156]	@ (8001b7c <HAL_UART_MspInit+0x180>)
 8001ae0:	f000 fba4 	bl	800222c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 0320 	add.w	r3, r7, #32
 8001af4:	4619      	mov	r1, r3
 8001af6:	4821      	ldr	r0, [pc, #132]	@ (8001b7c <HAL_UART_MspInit+0x180>)
 8001af8:	f000 fb98 	bl	800222c <HAL_GPIO_Init>
}
 8001afc:	e036      	b.n	8001b6c <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a20      	ldr	r2, [pc, #128]	@ (8001b84 <HAL_UART_MspInit+0x188>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d131      	bne.n	8001b6c <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b08:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001b0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b12:	61d3      	str	r3, [r2, #28]
 8001b14:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a14      	ldr	r2, [pc, #80]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_UART_MspInit+0x17c>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 0320 	add.w	r3, r7, #32
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480e      	ldr	r0, [pc, #56]	@ (8001b88 <HAL_UART_MspInit+0x18c>)
 8001b4e:	f000 fb6d 	bl	800222c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	4619      	mov	r1, r3
 8001b66:	4808      	ldr	r0, [pc, #32]	@ (8001b88 <HAL_UART_MspInit+0x18c>)
 8001b68:	f000 fb60 	bl	800222c <HAL_GPIO_Init>
}
 8001b6c:	bf00      	nop
 8001b6e:	3730      	adds	r7, #48	@ 0x30
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40013800 	.word	0x40013800
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010800 	.word	0x40010800
 8001b80:	40004400 	.word	0x40004400
 8001b84:	40004800 	.word	0x40004800
 8001b88:	40010c00 	.word	0x40010c00

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <NMI_Handler+0x4>

08001b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <BusFault_Handler+0x4>

08001bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <UsageFault_Handler+0x4>

08001bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bdc:	f000 f94a 	bl	8001e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <USART1_IRQHandler+0x10>)
 8001bea:	f001 ff91 	bl	8003b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200002e4 	.word	0x200002e4

08001bf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <TIM2_IRQHandler+0x10>)
 8001bfe:	f001 fb45 	bl	800328c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000408 	.word	0x20000408

08001c0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return 1;
 8001c10:	2301      	movs	r3, #1
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <_kill>:

int _kill(int pid, int sig)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c24:	f003 fab2 	bl	800518c <__errno>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2216      	movs	r2, #22
 8001c2c:	601a      	str	r2, [r3, #0]
  return -1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <_exit>:

void _exit (int status)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c42:	f04f 31ff 	mov.w	r1, #4294967295
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ffe7 	bl	8001c1a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <_exit+0x12>

08001c50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e00a      	b.n	8001c78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c62:	f3af 8000 	nop.w
 8001c66:	4601      	mov	r1, r0
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	60ba      	str	r2, [r7, #8]
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dbf0      	blt.n	8001c62 <_read+0x12>
  }

  return len;
 8001c80:	687b      	ldr	r3, [r7, #4]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e009      	b.n	8001cb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60ba      	str	r2, [r7, #8]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf1      	blt.n	8001c9c <_write+0x12>
  }
  return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_close>:

int _close(int file)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ce8:	605a      	str	r2, [r3, #4]
  return 0;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <_isatty>:

int _isatty(int file)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
	...

08001d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d2c:	4a14      	ldr	r2, [pc, #80]	@ (8001d80 <_sbrk+0x5c>)
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <_sbrk+0x60>)
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d38:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <_sbrk+0x64>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	@ (8001d8c <_sbrk+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d207      	bcs.n	8001d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d54:	f003 fa1a 	bl	800518c <__errno>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	e009      	b.n	8001d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a05      	ldr	r2, [pc, #20]	@ (8001d88 <_sbrk+0x64>)
 8001d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20005000 	.word	0x20005000
 8001d84:	00000400 	.word	0x00000400
 8001d88:	20000460 	.word	0x20000460
 8001d8c:	200005b8 	.word	0x200005b8

08001d90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d9c:	f7ff fff8 	bl	8001d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da0:	480b      	ldr	r0, [pc, #44]	@ (8001dd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001da2:	490c      	ldr	r1, [pc, #48]	@ (8001dd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001da4:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da8:	e002      	b.n	8001db0 <LoopCopyDataInit>

08001daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dae:	3304      	adds	r3, #4

08001db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db4:	d3f9      	bcc.n	8001daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db6:	4a09      	ldr	r2, [pc, #36]	@ (8001ddc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001db8:	4c09      	ldr	r4, [pc, #36]	@ (8001de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dbc:	e001      	b.n	8001dc2 <LoopFillZerobss>

08001dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc0:	3204      	adds	r2, #4

08001dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc4:	d3fb      	bcc.n	8001dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f003 f9e7 	bl	8005198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dca:	f7ff f8bb 	bl	8000f44 <main>
  bx lr
 8001dce:	4770      	bx	lr
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001dd8:	080077e4 	.word	0x080077e4
  ldr r2, =_sbss
 8001ddc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001de0:	200005b4 	.word	0x200005b4

08001de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC1_2_IRQHandler>
	...

08001de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <HAL_Init+0x28>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a07      	ldr	r2, [pc, #28]	@ (8001e10 <HAL_Init+0x28>)
 8001df2:	f043 0310 	orr.w	r3, r3, #16
 8001df6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f000 f923 	bl	8002044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfe:	200f      	movs	r0, #15
 8001e00:	f000 f808 	bl	8001e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e04:	f7ff fd22 	bl	800184c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40022000 	.word	0x40022000

08001e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e1c:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_InitTick+0x54>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_InitTick+0x58>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f93b 	bl	80020ae <HAL_SYSTICK_Config>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00e      	b.n	8001e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	d80a      	bhi.n	8001e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f000 f903 	bl	800205a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e54:	4a06      	ldr	r2, [pc, #24]	@ (8001e70 <HAL_InitTick+0x5c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e000      	b.n	8001e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <HAL_IncTick+0x1c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <HAL_IncTick+0x20>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	4a03      	ldr	r2, [pc, #12]	@ (8001e94 <HAL_IncTick+0x20>)
 8001e86:	6013      	str	r3, [r2, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	20000008 	.word	0x20000008
 8001e94:	20000464 	.word	0x20000464

08001e98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b02      	ldr	r3, [pc, #8]	@ (8001ea8 <HAL_GetTick+0x10>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	20000464 	.word	0x20000464

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	@ (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4906      	ldr	r1, [pc, #24]	@ (8001f44 <__NVIC_EnableIRQ+0x34>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	@ (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	@ (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	@ 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002010:	d301      	bcc.n	8002016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002012:	2301      	movs	r3, #1
 8002014:	e00f      	b.n	8002036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002016:	4a0a      	ldr	r2, [pc, #40]	@ (8002040 <SysTick_Config+0x40>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201e:	210f      	movs	r1, #15
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f7ff ff90 	bl	8001f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002028:	4b05      	ldr	r3, [pc, #20]	@ (8002040 <SysTick_Config+0x40>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202e:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <SysTick_Config+0x40>)
 8002030:	2207      	movs	r2, #7
 8002032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	e000e010 	.word	0xe000e010

08002044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff2d 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800206c:	f7ff ff42 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	6978      	ldr	r0, [r7, #20]
 8002078:	f7ff ff90 	bl	8001f9c <NVIC_EncodePriority>
 800207c:	4602      	mov	r2, r0
 800207e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff5f 	bl	8001f48 <__NVIC_SetPriority>
}
 800208a:	bf00      	nop
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff35 	bl	8001f10 <__NVIC_EnableIRQ>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ffa2 	bl	8002000 <SysTick_Config>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d008      	beq.n	80020f0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2204      	movs	r2, #4
 80020e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e020      	b.n	8002132 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 020e 	bic.w	r2, r2, #14
 80020fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002118:	2101      	movs	r1, #1
 800211a:	fa01 f202 	lsl.w	r2, r1, r2
 800211e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d005      	beq.n	8002160 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2204      	movs	r2, #4
 8002158:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	e051      	b.n	8002204 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 020e 	bic.w	r2, r2, #14
 800216e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a22      	ldr	r2, [pc, #136]	@ (8002210 <HAL_DMA_Abort_IT+0xd4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d029      	beq.n	80021de <HAL_DMA_Abort_IT+0xa2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a21      	ldr	r2, [pc, #132]	@ (8002214 <HAL_DMA_Abort_IT+0xd8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d022      	beq.n	80021da <HAL_DMA_Abort_IT+0x9e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a1f      	ldr	r2, [pc, #124]	@ (8002218 <HAL_DMA_Abort_IT+0xdc>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01a      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x98>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <HAL_DMA_Abort_IT+0xe0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d012      	beq.n	80021ce <HAL_DMA_Abort_IT+0x92>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002220 <HAL_DMA_Abort_IT+0xe4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00a      	beq.n	80021c8 <HAL_DMA_Abort_IT+0x8c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002224 <HAL_DMA_Abort_IT+0xe8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d102      	bne.n	80021c2 <HAL_DMA_Abort_IT+0x86>
 80021bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021c0:	e00e      	b.n	80021e0 <HAL_DMA_Abort_IT+0xa4>
 80021c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021c6:	e00b      	b.n	80021e0 <HAL_DMA_Abort_IT+0xa4>
 80021c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021cc:	e008      	b.n	80021e0 <HAL_DMA_Abort_IT+0xa4>
 80021ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d2:	e005      	b.n	80021e0 <HAL_DMA_Abort_IT+0xa4>
 80021d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021d8:	e002      	b.n	80021e0 <HAL_DMA_Abort_IT+0xa4>
 80021da:	2310      	movs	r3, #16
 80021dc:	e000      	b.n	80021e0 <HAL_DMA_Abort_IT+0xa4>
 80021de:	2301      	movs	r3, #1
 80021e0:	4a11      	ldr	r2, [pc, #68]	@ (8002228 <HAL_DMA_Abort_IT+0xec>)
 80021e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4798      	blx	r3
    } 
  }
  return status;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40020008 	.word	0x40020008
 8002214:	4002001c 	.word	0x4002001c
 8002218:	40020030 	.word	0x40020030
 800221c:	40020044 	.word	0x40020044
 8002220:	40020058 	.word	0x40020058
 8002224:	4002006c 	.word	0x4002006c
 8002228:	40020000 	.word	0x40020000

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b08b      	sub	sp, #44	@ 0x2c
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223e:	e169      	b.n	8002514 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002240:	2201      	movs	r2, #1
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	429a      	cmp	r2, r3
 800225a:	f040 8158 	bne.w	800250e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4a9a      	ldr	r2, [pc, #616]	@ (80024cc <HAL_GPIO_Init+0x2a0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d05e      	beq.n	8002326 <HAL_GPIO_Init+0xfa>
 8002268:	4a98      	ldr	r2, [pc, #608]	@ (80024cc <HAL_GPIO_Init+0x2a0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d875      	bhi.n	800235a <HAL_GPIO_Init+0x12e>
 800226e:	4a98      	ldr	r2, [pc, #608]	@ (80024d0 <HAL_GPIO_Init+0x2a4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d058      	beq.n	8002326 <HAL_GPIO_Init+0xfa>
 8002274:	4a96      	ldr	r2, [pc, #600]	@ (80024d0 <HAL_GPIO_Init+0x2a4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d86f      	bhi.n	800235a <HAL_GPIO_Init+0x12e>
 800227a:	4a96      	ldr	r2, [pc, #600]	@ (80024d4 <HAL_GPIO_Init+0x2a8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d052      	beq.n	8002326 <HAL_GPIO_Init+0xfa>
 8002280:	4a94      	ldr	r2, [pc, #592]	@ (80024d4 <HAL_GPIO_Init+0x2a8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d869      	bhi.n	800235a <HAL_GPIO_Init+0x12e>
 8002286:	4a94      	ldr	r2, [pc, #592]	@ (80024d8 <HAL_GPIO_Init+0x2ac>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d04c      	beq.n	8002326 <HAL_GPIO_Init+0xfa>
 800228c:	4a92      	ldr	r2, [pc, #584]	@ (80024d8 <HAL_GPIO_Init+0x2ac>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d863      	bhi.n	800235a <HAL_GPIO_Init+0x12e>
 8002292:	4a92      	ldr	r2, [pc, #584]	@ (80024dc <HAL_GPIO_Init+0x2b0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d046      	beq.n	8002326 <HAL_GPIO_Init+0xfa>
 8002298:	4a90      	ldr	r2, [pc, #576]	@ (80024dc <HAL_GPIO_Init+0x2b0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d85d      	bhi.n	800235a <HAL_GPIO_Init+0x12e>
 800229e:	2b12      	cmp	r3, #18
 80022a0:	d82a      	bhi.n	80022f8 <HAL_GPIO_Init+0xcc>
 80022a2:	2b12      	cmp	r3, #18
 80022a4:	d859      	bhi.n	800235a <HAL_GPIO_Init+0x12e>
 80022a6:	a201      	add	r2, pc, #4	@ (adr r2, 80022ac <HAL_GPIO_Init+0x80>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	08002327 	.word	0x08002327
 80022b0:	08002301 	.word	0x08002301
 80022b4:	08002313 	.word	0x08002313
 80022b8:	08002355 	.word	0x08002355
 80022bc:	0800235b 	.word	0x0800235b
 80022c0:	0800235b 	.word	0x0800235b
 80022c4:	0800235b 	.word	0x0800235b
 80022c8:	0800235b 	.word	0x0800235b
 80022cc:	0800235b 	.word	0x0800235b
 80022d0:	0800235b 	.word	0x0800235b
 80022d4:	0800235b 	.word	0x0800235b
 80022d8:	0800235b 	.word	0x0800235b
 80022dc:	0800235b 	.word	0x0800235b
 80022e0:	0800235b 	.word	0x0800235b
 80022e4:	0800235b 	.word	0x0800235b
 80022e8:	0800235b 	.word	0x0800235b
 80022ec:	0800235b 	.word	0x0800235b
 80022f0:	08002309 	.word	0x08002309
 80022f4:	0800231d 	.word	0x0800231d
 80022f8:	4a79      	ldr	r2, [pc, #484]	@ (80024e0 <HAL_GPIO_Init+0x2b4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022fe:	e02c      	b.n	800235a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	623b      	str	r3, [r7, #32]
          break;
 8002306:	e029      	b.n	800235c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	3304      	adds	r3, #4
 800230e:	623b      	str	r3, [r7, #32]
          break;
 8002310:	e024      	b.n	800235c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	3308      	adds	r3, #8
 8002318:	623b      	str	r3, [r7, #32]
          break;
 800231a:	e01f      	b.n	800235c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	330c      	adds	r3, #12
 8002322:	623b      	str	r3, [r7, #32]
          break;
 8002324:	e01a      	b.n	800235c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d102      	bne.n	8002334 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800232e:	2304      	movs	r3, #4
 8002330:	623b      	str	r3, [r7, #32]
          break;
 8002332:	e013      	b.n	800235c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d105      	bne.n	8002348 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800233c:	2308      	movs	r3, #8
 800233e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	611a      	str	r2, [r3, #16]
          break;
 8002346:	e009      	b.n	800235c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002348:	2308      	movs	r3, #8
 800234a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	615a      	str	r2, [r3, #20]
          break;
 8002352:	e003      	b.n	800235c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002354:	2300      	movs	r3, #0
 8002356:	623b      	str	r3, [r7, #32]
          break;
 8002358:	e000      	b.n	800235c <HAL_GPIO_Init+0x130>
          break;
 800235a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2bff      	cmp	r3, #255	@ 0xff
 8002360:	d801      	bhi.n	8002366 <HAL_GPIO_Init+0x13a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	e001      	b.n	800236a <HAL_GPIO_Init+0x13e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2bff      	cmp	r3, #255	@ 0xff
 8002370:	d802      	bhi.n	8002378 <HAL_GPIO_Init+0x14c>
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	e002      	b.n	800237e <HAL_GPIO_Init+0x152>
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	3b08      	subs	r3, #8
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	210f      	movs	r1, #15
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	401a      	ands	r2, r3
 8002390:	6a39      	ldr	r1, [r7, #32]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	431a      	orrs	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 80b1 	beq.w	800250e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023ac:	4b4d      	ldr	r3, [pc, #308]	@ (80024e4 <HAL_GPIO_Init+0x2b8>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a4c      	ldr	r2, [pc, #304]	@ (80024e4 <HAL_GPIO_Init+0x2b8>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	4b4a      	ldr	r3, [pc, #296]	@ (80024e4 <HAL_GPIO_Init+0x2b8>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023c4:	4a48      	ldr	r2, [pc, #288]	@ (80024e8 <HAL_GPIO_Init+0x2bc>)
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	3302      	adds	r3, #2
 80023cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	220f      	movs	r2, #15
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4013      	ands	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a40      	ldr	r2, [pc, #256]	@ (80024ec <HAL_GPIO_Init+0x2c0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d013      	beq.n	8002418 <HAL_GPIO_Init+0x1ec>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a3f      	ldr	r2, [pc, #252]	@ (80024f0 <HAL_GPIO_Init+0x2c4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00d      	beq.n	8002414 <HAL_GPIO_Init+0x1e8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a3e      	ldr	r2, [pc, #248]	@ (80024f4 <HAL_GPIO_Init+0x2c8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d007      	beq.n	8002410 <HAL_GPIO_Init+0x1e4>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a3d      	ldr	r2, [pc, #244]	@ (80024f8 <HAL_GPIO_Init+0x2cc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_GPIO_Init+0x1e0>
 8002408:	2303      	movs	r3, #3
 800240a:	e006      	b.n	800241a <HAL_GPIO_Init+0x1ee>
 800240c:	2304      	movs	r3, #4
 800240e:	e004      	b.n	800241a <HAL_GPIO_Init+0x1ee>
 8002410:	2302      	movs	r3, #2
 8002412:	e002      	b.n	800241a <HAL_GPIO_Init+0x1ee>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <HAL_GPIO_Init+0x1ee>
 8002418:	2300      	movs	r3, #0
 800241a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800241c:	f002 0203 	and.w	r2, r2, #3
 8002420:	0092      	lsls	r2, r2, #2
 8002422:	4093      	lsls	r3, r2
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800242a:	492f      	ldr	r1, [pc, #188]	@ (80024e8 <HAL_GPIO_Init+0x2bc>)
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002444:	4b2d      	ldr	r3, [pc, #180]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	492c      	ldr	r1, [pc, #176]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002452:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	43db      	mvns	r3, r3
 800245a:	4928      	ldr	r1, [pc, #160]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 800245c:	4013      	ands	r3, r2
 800245e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800246c:	4b23      	ldr	r3, [pc, #140]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	4922      	ldr	r1, [pc, #136]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	60cb      	str	r3, [r1, #12]
 8002478:	e006      	b.n	8002488 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800247a:	4b20      	ldr	r3, [pc, #128]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	43db      	mvns	r3, r3
 8002482:	491e      	ldr	r1, [pc, #120]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 8002484:	4013      	ands	r3, r2
 8002486:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d006      	beq.n	80024a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002494:	4b19      	ldr	r3, [pc, #100]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	4918      	ldr	r1, [pc, #96]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
 80024a0:	e006      	b.n	80024b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024a2:	4b16      	ldr	r3, [pc, #88]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	4914      	ldr	r1, [pc, #80]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d021      	beq.n	8002500 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024bc:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	490e      	ldr	r1, [pc, #56]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]
 80024c8:	e021      	b.n	800250e <HAL_GPIO_Init+0x2e2>
 80024ca:	bf00      	nop
 80024cc:	10320000 	.word	0x10320000
 80024d0:	10310000 	.word	0x10310000
 80024d4:	10220000 	.word	0x10220000
 80024d8:	10210000 	.word	0x10210000
 80024dc:	10120000 	.word	0x10120000
 80024e0:	10110000 	.word	0x10110000
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40010000 	.word	0x40010000
 80024ec:	40010800 	.word	0x40010800
 80024f0:	40010c00 	.word	0x40010c00
 80024f4:	40011000 	.word	0x40011000
 80024f8:	40011400 	.word	0x40011400
 80024fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002500:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <HAL_GPIO_Init+0x304>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	43db      	mvns	r3, r3
 8002508:	4909      	ldr	r1, [pc, #36]	@ (8002530 <HAL_GPIO_Init+0x304>)
 800250a:	4013      	ands	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	3301      	adds	r3, #1
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251a:	fa22 f303 	lsr.w	r3, r2, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	f47f ae8e 	bne.w	8002240 <HAL_GPIO_Init+0x14>
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	372c      	adds	r7, #44	@ 0x2c
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	40010400 	.word	0x40010400

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	611a      	str	r2, [r3, #16]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	041a      	lsls	r2, r3, #16
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	43d9      	mvns	r1, r3
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	400b      	ands	r3, r1
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	611a      	str	r2, [r3, #16]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
	...

08002598 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e12b      	b.n	8002802 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff f976 	bl	80018b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2224      	movs	r2, #36	@ 0x24
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025fc:	f000 fcda 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8002600:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a81      	ldr	r2, [pc, #516]	@ (800280c <HAL_I2C_Init+0x274>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d807      	bhi.n	800261c <HAL_I2C_Init+0x84>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4a80      	ldr	r2, [pc, #512]	@ (8002810 <HAL_I2C_Init+0x278>)
 8002610:	4293      	cmp	r3, r2
 8002612:	bf94      	ite	ls
 8002614:	2301      	movls	r3, #1
 8002616:	2300      	movhi	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	e006      	b.n	800262a <HAL_I2C_Init+0x92>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4a7d      	ldr	r2, [pc, #500]	@ (8002814 <HAL_I2C_Init+0x27c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	bf94      	ite	ls
 8002624:	2301      	movls	r3, #1
 8002626:	2300      	movhi	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0e7      	b.n	8002802 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4a78      	ldr	r2, [pc, #480]	@ (8002818 <HAL_I2C_Init+0x280>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0c9b      	lsrs	r3, r3, #18
 800263c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	430a      	orrs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a6a      	ldr	r2, [pc, #424]	@ (800280c <HAL_I2C_Init+0x274>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d802      	bhi.n	800266c <HAL_I2C_Init+0xd4>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3301      	adds	r3, #1
 800266a:	e009      	b.n	8002680 <HAL_I2C_Init+0xe8>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	4a69      	ldr	r2, [pc, #420]	@ (800281c <HAL_I2C_Init+0x284>)
 8002678:	fba2 2303 	umull	r2, r3, r2, r3
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	3301      	adds	r3, #1
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	430b      	orrs	r3, r1
 8002686:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002692:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	495c      	ldr	r1, [pc, #368]	@ (800280c <HAL_I2C_Init+0x274>)
 800269c:	428b      	cmp	r3, r1
 800269e:	d819      	bhi.n	80026d4 <HAL_I2C_Init+0x13c>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1e59      	subs	r1, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ae:	1c59      	adds	r1, r3, #1
 80026b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026b4:	400b      	ands	r3, r1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_I2C_Init+0x138>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1e59      	subs	r1, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ce:	e051      	b.n	8002774 <HAL_I2C_Init+0x1dc>
 80026d0:	2304      	movs	r3, #4
 80026d2:	e04f      	b.n	8002774 <HAL_I2C_Init+0x1dc>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d111      	bne.n	8002700 <HAL_I2C_Init+0x168>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e58      	subs	r0, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	440b      	add	r3, r1
 80026ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	e012      	b.n	8002726 <HAL_I2C_Init+0x18e>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1e58      	subs	r0, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	0099      	lsls	r1, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	fbb0 f3f3 	udiv	r3, r0, r3
 8002716:	3301      	adds	r3, #1
 8002718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_I2C_Init+0x196>
 800272a:	2301      	movs	r3, #1
 800272c:	e022      	b.n	8002774 <HAL_I2C_Init+0x1dc>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10e      	bne.n	8002754 <HAL_I2C_Init+0x1bc>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1e58      	subs	r0, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6859      	ldr	r1, [r3, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	440b      	add	r3, r1
 8002744:	fbb0 f3f3 	udiv	r3, r0, r3
 8002748:	3301      	adds	r3, #1
 800274a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002752:	e00f      	b.n	8002774 <HAL_I2C_Init+0x1dc>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1e58      	subs	r0, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	0099      	lsls	r1, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	fbb0 f3f3 	udiv	r3, r0, r3
 800276a:	3301      	adds	r3, #1
 800276c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002770:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	6809      	ldr	r1, [r1, #0]
 8002778:	4313      	orrs	r3, r2
 800277a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69da      	ldr	r2, [r3, #28]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6911      	ldr	r1, [r2, #16]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68d2      	ldr	r2, [r2, #12]
 80027ae:	4311      	orrs	r1, r2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	430b      	orrs	r3, r1
 80027b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	000186a0 	.word	0x000186a0
 8002810:	001e847f 	.word	0x001e847f
 8002814:	003d08ff 	.word	0x003d08ff
 8002818:	431bde83 	.word	0x431bde83
 800281c:	10624dd3 	.word	0x10624dd3

08002820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e272      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8087 	beq.w	800294e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002840:	4b92      	ldr	r3, [pc, #584]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b04      	cmp	r3, #4
 800284a:	d00c      	beq.n	8002866 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800284c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d112      	bne.n	800287e <HAL_RCC_OscConfig+0x5e>
 8002858:	4b8c      	ldr	r3, [pc, #560]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002864:	d10b      	bne.n	800287e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002866:	4b89      	ldr	r3, [pc, #548]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d06c      	beq.n	800294c <HAL_RCC_OscConfig+0x12c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d168      	bne.n	800294c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e24c      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x76>
 8002888:	4b80      	ldr	r3, [pc, #512]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a7f      	ldr	r2, [pc, #508]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800288e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e02e      	b.n	80028f4 <HAL_RCC_OscConfig+0xd4>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x98>
 800289e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a7a      	ldr	r2, [pc, #488]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4b78      	ldr	r3, [pc, #480]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a77      	ldr	r2, [pc, #476]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e01d      	b.n	80028f4 <HAL_RCC_OscConfig+0xd4>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0xbc>
 80028c2:	4b72      	ldr	r3, [pc, #456]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a71      	ldr	r2, [pc, #452]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b6f      	ldr	r3, [pc, #444]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e00b      	b.n	80028f4 <HAL_RCC_OscConfig+0xd4>
 80028dc:	4b6b      	ldr	r3, [pc, #428]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b68      	ldr	r3, [pc, #416]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a67      	ldr	r2, [pc, #412]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80028ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7ff facc 	bl	8001e98 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7ff fac8 	bl	8001e98 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	@ 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e200      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002916:	4b5d      	ldr	r3, [pc, #372]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0xe4>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7ff fab8 	bl	8001e98 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800292c:	f7ff fab4 	bl	8001e98 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	@ 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1ec      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293e:	4b53      	ldr	r3, [pc, #332]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x10c>
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d063      	beq.n	8002a22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800295a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002966:	4b49      	ldr	r3, [pc, #292]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b08      	cmp	r3, #8
 8002970:	d11c      	bne.n	80029ac <HAL_RCC_OscConfig+0x18c>
 8002972:	4b46      	ldr	r3, [pc, #280]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d116      	bne.n	80029ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297e:	4b43      	ldr	r3, [pc, #268]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_RCC_OscConfig+0x176>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e1c0      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002996:	4b3d      	ldr	r3, [pc, #244]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4939      	ldr	r1, [pc, #228]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029aa:	e03a      	b.n	8002a22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d020      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b4:	4b36      	ldr	r3, [pc, #216]	@ (8002a90 <HAL_RCC_OscConfig+0x270>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7ff fa6d 	bl	8001e98 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c2:	f7ff fa69 	bl	8001e98 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e1a1      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4927      	ldr	r1, [pc, #156]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]
 80029f4:	e015      	b.n	8002a22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f6:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <HAL_RCC_OscConfig+0x270>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7ff fa4c 	bl	8001e98 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a04:	f7ff fa48 	bl	8001e98 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e180      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	4b1d      	ldr	r3, [pc, #116]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d03a      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d019      	beq.n	8002a6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a36:	4b17      	ldr	r3, [pc, #92]	@ (8002a94 <HAL_RCC_OscConfig+0x274>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3c:	f7ff fa2c 	bl	8001e98 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a44:	f7ff fa28 	bl	8001e98 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e160      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a56:	4b0d      	ldr	r3, [pc, #52]	@ (8002a8c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a62:	2001      	movs	r0, #1
 8002a64:	f000 face 	bl	8003004 <RCC_Delay>
 8002a68:	e01c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a94 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a70:	f7ff fa12 	bl	8001e98 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a76:	e00f      	b.n	8002a98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a78:	f7ff fa0e 	bl	8001e98 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d908      	bls.n	8002a98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e146      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	42420000 	.word	0x42420000
 8002a94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a98:	4b92      	ldr	r3, [pc, #584]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e9      	bne.n	8002a78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80a6 	beq.w	8002bfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10d      	bne.n	8002ade <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	4b88      	ldr	r3, [pc, #544]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	4a87      	ldr	r2, [pc, #540]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002acc:	61d3      	str	r3, [r2, #28]
 8002ace:	4b85      	ldr	r3, [pc, #532]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b82      	ldr	r3, [pc, #520]	@ (8002ce8 <HAL_RCC_OscConfig+0x4c8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce8 <HAL_RCC_OscConfig+0x4c8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a7e      	ldr	r2, [pc, #504]	@ (8002ce8 <HAL_RCC_OscConfig+0x4c8>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7ff f9cf 	bl	8001e98 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7ff f9cb 	bl	8001e98 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b64      	cmp	r3, #100	@ 0x64
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e103      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b75      	ldr	r3, [pc, #468]	@ (8002ce8 <HAL_RCC_OscConfig+0x4c8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x312>
 8002b24:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4a6e      	ldr	r2, [pc, #440]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6213      	str	r3, [r2, #32]
 8002b30:	e02d      	b.n	8002b8e <HAL_RCC_OscConfig+0x36e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x334>
 8002b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4a69      	ldr	r2, [pc, #420]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	6213      	str	r3, [r2, #32]
 8002b46:	4b67      	ldr	r3, [pc, #412]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	4a66      	ldr	r2, [pc, #408]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	f023 0304 	bic.w	r3, r3, #4
 8002b50:	6213      	str	r3, [r2, #32]
 8002b52:	e01c      	b.n	8002b8e <HAL_RCC_OscConfig+0x36e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d10c      	bne.n	8002b76 <HAL_RCC_OscConfig+0x356>
 8002b5c:	4b61      	ldr	r3, [pc, #388]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4a60      	ldr	r2, [pc, #384]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	6213      	str	r3, [r2, #32]
 8002b68:	4b5e      	ldr	r3, [pc, #376]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6213      	str	r3, [r2, #32]
 8002b74:	e00b      	b.n	8002b8e <HAL_RCC_OscConfig+0x36e>
 8002b76:	4b5b      	ldr	r3, [pc, #364]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6213      	str	r3, [r2, #32]
 8002b82:	4b58      	ldr	r3, [pc, #352]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a57      	ldr	r2, [pc, #348]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	f023 0304 	bic.w	r3, r3, #4
 8002b8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d015      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b96:	f7ff f97f 	bl	8001e98 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9e:	f7ff f97b 	bl	8001e98 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e0b1      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ee      	beq.n	8002b9e <HAL_RCC_OscConfig+0x37e>
 8002bc0:	e014      	b.n	8002bec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc2:	f7ff f969 	bl	8001e98 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bca:	f7ff f965 	bl	8001e98 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e09b      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	4b40      	ldr	r3, [pc, #256]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ee      	bne.n	8002bca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d105      	bne.n	8002bfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8087 	beq.w	8002d16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c08:	4b36      	ldr	r3, [pc, #216]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d061      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d146      	bne.n	8002caa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1c:	4b33      	ldr	r3, [pc, #204]	@ (8002cec <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7ff f939 	bl	8001e98 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7ff f935 	bl	8001e98 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e06d      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3c:	4b29      	ldr	r3, [pc, #164]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c50:	d108      	bne.n	8002c64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c52:	4b24      	ldr	r3, [pc, #144]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	4921      	ldr	r1, [pc, #132]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a19      	ldr	r1, [r3, #32]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	430b      	orrs	r3, r1
 8002c76:	491b      	ldr	r1, [pc, #108]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_RCC_OscConfig+0x4cc>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7ff f909 	bl	8001e98 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7ff f905 	bl	8001e98 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e03d      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x46a>
 8002ca8:	e035      	b.n	8002d16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <HAL_RCC_OscConfig+0x4cc>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7ff f8f2 	bl	8001e98 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7ff f8ee 	bl	8001e98 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e026      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x498>
 8002cd6:	e01e      	b.n	8002d16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e019      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <HAL_RCC_OscConfig+0x500>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0d0      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d910      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b67      	ldr	r3, [pc, #412]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 0207 	bic.w	r2, r3, #7
 8002d4e:	4965      	ldr	r1, [pc, #404]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b63      	ldr	r3, [pc, #396]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b8      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d80:	4b59      	ldr	r3, [pc, #356]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4a58      	ldr	r2, [pc, #352]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d98:	4b53      	ldr	r3, [pc, #332]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a52      	ldr	r2, [pc, #328]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002da2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b50      	ldr	r3, [pc, #320]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	494d      	ldr	r1, [pc, #308]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d040      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b47      	ldr	r3, [pc, #284]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d115      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e07f      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de2:	4b41      	ldr	r3, [pc, #260]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e073      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e06b      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e02:	4b39      	ldr	r3, [pc, #228]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f023 0203 	bic.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	4936      	ldr	r1, [pc, #216]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e14:	f7ff f840 	bl	8001e98 <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	e00a      	b.n	8002e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1c:	f7ff f83c 	bl	8001e98 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e053      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 020c 	and.w	r2, r3, #12
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d1eb      	bne.n	8002e1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e44:	4b27      	ldr	r3, [pc, #156]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d210      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e52:	4b24      	ldr	r3, [pc, #144]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 0207 	bic.w	r2, r3, #7
 8002e5a:	4922      	ldr	r1, [pc, #136]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b20      	ldr	r3, [pc, #128]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e032      	b.n	8002eda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e80:	4b19      	ldr	r3, [pc, #100]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4916      	ldr	r1, [pc, #88]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	490e      	ldr	r1, [pc, #56]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eb2:	f000 f821 	bl	8002ef8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	490a      	ldr	r1, [pc, #40]	@ (8002eec <HAL_RCC_ClockConfig+0x1c8>)
 8002ec4:	5ccb      	ldrb	r3, [r1, r3]
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	4a09      	ldr	r2, [pc, #36]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ece:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe ff9e 	bl	8001e14 <HAL_InitTick>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40022000 	.word	0x40022000
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08007438 	.word	0x08007438
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	20000004 	.word	0x20000004

08002ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f12:	4b1e      	ldr	r3, [pc, #120]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d002      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x30>
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d003      	beq.n	8002f2e <HAL_RCC_GetSysClockFreq+0x36>
 8002f26:	e027      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f28:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f2a:	613b      	str	r3, [r7, #16]
      break;
 8002f2c:	e027      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	0c9b      	lsrs	r3, r3, #18
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	4a17      	ldr	r2, [pc, #92]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f38:	5cd3      	ldrb	r3, [r2, r3]
 8002f3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f46:	4b11      	ldr	r3, [pc, #68]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	0c5b      	lsrs	r3, r3, #17
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	4a11      	ldr	r2, [pc, #68]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f52:	5cd3      	ldrb	r3, [r2, r3]
 8002f54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a0d      	ldr	r2, [pc, #52]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f5a:	fb03 f202 	mul.w	r2, r3, r2
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e004      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	613b      	str	r3, [r7, #16]
      break;
 8002f76:	e002      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f7a:	613b      	str	r3, [r7, #16]
      break;
 8002f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7e:	693b      	ldr	r3, [r7, #16]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	007a1200 	.word	0x007a1200
 8002f94:	08007450 	.word	0x08007450
 8002f98:	08007460 	.word	0x08007460
 8002f9c:	003d0900 	.word	0x003d0900

08002fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa4:	4b02      	ldr	r3, [pc, #8]	@ (8002fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	20000000 	.word	0x20000000

08002fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb8:	f7ff fff2 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4903      	ldr	r1, [pc, #12]	@ (8002fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	08007448 	.word	0x08007448

08002fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fe0:	f7ff ffde 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	0adb      	lsrs	r3, r3, #11
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4903      	ldr	r1, [pc, #12]	@ (8003000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000
 8003000:	08007448 	.word	0x08007448

08003004 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800300c:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <RCC_Delay+0x34>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <RCC_Delay+0x38>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	0a5b      	lsrs	r3, r3, #9
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003020:	bf00      	nop
  }
  while (Delay --);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1e5a      	subs	r2, r3, #1
 8003026:	60fa      	str	r2, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f9      	bne.n	8003020 <RCC_Delay+0x1c>
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	20000000 	.word	0x20000000
 800303c:	10624dd3 	.word	0x10624dd3

08003040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e076      	b.n	8003140 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d108      	bne.n	800306c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003062:	d009      	beq.n	8003078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
 800306a:	e005      	b.n	8003078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe fc4a 	bl	800192c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fc:	ea42 0103 	orr.w	r1, r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	0c1a      	lsrs	r2, r3, #16
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f002 0204 	and.w	r2, r2, #4
 800311e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800312e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e041      	b.n	80031de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fe fc26 	bl	80019c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3304      	adds	r3, #4
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f000 f9d6 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e03a      	b.n	8003276 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a18      	ldr	r2, [pc, #96]	@ (8003280 <HAL_TIM_Base_Start_IT+0x98>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00e      	beq.n	8003240 <HAL_TIM_Base_Start_IT+0x58>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800322a:	d009      	beq.n	8003240 <HAL_TIM_Base_Start_IT+0x58>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a14      	ldr	r2, [pc, #80]	@ (8003284 <HAL_TIM_Base_Start_IT+0x9c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d004      	beq.n	8003240 <HAL_TIM_Base_Start_IT+0x58>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a13      	ldr	r2, [pc, #76]	@ (8003288 <HAL_TIM_Base_Start_IT+0xa0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d111      	bne.n	8003264 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b06      	cmp	r3, #6
 8003250:	d010      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003262:	e007      	b.n	8003274 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	40012c00 	.word	0x40012c00
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800

0800328c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d020      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01b      	beq.n	80032f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0202 	mvn.w	r2, #2
 80032c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f913 	bl	8003502 <HAL_TIM_IC_CaptureCallback>
 80032dc:	e005      	b.n	80032ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f906 	bl	80034f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f915 	bl	8003514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d020      	beq.n	800333c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01b      	beq.n	800333c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0204 	mvn.w	r2, #4
 800330c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8ed 	bl	8003502 <HAL_TIM_IC_CaptureCallback>
 8003328:	e005      	b.n	8003336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8e0 	bl	80034f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f8ef 	bl	8003514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d020      	beq.n	8003388 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01b      	beq.n	8003388 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0208 	mvn.w	r2, #8
 8003358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2204      	movs	r2, #4
 800335e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f8c7 	bl	8003502 <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f8ba 	bl	80034f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f8c9 	bl	8003514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b00      	cmp	r3, #0
 8003390:	d020      	beq.n	80033d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01b      	beq.n	80033d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0210 	mvn.w	r2, #16
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2208      	movs	r2, #8
 80033aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f8a1 	bl	8003502 <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f894 	bl	80034f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f8a3 	bl	8003514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00c      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0201 	mvn.w	r2, #1
 80033f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe fa14 	bl	8001820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fa71 	bl	80038fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00c      	beq.n	8003440 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f873 	bl	8003526 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00c      	beq.n	8003464 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0220 	mvn.w	r2, #32
 800345c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fa44 	bl	80038ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003480:	2302      	movs	r3, #2
 8003482:	e031      	b.n	80034e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003494:	6839      	ldr	r1, [r7, #0]
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8bc 	bl	8003614 <TIM_SlaveTimer_SetConfig>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e018      	b.n	80034e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034c4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80034d4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr

08003514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a2f      	ldr	r2, [pc, #188]	@ (8003608 <TIM_Base_SetConfig+0xd0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00b      	beq.n	8003568 <TIM_Base_SetConfig+0x30>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003556:	d007      	beq.n	8003568 <TIM_Base_SetConfig+0x30>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a2c      	ldr	r2, [pc, #176]	@ (800360c <TIM_Base_SetConfig+0xd4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <TIM_Base_SetConfig+0x30>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a2b      	ldr	r2, [pc, #172]	@ (8003610 <TIM_Base_SetConfig+0xd8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d108      	bne.n	800357a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800356e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a22      	ldr	r2, [pc, #136]	@ (8003608 <TIM_Base_SetConfig+0xd0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00b      	beq.n	800359a <TIM_Base_SetConfig+0x62>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003588:	d007      	beq.n	800359a <TIM_Base_SetConfig+0x62>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1f      	ldr	r2, [pc, #124]	@ (800360c <TIM_Base_SetConfig+0xd4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <TIM_Base_SetConfig+0x62>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1e      	ldr	r2, [pc, #120]	@ (8003610 <TIM_Base_SetConfig+0xd8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003608 <TIM_Base_SetConfig+0xd0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d103      	bne.n	80035e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f023 0201 	bic.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	611a      	str	r2, [r3, #16]
  }
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800

08003614 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003630:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f023 0307 	bic.w	r3, r3, #7
 8003642:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b70      	cmp	r3, #112	@ 0x70
 800365c:	d01a      	beq.n	8003694 <TIM_SlaveTimer_SetConfig+0x80>
 800365e:	2b70      	cmp	r3, #112	@ 0x70
 8003660:	d860      	bhi.n	8003724 <TIM_SlaveTimer_SetConfig+0x110>
 8003662:	2b60      	cmp	r3, #96	@ 0x60
 8003664:	d054      	beq.n	8003710 <TIM_SlaveTimer_SetConfig+0xfc>
 8003666:	2b60      	cmp	r3, #96	@ 0x60
 8003668:	d85c      	bhi.n	8003724 <TIM_SlaveTimer_SetConfig+0x110>
 800366a:	2b50      	cmp	r3, #80	@ 0x50
 800366c:	d046      	beq.n	80036fc <TIM_SlaveTimer_SetConfig+0xe8>
 800366e:	2b50      	cmp	r3, #80	@ 0x50
 8003670:	d858      	bhi.n	8003724 <TIM_SlaveTimer_SetConfig+0x110>
 8003672:	2b40      	cmp	r3, #64	@ 0x40
 8003674:	d019      	beq.n	80036aa <TIM_SlaveTimer_SetConfig+0x96>
 8003676:	2b40      	cmp	r3, #64	@ 0x40
 8003678:	d854      	bhi.n	8003724 <TIM_SlaveTimer_SetConfig+0x110>
 800367a:	2b30      	cmp	r3, #48	@ 0x30
 800367c:	d055      	beq.n	800372a <TIM_SlaveTimer_SetConfig+0x116>
 800367e:	2b30      	cmp	r3, #48	@ 0x30
 8003680:	d850      	bhi.n	8003724 <TIM_SlaveTimer_SetConfig+0x110>
 8003682:	2b20      	cmp	r3, #32
 8003684:	d051      	beq.n	800372a <TIM_SlaveTimer_SetConfig+0x116>
 8003686:	2b20      	cmp	r3, #32
 8003688:	d84c      	bhi.n	8003724 <TIM_SlaveTimer_SetConfig+0x110>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d04d      	beq.n	800372a <TIM_SlaveTimer_SetConfig+0x116>
 800368e:	2b10      	cmp	r3, #16
 8003690:	d04b      	beq.n	800372a <TIM_SlaveTimer_SetConfig+0x116>
 8003692:	e047      	b.n	8003724 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80036a4:	f000 f8a4 	bl	80037f0 <TIM_ETR_SetConfig>
      break;
 80036a8:	e040      	b.n	800372c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b05      	cmp	r3, #5
 80036b0:	d101      	bne.n	80036b6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e03b      	b.n	800372e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6a1a      	ldr	r2, [r3, #32]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036dc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	621a      	str	r2, [r3, #32]
      break;
 80036fa:	e017      	b.n	800372c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003708:	461a      	mov	r2, r3
 800370a:	f000 f814 	bl	8003736 <TIM_TI1_ConfigInputStage>
      break;
 800370e:	e00d      	b.n	800372c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800371c:	461a      	mov	r2, r3
 800371e:	f000 f838 	bl	8003792 <TIM_TI2_ConfigInputStage>
      break;
 8003722:	e003      	b.n	800372c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	75fb      	strb	r3, [r7, #23]
      break;
 8003728:	e000      	b.n	800372c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800372a:	bf00      	nop
  }

  return status;
 800372c:	7dfb      	ldrb	r3, [r7, #23]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003736:	b480      	push	{r7}
 8003738:	b087      	sub	sp, #28
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f023 0201 	bic.w	r2, r3, #1
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003760:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f023 030a 	bic.w	r3, r3, #10
 8003772:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	621a      	str	r2, [r3, #32]
}
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr

08003792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003792:	b480      	push	{r7}
 8003794:	b087      	sub	sp, #28
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f023 0210 	bic.w	r2, r3, #16
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	031b      	lsls	r3, r3, #12
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800380a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	021a      	lsls	r2, r3, #8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	431a      	orrs	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4313      	orrs	r3, r2
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	609a      	str	r2, [r3, #8]
}
 8003824:	bf00      	nop
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr
	...

08003830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003844:	2302      	movs	r3, #2
 8003846:	e046      	b.n	80038d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800386e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a16      	ldr	r2, [pc, #88]	@ (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00e      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003894:	d009      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a12      	ldr	r2, [pc, #72]	@ (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a10      	ldr	r2, [pc, #64]	@ (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d10c      	bne.n	80038c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	40012c00 	.word	0x40012c00
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800

080038ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e042      	b.n	80039a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fe f860 	bl	80019fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2224      	movs	r2, #36	@ 0x24
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fdb7 	bl	80044c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	@ 0x28
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d175      	bne.n	8003abc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_UART_Transmit+0x2c>
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e06e      	b.n	8003abe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2221      	movs	r2, #33	@ 0x21
 80039ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ee:	f7fe fa53 	bl	8001e98 <HAL_GetTick>
 80039f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a08:	d108      	bne.n	8003a1c <HAL_UART_Transmit+0x6c>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d104      	bne.n	8003a1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	e003      	b.n	8003a24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a24:	e02e      	b.n	8003a84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2180      	movs	r1, #128	@ 0x80
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fb1c 	bl	800406e <UART_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e03a      	b.n	8003abe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	3302      	adds	r3, #2
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	e007      	b.n	8003a76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	3301      	adds	r3, #1
 8003a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1cb      	bne.n	8003a26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2200      	movs	r2, #0
 8003a96:	2140      	movs	r1, #64	@ 0x40
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fae8 	bl	800406e <UART_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e006      	b.n	8003abe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e000      	b.n	8003abe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
  }
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d112      	bne.n	8003b06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <HAL_UART_Receive_IT+0x26>
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e00b      	b.n	8003b08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	461a      	mov	r2, r3
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fb0f 	bl	8004120 <UART_Start_Receive_IT>
 8003b02:	4603      	mov	r3, r0
 8003b04:	e000      	b.n	8003b08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
  }
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b0ba      	sub	sp, #232	@ 0xe8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10f      	bne.n	8003b76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_UART_IRQHandler+0x66>
 8003b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fbec 	bl	800434c <UART_Receive_IT>
      return;
 8003b74:	e25b      	b.n	800402e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80de 	beq.w	8003d3c <HAL_UART_IRQHandler+0x22c>
 8003b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80d1 	beq.w	8003d3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_UART_IRQHandler+0xae>
 8003ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	f043 0201 	orr.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <HAL_UART_IRQHandler+0xd2>
 8003bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bda:	f043 0202 	orr.w	r2, r3, #2
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <HAL_UART_IRQHandler+0xf6>
 8003bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfe:	f043 0204 	orr.w	r2, r3, #4
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d011      	beq.n	8003c36 <HAL_UART_IRQHandler+0x126>
 8003c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d105      	bne.n	8003c2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	f043 0208 	orr.w	r2, r3, #8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 81f2 	beq.w	8004024 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_UART_IRQHandler+0x14e>
 8003c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fb77 	bl	800434c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf14      	ite	ne
 8003c6c:	2301      	movne	r3, #1
 8003c6e:	2300      	moveq	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d103      	bne.n	8003c8a <HAL_UART_IRQHandler+0x17a>
 8003c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d04f      	beq.n	8003d2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fa81 	bl	8004192 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d041      	beq.n	8003d22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cac:	e853 3f00 	ldrex	r3, [r3]
 8003cb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3314      	adds	r3, #20
 8003cc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1d9      	bne.n	8003c9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d013      	beq.n	8003d1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ef0 <HAL_UART_IRQHandler+0x3e0>)
 8003cf8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe fa1c 	bl	800213c <HAL_DMA_Abort_IT>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d016      	beq.n	8003d38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d14:	4610      	mov	r0, r2
 8003d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	e00e      	b.n	8003d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f993 	bl	8004046 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	e00a      	b.n	8003d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f98f 	bl	8004046 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	e006      	b.n	8003d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f98b 	bl	8004046 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d36:	e175      	b.n	8004024 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d38:	bf00      	nop
    return;
 8003d3a:	e173      	b.n	8004024 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	f040 814f 	bne.w	8003fe4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 8148 	beq.w	8003fe4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8141 	beq.w	8003fe4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80b6 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8145 	beq.w	8004028 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003da6:	429a      	cmp	r2, r3
 8003da8:	f080 813e 	bcs.w	8004028 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003db2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	f000 8088 	beq.w	8003ed0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003dd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	330c      	adds	r3, #12
 8003de8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003dec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003df0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003df8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1d9      	bne.n	8003dc0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3314      	adds	r3, #20
 8003e12:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3314      	adds	r3, #20
 8003e2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e30:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e3c:	e841 2300 	strex	r3, r2, [r1]
 8003e40:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e1      	bne.n	8003e0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3314      	adds	r3, #20
 8003e4e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e52:	e853 3f00 	ldrex	r3, [r3]
 8003e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3314      	adds	r3, #20
 8003e68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e6c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e6e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e3      	bne.n	8003e48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ea0:	f023 0310 	bic.w	r3, r3, #16
 8003ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003eb2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003eb4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003eb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e3      	bne.n	8003e8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe f8fb 	bl	80020c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8b6 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eec:	e09c      	b.n	8004028 <HAL_UART_IRQHandler+0x518>
 8003eee:	bf00      	nop
 8003ef0:	08004257 	.word	0x08004257
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 808e 	beq.w	800402c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8089 	beq.w	800402c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e3      	bne.n	8003f1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3314      	adds	r3, #20
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	623b      	str	r3, [r7, #32]
   return(result);
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3314      	adds	r3, #20
 8003f72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f76:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e3      	bne.n	8003f52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0310 	bic.w	r3, r3, #16
 8003fae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003fbc:	61fa      	str	r2, [r7, #28]
 8003fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	69b9      	ldr	r1, [r7, #24]
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e3      	bne.n	8003f98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f83b 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fe2:	e023      	b.n	800402c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <HAL_UART_IRQHandler+0x4f4>
 8003ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f93e 	bl	800427e <UART_Transmit_IT>
    return;
 8004002:	e014      	b.n	800402e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00e      	beq.n	800402e <HAL_UART_IRQHandler+0x51e>
 8004010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f97d 	bl	800431c <UART_EndTransmit_IT>
    return;
 8004022:	e004      	b.n	800402e <HAL_UART_IRQHandler+0x51e>
    return;
 8004024:	bf00      	nop
 8004026:	e002      	b.n	800402e <HAL_UART_IRQHandler+0x51e>
      return;
 8004028:	bf00      	nop
 800402a:	e000      	b.n	800402e <HAL_UART_IRQHandler+0x51e>
      return;
 800402c:	bf00      	nop
  }
}
 800402e:	37e8      	adds	r7, #232	@ 0xe8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr

0800406e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	603b      	str	r3, [r7, #0]
 800407a:	4613      	mov	r3, r2
 800407c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800407e:	e03b      	b.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004086:	d037      	beq.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004088:	f7fd ff06 	bl	8001e98 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	6a3a      	ldr	r2, [r7, #32]
 8004094:	429a      	cmp	r2, r3
 8004096:	d302      	bcc.n	800409e <UART_WaitOnFlagUntilTimeout+0x30>
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e03a      	b.n	8004118 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d023      	beq.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b80      	cmp	r3, #128	@ 0x80
 80040b4:	d020      	beq.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b40      	cmp	r3, #64	@ 0x40
 80040ba:	d01d      	beq.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d116      	bne.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f856 	bl	8004192 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2208      	movs	r2, #8
 80040ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e00f      	b.n	8004118 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4013      	ands	r3, r2
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	429a      	cmp	r2, r3
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	429a      	cmp	r2, r3
 8004114:	d0b4      	beq.n	8004080 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	88fa      	ldrh	r2, [r7, #6]
 8004138:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	88fa      	ldrh	r2, [r7, #6]
 800413e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2222      	movs	r2, #34	@ 0x22
 800414a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004164:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695a      	ldr	r2, [r3, #20]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 0220 	orr.w	r2, r2, #32
 8004184:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004192:	b480      	push	{r7}
 8004194:	b095      	sub	sp, #84	@ 0x54
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	330c      	adds	r3, #12
 80041b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80041bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e5      	bne.n	800419a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3314      	adds	r3, #20
 80041d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3314      	adds	r3, #20
 80041ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e5      	bne.n	80041ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	2b01      	cmp	r3, #1
 8004208:	d119      	bne.n	800423e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	330c      	adds	r3, #12
 8004210:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	60bb      	str	r3, [r7, #8]
   return(result);
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f023 0310 	bic.w	r3, r3, #16
 8004220:	647b      	str	r3, [r7, #68]	@ 0x44
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	330c      	adds	r3, #12
 8004228:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800422a:	61ba      	str	r2, [r7, #24]
 800422c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6979      	ldr	r1, [r7, #20]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	613b      	str	r3, [r7, #16]
   return(result);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e5      	bne.n	800420a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800424c:	bf00      	nop
 800424e:	3754      	adds	r7, #84	@ 0x54
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr

08004256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f7ff fee8 	bl	8004046 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b21      	cmp	r3, #33	@ 0x21
 8004290:	d13e      	bne.n	8004310 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800429a:	d114      	bne.n	80042c6 <UART_Transmit_IT+0x48>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d110      	bne.n	80042c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	1c9a      	adds	r2, r3, #2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	621a      	str	r2, [r3, #32]
 80042c4:	e008      	b.n	80042d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	1c59      	adds	r1, r3, #1
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6211      	str	r1, [r2, #32]
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4619      	mov	r1, r3
 80042e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10f      	bne.n	800430c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800430a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	e000      	b.n	8004312 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004310:	2302      	movs	r3, #2
  }
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004332:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff fe79 	bl	8004034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08c      	sub	sp, #48	@ 0x30
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b22      	cmp	r3, #34	@ 0x22
 800435e:	f040 80ae 	bne.w	80044be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800436a:	d117      	bne.n	800439c <UART_Receive_IT+0x50>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d113      	bne.n	800439c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004374:	2300      	movs	r3, #0
 8004376:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	b29b      	uxth	r3, r3
 8004386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438a:	b29a      	uxth	r2, r3
 800438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	1c9a      	adds	r2, r3, #2
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	629a      	str	r2, [r3, #40]	@ 0x28
 800439a:	e026      	b.n	80043ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ae:	d007      	beq.n	80043c0 <UART_Receive_IT+0x74>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <UART_Receive_IT+0x82>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d106      	bne.n	80043ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e008      	b.n	80043e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4619      	mov	r1, r3
 80043f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d15d      	bne.n	80044ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0220 	bic.w	r2, r2, #32
 800440c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800441c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004440:	2b01      	cmp	r3, #1
 8004442:	d135      	bne.n	80044b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	613b      	str	r3, [r7, #16]
   return(result);
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f023 0310 	bic.w	r3, r3, #16
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	330c      	adds	r3, #12
 8004468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800446a:	623a      	str	r2, [r7, #32]
 800446c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	69f9      	ldr	r1, [r7, #28]
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	61bb      	str	r3, [r7, #24]
   return(result);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e5      	bne.n	800444a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b10      	cmp	r3, #16
 800448a:	d10a      	bne.n	80044a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fdd5 	bl	8004058 <HAL_UARTEx_RxEventCallback>
 80044ae:	e002      	b.n	80044b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7fd f959 	bl	8001768 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e002      	b.n	80044c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e000      	b.n	80044c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80044be:	2302      	movs	r3, #2
  }
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3730      	adds	r7, #48	@ 0x30
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004502:	f023 030c 	bic.w	r3, r3, #12
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	430b      	orrs	r3, r1
 800450e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a2c      	ldr	r2, [pc, #176]	@ (80045dc <UART_SetConfig+0x114>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d103      	bne.n	8004538 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004530:	f7fe fd54 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	e002      	b.n	800453e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004538:	f7fe fd3c 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 800453c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009a      	lsls	r2, r3, #2
 8004548:	441a      	add	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	4a22      	ldr	r2, [pc, #136]	@ (80045e0 <UART_SetConfig+0x118>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	0119      	lsls	r1, r3, #4
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	009a      	lsls	r2, r3, #2
 8004568:	441a      	add	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	fbb2 f2f3 	udiv	r2, r2, r3
 8004574:	4b1a      	ldr	r3, [pc, #104]	@ (80045e0 <UART_SetConfig+0x118>)
 8004576:	fba3 0302 	umull	r0, r3, r3, r2
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2064      	movs	r0, #100	@ 0x64
 800457e:	fb00 f303 	mul.w	r3, r0, r3
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	3332      	adds	r3, #50	@ 0x32
 8004588:	4a15      	ldr	r2, [pc, #84]	@ (80045e0 <UART_SetConfig+0x118>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004594:	4419      	add	r1, r3
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	009a      	lsls	r2, r3, #2
 80045a0:	441a      	add	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045ac:	4b0c      	ldr	r3, [pc, #48]	@ (80045e0 <UART_SetConfig+0x118>)
 80045ae:	fba3 0302 	umull	r0, r3, r3, r2
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	2064      	movs	r0, #100	@ 0x64
 80045b6:	fb00 f303 	mul.w	r3, r0, r3
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	3332      	adds	r3, #50	@ 0x32
 80045c0:	4a07      	ldr	r2, [pc, #28]	@ (80045e0 <UART_SetConfig+0x118>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	f003 020f 	and.w	r2, r3, #15
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	440a      	add	r2, r1
 80045d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40013800 	.word	0x40013800
 80045e0:	51eb851f 	.word	0x51eb851f

080045e4 <__cvt>:
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045ea:	461d      	mov	r5, r3
 80045ec:	bfbb      	ittet	lt
 80045ee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80045f2:	461d      	movlt	r5, r3
 80045f4:	2300      	movge	r3, #0
 80045f6:	232d      	movlt	r3, #45	@ 0x2d
 80045f8:	b088      	sub	sp, #32
 80045fa:	4614      	mov	r4, r2
 80045fc:	bfb8      	it	lt
 80045fe:	4614      	movlt	r4, r2
 8004600:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004602:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004604:	7013      	strb	r3, [r2, #0]
 8004606:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004608:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800460c:	f023 0820 	bic.w	r8, r3, #32
 8004610:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004614:	d005      	beq.n	8004622 <__cvt+0x3e>
 8004616:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800461a:	d100      	bne.n	800461e <__cvt+0x3a>
 800461c:	3601      	adds	r6, #1
 800461e:	2302      	movs	r3, #2
 8004620:	e000      	b.n	8004624 <__cvt+0x40>
 8004622:	2303      	movs	r3, #3
 8004624:	aa07      	add	r2, sp, #28
 8004626:	9204      	str	r2, [sp, #16]
 8004628:	aa06      	add	r2, sp, #24
 800462a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800462e:	e9cd 3600 	strd	r3, r6, [sp]
 8004632:	4622      	mov	r2, r4
 8004634:	462b      	mov	r3, r5
 8004636:	f000 fe7b 	bl	8005330 <_dtoa_r>
 800463a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800463e:	4607      	mov	r7, r0
 8004640:	d119      	bne.n	8004676 <__cvt+0x92>
 8004642:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004644:	07db      	lsls	r3, r3, #31
 8004646:	d50e      	bpl.n	8004666 <__cvt+0x82>
 8004648:	eb00 0906 	add.w	r9, r0, r6
 800464c:	2200      	movs	r2, #0
 800464e:	2300      	movs	r3, #0
 8004650:	4620      	mov	r0, r4
 8004652:	4629      	mov	r1, r5
 8004654:	f7fc f9a8 	bl	80009a8 <__aeabi_dcmpeq>
 8004658:	b108      	cbz	r0, 800465e <__cvt+0x7a>
 800465a:	f8cd 901c 	str.w	r9, [sp, #28]
 800465e:	2230      	movs	r2, #48	@ 0x30
 8004660:	9b07      	ldr	r3, [sp, #28]
 8004662:	454b      	cmp	r3, r9
 8004664:	d31e      	bcc.n	80046a4 <__cvt+0xc0>
 8004666:	4638      	mov	r0, r7
 8004668:	9b07      	ldr	r3, [sp, #28]
 800466a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800466c:	1bdb      	subs	r3, r3, r7
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	b008      	add	sp, #32
 8004672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004676:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800467a:	eb00 0906 	add.w	r9, r0, r6
 800467e:	d1e5      	bne.n	800464c <__cvt+0x68>
 8004680:	7803      	ldrb	r3, [r0, #0]
 8004682:	2b30      	cmp	r3, #48	@ 0x30
 8004684:	d10a      	bne.n	800469c <__cvt+0xb8>
 8004686:	2200      	movs	r2, #0
 8004688:	2300      	movs	r3, #0
 800468a:	4620      	mov	r0, r4
 800468c:	4629      	mov	r1, r5
 800468e:	f7fc f98b 	bl	80009a8 <__aeabi_dcmpeq>
 8004692:	b918      	cbnz	r0, 800469c <__cvt+0xb8>
 8004694:	f1c6 0601 	rsb	r6, r6, #1
 8004698:	f8ca 6000 	str.w	r6, [sl]
 800469c:	f8da 3000 	ldr.w	r3, [sl]
 80046a0:	4499      	add	r9, r3
 80046a2:	e7d3      	b.n	800464c <__cvt+0x68>
 80046a4:	1c59      	adds	r1, r3, #1
 80046a6:	9107      	str	r1, [sp, #28]
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e7d9      	b.n	8004660 <__cvt+0x7c>

080046ac <__exponent>:
 80046ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ae:	2900      	cmp	r1, #0
 80046b0:	bfb6      	itet	lt
 80046b2:	232d      	movlt	r3, #45	@ 0x2d
 80046b4:	232b      	movge	r3, #43	@ 0x2b
 80046b6:	4249      	neglt	r1, r1
 80046b8:	2909      	cmp	r1, #9
 80046ba:	7002      	strb	r2, [r0, #0]
 80046bc:	7043      	strb	r3, [r0, #1]
 80046be:	dd29      	ble.n	8004714 <__exponent+0x68>
 80046c0:	f10d 0307 	add.w	r3, sp, #7
 80046c4:	461d      	mov	r5, r3
 80046c6:	270a      	movs	r7, #10
 80046c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80046cc:	461a      	mov	r2, r3
 80046ce:	fb07 1416 	mls	r4, r7, r6, r1
 80046d2:	3430      	adds	r4, #48	@ 0x30
 80046d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80046d8:	460c      	mov	r4, r1
 80046da:	2c63      	cmp	r4, #99	@ 0x63
 80046dc:	4631      	mov	r1, r6
 80046de:	f103 33ff 	add.w	r3, r3, #4294967295
 80046e2:	dcf1      	bgt.n	80046c8 <__exponent+0x1c>
 80046e4:	3130      	adds	r1, #48	@ 0x30
 80046e6:	1e94      	subs	r4, r2, #2
 80046e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80046ec:	4623      	mov	r3, r4
 80046ee:	1c41      	adds	r1, r0, #1
 80046f0:	42ab      	cmp	r3, r5
 80046f2:	d30a      	bcc.n	800470a <__exponent+0x5e>
 80046f4:	f10d 0309 	add.w	r3, sp, #9
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	42ac      	cmp	r4, r5
 80046fc:	bf88      	it	hi
 80046fe:	2300      	movhi	r3, #0
 8004700:	3302      	adds	r3, #2
 8004702:	4403      	add	r3, r0
 8004704:	1a18      	subs	r0, r3, r0
 8004706:	b003      	add	sp, #12
 8004708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800470a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800470e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004712:	e7ed      	b.n	80046f0 <__exponent+0x44>
 8004714:	2330      	movs	r3, #48	@ 0x30
 8004716:	3130      	adds	r1, #48	@ 0x30
 8004718:	7083      	strb	r3, [r0, #2]
 800471a:	70c1      	strb	r1, [r0, #3]
 800471c:	1d03      	adds	r3, r0, #4
 800471e:	e7f1      	b.n	8004704 <__exponent+0x58>

08004720 <_printf_float>:
 8004720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004724:	b091      	sub	sp, #68	@ 0x44
 8004726:	460c      	mov	r4, r1
 8004728:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800472c:	4616      	mov	r6, r2
 800472e:	461f      	mov	r7, r3
 8004730:	4605      	mov	r5, r0
 8004732:	f000 fce1 	bl	80050f8 <_localeconv_r>
 8004736:	6803      	ldr	r3, [r0, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	9308      	str	r3, [sp, #32]
 800473c:	f7fb fd08 	bl	8000150 <strlen>
 8004740:	2300      	movs	r3, #0
 8004742:	930e      	str	r3, [sp, #56]	@ 0x38
 8004744:	f8d8 3000 	ldr.w	r3, [r8]
 8004748:	9009      	str	r0, [sp, #36]	@ 0x24
 800474a:	3307      	adds	r3, #7
 800474c:	f023 0307 	bic.w	r3, r3, #7
 8004750:	f103 0208 	add.w	r2, r3, #8
 8004754:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004758:	f8d4 b000 	ldr.w	fp, [r4]
 800475c:	f8c8 2000 	str.w	r2, [r8]
 8004760:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004764:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004768:	930b      	str	r3, [sp, #44]	@ 0x2c
 800476a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800476e:	f04f 32ff 	mov.w	r2, #4294967295
 8004772:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004776:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800477a:	4b9c      	ldr	r3, [pc, #624]	@ (80049ec <_printf_float+0x2cc>)
 800477c:	f7fc f946 	bl	8000a0c <__aeabi_dcmpun>
 8004780:	bb70      	cbnz	r0, 80047e0 <_printf_float+0xc0>
 8004782:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004786:	f04f 32ff 	mov.w	r2, #4294967295
 800478a:	4b98      	ldr	r3, [pc, #608]	@ (80049ec <_printf_float+0x2cc>)
 800478c:	f7fc f920 	bl	80009d0 <__aeabi_dcmple>
 8004790:	bb30      	cbnz	r0, 80047e0 <_printf_float+0xc0>
 8004792:	2200      	movs	r2, #0
 8004794:	2300      	movs	r3, #0
 8004796:	4640      	mov	r0, r8
 8004798:	4649      	mov	r1, r9
 800479a:	f7fc f90f 	bl	80009bc <__aeabi_dcmplt>
 800479e:	b110      	cbz	r0, 80047a6 <_printf_float+0x86>
 80047a0:	232d      	movs	r3, #45	@ 0x2d
 80047a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047a6:	4a92      	ldr	r2, [pc, #584]	@ (80049f0 <_printf_float+0x2d0>)
 80047a8:	4b92      	ldr	r3, [pc, #584]	@ (80049f4 <_printf_float+0x2d4>)
 80047aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80047ae:	bf8c      	ite	hi
 80047b0:	4690      	movhi	r8, r2
 80047b2:	4698      	movls	r8, r3
 80047b4:	2303      	movs	r3, #3
 80047b6:	f04f 0900 	mov.w	r9, #0
 80047ba:	6123      	str	r3, [r4, #16]
 80047bc:	f02b 0304 	bic.w	r3, fp, #4
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	4633      	mov	r3, r6
 80047c4:	4621      	mov	r1, r4
 80047c6:	4628      	mov	r0, r5
 80047c8:	9700      	str	r7, [sp, #0]
 80047ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 80047cc:	f000 f9d4 	bl	8004b78 <_printf_common>
 80047d0:	3001      	adds	r0, #1
 80047d2:	f040 8090 	bne.w	80048f6 <_printf_float+0x1d6>
 80047d6:	f04f 30ff 	mov.w	r0, #4294967295
 80047da:	b011      	add	sp, #68	@ 0x44
 80047dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e0:	4642      	mov	r2, r8
 80047e2:	464b      	mov	r3, r9
 80047e4:	4640      	mov	r0, r8
 80047e6:	4649      	mov	r1, r9
 80047e8:	f7fc f910 	bl	8000a0c <__aeabi_dcmpun>
 80047ec:	b148      	cbz	r0, 8004802 <_printf_float+0xe2>
 80047ee:	464b      	mov	r3, r9
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bfb8      	it	lt
 80047f4:	232d      	movlt	r3, #45	@ 0x2d
 80047f6:	4a80      	ldr	r2, [pc, #512]	@ (80049f8 <_printf_float+0x2d8>)
 80047f8:	bfb8      	it	lt
 80047fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80047fe:	4b7f      	ldr	r3, [pc, #508]	@ (80049fc <_printf_float+0x2dc>)
 8004800:	e7d3      	b.n	80047aa <_printf_float+0x8a>
 8004802:	6863      	ldr	r3, [r4, #4]
 8004804:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	d13f      	bne.n	800488c <_printf_float+0x16c>
 800480c:	2306      	movs	r3, #6
 800480e:	6063      	str	r3, [r4, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	9206      	str	r2, [sp, #24]
 800481a:	aa0e      	add	r2, sp, #56	@ 0x38
 800481c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004820:	aa0d      	add	r2, sp, #52	@ 0x34
 8004822:	9203      	str	r2, [sp, #12]
 8004824:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004828:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800482c:	6863      	ldr	r3, [r4, #4]
 800482e:	4642      	mov	r2, r8
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	4628      	mov	r0, r5
 8004834:	464b      	mov	r3, r9
 8004836:	910a      	str	r1, [sp, #40]	@ 0x28
 8004838:	f7ff fed4 	bl	80045e4 <__cvt>
 800483c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800483e:	4680      	mov	r8, r0
 8004840:	2947      	cmp	r1, #71	@ 0x47
 8004842:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004844:	d128      	bne.n	8004898 <_printf_float+0x178>
 8004846:	1cc8      	adds	r0, r1, #3
 8004848:	db02      	blt.n	8004850 <_printf_float+0x130>
 800484a:	6863      	ldr	r3, [r4, #4]
 800484c:	4299      	cmp	r1, r3
 800484e:	dd40      	ble.n	80048d2 <_printf_float+0x1b2>
 8004850:	f1aa 0a02 	sub.w	sl, sl, #2
 8004854:	fa5f fa8a 	uxtb.w	sl, sl
 8004858:	4652      	mov	r2, sl
 800485a:	3901      	subs	r1, #1
 800485c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004860:	910d      	str	r1, [sp, #52]	@ 0x34
 8004862:	f7ff ff23 	bl	80046ac <__exponent>
 8004866:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004868:	4681      	mov	r9, r0
 800486a:	1813      	adds	r3, r2, r0
 800486c:	2a01      	cmp	r2, #1
 800486e:	6123      	str	r3, [r4, #16]
 8004870:	dc02      	bgt.n	8004878 <_printf_float+0x158>
 8004872:	6822      	ldr	r2, [r4, #0]
 8004874:	07d2      	lsls	r2, r2, #31
 8004876:	d501      	bpl.n	800487c <_printf_float+0x15c>
 8004878:	3301      	adds	r3, #1
 800487a:	6123      	str	r3, [r4, #16]
 800487c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004880:	2b00      	cmp	r3, #0
 8004882:	d09e      	beq.n	80047c2 <_printf_float+0xa2>
 8004884:	232d      	movs	r3, #45	@ 0x2d
 8004886:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800488a:	e79a      	b.n	80047c2 <_printf_float+0xa2>
 800488c:	2947      	cmp	r1, #71	@ 0x47
 800488e:	d1bf      	bne.n	8004810 <_printf_float+0xf0>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1bd      	bne.n	8004810 <_printf_float+0xf0>
 8004894:	2301      	movs	r3, #1
 8004896:	e7ba      	b.n	800480e <_printf_float+0xee>
 8004898:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800489c:	d9dc      	bls.n	8004858 <_printf_float+0x138>
 800489e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80048a2:	d118      	bne.n	80048d6 <_printf_float+0x1b6>
 80048a4:	2900      	cmp	r1, #0
 80048a6:	6863      	ldr	r3, [r4, #4]
 80048a8:	dd0b      	ble.n	80048c2 <_printf_float+0x1a2>
 80048aa:	6121      	str	r1, [r4, #16]
 80048ac:	b913      	cbnz	r3, 80048b4 <_printf_float+0x194>
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	07d0      	lsls	r0, r2, #31
 80048b2:	d502      	bpl.n	80048ba <_printf_float+0x19a>
 80048b4:	3301      	adds	r3, #1
 80048b6:	440b      	add	r3, r1
 80048b8:	6123      	str	r3, [r4, #16]
 80048ba:	f04f 0900 	mov.w	r9, #0
 80048be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80048c0:	e7dc      	b.n	800487c <_printf_float+0x15c>
 80048c2:	b913      	cbnz	r3, 80048ca <_printf_float+0x1aa>
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	07d2      	lsls	r2, r2, #31
 80048c8:	d501      	bpl.n	80048ce <_printf_float+0x1ae>
 80048ca:	3302      	adds	r3, #2
 80048cc:	e7f4      	b.n	80048b8 <_printf_float+0x198>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e7f2      	b.n	80048b8 <_printf_float+0x198>
 80048d2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80048d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048d8:	4299      	cmp	r1, r3
 80048da:	db05      	blt.n	80048e8 <_printf_float+0x1c8>
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	6121      	str	r1, [r4, #16]
 80048e0:	07d8      	lsls	r0, r3, #31
 80048e2:	d5ea      	bpl.n	80048ba <_printf_float+0x19a>
 80048e4:	1c4b      	adds	r3, r1, #1
 80048e6:	e7e7      	b.n	80048b8 <_printf_float+0x198>
 80048e8:	2900      	cmp	r1, #0
 80048ea:	bfcc      	ite	gt
 80048ec:	2201      	movgt	r2, #1
 80048ee:	f1c1 0202 	rsble	r2, r1, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	e7e0      	b.n	80048b8 <_printf_float+0x198>
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	055a      	lsls	r2, r3, #21
 80048fa:	d407      	bmi.n	800490c <_printf_float+0x1ec>
 80048fc:	6923      	ldr	r3, [r4, #16]
 80048fe:	4642      	mov	r2, r8
 8004900:	4631      	mov	r1, r6
 8004902:	4628      	mov	r0, r5
 8004904:	47b8      	blx	r7
 8004906:	3001      	adds	r0, #1
 8004908:	d12b      	bne.n	8004962 <_printf_float+0x242>
 800490a:	e764      	b.n	80047d6 <_printf_float+0xb6>
 800490c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004910:	f240 80dc 	bls.w	8004acc <_printf_float+0x3ac>
 8004914:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004918:	2200      	movs	r2, #0
 800491a:	2300      	movs	r3, #0
 800491c:	f7fc f844 	bl	80009a8 <__aeabi_dcmpeq>
 8004920:	2800      	cmp	r0, #0
 8004922:	d033      	beq.n	800498c <_printf_float+0x26c>
 8004924:	2301      	movs	r3, #1
 8004926:	4631      	mov	r1, r6
 8004928:	4628      	mov	r0, r5
 800492a:	4a35      	ldr	r2, [pc, #212]	@ (8004a00 <_printf_float+0x2e0>)
 800492c:	47b8      	blx	r7
 800492e:	3001      	adds	r0, #1
 8004930:	f43f af51 	beq.w	80047d6 <_printf_float+0xb6>
 8004934:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004938:	4543      	cmp	r3, r8
 800493a:	db02      	blt.n	8004942 <_printf_float+0x222>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	07d8      	lsls	r0, r3, #31
 8004940:	d50f      	bpl.n	8004962 <_printf_float+0x242>
 8004942:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004946:	4631      	mov	r1, r6
 8004948:	4628      	mov	r0, r5
 800494a:	47b8      	blx	r7
 800494c:	3001      	adds	r0, #1
 800494e:	f43f af42 	beq.w	80047d6 <_printf_float+0xb6>
 8004952:	f04f 0900 	mov.w	r9, #0
 8004956:	f108 38ff 	add.w	r8, r8, #4294967295
 800495a:	f104 0a1a 	add.w	sl, r4, #26
 800495e:	45c8      	cmp	r8, r9
 8004960:	dc09      	bgt.n	8004976 <_printf_float+0x256>
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	079b      	lsls	r3, r3, #30
 8004966:	f100 8102 	bmi.w	8004b6e <_printf_float+0x44e>
 800496a:	68e0      	ldr	r0, [r4, #12]
 800496c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800496e:	4298      	cmp	r0, r3
 8004970:	bfb8      	it	lt
 8004972:	4618      	movlt	r0, r3
 8004974:	e731      	b.n	80047da <_printf_float+0xba>
 8004976:	2301      	movs	r3, #1
 8004978:	4652      	mov	r2, sl
 800497a:	4631      	mov	r1, r6
 800497c:	4628      	mov	r0, r5
 800497e:	47b8      	blx	r7
 8004980:	3001      	adds	r0, #1
 8004982:	f43f af28 	beq.w	80047d6 <_printf_float+0xb6>
 8004986:	f109 0901 	add.w	r9, r9, #1
 800498a:	e7e8      	b.n	800495e <_printf_float+0x23e>
 800498c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800498e:	2b00      	cmp	r3, #0
 8004990:	dc38      	bgt.n	8004a04 <_printf_float+0x2e4>
 8004992:	2301      	movs	r3, #1
 8004994:	4631      	mov	r1, r6
 8004996:	4628      	mov	r0, r5
 8004998:	4a19      	ldr	r2, [pc, #100]	@ (8004a00 <_printf_float+0x2e0>)
 800499a:	47b8      	blx	r7
 800499c:	3001      	adds	r0, #1
 800499e:	f43f af1a 	beq.w	80047d6 <_printf_float+0xb6>
 80049a2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80049a6:	ea59 0303 	orrs.w	r3, r9, r3
 80049aa:	d102      	bne.n	80049b2 <_printf_float+0x292>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	07d9      	lsls	r1, r3, #31
 80049b0:	d5d7      	bpl.n	8004962 <_printf_float+0x242>
 80049b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049b6:	4631      	mov	r1, r6
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b8      	blx	r7
 80049bc:	3001      	adds	r0, #1
 80049be:	f43f af0a 	beq.w	80047d6 <_printf_float+0xb6>
 80049c2:	f04f 0a00 	mov.w	sl, #0
 80049c6:	f104 0b1a 	add.w	fp, r4, #26
 80049ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049cc:	425b      	negs	r3, r3
 80049ce:	4553      	cmp	r3, sl
 80049d0:	dc01      	bgt.n	80049d6 <_printf_float+0x2b6>
 80049d2:	464b      	mov	r3, r9
 80049d4:	e793      	b.n	80048fe <_printf_float+0x1de>
 80049d6:	2301      	movs	r3, #1
 80049d8:	465a      	mov	r2, fp
 80049da:	4631      	mov	r1, r6
 80049dc:	4628      	mov	r0, r5
 80049de:	47b8      	blx	r7
 80049e0:	3001      	adds	r0, #1
 80049e2:	f43f aef8 	beq.w	80047d6 <_printf_float+0xb6>
 80049e6:	f10a 0a01 	add.w	sl, sl, #1
 80049ea:	e7ee      	b.n	80049ca <_printf_float+0x2aa>
 80049ec:	7fefffff 	.word	0x7fefffff
 80049f0:	08007466 	.word	0x08007466
 80049f4:	08007462 	.word	0x08007462
 80049f8:	0800746e 	.word	0x0800746e
 80049fc:	0800746a 	.word	0x0800746a
 8004a00:	08007472 	.word	0x08007472
 8004a04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a06:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004a0a:	4553      	cmp	r3, sl
 8004a0c:	bfa8      	it	ge
 8004a0e:	4653      	movge	r3, sl
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	4699      	mov	r9, r3
 8004a14:	dc36      	bgt.n	8004a84 <_printf_float+0x364>
 8004a16:	f04f 0b00 	mov.w	fp, #0
 8004a1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a1e:	f104 021a 	add.w	r2, r4, #26
 8004a22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a24:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a26:	eba3 0309 	sub.w	r3, r3, r9
 8004a2a:	455b      	cmp	r3, fp
 8004a2c:	dc31      	bgt.n	8004a92 <_printf_float+0x372>
 8004a2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a30:	459a      	cmp	sl, r3
 8004a32:	dc3a      	bgt.n	8004aaa <_printf_float+0x38a>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	07da      	lsls	r2, r3, #31
 8004a38:	d437      	bmi.n	8004aaa <_printf_float+0x38a>
 8004a3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a3c:	ebaa 0903 	sub.w	r9, sl, r3
 8004a40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a42:	ebaa 0303 	sub.w	r3, sl, r3
 8004a46:	4599      	cmp	r9, r3
 8004a48:	bfa8      	it	ge
 8004a4a:	4699      	movge	r9, r3
 8004a4c:	f1b9 0f00 	cmp.w	r9, #0
 8004a50:	dc33      	bgt.n	8004aba <_printf_float+0x39a>
 8004a52:	f04f 0800 	mov.w	r8, #0
 8004a56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a5a:	f104 0b1a 	add.w	fp, r4, #26
 8004a5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a60:	ebaa 0303 	sub.w	r3, sl, r3
 8004a64:	eba3 0309 	sub.w	r3, r3, r9
 8004a68:	4543      	cmp	r3, r8
 8004a6a:	f77f af7a 	ble.w	8004962 <_printf_float+0x242>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	465a      	mov	r2, fp
 8004a72:	4631      	mov	r1, r6
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b8      	blx	r7
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f43f aeac 	beq.w	80047d6 <_printf_float+0xb6>
 8004a7e:	f108 0801 	add.w	r8, r8, #1
 8004a82:	e7ec      	b.n	8004a5e <_printf_float+0x33e>
 8004a84:	4642      	mov	r2, r8
 8004a86:	4631      	mov	r1, r6
 8004a88:	4628      	mov	r0, r5
 8004a8a:	47b8      	blx	r7
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d1c2      	bne.n	8004a16 <_printf_float+0x2f6>
 8004a90:	e6a1      	b.n	80047d6 <_printf_float+0xb6>
 8004a92:	2301      	movs	r3, #1
 8004a94:	4631      	mov	r1, r6
 8004a96:	4628      	mov	r0, r5
 8004a98:	920a      	str	r2, [sp, #40]	@ 0x28
 8004a9a:	47b8      	blx	r7
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	f43f ae9a 	beq.w	80047d6 <_printf_float+0xb6>
 8004aa2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004aa4:	f10b 0b01 	add.w	fp, fp, #1
 8004aa8:	e7bb      	b.n	8004a22 <_printf_float+0x302>
 8004aaa:	4631      	mov	r1, r6
 8004aac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b8      	blx	r7
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d1c0      	bne.n	8004a3a <_printf_float+0x31a>
 8004ab8:	e68d      	b.n	80047d6 <_printf_float+0xb6>
 8004aba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004abc:	464b      	mov	r3, r9
 8004abe:	4631      	mov	r1, r6
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	4442      	add	r2, r8
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d1c3      	bne.n	8004a52 <_printf_float+0x332>
 8004aca:	e684      	b.n	80047d6 <_printf_float+0xb6>
 8004acc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004ad0:	f1ba 0f01 	cmp.w	sl, #1
 8004ad4:	dc01      	bgt.n	8004ada <_printf_float+0x3ba>
 8004ad6:	07db      	lsls	r3, r3, #31
 8004ad8:	d536      	bpl.n	8004b48 <_printf_float+0x428>
 8004ada:	2301      	movs	r3, #1
 8004adc:	4642      	mov	r2, r8
 8004ade:	4631      	mov	r1, r6
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	47b8      	blx	r7
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	f43f ae76 	beq.w	80047d6 <_printf_float+0xb6>
 8004aea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004aee:	4631      	mov	r1, r6
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b8      	blx	r7
 8004af4:	3001      	adds	r0, #1
 8004af6:	f43f ae6e 	beq.w	80047d6 <_printf_float+0xb6>
 8004afa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004afe:	2200      	movs	r2, #0
 8004b00:	2300      	movs	r3, #0
 8004b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b06:	f7fb ff4f 	bl	80009a8 <__aeabi_dcmpeq>
 8004b0a:	b9c0      	cbnz	r0, 8004b3e <_printf_float+0x41e>
 8004b0c:	4653      	mov	r3, sl
 8004b0e:	f108 0201 	add.w	r2, r8, #1
 8004b12:	4631      	mov	r1, r6
 8004b14:	4628      	mov	r0, r5
 8004b16:	47b8      	blx	r7
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d10c      	bne.n	8004b36 <_printf_float+0x416>
 8004b1c:	e65b      	b.n	80047d6 <_printf_float+0xb6>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	465a      	mov	r2, fp
 8004b22:	4631      	mov	r1, r6
 8004b24:	4628      	mov	r0, r5
 8004b26:	47b8      	blx	r7
 8004b28:	3001      	adds	r0, #1
 8004b2a:	f43f ae54 	beq.w	80047d6 <_printf_float+0xb6>
 8004b2e:	f108 0801 	add.w	r8, r8, #1
 8004b32:	45d0      	cmp	r8, sl
 8004b34:	dbf3      	blt.n	8004b1e <_printf_float+0x3fe>
 8004b36:	464b      	mov	r3, r9
 8004b38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004b3c:	e6e0      	b.n	8004900 <_printf_float+0x1e0>
 8004b3e:	f04f 0800 	mov.w	r8, #0
 8004b42:	f104 0b1a 	add.w	fp, r4, #26
 8004b46:	e7f4      	b.n	8004b32 <_printf_float+0x412>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4642      	mov	r2, r8
 8004b4c:	e7e1      	b.n	8004b12 <_printf_float+0x3f2>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	464a      	mov	r2, r9
 8004b52:	4631      	mov	r1, r6
 8004b54:	4628      	mov	r0, r5
 8004b56:	47b8      	blx	r7
 8004b58:	3001      	adds	r0, #1
 8004b5a:	f43f ae3c 	beq.w	80047d6 <_printf_float+0xb6>
 8004b5e:	f108 0801 	add.w	r8, r8, #1
 8004b62:	68e3      	ldr	r3, [r4, #12]
 8004b64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004b66:	1a5b      	subs	r3, r3, r1
 8004b68:	4543      	cmp	r3, r8
 8004b6a:	dcf0      	bgt.n	8004b4e <_printf_float+0x42e>
 8004b6c:	e6fd      	b.n	800496a <_printf_float+0x24a>
 8004b6e:	f04f 0800 	mov.w	r8, #0
 8004b72:	f104 0919 	add.w	r9, r4, #25
 8004b76:	e7f4      	b.n	8004b62 <_printf_float+0x442>

08004b78 <_printf_common>:
 8004b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	4698      	mov	r8, r3
 8004b80:	688a      	ldr	r2, [r1, #8]
 8004b82:	690b      	ldr	r3, [r1, #16]
 8004b84:	4607      	mov	r7, r0
 8004b86:	4293      	cmp	r3, r2
 8004b88:	bfb8      	it	lt
 8004b8a:	4613      	movlt	r3, r2
 8004b8c:	6033      	str	r3, [r6, #0]
 8004b8e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b92:	460c      	mov	r4, r1
 8004b94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b98:	b10a      	cbz	r2, 8004b9e <_printf_common+0x26>
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	6033      	str	r3, [r6, #0]
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	0699      	lsls	r1, r3, #26
 8004ba2:	bf42      	ittt	mi
 8004ba4:	6833      	ldrmi	r3, [r6, #0]
 8004ba6:	3302      	addmi	r3, #2
 8004ba8:	6033      	strmi	r3, [r6, #0]
 8004baa:	6825      	ldr	r5, [r4, #0]
 8004bac:	f015 0506 	ands.w	r5, r5, #6
 8004bb0:	d106      	bne.n	8004bc0 <_printf_common+0x48>
 8004bb2:	f104 0a19 	add.w	sl, r4, #25
 8004bb6:	68e3      	ldr	r3, [r4, #12]
 8004bb8:	6832      	ldr	r2, [r6, #0]
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	dc2b      	bgt.n	8004c18 <_printf_common+0xa0>
 8004bc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bc4:	6822      	ldr	r2, [r4, #0]
 8004bc6:	3b00      	subs	r3, #0
 8004bc8:	bf18      	it	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	0692      	lsls	r2, r2, #26
 8004bce:	d430      	bmi.n	8004c32 <_printf_common+0xba>
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bd8:	47c8      	blx	r9
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d023      	beq.n	8004c26 <_printf_common+0xae>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	6922      	ldr	r2, [r4, #16]
 8004be2:	f003 0306 	and.w	r3, r3, #6
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	bf14      	ite	ne
 8004bea:	2500      	movne	r5, #0
 8004bec:	6833      	ldreq	r3, [r6, #0]
 8004bee:	f04f 0600 	mov.w	r6, #0
 8004bf2:	bf08      	it	eq
 8004bf4:	68e5      	ldreq	r5, [r4, #12]
 8004bf6:	f104 041a 	add.w	r4, r4, #26
 8004bfa:	bf08      	it	eq
 8004bfc:	1aed      	subeq	r5, r5, r3
 8004bfe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c02:	bf08      	it	eq
 8004c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	bfc4      	itt	gt
 8004c0c:	1a9b      	subgt	r3, r3, r2
 8004c0e:	18ed      	addgt	r5, r5, r3
 8004c10:	42b5      	cmp	r5, r6
 8004c12:	d11a      	bne.n	8004c4a <_printf_common+0xd2>
 8004c14:	2000      	movs	r0, #0
 8004c16:	e008      	b.n	8004c2a <_printf_common+0xb2>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	4652      	mov	r2, sl
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	4638      	mov	r0, r7
 8004c20:	47c8      	blx	r9
 8004c22:	3001      	adds	r0, #1
 8004c24:	d103      	bne.n	8004c2e <_printf_common+0xb6>
 8004c26:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c2e:	3501      	adds	r5, #1
 8004c30:	e7c1      	b.n	8004bb6 <_printf_common+0x3e>
 8004c32:	2030      	movs	r0, #48	@ 0x30
 8004c34:	18e1      	adds	r1, r4, r3
 8004c36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c40:	4422      	add	r2, r4
 8004c42:	3302      	adds	r3, #2
 8004c44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c48:	e7c2      	b.n	8004bd0 <_printf_common+0x58>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	4641      	mov	r1, r8
 8004c50:	4638      	mov	r0, r7
 8004c52:	47c8      	blx	r9
 8004c54:	3001      	adds	r0, #1
 8004c56:	d0e6      	beq.n	8004c26 <_printf_common+0xae>
 8004c58:	3601      	adds	r6, #1
 8004c5a:	e7d9      	b.n	8004c10 <_printf_common+0x98>

08004c5c <_printf_i>:
 8004c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	7e0f      	ldrb	r7, [r1, #24]
 8004c62:	4691      	mov	r9, r2
 8004c64:	2f78      	cmp	r7, #120	@ 0x78
 8004c66:	4680      	mov	r8, r0
 8004c68:	460c      	mov	r4, r1
 8004c6a:	469a      	mov	sl, r3
 8004c6c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c72:	d807      	bhi.n	8004c84 <_printf_i+0x28>
 8004c74:	2f62      	cmp	r7, #98	@ 0x62
 8004c76:	d80a      	bhi.n	8004c8e <_printf_i+0x32>
 8004c78:	2f00      	cmp	r7, #0
 8004c7a:	f000 80d1 	beq.w	8004e20 <_printf_i+0x1c4>
 8004c7e:	2f58      	cmp	r7, #88	@ 0x58
 8004c80:	f000 80b8 	beq.w	8004df4 <_printf_i+0x198>
 8004c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c8c:	e03a      	b.n	8004d04 <_printf_i+0xa8>
 8004c8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c92:	2b15      	cmp	r3, #21
 8004c94:	d8f6      	bhi.n	8004c84 <_printf_i+0x28>
 8004c96:	a101      	add	r1, pc, #4	@ (adr r1, 8004c9c <_printf_i+0x40>)
 8004c98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c9c:	08004cf5 	.word	0x08004cf5
 8004ca0:	08004d09 	.word	0x08004d09
 8004ca4:	08004c85 	.word	0x08004c85
 8004ca8:	08004c85 	.word	0x08004c85
 8004cac:	08004c85 	.word	0x08004c85
 8004cb0:	08004c85 	.word	0x08004c85
 8004cb4:	08004d09 	.word	0x08004d09
 8004cb8:	08004c85 	.word	0x08004c85
 8004cbc:	08004c85 	.word	0x08004c85
 8004cc0:	08004c85 	.word	0x08004c85
 8004cc4:	08004c85 	.word	0x08004c85
 8004cc8:	08004e07 	.word	0x08004e07
 8004ccc:	08004d33 	.word	0x08004d33
 8004cd0:	08004dc1 	.word	0x08004dc1
 8004cd4:	08004c85 	.word	0x08004c85
 8004cd8:	08004c85 	.word	0x08004c85
 8004cdc:	08004e29 	.word	0x08004e29
 8004ce0:	08004c85 	.word	0x08004c85
 8004ce4:	08004d33 	.word	0x08004d33
 8004ce8:	08004c85 	.word	0x08004c85
 8004cec:	08004c85 	.word	0x08004c85
 8004cf0:	08004dc9 	.word	0x08004dc9
 8004cf4:	6833      	ldr	r3, [r6, #0]
 8004cf6:	1d1a      	adds	r2, r3, #4
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6032      	str	r2, [r6, #0]
 8004cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d04:	2301      	movs	r3, #1
 8004d06:	e09c      	b.n	8004e42 <_printf_i+0x1e6>
 8004d08:	6833      	ldr	r3, [r6, #0]
 8004d0a:	6820      	ldr	r0, [r4, #0]
 8004d0c:	1d19      	adds	r1, r3, #4
 8004d0e:	6031      	str	r1, [r6, #0]
 8004d10:	0606      	lsls	r6, r0, #24
 8004d12:	d501      	bpl.n	8004d18 <_printf_i+0xbc>
 8004d14:	681d      	ldr	r5, [r3, #0]
 8004d16:	e003      	b.n	8004d20 <_printf_i+0xc4>
 8004d18:	0645      	lsls	r5, r0, #25
 8004d1a:	d5fb      	bpl.n	8004d14 <_printf_i+0xb8>
 8004d1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d20:	2d00      	cmp	r5, #0
 8004d22:	da03      	bge.n	8004d2c <_printf_i+0xd0>
 8004d24:	232d      	movs	r3, #45	@ 0x2d
 8004d26:	426d      	negs	r5, r5
 8004d28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d2c:	230a      	movs	r3, #10
 8004d2e:	4858      	ldr	r0, [pc, #352]	@ (8004e90 <_printf_i+0x234>)
 8004d30:	e011      	b.n	8004d56 <_printf_i+0xfa>
 8004d32:	6821      	ldr	r1, [r4, #0]
 8004d34:	6833      	ldr	r3, [r6, #0]
 8004d36:	0608      	lsls	r0, r1, #24
 8004d38:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d3c:	d402      	bmi.n	8004d44 <_printf_i+0xe8>
 8004d3e:	0649      	lsls	r1, r1, #25
 8004d40:	bf48      	it	mi
 8004d42:	b2ad      	uxthmi	r5, r5
 8004d44:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d46:	6033      	str	r3, [r6, #0]
 8004d48:	bf14      	ite	ne
 8004d4a:	230a      	movne	r3, #10
 8004d4c:	2308      	moveq	r3, #8
 8004d4e:	4850      	ldr	r0, [pc, #320]	@ (8004e90 <_printf_i+0x234>)
 8004d50:	2100      	movs	r1, #0
 8004d52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d56:	6866      	ldr	r6, [r4, #4]
 8004d58:	2e00      	cmp	r6, #0
 8004d5a:	60a6      	str	r6, [r4, #8]
 8004d5c:	db05      	blt.n	8004d6a <_printf_i+0x10e>
 8004d5e:	6821      	ldr	r1, [r4, #0]
 8004d60:	432e      	orrs	r6, r5
 8004d62:	f021 0104 	bic.w	r1, r1, #4
 8004d66:	6021      	str	r1, [r4, #0]
 8004d68:	d04b      	beq.n	8004e02 <_printf_i+0x1a6>
 8004d6a:	4616      	mov	r6, r2
 8004d6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d70:	fb03 5711 	mls	r7, r3, r1, r5
 8004d74:	5dc7      	ldrb	r7, [r0, r7]
 8004d76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d7a:	462f      	mov	r7, r5
 8004d7c:	42bb      	cmp	r3, r7
 8004d7e:	460d      	mov	r5, r1
 8004d80:	d9f4      	bls.n	8004d6c <_printf_i+0x110>
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d10b      	bne.n	8004d9e <_printf_i+0x142>
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	07df      	lsls	r7, r3, #31
 8004d8a:	d508      	bpl.n	8004d9e <_printf_i+0x142>
 8004d8c:	6923      	ldr	r3, [r4, #16]
 8004d8e:	6861      	ldr	r1, [r4, #4]
 8004d90:	4299      	cmp	r1, r3
 8004d92:	bfde      	ittt	le
 8004d94:	2330      	movle	r3, #48	@ 0x30
 8004d96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d9e:	1b92      	subs	r2, r2, r6
 8004da0:	6122      	str	r2, [r4, #16]
 8004da2:	464b      	mov	r3, r9
 8004da4:	4621      	mov	r1, r4
 8004da6:	4640      	mov	r0, r8
 8004da8:	f8cd a000 	str.w	sl, [sp]
 8004dac:	aa03      	add	r2, sp, #12
 8004dae:	f7ff fee3 	bl	8004b78 <_printf_common>
 8004db2:	3001      	adds	r0, #1
 8004db4:	d14a      	bne.n	8004e4c <_printf_i+0x1f0>
 8004db6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dba:	b004      	add	sp, #16
 8004dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	f043 0320 	orr.w	r3, r3, #32
 8004dc6:	6023      	str	r3, [r4, #0]
 8004dc8:	2778      	movs	r7, #120	@ 0x78
 8004dca:	4832      	ldr	r0, [pc, #200]	@ (8004e94 <_printf_i+0x238>)
 8004dcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	6831      	ldr	r1, [r6, #0]
 8004dd4:	061f      	lsls	r7, r3, #24
 8004dd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dda:	d402      	bmi.n	8004de2 <_printf_i+0x186>
 8004ddc:	065f      	lsls	r7, r3, #25
 8004dde:	bf48      	it	mi
 8004de0:	b2ad      	uxthmi	r5, r5
 8004de2:	6031      	str	r1, [r6, #0]
 8004de4:	07d9      	lsls	r1, r3, #31
 8004de6:	bf44      	itt	mi
 8004de8:	f043 0320 	orrmi.w	r3, r3, #32
 8004dec:	6023      	strmi	r3, [r4, #0]
 8004dee:	b11d      	cbz	r5, 8004df8 <_printf_i+0x19c>
 8004df0:	2310      	movs	r3, #16
 8004df2:	e7ad      	b.n	8004d50 <_printf_i+0xf4>
 8004df4:	4826      	ldr	r0, [pc, #152]	@ (8004e90 <_printf_i+0x234>)
 8004df6:	e7e9      	b.n	8004dcc <_printf_i+0x170>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	f023 0320 	bic.w	r3, r3, #32
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	e7f6      	b.n	8004df0 <_printf_i+0x194>
 8004e02:	4616      	mov	r6, r2
 8004e04:	e7bd      	b.n	8004d82 <_printf_i+0x126>
 8004e06:	6833      	ldr	r3, [r6, #0]
 8004e08:	6825      	ldr	r5, [r4, #0]
 8004e0a:	1d18      	adds	r0, r3, #4
 8004e0c:	6961      	ldr	r1, [r4, #20]
 8004e0e:	6030      	str	r0, [r6, #0]
 8004e10:	062e      	lsls	r6, r5, #24
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	d501      	bpl.n	8004e1a <_printf_i+0x1be>
 8004e16:	6019      	str	r1, [r3, #0]
 8004e18:	e002      	b.n	8004e20 <_printf_i+0x1c4>
 8004e1a:	0668      	lsls	r0, r5, #25
 8004e1c:	d5fb      	bpl.n	8004e16 <_printf_i+0x1ba>
 8004e1e:	8019      	strh	r1, [r3, #0]
 8004e20:	2300      	movs	r3, #0
 8004e22:	4616      	mov	r6, r2
 8004e24:	6123      	str	r3, [r4, #16]
 8004e26:	e7bc      	b.n	8004da2 <_printf_i+0x146>
 8004e28:	6833      	ldr	r3, [r6, #0]
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	1d1a      	adds	r2, r3, #4
 8004e2e:	6032      	str	r2, [r6, #0]
 8004e30:	681e      	ldr	r6, [r3, #0]
 8004e32:	6862      	ldr	r2, [r4, #4]
 8004e34:	4630      	mov	r0, r6
 8004e36:	f000 f9d6 	bl	80051e6 <memchr>
 8004e3a:	b108      	cbz	r0, 8004e40 <_printf_i+0x1e4>
 8004e3c:	1b80      	subs	r0, r0, r6
 8004e3e:	6060      	str	r0, [r4, #4]
 8004e40:	6863      	ldr	r3, [r4, #4]
 8004e42:	6123      	str	r3, [r4, #16]
 8004e44:	2300      	movs	r3, #0
 8004e46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e4a:	e7aa      	b.n	8004da2 <_printf_i+0x146>
 8004e4c:	4632      	mov	r2, r6
 8004e4e:	4649      	mov	r1, r9
 8004e50:	4640      	mov	r0, r8
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	47d0      	blx	sl
 8004e56:	3001      	adds	r0, #1
 8004e58:	d0ad      	beq.n	8004db6 <_printf_i+0x15a>
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	079b      	lsls	r3, r3, #30
 8004e5e:	d413      	bmi.n	8004e88 <_printf_i+0x22c>
 8004e60:	68e0      	ldr	r0, [r4, #12]
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	4298      	cmp	r0, r3
 8004e66:	bfb8      	it	lt
 8004e68:	4618      	movlt	r0, r3
 8004e6a:	e7a6      	b.n	8004dba <_printf_i+0x15e>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4632      	mov	r2, r6
 8004e70:	4649      	mov	r1, r9
 8004e72:	4640      	mov	r0, r8
 8004e74:	47d0      	blx	sl
 8004e76:	3001      	adds	r0, #1
 8004e78:	d09d      	beq.n	8004db6 <_printf_i+0x15a>
 8004e7a:	3501      	adds	r5, #1
 8004e7c:	68e3      	ldr	r3, [r4, #12]
 8004e7e:	9903      	ldr	r1, [sp, #12]
 8004e80:	1a5b      	subs	r3, r3, r1
 8004e82:	42ab      	cmp	r3, r5
 8004e84:	dcf2      	bgt.n	8004e6c <_printf_i+0x210>
 8004e86:	e7eb      	b.n	8004e60 <_printf_i+0x204>
 8004e88:	2500      	movs	r5, #0
 8004e8a:	f104 0619 	add.w	r6, r4, #25
 8004e8e:	e7f5      	b.n	8004e7c <_printf_i+0x220>
 8004e90:	08007474 	.word	0x08007474
 8004e94:	08007485 	.word	0x08007485

08004e98 <std>:
 8004e98:	2300      	movs	r3, #0
 8004e9a:	b510      	push	{r4, lr}
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8004ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ea6:	6083      	str	r3, [r0, #8]
 8004ea8:	8181      	strh	r1, [r0, #12]
 8004eaa:	6643      	str	r3, [r0, #100]	@ 0x64
 8004eac:	81c2      	strh	r2, [r0, #14]
 8004eae:	6183      	str	r3, [r0, #24]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	2208      	movs	r2, #8
 8004eb4:	305c      	adds	r0, #92	@ 0x5c
 8004eb6:	f000 f916 	bl	80050e6 <memset>
 8004eba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ef0 <std+0x58>)
 8004ebc:	6224      	str	r4, [r4, #32]
 8004ebe:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <std+0x5c>)
 8004ec2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef8 <std+0x60>)
 8004ec6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8004efc <std+0x64>)
 8004eca:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f00 <std+0x68>)
 8004ece:	429c      	cmp	r4, r3
 8004ed0:	d006      	beq.n	8004ee0 <std+0x48>
 8004ed2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ed6:	4294      	cmp	r4, r2
 8004ed8:	d002      	beq.n	8004ee0 <std+0x48>
 8004eda:	33d0      	adds	r3, #208	@ 0xd0
 8004edc:	429c      	cmp	r4, r3
 8004ede:	d105      	bne.n	8004eec <std+0x54>
 8004ee0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee8:	f000 b97a 	b.w	80051e0 <__retarget_lock_init_recursive>
 8004eec:	bd10      	pop	{r4, pc}
 8004eee:	bf00      	nop
 8004ef0:	08005061 	.word	0x08005061
 8004ef4:	08005083 	.word	0x08005083
 8004ef8:	080050bb 	.word	0x080050bb
 8004efc:	080050df 	.word	0x080050df
 8004f00:	20000468 	.word	0x20000468

08004f04 <stdio_exit_handler>:
 8004f04:	4a02      	ldr	r2, [pc, #8]	@ (8004f10 <stdio_exit_handler+0xc>)
 8004f06:	4903      	ldr	r1, [pc, #12]	@ (8004f14 <stdio_exit_handler+0x10>)
 8004f08:	4803      	ldr	r0, [pc, #12]	@ (8004f18 <stdio_exit_handler+0x14>)
 8004f0a:	f000 b869 	b.w	8004fe0 <_fwalk_sglue>
 8004f0e:	bf00      	nop
 8004f10:	2000000c 	.word	0x2000000c
 8004f14:	08006b79 	.word	0x08006b79
 8004f18:	2000001c 	.word	0x2000001c

08004f1c <cleanup_stdio>:
 8004f1c:	6841      	ldr	r1, [r0, #4]
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f50 <cleanup_stdio+0x34>)
 8004f20:	b510      	push	{r4, lr}
 8004f22:	4299      	cmp	r1, r3
 8004f24:	4604      	mov	r4, r0
 8004f26:	d001      	beq.n	8004f2c <cleanup_stdio+0x10>
 8004f28:	f001 fe26 	bl	8006b78 <_fflush_r>
 8004f2c:	68a1      	ldr	r1, [r4, #8]
 8004f2e:	4b09      	ldr	r3, [pc, #36]	@ (8004f54 <cleanup_stdio+0x38>)
 8004f30:	4299      	cmp	r1, r3
 8004f32:	d002      	beq.n	8004f3a <cleanup_stdio+0x1e>
 8004f34:	4620      	mov	r0, r4
 8004f36:	f001 fe1f 	bl	8006b78 <_fflush_r>
 8004f3a:	68e1      	ldr	r1, [r4, #12]
 8004f3c:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <cleanup_stdio+0x3c>)
 8004f3e:	4299      	cmp	r1, r3
 8004f40:	d004      	beq.n	8004f4c <cleanup_stdio+0x30>
 8004f42:	4620      	mov	r0, r4
 8004f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f48:	f001 be16 	b.w	8006b78 <_fflush_r>
 8004f4c:	bd10      	pop	{r4, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000468 	.word	0x20000468
 8004f54:	200004d0 	.word	0x200004d0
 8004f58:	20000538 	.word	0x20000538

08004f5c <global_stdio_init.part.0>:
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f8c <global_stdio_init.part.0+0x30>)
 8004f60:	4c0b      	ldr	r4, [pc, #44]	@ (8004f90 <global_stdio_init.part.0+0x34>)
 8004f62:	4a0c      	ldr	r2, [pc, #48]	@ (8004f94 <global_stdio_init.part.0+0x38>)
 8004f64:	4620      	mov	r0, r4
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	2104      	movs	r1, #4
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f7ff ff94 	bl	8004e98 <std>
 8004f70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f74:	2201      	movs	r2, #1
 8004f76:	2109      	movs	r1, #9
 8004f78:	f7ff ff8e 	bl	8004e98 <std>
 8004f7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f80:	2202      	movs	r2, #2
 8004f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f86:	2112      	movs	r1, #18
 8004f88:	f7ff bf86 	b.w	8004e98 <std>
 8004f8c:	200005a0 	.word	0x200005a0
 8004f90:	20000468 	.word	0x20000468
 8004f94:	08004f05 	.word	0x08004f05

08004f98 <__sfp_lock_acquire>:
 8004f98:	4801      	ldr	r0, [pc, #4]	@ (8004fa0 <__sfp_lock_acquire+0x8>)
 8004f9a:	f000 b922 	b.w	80051e2 <__retarget_lock_acquire_recursive>
 8004f9e:	bf00      	nop
 8004fa0:	200005a9 	.word	0x200005a9

08004fa4 <__sfp_lock_release>:
 8004fa4:	4801      	ldr	r0, [pc, #4]	@ (8004fac <__sfp_lock_release+0x8>)
 8004fa6:	f000 b91d 	b.w	80051e4 <__retarget_lock_release_recursive>
 8004faa:	bf00      	nop
 8004fac:	200005a9 	.word	0x200005a9

08004fb0 <__sinit>:
 8004fb0:	b510      	push	{r4, lr}
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	f7ff fff0 	bl	8004f98 <__sfp_lock_acquire>
 8004fb8:	6a23      	ldr	r3, [r4, #32]
 8004fba:	b11b      	cbz	r3, 8004fc4 <__sinit+0x14>
 8004fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc0:	f7ff bff0 	b.w	8004fa4 <__sfp_lock_release>
 8004fc4:	4b04      	ldr	r3, [pc, #16]	@ (8004fd8 <__sinit+0x28>)
 8004fc6:	6223      	str	r3, [r4, #32]
 8004fc8:	4b04      	ldr	r3, [pc, #16]	@ (8004fdc <__sinit+0x2c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f5      	bne.n	8004fbc <__sinit+0xc>
 8004fd0:	f7ff ffc4 	bl	8004f5c <global_stdio_init.part.0>
 8004fd4:	e7f2      	b.n	8004fbc <__sinit+0xc>
 8004fd6:	bf00      	nop
 8004fd8:	08004f1d 	.word	0x08004f1d
 8004fdc:	200005a0 	.word	0x200005a0

08004fe0 <_fwalk_sglue>:
 8004fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	4688      	mov	r8, r1
 8004fe8:	4614      	mov	r4, r2
 8004fea:	2600      	movs	r6, #0
 8004fec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ff0:	f1b9 0901 	subs.w	r9, r9, #1
 8004ff4:	d505      	bpl.n	8005002 <_fwalk_sglue+0x22>
 8004ff6:	6824      	ldr	r4, [r4, #0]
 8004ff8:	2c00      	cmp	r4, #0
 8004ffa:	d1f7      	bne.n	8004fec <_fwalk_sglue+0xc>
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005002:	89ab      	ldrh	r3, [r5, #12]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d907      	bls.n	8005018 <_fwalk_sglue+0x38>
 8005008:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800500c:	3301      	adds	r3, #1
 800500e:	d003      	beq.n	8005018 <_fwalk_sglue+0x38>
 8005010:	4629      	mov	r1, r5
 8005012:	4638      	mov	r0, r7
 8005014:	47c0      	blx	r8
 8005016:	4306      	orrs	r6, r0
 8005018:	3568      	adds	r5, #104	@ 0x68
 800501a:	e7e9      	b.n	8004ff0 <_fwalk_sglue+0x10>

0800501c <siprintf>:
 800501c:	b40e      	push	{r1, r2, r3}
 800501e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005022:	b510      	push	{r4, lr}
 8005024:	2400      	movs	r4, #0
 8005026:	b09d      	sub	sp, #116	@ 0x74
 8005028:	ab1f      	add	r3, sp, #124	@ 0x7c
 800502a:	9002      	str	r0, [sp, #8]
 800502c:	9006      	str	r0, [sp, #24]
 800502e:	9107      	str	r1, [sp, #28]
 8005030:	9104      	str	r1, [sp, #16]
 8005032:	4809      	ldr	r0, [pc, #36]	@ (8005058 <siprintf+0x3c>)
 8005034:	4909      	ldr	r1, [pc, #36]	@ (800505c <siprintf+0x40>)
 8005036:	f853 2b04 	ldr.w	r2, [r3], #4
 800503a:	9105      	str	r1, [sp, #20]
 800503c:	6800      	ldr	r0, [r0, #0]
 800503e:	a902      	add	r1, sp, #8
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005044:	f001 fc1c 	bl	8006880 <_svfiprintf_r>
 8005048:	9b02      	ldr	r3, [sp, #8]
 800504a:	701c      	strb	r4, [r3, #0]
 800504c:	b01d      	add	sp, #116	@ 0x74
 800504e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005052:	b003      	add	sp, #12
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	20000018 	.word	0x20000018
 800505c:	ffff0208 	.word	0xffff0208

08005060 <__sread>:
 8005060:	b510      	push	{r4, lr}
 8005062:	460c      	mov	r4, r1
 8005064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005068:	f000 f86c 	bl	8005144 <_read_r>
 800506c:	2800      	cmp	r0, #0
 800506e:	bfab      	itete	ge
 8005070:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005072:	89a3      	ldrhlt	r3, [r4, #12]
 8005074:	181b      	addge	r3, r3, r0
 8005076:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800507a:	bfac      	ite	ge
 800507c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800507e:	81a3      	strhlt	r3, [r4, #12]
 8005080:	bd10      	pop	{r4, pc}

08005082 <__swrite>:
 8005082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005086:	461f      	mov	r7, r3
 8005088:	898b      	ldrh	r3, [r1, #12]
 800508a:	4605      	mov	r5, r0
 800508c:	05db      	lsls	r3, r3, #23
 800508e:	460c      	mov	r4, r1
 8005090:	4616      	mov	r6, r2
 8005092:	d505      	bpl.n	80050a0 <__swrite+0x1e>
 8005094:	2302      	movs	r3, #2
 8005096:	2200      	movs	r2, #0
 8005098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509c:	f000 f840 	bl	8005120 <_lseek_r>
 80050a0:	89a3      	ldrh	r3, [r4, #12]
 80050a2:	4632      	mov	r2, r6
 80050a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050a8:	81a3      	strh	r3, [r4, #12]
 80050aa:	4628      	mov	r0, r5
 80050ac:	463b      	mov	r3, r7
 80050ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b6:	f000 b857 	b.w	8005168 <_write_r>

080050ba <__sseek>:
 80050ba:	b510      	push	{r4, lr}
 80050bc:	460c      	mov	r4, r1
 80050be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c2:	f000 f82d 	bl	8005120 <_lseek_r>
 80050c6:	1c43      	adds	r3, r0, #1
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	bf15      	itete	ne
 80050cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80050ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80050d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80050d6:	81a3      	strheq	r3, [r4, #12]
 80050d8:	bf18      	it	ne
 80050da:	81a3      	strhne	r3, [r4, #12]
 80050dc:	bd10      	pop	{r4, pc}

080050de <__sclose>:
 80050de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e2:	f000 b80d 	b.w	8005100 <_close_r>

080050e6 <memset>:
 80050e6:	4603      	mov	r3, r0
 80050e8:	4402      	add	r2, r0
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d100      	bne.n	80050f0 <memset+0xa>
 80050ee:	4770      	bx	lr
 80050f0:	f803 1b01 	strb.w	r1, [r3], #1
 80050f4:	e7f9      	b.n	80050ea <memset+0x4>
	...

080050f8 <_localeconv_r>:
 80050f8:	4800      	ldr	r0, [pc, #0]	@ (80050fc <_localeconv_r+0x4>)
 80050fa:	4770      	bx	lr
 80050fc:	20000158 	.word	0x20000158

08005100 <_close_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	2300      	movs	r3, #0
 8005104:	4d05      	ldr	r5, [pc, #20]	@ (800511c <_close_r+0x1c>)
 8005106:	4604      	mov	r4, r0
 8005108:	4608      	mov	r0, r1
 800510a:	602b      	str	r3, [r5, #0]
 800510c:	f7fc fdd9 	bl	8001cc2 <_close>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d102      	bne.n	800511a <_close_r+0x1a>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	b103      	cbz	r3, 800511a <_close_r+0x1a>
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	200005a4 	.word	0x200005a4

08005120 <_lseek_r>:
 8005120:	b538      	push	{r3, r4, r5, lr}
 8005122:	4604      	mov	r4, r0
 8005124:	4608      	mov	r0, r1
 8005126:	4611      	mov	r1, r2
 8005128:	2200      	movs	r2, #0
 800512a:	4d05      	ldr	r5, [pc, #20]	@ (8005140 <_lseek_r+0x20>)
 800512c:	602a      	str	r2, [r5, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	f7fc fdeb 	bl	8001d0a <_lseek>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d102      	bne.n	800513e <_lseek_r+0x1e>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	b103      	cbz	r3, 800513e <_lseek_r+0x1e>
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	200005a4 	.word	0x200005a4

08005144 <_read_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	4604      	mov	r4, r0
 8005148:	4608      	mov	r0, r1
 800514a:	4611      	mov	r1, r2
 800514c:	2200      	movs	r2, #0
 800514e:	4d05      	ldr	r5, [pc, #20]	@ (8005164 <_read_r+0x20>)
 8005150:	602a      	str	r2, [r5, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	f7fc fd7c 	bl	8001c50 <_read>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_read_r+0x1e>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	b103      	cbz	r3, 8005162 <_read_r+0x1e>
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	200005a4 	.word	0x200005a4

08005168 <_write_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4604      	mov	r4, r0
 800516c:	4608      	mov	r0, r1
 800516e:	4611      	mov	r1, r2
 8005170:	2200      	movs	r2, #0
 8005172:	4d05      	ldr	r5, [pc, #20]	@ (8005188 <_write_r+0x20>)
 8005174:	602a      	str	r2, [r5, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	f7fc fd87 	bl	8001c8a <_write>
 800517c:	1c43      	adds	r3, r0, #1
 800517e:	d102      	bne.n	8005186 <_write_r+0x1e>
 8005180:	682b      	ldr	r3, [r5, #0]
 8005182:	b103      	cbz	r3, 8005186 <_write_r+0x1e>
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	bd38      	pop	{r3, r4, r5, pc}
 8005188:	200005a4 	.word	0x200005a4

0800518c <__errno>:
 800518c:	4b01      	ldr	r3, [pc, #4]	@ (8005194 <__errno+0x8>)
 800518e:	6818      	ldr	r0, [r3, #0]
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20000018 	.word	0x20000018

08005198 <__libc_init_array>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	2600      	movs	r6, #0
 800519c:	4d0c      	ldr	r5, [pc, #48]	@ (80051d0 <__libc_init_array+0x38>)
 800519e:	4c0d      	ldr	r4, [pc, #52]	@ (80051d4 <__libc_init_array+0x3c>)
 80051a0:	1b64      	subs	r4, r4, r5
 80051a2:	10a4      	asrs	r4, r4, #2
 80051a4:	42a6      	cmp	r6, r4
 80051a6:	d109      	bne.n	80051bc <__libc_init_array+0x24>
 80051a8:	f002 f874 	bl	8007294 <_init>
 80051ac:	2600      	movs	r6, #0
 80051ae:	4d0a      	ldr	r5, [pc, #40]	@ (80051d8 <__libc_init_array+0x40>)
 80051b0:	4c0a      	ldr	r4, [pc, #40]	@ (80051dc <__libc_init_array+0x44>)
 80051b2:	1b64      	subs	r4, r4, r5
 80051b4:	10a4      	asrs	r4, r4, #2
 80051b6:	42a6      	cmp	r6, r4
 80051b8:	d105      	bne.n	80051c6 <__libc_init_array+0x2e>
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c0:	4798      	blx	r3
 80051c2:	3601      	adds	r6, #1
 80051c4:	e7ee      	b.n	80051a4 <__libc_init_array+0xc>
 80051c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ca:	4798      	blx	r3
 80051cc:	3601      	adds	r6, #1
 80051ce:	e7f2      	b.n	80051b6 <__libc_init_array+0x1e>
 80051d0:	080077dc 	.word	0x080077dc
 80051d4:	080077dc 	.word	0x080077dc
 80051d8:	080077dc 	.word	0x080077dc
 80051dc:	080077e0 	.word	0x080077e0

080051e0 <__retarget_lock_init_recursive>:
 80051e0:	4770      	bx	lr

080051e2 <__retarget_lock_acquire_recursive>:
 80051e2:	4770      	bx	lr

080051e4 <__retarget_lock_release_recursive>:
 80051e4:	4770      	bx	lr

080051e6 <memchr>:
 80051e6:	4603      	mov	r3, r0
 80051e8:	b510      	push	{r4, lr}
 80051ea:	b2c9      	uxtb	r1, r1
 80051ec:	4402      	add	r2, r0
 80051ee:	4293      	cmp	r3, r2
 80051f0:	4618      	mov	r0, r3
 80051f2:	d101      	bne.n	80051f8 <memchr+0x12>
 80051f4:	2000      	movs	r0, #0
 80051f6:	e003      	b.n	8005200 <memchr+0x1a>
 80051f8:	7804      	ldrb	r4, [r0, #0]
 80051fa:	3301      	adds	r3, #1
 80051fc:	428c      	cmp	r4, r1
 80051fe:	d1f6      	bne.n	80051ee <memchr+0x8>
 8005200:	bd10      	pop	{r4, pc}

08005202 <memcpy>:
 8005202:	440a      	add	r2, r1
 8005204:	4291      	cmp	r1, r2
 8005206:	f100 33ff 	add.w	r3, r0, #4294967295
 800520a:	d100      	bne.n	800520e <memcpy+0xc>
 800520c:	4770      	bx	lr
 800520e:	b510      	push	{r4, lr}
 8005210:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005214:	4291      	cmp	r1, r2
 8005216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800521a:	d1f9      	bne.n	8005210 <memcpy+0xe>
 800521c:	bd10      	pop	{r4, pc}

0800521e <quorem>:
 800521e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005222:	6903      	ldr	r3, [r0, #16]
 8005224:	690c      	ldr	r4, [r1, #16]
 8005226:	4607      	mov	r7, r0
 8005228:	42a3      	cmp	r3, r4
 800522a:	db7e      	blt.n	800532a <quorem+0x10c>
 800522c:	3c01      	subs	r4, #1
 800522e:	00a3      	lsls	r3, r4, #2
 8005230:	f100 0514 	add.w	r5, r0, #20
 8005234:	f101 0814 	add.w	r8, r1, #20
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005244:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005248:	3301      	adds	r3, #1
 800524a:	429a      	cmp	r2, r3
 800524c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005250:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005254:	d32e      	bcc.n	80052b4 <quorem+0x96>
 8005256:	f04f 0a00 	mov.w	sl, #0
 800525a:	46c4      	mov	ip, r8
 800525c:	46ae      	mov	lr, r5
 800525e:	46d3      	mov	fp, sl
 8005260:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005264:	b298      	uxth	r0, r3
 8005266:	fb06 a000 	mla	r0, r6, r0, sl
 800526a:	0c1b      	lsrs	r3, r3, #16
 800526c:	0c02      	lsrs	r2, r0, #16
 800526e:	fb06 2303 	mla	r3, r6, r3, r2
 8005272:	f8de 2000 	ldr.w	r2, [lr]
 8005276:	b280      	uxth	r0, r0
 8005278:	b292      	uxth	r2, r2
 800527a:	1a12      	subs	r2, r2, r0
 800527c:	445a      	add	r2, fp
 800527e:	f8de 0000 	ldr.w	r0, [lr]
 8005282:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005286:	b29b      	uxth	r3, r3
 8005288:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800528c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005290:	b292      	uxth	r2, r2
 8005292:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005296:	45e1      	cmp	r9, ip
 8005298:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800529c:	f84e 2b04 	str.w	r2, [lr], #4
 80052a0:	d2de      	bcs.n	8005260 <quorem+0x42>
 80052a2:	9b00      	ldr	r3, [sp, #0]
 80052a4:	58eb      	ldr	r3, [r5, r3]
 80052a6:	b92b      	cbnz	r3, 80052b4 <quorem+0x96>
 80052a8:	9b01      	ldr	r3, [sp, #4]
 80052aa:	3b04      	subs	r3, #4
 80052ac:	429d      	cmp	r5, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	d32f      	bcc.n	8005312 <quorem+0xf4>
 80052b2:	613c      	str	r4, [r7, #16]
 80052b4:	4638      	mov	r0, r7
 80052b6:	f001 f97f 	bl	80065b8 <__mcmp>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	db25      	blt.n	800530a <quorem+0xec>
 80052be:	4629      	mov	r1, r5
 80052c0:	2000      	movs	r0, #0
 80052c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80052c6:	f8d1 c000 	ldr.w	ip, [r1]
 80052ca:	fa1f fe82 	uxth.w	lr, r2
 80052ce:	fa1f f38c 	uxth.w	r3, ip
 80052d2:	eba3 030e 	sub.w	r3, r3, lr
 80052d6:	4403      	add	r3, r0
 80052d8:	0c12      	lsrs	r2, r2, #16
 80052da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80052de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052e8:	45c1      	cmp	r9, r8
 80052ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80052ee:	f841 3b04 	str.w	r3, [r1], #4
 80052f2:	d2e6      	bcs.n	80052c2 <quorem+0xa4>
 80052f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052fc:	b922      	cbnz	r2, 8005308 <quorem+0xea>
 80052fe:	3b04      	subs	r3, #4
 8005300:	429d      	cmp	r5, r3
 8005302:	461a      	mov	r2, r3
 8005304:	d30b      	bcc.n	800531e <quorem+0x100>
 8005306:	613c      	str	r4, [r7, #16]
 8005308:	3601      	adds	r6, #1
 800530a:	4630      	mov	r0, r6
 800530c:	b003      	add	sp, #12
 800530e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	3b04      	subs	r3, #4
 8005316:	2a00      	cmp	r2, #0
 8005318:	d1cb      	bne.n	80052b2 <quorem+0x94>
 800531a:	3c01      	subs	r4, #1
 800531c:	e7c6      	b.n	80052ac <quorem+0x8e>
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	3b04      	subs	r3, #4
 8005322:	2a00      	cmp	r2, #0
 8005324:	d1ef      	bne.n	8005306 <quorem+0xe8>
 8005326:	3c01      	subs	r4, #1
 8005328:	e7ea      	b.n	8005300 <quorem+0xe2>
 800532a:	2000      	movs	r0, #0
 800532c:	e7ee      	b.n	800530c <quorem+0xee>
	...

08005330 <_dtoa_r>:
 8005330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005334:	4614      	mov	r4, r2
 8005336:	461d      	mov	r5, r3
 8005338:	69c7      	ldr	r7, [r0, #28]
 800533a:	b097      	sub	sp, #92	@ 0x5c
 800533c:	4681      	mov	r9, r0
 800533e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005342:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005344:	b97f      	cbnz	r7, 8005366 <_dtoa_r+0x36>
 8005346:	2010      	movs	r0, #16
 8005348:	f000 fe0e 	bl	8005f68 <malloc>
 800534c:	4602      	mov	r2, r0
 800534e:	f8c9 001c 	str.w	r0, [r9, #28]
 8005352:	b920      	cbnz	r0, 800535e <_dtoa_r+0x2e>
 8005354:	21ef      	movs	r1, #239	@ 0xef
 8005356:	4bac      	ldr	r3, [pc, #688]	@ (8005608 <_dtoa_r+0x2d8>)
 8005358:	48ac      	ldr	r0, [pc, #688]	@ (800560c <_dtoa_r+0x2dc>)
 800535a:	f001 fc5f 	bl	8006c1c <__assert_func>
 800535e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005362:	6007      	str	r7, [r0, #0]
 8005364:	60c7      	str	r7, [r0, #12]
 8005366:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800536a:	6819      	ldr	r1, [r3, #0]
 800536c:	b159      	cbz	r1, 8005386 <_dtoa_r+0x56>
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	2301      	movs	r3, #1
 8005372:	4093      	lsls	r3, r2
 8005374:	604a      	str	r2, [r1, #4]
 8005376:	608b      	str	r3, [r1, #8]
 8005378:	4648      	mov	r0, r9
 800537a:	f000 feeb 	bl	8006154 <_Bfree>
 800537e:	2200      	movs	r2, #0
 8005380:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	1e2b      	subs	r3, r5, #0
 8005388:	bfaf      	iteee	ge
 800538a:	2300      	movge	r3, #0
 800538c:	2201      	movlt	r2, #1
 800538e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005392:	9307      	strlt	r3, [sp, #28]
 8005394:	bfa8      	it	ge
 8005396:	6033      	strge	r3, [r6, #0]
 8005398:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800539c:	4b9c      	ldr	r3, [pc, #624]	@ (8005610 <_dtoa_r+0x2e0>)
 800539e:	bfb8      	it	lt
 80053a0:	6032      	strlt	r2, [r6, #0]
 80053a2:	ea33 0308 	bics.w	r3, r3, r8
 80053a6:	d112      	bne.n	80053ce <_dtoa_r+0x9e>
 80053a8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80053ac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80053b4:	4323      	orrs	r3, r4
 80053b6:	f000 855e 	beq.w	8005e76 <_dtoa_r+0xb46>
 80053ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80053bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005614 <_dtoa_r+0x2e4>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8560 	beq.w	8005e86 <_dtoa_r+0xb56>
 80053c6:	f10a 0303 	add.w	r3, sl, #3
 80053ca:	f000 bd5a 	b.w	8005e82 <_dtoa_r+0xb52>
 80053ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80053d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053da:	2200      	movs	r2, #0
 80053dc:	2300      	movs	r3, #0
 80053de:	f7fb fae3 	bl	80009a8 <__aeabi_dcmpeq>
 80053e2:	4607      	mov	r7, r0
 80053e4:	b158      	cbz	r0, 80053fe <_dtoa_r+0xce>
 80053e6:	2301      	movs	r3, #1
 80053e8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80053ee:	b113      	cbz	r3, 80053f6 <_dtoa_r+0xc6>
 80053f0:	4b89      	ldr	r3, [pc, #548]	@ (8005618 <_dtoa_r+0x2e8>)
 80053f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800561c <_dtoa_r+0x2ec>
 80053fa:	f000 bd44 	b.w	8005e86 <_dtoa_r+0xb56>
 80053fe:	ab14      	add	r3, sp, #80	@ 0x50
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	ab15      	add	r3, sp, #84	@ 0x54
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	4648      	mov	r0, r9
 8005408:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800540c:	f001 f984 	bl	8006718 <__d2b>
 8005410:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005414:	9003      	str	r0, [sp, #12]
 8005416:	2e00      	cmp	r6, #0
 8005418:	d078      	beq.n	800550c <_dtoa_r+0x1dc>
 800541a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800541e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005420:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005428:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800542c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005430:	9712      	str	r7, [sp, #72]	@ 0x48
 8005432:	4619      	mov	r1, r3
 8005434:	2200      	movs	r2, #0
 8005436:	4b7a      	ldr	r3, [pc, #488]	@ (8005620 <_dtoa_r+0x2f0>)
 8005438:	f7fa fe96 	bl	8000168 <__aeabi_dsub>
 800543c:	a36c      	add	r3, pc, #432	@ (adr r3, 80055f0 <_dtoa_r+0x2c0>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	f7fb f849 	bl	80004d8 <__aeabi_dmul>
 8005446:	a36c      	add	r3, pc, #432	@ (adr r3, 80055f8 <_dtoa_r+0x2c8>)
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f7fa fe8e 	bl	800016c <__adddf3>
 8005450:	4604      	mov	r4, r0
 8005452:	4630      	mov	r0, r6
 8005454:	460d      	mov	r5, r1
 8005456:	f7fa ffd5 	bl	8000404 <__aeabi_i2d>
 800545a:	a369      	add	r3, pc, #420	@ (adr r3, 8005600 <_dtoa_r+0x2d0>)
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f7fb f83a 	bl	80004d8 <__aeabi_dmul>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4620      	mov	r0, r4
 800546a:	4629      	mov	r1, r5
 800546c:	f7fa fe7e 	bl	800016c <__adddf3>
 8005470:	4604      	mov	r4, r0
 8005472:	460d      	mov	r5, r1
 8005474:	f7fb fae0 	bl	8000a38 <__aeabi_d2iz>
 8005478:	2200      	movs	r2, #0
 800547a:	4607      	mov	r7, r0
 800547c:	2300      	movs	r3, #0
 800547e:	4620      	mov	r0, r4
 8005480:	4629      	mov	r1, r5
 8005482:	f7fb fa9b 	bl	80009bc <__aeabi_dcmplt>
 8005486:	b140      	cbz	r0, 800549a <_dtoa_r+0x16a>
 8005488:	4638      	mov	r0, r7
 800548a:	f7fa ffbb 	bl	8000404 <__aeabi_i2d>
 800548e:	4622      	mov	r2, r4
 8005490:	462b      	mov	r3, r5
 8005492:	f7fb fa89 	bl	80009a8 <__aeabi_dcmpeq>
 8005496:	b900      	cbnz	r0, 800549a <_dtoa_r+0x16a>
 8005498:	3f01      	subs	r7, #1
 800549a:	2f16      	cmp	r7, #22
 800549c:	d854      	bhi.n	8005548 <_dtoa_r+0x218>
 800549e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054a2:	4b60      	ldr	r3, [pc, #384]	@ (8005624 <_dtoa_r+0x2f4>)
 80054a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	f7fb fa86 	bl	80009bc <__aeabi_dcmplt>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d04b      	beq.n	800554c <_dtoa_r+0x21c>
 80054b4:	2300      	movs	r3, #0
 80054b6:	3f01      	subs	r7, #1
 80054b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80054ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80054bc:	1b9b      	subs	r3, r3, r6
 80054be:	1e5a      	subs	r2, r3, #1
 80054c0:	bf49      	itett	mi
 80054c2:	f1c3 0301 	rsbmi	r3, r3, #1
 80054c6:	2300      	movpl	r3, #0
 80054c8:	9304      	strmi	r3, [sp, #16]
 80054ca:	2300      	movmi	r3, #0
 80054cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80054ce:	bf54      	ite	pl
 80054d0:	9304      	strpl	r3, [sp, #16]
 80054d2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80054d4:	2f00      	cmp	r7, #0
 80054d6:	db3b      	blt.n	8005550 <_dtoa_r+0x220>
 80054d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054da:	970e      	str	r7, [sp, #56]	@ 0x38
 80054dc:	443b      	add	r3, r7
 80054de:	9309      	str	r3, [sp, #36]	@ 0x24
 80054e0:	2300      	movs	r3, #0
 80054e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80054e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054e6:	2b09      	cmp	r3, #9
 80054e8:	d865      	bhi.n	80055b6 <_dtoa_r+0x286>
 80054ea:	2b05      	cmp	r3, #5
 80054ec:	bfc4      	itt	gt
 80054ee:	3b04      	subgt	r3, #4
 80054f0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80054f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054f4:	bfc8      	it	gt
 80054f6:	2400      	movgt	r4, #0
 80054f8:	f1a3 0302 	sub.w	r3, r3, #2
 80054fc:	bfd8      	it	le
 80054fe:	2401      	movle	r4, #1
 8005500:	2b03      	cmp	r3, #3
 8005502:	d864      	bhi.n	80055ce <_dtoa_r+0x29e>
 8005504:	e8df f003 	tbb	[pc, r3]
 8005508:	2c385553 	.word	0x2c385553
 800550c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005510:	441e      	add	r6, r3
 8005512:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005516:	2b20      	cmp	r3, #32
 8005518:	bfc1      	itttt	gt
 800551a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800551e:	fa08 f803 	lslgt.w	r8, r8, r3
 8005522:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005526:	fa24 f303 	lsrgt.w	r3, r4, r3
 800552a:	bfd6      	itet	le
 800552c:	f1c3 0320 	rsble	r3, r3, #32
 8005530:	ea48 0003 	orrgt.w	r0, r8, r3
 8005534:	fa04 f003 	lslle.w	r0, r4, r3
 8005538:	f7fa ff54 	bl	80003e4 <__aeabi_ui2d>
 800553c:	2201      	movs	r2, #1
 800553e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005542:	3e01      	subs	r6, #1
 8005544:	9212      	str	r2, [sp, #72]	@ 0x48
 8005546:	e774      	b.n	8005432 <_dtoa_r+0x102>
 8005548:	2301      	movs	r3, #1
 800554a:	e7b5      	b.n	80054b8 <_dtoa_r+0x188>
 800554c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800554e:	e7b4      	b.n	80054ba <_dtoa_r+0x18a>
 8005550:	9b04      	ldr	r3, [sp, #16]
 8005552:	1bdb      	subs	r3, r3, r7
 8005554:	9304      	str	r3, [sp, #16]
 8005556:	427b      	negs	r3, r7
 8005558:	930a      	str	r3, [sp, #40]	@ 0x28
 800555a:	2300      	movs	r3, #0
 800555c:	930e      	str	r3, [sp, #56]	@ 0x38
 800555e:	e7c1      	b.n	80054e4 <_dtoa_r+0x1b4>
 8005560:	2301      	movs	r3, #1
 8005562:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005564:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005566:	eb07 0b03 	add.w	fp, r7, r3
 800556a:	f10b 0301 	add.w	r3, fp, #1
 800556e:	2b01      	cmp	r3, #1
 8005570:	9308      	str	r3, [sp, #32]
 8005572:	bfb8      	it	lt
 8005574:	2301      	movlt	r3, #1
 8005576:	e006      	b.n	8005586 <_dtoa_r+0x256>
 8005578:	2301      	movs	r3, #1
 800557a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800557c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800557e:	2b00      	cmp	r3, #0
 8005580:	dd28      	ble.n	80055d4 <_dtoa_r+0x2a4>
 8005582:	469b      	mov	fp, r3
 8005584:	9308      	str	r3, [sp, #32]
 8005586:	2100      	movs	r1, #0
 8005588:	2204      	movs	r2, #4
 800558a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800558e:	f102 0514 	add.w	r5, r2, #20
 8005592:	429d      	cmp	r5, r3
 8005594:	d926      	bls.n	80055e4 <_dtoa_r+0x2b4>
 8005596:	6041      	str	r1, [r0, #4]
 8005598:	4648      	mov	r0, r9
 800559a:	f000 fd9b 	bl	80060d4 <_Balloc>
 800559e:	4682      	mov	sl, r0
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d143      	bne.n	800562c <_dtoa_r+0x2fc>
 80055a4:	4602      	mov	r2, r0
 80055a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80055aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005628 <_dtoa_r+0x2f8>)
 80055ac:	e6d4      	b.n	8005358 <_dtoa_r+0x28>
 80055ae:	2300      	movs	r3, #0
 80055b0:	e7e3      	b.n	800557a <_dtoa_r+0x24a>
 80055b2:	2300      	movs	r3, #0
 80055b4:	e7d5      	b.n	8005562 <_dtoa_r+0x232>
 80055b6:	2401      	movs	r4, #1
 80055b8:	2300      	movs	r3, #0
 80055ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80055bc:	9320      	str	r3, [sp, #128]	@ 0x80
 80055be:	f04f 3bff 	mov.w	fp, #4294967295
 80055c2:	2200      	movs	r2, #0
 80055c4:	2312      	movs	r3, #18
 80055c6:	f8cd b020 	str.w	fp, [sp, #32]
 80055ca:	9221      	str	r2, [sp, #132]	@ 0x84
 80055cc:	e7db      	b.n	8005586 <_dtoa_r+0x256>
 80055ce:	2301      	movs	r3, #1
 80055d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055d2:	e7f4      	b.n	80055be <_dtoa_r+0x28e>
 80055d4:	f04f 0b01 	mov.w	fp, #1
 80055d8:	465b      	mov	r3, fp
 80055da:	f8cd b020 	str.w	fp, [sp, #32]
 80055de:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80055e2:	e7d0      	b.n	8005586 <_dtoa_r+0x256>
 80055e4:	3101      	adds	r1, #1
 80055e6:	0052      	lsls	r2, r2, #1
 80055e8:	e7d1      	b.n	800558e <_dtoa_r+0x25e>
 80055ea:	bf00      	nop
 80055ec:	f3af 8000 	nop.w
 80055f0:	636f4361 	.word	0x636f4361
 80055f4:	3fd287a7 	.word	0x3fd287a7
 80055f8:	8b60c8b3 	.word	0x8b60c8b3
 80055fc:	3fc68a28 	.word	0x3fc68a28
 8005600:	509f79fb 	.word	0x509f79fb
 8005604:	3fd34413 	.word	0x3fd34413
 8005608:	080074a3 	.word	0x080074a3
 800560c:	080074ba 	.word	0x080074ba
 8005610:	7ff00000 	.word	0x7ff00000
 8005614:	0800749f 	.word	0x0800749f
 8005618:	08007473 	.word	0x08007473
 800561c:	08007472 	.word	0x08007472
 8005620:	3ff80000 	.word	0x3ff80000
 8005624:	08007608 	.word	0x08007608
 8005628:	08007512 	.word	0x08007512
 800562c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005630:	6018      	str	r0, [r3, #0]
 8005632:	9b08      	ldr	r3, [sp, #32]
 8005634:	2b0e      	cmp	r3, #14
 8005636:	f200 80a1 	bhi.w	800577c <_dtoa_r+0x44c>
 800563a:	2c00      	cmp	r4, #0
 800563c:	f000 809e 	beq.w	800577c <_dtoa_r+0x44c>
 8005640:	2f00      	cmp	r7, #0
 8005642:	dd33      	ble.n	80056ac <_dtoa_r+0x37c>
 8005644:	4b9c      	ldr	r3, [pc, #624]	@ (80058b8 <_dtoa_r+0x588>)
 8005646:	f007 020f 	and.w	r2, r7, #15
 800564a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800564e:	05f8      	lsls	r0, r7, #23
 8005650:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005654:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005658:	ea4f 1427 	mov.w	r4, r7, asr #4
 800565c:	d516      	bpl.n	800568c <_dtoa_r+0x35c>
 800565e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005662:	4b96      	ldr	r3, [pc, #600]	@ (80058bc <_dtoa_r+0x58c>)
 8005664:	2603      	movs	r6, #3
 8005666:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800566a:	f7fb f85f 	bl	800072c <__aeabi_ddiv>
 800566e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005672:	f004 040f 	and.w	r4, r4, #15
 8005676:	4d91      	ldr	r5, [pc, #580]	@ (80058bc <_dtoa_r+0x58c>)
 8005678:	b954      	cbnz	r4, 8005690 <_dtoa_r+0x360>
 800567a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800567e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005682:	f7fb f853 	bl	800072c <__aeabi_ddiv>
 8005686:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800568a:	e028      	b.n	80056de <_dtoa_r+0x3ae>
 800568c:	2602      	movs	r6, #2
 800568e:	e7f2      	b.n	8005676 <_dtoa_r+0x346>
 8005690:	07e1      	lsls	r1, r4, #31
 8005692:	d508      	bpl.n	80056a6 <_dtoa_r+0x376>
 8005694:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005698:	e9d5 2300 	ldrd	r2, r3, [r5]
 800569c:	f7fa ff1c 	bl	80004d8 <__aeabi_dmul>
 80056a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80056a4:	3601      	adds	r6, #1
 80056a6:	1064      	asrs	r4, r4, #1
 80056a8:	3508      	adds	r5, #8
 80056aa:	e7e5      	b.n	8005678 <_dtoa_r+0x348>
 80056ac:	f000 80af 	beq.w	800580e <_dtoa_r+0x4de>
 80056b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056b4:	427c      	negs	r4, r7
 80056b6:	4b80      	ldr	r3, [pc, #512]	@ (80058b8 <_dtoa_r+0x588>)
 80056b8:	f004 020f 	and.w	r2, r4, #15
 80056bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f7fa ff08 	bl	80004d8 <__aeabi_dmul>
 80056c8:	2602      	movs	r6, #2
 80056ca:	2300      	movs	r3, #0
 80056cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056d0:	4d7a      	ldr	r5, [pc, #488]	@ (80058bc <_dtoa_r+0x58c>)
 80056d2:	1124      	asrs	r4, r4, #4
 80056d4:	2c00      	cmp	r4, #0
 80056d6:	f040 808f 	bne.w	80057f8 <_dtoa_r+0x4c8>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1d3      	bne.n	8005686 <_dtoa_r+0x356>
 80056de:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80056e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8094 	beq.w	8005812 <_dtoa_r+0x4e2>
 80056ea:	2200      	movs	r2, #0
 80056ec:	4620      	mov	r0, r4
 80056ee:	4629      	mov	r1, r5
 80056f0:	4b73      	ldr	r3, [pc, #460]	@ (80058c0 <_dtoa_r+0x590>)
 80056f2:	f7fb f963 	bl	80009bc <__aeabi_dcmplt>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	f000 808b 	beq.w	8005812 <_dtoa_r+0x4e2>
 80056fc:	9b08      	ldr	r3, [sp, #32]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8087 	beq.w	8005812 <_dtoa_r+0x4e2>
 8005704:	f1bb 0f00 	cmp.w	fp, #0
 8005708:	dd34      	ble.n	8005774 <_dtoa_r+0x444>
 800570a:	4620      	mov	r0, r4
 800570c:	2200      	movs	r2, #0
 800570e:	4629      	mov	r1, r5
 8005710:	4b6c      	ldr	r3, [pc, #432]	@ (80058c4 <_dtoa_r+0x594>)
 8005712:	f7fa fee1 	bl	80004d8 <__aeabi_dmul>
 8005716:	465c      	mov	r4, fp
 8005718:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800571c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005720:	3601      	adds	r6, #1
 8005722:	4630      	mov	r0, r6
 8005724:	f7fa fe6e 	bl	8000404 <__aeabi_i2d>
 8005728:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800572c:	f7fa fed4 	bl	80004d8 <__aeabi_dmul>
 8005730:	2200      	movs	r2, #0
 8005732:	4b65      	ldr	r3, [pc, #404]	@ (80058c8 <_dtoa_r+0x598>)
 8005734:	f7fa fd1a 	bl	800016c <__adddf3>
 8005738:	4605      	mov	r5, r0
 800573a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800573e:	2c00      	cmp	r4, #0
 8005740:	d16a      	bne.n	8005818 <_dtoa_r+0x4e8>
 8005742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005746:	2200      	movs	r2, #0
 8005748:	4b60      	ldr	r3, [pc, #384]	@ (80058cc <_dtoa_r+0x59c>)
 800574a:	f7fa fd0d 	bl	8000168 <__aeabi_dsub>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005756:	462a      	mov	r2, r5
 8005758:	4633      	mov	r3, r6
 800575a:	f7fb f94d 	bl	80009f8 <__aeabi_dcmpgt>
 800575e:	2800      	cmp	r0, #0
 8005760:	f040 8298 	bne.w	8005c94 <_dtoa_r+0x964>
 8005764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005768:	462a      	mov	r2, r5
 800576a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800576e:	f7fb f925 	bl	80009bc <__aeabi_dcmplt>
 8005772:	bb38      	cbnz	r0, 80057c4 <_dtoa_r+0x494>
 8005774:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005778:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800577c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800577e:	2b00      	cmp	r3, #0
 8005780:	f2c0 8157 	blt.w	8005a32 <_dtoa_r+0x702>
 8005784:	2f0e      	cmp	r7, #14
 8005786:	f300 8154 	bgt.w	8005a32 <_dtoa_r+0x702>
 800578a:	4b4b      	ldr	r3, [pc, #300]	@ (80058b8 <_dtoa_r+0x588>)
 800578c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005790:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005794:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005798:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800579a:	2b00      	cmp	r3, #0
 800579c:	f280 80e5 	bge.w	800596a <_dtoa_r+0x63a>
 80057a0:	9b08      	ldr	r3, [sp, #32]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f300 80e1 	bgt.w	800596a <_dtoa_r+0x63a>
 80057a8:	d10c      	bne.n	80057c4 <_dtoa_r+0x494>
 80057aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057ae:	2200      	movs	r2, #0
 80057b0:	4b46      	ldr	r3, [pc, #280]	@ (80058cc <_dtoa_r+0x59c>)
 80057b2:	f7fa fe91 	bl	80004d8 <__aeabi_dmul>
 80057b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057ba:	f7fb f913 	bl	80009e4 <__aeabi_dcmpge>
 80057be:	2800      	cmp	r0, #0
 80057c0:	f000 8266 	beq.w	8005c90 <_dtoa_r+0x960>
 80057c4:	2400      	movs	r4, #0
 80057c6:	4625      	mov	r5, r4
 80057c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80057ca:	4656      	mov	r6, sl
 80057cc:	ea6f 0803 	mvn.w	r8, r3
 80057d0:	2700      	movs	r7, #0
 80057d2:	4621      	mov	r1, r4
 80057d4:	4648      	mov	r0, r9
 80057d6:	f000 fcbd 	bl	8006154 <_Bfree>
 80057da:	2d00      	cmp	r5, #0
 80057dc:	f000 80bd 	beq.w	800595a <_dtoa_r+0x62a>
 80057e0:	b12f      	cbz	r7, 80057ee <_dtoa_r+0x4be>
 80057e2:	42af      	cmp	r7, r5
 80057e4:	d003      	beq.n	80057ee <_dtoa_r+0x4be>
 80057e6:	4639      	mov	r1, r7
 80057e8:	4648      	mov	r0, r9
 80057ea:	f000 fcb3 	bl	8006154 <_Bfree>
 80057ee:	4629      	mov	r1, r5
 80057f0:	4648      	mov	r0, r9
 80057f2:	f000 fcaf 	bl	8006154 <_Bfree>
 80057f6:	e0b0      	b.n	800595a <_dtoa_r+0x62a>
 80057f8:	07e2      	lsls	r2, r4, #31
 80057fa:	d505      	bpl.n	8005808 <_dtoa_r+0x4d8>
 80057fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005800:	f7fa fe6a 	bl	80004d8 <__aeabi_dmul>
 8005804:	2301      	movs	r3, #1
 8005806:	3601      	adds	r6, #1
 8005808:	1064      	asrs	r4, r4, #1
 800580a:	3508      	adds	r5, #8
 800580c:	e762      	b.n	80056d4 <_dtoa_r+0x3a4>
 800580e:	2602      	movs	r6, #2
 8005810:	e765      	b.n	80056de <_dtoa_r+0x3ae>
 8005812:	46b8      	mov	r8, r7
 8005814:	9c08      	ldr	r4, [sp, #32]
 8005816:	e784      	b.n	8005722 <_dtoa_r+0x3f2>
 8005818:	4b27      	ldr	r3, [pc, #156]	@ (80058b8 <_dtoa_r+0x588>)
 800581a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800581c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005820:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005824:	4454      	add	r4, sl
 8005826:	2900      	cmp	r1, #0
 8005828:	d054      	beq.n	80058d4 <_dtoa_r+0x5a4>
 800582a:	2000      	movs	r0, #0
 800582c:	4928      	ldr	r1, [pc, #160]	@ (80058d0 <_dtoa_r+0x5a0>)
 800582e:	f7fa ff7d 	bl	800072c <__aeabi_ddiv>
 8005832:	4633      	mov	r3, r6
 8005834:	462a      	mov	r2, r5
 8005836:	f7fa fc97 	bl	8000168 <__aeabi_dsub>
 800583a:	4656      	mov	r6, sl
 800583c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005844:	f7fb f8f8 	bl	8000a38 <__aeabi_d2iz>
 8005848:	4605      	mov	r5, r0
 800584a:	f7fa fddb 	bl	8000404 <__aeabi_i2d>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005856:	f7fa fc87 	bl	8000168 <__aeabi_dsub>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	3530      	adds	r5, #48	@ 0x30
 8005860:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005864:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005868:	f806 5b01 	strb.w	r5, [r6], #1
 800586c:	f7fb f8a6 	bl	80009bc <__aeabi_dcmplt>
 8005870:	2800      	cmp	r0, #0
 8005872:	d172      	bne.n	800595a <_dtoa_r+0x62a>
 8005874:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005878:	2000      	movs	r0, #0
 800587a:	4911      	ldr	r1, [pc, #68]	@ (80058c0 <_dtoa_r+0x590>)
 800587c:	f7fa fc74 	bl	8000168 <__aeabi_dsub>
 8005880:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005884:	f7fb f89a 	bl	80009bc <__aeabi_dcmplt>
 8005888:	2800      	cmp	r0, #0
 800588a:	f040 80b4 	bne.w	80059f6 <_dtoa_r+0x6c6>
 800588e:	42a6      	cmp	r6, r4
 8005890:	f43f af70 	beq.w	8005774 <_dtoa_r+0x444>
 8005894:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005898:	2200      	movs	r2, #0
 800589a:	4b0a      	ldr	r3, [pc, #40]	@ (80058c4 <_dtoa_r+0x594>)
 800589c:	f7fa fe1c 	bl	80004d8 <__aeabi_dmul>
 80058a0:	2200      	movs	r2, #0
 80058a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058aa:	4b06      	ldr	r3, [pc, #24]	@ (80058c4 <_dtoa_r+0x594>)
 80058ac:	f7fa fe14 	bl	80004d8 <__aeabi_dmul>
 80058b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80058b4:	e7c4      	b.n	8005840 <_dtoa_r+0x510>
 80058b6:	bf00      	nop
 80058b8:	08007608 	.word	0x08007608
 80058bc:	080075e0 	.word	0x080075e0
 80058c0:	3ff00000 	.word	0x3ff00000
 80058c4:	40240000 	.word	0x40240000
 80058c8:	401c0000 	.word	0x401c0000
 80058cc:	40140000 	.word	0x40140000
 80058d0:	3fe00000 	.word	0x3fe00000
 80058d4:	4631      	mov	r1, r6
 80058d6:	4628      	mov	r0, r5
 80058d8:	f7fa fdfe 	bl	80004d8 <__aeabi_dmul>
 80058dc:	4656      	mov	r6, sl
 80058de:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058e2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80058e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058e8:	f7fb f8a6 	bl	8000a38 <__aeabi_d2iz>
 80058ec:	4605      	mov	r5, r0
 80058ee:	f7fa fd89 	bl	8000404 <__aeabi_i2d>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058fa:	f7fa fc35 	bl	8000168 <__aeabi_dsub>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	3530      	adds	r5, #48	@ 0x30
 8005904:	f806 5b01 	strb.w	r5, [r6], #1
 8005908:	42a6      	cmp	r6, r4
 800590a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	d124      	bne.n	800595e <_dtoa_r+0x62e>
 8005914:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005918:	4bae      	ldr	r3, [pc, #696]	@ (8005bd4 <_dtoa_r+0x8a4>)
 800591a:	f7fa fc27 	bl	800016c <__adddf3>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005926:	f7fb f867 	bl	80009f8 <__aeabi_dcmpgt>
 800592a:	2800      	cmp	r0, #0
 800592c:	d163      	bne.n	80059f6 <_dtoa_r+0x6c6>
 800592e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005932:	2000      	movs	r0, #0
 8005934:	49a7      	ldr	r1, [pc, #668]	@ (8005bd4 <_dtoa_r+0x8a4>)
 8005936:	f7fa fc17 	bl	8000168 <__aeabi_dsub>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005942:	f7fb f83b 	bl	80009bc <__aeabi_dcmplt>
 8005946:	2800      	cmp	r0, #0
 8005948:	f43f af14 	beq.w	8005774 <_dtoa_r+0x444>
 800594c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800594e:	1e73      	subs	r3, r6, #1
 8005950:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005952:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005956:	2b30      	cmp	r3, #48	@ 0x30
 8005958:	d0f8      	beq.n	800594c <_dtoa_r+0x61c>
 800595a:	4647      	mov	r7, r8
 800595c:	e03b      	b.n	80059d6 <_dtoa_r+0x6a6>
 800595e:	4b9e      	ldr	r3, [pc, #632]	@ (8005bd8 <_dtoa_r+0x8a8>)
 8005960:	f7fa fdba 	bl	80004d8 <__aeabi_dmul>
 8005964:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005968:	e7bc      	b.n	80058e4 <_dtoa_r+0x5b4>
 800596a:	4656      	mov	r6, sl
 800596c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005974:	4620      	mov	r0, r4
 8005976:	4629      	mov	r1, r5
 8005978:	f7fa fed8 	bl	800072c <__aeabi_ddiv>
 800597c:	f7fb f85c 	bl	8000a38 <__aeabi_d2iz>
 8005980:	4680      	mov	r8, r0
 8005982:	f7fa fd3f 	bl	8000404 <__aeabi_i2d>
 8005986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800598a:	f7fa fda5 	bl	80004d8 <__aeabi_dmul>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4620      	mov	r0, r4
 8005994:	4629      	mov	r1, r5
 8005996:	f7fa fbe7 	bl	8000168 <__aeabi_dsub>
 800599a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800599e:	9d08      	ldr	r5, [sp, #32]
 80059a0:	f806 4b01 	strb.w	r4, [r6], #1
 80059a4:	eba6 040a 	sub.w	r4, r6, sl
 80059a8:	42a5      	cmp	r5, r4
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	d133      	bne.n	8005a18 <_dtoa_r+0x6e8>
 80059b0:	f7fa fbdc 	bl	800016c <__adddf3>
 80059b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059b8:	4604      	mov	r4, r0
 80059ba:	460d      	mov	r5, r1
 80059bc:	f7fb f81c 	bl	80009f8 <__aeabi_dcmpgt>
 80059c0:	b9c0      	cbnz	r0, 80059f4 <_dtoa_r+0x6c4>
 80059c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059c6:	4620      	mov	r0, r4
 80059c8:	4629      	mov	r1, r5
 80059ca:	f7fa ffed 	bl	80009a8 <__aeabi_dcmpeq>
 80059ce:	b110      	cbz	r0, 80059d6 <_dtoa_r+0x6a6>
 80059d0:	f018 0f01 	tst.w	r8, #1
 80059d4:	d10e      	bne.n	80059f4 <_dtoa_r+0x6c4>
 80059d6:	4648      	mov	r0, r9
 80059d8:	9903      	ldr	r1, [sp, #12]
 80059da:	f000 fbbb 	bl	8006154 <_Bfree>
 80059de:	2300      	movs	r3, #0
 80059e0:	7033      	strb	r3, [r6, #0]
 80059e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80059e4:	3701      	adds	r7, #1
 80059e6:	601f      	str	r7, [r3, #0]
 80059e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 824b 	beq.w	8005e86 <_dtoa_r+0xb56>
 80059f0:	601e      	str	r6, [r3, #0]
 80059f2:	e248      	b.n	8005e86 <_dtoa_r+0xb56>
 80059f4:	46b8      	mov	r8, r7
 80059f6:	4633      	mov	r3, r6
 80059f8:	461e      	mov	r6, r3
 80059fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059fe:	2a39      	cmp	r2, #57	@ 0x39
 8005a00:	d106      	bne.n	8005a10 <_dtoa_r+0x6e0>
 8005a02:	459a      	cmp	sl, r3
 8005a04:	d1f8      	bne.n	80059f8 <_dtoa_r+0x6c8>
 8005a06:	2230      	movs	r2, #48	@ 0x30
 8005a08:	f108 0801 	add.w	r8, r8, #1
 8005a0c:	f88a 2000 	strb.w	r2, [sl]
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	3201      	adds	r2, #1
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	e7a0      	b.n	800595a <_dtoa_r+0x62a>
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4b6f      	ldr	r3, [pc, #444]	@ (8005bd8 <_dtoa_r+0x8a8>)
 8005a1c:	f7fa fd5c 	bl	80004d8 <__aeabi_dmul>
 8005a20:	2200      	movs	r2, #0
 8005a22:	2300      	movs	r3, #0
 8005a24:	4604      	mov	r4, r0
 8005a26:	460d      	mov	r5, r1
 8005a28:	f7fa ffbe 	bl	80009a8 <__aeabi_dcmpeq>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d09f      	beq.n	8005970 <_dtoa_r+0x640>
 8005a30:	e7d1      	b.n	80059d6 <_dtoa_r+0x6a6>
 8005a32:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	f000 80ea 	beq.w	8005c0e <_dtoa_r+0x8de>
 8005a3a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005a3c:	2a01      	cmp	r2, #1
 8005a3e:	f300 80cd 	bgt.w	8005bdc <_dtoa_r+0x8ac>
 8005a42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a44:	2a00      	cmp	r2, #0
 8005a46:	f000 80c1 	beq.w	8005bcc <_dtoa_r+0x89c>
 8005a4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005a4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a50:	9e04      	ldr	r6, [sp, #16]
 8005a52:	9a04      	ldr	r2, [sp, #16]
 8005a54:	2101      	movs	r1, #1
 8005a56:	441a      	add	r2, r3
 8005a58:	9204      	str	r2, [sp, #16]
 8005a5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a5c:	4648      	mov	r0, r9
 8005a5e:	441a      	add	r2, r3
 8005a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a62:	f000 fc2b 	bl	80062bc <__i2b>
 8005a66:	4605      	mov	r5, r0
 8005a68:	b166      	cbz	r6, 8005a84 <_dtoa_r+0x754>
 8005a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	dd09      	ble.n	8005a84 <_dtoa_r+0x754>
 8005a70:	42b3      	cmp	r3, r6
 8005a72:	bfa8      	it	ge
 8005a74:	4633      	movge	r3, r6
 8005a76:	9a04      	ldr	r2, [sp, #16]
 8005a78:	1af6      	subs	r6, r6, r3
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	9204      	str	r2, [sp, #16]
 8005a7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a86:	b30b      	cbz	r3, 8005acc <_dtoa_r+0x79c>
 8005a88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 80c6 	beq.w	8005c1c <_dtoa_r+0x8ec>
 8005a90:	2c00      	cmp	r4, #0
 8005a92:	f000 80c0 	beq.w	8005c16 <_dtoa_r+0x8e6>
 8005a96:	4629      	mov	r1, r5
 8005a98:	4622      	mov	r2, r4
 8005a9a:	4648      	mov	r0, r9
 8005a9c:	f000 fcc6 	bl	800642c <__pow5mult>
 8005aa0:	9a03      	ldr	r2, [sp, #12]
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	4648      	mov	r0, r9
 8005aa8:	f000 fc1e 	bl	80062e8 <__multiply>
 8005aac:	9903      	ldr	r1, [sp, #12]
 8005aae:	4680      	mov	r8, r0
 8005ab0:	4648      	mov	r0, r9
 8005ab2:	f000 fb4f 	bl	8006154 <_Bfree>
 8005ab6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ab8:	1b1b      	subs	r3, r3, r4
 8005aba:	930a      	str	r3, [sp, #40]	@ 0x28
 8005abc:	f000 80b1 	beq.w	8005c22 <_dtoa_r+0x8f2>
 8005ac0:	4641      	mov	r1, r8
 8005ac2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ac4:	4648      	mov	r0, r9
 8005ac6:	f000 fcb1 	bl	800642c <__pow5mult>
 8005aca:	9003      	str	r0, [sp, #12]
 8005acc:	2101      	movs	r1, #1
 8005ace:	4648      	mov	r0, r9
 8005ad0:	f000 fbf4 	bl	80062bc <__i2b>
 8005ad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 81d8 	beq.w	8005e8e <_dtoa_r+0xb5e>
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4601      	mov	r1, r0
 8005ae2:	4648      	mov	r0, r9
 8005ae4:	f000 fca2 	bl	800642c <__pow5mult>
 8005ae8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005aea:	4604      	mov	r4, r0
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	f300 809f 	bgt.w	8005c30 <_dtoa_r+0x900>
 8005af2:	9b06      	ldr	r3, [sp, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f040 8097 	bne.w	8005c28 <_dtoa_r+0x8f8>
 8005afa:	9b07      	ldr	r3, [sp, #28]
 8005afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f040 8093 	bne.w	8005c2c <_dtoa_r+0x8fc>
 8005b06:	9b07      	ldr	r3, [sp, #28]
 8005b08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b0c:	0d1b      	lsrs	r3, r3, #20
 8005b0e:	051b      	lsls	r3, r3, #20
 8005b10:	b133      	cbz	r3, 8005b20 <_dtoa_r+0x7f0>
 8005b12:	9b04      	ldr	r3, [sp, #16]
 8005b14:	3301      	adds	r3, #1
 8005b16:	9304      	str	r3, [sp, #16]
 8005b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b1e:	2301      	movs	r3, #1
 8005b20:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 81b8 	beq.w	8005e9a <_dtoa_r+0xb6a>
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b30:	6918      	ldr	r0, [r3, #16]
 8005b32:	f000 fb77 	bl	8006224 <__hi0bits>
 8005b36:	f1c0 0020 	rsb	r0, r0, #32
 8005b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b3c:	4418      	add	r0, r3
 8005b3e:	f010 001f 	ands.w	r0, r0, #31
 8005b42:	f000 8082 	beq.w	8005c4a <_dtoa_r+0x91a>
 8005b46:	f1c0 0320 	rsb	r3, r0, #32
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	dd73      	ble.n	8005c36 <_dtoa_r+0x906>
 8005b4e:	9b04      	ldr	r3, [sp, #16]
 8005b50:	f1c0 001c 	rsb	r0, r0, #28
 8005b54:	4403      	add	r3, r0
 8005b56:	9304      	str	r3, [sp, #16]
 8005b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b5a:	4406      	add	r6, r0
 8005b5c:	4403      	add	r3, r0
 8005b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b60:	9b04      	ldr	r3, [sp, #16]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	dd05      	ble.n	8005b72 <_dtoa_r+0x842>
 8005b66:	461a      	mov	r2, r3
 8005b68:	4648      	mov	r0, r9
 8005b6a:	9903      	ldr	r1, [sp, #12]
 8005b6c:	f000 fcb8 	bl	80064e0 <__lshift>
 8005b70:	9003      	str	r0, [sp, #12]
 8005b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	dd05      	ble.n	8005b84 <_dtoa_r+0x854>
 8005b78:	4621      	mov	r1, r4
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4648      	mov	r0, r9
 8005b7e:	f000 fcaf 	bl	80064e0 <__lshift>
 8005b82:	4604      	mov	r4, r0
 8005b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d061      	beq.n	8005c4e <_dtoa_r+0x91e>
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	9803      	ldr	r0, [sp, #12]
 8005b8e:	f000 fd13 	bl	80065b8 <__mcmp>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	da5b      	bge.n	8005c4e <_dtoa_r+0x91e>
 8005b96:	2300      	movs	r3, #0
 8005b98:	220a      	movs	r2, #10
 8005b9a:	4648      	mov	r0, r9
 8005b9c:	9903      	ldr	r1, [sp, #12]
 8005b9e:	f000 fafb 	bl	8006198 <__multadd>
 8005ba2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ba4:	f107 38ff 	add.w	r8, r7, #4294967295
 8005ba8:	9003      	str	r0, [sp, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8177 	beq.w	8005e9e <_dtoa_r+0xb6e>
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	220a      	movs	r2, #10
 8005bb6:	4648      	mov	r0, r9
 8005bb8:	f000 faee 	bl	8006198 <__multadd>
 8005bbc:	f1bb 0f00 	cmp.w	fp, #0
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	dc6f      	bgt.n	8005ca4 <_dtoa_r+0x974>
 8005bc4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	dc49      	bgt.n	8005c5e <_dtoa_r+0x92e>
 8005bca:	e06b      	b.n	8005ca4 <_dtoa_r+0x974>
 8005bcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005bce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005bd2:	e73c      	b.n	8005a4e <_dtoa_r+0x71e>
 8005bd4:	3fe00000 	.word	0x3fe00000
 8005bd8:	40240000 	.word	0x40240000
 8005bdc:	9b08      	ldr	r3, [sp, #32]
 8005bde:	1e5c      	subs	r4, r3, #1
 8005be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005be2:	42a3      	cmp	r3, r4
 8005be4:	db09      	blt.n	8005bfa <_dtoa_r+0x8ca>
 8005be6:	1b1c      	subs	r4, r3, r4
 8005be8:	9b08      	ldr	r3, [sp, #32]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f6bf af30 	bge.w	8005a50 <_dtoa_r+0x720>
 8005bf0:	9b04      	ldr	r3, [sp, #16]
 8005bf2:	9a08      	ldr	r2, [sp, #32]
 8005bf4:	1a9e      	subs	r6, r3, r2
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e72b      	b.n	8005a52 <_dtoa_r+0x722>
 8005bfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bfe:	1ae3      	subs	r3, r4, r3
 8005c00:	441a      	add	r2, r3
 8005c02:	940a      	str	r4, [sp, #40]	@ 0x28
 8005c04:	9e04      	ldr	r6, [sp, #16]
 8005c06:	2400      	movs	r4, #0
 8005c08:	9b08      	ldr	r3, [sp, #32]
 8005c0a:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c0c:	e721      	b.n	8005a52 <_dtoa_r+0x722>
 8005c0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005c10:	9e04      	ldr	r6, [sp, #16]
 8005c12:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005c14:	e728      	b.n	8005a68 <_dtoa_r+0x738>
 8005c16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c1a:	e751      	b.n	8005ac0 <_dtoa_r+0x790>
 8005c1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c1e:	9903      	ldr	r1, [sp, #12]
 8005c20:	e750      	b.n	8005ac4 <_dtoa_r+0x794>
 8005c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c26:	e751      	b.n	8005acc <_dtoa_r+0x79c>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	e779      	b.n	8005b20 <_dtoa_r+0x7f0>
 8005c2c:	9b06      	ldr	r3, [sp, #24]
 8005c2e:	e777      	b.n	8005b20 <_dtoa_r+0x7f0>
 8005c30:	2300      	movs	r3, #0
 8005c32:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c34:	e779      	b.n	8005b2a <_dtoa_r+0x7fa>
 8005c36:	d093      	beq.n	8005b60 <_dtoa_r+0x830>
 8005c38:	9a04      	ldr	r2, [sp, #16]
 8005c3a:	331c      	adds	r3, #28
 8005c3c:	441a      	add	r2, r3
 8005c3e:	9204      	str	r2, [sp, #16]
 8005c40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c42:	441e      	add	r6, r3
 8005c44:	441a      	add	r2, r3
 8005c46:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c48:	e78a      	b.n	8005b60 <_dtoa_r+0x830>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	e7f4      	b.n	8005c38 <_dtoa_r+0x908>
 8005c4e:	9b08      	ldr	r3, [sp, #32]
 8005c50:	46b8      	mov	r8, r7
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	dc20      	bgt.n	8005c98 <_dtoa_r+0x968>
 8005c56:	469b      	mov	fp, r3
 8005c58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	dd1e      	ble.n	8005c9c <_dtoa_r+0x96c>
 8005c5e:	f1bb 0f00 	cmp.w	fp, #0
 8005c62:	f47f adb1 	bne.w	80057c8 <_dtoa_r+0x498>
 8005c66:	4621      	mov	r1, r4
 8005c68:	465b      	mov	r3, fp
 8005c6a:	2205      	movs	r2, #5
 8005c6c:	4648      	mov	r0, r9
 8005c6e:	f000 fa93 	bl	8006198 <__multadd>
 8005c72:	4601      	mov	r1, r0
 8005c74:	4604      	mov	r4, r0
 8005c76:	9803      	ldr	r0, [sp, #12]
 8005c78:	f000 fc9e 	bl	80065b8 <__mcmp>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	f77f ada3 	ble.w	80057c8 <_dtoa_r+0x498>
 8005c82:	4656      	mov	r6, sl
 8005c84:	2331      	movs	r3, #49	@ 0x31
 8005c86:	f108 0801 	add.w	r8, r8, #1
 8005c8a:	f806 3b01 	strb.w	r3, [r6], #1
 8005c8e:	e59f      	b.n	80057d0 <_dtoa_r+0x4a0>
 8005c90:	46b8      	mov	r8, r7
 8005c92:	9c08      	ldr	r4, [sp, #32]
 8005c94:	4625      	mov	r5, r4
 8005c96:	e7f4      	b.n	8005c82 <_dtoa_r+0x952>
 8005c98:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005c9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 8101 	beq.w	8005ea6 <_dtoa_r+0xb76>
 8005ca4:	2e00      	cmp	r6, #0
 8005ca6:	dd05      	ble.n	8005cb4 <_dtoa_r+0x984>
 8005ca8:	4629      	mov	r1, r5
 8005caa:	4632      	mov	r2, r6
 8005cac:	4648      	mov	r0, r9
 8005cae:	f000 fc17 	bl	80064e0 <__lshift>
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d05c      	beq.n	8005d74 <_dtoa_r+0xa44>
 8005cba:	4648      	mov	r0, r9
 8005cbc:	6869      	ldr	r1, [r5, #4]
 8005cbe:	f000 fa09 	bl	80060d4 <_Balloc>
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	b928      	cbnz	r0, 8005cd2 <_dtoa_r+0x9a2>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005ccc:	4b80      	ldr	r3, [pc, #512]	@ (8005ed0 <_dtoa_r+0xba0>)
 8005cce:	f7ff bb43 	b.w	8005358 <_dtoa_r+0x28>
 8005cd2:	692a      	ldr	r2, [r5, #16]
 8005cd4:	f105 010c 	add.w	r1, r5, #12
 8005cd8:	3202      	adds	r2, #2
 8005cda:	0092      	lsls	r2, r2, #2
 8005cdc:	300c      	adds	r0, #12
 8005cde:	f7ff fa90 	bl	8005202 <memcpy>
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4648      	mov	r0, r9
 8005ce8:	f000 fbfa 	bl	80064e0 <__lshift>
 8005cec:	462f      	mov	r7, r5
 8005cee:	4605      	mov	r5, r0
 8005cf0:	f10a 0301 	add.w	r3, sl, #1
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	eb0a 030b 	add.w	r3, sl, fp
 8005cfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cfc:	9b06      	ldr	r3, [sp, #24]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d04:	9b04      	ldr	r3, [sp, #16]
 8005d06:	4621      	mov	r1, r4
 8005d08:	9803      	ldr	r0, [sp, #12]
 8005d0a:	f103 3bff 	add.w	fp, r3, #4294967295
 8005d0e:	f7ff fa86 	bl	800521e <quorem>
 8005d12:	4603      	mov	r3, r0
 8005d14:	4639      	mov	r1, r7
 8005d16:	3330      	adds	r3, #48	@ 0x30
 8005d18:	9006      	str	r0, [sp, #24]
 8005d1a:	9803      	ldr	r0, [sp, #12]
 8005d1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d1e:	f000 fc4b 	bl	80065b8 <__mcmp>
 8005d22:	462a      	mov	r2, r5
 8005d24:	9008      	str	r0, [sp, #32]
 8005d26:	4621      	mov	r1, r4
 8005d28:	4648      	mov	r0, r9
 8005d2a:	f000 fc61 	bl	80065f0 <__mdiff>
 8005d2e:	68c2      	ldr	r2, [r0, #12]
 8005d30:	4606      	mov	r6, r0
 8005d32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d34:	bb02      	cbnz	r2, 8005d78 <_dtoa_r+0xa48>
 8005d36:	4601      	mov	r1, r0
 8005d38:	9803      	ldr	r0, [sp, #12]
 8005d3a:	f000 fc3d 	bl	80065b8 <__mcmp>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d42:	4631      	mov	r1, r6
 8005d44:	4648      	mov	r0, r9
 8005d46:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005d4a:	f000 fa03 	bl	8006154 <_Bfree>
 8005d4e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005d52:	9e04      	ldr	r6, [sp, #16]
 8005d54:	ea42 0103 	orr.w	r1, r2, r3
 8005d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d5a:	4319      	orrs	r1, r3
 8005d5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d5e:	d10d      	bne.n	8005d7c <_dtoa_r+0xa4c>
 8005d60:	2b39      	cmp	r3, #57	@ 0x39
 8005d62:	d027      	beq.n	8005db4 <_dtoa_r+0xa84>
 8005d64:	9a08      	ldr	r2, [sp, #32]
 8005d66:	2a00      	cmp	r2, #0
 8005d68:	dd01      	ble.n	8005d6e <_dtoa_r+0xa3e>
 8005d6a:	9b06      	ldr	r3, [sp, #24]
 8005d6c:	3331      	adds	r3, #49	@ 0x31
 8005d6e:	f88b 3000 	strb.w	r3, [fp]
 8005d72:	e52e      	b.n	80057d2 <_dtoa_r+0x4a2>
 8005d74:	4628      	mov	r0, r5
 8005d76:	e7b9      	b.n	8005cec <_dtoa_r+0x9bc>
 8005d78:	2201      	movs	r2, #1
 8005d7a:	e7e2      	b.n	8005d42 <_dtoa_r+0xa12>
 8005d7c:	9908      	ldr	r1, [sp, #32]
 8005d7e:	2900      	cmp	r1, #0
 8005d80:	db04      	blt.n	8005d8c <_dtoa_r+0xa5c>
 8005d82:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005d84:	4301      	orrs	r1, r0
 8005d86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d88:	4301      	orrs	r1, r0
 8005d8a:	d120      	bne.n	8005dce <_dtoa_r+0xa9e>
 8005d8c:	2a00      	cmp	r2, #0
 8005d8e:	ddee      	ble.n	8005d6e <_dtoa_r+0xa3e>
 8005d90:	2201      	movs	r2, #1
 8005d92:	9903      	ldr	r1, [sp, #12]
 8005d94:	4648      	mov	r0, r9
 8005d96:	9304      	str	r3, [sp, #16]
 8005d98:	f000 fba2 	bl	80064e0 <__lshift>
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	9003      	str	r0, [sp, #12]
 8005da0:	f000 fc0a 	bl	80065b8 <__mcmp>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	9b04      	ldr	r3, [sp, #16]
 8005da8:	dc02      	bgt.n	8005db0 <_dtoa_r+0xa80>
 8005daa:	d1e0      	bne.n	8005d6e <_dtoa_r+0xa3e>
 8005dac:	07da      	lsls	r2, r3, #31
 8005dae:	d5de      	bpl.n	8005d6e <_dtoa_r+0xa3e>
 8005db0:	2b39      	cmp	r3, #57	@ 0x39
 8005db2:	d1da      	bne.n	8005d6a <_dtoa_r+0xa3a>
 8005db4:	2339      	movs	r3, #57	@ 0x39
 8005db6:	f88b 3000 	strb.w	r3, [fp]
 8005dba:	4633      	mov	r3, r6
 8005dbc:	461e      	mov	r6, r3
 8005dbe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	2a39      	cmp	r2, #57	@ 0x39
 8005dc6:	d04e      	beq.n	8005e66 <_dtoa_r+0xb36>
 8005dc8:	3201      	adds	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	e501      	b.n	80057d2 <_dtoa_r+0x4a2>
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	dd03      	ble.n	8005dda <_dtoa_r+0xaaa>
 8005dd2:	2b39      	cmp	r3, #57	@ 0x39
 8005dd4:	d0ee      	beq.n	8005db4 <_dtoa_r+0xa84>
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	e7c9      	b.n	8005d6e <_dtoa_r+0xa3e>
 8005dda:	9a04      	ldr	r2, [sp, #16]
 8005ddc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005dde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005de2:	428a      	cmp	r2, r1
 8005de4:	d028      	beq.n	8005e38 <_dtoa_r+0xb08>
 8005de6:	2300      	movs	r3, #0
 8005de8:	220a      	movs	r2, #10
 8005dea:	9903      	ldr	r1, [sp, #12]
 8005dec:	4648      	mov	r0, r9
 8005dee:	f000 f9d3 	bl	8006198 <__multadd>
 8005df2:	42af      	cmp	r7, r5
 8005df4:	9003      	str	r0, [sp, #12]
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	f04f 020a 	mov.w	r2, #10
 8005dfe:	4639      	mov	r1, r7
 8005e00:	4648      	mov	r0, r9
 8005e02:	d107      	bne.n	8005e14 <_dtoa_r+0xae4>
 8005e04:	f000 f9c8 	bl	8006198 <__multadd>
 8005e08:	4607      	mov	r7, r0
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	9b04      	ldr	r3, [sp, #16]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	9304      	str	r3, [sp, #16]
 8005e12:	e777      	b.n	8005d04 <_dtoa_r+0x9d4>
 8005e14:	f000 f9c0 	bl	8006198 <__multadd>
 8005e18:	4629      	mov	r1, r5
 8005e1a:	4607      	mov	r7, r0
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	220a      	movs	r2, #10
 8005e20:	4648      	mov	r0, r9
 8005e22:	f000 f9b9 	bl	8006198 <__multadd>
 8005e26:	4605      	mov	r5, r0
 8005e28:	e7f0      	b.n	8005e0c <_dtoa_r+0xadc>
 8005e2a:	f1bb 0f00 	cmp.w	fp, #0
 8005e2e:	bfcc      	ite	gt
 8005e30:	465e      	movgt	r6, fp
 8005e32:	2601      	movle	r6, #1
 8005e34:	2700      	movs	r7, #0
 8005e36:	4456      	add	r6, sl
 8005e38:	2201      	movs	r2, #1
 8005e3a:	9903      	ldr	r1, [sp, #12]
 8005e3c:	4648      	mov	r0, r9
 8005e3e:	9304      	str	r3, [sp, #16]
 8005e40:	f000 fb4e 	bl	80064e0 <__lshift>
 8005e44:	4621      	mov	r1, r4
 8005e46:	9003      	str	r0, [sp, #12]
 8005e48:	f000 fbb6 	bl	80065b8 <__mcmp>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	dcb4      	bgt.n	8005dba <_dtoa_r+0xa8a>
 8005e50:	d102      	bne.n	8005e58 <_dtoa_r+0xb28>
 8005e52:	9b04      	ldr	r3, [sp, #16]
 8005e54:	07db      	lsls	r3, r3, #31
 8005e56:	d4b0      	bmi.n	8005dba <_dtoa_r+0xa8a>
 8005e58:	4633      	mov	r3, r6
 8005e5a:	461e      	mov	r6, r3
 8005e5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e60:	2a30      	cmp	r2, #48	@ 0x30
 8005e62:	d0fa      	beq.n	8005e5a <_dtoa_r+0xb2a>
 8005e64:	e4b5      	b.n	80057d2 <_dtoa_r+0x4a2>
 8005e66:	459a      	cmp	sl, r3
 8005e68:	d1a8      	bne.n	8005dbc <_dtoa_r+0xa8c>
 8005e6a:	2331      	movs	r3, #49	@ 0x31
 8005e6c:	f108 0801 	add.w	r8, r8, #1
 8005e70:	f88a 3000 	strb.w	r3, [sl]
 8005e74:	e4ad      	b.n	80057d2 <_dtoa_r+0x4a2>
 8005e76:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e78:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005ed4 <_dtoa_r+0xba4>
 8005e7c:	b11b      	cbz	r3, 8005e86 <_dtoa_r+0xb56>
 8005e7e:	f10a 0308 	add.w	r3, sl, #8
 8005e82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	4650      	mov	r0, sl
 8005e88:	b017      	add	sp, #92	@ 0x5c
 8005e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	f77f ae2e 	ble.w	8005af2 <_dtoa_r+0x7c2>
 8005e96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e98:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	e64d      	b.n	8005b3a <_dtoa_r+0x80a>
 8005e9e:	f1bb 0f00 	cmp.w	fp, #0
 8005ea2:	f77f aed9 	ble.w	8005c58 <_dtoa_r+0x928>
 8005ea6:	4656      	mov	r6, sl
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	9803      	ldr	r0, [sp, #12]
 8005eac:	f7ff f9b7 	bl	800521e <quorem>
 8005eb0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005eb4:	f806 3b01 	strb.w	r3, [r6], #1
 8005eb8:	eba6 020a 	sub.w	r2, r6, sl
 8005ebc:	4593      	cmp	fp, r2
 8005ebe:	ddb4      	ble.n	8005e2a <_dtoa_r+0xafa>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	220a      	movs	r2, #10
 8005ec4:	4648      	mov	r0, r9
 8005ec6:	9903      	ldr	r1, [sp, #12]
 8005ec8:	f000 f966 	bl	8006198 <__multadd>
 8005ecc:	9003      	str	r0, [sp, #12]
 8005ece:	e7eb      	b.n	8005ea8 <_dtoa_r+0xb78>
 8005ed0:	08007512 	.word	0x08007512
 8005ed4:	08007496 	.word	0x08007496

08005ed8 <_free_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4605      	mov	r5, r0
 8005edc:	2900      	cmp	r1, #0
 8005ede:	d040      	beq.n	8005f62 <_free_r+0x8a>
 8005ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee4:	1f0c      	subs	r4, r1, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bfb8      	it	lt
 8005eea:	18e4      	addlt	r4, r4, r3
 8005eec:	f000 f8e6 	bl	80060bc <__malloc_lock>
 8005ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f64 <_free_r+0x8c>)
 8005ef2:	6813      	ldr	r3, [r2, #0]
 8005ef4:	b933      	cbnz	r3, 8005f04 <_free_r+0x2c>
 8005ef6:	6063      	str	r3, [r4, #4]
 8005ef8:	6014      	str	r4, [r2, #0]
 8005efa:	4628      	mov	r0, r5
 8005efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f00:	f000 b8e2 	b.w	80060c8 <__malloc_unlock>
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	d908      	bls.n	8005f1a <_free_r+0x42>
 8005f08:	6820      	ldr	r0, [r4, #0]
 8005f0a:	1821      	adds	r1, r4, r0
 8005f0c:	428b      	cmp	r3, r1
 8005f0e:	bf01      	itttt	eq
 8005f10:	6819      	ldreq	r1, [r3, #0]
 8005f12:	685b      	ldreq	r3, [r3, #4]
 8005f14:	1809      	addeq	r1, r1, r0
 8005f16:	6021      	streq	r1, [r4, #0]
 8005f18:	e7ed      	b.n	8005ef6 <_free_r+0x1e>
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	b10b      	cbz	r3, 8005f24 <_free_r+0x4c>
 8005f20:	42a3      	cmp	r3, r4
 8005f22:	d9fa      	bls.n	8005f1a <_free_r+0x42>
 8005f24:	6811      	ldr	r1, [r2, #0]
 8005f26:	1850      	adds	r0, r2, r1
 8005f28:	42a0      	cmp	r0, r4
 8005f2a:	d10b      	bne.n	8005f44 <_free_r+0x6c>
 8005f2c:	6820      	ldr	r0, [r4, #0]
 8005f2e:	4401      	add	r1, r0
 8005f30:	1850      	adds	r0, r2, r1
 8005f32:	4283      	cmp	r3, r0
 8005f34:	6011      	str	r1, [r2, #0]
 8005f36:	d1e0      	bne.n	8005efa <_free_r+0x22>
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4408      	add	r0, r1
 8005f3e:	6010      	str	r0, [r2, #0]
 8005f40:	6053      	str	r3, [r2, #4]
 8005f42:	e7da      	b.n	8005efa <_free_r+0x22>
 8005f44:	d902      	bls.n	8005f4c <_free_r+0x74>
 8005f46:	230c      	movs	r3, #12
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	e7d6      	b.n	8005efa <_free_r+0x22>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	1821      	adds	r1, r4, r0
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf01      	itttt	eq
 8005f54:	6819      	ldreq	r1, [r3, #0]
 8005f56:	685b      	ldreq	r3, [r3, #4]
 8005f58:	1809      	addeq	r1, r1, r0
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	6063      	str	r3, [r4, #4]
 8005f5e:	6054      	str	r4, [r2, #4]
 8005f60:	e7cb      	b.n	8005efa <_free_r+0x22>
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	200005b0 	.word	0x200005b0

08005f68 <malloc>:
 8005f68:	4b02      	ldr	r3, [pc, #8]	@ (8005f74 <malloc+0xc>)
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f000 b825 	b.w	8005fbc <_malloc_r>
 8005f72:	bf00      	nop
 8005f74:	20000018 	.word	0x20000018

08005f78 <sbrk_aligned>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	4e0f      	ldr	r6, [pc, #60]	@ (8005fb8 <sbrk_aligned+0x40>)
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	6831      	ldr	r1, [r6, #0]
 8005f80:	4605      	mov	r5, r0
 8005f82:	b911      	cbnz	r1, 8005f8a <sbrk_aligned+0x12>
 8005f84:	f000 fe3a 	bl	8006bfc <_sbrk_r>
 8005f88:	6030      	str	r0, [r6, #0]
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f000 fe35 	bl	8006bfc <_sbrk_r>
 8005f92:	1c43      	adds	r3, r0, #1
 8005f94:	d103      	bne.n	8005f9e <sbrk_aligned+0x26>
 8005f96:	f04f 34ff 	mov.w	r4, #4294967295
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	bd70      	pop	{r4, r5, r6, pc}
 8005f9e:	1cc4      	adds	r4, r0, #3
 8005fa0:	f024 0403 	bic.w	r4, r4, #3
 8005fa4:	42a0      	cmp	r0, r4
 8005fa6:	d0f8      	beq.n	8005f9a <sbrk_aligned+0x22>
 8005fa8:	1a21      	subs	r1, r4, r0
 8005faa:	4628      	mov	r0, r5
 8005fac:	f000 fe26 	bl	8006bfc <_sbrk_r>
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d1f2      	bne.n	8005f9a <sbrk_aligned+0x22>
 8005fb4:	e7ef      	b.n	8005f96 <sbrk_aligned+0x1e>
 8005fb6:	bf00      	nop
 8005fb8:	200005ac 	.word	0x200005ac

08005fbc <_malloc_r>:
 8005fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc0:	1ccd      	adds	r5, r1, #3
 8005fc2:	f025 0503 	bic.w	r5, r5, #3
 8005fc6:	3508      	adds	r5, #8
 8005fc8:	2d0c      	cmp	r5, #12
 8005fca:	bf38      	it	cc
 8005fcc:	250c      	movcc	r5, #12
 8005fce:	2d00      	cmp	r5, #0
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	db01      	blt.n	8005fd8 <_malloc_r+0x1c>
 8005fd4:	42a9      	cmp	r1, r5
 8005fd6:	d904      	bls.n	8005fe2 <_malloc_r+0x26>
 8005fd8:	230c      	movs	r3, #12
 8005fda:	6033      	str	r3, [r6, #0]
 8005fdc:	2000      	movs	r0, #0
 8005fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060b8 <_malloc_r+0xfc>
 8005fe6:	f000 f869 	bl	80060bc <__malloc_lock>
 8005fea:	f8d8 3000 	ldr.w	r3, [r8]
 8005fee:	461c      	mov	r4, r3
 8005ff0:	bb44      	cbnz	r4, 8006044 <_malloc_r+0x88>
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f7ff ffbf 	bl	8005f78 <sbrk_aligned>
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	d158      	bne.n	80060b2 <_malloc_r+0xf6>
 8006000:	f8d8 4000 	ldr.w	r4, [r8]
 8006004:	4627      	mov	r7, r4
 8006006:	2f00      	cmp	r7, #0
 8006008:	d143      	bne.n	8006092 <_malloc_r+0xd6>
 800600a:	2c00      	cmp	r4, #0
 800600c:	d04b      	beq.n	80060a6 <_malloc_r+0xea>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	4639      	mov	r1, r7
 8006012:	4630      	mov	r0, r6
 8006014:	eb04 0903 	add.w	r9, r4, r3
 8006018:	f000 fdf0 	bl	8006bfc <_sbrk_r>
 800601c:	4581      	cmp	r9, r0
 800601e:	d142      	bne.n	80060a6 <_malloc_r+0xea>
 8006020:	6821      	ldr	r1, [r4, #0]
 8006022:	4630      	mov	r0, r6
 8006024:	1a6d      	subs	r5, r5, r1
 8006026:	4629      	mov	r1, r5
 8006028:	f7ff ffa6 	bl	8005f78 <sbrk_aligned>
 800602c:	3001      	adds	r0, #1
 800602e:	d03a      	beq.n	80060a6 <_malloc_r+0xea>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	442b      	add	r3, r5
 8006034:	6023      	str	r3, [r4, #0]
 8006036:	f8d8 3000 	ldr.w	r3, [r8]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	bb62      	cbnz	r2, 8006098 <_malloc_r+0xdc>
 800603e:	f8c8 7000 	str.w	r7, [r8]
 8006042:	e00f      	b.n	8006064 <_malloc_r+0xa8>
 8006044:	6822      	ldr	r2, [r4, #0]
 8006046:	1b52      	subs	r2, r2, r5
 8006048:	d420      	bmi.n	800608c <_malloc_r+0xd0>
 800604a:	2a0b      	cmp	r2, #11
 800604c:	d917      	bls.n	800607e <_malloc_r+0xc2>
 800604e:	1961      	adds	r1, r4, r5
 8006050:	42a3      	cmp	r3, r4
 8006052:	6025      	str	r5, [r4, #0]
 8006054:	bf18      	it	ne
 8006056:	6059      	strne	r1, [r3, #4]
 8006058:	6863      	ldr	r3, [r4, #4]
 800605a:	bf08      	it	eq
 800605c:	f8c8 1000 	streq.w	r1, [r8]
 8006060:	5162      	str	r2, [r4, r5]
 8006062:	604b      	str	r3, [r1, #4]
 8006064:	4630      	mov	r0, r6
 8006066:	f000 f82f 	bl	80060c8 <__malloc_unlock>
 800606a:	f104 000b 	add.w	r0, r4, #11
 800606e:	1d23      	adds	r3, r4, #4
 8006070:	f020 0007 	bic.w	r0, r0, #7
 8006074:	1ac2      	subs	r2, r0, r3
 8006076:	bf1c      	itt	ne
 8006078:	1a1b      	subne	r3, r3, r0
 800607a:	50a3      	strne	r3, [r4, r2]
 800607c:	e7af      	b.n	8005fde <_malloc_r+0x22>
 800607e:	6862      	ldr	r2, [r4, #4]
 8006080:	42a3      	cmp	r3, r4
 8006082:	bf0c      	ite	eq
 8006084:	f8c8 2000 	streq.w	r2, [r8]
 8006088:	605a      	strne	r2, [r3, #4]
 800608a:	e7eb      	b.n	8006064 <_malloc_r+0xa8>
 800608c:	4623      	mov	r3, r4
 800608e:	6864      	ldr	r4, [r4, #4]
 8006090:	e7ae      	b.n	8005ff0 <_malloc_r+0x34>
 8006092:	463c      	mov	r4, r7
 8006094:	687f      	ldr	r7, [r7, #4]
 8006096:	e7b6      	b.n	8006006 <_malloc_r+0x4a>
 8006098:	461a      	mov	r2, r3
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	42a3      	cmp	r3, r4
 800609e:	d1fb      	bne.n	8006098 <_malloc_r+0xdc>
 80060a0:	2300      	movs	r3, #0
 80060a2:	6053      	str	r3, [r2, #4]
 80060a4:	e7de      	b.n	8006064 <_malloc_r+0xa8>
 80060a6:	230c      	movs	r3, #12
 80060a8:	4630      	mov	r0, r6
 80060aa:	6033      	str	r3, [r6, #0]
 80060ac:	f000 f80c 	bl	80060c8 <__malloc_unlock>
 80060b0:	e794      	b.n	8005fdc <_malloc_r+0x20>
 80060b2:	6005      	str	r5, [r0, #0]
 80060b4:	e7d6      	b.n	8006064 <_malloc_r+0xa8>
 80060b6:	bf00      	nop
 80060b8:	200005b0 	.word	0x200005b0

080060bc <__malloc_lock>:
 80060bc:	4801      	ldr	r0, [pc, #4]	@ (80060c4 <__malloc_lock+0x8>)
 80060be:	f7ff b890 	b.w	80051e2 <__retarget_lock_acquire_recursive>
 80060c2:	bf00      	nop
 80060c4:	200005a8 	.word	0x200005a8

080060c8 <__malloc_unlock>:
 80060c8:	4801      	ldr	r0, [pc, #4]	@ (80060d0 <__malloc_unlock+0x8>)
 80060ca:	f7ff b88b 	b.w	80051e4 <__retarget_lock_release_recursive>
 80060ce:	bf00      	nop
 80060d0:	200005a8 	.word	0x200005a8

080060d4 <_Balloc>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	69c6      	ldr	r6, [r0, #28]
 80060d8:	4604      	mov	r4, r0
 80060da:	460d      	mov	r5, r1
 80060dc:	b976      	cbnz	r6, 80060fc <_Balloc+0x28>
 80060de:	2010      	movs	r0, #16
 80060e0:	f7ff ff42 	bl	8005f68 <malloc>
 80060e4:	4602      	mov	r2, r0
 80060e6:	61e0      	str	r0, [r4, #28]
 80060e8:	b920      	cbnz	r0, 80060f4 <_Balloc+0x20>
 80060ea:	216b      	movs	r1, #107	@ 0x6b
 80060ec:	4b17      	ldr	r3, [pc, #92]	@ (800614c <_Balloc+0x78>)
 80060ee:	4818      	ldr	r0, [pc, #96]	@ (8006150 <_Balloc+0x7c>)
 80060f0:	f000 fd94 	bl	8006c1c <__assert_func>
 80060f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060f8:	6006      	str	r6, [r0, #0]
 80060fa:	60c6      	str	r6, [r0, #12]
 80060fc:	69e6      	ldr	r6, [r4, #28]
 80060fe:	68f3      	ldr	r3, [r6, #12]
 8006100:	b183      	cbz	r3, 8006124 <_Balloc+0x50>
 8006102:	69e3      	ldr	r3, [r4, #28]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800610a:	b9b8      	cbnz	r0, 800613c <_Balloc+0x68>
 800610c:	2101      	movs	r1, #1
 800610e:	fa01 f605 	lsl.w	r6, r1, r5
 8006112:	1d72      	adds	r2, r6, #5
 8006114:	4620      	mov	r0, r4
 8006116:	0092      	lsls	r2, r2, #2
 8006118:	f000 fd9e 	bl	8006c58 <_calloc_r>
 800611c:	b160      	cbz	r0, 8006138 <_Balloc+0x64>
 800611e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006122:	e00e      	b.n	8006142 <_Balloc+0x6e>
 8006124:	2221      	movs	r2, #33	@ 0x21
 8006126:	2104      	movs	r1, #4
 8006128:	4620      	mov	r0, r4
 800612a:	f000 fd95 	bl	8006c58 <_calloc_r>
 800612e:	69e3      	ldr	r3, [r4, #28]
 8006130:	60f0      	str	r0, [r6, #12]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e4      	bne.n	8006102 <_Balloc+0x2e>
 8006138:	2000      	movs	r0, #0
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	6802      	ldr	r2, [r0, #0]
 800613e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006142:	2300      	movs	r3, #0
 8006144:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006148:	e7f7      	b.n	800613a <_Balloc+0x66>
 800614a:	bf00      	nop
 800614c:	080074a3 	.word	0x080074a3
 8006150:	08007523 	.word	0x08007523

08006154 <_Bfree>:
 8006154:	b570      	push	{r4, r5, r6, lr}
 8006156:	69c6      	ldr	r6, [r0, #28]
 8006158:	4605      	mov	r5, r0
 800615a:	460c      	mov	r4, r1
 800615c:	b976      	cbnz	r6, 800617c <_Bfree+0x28>
 800615e:	2010      	movs	r0, #16
 8006160:	f7ff ff02 	bl	8005f68 <malloc>
 8006164:	4602      	mov	r2, r0
 8006166:	61e8      	str	r0, [r5, #28]
 8006168:	b920      	cbnz	r0, 8006174 <_Bfree+0x20>
 800616a:	218f      	movs	r1, #143	@ 0x8f
 800616c:	4b08      	ldr	r3, [pc, #32]	@ (8006190 <_Bfree+0x3c>)
 800616e:	4809      	ldr	r0, [pc, #36]	@ (8006194 <_Bfree+0x40>)
 8006170:	f000 fd54 	bl	8006c1c <__assert_func>
 8006174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006178:	6006      	str	r6, [r0, #0]
 800617a:	60c6      	str	r6, [r0, #12]
 800617c:	b13c      	cbz	r4, 800618e <_Bfree+0x3a>
 800617e:	69eb      	ldr	r3, [r5, #28]
 8006180:	6862      	ldr	r2, [r4, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006188:	6021      	str	r1, [r4, #0]
 800618a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800618e:	bd70      	pop	{r4, r5, r6, pc}
 8006190:	080074a3 	.word	0x080074a3
 8006194:	08007523 	.word	0x08007523

08006198 <__multadd>:
 8006198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800619c:	4607      	mov	r7, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	461e      	mov	r6, r3
 80061a2:	2000      	movs	r0, #0
 80061a4:	690d      	ldr	r5, [r1, #16]
 80061a6:	f101 0c14 	add.w	ip, r1, #20
 80061aa:	f8dc 3000 	ldr.w	r3, [ip]
 80061ae:	3001      	adds	r0, #1
 80061b0:	b299      	uxth	r1, r3
 80061b2:	fb02 6101 	mla	r1, r2, r1, r6
 80061b6:	0c1e      	lsrs	r6, r3, #16
 80061b8:	0c0b      	lsrs	r3, r1, #16
 80061ba:	fb02 3306 	mla	r3, r2, r6, r3
 80061be:	b289      	uxth	r1, r1
 80061c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061c4:	4285      	cmp	r5, r0
 80061c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061ca:	f84c 1b04 	str.w	r1, [ip], #4
 80061ce:	dcec      	bgt.n	80061aa <__multadd+0x12>
 80061d0:	b30e      	cbz	r6, 8006216 <__multadd+0x7e>
 80061d2:	68a3      	ldr	r3, [r4, #8]
 80061d4:	42ab      	cmp	r3, r5
 80061d6:	dc19      	bgt.n	800620c <__multadd+0x74>
 80061d8:	6861      	ldr	r1, [r4, #4]
 80061da:	4638      	mov	r0, r7
 80061dc:	3101      	adds	r1, #1
 80061de:	f7ff ff79 	bl	80060d4 <_Balloc>
 80061e2:	4680      	mov	r8, r0
 80061e4:	b928      	cbnz	r0, 80061f2 <__multadd+0x5a>
 80061e6:	4602      	mov	r2, r0
 80061e8:	21ba      	movs	r1, #186	@ 0xba
 80061ea:	4b0c      	ldr	r3, [pc, #48]	@ (800621c <__multadd+0x84>)
 80061ec:	480c      	ldr	r0, [pc, #48]	@ (8006220 <__multadd+0x88>)
 80061ee:	f000 fd15 	bl	8006c1c <__assert_func>
 80061f2:	6922      	ldr	r2, [r4, #16]
 80061f4:	f104 010c 	add.w	r1, r4, #12
 80061f8:	3202      	adds	r2, #2
 80061fa:	0092      	lsls	r2, r2, #2
 80061fc:	300c      	adds	r0, #12
 80061fe:	f7ff f800 	bl	8005202 <memcpy>
 8006202:	4621      	mov	r1, r4
 8006204:	4638      	mov	r0, r7
 8006206:	f7ff ffa5 	bl	8006154 <_Bfree>
 800620a:	4644      	mov	r4, r8
 800620c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006210:	3501      	adds	r5, #1
 8006212:	615e      	str	r6, [r3, #20]
 8006214:	6125      	str	r5, [r4, #16]
 8006216:	4620      	mov	r0, r4
 8006218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800621c:	08007512 	.word	0x08007512
 8006220:	08007523 	.word	0x08007523

08006224 <__hi0bits>:
 8006224:	4603      	mov	r3, r0
 8006226:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800622a:	bf3a      	itte	cc
 800622c:	0403      	lslcc	r3, r0, #16
 800622e:	2010      	movcc	r0, #16
 8006230:	2000      	movcs	r0, #0
 8006232:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006236:	bf3c      	itt	cc
 8006238:	021b      	lslcc	r3, r3, #8
 800623a:	3008      	addcc	r0, #8
 800623c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006240:	bf3c      	itt	cc
 8006242:	011b      	lslcc	r3, r3, #4
 8006244:	3004      	addcc	r0, #4
 8006246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800624a:	bf3c      	itt	cc
 800624c:	009b      	lslcc	r3, r3, #2
 800624e:	3002      	addcc	r0, #2
 8006250:	2b00      	cmp	r3, #0
 8006252:	db05      	blt.n	8006260 <__hi0bits+0x3c>
 8006254:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006258:	f100 0001 	add.w	r0, r0, #1
 800625c:	bf08      	it	eq
 800625e:	2020      	moveq	r0, #32
 8006260:	4770      	bx	lr

08006262 <__lo0bits>:
 8006262:	6803      	ldr	r3, [r0, #0]
 8006264:	4602      	mov	r2, r0
 8006266:	f013 0007 	ands.w	r0, r3, #7
 800626a:	d00b      	beq.n	8006284 <__lo0bits+0x22>
 800626c:	07d9      	lsls	r1, r3, #31
 800626e:	d421      	bmi.n	80062b4 <__lo0bits+0x52>
 8006270:	0798      	lsls	r0, r3, #30
 8006272:	bf49      	itett	mi
 8006274:	085b      	lsrmi	r3, r3, #1
 8006276:	089b      	lsrpl	r3, r3, #2
 8006278:	2001      	movmi	r0, #1
 800627a:	6013      	strmi	r3, [r2, #0]
 800627c:	bf5c      	itt	pl
 800627e:	2002      	movpl	r0, #2
 8006280:	6013      	strpl	r3, [r2, #0]
 8006282:	4770      	bx	lr
 8006284:	b299      	uxth	r1, r3
 8006286:	b909      	cbnz	r1, 800628c <__lo0bits+0x2a>
 8006288:	2010      	movs	r0, #16
 800628a:	0c1b      	lsrs	r3, r3, #16
 800628c:	b2d9      	uxtb	r1, r3
 800628e:	b909      	cbnz	r1, 8006294 <__lo0bits+0x32>
 8006290:	3008      	adds	r0, #8
 8006292:	0a1b      	lsrs	r3, r3, #8
 8006294:	0719      	lsls	r1, r3, #28
 8006296:	bf04      	itt	eq
 8006298:	091b      	lsreq	r3, r3, #4
 800629a:	3004      	addeq	r0, #4
 800629c:	0799      	lsls	r1, r3, #30
 800629e:	bf04      	itt	eq
 80062a0:	089b      	lsreq	r3, r3, #2
 80062a2:	3002      	addeq	r0, #2
 80062a4:	07d9      	lsls	r1, r3, #31
 80062a6:	d403      	bmi.n	80062b0 <__lo0bits+0x4e>
 80062a8:	085b      	lsrs	r3, r3, #1
 80062aa:	f100 0001 	add.w	r0, r0, #1
 80062ae:	d003      	beq.n	80062b8 <__lo0bits+0x56>
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	4770      	bx	lr
 80062b4:	2000      	movs	r0, #0
 80062b6:	4770      	bx	lr
 80062b8:	2020      	movs	r0, #32
 80062ba:	4770      	bx	lr

080062bc <__i2b>:
 80062bc:	b510      	push	{r4, lr}
 80062be:	460c      	mov	r4, r1
 80062c0:	2101      	movs	r1, #1
 80062c2:	f7ff ff07 	bl	80060d4 <_Balloc>
 80062c6:	4602      	mov	r2, r0
 80062c8:	b928      	cbnz	r0, 80062d6 <__i2b+0x1a>
 80062ca:	f240 1145 	movw	r1, #325	@ 0x145
 80062ce:	4b04      	ldr	r3, [pc, #16]	@ (80062e0 <__i2b+0x24>)
 80062d0:	4804      	ldr	r0, [pc, #16]	@ (80062e4 <__i2b+0x28>)
 80062d2:	f000 fca3 	bl	8006c1c <__assert_func>
 80062d6:	2301      	movs	r3, #1
 80062d8:	6144      	str	r4, [r0, #20]
 80062da:	6103      	str	r3, [r0, #16]
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	bf00      	nop
 80062e0:	08007512 	.word	0x08007512
 80062e4:	08007523 	.word	0x08007523

080062e8 <__multiply>:
 80062e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ec:	4617      	mov	r7, r2
 80062ee:	690a      	ldr	r2, [r1, #16]
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4689      	mov	r9, r1
 80062f4:	429a      	cmp	r2, r3
 80062f6:	bfa2      	ittt	ge
 80062f8:	463b      	movge	r3, r7
 80062fa:	460f      	movge	r7, r1
 80062fc:	4699      	movge	r9, r3
 80062fe:	693d      	ldr	r5, [r7, #16]
 8006300:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	eb05 060a 	add.w	r6, r5, sl
 800630c:	42b3      	cmp	r3, r6
 800630e:	b085      	sub	sp, #20
 8006310:	bfb8      	it	lt
 8006312:	3101      	addlt	r1, #1
 8006314:	f7ff fede 	bl	80060d4 <_Balloc>
 8006318:	b930      	cbnz	r0, 8006328 <__multiply+0x40>
 800631a:	4602      	mov	r2, r0
 800631c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006320:	4b40      	ldr	r3, [pc, #256]	@ (8006424 <__multiply+0x13c>)
 8006322:	4841      	ldr	r0, [pc, #260]	@ (8006428 <__multiply+0x140>)
 8006324:	f000 fc7a 	bl	8006c1c <__assert_func>
 8006328:	f100 0414 	add.w	r4, r0, #20
 800632c:	4623      	mov	r3, r4
 800632e:	2200      	movs	r2, #0
 8006330:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006334:	4573      	cmp	r3, lr
 8006336:	d320      	bcc.n	800637a <__multiply+0x92>
 8006338:	f107 0814 	add.w	r8, r7, #20
 800633c:	f109 0114 	add.w	r1, r9, #20
 8006340:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006344:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006348:	9302      	str	r3, [sp, #8]
 800634a:	1beb      	subs	r3, r5, r7
 800634c:	3b15      	subs	r3, #21
 800634e:	f023 0303 	bic.w	r3, r3, #3
 8006352:	3304      	adds	r3, #4
 8006354:	3715      	adds	r7, #21
 8006356:	42bd      	cmp	r5, r7
 8006358:	bf38      	it	cc
 800635a:	2304      	movcc	r3, #4
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	9b02      	ldr	r3, [sp, #8]
 8006360:	9103      	str	r1, [sp, #12]
 8006362:	428b      	cmp	r3, r1
 8006364:	d80c      	bhi.n	8006380 <__multiply+0x98>
 8006366:	2e00      	cmp	r6, #0
 8006368:	dd03      	ble.n	8006372 <__multiply+0x8a>
 800636a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800636e:	2b00      	cmp	r3, #0
 8006370:	d055      	beq.n	800641e <__multiply+0x136>
 8006372:	6106      	str	r6, [r0, #16]
 8006374:	b005      	add	sp, #20
 8006376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637a:	f843 2b04 	str.w	r2, [r3], #4
 800637e:	e7d9      	b.n	8006334 <__multiply+0x4c>
 8006380:	f8b1 a000 	ldrh.w	sl, [r1]
 8006384:	f1ba 0f00 	cmp.w	sl, #0
 8006388:	d01f      	beq.n	80063ca <__multiply+0xe2>
 800638a:	46c4      	mov	ip, r8
 800638c:	46a1      	mov	r9, r4
 800638e:	2700      	movs	r7, #0
 8006390:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006394:	f8d9 3000 	ldr.w	r3, [r9]
 8006398:	fa1f fb82 	uxth.w	fp, r2
 800639c:	b29b      	uxth	r3, r3
 800639e:	fb0a 330b 	mla	r3, sl, fp, r3
 80063a2:	443b      	add	r3, r7
 80063a4:	f8d9 7000 	ldr.w	r7, [r9]
 80063a8:	0c12      	lsrs	r2, r2, #16
 80063aa:	0c3f      	lsrs	r7, r7, #16
 80063ac:	fb0a 7202 	mla	r2, sl, r2, r7
 80063b0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ba:	4565      	cmp	r5, ip
 80063bc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80063c0:	f849 3b04 	str.w	r3, [r9], #4
 80063c4:	d8e4      	bhi.n	8006390 <__multiply+0xa8>
 80063c6:	9b01      	ldr	r3, [sp, #4]
 80063c8:	50e7      	str	r7, [r4, r3]
 80063ca:	9b03      	ldr	r3, [sp, #12]
 80063cc:	3104      	adds	r1, #4
 80063ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80063d2:	f1b9 0f00 	cmp.w	r9, #0
 80063d6:	d020      	beq.n	800641a <__multiply+0x132>
 80063d8:	4647      	mov	r7, r8
 80063da:	46a4      	mov	ip, r4
 80063dc:	f04f 0a00 	mov.w	sl, #0
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	f8b7 b000 	ldrh.w	fp, [r7]
 80063e6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	fb09 220b 	mla	r2, r9, fp, r2
 80063f0:	4452      	add	r2, sl
 80063f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063f6:	f84c 3b04 	str.w	r3, [ip], #4
 80063fa:	f857 3b04 	ldr.w	r3, [r7], #4
 80063fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006402:	f8bc 3000 	ldrh.w	r3, [ip]
 8006406:	42bd      	cmp	r5, r7
 8006408:	fb09 330a 	mla	r3, r9, sl, r3
 800640c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006410:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006414:	d8e5      	bhi.n	80063e2 <__multiply+0xfa>
 8006416:	9a01      	ldr	r2, [sp, #4]
 8006418:	50a3      	str	r3, [r4, r2]
 800641a:	3404      	adds	r4, #4
 800641c:	e79f      	b.n	800635e <__multiply+0x76>
 800641e:	3e01      	subs	r6, #1
 8006420:	e7a1      	b.n	8006366 <__multiply+0x7e>
 8006422:	bf00      	nop
 8006424:	08007512 	.word	0x08007512
 8006428:	08007523 	.word	0x08007523

0800642c <__pow5mult>:
 800642c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006430:	4615      	mov	r5, r2
 8006432:	f012 0203 	ands.w	r2, r2, #3
 8006436:	4607      	mov	r7, r0
 8006438:	460e      	mov	r6, r1
 800643a:	d007      	beq.n	800644c <__pow5mult+0x20>
 800643c:	4c25      	ldr	r4, [pc, #148]	@ (80064d4 <__pow5mult+0xa8>)
 800643e:	3a01      	subs	r2, #1
 8006440:	2300      	movs	r3, #0
 8006442:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006446:	f7ff fea7 	bl	8006198 <__multadd>
 800644a:	4606      	mov	r6, r0
 800644c:	10ad      	asrs	r5, r5, #2
 800644e:	d03d      	beq.n	80064cc <__pow5mult+0xa0>
 8006450:	69fc      	ldr	r4, [r7, #28]
 8006452:	b97c      	cbnz	r4, 8006474 <__pow5mult+0x48>
 8006454:	2010      	movs	r0, #16
 8006456:	f7ff fd87 	bl	8005f68 <malloc>
 800645a:	4602      	mov	r2, r0
 800645c:	61f8      	str	r0, [r7, #28]
 800645e:	b928      	cbnz	r0, 800646c <__pow5mult+0x40>
 8006460:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006464:	4b1c      	ldr	r3, [pc, #112]	@ (80064d8 <__pow5mult+0xac>)
 8006466:	481d      	ldr	r0, [pc, #116]	@ (80064dc <__pow5mult+0xb0>)
 8006468:	f000 fbd8 	bl	8006c1c <__assert_func>
 800646c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006470:	6004      	str	r4, [r0, #0]
 8006472:	60c4      	str	r4, [r0, #12]
 8006474:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006478:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800647c:	b94c      	cbnz	r4, 8006492 <__pow5mult+0x66>
 800647e:	f240 2171 	movw	r1, #625	@ 0x271
 8006482:	4638      	mov	r0, r7
 8006484:	f7ff ff1a 	bl	80062bc <__i2b>
 8006488:	2300      	movs	r3, #0
 800648a:	4604      	mov	r4, r0
 800648c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006490:	6003      	str	r3, [r0, #0]
 8006492:	f04f 0900 	mov.w	r9, #0
 8006496:	07eb      	lsls	r3, r5, #31
 8006498:	d50a      	bpl.n	80064b0 <__pow5mult+0x84>
 800649a:	4631      	mov	r1, r6
 800649c:	4622      	mov	r2, r4
 800649e:	4638      	mov	r0, r7
 80064a0:	f7ff ff22 	bl	80062e8 <__multiply>
 80064a4:	4680      	mov	r8, r0
 80064a6:	4631      	mov	r1, r6
 80064a8:	4638      	mov	r0, r7
 80064aa:	f7ff fe53 	bl	8006154 <_Bfree>
 80064ae:	4646      	mov	r6, r8
 80064b0:	106d      	asrs	r5, r5, #1
 80064b2:	d00b      	beq.n	80064cc <__pow5mult+0xa0>
 80064b4:	6820      	ldr	r0, [r4, #0]
 80064b6:	b938      	cbnz	r0, 80064c8 <__pow5mult+0x9c>
 80064b8:	4622      	mov	r2, r4
 80064ba:	4621      	mov	r1, r4
 80064bc:	4638      	mov	r0, r7
 80064be:	f7ff ff13 	bl	80062e8 <__multiply>
 80064c2:	6020      	str	r0, [r4, #0]
 80064c4:	f8c0 9000 	str.w	r9, [r0]
 80064c8:	4604      	mov	r4, r0
 80064ca:	e7e4      	b.n	8006496 <__pow5mult+0x6a>
 80064cc:	4630      	mov	r0, r6
 80064ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064d2:	bf00      	nop
 80064d4:	080075d4 	.word	0x080075d4
 80064d8:	080074a3 	.word	0x080074a3
 80064dc:	08007523 	.word	0x08007523

080064e0 <__lshift>:
 80064e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	460c      	mov	r4, r1
 80064e6:	4607      	mov	r7, r0
 80064e8:	4691      	mov	r9, r2
 80064ea:	6923      	ldr	r3, [r4, #16]
 80064ec:	6849      	ldr	r1, [r1, #4]
 80064ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064f2:	68a3      	ldr	r3, [r4, #8]
 80064f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064f8:	f108 0601 	add.w	r6, r8, #1
 80064fc:	42b3      	cmp	r3, r6
 80064fe:	db0b      	blt.n	8006518 <__lshift+0x38>
 8006500:	4638      	mov	r0, r7
 8006502:	f7ff fde7 	bl	80060d4 <_Balloc>
 8006506:	4605      	mov	r5, r0
 8006508:	b948      	cbnz	r0, 800651e <__lshift+0x3e>
 800650a:	4602      	mov	r2, r0
 800650c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006510:	4b27      	ldr	r3, [pc, #156]	@ (80065b0 <__lshift+0xd0>)
 8006512:	4828      	ldr	r0, [pc, #160]	@ (80065b4 <__lshift+0xd4>)
 8006514:	f000 fb82 	bl	8006c1c <__assert_func>
 8006518:	3101      	adds	r1, #1
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	e7ee      	b.n	80064fc <__lshift+0x1c>
 800651e:	2300      	movs	r3, #0
 8006520:	f100 0114 	add.w	r1, r0, #20
 8006524:	f100 0210 	add.w	r2, r0, #16
 8006528:	4618      	mov	r0, r3
 800652a:	4553      	cmp	r3, sl
 800652c:	db33      	blt.n	8006596 <__lshift+0xb6>
 800652e:	6920      	ldr	r0, [r4, #16]
 8006530:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006534:	f104 0314 	add.w	r3, r4, #20
 8006538:	f019 091f 	ands.w	r9, r9, #31
 800653c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006540:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006544:	d02b      	beq.n	800659e <__lshift+0xbe>
 8006546:	468a      	mov	sl, r1
 8006548:	2200      	movs	r2, #0
 800654a:	f1c9 0e20 	rsb	lr, r9, #32
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	fa00 f009 	lsl.w	r0, r0, r9
 8006554:	4310      	orrs	r0, r2
 8006556:	f84a 0b04 	str.w	r0, [sl], #4
 800655a:	f853 2b04 	ldr.w	r2, [r3], #4
 800655e:	459c      	cmp	ip, r3
 8006560:	fa22 f20e 	lsr.w	r2, r2, lr
 8006564:	d8f3      	bhi.n	800654e <__lshift+0x6e>
 8006566:	ebac 0304 	sub.w	r3, ip, r4
 800656a:	3b15      	subs	r3, #21
 800656c:	f023 0303 	bic.w	r3, r3, #3
 8006570:	3304      	adds	r3, #4
 8006572:	f104 0015 	add.w	r0, r4, #21
 8006576:	4560      	cmp	r0, ip
 8006578:	bf88      	it	hi
 800657a:	2304      	movhi	r3, #4
 800657c:	50ca      	str	r2, [r1, r3]
 800657e:	b10a      	cbz	r2, 8006584 <__lshift+0xa4>
 8006580:	f108 0602 	add.w	r6, r8, #2
 8006584:	3e01      	subs	r6, #1
 8006586:	4638      	mov	r0, r7
 8006588:	4621      	mov	r1, r4
 800658a:	612e      	str	r6, [r5, #16]
 800658c:	f7ff fde2 	bl	8006154 <_Bfree>
 8006590:	4628      	mov	r0, r5
 8006592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006596:	f842 0f04 	str.w	r0, [r2, #4]!
 800659a:	3301      	adds	r3, #1
 800659c:	e7c5      	b.n	800652a <__lshift+0x4a>
 800659e:	3904      	subs	r1, #4
 80065a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80065a4:	459c      	cmp	ip, r3
 80065a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80065aa:	d8f9      	bhi.n	80065a0 <__lshift+0xc0>
 80065ac:	e7ea      	b.n	8006584 <__lshift+0xa4>
 80065ae:	bf00      	nop
 80065b0:	08007512 	.word	0x08007512
 80065b4:	08007523 	.word	0x08007523

080065b8 <__mcmp>:
 80065b8:	4603      	mov	r3, r0
 80065ba:	690a      	ldr	r2, [r1, #16]
 80065bc:	6900      	ldr	r0, [r0, #16]
 80065be:	b530      	push	{r4, r5, lr}
 80065c0:	1a80      	subs	r0, r0, r2
 80065c2:	d10e      	bne.n	80065e2 <__mcmp+0x2a>
 80065c4:	3314      	adds	r3, #20
 80065c6:	3114      	adds	r1, #20
 80065c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80065cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80065d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80065d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80065d8:	4295      	cmp	r5, r2
 80065da:	d003      	beq.n	80065e4 <__mcmp+0x2c>
 80065dc:	d205      	bcs.n	80065ea <__mcmp+0x32>
 80065de:	f04f 30ff 	mov.w	r0, #4294967295
 80065e2:	bd30      	pop	{r4, r5, pc}
 80065e4:	42a3      	cmp	r3, r4
 80065e6:	d3f3      	bcc.n	80065d0 <__mcmp+0x18>
 80065e8:	e7fb      	b.n	80065e2 <__mcmp+0x2a>
 80065ea:	2001      	movs	r0, #1
 80065ec:	e7f9      	b.n	80065e2 <__mcmp+0x2a>
	...

080065f0 <__mdiff>:
 80065f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	4689      	mov	r9, r1
 80065f6:	4606      	mov	r6, r0
 80065f8:	4611      	mov	r1, r2
 80065fa:	4648      	mov	r0, r9
 80065fc:	4614      	mov	r4, r2
 80065fe:	f7ff ffdb 	bl	80065b8 <__mcmp>
 8006602:	1e05      	subs	r5, r0, #0
 8006604:	d112      	bne.n	800662c <__mdiff+0x3c>
 8006606:	4629      	mov	r1, r5
 8006608:	4630      	mov	r0, r6
 800660a:	f7ff fd63 	bl	80060d4 <_Balloc>
 800660e:	4602      	mov	r2, r0
 8006610:	b928      	cbnz	r0, 800661e <__mdiff+0x2e>
 8006612:	f240 2137 	movw	r1, #567	@ 0x237
 8006616:	4b3e      	ldr	r3, [pc, #248]	@ (8006710 <__mdiff+0x120>)
 8006618:	483e      	ldr	r0, [pc, #248]	@ (8006714 <__mdiff+0x124>)
 800661a:	f000 faff 	bl	8006c1c <__assert_func>
 800661e:	2301      	movs	r3, #1
 8006620:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006624:	4610      	mov	r0, r2
 8006626:	b003      	add	sp, #12
 8006628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662c:	bfbc      	itt	lt
 800662e:	464b      	movlt	r3, r9
 8006630:	46a1      	movlt	r9, r4
 8006632:	4630      	mov	r0, r6
 8006634:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006638:	bfba      	itte	lt
 800663a:	461c      	movlt	r4, r3
 800663c:	2501      	movlt	r5, #1
 800663e:	2500      	movge	r5, #0
 8006640:	f7ff fd48 	bl	80060d4 <_Balloc>
 8006644:	4602      	mov	r2, r0
 8006646:	b918      	cbnz	r0, 8006650 <__mdiff+0x60>
 8006648:	f240 2145 	movw	r1, #581	@ 0x245
 800664c:	4b30      	ldr	r3, [pc, #192]	@ (8006710 <__mdiff+0x120>)
 800664e:	e7e3      	b.n	8006618 <__mdiff+0x28>
 8006650:	f100 0b14 	add.w	fp, r0, #20
 8006654:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006658:	f109 0310 	add.w	r3, r9, #16
 800665c:	60c5      	str	r5, [r0, #12]
 800665e:	f04f 0c00 	mov.w	ip, #0
 8006662:	f109 0514 	add.w	r5, r9, #20
 8006666:	46d9      	mov	r9, fp
 8006668:	6926      	ldr	r6, [r4, #16]
 800666a:	f104 0e14 	add.w	lr, r4, #20
 800666e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006672:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	9b01      	ldr	r3, [sp, #4]
 800667a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800667e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006682:	b281      	uxth	r1, r0
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	fa1f f38a 	uxth.w	r3, sl
 800668a:	1a5b      	subs	r3, r3, r1
 800668c:	0c00      	lsrs	r0, r0, #16
 800668e:	4463      	add	r3, ip
 8006690:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006694:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006698:	b29b      	uxth	r3, r3
 800669a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800669e:	4576      	cmp	r6, lr
 80066a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80066a4:	f849 3b04 	str.w	r3, [r9], #4
 80066a8:	d8e6      	bhi.n	8006678 <__mdiff+0x88>
 80066aa:	1b33      	subs	r3, r6, r4
 80066ac:	3b15      	subs	r3, #21
 80066ae:	f023 0303 	bic.w	r3, r3, #3
 80066b2:	3415      	adds	r4, #21
 80066b4:	3304      	adds	r3, #4
 80066b6:	42a6      	cmp	r6, r4
 80066b8:	bf38      	it	cc
 80066ba:	2304      	movcc	r3, #4
 80066bc:	441d      	add	r5, r3
 80066be:	445b      	add	r3, fp
 80066c0:	461e      	mov	r6, r3
 80066c2:	462c      	mov	r4, r5
 80066c4:	4544      	cmp	r4, r8
 80066c6:	d30e      	bcc.n	80066e6 <__mdiff+0xf6>
 80066c8:	f108 0103 	add.w	r1, r8, #3
 80066cc:	1b49      	subs	r1, r1, r5
 80066ce:	f021 0103 	bic.w	r1, r1, #3
 80066d2:	3d03      	subs	r5, #3
 80066d4:	45a8      	cmp	r8, r5
 80066d6:	bf38      	it	cc
 80066d8:	2100      	movcc	r1, #0
 80066da:	440b      	add	r3, r1
 80066dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80066e0:	b199      	cbz	r1, 800670a <__mdiff+0x11a>
 80066e2:	6117      	str	r7, [r2, #16]
 80066e4:	e79e      	b.n	8006624 <__mdiff+0x34>
 80066e6:	46e6      	mov	lr, ip
 80066e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80066ec:	fa1f fc81 	uxth.w	ip, r1
 80066f0:	44f4      	add	ip, lr
 80066f2:	0c08      	lsrs	r0, r1, #16
 80066f4:	4471      	add	r1, lr
 80066f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80066fa:	b289      	uxth	r1, r1
 80066fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006700:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006704:	f846 1b04 	str.w	r1, [r6], #4
 8006708:	e7dc      	b.n	80066c4 <__mdiff+0xd4>
 800670a:	3f01      	subs	r7, #1
 800670c:	e7e6      	b.n	80066dc <__mdiff+0xec>
 800670e:	bf00      	nop
 8006710:	08007512 	.word	0x08007512
 8006714:	08007523 	.word	0x08007523

08006718 <__d2b>:
 8006718:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800671c:	2101      	movs	r1, #1
 800671e:	4690      	mov	r8, r2
 8006720:	4699      	mov	r9, r3
 8006722:	9e08      	ldr	r6, [sp, #32]
 8006724:	f7ff fcd6 	bl	80060d4 <_Balloc>
 8006728:	4604      	mov	r4, r0
 800672a:	b930      	cbnz	r0, 800673a <__d2b+0x22>
 800672c:	4602      	mov	r2, r0
 800672e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006732:	4b23      	ldr	r3, [pc, #140]	@ (80067c0 <__d2b+0xa8>)
 8006734:	4823      	ldr	r0, [pc, #140]	@ (80067c4 <__d2b+0xac>)
 8006736:	f000 fa71 	bl	8006c1c <__assert_func>
 800673a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800673e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006742:	b10d      	cbz	r5, 8006748 <__d2b+0x30>
 8006744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006748:	9301      	str	r3, [sp, #4]
 800674a:	f1b8 0300 	subs.w	r3, r8, #0
 800674e:	d024      	beq.n	800679a <__d2b+0x82>
 8006750:	4668      	mov	r0, sp
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	f7ff fd85 	bl	8006262 <__lo0bits>
 8006758:	e9dd 1200 	ldrd	r1, r2, [sp]
 800675c:	b1d8      	cbz	r0, 8006796 <__d2b+0x7e>
 800675e:	f1c0 0320 	rsb	r3, r0, #32
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	430b      	orrs	r3, r1
 8006768:	40c2      	lsrs	r2, r0
 800676a:	6163      	str	r3, [r4, #20]
 800676c:	9201      	str	r2, [sp, #4]
 800676e:	9b01      	ldr	r3, [sp, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	bf0c      	ite	eq
 8006774:	2201      	moveq	r2, #1
 8006776:	2202      	movne	r2, #2
 8006778:	61a3      	str	r3, [r4, #24]
 800677a:	6122      	str	r2, [r4, #16]
 800677c:	b1ad      	cbz	r5, 80067aa <__d2b+0x92>
 800677e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006782:	4405      	add	r5, r0
 8006784:	6035      	str	r5, [r6, #0]
 8006786:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800678a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800678c:	6018      	str	r0, [r3, #0]
 800678e:	4620      	mov	r0, r4
 8006790:	b002      	add	sp, #8
 8006792:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006796:	6161      	str	r1, [r4, #20]
 8006798:	e7e9      	b.n	800676e <__d2b+0x56>
 800679a:	a801      	add	r0, sp, #4
 800679c:	f7ff fd61 	bl	8006262 <__lo0bits>
 80067a0:	9b01      	ldr	r3, [sp, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	6163      	str	r3, [r4, #20]
 80067a6:	3020      	adds	r0, #32
 80067a8:	e7e7      	b.n	800677a <__d2b+0x62>
 80067aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80067ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067b2:	6030      	str	r0, [r6, #0]
 80067b4:	6918      	ldr	r0, [r3, #16]
 80067b6:	f7ff fd35 	bl	8006224 <__hi0bits>
 80067ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067be:	e7e4      	b.n	800678a <__d2b+0x72>
 80067c0:	08007512 	.word	0x08007512
 80067c4:	08007523 	.word	0x08007523

080067c8 <__ssputs_r>:
 80067c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067cc:	461f      	mov	r7, r3
 80067ce:	688e      	ldr	r6, [r1, #8]
 80067d0:	4682      	mov	sl, r0
 80067d2:	42be      	cmp	r6, r7
 80067d4:	460c      	mov	r4, r1
 80067d6:	4690      	mov	r8, r2
 80067d8:	680b      	ldr	r3, [r1, #0]
 80067da:	d82d      	bhi.n	8006838 <__ssputs_r+0x70>
 80067dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80067e4:	d026      	beq.n	8006834 <__ssputs_r+0x6c>
 80067e6:	6965      	ldr	r5, [r4, #20]
 80067e8:	6909      	ldr	r1, [r1, #16]
 80067ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067ee:	eba3 0901 	sub.w	r9, r3, r1
 80067f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067f6:	1c7b      	adds	r3, r7, #1
 80067f8:	444b      	add	r3, r9
 80067fa:	106d      	asrs	r5, r5, #1
 80067fc:	429d      	cmp	r5, r3
 80067fe:	bf38      	it	cc
 8006800:	461d      	movcc	r5, r3
 8006802:	0553      	lsls	r3, r2, #21
 8006804:	d527      	bpl.n	8006856 <__ssputs_r+0x8e>
 8006806:	4629      	mov	r1, r5
 8006808:	f7ff fbd8 	bl	8005fbc <_malloc_r>
 800680c:	4606      	mov	r6, r0
 800680e:	b360      	cbz	r0, 800686a <__ssputs_r+0xa2>
 8006810:	464a      	mov	r2, r9
 8006812:	6921      	ldr	r1, [r4, #16]
 8006814:	f7fe fcf5 	bl	8005202 <memcpy>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800681e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006822:	81a3      	strh	r3, [r4, #12]
 8006824:	6126      	str	r6, [r4, #16]
 8006826:	444e      	add	r6, r9
 8006828:	6026      	str	r6, [r4, #0]
 800682a:	463e      	mov	r6, r7
 800682c:	6165      	str	r5, [r4, #20]
 800682e:	eba5 0509 	sub.w	r5, r5, r9
 8006832:	60a5      	str	r5, [r4, #8]
 8006834:	42be      	cmp	r6, r7
 8006836:	d900      	bls.n	800683a <__ssputs_r+0x72>
 8006838:	463e      	mov	r6, r7
 800683a:	4632      	mov	r2, r6
 800683c:	4641      	mov	r1, r8
 800683e:	6820      	ldr	r0, [r4, #0]
 8006840:	f000 f9c2 	bl	8006bc8 <memmove>
 8006844:	2000      	movs	r0, #0
 8006846:	68a3      	ldr	r3, [r4, #8]
 8006848:	1b9b      	subs	r3, r3, r6
 800684a:	60a3      	str	r3, [r4, #8]
 800684c:	6823      	ldr	r3, [r4, #0]
 800684e:	4433      	add	r3, r6
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006856:	462a      	mov	r2, r5
 8006858:	f000 fa24 	bl	8006ca4 <_realloc_r>
 800685c:	4606      	mov	r6, r0
 800685e:	2800      	cmp	r0, #0
 8006860:	d1e0      	bne.n	8006824 <__ssputs_r+0x5c>
 8006862:	4650      	mov	r0, sl
 8006864:	6921      	ldr	r1, [r4, #16]
 8006866:	f7ff fb37 	bl	8005ed8 <_free_r>
 800686a:	230c      	movs	r3, #12
 800686c:	f8ca 3000 	str.w	r3, [sl]
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	f04f 30ff 	mov.w	r0, #4294967295
 8006876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800687a:	81a3      	strh	r3, [r4, #12]
 800687c:	e7e9      	b.n	8006852 <__ssputs_r+0x8a>
	...

08006880 <_svfiprintf_r>:
 8006880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	4698      	mov	r8, r3
 8006886:	898b      	ldrh	r3, [r1, #12]
 8006888:	4607      	mov	r7, r0
 800688a:	061b      	lsls	r3, r3, #24
 800688c:	460d      	mov	r5, r1
 800688e:	4614      	mov	r4, r2
 8006890:	b09d      	sub	sp, #116	@ 0x74
 8006892:	d510      	bpl.n	80068b6 <_svfiprintf_r+0x36>
 8006894:	690b      	ldr	r3, [r1, #16]
 8006896:	b973      	cbnz	r3, 80068b6 <_svfiprintf_r+0x36>
 8006898:	2140      	movs	r1, #64	@ 0x40
 800689a:	f7ff fb8f 	bl	8005fbc <_malloc_r>
 800689e:	6028      	str	r0, [r5, #0]
 80068a0:	6128      	str	r0, [r5, #16]
 80068a2:	b930      	cbnz	r0, 80068b2 <_svfiprintf_r+0x32>
 80068a4:	230c      	movs	r3, #12
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	b01d      	add	sp, #116	@ 0x74
 80068ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b2:	2340      	movs	r3, #64	@ 0x40
 80068b4:	616b      	str	r3, [r5, #20]
 80068b6:	2300      	movs	r3, #0
 80068b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80068ba:	2320      	movs	r3, #32
 80068bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068c0:	2330      	movs	r3, #48	@ 0x30
 80068c2:	f04f 0901 	mov.w	r9, #1
 80068c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80068ca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006a64 <_svfiprintf_r+0x1e4>
 80068ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068d2:	4623      	mov	r3, r4
 80068d4:	469a      	mov	sl, r3
 80068d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068da:	b10a      	cbz	r2, 80068e0 <_svfiprintf_r+0x60>
 80068dc:	2a25      	cmp	r2, #37	@ 0x25
 80068de:	d1f9      	bne.n	80068d4 <_svfiprintf_r+0x54>
 80068e0:	ebba 0b04 	subs.w	fp, sl, r4
 80068e4:	d00b      	beq.n	80068fe <_svfiprintf_r+0x7e>
 80068e6:	465b      	mov	r3, fp
 80068e8:	4622      	mov	r2, r4
 80068ea:	4629      	mov	r1, r5
 80068ec:	4638      	mov	r0, r7
 80068ee:	f7ff ff6b 	bl	80067c8 <__ssputs_r>
 80068f2:	3001      	adds	r0, #1
 80068f4:	f000 80a7 	beq.w	8006a46 <_svfiprintf_r+0x1c6>
 80068f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068fa:	445a      	add	r2, fp
 80068fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80068fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 809f 	beq.w	8006a46 <_svfiprintf_r+0x1c6>
 8006908:	2300      	movs	r3, #0
 800690a:	f04f 32ff 	mov.w	r2, #4294967295
 800690e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006912:	f10a 0a01 	add.w	sl, sl, #1
 8006916:	9304      	str	r3, [sp, #16]
 8006918:	9307      	str	r3, [sp, #28]
 800691a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800691e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006920:	4654      	mov	r4, sl
 8006922:	2205      	movs	r2, #5
 8006924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006928:	484e      	ldr	r0, [pc, #312]	@ (8006a64 <_svfiprintf_r+0x1e4>)
 800692a:	f7fe fc5c 	bl	80051e6 <memchr>
 800692e:	9a04      	ldr	r2, [sp, #16]
 8006930:	b9d8      	cbnz	r0, 800696a <_svfiprintf_r+0xea>
 8006932:	06d0      	lsls	r0, r2, #27
 8006934:	bf44      	itt	mi
 8006936:	2320      	movmi	r3, #32
 8006938:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800693c:	0711      	lsls	r1, r2, #28
 800693e:	bf44      	itt	mi
 8006940:	232b      	movmi	r3, #43	@ 0x2b
 8006942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006946:	f89a 3000 	ldrb.w	r3, [sl]
 800694a:	2b2a      	cmp	r3, #42	@ 0x2a
 800694c:	d015      	beq.n	800697a <_svfiprintf_r+0xfa>
 800694e:	4654      	mov	r4, sl
 8006950:	2000      	movs	r0, #0
 8006952:	f04f 0c0a 	mov.w	ip, #10
 8006956:	9a07      	ldr	r2, [sp, #28]
 8006958:	4621      	mov	r1, r4
 800695a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800695e:	3b30      	subs	r3, #48	@ 0x30
 8006960:	2b09      	cmp	r3, #9
 8006962:	d94b      	bls.n	80069fc <_svfiprintf_r+0x17c>
 8006964:	b1b0      	cbz	r0, 8006994 <_svfiprintf_r+0x114>
 8006966:	9207      	str	r2, [sp, #28]
 8006968:	e014      	b.n	8006994 <_svfiprintf_r+0x114>
 800696a:	eba0 0308 	sub.w	r3, r0, r8
 800696e:	fa09 f303 	lsl.w	r3, r9, r3
 8006972:	4313      	orrs	r3, r2
 8006974:	46a2      	mov	sl, r4
 8006976:	9304      	str	r3, [sp, #16]
 8006978:	e7d2      	b.n	8006920 <_svfiprintf_r+0xa0>
 800697a:	9b03      	ldr	r3, [sp, #12]
 800697c:	1d19      	adds	r1, r3, #4
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	9103      	str	r1, [sp, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	bfbb      	ittet	lt
 8006986:	425b      	neglt	r3, r3
 8006988:	f042 0202 	orrlt.w	r2, r2, #2
 800698c:	9307      	strge	r3, [sp, #28]
 800698e:	9307      	strlt	r3, [sp, #28]
 8006990:	bfb8      	it	lt
 8006992:	9204      	strlt	r2, [sp, #16]
 8006994:	7823      	ldrb	r3, [r4, #0]
 8006996:	2b2e      	cmp	r3, #46	@ 0x2e
 8006998:	d10a      	bne.n	80069b0 <_svfiprintf_r+0x130>
 800699a:	7863      	ldrb	r3, [r4, #1]
 800699c:	2b2a      	cmp	r3, #42	@ 0x2a
 800699e:	d132      	bne.n	8006a06 <_svfiprintf_r+0x186>
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	3402      	adds	r4, #2
 80069a4:	1d1a      	adds	r2, r3, #4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	9203      	str	r2, [sp, #12]
 80069aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069ae:	9305      	str	r3, [sp, #20]
 80069b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006a68 <_svfiprintf_r+0x1e8>
 80069b4:	2203      	movs	r2, #3
 80069b6:	4650      	mov	r0, sl
 80069b8:	7821      	ldrb	r1, [r4, #0]
 80069ba:	f7fe fc14 	bl	80051e6 <memchr>
 80069be:	b138      	cbz	r0, 80069d0 <_svfiprintf_r+0x150>
 80069c0:	2240      	movs	r2, #64	@ 0x40
 80069c2:	9b04      	ldr	r3, [sp, #16]
 80069c4:	eba0 000a 	sub.w	r0, r0, sl
 80069c8:	4082      	lsls	r2, r0
 80069ca:	4313      	orrs	r3, r2
 80069cc:	3401      	adds	r4, #1
 80069ce:	9304      	str	r3, [sp, #16]
 80069d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d4:	2206      	movs	r2, #6
 80069d6:	4825      	ldr	r0, [pc, #148]	@ (8006a6c <_svfiprintf_r+0x1ec>)
 80069d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069dc:	f7fe fc03 	bl	80051e6 <memchr>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d036      	beq.n	8006a52 <_svfiprintf_r+0x1d2>
 80069e4:	4b22      	ldr	r3, [pc, #136]	@ (8006a70 <_svfiprintf_r+0x1f0>)
 80069e6:	bb1b      	cbnz	r3, 8006a30 <_svfiprintf_r+0x1b0>
 80069e8:	9b03      	ldr	r3, [sp, #12]
 80069ea:	3307      	adds	r3, #7
 80069ec:	f023 0307 	bic.w	r3, r3, #7
 80069f0:	3308      	adds	r3, #8
 80069f2:	9303      	str	r3, [sp, #12]
 80069f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f6:	4433      	add	r3, r6
 80069f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069fa:	e76a      	b.n	80068d2 <_svfiprintf_r+0x52>
 80069fc:	460c      	mov	r4, r1
 80069fe:	2001      	movs	r0, #1
 8006a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a04:	e7a8      	b.n	8006958 <_svfiprintf_r+0xd8>
 8006a06:	2300      	movs	r3, #0
 8006a08:	f04f 0c0a 	mov.w	ip, #10
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	3401      	adds	r4, #1
 8006a10:	9305      	str	r3, [sp, #20]
 8006a12:	4620      	mov	r0, r4
 8006a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a18:	3a30      	subs	r2, #48	@ 0x30
 8006a1a:	2a09      	cmp	r2, #9
 8006a1c:	d903      	bls.n	8006a26 <_svfiprintf_r+0x1a6>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0c6      	beq.n	80069b0 <_svfiprintf_r+0x130>
 8006a22:	9105      	str	r1, [sp, #20]
 8006a24:	e7c4      	b.n	80069b0 <_svfiprintf_r+0x130>
 8006a26:	4604      	mov	r4, r0
 8006a28:	2301      	movs	r3, #1
 8006a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a2e:	e7f0      	b.n	8006a12 <_svfiprintf_r+0x192>
 8006a30:	ab03      	add	r3, sp, #12
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	462a      	mov	r2, r5
 8006a36:	4638      	mov	r0, r7
 8006a38:	4b0e      	ldr	r3, [pc, #56]	@ (8006a74 <_svfiprintf_r+0x1f4>)
 8006a3a:	a904      	add	r1, sp, #16
 8006a3c:	f7fd fe70 	bl	8004720 <_printf_float>
 8006a40:	1c42      	adds	r2, r0, #1
 8006a42:	4606      	mov	r6, r0
 8006a44:	d1d6      	bne.n	80069f4 <_svfiprintf_r+0x174>
 8006a46:	89ab      	ldrh	r3, [r5, #12]
 8006a48:	065b      	lsls	r3, r3, #25
 8006a4a:	f53f af2d 	bmi.w	80068a8 <_svfiprintf_r+0x28>
 8006a4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a50:	e72c      	b.n	80068ac <_svfiprintf_r+0x2c>
 8006a52:	ab03      	add	r3, sp, #12
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	462a      	mov	r2, r5
 8006a58:	4638      	mov	r0, r7
 8006a5a:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <_svfiprintf_r+0x1f4>)
 8006a5c:	a904      	add	r1, sp, #16
 8006a5e:	f7fe f8fd 	bl	8004c5c <_printf_i>
 8006a62:	e7ed      	b.n	8006a40 <_svfiprintf_r+0x1c0>
 8006a64:	0800757c 	.word	0x0800757c
 8006a68:	08007582 	.word	0x08007582
 8006a6c:	08007586 	.word	0x08007586
 8006a70:	08004721 	.word	0x08004721
 8006a74:	080067c9 	.word	0x080067c9

08006a78 <__sflush_r>:
 8006a78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	0716      	lsls	r6, r2, #28
 8006a80:	4605      	mov	r5, r0
 8006a82:	460c      	mov	r4, r1
 8006a84:	d454      	bmi.n	8006b30 <__sflush_r+0xb8>
 8006a86:	684b      	ldr	r3, [r1, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	dc02      	bgt.n	8006a92 <__sflush_r+0x1a>
 8006a8c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	dd48      	ble.n	8006b24 <__sflush_r+0xac>
 8006a92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a94:	2e00      	cmp	r6, #0
 8006a96:	d045      	beq.n	8006b24 <__sflush_r+0xac>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a9e:	682f      	ldr	r7, [r5, #0]
 8006aa0:	6a21      	ldr	r1, [r4, #32]
 8006aa2:	602b      	str	r3, [r5, #0]
 8006aa4:	d030      	beq.n	8006b08 <__sflush_r+0x90>
 8006aa6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	0759      	lsls	r1, r3, #29
 8006aac:	d505      	bpl.n	8006aba <__sflush_r+0x42>
 8006aae:	6863      	ldr	r3, [r4, #4]
 8006ab0:	1ad2      	subs	r2, r2, r3
 8006ab2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ab4:	b10b      	cbz	r3, 8006aba <__sflush_r+0x42>
 8006ab6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ab8:	1ad2      	subs	r2, r2, r3
 8006aba:	2300      	movs	r3, #0
 8006abc:	4628      	mov	r0, r5
 8006abe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ac0:	6a21      	ldr	r1, [r4, #32]
 8006ac2:	47b0      	blx	r6
 8006ac4:	1c43      	adds	r3, r0, #1
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	d106      	bne.n	8006ad8 <__sflush_r+0x60>
 8006aca:	6829      	ldr	r1, [r5, #0]
 8006acc:	291d      	cmp	r1, #29
 8006ace:	d82b      	bhi.n	8006b28 <__sflush_r+0xb0>
 8006ad0:	4a28      	ldr	r2, [pc, #160]	@ (8006b74 <__sflush_r+0xfc>)
 8006ad2:	40ca      	lsrs	r2, r1
 8006ad4:	07d6      	lsls	r6, r2, #31
 8006ad6:	d527      	bpl.n	8006b28 <__sflush_r+0xb0>
 8006ad8:	2200      	movs	r2, #0
 8006ada:	6062      	str	r2, [r4, #4]
 8006adc:	6922      	ldr	r2, [r4, #16]
 8006ade:	04d9      	lsls	r1, r3, #19
 8006ae0:	6022      	str	r2, [r4, #0]
 8006ae2:	d504      	bpl.n	8006aee <__sflush_r+0x76>
 8006ae4:	1c42      	adds	r2, r0, #1
 8006ae6:	d101      	bne.n	8006aec <__sflush_r+0x74>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	b903      	cbnz	r3, 8006aee <__sflush_r+0x76>
 8006aec:	6560      	str	r0, [r4, #84]	@ 0x54
 8006aee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006af0:	602f      	str	r7, [r5, #0]
 8006af2:	b1b9      	cbz	r1, 8006b24 <__sflush_r+0xac>
 8006af4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006af8:	4299      	cmp	r1, r3
 8006afa:	d002      	beq.n	8006b02 <__sflush_r+0x8a>
 8006afc:	4628      	mov	r0, r5
 8006afe:	f7ff f9eb 	bl	8005ed8 <_free_r>
 8006b02:	2300      	movs	r3, #0
 8006b04:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b06:	e00d      	b.n	8006b24 <__sflush_r+0xac>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	47b0      	blx	r6
 8006b0e:	4602      	mov	r2, r0
 8006b10:	1c50      	adds	r0, r2, #1
 8006b12:	d1c9      	bne.n	8006aa8 <__sflush_r+0x30>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0c6      	beq.n	8006aa8 <__sflush_r+0x30>
 8006b1a:	2b1d      	cmp	r3, #29
 8006b1c:	d001      	beq.n	8006b22 <__sflush_r+0xaa>
 8006b1e:	2b16      	cmp	r3, #22
 8006b20:	d11d      	bne.n	8006b5e <__sflush_r+0xe6>
 8006b22:	602f      	str	r7, [r5, #0]
 8006b24:	2000      	movs	r0, #0
 8006b26:	e021      	b.n	8006b6c <__sflush_r+0xf4>
 8006b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b2c:	b21b      	sxth	r3, r3
 8006b2e:	e01a      	b.n	8006b66 <__sflush_r+0xee>
 8006b30:	690f      	ldr	r7, [r1, #16]
 8006b32:	2f00      	cmp	r7, #0
 8006b34:	d0f6      	beq.n	8006b24 <__sflush_r+0xac>
 8006b36:	0793      	lsls	r3, r2, #30
 8006b38:	bf18      	it	ne
 8006b3a:	2300      	movne	r3, #0
 8006b3c:	680e      	ldr	r6, [r1, #0]
 8006b3e:	bf08      	it	eq
 8006b40:	694b      	ldreq	r3, [r1, #20]
 8006b42:	1bf6      	subs	r6, r6, r7
 8006b44:	600f      	str	r7, [r1, #0]
 8006b46:	608b      	str	r3, [r1, #8]
 8006b48:	2e00      	cmp	r6, #0
 8006b4a:	ddeb      	ble.n	8006b24 <__sflush_r+0xac>
 8006b4c:	4633      	mov	r3, r6
 8006b4e:	463a      	mov	r2, r7
 8006b50:	4628      	mov	r0, r5
 8006b52:	6a21      	ldr	r1, [r4, #32]
 8006b54:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006b58:	47e0      	blx	ip
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	dc07      	bgt.n	8006b6e <__sflush_r+0xf6>
 8006b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b66:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6a:	81a3      	strh	r3, [r4, #12]
 8006b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b6e:	4407      	add	r7, r0
 8006b70:	1a36      	subs	r6, r6, r0
 8006b72:	e7e9      	b.n	8006b48 <__sflush_r+0xd0>
 8006b74:	20400001 	.word	0x20400001

08006b78 <_fflush_r>:
 8006b78:	b538      	push	{r3, r4, r5, lr}
 8006b7a:	690b      	ldr	r3, [r1, #16]
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	b913      	cbnz	r3, 8006b88 <_fflush_r+0x10>
 8006b82:	2500      	movs	r5, #0
 8006b84:	4628      	mov	r0, r5
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	b118      	cbz	r0, 8006b92 <_fflush_r+0x1a>
 8006b8a:	6a03      	ldr	r3, [r0, #32]
 8006b8c:	b90b      	cbnz	r3, 8006b92 <_fflush_r+0x1a>
 8006b8e:	f7fe fa0f 	bl	8004fb0 <__sinit>
 8006b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f3      	beq.n	8006b82 <_fflush_r+0xa>
 8006b9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b9c:	07d0      	lsls	r0, r2, #31
 8006b9e:	d404      	bmi.n	8006baa <_fflush_r+0x32>
 8006ba0:	0599      	lsls	r1, r3, #22
 8006ba2:	d402      	bmi.n	8006baa <_fflush_r+0x32>
 8006ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ba6:	f7fe fb1c 	bl	80051e2 <__retarget_lock_acquire_recursive>
 8006baa:	4628      	mov	r0, r5
 8006bac:	4621      	mov	r1, r4
 8006bae:	f7ff ff63 	bl	8006a78 <__sflush_r>
 8006bb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	07da      	lsls	r2, r3, #31
 8006bb8:	d4e4      	bmi.n	8006b84 <_fflush_r+0xc>
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	059b      	lsls	r3, r3, #22
 8006bbe:	d4e1      	bmi.n	8006b84 <_fflush_r+0xc>
 8006bc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bc2:	f7fe fb0f 	bl	80051e4 <__retarget_lock_release_recursive>
 8006bc6:	e7dd      	b.n	8006b84 <_fflush_r+0xc>

08006bc8 <memmove>:
 8006bc8:	4288      	cmp	r0, r1
 8006bca:	b510      	push	{r4, lr}
 8006bcc:	eb01 0402 	add.w	r4, r1, r2
 8006bd0:	d902      	bls.n	8006bd8 <memmove+0x10>
 8006bd2:	4284      	cmp	r4, r0
 8006bd4:	4623      	mov	r3, r4
 8006bd6:	d807      	bhi.n	8006be8 <memmove+0x20>
 8006bd8:	1e43      	subs	r3, r0, #1
 8006bda:	42a1      	cmp	r1, r4
 8006bdc:	d008      	beq.n	8006bf0 <memmove+0x28>
 8006bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006be2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006be6:	e7f8      	b.n	8006bda <memmove+0x12>
 8006be8:	4601      	mov	r1, r0
 8006bea:	4402      	add	r2, r0
 8006bec:	428a      	cmp	r2, r1
 8006bee:	d100      	bne.n	8006bf2 <memmove+0x2a>
 8006bf0:	bd10      	pop	{r4, pc}
 8006bf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bfa:	e7f7      	b.n	8006bec <memmove+0x24>

08006bfc <_sbrk_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	2300      	movs	r3, #0
 8006c00:	4d05      	ldr	r5, [pc, #20]	@ (8006c18 <_sbrk_r+0x1c>)
 8006c02:	4604      	mov	r4, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	602b      	str	r3, [r5, #0]
 8006c08:	f7fb f88c 	bl	8001d24 <_sbrk>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_sbrk_r+0x1a>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_sbrk_r+0x1a>
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	200005a4 	.word	0x200005a4

08006c1c <__assert_func>:
 8006c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c1e:	4614      	mov	r4, r2
 8006c20:	461a      	mov	r2, r3
 8006c22:	4b09      	ldr	r3, [pc, #36]	@ (8006c48 <__assert_func+0x2c>)
 8006c24:	4605      	mov	r5, r0
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68d8      	ldr	r0, [r3, #12]
 8006c2a:	b14c      	cbz	r4, 8006c40 <__assert_func+0x24>
 8006c2c:	4b07      	ldr	r3, [pc, #28]	@ (8006c4c <__assert_func+0x30>)
 8006c2e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c32:	9100      	str	r1, [sp, #0]
 8006c34:	462b      	mov	r3, r5
 8006c36:	4906      	ldr	r1, [pc, #24]	@ (8006c50 <__assert_func+0x34>)
 8006c38:	f000 f870 	bl	8006d1c <fiprintf>
 8006c3c:	f000 f880 	bl	8006d40 <abort>
 8006c40:	4b04      	ldr	r3, [pc, #16]	@ (8006c54 <__assert_func+0x38>)
 8006c42:	461c      	mov	r4, r3
 8006c44:	e7f3      	b.n	8006c2e <__assert_func+0x12>
 8006c46:	bf00      	nop
 8006c48:	20000018 	.word	0x20000018
 8006c4c:	08007597 	.word	0x08007597
 8006c50:	080075a4 	.word	0x080075a4
 8006c54:	080075d2 	.word	0x080075d2

08006c58 <_calloc_r>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	fba1 5402 	umull	r5, r4, r1, r2
 8006c5e:	b934      	cbnz	r4, 8006c6e <_calloc_r+0x16>
 8006c60:	4629      	mov	r1, r5
 8006c62:	f7ff f9ab 	bl	8005fbc <_malloc_r>
 8006c66:	4606      	mov	r6, r0
 8006c68:	b928      	cbnz	r0, 8006c76 <_calloc_r+0x1e>
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	bd70      	pop	{r4, r5, r6, pc}
 8006c6e:	220c      	movs	r2, #12
 8006c70:	2600      	movs	r6, #0
 8006c72:	6002      	str	r2, [r0, #0]
 8006c74:	e7f9      	b.n	8006c6a <_calloc_r+0x12>
 8006c76:	462a      	mov	r2, r5
 8006c78:	4621      	mov	r1, r4
 8006c7a:	f7fe fa34 	bl	80050e6 <memset>
 8006c7e:	e7f4      	b.n	8006c6a <_calloc_r+0x12>

08006c80 <__ascii_mbtowc>:
 8006c80:	b082      	sub	sp, #8
 8006c82:	b901      	cbnz	r1, 8006c86 <__ascii_mbtowc+0x6>
 8006c84:	a901      	add	r1, sp, #4
 8006c86:	b142      	cbz	r2, 8006c9a <__ascii_mbtowc+0x1a>
 8006c88:	b14b      	cbz	r3, 8006c9e <__ascii_mbtowc+0x1e>
 8006c8a:	7813      	ldrb	r3, [r2, #0]
 8006c8c:	600b      	str	r3, [r1, #0]
 8006c8e:	7812      	ldrb	r2, [r2, #0]
 8006c90:	1e10      	subs	r0, r2, #0
 8006c92:	bf18      	it	ne
 8006c94:	2001      	movne	r0, #1
 8006c96:	b002      	add	sp, #8
 8006c98:	4770      	bx	lr
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	e7fb      	b.n	8006c96 <__ascii_mbtowc+0x16>
 8006c9e:	f06f 0001 	mvn.w	r0, #1
 8006ca2:	e7f8      	b.n	8006c96 <__ascii_mbtowc+0x16>

08006ca4 <_realloc_r>:
 8006ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca8:	4607      	mov	r7, r0
 8006caa:	4614      	mov	r4, r2
 8006cac:	460d      	mov	r5, r1
 8006cae:	b921      	cbnz	r1, 8006cba <_realloc_r+0x16>
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb6:	f7ff b981 	b.w	8005fbc <_malloc_r>
 8006cba:	b92a      	cbnz	r2, 8006cc8 <_realloc_r+0x24>
 8006cbc:	f7ff f90c 	bl	8005ed8 <_free_r>
 8006cc0:	4625      	mov	r5, r4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc8:	f000 f841 	bl	8006d4e <_malloc_usable_size_r>
 8006ccc:	4284      	cmp	r4, r0
 8006cce:	4606      	mov	r6, r0
 8006cd0:	d802      	bhi.n	8006cd8 <_realloc_r+0x34>
 8006cd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006cd6:	d8f4      	bhi.n	8006cc2 <_realloc_r+0x1e>
 8006cd8:	4621      	mov	r1, r4
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f7ff f96e 	bl	8005fbc <_malloc_r>
 8006ce0:	4680      	mov	r8, r0
 8006ce2:	b908      	cbnz	r0, 8006ce8 <_realloc_r+0x44>
 8006ce4:	4645      	mov	r5, r8
 8006ce6:	e7ec      	b.n	8006cc2 <_realloc_r+0x1e>
 8006ce8:	42b4      	cmp	r4, r6
 8006cea:	4622      	mov	r2, r4
 8006cec:	4629      	mov	r1, r5
 8006cee:	bf28      	it	cs
 8006cf0:	4632      	movcs	r2, r6
 8006cf2:	f7fe fa86 	bl	8005202 <memcpy>
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	f7ff f8ed 	bl	8005ed8 <_free_r>
 8006cfe:	e7f1      	b.n	8006ce4 <_realloc_r+0x40>

08006d00 <__ascii_wctomb>:
 8006d00:	4603      	mov	r3, r0
 8006d02:	4608      	mov	r0, r1
 8006d04:	b141      	cbz	r1, 8006d18 <__ascii_wctomb+0x18>
 8006d06:	2aff      	cmp	r2, #255	@ 0xff
 8006d08:	d904      	bls.n	8006d14 <__ascii_wctomb+0x14>
 8006d0a:	228a      	movs	r2, #138	@ 0x8a
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	4770      	bx	lr
 8006d14:	2001      	movs	r0, #1
 8006d16:	700a      	strb	r2, [r1, #0]
 8006d18:	4770      	bx	lr
	...

08006d1c <fiprintf>:
 8006d1c:	b40e      	push	{r1, r2, r3}
 8006d1e:	b503      	push	{r0, r1, lr}
 8006d20:	4601      	mov	r1, r0
 8006d22:	ab03      	add	r3, sp, #12
 8006d24:	4805      	ldr	r0, [pc, #20]	@ (8006d3c <fiprintf+0x20>)
 8006d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d2a:	6800      	ldr	r0, [r0, #0]
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	f000 f83d 	bl	8006dac <_vfiprintf_r>
 8006d32:	b002      	add	sp, #8
 8006d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d38:	b003      	add	sp, #12
 8006d3a:	4770      	bx	lr
 8006d3c:	20000018 	.word	0x20000018

08006d40 <abort>:
 8006d40:	2006      	movs	r0, #6
 8006d42:	b508      	push	{r3, lr}
 8006d44:	f000 fa06 	bl	8007154 <raise>
 8006d48:	2001      	movs	r0, #1
 8006d4a:	f7fa ff76 	bl	8001c3a <_exit>

08006d4e <_malloc_usable_size_r>:
 8006d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d52:	1f18      	subs	r0, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	bfbc      	itt	lt
 8006d58:	580b      	ldrlt	r3, [r1, r0]
 8006d5a:	18c0      	addlt	r0, r0, r3
 8006d5c:	4770      	bx	lr

08006d5e <__sfputc_r>:
 8006d5e:	6893      	ldr	r3, [r2, #8]
 8006d60:	b410      	push	{r4}
 8006d62:	3b01      	subs	r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	6093      	str	r3, [r2, #8]
 8006d68:	da07      	bge.n	8006d7a <__sfputc_r+0x1c>
 8006d6a:	6994      	ldr	r4, [r2, #24]
 8006d6c:	42a3      	cmp	r3, r4
 8006d6e:	db01      	blt.n	8006d74 <__sfputc_r+0x16>
 8006d70:	290a      	cmp	r1, #10
 8006d72:	d102      	bne.n	8006d7a <__sfputc_r+0x1c>
 8006d74:	bc10      	pop	{r4}
 8006d76:	f000 b931 	b.w	8006fdc <__swbuf_r>
 8006d7a:	6813      	ldr	r3, [r2, #0]
 8006d7c:	1c58      	adds	r0, r3, #1
 8006d7e:	6010      	str	r0, [r2, #0]
 8006d80:	7019      	strb	r1, [r3, #0]
 8006d82:	4608      	mov	r0, r1
 8006d84:	bc10      	pop	{r4}
 8006d86:	4770      	bx	lr

08006d88 <__sfputs_r>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	460f      	mov	r7, r1
 8006d8e:	4614      	mov	r4, r2
 8006d90:	18d5      	adds	r5, r2, r3
 8006d92:	42ac      	cmp	r4, r5
 8006d94:	d101      	bne.n	8006d9a <__sfputs_r+0x12>
 8006d96:	2000      	movs	r0, #0
 8006d98:	e007      	b.n	8006daa <__sfputs_r+0x22>
 8006d9a:	463a      	mov	r2, r7
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da2:	f7ff ffdc 	bl	8006d5e <__sfputc_r>
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	d1f3      	bne.n	8006d92 <__sfputs_r+0xa>
 8006daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006dac <_vfiprintf_r>:
 8006dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db0:	460d      	mov	r5, r1
 8006db2:	4614      	mov	r4, r2
 8006db4:	4698      	mov	r8, r3
 8006db6:	4606      	mov	r6, r0
 8006db8:	b09d      	sub	sp, #116	@ 0x74
 8006dba:	b118      	cbz	r0, 8006dc4 <_vfiprintf_r+0x18>
 8006dbc:	6a03      	ldr	r3, [r0, #32]
 8006dbe:	b90b      	cbnz	r3, 8006dc4 <_vfiprintf_r+0x18>
 8006dc0:	f7fe f8f6 	bl	8004fb0 <__sinit>
 8006dc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dc6:	07d9      	lsls	r1, r3, #31
 8006dc8:	d405      	bmi.n	8006dd6 <_vfiprintf_r+0x2a>
 8006dca:	89ab      	ldrh	r3, [r5, #12]
 8006dcc:	059a      	lsls	r2, r3, #22
 8006dce:	d402      	bmi.n	8006dd6 <_vfiprintf_r+0x2a>
 8006dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dd2:	f7fe fa06 	bl	80051e2 <__retarget_lock_acquire_recursive>
 8006dd6:	89ab      	ldrh	r3, [r5, #12]
 8006dd8:	071b      	lsls	r3, r3, #28
 8006dda:	d501      	bpl.n	8006de0 <_vfiprintf_r+0x34>
 8006ddc:	692b      	ldr	r3, [r5, #16]
 8006dde:	b99b      	cbnz	r3, 8006e08 <_vfiprintf_r+0x5c>
 8006de0:	4629      	mov	r1, r5
 8006de2:	4630      	mov	r0, r6
 8006de4:	f000 f938 	bl	8007058 <__swsetup_r>
 8006de8:	b170      	cbz	r0, 8006e08 <_vfiprintf_r+0x5c>
 8006dea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dec:	07dc      	lsls	r4, r3, #31
 8006dee:	d504      	bpl.n	8006dfa <_vfiprintf_r+0x4e>
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	b01d      	add	sp, #116	@ 0x74
 8006df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfa:	89ab      	ldrh	r3, [r5, #12]
 8006dfc:	0598      	lsls	r0, r3, #22
 8006dfe:	d4f7      	bmi.n	8006df0 <_vfiprintf_r+0x44>
 8006e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e02:	f7fe f9ef 	bl	80051e4 <__retarget_lock_release_recursive>
 8006e06:	e7f3      	b.n	8006df0 <_vfiprintf_r+0x44>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e0c:	2320      	movs	r3, #32
 8006e0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e12:	2330      	movs	r3, #48	@ 0x30
 8006e14:	f04f 0901 	mov.w	r9, #1
 8006e18:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e1c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006fc8 <_vfiprintf_r+0x21c>
 8006e20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e24:	4623      	mov	r3, r4
 8006e26:	469a      	mov	sl, r3
 8006e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e2c:	b10a      	cbz	r2, 8006e32 <_vfiprintf_r+0x86>
 8006e2e:	2a25      	cmp	r2, #37	@ 0x25
 8006e30:	d1f9      	bne.n	8006e26 <_vfiprintf_r+0x7a>
 8006e32:	ebba 0b04 	subs.w	fp, sl, r4
 8006e36:	d00b      	beq.n	8006e50 <_vfiprintf_r+0xa4>
 8006e38:	465b      	mov	r3, fp
 8006e3a:	4622      	mov	r2, r4
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f7ff ffa2 	bl	8006d88 <__sfputs_r>
 8006e44:	3001      	adds	r0, #1
 8006e46:	f000 80a7 	beq.w	8006f98 <_vfiprintf_r+0x1ec>
 8006e4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e4c:	445a      	add	r2, fp
 8006e4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e50:	f89a 3000 	ldrb.w	r3, [sl]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 809f 	beq.w	8006f98 <_vfiprintf_r+0x1ec>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e64:	f10a 0a01 	add.w	sl, sl, #1
 8006e68:	9304      	str	r3, [sp, #16]
 8006e6a:	9307      	str	r3, [sp, #28]
 8006e6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e70:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e72:	4654      	mov	r4, sl
 8006e74:	2205      	movs	r2, #5
 8006e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e7a:	4853      	ldr	r0, [pc, #332]	@ (8006fc8 <_vfiprintf_r+0x21c>)
 8006e7c:	f7fe f9b3 	bl	80051e6 <memchr>
 8006e80:	9a04      	ldr	r2, [sp, #16]
 8006e82:	b9d8      	cbnz	r0, 8006ebc <_vfiprintf_r+0x110>
 8006e84:	06d1      	lsls	r1, r2, #27
 8006e86:	bf44      	itt	mi
 8006e88:	2320      	movmi	r3, #32
 8006e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e8e:	0713      	lsls	r3, r2, #28
 8006e90:	bf44      	itt	mi
 8006e92:	232b      	movmi	r3, #43	@ 0x2b
 8006e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e98:	f89a 3000 	ldrb.w	r3, [sl]
 8006e9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e9e:	d015      	beq.n	8006ecc <_vfiprintf_r+0x120>
 8006ea0:	4654      	mov	r4, sl
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	f04f 0c0a 	mov.w	ip, #10
 8006ea8:	9a07      	ldr	r2, [sp, #28]
 8006eaa:	4621      	mov	r1, r4
 8006eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eb0:	3b30      	subs	r3, #48	@ 0x30
 8006eb2:	2b09      	cmp	r3, #9
 8006eb4:	d94b      	bls.n	8006f4e <_vfiprintf_r+0x1a2>
 8006eb6:	b1b0      	cbz	r0, 8006ee6 <_vfiprintf_r+0x13a>
 8006eb8:	9207      	str	r2, [sp, #28]
 8006eba:	e014      	b.n	8006ee6 <_vfiprintf_r+0x13a>
 8006ebc:	eba0 0308 	sub.w	r3, r0, r8
 8006ec0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	46a2      	mov	sl, r4
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	e7d2      	b.n	8006e72 <_vfiprintf_r+0xc6>
 8006ecc:	9b03      	ldr	r3, [sp, #12]
 8006ece:	1d19      	adds	r1, r3, #4
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	9103      	str	r1, [sp, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bfbb      	ittet	lt
 8006ed8:	425b      	neglt	r3, r3
 8006eda:	f042 0202 	orrlt.w	r2, r2, #2
 8006ede:	9307      	strge	r3, [sp, #28]
 8006ee0:	9307      	strlt	r3, [sp, #28]
 8006ee2:	bfb8      	it	lt
 8006ee4:	9204      	strlt	r2, [sp, #16]
 8006ee6:	7823      	ldrb	r3, [r4, #0]
 8006ee8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006eea:	d10a      	bne.n	8006f02 <_vfiprintf_r+0x156>
 8006eec:	7863      	ldrb	r3, [r4, #1]
 8006eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ef0:	d132      	bne.n	8006f58 <_vfiprintf_r+0x1ac>
 8006ef2:	9b03      	ldr	r3, [sp, #12]
 8006ef4:	3402      	adds	r4, #2
 8006ef6:	1d1a      	adds	r2, r3, #4
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	9203      	str	r2, [sp, #12]
 8006efc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f00:	9305      	str	r3, [sp, #20]
 8006f02:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006fcc <_vfiprintf_r+0x220>
 8006f06:	2203      	movs	r2, #3
 8006f08:	4650      	mov	r0, sl
 8006f0a:	7821      	ldrb	r1, [r4, #0]
 8006f0c:	f7fe f96b 	bl	80051e6 <memchr>
 8006f10:	b138      	cbz	r0, 8006f22 <_vfiprintf_r+0x176>
 8006f12:	2240      	movs	r2, #64	@ 0x40
 8006f14:	9b04      	ldr	r3, [sp, #16]
 8006f16:	eba0 000a 	sub.w	r0, r0, sl
 8006f1a:	4082      	lsls	r2, r0
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	3401      	adds	r4, #1
 8006f20:	9304      	str	r3, [sp, #16]
 8006f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f26:	2206      	movs	r2, #6
 8006f28:	4829      	ldr	r0, [pc, #164]	@ (8006fd0 <_vfiprintf_r+0x224>)
 8006f2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f2e:	f7fe f95a 	bl	80051e6 <memchr>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d03f      	beq.n	8006fb6 <_vfiprintf_r+0x20a>
 8006f36:	4b27      	ldr	r3, [pc, #156]	@ (8006fd4 <_vfiprintf_r+0x228>)
 8006f38:	bb1b      	cbnz	r3, 8006f82 <_vfiprintf_r+0x1d6>
 8006f3a:	9b03      	ldr	r3, [sp, #12]
 8006f3c:	3307      	adds	r3, #7
 8006f3e:	f023 0307 	bic.w	r3, r3, #7
 8006f42:	3308      	adds	r3, #8
 8006f44:	9303      	str	r3, [sp, #12]
 8006f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f48:	443b      	add	r3, r7
 8006f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f4c:	e76a      	b.n	8006e24 <_vfiprintf_r+0x78>
 8006f4e:	460c      	mov	r4, r1
 8006f50:	2001      	movs	r0, #1
 8006f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f56:	e7a8      	b.n	8006eaa <_vfiprintf_r+0xfe>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f04f 0c0a 	mov.w	ip, #10
 8006f5e:	4619      	mov	r1, r3
 8006f60:	3401      	adds	r4, #1
 8006f62:	9305      	str	r3, [sp, #20]
 8006f64:	4620      	mov	r0, r4
 8006f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f6a:	3a30      	subs	r2, #48	@ 0x30
 8006f6c:	2a09      	cmp	r2, #9
 8006f6e:	d903      	bls.n	8006f78 <_vfiprintf_r+0x1cc>
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0c6      	beq.n	8006f02 <_vfiprintf_r+0x156>
 8006f74:	9105      	str	r1, [sp, #20]
 8006f76:	e7c4      	b.n	8006f02 <_vfiprintf_r+0x156>
 8006f78:	4604      	mov	r4, r0
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f80:	e7f0      	b.n	8006f64 <_vfiprintf_r+0x1b8>
 8006f82:	ab03      	add	r3, sp, #12
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	462a      	mov	r2, r5
 8006f88:	4630      	mov	r0, r6
 8006f8a:	4b13      	ldr	r3, [pc, #76]	@ (8006fd8 <_vfiprintf_r+0x22c>)
 8006f8c:	a904      	add	r1, sp, #16
 8006f8e:	f7fd fbc7 	bl	8004720 <_printf_float>
 8006f92:	4607      	mov	r7, r0
 8006f94:	1c78      	adds	r0, r7, #1
 8006f96:	d1d6      	bne.n	8006f46 <_vfiprintf_r+0x19a>
 8006f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f9a:	07d9      	lsls	r1, r3, #31
 8006f9c:	d405      	bmi.n	8006faa <_vfiprintf_r+0x1fe>
 8006f9e:	89ab      	ldrh	r3, [r5, #12]
 8006fa0:	059a      	lsls	r2, r3, #22
 8006fa2:	d402      	bmi.n	8006faa <_vfiprintf_r+0x1fe>
 8006fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fa6:	f7fe f91d 	bl	80051e4 <__retarget_lock_release_recursive>
 8006faa:	89ab      	ldrh	r3, [r5, #12]
 8006fac:	065b      	lsls	r3, r3, #25
 8006fae:	f53f af1f 	bmi.w	8006df0 <_vfiprintf_r+0x44>
 8006fb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fb4:	e71e      	b.n	8006df4 <_vfiprintf_r+0x48>
 8006fb6:	ab03      	add	r3, sp, #12
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	462a      	mov	r2, r5
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	4b06      	ldr	r3, [pc, #24]	@ (8006fd8 <_vfiprintf_r+0x22c>)
 8006fc0:	a904      	add	r1, sp, #16
 8006fc2:	f7fd fe4b 	bl	8004c5c <_printf_i>
 8006fc6:	e7e4      	b.n	8006f92 <_vfiprintf_r+0x1e6>
 8006fc8:	0800757c 	.word	0x0800757c
 8006fcc:	08007582 	.word	0x08007582
 8006fd0:	08007586 	.word	0x08007586
 8006fd4:	08004721 	.word	0x08004721
 8006fd8:	08006d89 	.word	0x08006d89

08006fdc <__swbuf_r>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	460e      	mov	r6, r1
 8006fe0:	4614      	mov	r4, r2
 8006fe2:	4605      	mov	r5, r0
 8006fe4:	b118      	cbz	r0, 8006fee <__swbuf_r+0x12>
 8006fe6:	6a03      	ldr	r3, [r0, #32]
 8006fe8:	b90b      	cbnz	r3, 8006fee <__swbuf_r+0x12>
 8006fea:	f7fd ffe1 	bl	8004fb0 <__sinit>
 8006fee:	69a3      	ldr	r3, [r4, #24]
 8006ff0:	60a3      	str	r3, [r4, #8]
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	071a      	lsls	r2, r3, #28
 8006ff6:	d501      	bpl.n	8006ffc <__swbuf_r+0x20>
 8006ff8:	6923      	ldr	r3, [r4, #16]
 8006ffa:	b943      	cbnz	r3, 800700e <__swbuf_r+0x32>
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	4628      	mov	r0, r5
 8007000:	f000 f82a 	bl	8007058 <__swsetup_r>
 8007004:	b118      	cbz	r0, 800700e <__swbuf_r+0x32>
 8007006:	f04f 37ff 	mov.w	r7, #4294967295
 800700a:	4638      	mov	r0, r7
 800700c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	6922      	ldr	r2, [r4, #16]
 8007012:	b2f6      	uxtb	r6, r6
 8007014:	1a98      	subs	r0, r3, r2
 8007016:	6963      	ldr	r3, [r4, #20]
 8007018:	4637      	mov	r7, r6
 800701a:	4283      	cmp	r3, r0
 800701c:	dc05      	bgt.n	800702a <__swbuf_r+0x4e>
 800701e:	4621      	mov	r1, r4
 8007020:	4628      	mov	r0, r5
 8007022:	f7ff fda9 	bl	8006b78 <_fflush_r>
 8007026:	2800      	cmp	r0, #0
 8007028:	d1ed      	bne.n	8007006 <__swbuf_r+0x2a>
 800702a:	68a3      	ldr	r3, [r4, #8]
 800702c:	3b01      	subs	r3, #1
 800702e:	60a3      	str	r3, [r4, #8]
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	6022      	str	r2, [r4, #0]
 8007036:	701e      	strb	r6, [r3, #0]
 8007038:	6962      	ldr	r2, [r4, #20]
 800703a:	1c43      	adds	r3, r0, #1
 800703c:	429a      	cmp	r2, r3
 800703e:	d004      	beq.n	800704a <__swbuf_r+0x6e>
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	07db      	lsls	r3, r3, #31
 8007044:	d5e1      	bpl.n	800700a <__swbuf_r+0x2e>
 8007046:	2e0a      	cmp	r6, #10
 8007048:	d1df      	bne.n	800700a <__swbuf_r+0x2e>
 800704a:	4621      	mov	r1, r4
 800704c:	4628      	mov	r0, r5
 800704e:	f7ff fd93 	bl	8006b78 <_fflush_r>
 8007052:	2800      	cmp	r0, #0
 8007054:	d0d9      	beq.n	800700a <__swbuf_r+0x2e>
 8007056:	e7d6      	b.n	8007006 <__swbuf_r+0x2a>

08007058 <__swsetup_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4b29      	ldr	r3, [pc, #164]	@ (8007100 <__swsetup_r+0xa8>)
 800705c:	4605      	mov	r5, r0
 800705e:	6818      	ldr	r0, [r3, #0]
 8007060:	460c      	mov	r4, r1
 8007062:	b118      	cbz	r0, 800706c <__swsetup_r+0x14>
 8007064:	6a03      	ldr	r3, [r0, #32]
 8007066:	b90b      	cbnz	r3, 800706c <__swsetup_r+0x14>
 8007068:	f7fd ffa2 	bl	8004fb0 <__sinit>
 800706c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007070:	0719      	lsls	r1, r3, #28
 8007072:	d422      	bmi.n	80070ba <__swsetup_r+0x62>
 8007074:	06da      	lsls	r2, r3, #27
 8007076:	d407      	bmi.n	8007088 <__swsetup_r+0x30>
 8007078:	2209      	movs	r2, #9
 800707a:	602a      	str	r2, [r5, #0]
 800707c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007080:	f04f 30ff 	mov.w	r0, #4294967295
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	e033      	b.n	80070f0 <__swsetup_r+0x98>
 8007088:	0758      	lsls	r0, r3, #29
 800708a:	d512      	bpl.n	80070b2 <__swsetup_r+0x5a>
 800708c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800708e:	b141      	cbz	r1, 80070a2 <__swsetup_r+0x4a>
 8007090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007094:	4299      	cmp	r1, r3
 8007096:	d002      	beq.n	800709e <__swsetup_r+0x46>
 8007098:	4628      	mov	r0, r5
 800709a:	f7fe ff1d 	bl	8005ed8 <_free_r>
 800709e:	2300      	movs	r3, #0
 80070a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80070a8:	81a3      	strh	r3, [r4, #12]
 80070aa:	2300      	movs	r3, #0
 80070ac:	6063      	str	r3, [r4, #4]
 80070ae:	6923      	ldr	r3, [r4, #16]
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	89a3      	ldrh	r3, [r4, #12]
 80070b4:	f043 0308 	orr.w	r3, r3, #8
 80070b8:	81a3      	strh	r3, [r4, #12]
 80070ba:	6923      	ldr	r3, [r4, #16]
 80070bc:	b94b      	cbnz	r3, 80070d2 <__swsetup_r+0x7a>
 80070be:	89a3      	ldrh	r3, [r4, #12]
 80070c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80070c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070c8:	d003      	beq.n	80070d2 <__swsetup_r+0x7a>
 80070ca:	4621      	mov	r1, r4
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 f882 	bl	80071d6 <__smakebuf_r>
 80070d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070d6:	f013 0201 	ands.w	r2, r3, #1
 80070da:	d00a      	beq.n	80070f2 <__swsetup_r+0x9a>
 80070dc:	2200      	movs	r2, #0
 80070de:	60a2      	str	r2, [r4, #8]
 80070e0:	6962      	ldr	r2, [r4, #20]
 80070e2:	4252      	negs	r2, r2
 80070e4:	61a2      	str	r2, [r4, #24]
 80070e6:	6922      	ldr	r2, [r4, #16]
 80070e8:	b942      	cbnz	r2, 80070fc <__swsetup_r+0xa4>
 80070ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070ee:	d1c5      	bne.n	800707c <__swsetup_r+0x24>
 80070f0:	bd38      	pop	{r3, r4, r5, pc}
 80070f2:	0799      	lsls	r1, r3, #30
 80070f4:	bf58      	it	pl
 80070f6:	6962      	ldrpl	r2, [r4, #20]
 80070f8:	60a2      	str	r2, [r4, #8]
 80070fa:	e7f4      	b.n	80070e6 <__swsetup_r+0x8e>
 80070fc:	2000      	movs	r0, #0
 80070fe:	e7f7      	b.n	80070f0 <__swsetup_r+0x98>
 8007100:	20000018 	.word	0x20000018

08007104 <_raise_r>:
 8007104:	291f      	cmp	r1, #31
 8007106:	b538      	push	{r3, r4, r5, lr}
 8007108:	4605      	mov	r5, r0
 800710a:	460c      	mov	r4, r1
 800710c:	d904      	bls.n	8007118 <_raise_r+0x14>
 800710e:	2316      	movs	r3, #22
 8007110:	6003      	str	r3, [r0, #0]
 8007112:	f04f 30ff 	mov.w	r0, #4294967295
 8007116:	bd38      	pop	{r3, r4, r5, pc}
 8007118:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800711a:	b112      	cbz	r2, 8007122 <_raise_r+0x1e>
 800711c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007120:	b94b      	cbnz	r3, 8007136 <_raise_r+0x32>
 8007122:	4628      	mov	r0, r5
 8007124:	f000 f830 	bl	8007188 <_getpid_r>
 8007128:	4622      	mov	r2, r4
 800712a:	4601      	mov	r1, r0
 800712c:	4628      	mov	r0, r5
 800712e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007132:	f000 b817 	b.w	8007164 <_kill_r>
 8007136:	2b01      	cmp	r3, #1
 8007138:	d00a      	beq.n	8007150 <_raise_r+0x4c>
 800713a:	1c59      	adds	r1, r3, #1
 800713c:	d103      	bne.n	8007146 <_raise_r+0x42>
 800713e:	2316      	movs	r3, #22
 8007140:	6003      	str	r3, [r0, #0]
 8007142:	2001      	movs	r0, #1
 8007144:	e7e7      	b.n	8007116 <_raise_r+0x12>
 8007146:	2100      	movs	r1, #0
 8007148:	4620      	mov	r0, r4
 800714a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800714e:	4798      	blx	r3
 8007150:	2000      	movs	r0, #0
 8007152:	e7e0      	b.n	8007116 <_raise_r+0x12>

08007154 <raise>:
 8007154:	4b02      	ldr	r3, [pc, #8]	@ (8007160 <raise+0xc>)
 8007156:	4601      	mov	r1, r0
 8007158:	6818      	ldr	r0, [r3, #0]
 800715a:	f7ff bfd3 	b.w	8007104 <_raise_r>
 800715e:	bf00      	nop
 8007160:	20000018 	.word	0x20000018

08007164 <_kill_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	2300      	movs	r3, #0
 8007168:	4d06      	ldr	r5, [pc, #24]	@ (8007184 <_kill_r+0x20>)
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	4611      	mov	r1, r2
 8007170:	602b      	str	r3, [r5, #0]
 8007172:	f7fa fd52 	bl	8001c1a <_kill>
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	d102      	bne.n	8007180 <_kill_r+0x1c>
 800717a:	682b      	ldr	r3, [r5, #0]
 800717c:	b103      	cbz	r3, 8007180 <_kill_r+0x1c>
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	bd38      	pop	{r3, r4, r5, pc}
 8007182:	bf00      	nop
 8007184:	200005a4 	.word	0x200005a4

08007188 <_getpid_r>:
 8007188:	f7fa bd40 	b.w	8001c0c <_getpid>

0800718c <__swhatbuf_r>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	460c      	mov	r4, r1
 8007190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007194:	4615      	mov	r5, r2
 8007196:	2900      	cmp	r1, #0
 8007198:	461e      	mov	r6, r3
 800719a:	b096      	sub	sp, #88	@ 0x58
 800719c:	da0c      	bge.n	80071b8 <__swhatbuf_r+0x2c>
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	2100      	movs	r1, #0
 80071a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80071a6:	bf14      	ite	ne
 80071a8:	2340      	movne	r3, #64	@ 0x40
 80071aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071ae:	2000      	movs	r0, #0
 80071b0:	6031      	str	r1, [r6, #0]
 80071b2:	602b      	str	r3, [r5, #0]
 80071b4:	b016      	add	sp, #88	@ 0x58
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	466a      	mov	r2, sp
 80071ba:	f000 f849 	bl	8007250 <_fstat_r>
 80071be:	2800      	cmp	r0, #0
 80071c0:	dbed      	blt.n	800719e <__swhatbuf_r+0x12>
 80071c2:	9901      	ldr	r1, [sp, #4]
 80071c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071cc:	4259      	negs	r1, r3
 80071ce:	4159      	adcs	r1, r3
 80071d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071d4:	e7eb      	b.n	80071ae <__swhatbuf_r+0x22>

080071d6 <__smakebuf_r>:
 80071d6:	898b      	ldrh	r3, [r1, #12]
 80071d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071da:	079d      	lsls	r5, r3, #30
 80071dc:	4606      	mov	r6, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	d507      	bpl.n	80071f2 <__smakebuf_r+0x1c>
 80071e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071e6:	6023      	str	r3, [r4, #0]
 80071e8:	6123      	str	r3, [r4, #16]
 80071ea:	2301      	movs	r3, #1
 80071ec:	6163      	str	r3, [r4, #20]
 80071ee:	b003      	add	sp, #12
 80071f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071f2:	466a      	mov	r2, sp
 80071f4:	ab01      	add	r3, sp, #4
 80071f6:	f7ff ffc9 	bl	800718c <__swhatbuf_r>
 80071fa:	9f00      	ldr	r7, [sp, #0]
 80071fc:	4605      	mov	r5, r0
 80071fe:	4639      	mov	r1, r7
 8007200:	4630      	mov	r0, r6
 8007202:	f7fe fedb 	bl	8005fbc <_malloc_r>
 8007206:	b948      	cbnz	r0, 800721c <__smakebuf_r+0x46>
 8007208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800720c:	059a      	lsls	r2, r3, #22
 800720e:	d4ee      	bmi.n	80071ee <__smakebuf_r+0x18>
 8007210:	f023 0303 	bic.w	r3, r3, #3
 8007214:	f043 0302 	orr.w	r3, r3, #2
 8007218:	81a3      	strh	r3, [r4, #12]
 800721a:	e7e2      	b.n	80071e2 <__smakebuf_r+0xc>
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007226:	81a3      	strh	r3, [r4, #12]
 8007228:	9b01      	ldr	r3, [sp, #4]
 800722a:	6020      	str	r0, [r4, #0]
 800722c:	b15b      	cbz	r3, 8007246 <__smakebuf_r+0x70>
 800722e:	4630      	mov	r0, r6
 8007230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007234:	f000 f81e 	bl	8007274 <_isatty_r>
 8007238:	b128      	cbz	r0, 8007246 <__smakebuf_r+0x70>
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	f023 0303 	bic.w	r3, r3, #3
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	81a3      	strh	r3, [r4, #12]
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	431d      	orrs	r5, r3
 800724a:	81a5      	strh	r5, [r4, #12]
 800724c:	e7cf      	b.n	80071ee <__smakebuf_r+0x18>
	...

08007250 <_fstat_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	2300      	movs	r3, #0
 8007254:	4d06      	ldr	r5, [pc, #24]	@ (8007270 <_fstat_r+0x20>)
 8007256:	4604      	mov	r4, r0
 8007258:	4608      	mov	r0, r1
 800725a:	4611      	mov	r1, r2
 800725c:	602b      	str	r3, [r5, #0]
 800725e:	f7fa fd3b 	bl	8001cd8 <_fstat>
 8007262:	1c43      	adds	r3, r0, #1
 8007264:	d102      	bne.n	800726c <_fstat_r+0x1c>
 8007266:	682b      	ldr	r3, [r5, #0]
 8007268:	b103      	cbz	r3, 800726c <_fstat_r+0x1c>
 800726a:	6023      	str	r3, [r4, #0]
 800726c:	bd38      	pop	{r3, r4, r5, pc}
 800726e:	bf00      	nop
 8007270:	200005a4 	.word	0x200005a4

08007274 <_isatty_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	2300      	movs	r3, #0
 8007278:	4d05      	ldr	r5, [pc, #20]	@ (8007290 <_isatty_r+0x1c>)
 800727a:	4604      	mov	r4, r0
 800727c:	4608      	mov	r0, r1
 800727e:	602b      	str	r3, [r5, #0]
 8007280:	f7fa fd39 	bl	8001cf6 <_isatty>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d102      	bne.n	800728e <_isatty_r+0x1a>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	b103      	cbz	r3, 800728e <_isatty_r+0x1a>
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	200005a4 	.word	0x200005a4

08007294 <_init>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	bf00      	nop
 8007298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729a:	bc08      	pop	{r3}
 800729c:	469e      	mov	lr, r3
 800729e:	4770      	bx	lr

080072a0 <_fini>:
 80072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a2:	bf00      	nop
 80072a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a6:	bc08      	pop	{r3}
 80072a8:	469e      	mov	lr, r3
 80072aa:	4770      	bx	lr
